
eDesignMultimeter2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a84  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08007c18  08007c18  00017c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cd0  08007cd0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08007cd0  08007cd0  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007cd0  08007cd0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cd0  08007cd0  00017cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cd4  08007cd4  00017cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08007cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c30  2000001c  08007cf4  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c4c  08007cf4  00020c4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000176ed  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c27  00000000  00000000  00037739  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001190  00000000  00000000  0003a360  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001068  00000000  00000000  0003b4f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000227fb  00000000  00000000  0003c558  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011c31  00000000  00000000  0005ed53  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5176  00000000  00000000  00070984  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00145afa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048f4  00000000  00000000  00145b78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000001c 	.word	0x2000001c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007c00 	.word	0x08007c00

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000020 	.word	0x20000020
 80001d0:	08007c00 	.word	0x08007c00

080001d4 <ADC_Main_Function>:
uint16_t millivolts;
uint16_t adc_array[1000];
uint16_t adc_count = 0;

void ADC_Main_Function()
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b086      	sub	sp, #24
 80001d8:	af00      	add	r7, sp, #0
	if(adc_count > 999)
 80001da:	4b5b      	ldr	r3, [pc, #364]	; (8000348 <ADC_Main_Function+0x174>)
 80001dc:	881b      	ldrh	r3, [r3, #0]
 80001de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80001e2:	d364      	bcc.n	80002ae <ADC_Main_Function+0xda>
	{
	  // Do calculations every 1000 readings
	  adc_count = 0;
 80001e4:	4b58      	ldr	r3, [pc, #352]	; (8000348 <ADC_Main_Function+0x174>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	801a      	strh	r2, [r3, #0]
	  uint32_t total = 0;
 80001ea:	2300      	movs	r3, #0
 80001ec:	617b      	str	r3, [r7, #20]
	  uint16_t max = 0;
 80001ee:	2300      	movs	r3, #0
 80001f0:	827b      	strh	r3, [r7, #18]
	  uint16_t min = adc_array[99]; // arbitrary value
 80001f2:	4b56      	ldr	r3, [pc, #344]	; (800034c <ADC_Main_Function+0x178>)
 80001f4:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 80001f8:	823b      	strh	r3, [r7, #16]
	  int16_t diff = 0;
 80001fa:	2300      	movs	r3, #0
 80001fc:	807b      	strh	r3, [r7, #2]
	  int16_t prev_diff = 0;
 80001fe:	2300      	movs	r3, #0
 8000200:	81fb      	strh	r3, [r7, #14]
	  uint16_t mid_passes = 0;
 8000202:	2300      	movs	r3, #0
 8000204:	81bb      	strh	r3, [r7, #12]
	  // 1000 measurements at 5kHz take 200ms
	  for(int x = 0; x < 1000; x++)
 8000206:	2300      	movs	r3, #0
 8000208:	60bb      	str	r3, [r7, #8]
 800020a:	e023      	b.n	8000254 <ADC_Main_Function+0x80>
	  {
		  total += adc_array[x];
 800020c:	4a4f      	ldr	r2, [pc, #316]	; (800034c <ADC_Main_Function+0x178>)
 800020e:	68bb      	ldr	r3, [r7, #8]
 8000210:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000214:	461a      	mov	r2, r3
 8000216:	697b      	ldr	r3, [r7, #20]
 8000218:	4413      	add	r3, r2
 800021a:	617b      	str	r3, [r7, #20]
		  if(adc_array[x] > max)
 800021c:	4a4b      	ldr	r2, [pc, #300]	; (800034c <ADC_Main_Function+0x178>)
 800021e:	68bb      	ldr	r3, [r7, #8]
 8000220:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000224:	8a7a      	ldrh	r2, [r7, #18]
 8000226:	429a      	cmp	r2, r3
 8000228:	d205      	bcs.n	8000236 <ADC_Main_Function+0x62>
		  {
			  max = adc_array[x];
 800022a:	4a48      	ldr	r2, [pc, #288]	; (800034c <ADC_Main_Function+0x178>)
 800022c:	68bb      	ldr	r3, [r7, #8]
 800022e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000232:	827b      	strh	r3, [r7, #18]
 8000234:	e00b      	b.n	800024e <ADC_Main_Function+0x7a>
		  }
		  else if(adc_array[x] < min)
 8000236:	4a45      	ldr	r2, [pc, #276]	; (800034c <ADC_Main_Function+0x178>)
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800023e:	8a3a      	ldrh	r2, [r7, #16]
 8000240:	429a      	cmp	r2, r3
 8000242:	d904      	bls.n	800024e <ADC_Main_Function+0x7a>
		  {
			  min = adc_array[x];
 8000244:	4a41      	ldr	r2, [pc, #260]	; (800034c <ADC_Main_Function+0x178>)
 8000246:	68bb      	ldr	r3, [r7, #8]
 8000248:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800024c:	823b      	strh	r3, [r7, #16]
	  for(int x = 0; x < 1000; x++)
 800024e:	68bb      	ldr	r3, [r7, #8]
 8000250:	3301      	adds	r3, #1
 8000252:	60bb      	str	r3, [r7, #8]
 8000254:	68bb      	ldr	r3, [r7, #8]
 8000256:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800025a:	dbd7      	blt.n	800020c <ADC_Main_Function+0x38>
		  }
	  }
	//			  measured_offset = total/1000;
//	  MeasurementState.Offset = 1000;
	  for(int x = 0; x < 1000; x++)
 800025c:	2300      	movs	r3, #0
 800025e:	607b      	str	r3, [r7, #4]
 8000260:	e018      	b.n	8000294 <ADC_Main_Function+0xc0>
	  {
		  // Calculate frequency
		  diff = adc_array[x] - MeasurementState.Offset;
 8000262:	4a3a      	ldr	r2, [pc, #232]	; (800034c <ADC_Main_Function+0x178>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800026a:	4b39      	ldr	r3, [pc, #228]	; (8000350 <ADC_Main_Function+0x17c>)
 800026c:	891b      	ldrh	r3, [r3, #8]
 800026e:	1ad3      	subs	r3, r2, r3
 8000270:	b29b      	uxth	r3, r3
 8000272:	807b      	strh	r3, [r7, #2]
		  if(diff > 0 && prev_diff < 0)
 8000274:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000278:	2b00      	cmp	r3, #0
 800027a:	dd06      	ble.n	800028a <ADC_Main_Function+0xb6>
 800027c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000280:	2b00      	cmp	r3, #0
 8000282:	da02      	bge.n	800028a <ADC_Main_Function+0xb6>
		  {
			  mid_passes++;
 8000284:	89bb      	ldrh	r3, [r7, #12]
 8000286:	3301      	adds	r3, #1
 8000288:	81bb      	strh	r3, [r7, #12]
		  }
		  prev_diff = diff;
 800028a:	887b      	ldrh	r3, [r7, #2]
 800028c:	81fb      	strh	r3, [r7, #14]
	  for(int x = 0; x < 1000; x++)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	3301      	adds	r3, #1
 8000292:	607b      	str	r3, [r7, #4]
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800029a:	dbe2      	blt.n	8000262 <ADC_Main_Function+0x8e>
	  }
	  MeasurementState.Period = 50000/(mid_passes);
 800029c:	89bb      	ldrh	r3, [r7, #12]
 800029e:	f24c 3250 	movw	r2, #50000	; 0xc350
 80002a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80002a6:	b29a      	uxth	r2, r3
 80002a8:	4b29      	ldr	r3, [pc, #164]	; (8000350 <ADC_Main_Function+0x17c>)
 80002aa:	80da      	strh	r2, [r3, #6]
 80002ac:	e043      	b.n	8000336 <ADC_Main_Function+0x162>
//			LCD_Display_Measurement();
		}
	}
	else
	{
	  HAL_ADC_Start(&hadc1);
 80002ae:	4829      	ldr	r0, [pc, #164]	; (8000354 <ADC_Main_Function+0x180>)
 80002b0:	f002 fccc 	bl	8002c4c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80002b4:	f04f 31ff 	mov.w	r1, #4294967295
 80002b8:	4826      	ldr	r0, [pc, #152]	; (8000354 <ADC_Main_Function+0x180>)
 80002ba:	f002 fe13 	bl	8002ee4 <HAL_ADC_PollForConversion>
	  raw = HAL_ADC_GetValue(&hadc1);
 80002be:	4825      	ldr	r0, [pc, #148]	; (8000354 <ADC_Main_Function+0x180>)
 80002c0:	f002 ff12 	bl	80030e8 <HAL_ADC_GetValue>
 80002c4:	4603      	mov	r3, r0
 80002c6:	b29a      	uxth	r2, r3
 80002c8:	4b23      	ldr	r3, [pc, #140]	; (8000358 <ADC_Main_Function+0x184>)
 80002ca:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 80002cc:	4821      	ldr	r0, [pc, #132]	; (8000354 <ADC_Main_Function+0x180>)
 80002ce:	f002 fdd3 	bl	8002e78 <HAL_ADC_Stop>
	  millivolts = raw*3300/4095;
 80002d2:	4b21      	ldr	r3, [pc, #132]	; (8000358 <ADC_Main_Function+0x184>)
 80002d4:	881b      	ldrh	r3, [r3, #0]
 80002d6:	461a      	mov	r2, r3
 80002d8:	f640 43e4 	movw	r3, #3300	; 0xce4
 80002dc:	fb03 f302 	mul.w	r3, r3, r2
 80002e0:	4a1e      	ldr	r2, [pc, #120]	; (800035c <ADC_Main_Function+0x188>)
 80002e2:	fb82 1203 	smull	r1, r2, r2, r3
 80002e6:	441a      	add	r2, r3
 80002e8:	12d2      	asrs	r2, r2, #11
 80002ea:	17db      	asrs	r3, r3, #31
 80002ec:	1ad3      	subs	r3, r2, r3
 80002ee:	b29a      	uxth	r2, r3
 80002f0:	4b1b      	ldr	r3, [pc, #108]	; (8000360 <ADC_Main_Function+0x18c>)
 80002f2:	801a      	strh	r2, [r3, #0]
	  millivolts += 100*millivolts/1000; // Calibration
 80002f4:	4b1a      	ldr	r3, [pc, #104]	; (8000360 <ADC_Main_Function+0x18c>)
 80002f6:	881b      	ldrh	r3, [r3, #0]
 80002f8:	461a      	mov	r2, r3
 80002fa:	2364      	movs	r3, #100	; 0x64
 80002fc:	fb03 f302 	mul.w	r3, r3, r2
 8000300:	4a18      	ldr	r2, [pc, #96]	; (8000364 <ADC_Main_Function+0x190>)
 8000302:	fb82 1203 	smull	r1, r2, r2, r3
 8000306:	1192      	asrs	r2, r2, #6
 8000308:	17db      	asrs	r3, r3, #31
 800030a:	1ad3      	subs	r3, r2, r3
 800030c:	b29a      	uxth	r2, r3
 800030e:	4b14      	ldr	r3, [pc, #80]	; (8000360 <ADC_Main_Function+0x18c>)
 8000310:	881b      	ldrh	r3, [r3, #0]
 8000312:	4413      	add	r3, r2
 8000314:	b29a      	uxth	r2, r3
 8000316:	4b12      	ldr	r3, [pc, #72]	; (8000360 <ADC_Main_Function+0x18c>)
 8000318:	801a      	strh	r2, [r3, #0]
	  adc_array[adc_count] = millivolts;
 800031a:	4b0b      	ldr	r3, [pc, #44]	; (8000348 <ADC_Main_Function+0x174>)
 800031c:	881b      	ldrh	r3, [r3, #0]
 800031e:	461a      	mov	r2, r3
 8000320:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <ADC_Main_Function+0x18c>)
 8000322:	8819      	ldrh	r1, [r3, #0]
 8000324:	4b09      	ldr	r3, [pc, #36]	; (800034c <ADC_Main_Function+0x178>)
 8000326:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  adc_count++;
 800032a:	4b07      	ldr	r3, [pc, #28]	; (8000348 <ADC_Main_Function+0x174>)
 800032c:	881b      	ldrh	r3, [r3, #0]
 800032e:	3301      	adds	r3, #1
 8000330:	b29a      	uxth	r2, r3
 8000332:	4b05      	ldr	r3, [pc, #20]	; (8000348 <ADC_Main_Function+0x174>)
 8000334:	801a      	strh	r2, [r3, #0]
	}

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8000336:	2110      	movs	r1, #16
 8000338:	480b      	ldr	r0, [pc, #44]	; (8000368 <ADC_Main_Function+0x194>)
 800033a:	f004 f917 	bl	800456c <HAL_GPIO_TogglePin>
}
 800033e:	bf00      	nop
 8000340:	3718      	adds	r7, #24
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	20000038 	.word	0x20000038
 800034c:	20000054 	.word	0x20000054
 8000350:	20000828 	.word	0x20000828
 8000354:	20000ad4 	.word	0x20000ad4
 8000358:	20000824 	.word	0x20000824
 800035c:	80080081 	.word	0x80080081
 8000360:	20000826 	.word	0x20000826
 8000364:	10624dd3 	.word	0x10624dd3
 8000368:	48000800 	.word	0x48000800

0800036c <DAC_Switch_Output_OnOff>:
	OutputState.On = false;
	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
}

void DAC_Switch_Output_OnOff(uint8_t onoff)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	4603      	mov	r3, r0
 8000374:	71fb      	strb	r3, [r7, #7]
	if(onoff == '1'){
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	2b31      	cmp	r3, #49	; 0x31
 800037a:	d10b      	bne.n	8000394 <DAC_Switch_Output_OnOff+0x28>
		OutputState.On = true;
 800037c:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <DAC_Switch_Output_OnOff+0x4c>)
 800037e:	2201      	movs	r2, #1
 8000380:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 8000384:	2201      	movs	r2, #1
 8000386:	f44f 7100 	mov.w	r1, #512	; 0x200
 800038a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800038e:	f004 f8d5 	bl	800453c <HAL_GPIO_WritePin>
	}else if(onoff == '0'){
		OutputState.On = false;
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
	}
}
 8000392:	e00d      	b.n	80003b0 <DAC_Switch_Output_OnOff+0x44>
	}else if(onoff == '0'){
 8000394:	79fb      	ldrb	r3, [r7, #7]
 8000396:	2b30      	cmp	r3, #48	; 0x30
 8000398:	d10a      	bne.n	80003b0 <DAC_Switch_Output_OnOff+0x44>
		OutputState.On = false;
 800039a:	4b07      	ldr	r3, [pc, #28]	; (80003b8 <DAC_Switch_Output_OnOff+0x4c>)
 800039c:	2200      	movs	r2, #0
 800039e:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 80003a2:	2200      	movs	r2, #0
 80003a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ac:	f004 f8c6 	bl	800453c <HAL_GPIO_WritePin>
}
 80003b0:	bf00      	nop
 80003b2:	3708      	adds	r7, #8
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	20000834 	.word	0x20000834

080003bc <LCD_Init>:
#define lcd_D7_bit			12

DisplayStateType DisplayState;

void LCD_Init()
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0

	HAL_Delay(20);
 80003c0:	2014      	movs	r0, #20
 80003c2:	f002 fa27 	bl	8002814 <HAL_Delay>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionReset);
 80003c6:	2030      	movs	r0, #48	; 0x30
 80003c8:	f000 f95c 	bl	8000684 <LCD_Write_8bitInstruction>
	HAL_Delay(5);
 80003cc:	2005      	movs	r0, #5
 80003ce:	f002 fa21 	bl	8002814 <HAL_Delay>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionReset);
 80003d2:	2030      	movs	r0, #48	; 0x30
 80003d4:	f000 f956 	bl	8000684 <LCD_Write_8bitInstruction>
	Delay_us_10(11);
 80003d8:	200b      	movs	r0, #11
 80003da:	f001 fbe5 	bl	8001ba8 <Delay_us_10>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionReset);
 80003de:	2030      	movs	r0, #48	; 0x30
 80003e0:	f000 f950 	bl	8000684 <LCD_Write_8bitInstruction>
	Delay_us_10(5);
 80003e4:	2005      	movs	r0, #5
 80003e6:	f001 fbdf 	bl	8001ba8 <Delay_us_10>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionSet4bit);
 80003ea:	2028      	movs	r0, #40	; 0x28
 80003ec:	f000 f94a 	bl	8000684 <LCD_Write_8bitInstruction>
	Delay_us_10(5);
 80003f0:	2005      	movs	r0, #5
 80003f2:	f001 fbd9 	bl	8001ba8 <Delay_us_10>

	LCD_Write_Instruction(lcd_instruction_FunctionSet4bit);
 80003f6:	2028      	movs	r0, #40	; 0x28
 80003f8:	f000 f89c 	bl	8000534 <LCD_Write_Instruction>
	Delay_us_10(5);
 80003fc:	2005      	movs	r0, #5
 80003fe:	f001 fbd3 	bl	8001ba8 <Delay_us_10>

	LCD_Write_Instruction(lcd_instruction_DisplayOn);
 8000402:	200f      	movs	r0, #15
 8000404:	f000 f896 	bl	8000534 <LCD_Write_Instruction>
	Delay_us_10(5);
 8000408:	2005      	movs	r0, #5
 800040a:	f001 fbcd 	bl	8001ba8 <Delay_us_10>

	LCD_Write_Instruction(lcd_instruction_ClearDisplay);
 800040e:	2001      	movs	r0, #1
 8000410:	f000 f890 	bl	8000534 <LCD_Write_Instruction>
	HAL_Delay(2);
 8000414:	2002      	movs	r0, #2
 8000416:	f002 f9fd 	bl	8002814 <HAL_Delay>

	LCD_Write_Instruction(lcd_instruction_EntryMode);
 800041a:	2006      	movs	r0, #6
 800041c:	f000 f88a 	bl	8000534 <LCD_Write_Instruction>
	Delay_us_10(5);
 8000420:	2005      	movs	r0, #5
 8000422:	f001 fbc1 	bl	8001ba8 <Delay_us_10>
//	HAL_Delay(1);
}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}

0800042a <LCD_Write_String>:

void LCD_Write_String(uint8_t string[])
{
 800042a:	b580      	push	{r7, lr}
 800042c:	b084      	sub	sp, #16
 800042e:	af00      	add	r7, sp, #0
 8000430:	6078      	str	r0, [r7, #4]
//	HAL_Delay(1);
	int i = 0;
 8000432:	2300      	movs	r3, #0
 8000434:	60fb      	str	r3, [r7, #12]
	while (string[i] != 0)
 8000436:	e009      	b.n	800044c <LCD_Write_String+0x22>
	{
		LCD_Write_Character(string[i]);
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	687a      	ldr	r2, [r7, #4]
 800043c:	4413      	add	r3, r2
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	4618      	mov	r0, r3
 8000442:	f000 f84b 	bl	80004dc <LCD_Write_Character>
		i++;
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	3301      	adds	r3, #1
 800044a:	60fb      	str	r3, [r7, #12]
	while (string[i] != 0)
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	4413      	add	r3, r2
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d1ef      	bne.n	8000438 <LCD_Write_String+0xe>
//		HAL_Delay(1);
	}
}
 8000458:	bf00      	nop
 800045a:	3710      	adds	r7, #16
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}

08000460 <LCD_Write_Character_Shift>:

void LCD_Write_Character_Shift(uint8_t character)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	4603      	mov	r3, r0
 8000468:	71fb      	strb	r3, [r7, #7]
	lcd_RS_GPIO_Port->ODR |= (1<<lcd_RS_bit);			// select data register (RS High)
 800046a:	4b1a      	ldr	r3, [pc, #104]	; (80004d4 <LCD_Write_Character_Shift+0x74>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	4a19      	ldr	r2, [pc, #100]	; (80004d4 <LCD_Write_Character_Shift+0x74>)
 8000470:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000474:	6153      	str	r3, [r2, #20]
	LCD_Write_Nibbles(character);
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	4618      	mov	r0, r3
 800047a:	f000 f871 	bl	8000560 <LCD_Write_Nibbles>
	if(DisplayState.CurrentLine == Topline){
 800047e:	4b16      	ldr	r3, [pc, #88]	; (80004d8 <LCD_Write_Character_Shift+0x78>)
 8000480:	789b      	ldrb	r3, [r3, #2]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d106      	bne.n	8000494 <LCD_Write_Character_Shift+0x34>
		DisplayState.ToplineCharacters ++;
 8000486:	4b14      	ldr	r3, [pc, #80]	; (80004d8 <LCD_Write_Character_Shift+0x78>)
 8000488:	78db      	ldrb	r3, [r3, #3]
 800048a:	3301      	adds	r3, #1
 800048c:	b2da      	uxtb	r2, r3
 800048e:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <LCD_Write_Character_Shift+0x78>)
 8000490:	70da      	strb	r2, [r3, #3]
 8000492:	e009      	b.n	80004a8 <LCD_Write_Character_Shift+0x48>
	} else if (DisplayState.CurrentLine == Bottomline){
 8000494:	4b10      	ldr	r3, [pc, #64]	; (80004d8 <LCD_Write_Character_Shift+0x78>)
 8000496:	789b      	ldrb	r3, [r3, #2]
 8000498:	2b01      	cmp	r3, #1
 800049a:	d105      	bne.n	80004a8 <LCD_Write_Character_Shift+0x48>
		DisplayState.BottomlineCharacters ++;
 800049c:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <LCD_Write_Character_Shift+0x78>)
 800049e:	791b      	ldrb	r3, [r3, #4]
 80004a0:	3301      	adds	r3, #1
 80004a2:	b2da      	uxtb	r2, r3
 80004a4:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <LCD_Write_Character_Shift+0x78>)
 80004a6:	711a      	strb	r2, [r3, #4]
	}
	if((DisplayState.CurrentLine == Topline && DisplayState.ToplineCharacters > 15)
 80004a8:	4b0b      	ldr	r3, [pc, #44]	; (80004d8 <LCD_Write_Character_Shift+0x78>)
 80004aa:	789b      	ldrb	r3, [r3, #2]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d103      	bne.n	80004b8 <LCD_Write_Character_Shift+0x58>
 80004b0:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <LCD_Write_Character_Shift+0x78>)
 80004b2:	78db      	ldrb	r3, [r3, #3]
 80004b4:	2b0f      	cmp	r3, #15
 80004b6:	d807      	bhi.n	80004c8 <LCD_Write_Character_Shift+0x68>
			|| (DisplayState.CurrentLine == Bottomline && DisplayState.BottomlineCharacters > 15))
 80004b8:	4b07      	ldr	r3, [pc, #28]	; (80004d8 <LCD_Write_Character_Shift+0x78>)
 80004ba:	789b      	ldrb	r3, [r3, #2]
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d105      	bne.n	80004cc <LCD_Write_Character_Shift+0x6c>
 80004c0:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <LCD_Write_Character_Shift+0x78>)
 80004c2:	791b      	ldrb	r3, [r3, #4]
 80004c4:	2b0f      	cmp	r3, #15
 80004c6:	d901      	bls.n	80004cc <LCD_Write_Character_Shift+0x6c>
	{
		// Scroll Screen
		LCD_Shift_Left();
 80004c8:	f000 f9ac 	bl	8000824 <LCD_Shift_Left>
	}
}
 80004cc:	bf00      	nop
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	48000400 	.word	0x48000400
 80004d8:	200009d8 	.word	0x200009d8

080004dc <LCD_Write_Character>:

void LCD_Write_Character(uint8_t character)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
	lcd_RS_GPIO_Port->ODR |= (1<<lcd_RS_bit);			// select data register (RS High)
 80004e6:	4b11      	ldr	r3, [pc, #68]	; (800052c <LCD_Write_Character+0x50>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	4a10      	ldr	r2, [pc, #64]	; (800052c <LCD_Write_Character+0x50>)
 80004ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004f0:	6153      	str	r3, [r2, #20]
	LCD_Write_Nibbles(character);
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	4618      	mov	r0, r3
 80004f6:	f000 f833 	bl	8000560 <LCD_Write_Nibbles>
	if(DisplayState.CurrentLine == Topline){
 80004fa:	4b0d      	ldr	r3, [pc, #52]	; (8000530 <LCD_Write_Character+0x54>)
 80004fc:	789b      	ldrb	r3, [r3, #2]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d106      	bne.n	8000510 <LCD_Write_Character+0x34>
		DisplayState.ToplineCharacters ++;
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <LCD_Write_Character+0x54>)
 8000504:	78db      	ldrb	r3, [r3, #3]
 8000506:	3301      	adds	r3, #1
 8000508:	b2da      	uxtb	r2, r3
 800050a:	4b09      	ldr	r3, [pc, #36]	; (8000530 <LCD_Write_Character+0x54>)
 800050c:	70da      	strb	r2, [r3, #3]
	} else if (DisplayState.CurrentLine == Bottomline){
		DisplayState.BottomlineCharacters ++;
	}
}
 800050e:	e009      	b.n	8000524 <LCD_Write_Character+0x48>
	} else if (DisplayState.CurrentLine == Bottomline){
 8000510:	4b07      	ldr	r3, [pc, #28]	; (8000530 <LCD_Write_Character+0x54>)
 8000512:	789b      	ldrb	r3, [r3, #2]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d105      	bne.n	8000524 <LCD_Write_Character+0x48>
		DisplayState.BottomlineCharacters ++;
 8000518:	4b05      	ldr	r3, [pc, #20]	; (8000530 <LCD_Write_Character+0x54>)
 800051a:	791b      	ldrb	r3, [r3, #4]
 800051c:	3301      	adds	r3, #1
 800051e:	b2da      	uxtb	r2, r3
 8000520:	4b03      	ldr	r3, [pc, #12]	; (8000530 <LCD_Write_Character+0x54>)
 8000522:	711a      	strb	r2, [r3, #4]
}
 8000524:	bf00      	nop
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	48000400 	.word	0x48000400
 8000530:	200009d8 	.word	0x200009d8

08000534 <LCD_Write_Instruction>:

void LCD_Write_Instruction(uint8_t instruction)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
	lcd_RS_GPIO_Port->ODR &= ~(1<<lcd_RS_bit);			// select the Instruction Register (RS low)
 800053e:	4b07      	ldr	r3, [pc, #28]	; (800055c <LCD_Write_Instruction+0x28>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	4a06      	ldr	r2, [pc, #24]	; (800055c <LCD_Write_Instruction+0x28>)
 8000544:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000548:	6153      	str	r3, [r2, #20]
	LCD_Write_Nibbles(instruction);
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	4618      	mov	r0, r3
 800054e:	f000 f807 	bl	8000560 <LCD_Write_Nibbles>
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	48000400 	.word	0x48000400

08000560 <LCD_Write_Nibbles>:

void LCD_Write_Nibbles(uint8_t byte)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]
	Delay_us_10(1); // tsu1 > 40ns
 800056a:	2001      	movs	r0, #1
 800056c:	f001 fb1c 	bl	8001ba8 <Delay_us_10>
	lcd_E_GPIO_Port->ODR |= (1<<lcd_E_bit);			// set E high
 8000570:	4b42      	ldr	r3, [pc, #264]	; (800067c <LCD_Write_Nibbles+0x11c>)
 8000572:	695b      	ldr	r3, [r3, #20]
 8000574:	4a41      	ldr	r2, [pc, #260]	; (800067c <LCD_Write_Nibbles+0x11c>)
 8000576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800057a:	6153      	str	r3, [r2, #20]
	LCD_ZeroPins();
 800057c:	f000 f8d8 	bl	8000730 <LCD_ZeroPins>

	// Write first (most significant) nibble
	if(byte & 1<<7)	lcd_D7_GPIO_Port->ODR |= (1<<lcd_D7_bit);
 8000580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000584:	2b00      	cmp	r3, #0
 8000586:	da07      	bge.n	8000598 <LCD_Write_Nibbles+0x38>
 8000588:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000592:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000596:	6153      	str	r3, [r2, #20]
	if(byte & 1<<6)	lcd_D6_GPIO_Port->ODR |= (1<<lcd_D6_bit);
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d007      	beq.n	80005b2 <LCD_Write_Nibbles+0x52>
 80005a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005a6:	695b      	ldr	r3, [r3, #20]
 80005a8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005b0:	6153      	str	r3, [r2, #20]
	if(byte & 1<<5)	lcd_D5_GPIO_Port->ODR |= (1<<lcd_D5_bit);
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	f003 0320 	and.w	r3, r3, #32
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d005      	beq.n	80005c8 <LCD_Write_Nibbles+0x68>
 80005bc:	4b30      	ldr	r3, [pc, #192]	; (8000680 <LCD_Write_Nibbles+0x120>)
 80005be:	695b      	ldr	r3, [r3, #20]
 80005c0:	4a2f      	ldr	r2, [pc, #188]	; (8000680 <LCD_Write_Nibbles+0x120>)
 80005c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005c6:	6153      	str	r3, [r2, #20]
	if(byte & 1<<4)	lcd_D4_GPIO_Port->ODR |= (1<<lcd_D4_bit);
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	f003 0310 	and.w	r3, r3, #16
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d005      	beq.n	80005de <LCD_Write_Nibbles+0x7e>
 80005d2:	4b2b      	ldr	r3, [pc, #172]	; (8000680 <LCD_Write_Nibbles+0x120>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	4a2a      	ldr	r2, [pc, #168]	; (8000680 <LCD_Write_Nibbles+0x120>)
 80005d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005dc:	6153      	str	r3, [r2, #20]


	// Pulse Enable
//	HAL_Delay(1);
	Delay_us_10(10);
 80005de:	200a      	movs	r0, #10
 80005e0:	f001 fae2 	bl	8001ba8 <Delay_us_10>
	lcd_E_GPIO_Port->ODR &= ~(1<<lcd_E_bit);			// Set to 0
 80005e4:	4b25      	ldr	r3, [pc, #148]	; (800067c <LCD_Write_Nibbles+0x11c>)
 80005e6:	695b      	ldr	r3, [r3, #20]
 80005e8:	4a24      	ldr	r2, [pc, #144]	; (800067c <LCD_Write_Nibbles+0x11c>)
 80005ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80005ee:	6153      	str	r3, [r2, #20]
	lcd_E_GPIO_Port->ODR |= (1<<lcd_E_bit);				// Set to 1
 80005f0:	4b22      	ldr	r3, [pc, #136]	; (800067c <LCD_Write_Nibbles+0x11c>)
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	4a21      	ldr	r2, [pc, #132]	; (800067c <LCD_Write_Nibbles+0x11c>)
 80005f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005fa:	6153      	str	r3, [r2, #20]

	LCD_ZeroPins();
 80005fc:	f000 f898 	bl	8000730 <LCD_ZeroPins>
	if(byte & 1<<3)	lcd_D7_GPIO_Port->ODR |= (1<<lcd_D7_bit);
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	f003 0308 	and.w	r3, r3, #8
 8000606:	2b00      	cmp	r3, #0
 8000608:	d007      	beq.n	800061a <LCD_Write_Nibbles+0xba>
 800060a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800060e:	695b      	ldr	r3, [r3, #20]
 8000610:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000614:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000618:	6153      	str	r3, [r2, #20]
	if(byte & 1<<2)	lcd_D6_GPIO_Port->ODR |= (1<<lcd_D6_bit);
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	f003 0304 	and.w	r3, r3, #4
 8000620:	2b00      	cmp	r3, #0
 8000622:	d007      	beq.n	8000634 <LCD_Write_Nibbles+0xd4>
 8000624:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800062e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000632:	6153      	str	r3, [r2, #20]
	if(byte & 1<<1)	lcd_D5_GPIO_Port->ODR |= (1<<lcd_D5_bit);
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	f003 0302 	and.w	r3, r3, #2
 800063a:	2b00      	cmp	r3, #0
 800063c:	d005      	beq.n	800064a <LCD_Write_Nibbles+0xea>
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <LCD_Write_Nibbles+0x120>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	4a0f      	ldr	r2, [pc, #60]	; (8000680 <LCD_Write_Nibbles+0x120>)
 8000644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000648:	6153      	str	r3, [r2, #20]
	if(byte & 1<<0)	lcd_D4_GPIO_Port->ODR |= (1<<lcd_D4_bit);
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	f003 0301 	and.w	r3, r3, #1
 8000650:	2b00      	cmp	r3, #0
 8000652:	d005      	beq.n	8000660 <LCD_Write_Nibbles+0x100>
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <LCD_Write_Nibbles+0x120>)
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	4a09      	ldr	r2, [pc, #36]	; (8000680 <LCD_Write_Nibbles+0x120>)
 800065a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800065e:	6153      	str	r3, [r2, #20]

	// Drop Enable
//	HAL_Delay(1);
	Delay_us_10(10);
 8000660:	200a      	movs	r0, #10
 8000662:	f001 faa1 	bl	8001ba8 <Delay_us_10>
	lcd_E_GPIO_Port->ODR &= ~(1<<lcd_E_bit);		// Set to 0
 8000666:	4b05      	ldr	r3, [pc, #20]	; (800067c <LCD_Write_Nibbles+0x11c>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	4a04      	ldr	r2, [pc, #16]	; (800067c <LCD_Write_Nibbles+0x11c>)
 800066c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000670:	6153      	str	r3, [r2, #20]
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	48000400 	.word	0x48000400
 8000680:	48000800 	.word	0x48000800

08000684 <LCD_Write_8bitInstruction>:

void LCD_Write_8bitInstruction(uint8_t byte)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
	lcd_RS_GPIO_Port->ODR &= ~(1<<lcd_RS_bit);			// Set RS to 0
 800068e:	4b26      	ldr	r3, [pc, #152]	; (8000728 <LCD_Write_8bitInstruction+0xa4>)
 8000690:	695b      	ldr	r3, [r3, #20]
 8000692:	4a25      	ldr	r2, [pc, #148]	; (8000728 <LCD_Write_8bitInstruction+0xa4>)
 8000694:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000698:	6153      	str	r3, [r2, #20]
	Delay_us_10(1); // tsu1 > 40ns
 800069a:	2001      	movs	r0, #1
 800069c:	f001 fa84 	bl	8001ba8 <Delay_us_10>
	lcd_E_GPIO_Port->ODR |= (1<<lcd_E_bit);				// Set E to 1
 80006a0:	4b21      	ldr	r3, [pc, #132]	; (8000728 <LCD_Write_8bitInstruction+0xa4>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	4a20      	ldr	r2, [pc, #128]	; (8000728 <LCD_Write_8bitInstruction+0xa4>)
 80006a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006aa:	6153      	str	r3, [r2, #20]
	LCD_ZeroPins();
 80006ac:	f000 f840 	bl	8000730 <LCD_ZeroPins>

	// Set to zero first
	if(byte & 1<<7)	lcd_D7_GPIO_Port->ODR |= (1<<lcd_D7_bit);
 80006b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	da07      	bge.n	80006c8 <LCD_Write_8bitInstruction+0x44>
 80006b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006c6:	6153      	str	r3, [r2, #20]
	if(byte & 1<<6)	lcd_D6_GPIO_Port->ODR |= (1<<lcd_D6_bit);
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d007      	beq.n	80006e2 <LCD_Write_8bitInstruction+0x5e>
 80006d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006d6:	695b      	ldr	r3, [r3, #20]
 80006d8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006e0:	6153      	str	r3, [r2, #20]
	if(byte & 1<<5)	lcd_D5_GPIO_Port->ODR |= (1<<lcd_D5_bit);
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	f003 0320 	and.w	r3, r3, #32
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d005      	beq.n	80006f8 <LCD_Write_8bitInstruction+0x74>
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <LCD_Write_8bitInstruction+0xa8>)
 80006ee:	695b      	ldr	r3, [r3, #20]
 80006f0:	4a0e      	ldr	r2, [pc, #56]	; (800072c <LCD_Write_8bitInstruction+0xa8>)
 80006f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006f6:	6153      	str	r3, [r2, #20]
	if(byte & 1<<4)	lcd_D4_GPIO_Port->ODR |= (1<<lcd_D4_bit);
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	f003 0310 	and.w	r3, r3, #16
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d005      	beq.n	800070e <LCD_Write_8bitInstruction+0x8a>
 8000702:	4b0a      	ldr	r3, [pc, #40]	; (800072c <LCD_Write_8bitInstruction+0xa8>)
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	4a09      	ldr	r2, [pc, #36]	; (800072c <LCD_Write_8bitInstruction+0xa8>)
 8000708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800070c:	6153      	str	r3, [r2, #20]

//	HAL_Delay(1);
	Delay_us_10(1);
 800070e:	2001      	movs	r0, #1
 8000710:	f001 fa4a 	bl	8001ba8 <Delay_us_10>
	lcd_E_GPIO_Port->ODR &= ~(1<<lcd_E_bit);		// Set E to 0
 8000714:	4b04      	ldr	r3, [pc, #16]	; (8000728 <LCD_Write_8bitInstruction+0xa4>)
 8000716:	695b      	ldr	r3, [r3, #20]
 8000718:	4a03      	ldr	r2, [pc, #12]	; (8000728 <LCD_Write_8bitInstruction+0xa4>)
 800071a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800071e:	6153      	str	r3, [r2, #20]
}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	48000400 	.word	0x48000400
 800072c:	48000800 	.word	0x48000800

08000730 <LCD_ZeroPins>:

void LCD_ZeroPins()
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
	lcd_D7_GPIO_Port->ODR &= ~(1<<lcd_D7_bit);
 8000734:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800073e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000742:	6153      	str	r3, [r2, #20]
	lcd_D6_GPIO_Port->ODR &= ~(1<<lcd_D6_bit);
 8000744:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800074e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000752:	6153      	str	r3, [r2, #20]
	lcd_D5_GPIO_Port->ODR &= ~(1<<lcd_D5_bit);
 8000754:	4b08      	ldr	r3, [pc, #32]	; (8000778 <LCD_ZeroPins+0x48>)
 8000756:	695b      	ldr	r3, [r3, #20]
 8000758:	4a07      	ldr	r2, [pc, #28]	; (8000778 <LCD_ZeroPins+0x48>)
 800075a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800075e:	6153      	str	r3, [r2, #20]
	lcd_D4_GPIO_Port->ODR &= ~(1<<lcd_D4_bit);
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <LCD_ZeroPins+0x48>)
 8000762:	695b      	ldr	r3, [r3, #20]
 8000764:	4a04      	ldr	r2, [pc, #16]	; (8000778 <LCD_ZeroPins+0x48>)
 8000766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800076a:	6153      	str	r3, [r2, #20]
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	48000800 	.word	0x48000800

0800077c <LCD_Clear_Display>:

void LCD_Clear_Display()
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	LCD_Write_Instruction(lcd_instruction_ReturnHome);
 8000780:	2002      	movs	r0, #2
 8000782:	f7ff fed7 	bl	8000534 <LCD_Write_Instruction>
	Delay_us_10(200); // 2ms
 8000786:	20c8      	movs	r0, #200	; 0xc8
 8000788:	f001 fa0e 	bl	8001ba8 <Delay_us_10>
	LCD_Write_Instruction(lcd_instruction_ClearDisplay);
 800078c:	2001      	movs	r0, #1
 800078e:	f7ff fed1 	bl	8000534 <LCD_Write_Instruction>
	Delay_us_10(200); // 2ms
 8000792:	20c8      	movs	r0, #200	; 0xc8
 8000794:	f001 fa08 	bl	8001ba8 <Delay_us_10>
	DisplayState.ToplineCharacters = 0;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <LCD_Clear_Display+0x38>)
 800079a:	2200      	movs	r2, #0
 800079c:	70da      	strb	r2, [r3, #3]
	DisplayState.BottomlineCharacters = 0;
 800079e:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <LCD_Clear_Display+0x38>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	711a      	strb	r2, [r3, #4]
	DisplayState.CurrentLine = Topline;
 80007a4:	4b03      	ldr	r3, [pc, #12]	; (80007b4 <LCD_Clear_Display+0x38>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	709a      	strb	r2, [r3, #2]
	DisplayState.DisplayPosition = 0;
 80007aa:	4b02      	ldr	r3, [pc, #8]	; (80007b4 <LCD_Clear_Display+0x38>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	725a      	strb	r2, [r3, #9]
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	200009d8 	.word	0x200009d8

080007b8 <LCD_NewLine>:

void LCD_NewLine()
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	LCD_Write_Instruction(lcd_instruction_CursorNewLine);
 80007bc:	20c0      	movs	r0, #192	; 0xc0
 80007be:	f7ff feb9 	bl	8000534 <LCD_Write_Instruction>
	Delay_us_10(5);
 80007c2:	2005      	movs	r0, #5
 80007c4:	f001 f9f0 	bl	8001ba8 <Delay_us_10>
	DisplayState.CurrentLine = Bottomline;
 80007c8:	4b02      	ldr	r3, [pc, #8]	; (80007d4 <LCD_NewLine+0x1c>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	709a      	strb	r2, [r3, #2]
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	200009d8 	.word	0x200009d8

080007d8 <LCD_AutoScroll>:

void LCD_AutoScroll()
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
	uint8_t returnflag = DisplayState.DisplayPosition + 12;
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <LCD_AutoScroll+0x48>)
 80007e0:	7a5b      	ldrb	r3, [r3, #9]
 80007e2:	330c      	adds	r3, #12
 80007e4:	71bb      	strb	r3, [r7, #6]
	uint8_t longestline;
	if(DisplayState.ToplineCharacters >= DisplayState.BottomlineCharacters) longestline = DisplayState.ToplineCharacters;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <LCD_AutoScroll+0x48>)
 80007e8:	78da      	ldrb	r2, [r3, #3]
 80007ea:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <LCD_AutoScroll+0x48>)
 80007ec:	791b      	ldrb	r3, [r3, #4]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d303      	bcc.n	80007fa <LCD_AutoScroll+0x22>
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <LCD_AutoScroll+0x48>)
 80007f4:	78db      	ldrb	r3, [r3, #3]
 80007f6:	71fb      	strb	r3, [r7, #7]
 80007f8:	e002      	b.n	8000800 <LCD_AutoScroll+0x28>
	else longestline = DisplayState.BottomlineCharacters;
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <LCD_AutoScroll+0x48>)
 80007fc:	791b      	ldrb	r3, [r3, #4]
 80007fe:	71fb      	strb	r3, [r7, #7]
	if(longestline > 16)
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	2b10      	cmp	r3, #16
 8000804:	d908      	bls.n	8000818 <LCD_AutoScroll+0x40>
	{
		if(returnflag > longestline)
 8000806:	79ba      	ldrb	r2, [r7, #6]
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	429a      	cmp	r2, r3
 800080c:	d902      	bls.n	8000814 <LCD_AutoScroll+0x3c>
		{
			LCD_Shift_Home();
 800080e:	f000 f82d 	bl	800086c <LCD_Shift_Home>
		else
		{
			LCD_Shift_Left();
		}
	}
}
 8000812:	e001      	b.n	8000818 <LCD_AutoScroll+0x40>
			LCD_Shift_Left();
 8000814:	f000 f806 	bl	8000824 <LCD_Shift_Left>
}
 8000818:	bf00      	nop
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	200009d8 	.word	0x200009d8

08000824 <LCD_Shift_Left>:

void LCD_Shift_Left()
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	LCD_Write_Instruction(lcd_instruction_DisplayShiftLeft);
 8000828:	2018      	movs	r0, #24
 800082a:	f7ff fe83 	bl	8000534 <LCD_Write_Instruction>
	Delay_us_10(5);
 800082e:	2005      	movs	r0, #5
 8000830:	f001 f9ba 	bl	8001ba8 <Delay_us_10>
	DisplayState.DisplayPosition ++;
 8000834:	4b03      	ldr	r3, [pc, #12]	; (8000844 <LCD_Shift_Left+0x20>)
 8000836:	7a5b      	ldrb	r3, [r3, #9]
 8000838:	3301      	adds	r3, #1
 800083a:	b2da      	uxtb	r2, r3
 800083c:	4b01      	ldr	r3, [pc, #4]	; (8000844 <LCD_Shift_Left+0x20>)
 800083e:	725a      	strb	r2, [r3, #9]
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200009d8 	.word	0x200009d8

08000848 <LCD_Shift_Right>:

void LCD_Shift_Right()
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	LCD_Write_Instruction(lcd_instruction_DisplayShiftRight);
 800084c:	201c      	movs	r0, #28
 800084e:	f7ff fe71 	bl	8000534 <LCD_Write_Instruction>
	Delay_us_10(5);
 8000852:	2005      	movs	r0, #5
 8000854:	f001 f9a8 	bl	8001ba8 <Delay_us_10>
	DisplayState.DisplayPosition -= 1;
 8000858:	4b03      	ldr	r3, [pc, #12]	; (8000868 <LCD_Shift_Right+0x20>)
 800085a:	7a5b      	ldrb	r3, [r3, #9]
 800085c:	3b01      	subs	r3, #1
 800085e:	b2da      	uxtb	r2, r3
 8000860:	4b01      	ldr	r3, [pc, #4]	; (8000868 <LCD_Shift_Right+0x20>)
 8000862:	725a      	strb	r2, [r3, #9]
}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200009d8 	.word	0x200009d8

0800086c <LCD_Shift_Home>:

void LCD_Shift_Home()
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
	uint8_t num_shifted = DisplayState.DisplayPosition;
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <LCD_Shift_Home+0x2c>)
 8000874:	7a5b      	ldrb	r3, [r3, #9]
 8000876:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < num_shifted; i++)
 8000878:	2300      	movs	r3, #0
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	e004      	b.n	8000888 <LCD_Shift_Home+0x1c>
	{
		LCD_Shift_Right();
 800087e:	f7ff ffe3 	bl	8000848 <LCD_Shift_Right>
	for(int i = 0; i < num_shifted; i++)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	3301      	adds	r3, #1
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	78fb      	ldrb	r3, [r7, #3]
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	429a      	cmp	r2, r3
 800088e:	dbf6      	blt.n	800087e <LCD_Shift_Home+0x12>
	}
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200009d8 	.word	0x200009d8

0800089c <LCD_Cursor_Home>:

void LCD_Cursor_Home()
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	LCD_Write_Instruction(lcd_instruction_CursorHome);
 80008a0:	2080      	movs	r0, #128	; 0x80
 80008a2:	f7ff fe47 	bl	8000534 <LCD_Write_Instruction>
	Delay_us_10(5);
 80008a6:	2005      	movs	r0, #5
 80008a8:	f001 f97e 	bl	8001ba8 <Delay_us_10>
	DisplayState.ToplineCharacters = 0;
 80008ac:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <LCD_Cursor_Home+0x28>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	70da      	strb	r2, [r3, #3]
	DisplayState.BottomlineCharacters = 0;
 80008b2:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <LCD_Cursor_Home+0x28>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	711a      	strb	r2, [r3, #4]
	DisplayState.CurrentLine = Topline;
 80008b8:	4b02      	ldr	r3, [pc, #8]	; (80008c4 <LCD_Cursor_Home+0x28>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	709a      	strb	r2, [r3, #2]
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200009d8 	.word	0x200009d8

080008c8 <LCD_changeDisplayMode>:

void LCD_changeDisplayMode(DisplayMode newDisplayMode)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
	LCD_Clear_Display();
 80008d2:	f7ff ff53 	bl	800077c <LCD_Clear_Display>
	if (newDisplayMode == Menu)
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d11b      	bne.n	8000914 <LCD_changeDisplayMode+0x4c>
	{
		// Change to Menu Display State
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	2120      	movs	r1, #32
 80008e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e4:	f003 fe2a 	bl	800453c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2180      	movs	r1, #128	; 0x80
 80008ec:	4829      	ldr	r0, [pc, #164]	; (8000994 <LCD_changeDisplayMode+0xcc>)
 80008ee:	f003 fe25 	bl	800453c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008fc:	f003 fe1e 	bl	800453c <HAL_GPIO_WritePin>
		LCD_Display_Menu();
 8000900:	f000 f84c 	bl	800099c <LCD_Display_Menu>
		DisplayState.LastMode = DisplayState.Mode;
 8000904:	4b24      	ldr	r3, [pc, #144]	; (8000998 <LCD_changeDisplayMode+0xd0>)
 8000906:	781a      	ldrb	r2, [r3, #0]
 8000908:	4b23      	ldr	r3, [pc, #140]	; (8000998 <LCD_changeDisplayMode+0xd0>)
 800090a:	705a      	strb	r2, [r3, #1]
		DisplayState.Mode = Menu;
 800090c:	4b22      	ldr	r3, [pc, #136]	; (8000998 <LCD_changeDisplayMode+0xd0>)
 800090e:	2200      	movs	r2, #0
 8000910:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
		DisplayState.LastMode = DisplayState.Mode;
		DisplayState.Mode = Output;
	}
}
 8000912:	e03a      	b.n	800098a <LCD_changeDisplayMode+0xc2>
	else if (newDisplayMode == Measurement)
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	2b01      	cmp	r3, #1
 8000918:	d11b      	bne.n	8000952 <LCD_changeDisplayMode+0x8a>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	2120      	movs	r1, #32
 800091e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000922:	f003 fe0b 	bl	800453c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000926:	2201      	movs	r2, #1
 8000928:	2180      	movs	r1, #128	; 0x80
 800092a:	481a      	ldr	r0, [pc, #104]	; (8000994 <LCD_changeDisplayMode+0xcc>)
 800092c:	f003 fe06 	bl	800453c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000936:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800093a:	f003 fdff 	bl	800453c <HAL_GPIO_WritePin>
		LCD_Display_Measurement();
 800093e:	f000 f843 	bl	80009c8 <LCD_Display_Measurement>
		DisplayState.LastMode = DisplayState.Mode;
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <LCD_changeDisplayMode+0xd0>)
 8000944:	781a      	ldrb	r2, [r3, #0]
 8000946:	4b14      	ldr	r3, [pc, #80]	; (8000998 <LCD_changeDisplayMode+0xd0>)
 8000948:	705a      	strb	r2, [r3, #1]
		DisplayState.Mode = Measurement;
 800094a:	4b13      	ldr	r3, [pc, #76]	; (8000998 <LCD_changeDisplayMode+0xd0>)
 800094c:	2201      	movs	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]
}
 8000950:	e01b      	b.n	800098a <LCD_changeDisplayMode+0xc2>
	else if (newDisplayMode == Output)
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	2b02      	cmp	r3, #2
 8000956:	d118      	bne.n	800098a <LCD_changeDisplayMode+0xc2>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	2120      	movs	r1, #32
 800095c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000960:	f003 fdec 	bl	800453c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	2180      	movs	r1, #128	; 0x80
 8000968:	480a      	ldr	r0, [pc, #40]	; (8000994 <LCD_changeDisplayMode+0xcc>)
 800096a:	f003 fde7 	bl	800453c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 800096e:	2201      	movs	r2, #1
 8000970:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000974:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000978:	f003 fde0 	bl	800453c <HAL_GPIO_WritePin>
		DisplayState.LastMode = DisplayState.Mode;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <LCD_changeDisplayMode+0xd0>)
 800097e:	781a      	ldrb	r2, [r3, #0]
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <LCD_changeDisplayMode+0xd0>)
 8000982:	705a      	strb	r2, [r3, #1]
		DisplayState.Mode = Output;
 8000984:	4b04      	ldr	r3, [pc, #16]	; (8000998 <LCD_changeDisplayMode+0xd0>)
 8000986:	2202      	movs	r2, #2
 8000988:	701a      	strb	r2, [r3, #0]
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	48000800 	.word	0x48000800
 8000998:	200009d8 	.word	0x200009d8

0800099c <LCD_Display_Menu>:

void LCD_Display_Menu()
{
 800099c:	b590      	push	{r4, r7, lr}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
	uint8_t lcd_string[] = "Menu Top Level";
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <LCD_Display_Menu+0x28>)
 80009a4:	463c      	mov	r4, r7
 80009a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009a8:	c407      	stmia	r4!, {r0, r1, r2}
 80009aa:	8023      	strh	r3, [r4, #0]
 80009ac:	3402      	adds	r4, #2
 80009ae:	0c1b      	lsrs	r3, r3, #16
 80009b0:	7023      	strb	r3, [r4, #0]
	LCD_Write_String(lcd_string);
 80009b2:	463b      	mov	r3, r7
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fd38 	bl	800042a <LCD_Write_String>
}
 80009ba:	bf00      	nop
 80009bc:	3714      	adds	r7, #20
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd90      	pop	{r4, r7, pc}
 80009c2:	bf00      	nop
 80009c4:	08007c18 	.word	0x08007c18

080009c8 <LCD_Display_Measurement>:

void LCD_Display_Measurement()
{
 80009c8:	b5b0      	push	{r4, r5, r7, lr}
 80009ca:	b09e      	sub	sp, #120	; 0x78
 80009cc:	af00      	add	r7, sp, #0
//	LCD_Clear_Display();
	LCD_Cursor_Home();
 80009ce:	f7ff ff65 	bl	800089c <LCD_Cursor_Home>
	switch(MeasurementState.Mode)
 80009d2:	4b44      	ldr	r3, [pc, #272]	; (8000ae4 <LCD_Display_Measurement+0x11c>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b04      	cmp	r3, #4
 80009d8:	f200 81c8 	bhi.w	8000d6c <LCD_Display_Measurement+0x3a4>
 80009dc:	a201      	add	r2, pc, #4	; (adr r2, 80009e4 <LCD_Display_Measurement+0x1c>)
 80009de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e2:	bf00      	nop
 80009e4:	080009f9 	.word	0x080009f9
 80009e8:	08000ac3 	.word	0x08000ac3
 80009ec:	08000afd 	.word	0x08000afd
 80009f0:	08000d17 	.word	0x08000d17
 80009f4:	08000d37 	.word	0x08000d37
	{
		case DV:
		{
			uint8_t topline[] = "x.xxxV";
 80009f8:	4a3b      	ldr	r2, [pc, #236]	; (8000ae8 <LCD_Display_Measurement+0x120>)
 80009fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80009fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a02:	6018      	str	r0, [r3, #0]
 8000a04:	3304      	adds	r3, #4
 8000a06:	8019      	strh	r1, [r3, #0]
 8000a08:	3302      	adds	r3, #2
 8000a0a:	0c0a      	lsrs	r2, r1, #16
 8000a0c:	701a      	strb	r2, [r3, #0]
			topline[0] = ((MeasurementState.Offset/1000) % 10) + 48;
 8000a0e:	4b35      	ldr	r3, [pc, #212]	; (8000ae4 <LCD_Display_Measurement+0x11c>)
 8000a10:	891b      	ldrh	r3, [r3, #8]
 8000a12:	4a36      	ldr	r2, [pc, #216]	; (8000aec <LCD_Display_Measurement+0x124>)
 8000a14:	fba2 2303 	umull	r2, r3, r2, r3
 8000a18:	099b      	lsrs	r3, r3, #6
 8000a1a:	b29a      	uxth	r2, r3
 8000a1c:	4b34      	ldr	r3, [pc, #208]	; (8000af0 <LCD_Display_Measurement+0x128>)
 8000a1e:	fba3 1302 	umull	r1, r3, r3, r2
 8000a22:	08d9      	lsrs	r1, r3, #3
 8000a24:	460b      	mov	r3, r1
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	440b      	add	r3, r1
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	3330      	adds	r3, #48	; 0x30
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
			topline[2] = ((MeasurementState.Offset/100) % 10) + 48;
 8000a3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ae4 <LCD_Display_Measurement+0x11c>)
 8000a3c:	891b      	ldrh	r3, [r3, #8]
 8000a3e:	4a2d      	ldr	r2, [pc, #180]	; (8000af4 <LCD_Display_Measurement+0x12c>)
 8000a40:	fba2 2303 	umull	r2, r3, r2, r3
 8000a44:	095b      	lsrs	r3, r3, #5
 8000a46:	b29a      	uxth	r2, r3
 8000a48:	4b29      	ldr	r3, [pc, #164]	; (8000af0 <LCD_Display_Measurement+0x128>)
 8000a4a:	fba3 1302 	umull	r1, r3, r3, r2
 8000a4e:	08d9      	lsrs	r1, r3, #3
 8000a50:	460b      	mov	r3, r1
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	440b      	add	r3, r1
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	3330      	adds	r3, #48	; 0x30
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
			topline[3] = ((MeasurementState.Offset/10) % 10) + 48;
 8000a66:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <LCD_Display_Measurement+0x11c>)
 8000a68:	891b      	ldrh	r3, [r3, #8]
 8000a6a:	4a21      	ldr	r2, [pc, #132]	; (8000af0 <LCD_Display_Measurement+0x128>)
 8000a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a70:	08db      	lsrs	r3, r3, #3
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	4b1e      	ldr	r3, [pc, #120]	; (8000af0 <LCD_Display_Measurement+0x128>)
 8000a76:	fba3 1302 	umull	r1, r3, r3, r2
 8000a7a:	08d9      	lsrs	r1, r3, #3
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	440b      	add	r3, r1
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	3330      	adds	r3, #48	; 0x30
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
			topline[4] = ((MeasurementState.Offset) % 10) + 48;
 8000a92:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <LCD_Display_Measurement+0x11c>)
 8000a94:	891a      	ldrh	r2, [r3, #8]
 8000a96:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <LCD_Display_Measurement+0x128>)
 8000a98:	fba3 1302 	umull	r1, r3, r3, r2
 8000a9c:	08d9      	lsrs	r1, r3, #3
 8000a9e:	460b      	mov	r3, r1
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	440b      	add	r3, r1
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	1ad3      	subs	r3, r2, r3
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	3330      	adds	r3, #48	; 0x30
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
			LCD_Write_String(topline);
 8000ab4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fcb6 	bl	800042a <LCD_Write_String>
			break;
 8000abe:	bf00      	nop
 8000ac0:	e155      	b.n	8000d6e <LCD_Display_Measurement+0x3a6>
		}
		case DI:
		{
			uint8_t topline[] = "DC Current";
 8000ac2:	4a0d      	ldr	r2, [pc, #52]	; (8000af8 <LCD_Display_Measurement+0x130>)
 8000ac4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ac8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000aca:	c303      	stmia	r3!, {r0, r1}
 8000acc:	801a      	strh	r2, [r3, #0]
 8000ace:	3302      	adds	r3, #2
 8000ad0:	0c12      	lsrs	r2, r2, #16
 8000ad2:	701a      	strb	r2, [r3, #0]
			LCD_Write_String(topline);
 8000ad4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fca6 	bl	800042a <LCD_Write_String>
			break;
 8000ade:	bf00      	nop
 8000ae0:	e145      	b.n	8000d6e <LCD_Display_Measurement+0x3a6>
 8000ae2:	bf00      	nop
 8000ae4:	20000828 	.word	0x20000828
 8000ae8:	08007c28 	.word	0x08007c28
 8000aec:	10624dd3 	.word	0x10624dd3
 8000af0:	cccccccd 	.word	0xcccccccd
 8000af4:	51eb851f 	.word	0x51eb851f
 8000af8:	08007c30 	.word	0x08007c30
		}
		case AV:
		{
			uint8_t topline[] = "O:x.xxxV,A:x.xxxV,F:xxxxHz";
 8000afc:	4b94      	ldr	r3, [pc, #592]	; (8000d50 <LCD_Display_Measurement+0x388>)
 8000afe:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8000b02:	461d      	mov	r5, r3
 8000b04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b0c:	c403      	stmia	r4!, {r0, r1}
 8000b0e:	8022      	strh	r2, [r4, #0]
 8000b10:	3402      	adds	r4, #2
 8000b12:	0c13      	lsrs	r3, r2, #16
 8000b14:	7023      	strb	r3, [r4, #0]
			topline[2] = ((MeasurementState.Offset/1000) % 10) + 48;
 8000b16:	4b8f      	ldr	r3, [pc, #572]	; (8000d54 <LCD_Display_Measurement+0x38c>)
 8000b18:	891b      	ldrh	r3, [r3, #8]
 8000b1a:	4a8f      	ldr	r2, [pc, #572]	; (8000d58 <LCD_Display_Measurement+0x390>)
 8000b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b20:	099b      	lsrs	r3, r3, #6
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	4b8d      	ldr	r3, [pc, #564]	; (8000d5c <LCD_Display_Measurement+0x394>)
 8000b26:	fba3 1302 	umull	r1, r3, r3, r2
 8000b2a:	08d9      	lsrs	r1, r3, #3
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	440b      	add	r3, r1
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	3330      	adds	r3, #48	; 0x30
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
			topline[4] = ((MeasurementState.Offset/100) % 10) + 48;
 8000b42:	4b84      	ldr	r3, [pc, #528]	; (8000d54 <LCD_Display_Measurement+0x38c>)
 8000b44:	891b      	ldrh	r3, [r3, #8]
 8000b46:	4a86      	ldr	r2, [pc, #536]	; (8000d60 <LCD_Display_Measurement+0x398>)
 8000b48:	fba2 2303 	umull	r2, r3, r2, r3
 8000b4c:	095b      	lsrs	r3, r3, #5
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	4b82      	ldr	r3, [pc, #520]	; (8000d5c <LCD_Display_Measurement+0x394>)
 8000b52:	fba3 1302 	umull	r1, r3, r3, r2
 8000b56:	08d9      	lsrs	r1, r3, #3
 8000b58:	460b      	mov	r3, r1
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	440b      	add	r3, r1
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	3330      	adds	r3, #48	; 0x30
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
			topline[5] = ((MeasurementState.Offset/10) % 10) + 48;
 8000b6e:	4b79      	ldr	r3, [pc, #484]	; (8000d54 <LCD_Display_Measurement+0x38c>)
 8000b70:	891b      	ldrh	r3, [r3, #8]
 8000b72:	4a7a      	ldr	r2, [pc, #488]	; (8000d5c <LCD_Display_Measurement+0x394>)
 8000b74:	fba2 2303 	umull	r2, r3, r2, r3
 8000b78:	08db      	lsrs	r3, r3, #3
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	4b77      	ldr	r3, [pc, #476]	; (8000d5c <LCD_Display_Measurement+0x394>)
 8000b7e:	fba3 1302 	umull	r1, r3, r3, r2
 8000b82:	08d9      	lsrs	r1, r3, #3
 8000b84:	460b      	mov	r3, r1
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	440b      	add	r3, r1
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	3330      	adds	r3, #48	; 0x30
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			topline[6] = ((MeasurementState.Offset) % 10) + 48;
 8000b9a:	4b6e      	ldr	r3, [pc, #440]	; (8000d54 <LCD_Display_Measurement+0x38c>)
 8000b9c:	891a      	ldrh	r2, [r3, #8]
 8000b9e:	4b6f      	ldr	r3, [pc, #444]	; (8000d5c <LCD_Display_Measurement+0x394>)
 8000ba0:	fba3 1302 	umull	r1, r3, r3, r2
 8000ba4:	08d9      	lsrs	r1, r3, #3
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	440b      	add	r3, r1
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	1ad3      	subs	r3, r2, r3
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	3330      	adds	r3, #48	; 0x30
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
			topline[11] = ((MeasurementState.Amplitude/1000) % 10) + 48;
 8000bbc:	4b65      	ldr	r3, [pc, #404]	; (8000d54 <LCD_Display_Measurement+0x38c>)
 8000bbe:	885b      	ldrh	r3, [r3, #2]
 8000bc0:	4a65      	ldr	r2, [pc, #404]	; (8000d58 <LCD_Display_Measurement+0x390>)
 8000bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc6:	099b      	lsrs	r3, r3, #6
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	4b64      	ldr	r3, [pc, #400]	; (8000d5c <LCD_Display_Measurement+0x394>)
 8000bcc:	fba3 1302 	umull	r1, r3, r3, r2
 8000bd0:	08d9      	lsrs	r1, r3, #3
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	440b      	add	r3, r1
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	3330      	adds	r3, #48	; 0x30
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			topline[13] = ((MeasurementState.Amplitude/100) % 10) + 48;
 8000be8:	4b5a      	ldr	r3, [pc, #360]	; (8000d54 <LCD_Display_Measurement+0x38c>)
 8000bea:	885b      	ldrh	r3, [r3, #2]
 8000bec:	4a5c      	ldr	r2, [pc, #368]	; (8000d60 <LCD_Display_Measurement+0x398>)
 8000bee:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf2:	095b      	lsrs	r3, r3, #5
 8000bf4:	b29a      	uxth	r2, r3
 8000bf6:	4b59      	ldr	r3, [pc, #356]	; (8000d5c <LCD_Display_Measurement+0x394>)
 8000bf8:	fba3 1302 	umull	r1, r3, r3, r2
 8000bfc:	08d9      	lsrs	r1, r3, #3
 8000bfe:	460b      	mov	r3, r1
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	440b      	add	r3, r1
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	1ad3      	subs	r3, r2, r3
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	3330      	adds	r3, #48	; 0x30
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
			topline[14] = ((MeasurementState.Amplitude/10) % 10) + 48;
 8000c14:	4b4f      	ldr	r3, [pc, #316]	; (8000d54 <LCD_Display_Measurement+0x38c>)
 8000c16:	885b      	ldrh	r3, [r3, #2]
 8000c18:	4a50      	ldr	r2, [pc, #320]	; (8000d5c <LCD_Display_Measurement+0x394>)
 8000c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c1e:	08db      	lsrs	r3, r3, #3
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	4b4e      	ldr	r3, [pc, #312]	; (8000d5c <LCD_Display_Measurement+0x394>)
 8000c24:	fba3 1302 	umull	r1, r3, r3, r2
 8000c28:	08d9      	lsrs	r1, r3, #3
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	440b      	add	r3, r1
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	1ad3      	subs	r3, r2, r3
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	3330      	adds	r3, #48	; 0x30
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			topline[15] = ((MeasurementState.Amplitude) % 10) + 48;
 8000c40:	4b44      	ldr	r3, [pc, #272]	; (8000d54 <LCD_Display_Measurement+0x38c>)
 8000c42:	885a      	ldrh	r2, [r3, #2]
 8000c44:	4b45      	ldr	r3, [pc, #276]	; (8000d5c <LCD_Display_Measurement+0x394>)
 8000c46:	fba3 1302 	umull	r1, r3, r3, r2
 8000c4a:	08d9      	lsrs	r1, r3, #3
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	440b      	add	r3, r1
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	3330      	adds	r3, #48	; 0x30
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			topline[20] = ((MeasurementState.Frequency/1000) % 10) + 48;
 8000c62:	4b3c      	ldr	r3, [pc, #240]	; (8000d54 <LCD_Display_Measurement+0x38c>)
 8000c64:	889b      	ldrh	r3, [r3, #4]
 8000c66:	4a3c      	ldr	r2, [pc, #240]	; (8000d58 <LCD_Display_Measurement+0x390>)
 8000c68:	fba2 2303 	umull	r2, r3, r2, r3
 8000c6c:	099b      	lsrs	r3, r3, #6
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	4b3a      	ldr	r3, [pc, #232]	; (8000d5c <LCD_Display_Measurement+0x394>)
 8000c72:	fba3 1302 	umull	r1, r3, r3, r2
 8000c76:	08d9      	lsrs	r1, r3, #3
 8000c78:	460b      	mov	r3, r1
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	3330      	adds	r3, #48	; 0x30
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
			topline[21] = ((MeasurementState.Frequency/100) % 10) + 48;
 8000c8e:	4b31      	ldr	r3, [pc, #196]	; (8000d54 <LCD_Display_Measurement+0x38c>)
 8000c90:	889b      	ldrh	r3, [r3, #4]
 8000c92:	4a33      	ldr	r2, [pc, #204]	; (8000d60 <LCD_Display_Measurement+0x398>)
 8000c94:	fba2 2303 	umull	r2, r3, r2, r3
 8000c98:	095b      	lsrs	r3, r3, #5
 8000c9a:	b29a      	uxth	r2, r3
 8000c9c:	4b2f      	ldr	r3, [pc, #188]	; (8000d5c <LCD_Display_Measurement+0x394>)
 8000c9e:	fba3 1302 	umull	r1, r3, r3, r2
 8000ca2:	08d9      	lsrs	r1, r3, #3
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	440b      	add	r3, r1
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	3330      	adds	r3, #48	; 0x30
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
			topline[22] = ((MeasurementState.Frequency/10) % 10) + 48;
 8000cba:	4b26      	ldr	r3, [pc, #152]	; (8000d54 <LCD_Display_Measurement+0x38c>)
 8000cbc:	889b      	ldrh	r3, [r3, #4]
 8000cbe:	4a27      	ldr	r2, [pc, #156]	; (8000d5c <LCD_Display_Measurement+0x394>)
 8000cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc4:	08db      	lsrs	r3, r3, #3
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	4b24      	ldr	r3, [pc, #144]	; (8000d5c <LCD_Display_Measurement+0x394>)
 8000cca:	fba3 1302 	umull	r1, r3, r3, r2
 8000cce:	08d9      	lsrs	r1, r3, #3
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	440b      	add	r3, r1
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	3330      	adds	r3, #48	; 0x30
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			topline[23] = ((MeasurementState.Frequency) % 10) + 48;
 8000ce6:	4b1b      	ldr	r3, [pc, #108]	; (8000d54 <LCD_Display_Measurement+0x38c>)
 8000ce8:	889a      	ldrh	r2, [r3, #4]
 8000cea:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <LCD_Display_Measurement+0x394>)
 8000cec:	fba3 1302 	umull	r1, r3, r3, r2
 8000cf0:	08d9      	lsrs	r1, r3, #3
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	440b      	add	r3, r1
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	3330      	adds	r3, #48	; 0x30
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			LCD_Write_String(topline);
 8000d08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fb8c 	bl	800042a <LCD_Write_String>
			break;
 8000d12:	bf00      	nop
 8000d14:	e02b      	b.n	8000d6e <LCD_Display_Measurement+0x3a6>
		}
		case AI:
		{
			uint8_t topline[] = "AC Current";
 8000d16:	4a13      	ldr	r2, [pc, #76]	; (8000d64 <LCD_Display_Measurement+0x39c>)
 8000d18:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d1e:	c303      	stmia	r3!, {r0, r1}
 8000d20:	801a      	strh	r2, [r3, #0]
 8000d22:	3302      	adds	r3, #2
 8000d24:	0c12      	lsrs	r2, r2, #16
 8000d26:	701a      	strb	r2, [r3, #0]
			LCD_Write_String(topline);
 8000d28:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fb7c 	bl	800042a <LCD_Write_String>
			break;
 8000d32:	bf00      	nop
 8000d34:	e01b      	b.n	8000d6e <LCD_Display_Measurement+0x3a6>
		}
		case TC:
		{
			uint8_t topline[] = "Temperature";
 8000d36:	4a0c      	ldr	r2, [pc, #48]	; (8000d68 <LCD_Display_Measurement+0x3a0>)
 8000d38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			LCD_Write_String(topline);
 8000d42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fb6f 	bl	800042a <LCD_Write_String>
			break;
 8000d4c:	bf00      	nop
 8000d4e:	e00e      	b.n	8000d6e <LCD_Display_Measurement+0x3a6>
 8000d50:	08007c3c 	.word	0x08007c3c
 8000d54:	20000828 	.word	0x20000828
 8000d58:	10624dd3 	.word	0x10624dd3
 8000d5c:	cccccccd 	.word	0xcccccccd
 8000d60:	51eb851f 	.word	0x51eb851f
 8000d64:	08007c58 	.word	0x08007c58
 8000d68:	08007c64 	.word	0x08007c64
		}
		default:
			// Problems
			break;
 8000d6c:	bf00      	nop
	}
	LCD_NewLine();
 8000d6e:	f7ff fd23 	bl	80007b8 <LCD_NewLine>
	if(OutputState.On){
 8000d72:	4b39      	ldr	r3, [pc, #228]	; (8000e58 <LCD_Display_Measurement+0x490>)
 8000d74:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	f000 818d 	beq.w	8001098 <LCD_Display_Measurement+0x6d0>
		if(OutputState.Mode == d){
 8000d7e:	4b36      	ldr	r3, [pc, #216]	; (8000e58 <LCD_Display_Measurement+0x490>)
 8000d80:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 8000d84:	2b64      	cmp	r3, #100	; 0x64
 8000d86:	d171      	bne.n	8000e6c <LCD_Display_Measurement+0x4a4>
			uint8_t bottomline[] = "x.xxxV";
 8000d88:	4a34      	ldr	r2, [pc, #208]	; (8000e5c <LCD_Display_Measurement+0x494>)
 8000d8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d92:	6018      	str	r0, [r3, #0]
 8000d94:	3304      	adds	r3, #4
 8000d96:	8019      	strh	r1, [r3, #0]
 8000d98:	3302      	adds	r3, #2
 8000d9a:	0c0a      	lsrs	r2, r1, #16
 8000d9c:	701a      	strb	r2, [r3, #0]
			bottomline[0] = ((OutputState.DCValue/1000) % 10) + 48;
 8000d9e:	4b2e      	ldr	r3, [pc, #184]	; (8000e58 <LCD_Display_Measurement+0x490>)
 8000da0:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 8000da4:	4a2e      	ldr	r2, [pc, #184]	; (8000e60 <LCD_Display_Measurement+0x498>)
 8000da6:	fba2 2303 	umull	r2, r3, r2, r3
 8000daa:	099b      	lsrs	r3, r3, #6
 8000dac:	b29a      	uxth	r2, r3
 8000dae:	4b2d      	ldr	r3, [pc, #180]	; (8000e64 <LCD_Display_Measurement+0x49c>)
 8000db0:	fba3 1302 	umull	r1, r3, r3, r2
 8000db4:	08d9      	lsrs	r1, r3, #3
 8000db6:	460b      	mov	r3, r1
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	440b      	add	r3, r1
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	3330      	adds	r3, #48	; 0x30
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			bottomline[2] = ((OutputState.DCValue/100) % 10) + 48;
 8000dcc:	4b22      	ldr	r3, [pc, #136]	; (8000e58 <LCD_Display_Measurement+0x490>)
 8000dce:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 8000dd2:	4a25      	ldr	r2, [pc, #148]	; (8000e68 <LCD_Display_Measurement+0x4a0>)
 8000dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd8:	095b      	lsrs	r3, r3, #5
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	4b21      	ldr	r3, [pc, #132]	; (8000e64 <LCD_Display_Measurement+0x49c>)
 8000dde:	fba3 1302 	umull	r1, r3, r3, r2
 8000de2:	08d9      	lsrs	r1, r3, #3
 8000de4:	460b      	mov	r3, r1
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	440b      	add	r3, r1
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	3330      	adds	r3, #48	; 0x30
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			bottomline[3] = ((OutputState.DCValue/10) % 10) + 48;
 8000dfa:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <LCD_Display_Measurement+0x490>)
 8000dfc:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 8000e00:	4a18      	ldr	r2, [pc, #96]	; (8000e64 <LCD_Display_Measurement+0x49c>)
 8000e02:	fba2 2303 	umull	r2, r3, r2, r3
 8000e06:	08db      	lsrs	r3, r3, #3
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <LCD_Display_Measurement+0x49c>)
 8000e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8000e10:	08d9      	lsrs	r1, r3, #3
 8000e12:	460b      	mov	r3, r1
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	440b      	add	r3, r1
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	3330      	adds	r3, #48	; 0x30
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			bottomline[4] = ((OutputState.DCValue) % 10) + 48;
 8000e28:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <LCD_Display_Measurement+0x490>)
 8000e2a:	f8b3 219a 	ldrh.w	r2, [r3, #410]	; 0x19a
 8000e2e:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <LCD_Display_Measurement+0x49c>)
 8000e30:	fba3 1302 	umull	r1, r3, r3, r2
 8000e34:	08d9      	lsrs	r1, r3, #3
 8000e36:	460b      	mov	r3, r1
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	3330      	adds	r3, #48	; 0x30
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			LCD_Write_String(bottomline);
 8000e4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff faea 	bl	800042a <LCD_Write_String>
		}
	} else {
		uint8_t bottomline[] = "OUTPUT OFF";
		LCD_Write_String(bottomline);
	}
}
 8000e56:	e12b      	b.n	80010b0 <LCD_Display_Measurement+0x6e8>
 8000e58:	20000834 	.word	0x20000834
 8000e5c:	08007c28 	.word	0x08007c28
 8000e60:	10624dd3 	.word	0x10624dd3
 8000e64:	cccccccd 	.word	0xcccccccd
 8000e68:	51eb851f 	.word	0x51eb851f
		} else if (OutputState.Mode == s){
 8000e6c:	4b92      	ldr	r3, [pc, #584]	; (80010b8 <LCD_Display_Measurement+0x6f0>)
 8000e6e:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 8000e72:	2b73      	cmp	r3, #115	; 0x73
 8000e74:	f040 811c 	bne.w	80010b0 <LCD_Display_Measurement+0x6e8>
			uint8_t bottomline[] = "O:x.xxxV,A:x.xxxV,F:xxxxHz";
 8000e78:	4b90      	ldr	r3, [pc, #576]	; (80010bc <LCD_Display_Measurement+0x6f4>)
 8000e7a:	f107 040c 	add.w	r4, r7, #12
 8000e7e:	461d      	mov	r5, r3
 8000e80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e84:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e88:	c403      	stmia	r4!, {r0, r1}
 8000e8a:	8022      	strh	r2, [r4, #0]
 8000e8c:	3402      	adds	r4, #2
 8000e8e:	0c13      	lsrs	r3, r2, #16
 8000e90:	7023      	strb	r3, [r4, #0]
			bottomline[2] = ((OutputState.Offset/1000) % 10) + 48;
 8000e92:	4b89      	ldr	r3, [pc, #548]	; (80010b8 <LCD_Display_Measurement+0x6f0>)
 8000e94:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8000e98:	4a89      	ldr	r2, [pc, #548]	; (80010c0 <LCD_Display_Measurement+0x6f8>)
 8000e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e9e:	099b      	lsrs	r3, r3, #6
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	4b88      	ldr	r3, [pc, #544]	; (80010c4 <LCD_Display_Measurement+0x6fc>)
 8000ea4:	fba3 1302 	umull	r1, r3, r3, r2
 8000ea8:	08d9      	lsrs	r1, r3, #3
 8000eaa:	460b      	mov	r3, r1
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	440b      	add	r3, r1
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	3330      	adds	r3, #48	; 0x30
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	73bb      	strb	r3, [r7, #14]
			bottomline[4] = ((OutputState.Offset/100) % 10) + 48;
 8000ebe:	4b7e      	ldr	r3, [pc, #504]	; (80010b8 <LCD_Display_Measurement+0x6f0>)
 8000ec0:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8000ec4:	4a80      	ldr	r2, [pc, #512]	; (80010c8 <LCD_Display_Measurement+0x700>)
 8000ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eca:	095b      	lsrs	r3, r3, #5
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	4b7d      	ldr	r3, [pc, #500]	; (80010c4 <LCD_Display_Measurement+0x6fc>)
 8000ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8000ed4:	08d9      	lsrs	r1, r3, #3
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	440b      	add	r3, r1
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	3330      	adds	r3, #48	; 0x30
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	743b      	strb	r3, [r7, #16]
			bottomline[5] = ((OutputState.Offset/10) % 10) + 48;
 8000eea:	4b73      	ldr	r3, [pc, #460]	; (80010b8 <LCD_Display_Measurement+0x6f0>)
 8000eec:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8000ef0:	4a74      	ldr	r2, [pc, #464]	; (80010c4 <LCD_Display_Measurement+0x6fc>)
 8000ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef6:	08db      	lsrs	r3, r3, #3
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	4b72      	ldr	r3, [pc, #456]	; (80010c4 <LCD_Display_Measurement+0x6fc>)
 8000efc:	fba3 1302 	umull	r1, r3, r3, r2
 8000f00:	08d9      	lsrs	r1, r3, #3
 8000f02:	460b      	mov	r3, r1
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	440b      	add	r3, r1
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	3330      	adds	r3, #48	; 0x30
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	747b      	strb	r3, [r7, #17]
			bottomline[6] = ((OutputState.Offset) % 10) + 48;
 8000f16:	4b68      	ldr	r3, [pc, #416]	; (80010b8 <LCD_Display_Measurement+0x6f0>)
 8000f18:	f8b3 219c 	ldrh.w	r2, [r3, #412]	; 0x19c
 8000f1c:	4b69      	ldr	r3, [pc, #420]	; (80010c4 <LCD_Display_Measurement+0x6fc>)
 8000f1e:	fba3 1302 	umull	r1, r3, r3, r2
 8000f22:	08d9      	lsrs	r1, r3, #3
 8000f24:	460b      	mov	r3, r1
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	440b      	add	r3, r1
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	3330      	adds	r3, #48	; 0x30
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	74bb      	strb	r3, [r7, #18]
			bottomline[11] = ((OutputState.Amplitude/1000) % 10) + 48;
 8000f38:	4b5f      	ldr	r3, [pc, #380]	; (80010b8 <LCD_Display_Measurement+0x6f0>)
 8000f3a:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8000f3e:	4a60      	ldr	r2, [pc, #384]	; (80010c0 <LCD_Display_Measurement+0x6f8>)
 8000f40:	fba2 2303 	umull	r2, r3, r2, r3
 8000f44:	099b      	lsrs	r3, r3, #6
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	4b5e      	ldr	r3, [pc, #376]	; (80010c4 <LCD_Display_Measurement+0x6fc>)
 8000f4a:	fba3 1302 	umull	r1, r3, r3, r2
 8000f4e:	08d9      	lsrs	r1, r3, #3
 8000f50:	460b      	mov	r3, r1
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	440b      	add	r3, r1
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	3330      	adds	r3, #48	; 0x30
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	75fb      	strb	r3, [r7, #23]
			bottomline[13] = ((OutputState.Amplitude/100) % 10) + 48;
 8000f64:	4b54      	ldr	r3, [pc, #336]	; (80010b8 <LCD_Display_Measurement+0x6f0>)
 8000f66:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8000f6a:	4a57      	ldr	r2, [pc, #348]	; (80010c8 <LCD_Display_Measurement+0x700>)
 8000f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f70:	095b      	lsrs	r3, r3, #5
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	4b53      	ldr	r3, [pc, #332]	; (80010c4 <LCD_Display_Measurement+0x6fc>)
 8000f76:	fba3 1302 	umull	r1, r3, r3, r2
 8000f7a:	08d9      	lsrs	r1, r3, #3
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	440b      	add	r3, r1
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	3330      	adds	r3, #48	; 0x30
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	767b      	strb	r3, [r7, #25]
			bottomline[14] = ((OutputState.Amplitude/10) % 10) + 48;
 8000f90:	4b49      	ldr	r3, [pc, #292]	; (80010b8 <LCD_Display_Measurement+0x6f0>)
 8000f92:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8000f96:	4a4b      	ldr	r2, [pc, #300]	; (80010c4 <LCD_Display_Measurement+0x6fc>)
 8000f98:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9c:	08db      	lsrs	r3, r3, #3
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	4b48      	ldr	r3, [pc, #288]	; (80010c4 <LCD_Display_Measurement+0x6fc>)
 8000fa2:	fba3 1302 	umull	r1, r3, r3, r2
 8000fa6:	08d9      	lsrs	r1, r3, #3
 8000fa8:	460b      	mov	r3, r1
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	440b      	add	r3, r1
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	3330      	adds	r3, #48	; 0x30
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	76bb      	strb	r3, [r7, #26]
			bottomline[15] = ((OutputState.Amplitude) % 10) + 48;
 8000fbc:	4b3e      	ldr	r3, [pc, #248]	; (80010b8 <LCD_Display_Measurement+0x6f0>)
 8000fbe:	f8b3 2196 	ldrh.w	r2, [r3, #406]	; 0x196
 8000fc2:	4b40      	ldr	r3, [pc, #256]	; (80010c4 <LCD_Display_Measurement+0x6fc>)
 8000fc4:	fba3 1302 	umull	r1, r3, r3, r2
 8000fc8:	08d9      	lsrs	r1, r3, #3
 8000fca:	460b      	mov	r3, r1
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	440b      	add	r3, r1
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	3330      	adds	r3, #48	; 0x30
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	76fb      	strb	r3, [r7, #27]
			bottomline[20] = ((OutputState.Frequency/1000) % 10) + 48;
 8000fde:	4b36      	ldr	r3, [pc, #216]	; (80010b8 <LCD_Display_Measurement+0x6f0>)
 8000fe0:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8000fe4:	4a36      	ldr	r2, [pc, #216]	; (80010c0 <LCD_Display_Measurement+0x6f8>)
 8000fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fea:	099b      	lsrs	r3, r3, #6
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	4b35      	ldr	r3, [pc, #212]	; (80010c4 <LCD_Display_Measurement+0x6fc>)
 8000ff0:	fba3 1302 	umull	r1, r3, r3, r2
 8000ff4:	08d9      	lsrs	r1, r3, #3
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	b29b      	uxth	r3, r3
 8001002:	b2db      	uxtb	r3, r3
 8001004:	3330      	adds	r3, #48	; 0x30
 8001006:	b2db      	uxtb	r3, r3
 8001008:	f887 3020 	strb.w	r3, [r7, #32]
			bottomline[21] = ((OutputState.Frequency/100) % 10) + 48;
 800100c:	4b2a      	ldr	r3, [pc, #168]	; (80010b8 <LCD_Display_Measurement+0x6f0>)
 800100e:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8001012:	4a2d      	ldr	r2, [pc, #180]	; (80010c8 <LCD_Display_Measurement+0x700>)
 8001014:	fba2 2303 	umull	r2, r3, r2, r3
 8001018:	095b      	lsrs	r3, r3, #5
 800101a:	b29a      	uxth	r2, r3
 800101c:	4b29      	ldr	r3, [pc, #164]	; (80010c4 <LCD_Display_Measurement+0x6fc>)
 800101e:	fba3 1302 	umull	r1, r3, r3, r2
 8001022:	08d9      	lsrs	r1, r3, #3
 8001024:	460b      	mov	r3, r1
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	440b      	add	r3, r1
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	b29b      	uxth	r3, r3
 8001030:	b2db      	uxtb	r3, r3
 8001032:	3330      	adds	r3, #48	; 0x30
 8001034:	b2db      	uxtb	r3, r3
 8001036:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			bottomline[22] = ((OutputState.Frequency/10) % 10) + 48;
 800103a:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <LCD_Display_Measurement+0x6f0>)
 800103c:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8001040:	4a20      	ldr	r2, [pc, #128]	; (80010c4 <LCD_Display_Measurement+0x6fc>)
 8001042:	fba2 2303 	umull	r2, r3, r2, r3
 8001046:	08db      	lsrs	r3, r3, #3
 8001048:	b29a      	uxth	r2, r3
 800104a:	4b1e      	ldr	r3, [pc, #120]	; (80010c4 <LCD_Display_Measurement+0x6fc>)
 800104c:	fba3 1302 	umull	r1, r3, r3, r2
 8001050:	08d9      	lsrs	r1, r3, #3
 8001052:	460b      	mov	r3, r1
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	440b      	add	r3, r1
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	b29b      	uxth	r3, r3
 800105e:	b2db      	uxtb	r3, r3
 8001060:	3330      	adds	r3, #48	; 0x30
 8001062:	b2db      	uxtb	r3, r3
 8001064:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			bottomline[23] = ((OutputState.Frequency) % 10) + 48;
 8001068:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <LCD_Display_Measurement+0x6f0>)
 800106a:	f8b3 2198 	ldrh.w	r2, [r3, #408]	; 0x198
 800106e:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <LCD_Display_Measurement+0x6fc>)
 8001070:	fba3 1302 	umull	r1, r3, r3, r2
 8001074:	08d9      	lsrs	r1, r3, #3
 8001076:	460b      	mov	r3, r1
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	440b      	add	r3, r1
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	b29b      	uxth	r3, r3
 8001082:	b2db      	uxtb	r3, r3
 8001084:	3330      	adds	r3, #48	; 0x30
 8001086:	b2db      	uxtb	r3, r3
 8001088:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			LCD_Write_String(bottomline);
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff f9ca 	bl	800042a <LCD_Write_String>
}
 8001096:	e00b      	b.n	80010b0 <LCD_Display_Measurement+0x6e8>
		uint8_t bottomline[] = "OUTPUT OFF";
 8001098:	4a0c      	ldr	r2, [pc, #48]	; (80010cc <LCD_Display_Measurement+0x704>)
 800109a:	463b      	mov	r3, r7
 800109c:	ca07      	ldmia	r2, {r0, r1, r2}
 800109e:	c303      	stmia	r3!, {r0, r1}
 80010a0:	801a      	strh	r2, [r3, #0]
 80010a2:	3302      	adds	r3, #2
 80010a4:	0c12      	lsrs	r2, r2, #16
 80010a6:	701a      	strb	r2, [r3, #0]
		LCD_Write_String(bottomline);
 80010a8:	463b      	mov	r3, r7
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff f9bd 	bl	800042a <LCD_Write_String>
}
 80010b0:	bf00      	nop
 80010b2:	3778      	adds	r7, #120	; 0x78
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bdb0      	pop	{r4, r5, r7, pc}
 80010b8:	20000834 	.word	0x20000834
 80010bc:	08007c3c 	.word	0x08007c3c
 80010c0:	10624dd3 	.word	0x10624dd3
 80010c4:	cccccccd 	.word	0xcccccccd
 80010c8:	51eb851f 	.word	0x51eb851f
 80010cc:	08007c70 	.word	0x08007c70

080010d0 <HAL_UART_RxCpltCallback>:

// Flag set every 10 us
uint8_t us_10 = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	message_received = 1;
 80010d8:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <HAL_UART_RxCpltCallback+0x28>)
 80010da:	2201      	movs	r2, #1
 80010dc:	701a      	strb	r2, [r3, #0]
	rx_stored[0] = rx_byte[0];
 80010de:	4b07      	ldr	r3, [pc, #28]	; (80010fc <HAL_UART_RxCpltCallback+0x2c>)
 80010e0:	781a      	ldrb	r2, [r3, #0]
 80010e2:	4b07      	ldr	r3, [pc, #28]	; (8001100 <HAL_UART_RxCpltCallback+0x30>)
 80010e4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 80010e6:	2201      	movs	r2, #1
 80010e8:	4904      	ldr	r1, [pc, #16]	; (80010fc <HAL_UART_RxCpltCallback+0x2c>)
 80010ea:	4806      	ldr	r0, [pc, #24]	; (8001104 <HAL_UART_RxCpltCallback+0x34>)
 80010ec:	f005 fbd4 	bl	8006898 <HAL_UART_Receive_IT>
}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000044 	.word	0x20000044
 80010fc:	20000c44 	.word	0x20000c44
 8001100:	20000c40 	.word	0x20000c40
 8001104:	20000b70 	.word	0x20000b70

08001108 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	80fb      	strh	r3, [r7, #6]
	last_ticks = HAL_GetTick();
 8001112:	f001 fb73 	bl	80027fc <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	4b15      	ldr	r3, [pc, #84]	; (8001170 <HAL_GPIO_EXTI_Callback+0x68>)
 800111a:	601a      	str	r2, [r3, #0]
	if(GPIO_Pin == btn_mid_Pin)
 800111c:	88fb      	ldrh	r3, [r7, #6]
 800111e:	2b40      	cmp	r3, #64	; 0x40
 8001120:	d103      	bne.n	800112a <HAL_GPIO_EXTI_Callback+0x22>
	{
		btn_mid_flag = 1;
 8001122:	4b14      	ldr	r3, [pc, #80]	; (8001174 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001124:	2201      	movs	r2, #1
 8001126:	701a      	strb	r2, [r3, #0]
	}
	else if(GPIO_Pin == btn_down_Pin)
	{
		btn_down_flag = 1;
	}
}
 8001128:	e01d      	b.n	8001166 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_right_Pin)
 800112a:	88fb      	ldrh	r3, [r7, #6]
 800112c:	2b80      	cmp	r3, #128	; 0x80
 800112e:	d103      	bne.n	8001138 <HAL_GPIO_EXTI_Callback+0x30>
		btn_right_flag = 1;
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <HAL_GPIO_EXTI_Callback+0x70>)
 8001132:	2201      	movs	r2, #1
 8001134:	701a      	strb	r2, [r3, #0]
}
 8001136:	e016      	b.n	8001166 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_up_Pin)
 8001138:	88fb      	ldrh	r3, [r7, #6]
 800113a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800113e:	d103      	bne.n	8001148 <HAL_GPIO_EXTI_Callback+0x40>
		btn_up_flag = 1;
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <HAL_GPIO_EXTI_Callback+0x74>)
 8001142:	2201      	movs	r2, #1
 8001144:	701a      	strb	r2, [r3, #0]
}
 8001146:	e00e      	b.n	8001166 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_left_Pin)
 8001148:	88fb      	ldrh	r3, [r7, #6]
 800114a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800114e:	d103      	bne.n	8001158 <HAL_GPIO_EXTI_Callback+0x50>
		btn_left_flag = 1;
 8001150:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <HAL_GPIO_EXTI_Callback+0x78>)
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]
}
 8001156:	e006      	b.n	8001166 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_down_Pin)
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800115e:	d102      	bne.n	8001166 <HAL_GPIO_EXTI_Callback+0x5e>
		btn_down_flag = 1;
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001162:	2201      	movs	r2, #1
 8001164:	701a      	strb	r2, [r3, #0]
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000040 	.word	0x20000040
 8001174:	2000003a 	.word	0x2000003a
 8001178:	2000003b 	.word	0x2000003b
 800117c:	2000003c 	.word	0x2000003c
 8001180:	2000003d 	.word	0x2000003d
 8001184:	2000003e 	.word	0x2000003e

08001188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	OutputState.TIM2_Clock = 72000000;
 800118c:	4baf      	ldr	r3, [pc, #700]	; (800144c <main+0x2c4>)
 800118e:	4ab0      	ldr	r2, [pc, #704]	; (8001450 <main+0x2c8>)
 8001190:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OutputState.On = false;
 8001194:	4bad      	ldr	r3, [pc, #692]	; (800144c <main+0x2c4>)
 8001196:	2200      	movs	r2, #0
 8001198:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
	OutputState.Mode = d;
 800119c:	4bab      	ldr	r3, [pc, #684]	; (800144c <main+0x2c4>)
 800119e:	2264      	movs	r2, #100	; 0x64
 80011a0:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
	OutputState.Amplitude = 1000;
 80011a4:	4ba9      	ldr	r3, [pc, #676]	; (800144c <main+0x2c4>)
 80011a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011aa:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196
	OutputState.Offset = 1200;
 80011ae:	4ba7      	ldr	r3, [pc, #668]	; (800144c <main+0x2c4>)
 80011b0:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80011b4:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
	OutputState.Frequency = 1000;
 80011b8:	4ba4      	ldr	r3, [pc, #656]	; (800144c <main+0x2c4>)
 80011ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011be:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
	OutputState.DCValue = 1000;
 80011c2:	4ba2      	ldr	r3, [pc, #648]	; (800144c <main+0x2c4>)
 80011c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011c8:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a

	MeasurementState.Mode = DV;
 80011cc:	4ba1      	ldr	r3, [pc, #644]	; (8001454 <main+0x2cc>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
	MeasurementState.Amplitude = 0;
 80011d2:	4ba0      	ldr	r3, [pc, #640]	; (8001454 <main+0x2cc>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	805a      	strh	r2, [r3, #2]
	MeasurementState.Frequency = 0;
 80011d8:	4b9e      	ldr	r3, [pc, #632]	; (8001454 <main+0x2cc>)
 80011da:	2200      	movs	r2, #0
 80011dc:	809a      	strh	r2, [r3, #4]
	MeasurementState.Offset = 0;
 80011de:	4b9d      	ldr	r3, [pc, #628]	; (8001454 <main+0x2cc>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	811a      	strh	r2, [r3, #8]
	MeasurementState.Period = 0;
 80011e4:	4b9b      	ldr	r3, [pc, #620]	; (8001454 <main+0x2cc>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	80da      	strh	r2, [r3, #6]

	DisplayState.PrintFlag = 0;
 80011ea:	4b9b      	ldr	r3, [pc, #620]	; (8001458 <main+0x2d0>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	715a      	strb	r2, [r3, #5]
	DisplayState.RefreshFlag = 0;
 80011f0:	4b99      	ldr	r3, [pc, #612]	; (8001458 <main+0x2d0>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	71da      	strb	r2, [r3, #7]
	DisplayState.AutoScrollCounter = 0;
 80011f6:	4b98      	ldr	r3, [pc, #608]	; (8001458 <main+0x2d0>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	721a      	strb	r2, [r3, #8]
	DisplayState.DisplayPosition = 0;
 80011fc:	4b96      	ldr	r3, [pc, #600]	; (8001458 <main+0x2d0>)
 80011fe:	2200      	movs	r2, #0
 8001200:	725a      	strb	r2, [r3, #9]
	DisplayState.ToplineCharacters = 0;
 8001202:	4b95      	ldr	r3, [pc, #596]	; (8001458 <main+0x2d0>)
 8001204:	2200      	movs	r2, #0
 8001206:	70da      	strb	r2, [r3, #3]
	DisplayState.BottomlineCharacters = 0;
 8001208:	4b93      	ldr	r3, [pc, #588]	; (8001458 <main+0x2d0>)
 800120a:	2200      	movs	r2, #0
 800120c:	711a      	strb	r2, [r3, #4]
	DisplayState.CurrentLine = Topline;
 800120e:	4b92      	ldr	r3, [pc, #584]	; (8001458 <main+0x2d0>)
 8001210:	2200      	movs	r2, #0
 8001212:	709a      	strb	r2, [r3, #2]
	DisplayState.LastMode = Menu;
 8001214:	4b90      	ldr	r3, [pc, #576]	; (8001458 <main+0x2d0>)
 8001216:	2200      	movs	r2, #0
 8001218:	705a      	strb	r2, [r3, #1]

	// Tempory Measurement Values
	MeasurementState.Offset = 1000;
 800121a:	4b8e      	ldr	r3, [pc, #568]	; (8001454 <main+0x2cc>)
 800121c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001220:	811a      	strh	r2, [r3, #8]
	MeasurementState.Frequency = 5250;
 8001222:	4b8c      	ldr	r3, [pc, #560]	; (8001454 <main+0x2cc>)
 8001224:	f241 4282 	movw	r2, #5250	; 0x1482
 8001228:	809a      	strh	r2, [r3, #4]
	MeasurementState.Amplitude = 500;
 800122a:	4b8a      	ldr	r3, [pc, #552]	; (8001454 <main+0x2cc>)
 800122c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001230:	805a      	strh	r2, [r3, #2]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001232:	f001 fa89 	bl	8002748 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001236:	f000 f94d 	bl	80014d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800123a:	f000 fb8b 	bl	8001954 <MX_GPIO_Init>
  MX_DMA_Init();
 800123e:	f000 fb6b 	bl	8001918 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001242:	f000 fb39 	bl	80018b8 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8001246:	f000 fae9 	bl	800181c <MX_TIM16_Init>
  MX_ADC1_Init();
 800124a:	f000 f9af 	bl	80015ac <MX_ADC1_Init>
  MX_DAC1_Init();
 800124e:	f000 fa1d 	bl	800168c <MX_DAC1_Init>
  MX_TIM2_Init();
 8001252:	f000 fa45 	bl	80016e0 <MX_TIM2_Init>
  MX_TIM17_Init();
 8001256:	f000 fb07 	bl	8001868 <MX_TIM17_Init>
  MX_TIM15_Init();
 800125a:	f000 fa8f 	bl	800177c <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  	// Transmit Student Number
	HAL_UART_Transmit(&huart2, std_num, 13, 10);
 800125e:	230a      	movs	r3, #10
 8001260:	220d      	movs	r2, #13
 8001262:	497e      	ldr	r1, [pc, #504]	; (800145c <main+0x2d4>)
 8001264:	487e      	ldr	r0, [pc, #504]	; (8001460 <main+0x2d8>)
 8001266:	f005 fa83 	bl	8006770 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 800126a:	2201      	movs	r2, #1
 800126c:	497d      	ldr	r1, [pc, #500]	; (8001464 <main+0x2dc>)
 800126e:	487c      	ldr	r0, [pc, #496]	; (8001460 <main+0x2d8>)
 8001270:	f005 fb12 	bl	8006898 <HAL_UART_Receive_IT>

	// Init ADC Timer
	HAL_TIM_Base_Start_IT(&htim16);
 8001274:	487c      	ldr	r0, [pc, #496]	; (8001468 <main+0x2e0>)
 8001276:	f004 fdd5 	bl	8005e24 <HAL_TIM_Base_Start_IT>

	// Init LCD Refresh Timer
	HAL_TIM_Base_Start_IT(&htim17);
 800127a:	487c      	ldr	r0, [pc, #496]	; (800146c <main+0x2e4>)
 800127c:	f004 fdd2 	bl	8005e24 <HAL_TIM_Base_Start_IT>

	// Init 10us Timer
	HAL_TIM_Base_Start_IT(&htim15);
 8001280:	487b      	ldr	r0, [pc, #492]	; (8001470 <main+0x2e8>)
 8001282:	f004 fdcf 	bl	8005e24 <HAL_TIM_Base_Start_IT>

	// Init LCD
	LCD_Init();
 8001286:	f7ff f899 	bl	80003bc <LCD_Init>

	// Init Display State
	HAL_Delay(1);
 800128a:	2001      	movs	r0, #1
 800128c:	f001 fac2 	bl	8002814 <HAL_Delay>
	LCD_changeDisplayMode(Menu);
 8001290:	2000      	movs	r0, #0
 8001292:	f7ff fb19 	bl	80008c8 <LCD_changeDisplayMode>

	// Init DAC Timer
	HAL_TIM_Base_Start(&htim2);
 8001296:	4877      	ldr	r0, [pc, #476]	; (8001474 <main+0x2ec>)
 8001298:	f004 fd5c 	bl	8005d54 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(DisplayState.RefreshFlag == 1)
 800129c:	4b6e      	ldr	r3, [pc, #440]	; (8001458 <main+0x2d0>)
 800129e:	79db      	ldrb	r3, [r3, #7]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d12a      	bne.n	80012fa <main+0x172>
	  {
		  if(DisplayState.Mode == Measurement)
 80012a4:	4b6c      	ldr	r3, [pc, #432]	; (8001458 <main+0x2d0>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d123      	bne.n	80012f4 <main+0x16c>
		  {
//			  if(MeasurementState.Mode == AV || MeasurementState.Mode == AI)
			  if(MeasurementState.Mode == AV)
 80012ac:	4b69      	ldr	r3, [pc, #420]	; (8001454 <main+0x2cc>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d11f      	bne.n	80012f4 <main+0x16c>
			  {
				  DisplayState.AutoScrollCounter ++;
 80012b4:	4b68      	ldr	r3, [pc, #416]	; (8001458 <main+0x2d0>)
 80012b6:	7a1b      	ldrb	r3, [r3, #8]
 80012b8:	3301      	adds	r3, #1
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	4b66      	ldr	r3, [pc, #408]	; (8001458 <main+0x2d0>)
 80012be:	721a      	strb	r2, [r3, #8]
				  if(DisplayState.AutoScrollCounter > 1)
 80012c0:	4b65      	ldr	r3, [pc, #404]	; (8001458 <main+0x2d0>)
 80012c2:	7a1b      	ldrb	r3, [r3, #8]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d915      	bls.n	80012f4 <main+0x16c>
				  {
					  MeasurementState.Amplitude += 1;
 80012c8:	4b62      	ldr	r3, [pc, #392]	; (8001454 <main+0x2cc>)
 80012ca:	885b      	ldrh	r3, [r3, #2]
 80012cc:	3301      	adds	r3, #1
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	4b60      	ldr	r3, [pc, #384]	; (8001454 <main+0x2cc>)
 80012d2:	805a      	strh	r2, [r3, #2]
					  if(MeasurementState.Amplitude > 2000) MeasurementState.Amplitude = 500;
 80012d4:	4b5f      	ldr	r3, [pc, #380]	; (8001454 <main+0x2cc>)
 80012d6:	885b      	ldrh	r3, [r3, #2]
 80012d8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80012dc:	d903      	bls.n	80012e6 <main+0x15e>
 80012de:	4b5d      	ldr	r3, [pc, #372]	; (8001454 <main+0x2cc>)
 80012e0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80012e4:	805a      	strh	r2, [r3, #2]
					  LCD_Display_Measurement();
 80012e6:	f7ff fb6f 	bl	80009c8 <LCD_Display_Measurement>
					  LCD_AutoScroll();
 80012ea:	f7ff fa75 	bl	80007d8 <LCD_AutoScroll>
					  DisplayState.AutoScrollCounter = 0;
 80012ee:	4b5a      	ldr	r3, [pc, #360]	; (8001458 <main+0x2d0>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	721a      	strb	r2, [r3, #8]
				  }
			  }

		  }
		  DisplayState.RefreshFlag = 0;
 80012f4:	4b58      	ldr	r3, [pc, #352]	; (8001458 <main+0x2d0>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	71da      	strb	r2, [r3, #7]
	  }

	  // LCD UART OUTPUT JOB
	  if(DisplayState.PrintFlag)
 80012fa:	4b57      	ldr	r3, [pc, #348]	; (8001458 <main+0x2d0>)
 80012fc:	795b      	ldrb	r3, [r3, #5]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00e      	beq.n	8001320 <main+0x198>
	  {
		  if(DisplayState.Mode != Output)
 8001302:	4b55      	ldr	r3, [pc, #340]	; (8001458 <main+0x2d0>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b02      	cmp	r3, #2
 8001308:	d002      	beq.n	8001310 <main+0x188>
		  {
			  LCD_changeDisplayMode(Output);
 800130a:	2002      	movs	r0, #2
 800130c:	f7ff fadc 	bl	80008c8 <LCD_changeDisplayMode>
		  }
		  LCD_Write_Character_Shift(DisplayState.PrintByte);
 8001310:	4b51      	ldr	r3, [pc, #324]	; (8001458 <main+0x2d0>)
 8001312:	799b      	ldrb	r3, [r3, #6]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f8a3 	bl	8000460 <LCD_Write_Character_Shift>
		  DisplayState.PrintFlag = 0;
 800131a:	4b4f      	ldr	r3, [pc, #316]	; (8001458 <main+0x2d0>)
 800131c:	2200      	movs	r2, #0
 800131e:	715a      	strb	r2, [r3, #5]
	  }

	  // UART JOB
	  if(message_received)
 8001320:	4b55      	ldr	r3, [pc, #340]	; (8001478 <main+0x2f0>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d004      	beq.n	8001332 <main+0x1aa>
	  {
		  UART_Main_Function();
 8001328:	f000 fe92 	bl	8002050 <UART_Main_Function>
		  message_received = 0;
 800132c:	4b52      	ldr	r3, [pc, #328]	; (8001478 <main+0x2f0>)
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]
	  }

	  // BUTTONS JOB
	  if(btn_up_flag)
 8001332:	4b52      	ldr	r3, [pc, #328]	; (800147c <main+0x2f4>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d011      	beq.n	800135e <main+0x1d6>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 800133a:	f001 fa5f 	bl	80027fc <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	4b4f      	ldr	r3, [pc, #316]	; (8001480 <main+0x2f8>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b36      	cmp	r3, #54	; 0x36
 8001348:	f240 80b2 	bls.w	80014b0 <main+0x328>
		  {
			  if(HAL_GPIO_ReadPin(btn_up_GPIO_Port, btn_up_Pin))
 800134c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001350:	484c      	ldr	r0, [pc, #304]	; (8001484 <main+0x2fc>)
 8001352:	f003 f8db 	bl	800450c <HAL_GPIO_ReadPin>
			  {
				  // HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//				  uint32_t code = HAL_UART_GetError(&huart2);
			  }
			  btn_up_flag = 0;
 8001356:	4b49      	ldr	r3, [pc, #292]	; (800147c <main+0x2f4>)
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]
 800135c:	e0a8      	b.n	80014b0 <main+0x328>
		  }
	  }
	  else if(btn_left_flag)
 800135e:	4b4a      	ldr	r3, [pc, #296]	; (8001488 <main+0x300>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d01a      	beq.n	800139c <main+0x214>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 8001366:	f001 fa49 	bl	80027fc <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	4b44      	ldr	r3, [pc, #272]	; (8001480 <main+0x2f8>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b36      	cmp	r3, #54	; 0x36
 8001374:	f240 809c 	bls.w	80014b0 <main+0x328>
		  {
			  if(HAL_GPIO_ReadPin(btn_left_GPIO_Port, btn_left_Pin))
 8001378:	f44f 7180 	mov.w	r1, #256	; 0x100
 800137c:	4841      	ldr	r0, [pc, #260]	; (8001484 <main+0x2fc>)
 800137e:	f003 f8c5 	bl	800450c <HAL_GPIO_ReadPin>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d005      	beq.n	8001394 <main+0x20c>
			  {
				  // HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
				  LCD_Write_Instruction(0b00011100);
 8001388:	201c      	movs	r0, #28
 800138a:	f7ff f8d3 	bl	8000534 <LCD_Write_Instruction>
				  Delay_us_10(5);
 800138e:	2005      	movs	r0, #5
 8001390:	f000 fc0a 	bl	8001ba8 <Delay_us_10>
			  }
			  btn_left_flag = 0;
 8001394:	4b3c      	ldr	r3, [pc, #240]	; (8001488 <main+0x300>)
 8001396:	2200      	movs	r2, #0
 8001398:	701a      	strb	r2, [r3, #0]
 800139a:	e089      	b.n	80014b0 <main+0x328>
		  }
	  }
	  else if(btn_down_flag)
 800139c:	4b3b      	ldr	r3, [pc, #236]	; (800148c <main+0x304>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d010      	beq.n	80013c6 <main+0x23e>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 80013a4:	f001 fa2a 	bl	80027fc <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	4b35      	ldr	r3, [pc, #212]	; (8001480 <main+0x2f8>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b36      	cmp	r3, #54	; 0x36
 80013b2:	d97d      	bls.n	80014b0 <main+0x328>
		  {
			  if(HAL_GPIO_ReadPin(btn_down_GPIO_Port, btn_down_Pin))
 80013b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013b8:	4832      	ldr	r0, [pc, #200]	; (8001484 <main+0x2fc>)
 80013ba:	f003 f8a7 	bl	800450c <HAL_GPIO_ReadPin>
			  {
				  // HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
			  }
			  btn_down_flag = 0;
 80013be:	4b33      	ldr	r3, [pc, #204]	; (800148c <main+0x304>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
 80013c4:	e074      	b.n	80014b0 <main+0x328>
		  }
	  }
	  else if(btn_right_flag)
 80013c6:	4b32      	ldr	r3, [pc, #200]	; (8001490 <main+0x308>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d019      	beq.n	8001402 <main+0x27a>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 80013ce:	f001 fa15 	bl	80027fc <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	4b2a      	ldr	r3, [pc, #168]	; (8001480 <main+0x2f8>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b36      	cmp	r3, #54	; 0x36
 80013dc:	d968      	bls.n	80014b0 <main+0x328>
		  {
			  if(HAL_GPIO_ReadPin(btn_right_GPIO_Port, btn_right_Pin))
 80013de:	2180      	movs	r1, #128	; 0x80
 80013e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e4:	f003 f892 	bl	800450c <HAL_GPIO_ReadPin>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d005      	beq.n	80013fa <main+0x272>
			  {
				  // HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
				  LCD_Write_Instruction(0b00011000);
 80013ee:	2018      	movs	r0, #24
 80013f0:	f7ff f8a0 	bl	8000534 <LCD_Write_Instruction>
				  Delay_us_10(5);
 80013f4:	2005      	movs	r0, #5
 80013f6:	f000 fbd7 	bl	8001ba8 <Delay_us_10>
			  }
			  btn_right_flag = 0;
 80013fa:	4b25      	ldr	r3, [pc, #148]	; (8001490 <main+0x308>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	701a      	strb	r2, [r3, #0]
 8001400:	e056      	b.n	80014b0 <main+0x328>
		  }
	  }
	  else if(btn_mid_flag)
 8001402:	4b24      	ldr	r3, [pc, #144]	; (8001494 <main+0x30c>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d052      	beq.n	80014b0 <main+0x328>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 800140a:	f001 f9f7 	bl	80027fc <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <main+0x2f8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b36      	cmp	r3, #54	; 0x36
 8001418:	d94a      	bls.n	80014b0 <main+0x328>
		  {
			  if(HAL_GPIO_ReadPin(btn_mid_GPIO_Port, btn_mid_Pin))
 800141a:	2140      	movs	r1, #64	; 0x40
 800141c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001420:	f003 f874 	bl	800450c <HAL_GPIO_ReadPin>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d03f      	beq.n	80014aa <main+0x322>
			  {
				  // Toggle Menu Display state
				  if(DisplayState.Mode == Menu){
 800142a:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <main+0x2d0>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d103      	bne.n	800143a <main+0x2b2>
					  LCD_changeDisplayMode(Measurement);
 8001432:	2001      	movs	r0, #1
 8001434:	f7ff fa48 	bl	80008c8 <LCD_changeDisplayMode>
 8001438:	e037      	b.n	80014aa <main+0x322>
				  } else if(DisplayState.Mode == Measurement){
 800143a:	4b07      	ldr	r3, [pc, #28]	; (8001458 <main+0x2d0>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d12a      	bne.n	8001498 <main+0x310>
					  LCD_changeDisplayMode(Menu);
 8001442:	2000      	movs	r0, #0
 8001444:	f7ff fa40 	bl	80008c8 <LCD_changeDisplayMode>
 8001448:	e02f      	b.n	80014aa <main+0x322>
 800144a:	bf00      	nop
 800144c:	20000834 	.word	0x20000834
 8001450:	044aa200 	.word	0x044aa200
 8001454:	20000828 	.word	0x20000828
 8001458:	200009d8 	.word	0x200009d8
 800145c:	20000000 	.word	0x20000000
 8001460:	20000b70 	.word	0x20000b70
 8001464:	20000c44 	.word	0x20000c44
 8001468:	20000bf4 	.word	0x20000bf4
 800146c:	20000a44 	.word	0x20000a44
 8001470:	200009f8 	.word	0x200009f8
 8001474:	20000b24 	.word	0x20000b24
 8001478:	20000044 	.word	0x20000044
 800147c:	2000003c 	.word	0x2000003c
 8001480:	20000040 	.word	0x20000040
 8001484:	48000400 	.word	0x48000400
 8001488:	2000003d 	.word	0x2000003d
 800148c:	2000003e 	.word	0x2000003e
 8001490:	2000003b 	.word	0x2000003b
 8001494:	2000003a 	.word	0x2000003a
				  } else if(DisplayState.Mode == Output){
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <main+0x340>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b02      	cmp	r3, #2
 800149e:	d104      	bne.n	80014aa <main+0x322>
					  LCD_changeDisplayMode(DisplayState.LastMode);
 80014a0:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <main+0x340>)
 80014a2:	785b      	ldrb	r3, [r3, #1]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fa0f 	bl	80008c8 <LCD_changeDisplayMode>
				  }
			  }
			  btn_mid_flag = 0;
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <main+0x344>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  // ADC JOB
	  if(adc_timer_flag)
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <main+0x348>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f43f aef1 	beq.w	800129c <main+0x114>
	  {
		  ADC_Main_Function();
 80014ba:	f7fe fe8b 	bl	80001d4 <ADC_Main_Function>
		  adc_timer_flag = 0;
 80014be:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <main+0x348>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
	  if(DisplayState.RefreshFlag == 1)
 80014c4:	e6ea      	b.n	800129c <main+0x114>
 80014c6:	bf00      	nop
 80014c8:	200009d8 	.word	0x200009d8
 80014cc:	2000003a 	.word	0x2000003a
 80014d0:	2000003f 	.word	0x2000003f

080014d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b0a6      	sub	sp, #152	; 0x98
 80014d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014da:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80014de:	2228      	movs	r2, #40	; 0x28
 80014e0:	2100      	movs	r1, #0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f006 fb84 	bl	8007bf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	2258      	movs	r2, #88	; 0x58
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f006 fb76 	bl	8007bf0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001504:	2302      	movs	r3, #2
 8001506:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001508:	2301      	movs	r3, #1
 800150a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800150c:	2310      	movs	r3, #16
 800150e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001512:	2302      	movs	r3, #2
 8001514:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001518:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800151c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001520:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001524:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001528:	2300      	movs	r3, #0
 800152a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800152e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001532:	4618      	mov	r0, r3
 8001534:	f003 f84c 	bl	80045d0 <HAL_RCC_OscConfig>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800153e:	f000 fb51 	bl	8001be4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001542:	230f      	movs	r3, #15
 8001544:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001546:	2302      	movs	r3, #2
 8001548:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800154a:	2300      	movs	r3, #0
 800154c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800154e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001552:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001554:	2300      	movs	r3, #0
 8001556:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001558:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800155c:	2102      	movs	r1, #2
 800155e:	4618      	mov	r0, r3
 8001560:	f003 ff4c 	bl	80053fc <HAL_RCC_ClockConfig>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800156a:	f000 fb3b 	bl	8001be4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM15
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <SystemClock_Config+0xd4>)
 8001570:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_TIM17
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001576:	f44f 7380 	mov.w	r3, #256	; 0x100
 800157a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 800157c:	2300      	movs	r3, #0
 800157e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8001580:	2300      	movs	r3, #0
 8001582:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 8001584:	2300      	movs	r3, #0
 8001586:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8001588:	2300      	movs	r3, #0
 800158a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	4618      	mov	r0, r3
 8001590:	f004 f96a 	bl	8005868 <HAL_RCCEx_PeriphCLKConfig>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800159a:	f000 fb23 	bl	8001be4 <Error_Handler>
  }
}
 800159e:	bf00      	nop
 80015a0:	3798      	adds	r7, #152	; 0x98
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	01d00082 	.word	0x01d00082

080015ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08a      	sub	sp, #40	; 0x28
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80015b2:	f107 031c 	add.w	r3, r7, #28
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
 80015cc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80015ce:	4b2e      	ldr	r3, [pc, #184]	; (8001688 <MX_ADC1_Init+0xdc>)
 80015d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80015d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80015d6:	4b2c      	ldr	r3, [pc, #176]	; (8001688 <MX_ADC1_Init+0xdc>)
 80015d8:	2200      	movs	r2, #0
 80015da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015dc:	4b2a      	ldr	r3, [pc, #168]	; (8001688 <MX_ADC1_Init+0xdc>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015e2:	4b29      	ldr	r3, [pc, #164]	; (8001688 <MX_ADC1_Init+0xdc>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015e8:	4b27      	ldr	r3, [pc, #156]	; (8001688 <MX_ADC1_Init+0xdc>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015ee:	4b26      	ldr	r3, [pc, #152]	; (8001688 <MX_ADC1_Init+0xdc>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015f6:	4b24      	ldr	r3, [pc, #144]	; (8001688 <MX_ADC1_Init+0xdc>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015fc:	4b22      	ldr	r3, [pc, #136]	; (8001688 <MX_ADC1_Init+0xdc>)
 80015fe:	2201      	movs	r2, #1
 8001600:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001602:	4b21      	ldr	r3, [pc, #132]	; (8001688 <MX_ADC1_Init+0xdc>)
 8001604:	2200      	movs	r2, #0
 8001606:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001608:	4b1f      	ldr	r3, [pc, #124]	; (8001688 <MX_ADC1_Init+0xdc>)
 800160a:	2201      	movs	r2, #1
 800160c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800160e:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <MX_ADC1_Init+0xdc>)
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001616:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <MX_ADC1_Init+0xdc>)
 8001618:	2204      	movs	r2, #4
 800161a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800161c:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <MX_ADC1_Init+0xdc>)
 800161e:	2200      	movs	r2, #0
 8001620:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001622:	4b19      	ldr	r3, [pc, #100]	; (8001688 <MX_ADC1_Init+0xdc>)
 8001624:	2200      	movs	r2, #0
 8001626:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001628:	4817      	ldr	r0, [pc, #92]	; (8001688 <MX_ADC1_Init+0xdc>)
 800162a:	f001 f915 	bl	8002858 <HAL_ADC_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001634:	f000 fad6 	bl	8001be4 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800163c:	f107 031c 	add.w	r3, r7, #28
 8001640:	4619      	mov	r1, r3
 8001642:	4811      	ldr	r0, [pc, #68]	; (8001688 <MX_ADC1_Init+0xdc>)
 8001644:	f002 f84a 	bl	80036dc <HAL_ADCEx_MultiModeConfigChannel>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800164e:	f000 fac9 	bl	8001be4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001652:	2301      	movs	r3, #1
 8001654:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001656:	2301      	movs	r3, #1
 8001658:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	4619      	mov	r1, r3
 800166e:	4806      	ldr	r0, [pc, #24]	; (8001688 <MX_ADC1_Init+0xdc>)
 8001670:	f001 fd48 	bl	8003104 <HAL_ADC_ConfigChannel>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800167a:	f000 fab3 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	3728      	adds	r7, #40	; 0x28
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000ad4 	.word	0x20000ad4

0800168c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001692:	1d3b      	adds	r3, r7, #4
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 800169c:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <MX_DAC1_Init+0x4c>)
 800169e:	4a0f      	ldr	r2, [pc, #60]	; (80016dc <MX_DAC1_Init+0x50>)
 80016a0:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80016a2:	480d      	ldr	r0, [pc, #52]	; (80016d8 <MX_DAC1_Init+0x4c>)
 80016a4:	f002 fb9b 	bl	8003dde <HAL_DAC_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 80016ae:	f000 fa99 	bl	8001be4 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80016b2:	2324      	movs	r3, #36	; 0x24
 80016b4:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	2200      	movs	r2, #0
 80016be:	4619      	mov	r1, r3
 80016c0:	4805      	ldr	r0, [pc, #20]	; (80016d8 <MX_DAC1_Init+0x4c>)
 80016c2:	f002 fbae 	bl	8003e22 <HAL_DAC_ConfigChannel>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 80016cc:	f000 fa8a 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80016d0:	bf00      	nop
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	200009e4 	.word	0x200009e4
 80016dc:	40007400 	.word	0x40007400

080016e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016e6:	f107 0310 	add.w	r3, r7, #16
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016fe:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <MX_TIM2_Init+0x98>)
 8001700:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001704:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001706:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <MX_TIM2_Init+0x98>)
 8001708:	2200      	movs	r2, #0
 800170a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170c:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <MX_TIM2_Init+0x98>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001712:	4b19      	ldr	r3, [pc, #100]	; (8001778 <MX_TIM2_Init+0x98>)
 8001714:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001718:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171a:	4b17      	ldr	r3, [pc, #92]	; (8001778 <MX_TIM2_Init+0x98>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001720:	4b15      	ldr	r3, [pc, #84]	; (8001778 <MX_TIM2_Init+0x98>)
 8001722:	2200      	movs	r2, #0
 8001724:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001726:	4814      	ldr	r0, [pc, #80]	; (8001778 <MX_TIM2_Init+0x98>)
 8001728:	f004 fabc 	bl	8005ca4 <HAL_TIM_Base_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001732:	f000 fa57 	bl	8001be4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800173a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800173c:	f107 0310 	add.w	r3, r7, #16
 8001740:	4619      	mov	r1, r3
 8001742:	480d      	ldr	r0, [pc, #52]	; (8001778 <MX_TIM2_Init+0x98>)
 8001744:	f004 fcfd 	bl	8006142 <HAL_TIM_ConfigClockSource>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800174e:	f000 fa49 	bl	8001be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001752:	2320      	movs	r3, #32
 8001754:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	4619      	mov	r1, r3
 800175e:	4806      	ldr	r0, [pc, #24]	; (8001778 <MX_TIM2_Init+0x98>)
 8001760:	f004 ff0e 	bl	8006580 <HAL_TIMEx_MasterConfigSynchronization>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800176a:	f000 fa3b 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800176e:	bf00      	nop
 8001770:	3720      	adds	r7, #32
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000b24 	.word	0x20000b24

0800177c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001782:	f107 0310 	add.w	r3, r7, #16
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800179a:	4b1e      	ldr	r3, [pc, #120]	; (8001814 <MX_TIM15_Init+0x98>)
 800179c:	4a1e      	ldr	r2, [pc, #120]	; (8001818 <MX_TIM15_Init+0x9c>)
 800179e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 72-1;
 80017a0:	4b1c      	ldr	r3, [pc, #112]	; (8001814 <MX_TIM15_Init+0x98>)
 80017a2:	2247      	movs	r2, #71	; 0x47
 80017a4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a6:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <MX_TIM15_Init+0x98>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 10-1;
 80017ac:	4b19      	ldr	r3, [pc, #100]	; (8001814 <MX_TIM15_Init+0x98>)
 80017ae:	2209      	movs	r2, #9
 80017b0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b2:	4b18      	ldr	r3, [pc, #96]	; (8001814 <MX_TIM15_Init+0x98>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80017b8:	4b16      	ldr	r3, [pc, #88]	; (8001814 <MX_TIM15_Init+0x98>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <MX_TIM15_Init+0x98>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80017c4:	4813      	ldr	r0, [pc, #76]	; (8001814 <MX_TIM15_Init+0x98>)
 80017c6:	f004 fa6d 	bl	8005ca4 <HAL_TIM_Base_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 80017d0:	f000 fa08 	bl	8001be4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80017da:	f107 0310 	add.w	r3, r7, #16
 80017de:	4619      	mov	r1, r3
 80017e0:	480c      	ldr	r0, [pc, #48]	; (8001814 <MX_TIM15_Init+0x98>)
 80017e2:	f004 fcae 	bl	8006142 <HAL_TIM_ConfigClockSource>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 80017ec:	f000 f9fa 	bl	8001be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f0:	2300      	movs	r3, #0
 80017f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	4619      	mov	r1, r3
 80017fc:	4805      	ldr	r0, [pc, #20]	; (8001814 <MX_TIM15_Init+0x98>)
 80017fe:	f004 febf 	bl	8006580 <HAL_TIMEx_MasterConfigSynchronization>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8001808:	f000 f9ec 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800180c:	bf00      	nop
 800180e:	3720      	adds	r7, #32
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	200009f8 	.word	0x200009f8
 8001818:	40014000 	.word	0x40014000

0800181c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001820:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <MX_TIM16_Init+0x44>)
 8001822:	4a10      	ldr	r2, [pc, #64]	; (8001864 <MX_TIM16_Init+0x48>)
 8001824:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 72-1;
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <MX_TIM16_Init+0x44>)
 8001828:	2247      	movs	r2, #71	; 0x47
 800182a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <MX_TIM16_Init+0x44>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 50 - 1;
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <MX_TIM16_Init+0x44>)
 8001834:	2231      	movs	r2, #49	; 0x31
 8001836:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001838:	4b09      	ldr	r3, [pc, #36]	; (8001860 <MX_TIM16_Init+0x44>)
 800183a:	2200      	movs	r2, #0
 800183c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800183e:	4b08      	ldr	r3, [pc, #32]	; (8001860 <MX_TIM16_Init+0x44>)
 8001840:	2200      	movs	r2, #0
 8001842:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <MX_TIM16_Init+0x44>)
 8001846:	2200      	movs	r2, #0
 8001848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <MX_TIM16_Init+0x44>)
 800184c:	f004 fa2a 	bl	8005ca4 <HAL_TIM_Base_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8001856:	f000 f9c5 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000bf4 	.word	0x20000bf4
 8001864:	40014400 	.word	0x40014400

08001868 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800186c:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <MX_TIM17_Init+0x48>)
 800186e:	4a11      	ldr	r2, [pc, #68]	; (80018b4 <MX_TIM17_Init+0x4c>)
 8001870:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 7200-1;
 8001872:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <MX_TIM17_Init+0x48>)
 8001874:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001878:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187a:	4b0d      	ldr	r3, [pc, #52]	; (80018b0 <MX_TIM17_Init+0x48>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 5000-1;
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <MX_TIM17_Init+0x48>)
 8001882:	f241 3287 	movw	r2, #4999	; 0x1387
 8001886:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001888:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <MX_TIM17_Init+0x48>)
 800188a:	2200      	movs	r2, #0
 800188c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800188e:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <MX_TIM17_Init+0x48>)
 8001890:	2200      	movs	r2, #0
 8001892:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <MX_TIM17_Init+0x48>)
 8001896:	2200      	movs	r2, #0
 8001898:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800189a:	4805      	ldr	r0, [pc, #20]	; (80018b0 <MX_TIM17_Init+0x48>)
 800189c:	f004 fa02 	bl	8005ca4 <HAL_TIM_Base_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 80018a6:	f000 f99d 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000a44 	.word	0x20000a44
 80018b4:	40014800 	.word	0x40014800

080018b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018bc:	4b14      	ldr	r3, [pc, #80]	; (8001910 <MX_USART2_UART_Init+0x58>)
 80018be:	4a15      	ldr	r2, [pc, #84]	; (8001914 <MX_USART2_UART_Init+0x5c>)
 80018c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018c2:	4b13      	ldr	r3, [pc, #76]	; (8001910 <MX_USART2_UART_Init+0x58>)
 80018c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <MX_USART2_UART_Init+0x58>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018d0:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <MX_USART2_UART_Init+0x58>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <MX_USART2_UART_Init+0x58>)
 80018d8:	2200      	movs	r2, #0
 80018da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <MX_USART2_UART_Init+0x58>)
 80018de:	220c      	movs	r2, #12
 80018e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018e2:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <MX_USART2_UART_Init+0x58>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018e8:	4b09      	ldr	r3, [pc, #36]	; (8001910 <MX_USART2_UART_Init+0x58>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <MX_USART2_UART_Init+0x58>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <MX_USART2_UART_Init+0x58>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018fa:	4805      	ldr	r0, [pc, #20]	; (8001910 <MX_USART2_UART_Init+0x58>)
 80018fc:	f004 feea 	bl	80066d4 <HAL_UART_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001906:	f000 f96d 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000b70 	.word	0x20000b70
 8001914:	40004400 	.word	0x40004400

08001918 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800191e:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <MX_DMA_Init+0x38>)
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	4a0b      	ldr	r2, [pc, #44]	; (8001950 <MX_DMA_Init+0x38>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6153      	str	r3, [r2, #20]
 800192a:	4b09      	ldr	r3, [pc, #36]	; (8001950 <MX_DMA_Init+0x38>)
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001936:	2200      	movs	r2, #0
 8001938:	2100      	movs	r1, #0
 800193a:	200d      	movs	r0, #13
 800193c:	f002 fa19 	bl	8003d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001940:	200d      	movs	r0, #13
 8001942:	f002 fa32 	bl	8003daa <HAL_NVIC_EnableIRQ>

}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40021000 	.word	0x40021000

08001954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	; 0x28
 8001958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]
 8001966:	60da      	str	r2, [r3, #12]
 8001968:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800196a:	4b75      	ldr	r3, [pc, #468]	; (8001b40 <MX_GPIO_Init+0x1ec>)
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	4a74      	ldr	r2, [pc, #464]	; (8001b40 <MX_GPIO_Init+0x1ec>)
 8001970:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001974:	6153      	str	r3, [r2, #20]
 8001976:	4b72      	ldr	r3, [pc, #456]	; (8001b40 <MX_GPIO_Init+0x1ec>)
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001982:	4b6f      	ldr	r3, [pc, #444]	; (8001b40 <MX_GPIO_Init+0x1ec>)
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	4a6e      	ldr	r2, [pc, #440]	; (8001b40 <MX_GPIO_Init+0x1ec>)
 8001988:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800198c:	6153      	str	r3, [r2, #20]
 800198e:	4b6c      	ldr	r3, [pc, #432]	; (8001b40 <MX_GPIO_Init+0x1ec>)
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800199a:	4b69      	ldr	r3, [pc, #420]	; (8001b40 <MX_GPIO_Init+0x1ec>)
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	4a68      	ldr	r2, [pc, #416]	; (8001b40 <MX_GPIO_Init+0x1ec>)
 80019a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a4:	6153      	str	r3, [r2, #20]
 80019a6:	4b66      	ldr	r3, [pc, #408]	; (8001b40 <MX_GPIO_Init+0x1ec>)
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b2:	4b63      	ldr	r3, [pc, #396]	; (8001b40 <MX_GPIO_Init+0x1ec>)
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	4a62      	ldr	r2, [pc, #392]	; (8001b40 <MX_GPIO_Init+0x1ec>)
 80019b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019bc:	6153      	str	r3, [r2, #20]
 80019be:	4b60      	ldr	r3, [pc, #384]	; (8001b40 <MX_GPIO_Init+0x1ec>)
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD5_Pin|LD4_Pin|lcd_D6_Pin 
 80019ca:	2200      	movs	r2, #0
 80019cc:	f44f 51f1 	mov.w	r1, #7712	; 0x1e20
 80019d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019d4:	f002 fdb2 	bl	800453c <HAL_GPIO_WritePin>
                          |lcd_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|lcd_D4_Pin|LD3_Pin|lcd_D5_Pin, GPIO_PIN_RESET);
 80019d8:	2200      	movs	r2, #0
 80019da:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80019de:	4859      	ldr	r0, [pc, #356]	; (8001b44 <MX_GPIO_Init+0x1f0>)
 80019e0:	f002 fdac 	bl	800453c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, lcd_blown_Pin|lcd_RS_Pin|lcd_E_Pin, GPIO_PIN_RESET);
 80019e4:	2200      	movs	r2, #0
 80019e6:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 80019ea:	4857      	ldr	r0, [pc, #348]	; (8001b48 <MX_GPIO_Init+0x1f4>)
 80019ec:	f002 fda6 	bl	800453c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019f6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80019fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	4619      	mov	r1, r3
 8001a06:	484f      	ldr	r0, [pc, #316]	; (8001b44 <MX_GPIO_Init+0x1f0>)
 8001a08:	f002 fbf6 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD5_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD5_Pin|LD4_Pin;
 8001a0c:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 8001a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a12:	2301      	movs	r3, #1
 8001a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1e:	f107 0314 	add.w	r3, r7, #20
 8001a22:	4619      	mov	r1, r3
 8001a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a28:	f002 fbe6 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_mid_Pin */
  GPIO_InitStruct.Pin = btn_mid_Pin;
 8001a2c:	2340      	movs	r3, #64	; 0x40
 8001a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001a30:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a36:	2301      	movs	r3, #1
 8001a38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn_mid_GPIO_Port, &GPIO_InitStruct);
 8001a3a:	f107 0314 	add.w	r3, r7, #20
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a44:	f002 fbd8 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_right_Pin */
  GPIO_InitStruct.Pin = btn_right_Pin;
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a4c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a52:	2301      	movs	r3, #1
 8001a54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn_right_GPIO_Port, &GPIO_InitStruct);
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a60:	f002 fbca 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD3_Pin;
 8001a64:	2390      	movs	r3, #144	; 0x90
 8001a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a70:	2300      	movs	r3, #0
 8001a72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4832      	ldr	r0, [pc, #200]	; (8001b44 <MX_GPIO_Init+0x1f0>)
 8001a7c:	f002 fbbc 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : btn_down_Pin btn_left_Pin btn_up_Pin */
  GPIO_InitStruct.Pin = btn_down_Pin|btn_left_Pin|btn_up_Pin;
 8001a80:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001a84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a86:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	4619      	mov	r1, r3
 8001a96:	482c      	ldr	r0, [pc, #176]	; (8001b48 <MX_GPIO_Init+0x1f4>)
 8001a98:	f002 fbae 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : lcd_blown_Pin */
  GPIO_InitStruct.Pin = lcd_blown_Pin;
 8001a9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001aa2:	2311      	movs	r3, #17
 8001aa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(lcd_blown_GPIO_Port, &GPIO_InitStruct);
 8001aae:	f107 0314 	add.w	r3, r7, #20
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4824      	ldr	r0, [pc, #144]	; (8001b48 <MX_GPIO_Init+0x1f4>)
 8001ab6:	f002 fb9f 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : lcd_RS_Pin lcd_E_Pin */
  GPIO_InitStruct.Pin = lcd_RS_Pin|lcd_E_Pin;
 8001aba:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	481d      	ldr	r0, [pc, #116]	; (8001b48 <MX_GPIO_Init+0x1f4>)
 8001ad4:	f002 fb90 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : lcd_D4_Pin lcd_D5_Pin */
  GPIO_InitStruct.Pin = lcd_D4_Pin|lcd_D5_Pin;
 8001ad8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001ade:	2311      	movs	r3, #17
 8001ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aea:	f107 0314 	add.w	r3, r7, #20
 8001aee:	4619      	mov	r1, r3
 8001af0:	4814      	ldr	r0, [pc, #80]	; (8001b44 <MX_GPIO_Init+0x1f0>)
 8001af2:	f002 fb81 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : lcd_D6_Pin lcd_D7_Pin */
  GPIO_InitStruct.Pin = lcd_D6_Pin|lcd_D7_Pin;
 8001af6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001afc:	2311      	movs	r3, #17
 8001afe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b04:	2300      	movs	r3, #0
 8001b06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b12:	f002 fb71 	bl	80041f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2100      	movs	r1, #0
 8001b1a:	2017      	movs	r0, #23
 8001b1c:	f002 f929 	bl	8003d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b20:	2017      	movs	r0, #23
 8001b22:	f002 f942 	bl	8003daa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2100      	movs	r1, #0
 8001b2a:	2028      	movs	r0, #40	; 0x28
 8001b2c:	f002 f921 	bl	8003d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b30:	2028      	movs	r0, #40	; 0x28
 8001b32:	f002 f93a 	bl	8003daa <HAL_NVIC_EnableIRQ>

}
 8001b36:	bf00      	nop
 8001b38:	3728      	adds	r7, #40	; 0x28
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40021000 	.word	0x40021000
 8001b44:	48000800 	.word	0x48000800
 8001b48:	48000400 	.word	0x48000400

08001b4c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this interrupt
	if(htim == &htim16){
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a0e      	ldr	r2, [pc, #56]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d103      	bne.n	8001b64 <HAL_TIM_PeriodElapsedCallback+0x18>
		adc_timer_flag = 1;
 8001b5c:	4b0d      	ldr	r3, [pc, #52]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	701a      	strb	r2, [r3, #0]
	} else if (htim == &htim17){
		DisplayState.RefreshFlag = 1;
	} else if (htim == &htim15){
		us_10 = 1;
	}
}
 8001b62:	e00e      	b.n	8001b82 <HAL_TIM_PeriodElapsedCallback+0x36>
	} else if (htim == &htim17){
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a0c      	ldr	r2, [pc, #48]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d103      	bne.n	8001b74 <HAL_TIM_PeriodElapsedCallback+0x28>
		DisplayState.RefreshFlag = 1;
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	71da      	strb	r2, [r3, #7]
}
 8001b72:	e006      	b.n	8001b82 <HAL_TIM_PeriodElapsedCallback+0x36>
	} else if (htim == &htim15){
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d102      	bne.n	8001b82 <HAL_TIM_PeriodElapsedCallback+0x36>
		us_10 = 1;
 8001b7c:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001b7e:	2201      	movs	r2, #1
 8001b80:	701a      	strb	r2, [r3, #0]
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	20000bf4 	.word	0x20000bf4
 8001b94:	2000003f 	.word	0x2000003f
 8001b98:	20000a44 	.word	0x20000a44
 8001b9c:	200009d8 	.word	0x200009d8
 8001ba0:	200009f8 	.word	0x200009f8
 8001ba4:	20000045 	.word	0x20000045

08001ba8 <Delay_us_10>:

void Delay_us_10(uint8_t tens)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71fb      	strb	r3, [r7, #7]
	uint8_t us_10_counter = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	73fb      	strb	r3, [r7, #15]
	while(us_10_counter < tens)
 8001bb6:	e009      	b.n	8001bcc <Delay_us_10+0x24>
	{
		if(us_10){
 8001bb8:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <Delay_us_10+0x38>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d005      	beq.n	8001bcc <Delay_us_10+0x24>
			us_10_counter ++;
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	73fb      	strb	r3, [r7, #15]
			us_10 = 0;
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <Delay_us_10+0x38>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	701a      	strb	r2, [r3, #0]
	while(us_10_counter < tens)
 8001bcc:	7bfa      	ldrb	r2, [r7, #15]
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d3f1      	bcc.n	8001bb8 <Delay_us_10+0x10>
		}
	}
}
 8001bd4:	bf00      	nop
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	20000045 	.word	0x20000045

08001be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
	...

08001bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfa:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <HAL_MspInit+0x44>)
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	4a0e      	ldr	r2, [pc, #56]	; (8001c38 <HAL_MspInit+0x44>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6193      	str	r3, [r2, #24]
 8001c06:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <HAL_MspInit+0x44>)
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	607b      	str	r3, [r7, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <HAL_MspInit+0x44>)
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	4a08      	ldr	r2, [pc, #32]	; (8001c38 <HAL_MspInit+0x44>)
 8001c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c1c:	61d3      	str	r3, [r2, #28]
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_MspInit+0x44>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c26:	603b      	str	r3, [r7, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c2a:	2007      	movs	r0, #7
 8001c2c:	f002 f896 	bl	8003d5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c30:	bf00      	nop
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40021000 	.word	0x40021000

08001c3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08a      	sub	sp, #40	; 0x28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c5c:	d124      	bne.n	8001ca8 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001c5e:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <HAL_ADC_MspInit+0x74>)
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	4a13      	ldr	r2, [pc, #76]	; (8001cb0 <HAL_ADC_MspInit+0x74>)
 8001c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c68:	6153      	str	r3, [r2, #20]
 8001c6a:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <HAL_ADC_MspInit+0x74>)
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c72:	613b      	str	r3, [r7, #16]
 8001c74:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c76:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <HAL_ADC_MspInit+0x74>)
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	4a0d      	ldr	r2, [pc, #52]	; (8001cb0 <HAL_ADC_MspInit+0x74>)
 8001c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c80:	6153      	str	r3, [r2, #20]
 8001c82:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <HAL_ADC_MspInit+0x74>)
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c92:	2303      	movs	r3, #3
 8001c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9a:	f107 0314 	add.w	r3, r7, #20
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ca4:	f002 faa8 	bl	80041f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ca8:	bf00      	nop
 8001caa:	3728      	adds	r7, #40	; 0x28
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40021000 	.word	0x40021000

08001cb4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	; 0x28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a2c      	ldr	r2, [pc, #176]	; (8001d84 <HAL_DAC_MspInit+0xd0>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d152      	bne.n	8001d7c <HAL_DAC_MspInit+0xc8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001cd6:	4b2c      	ldr	r3, [pc, #176]	; (8001d88 <HAL_DAC_MspInit+0xd4>)
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	4a2b      	ldr	r2, [pc, #172]	; (8001d88 <HAL_DAC_MspInit+0xd4>)
 8001cdc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ce0:	61d3      	str	r3, [r2, #28]
 8001ce2:	4b29      	ldr	r3, [pc, #164]	; (8001d88 <HAL_DAC_MspInit+0xd4>)
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cee:	4b26      	ldr	r3, [pc, #152]	; (8001d88 <HAL_DAC_MspInit+0xd4>)
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	4a25      	ldr	r2, [pc, #148]	; (8001d88 <HAL_DAC_MspInit+0xd4>)
 8001cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf8:	6153      	str	r3, [r2, #20]
 8001cfa:	4b23      	ldr	r3, [pc, #140]	; (8001d88 <HAL_DAC_MspInit+0xd4>)
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d06:	2310      	movs	r3, #16
 8001d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	4619      	mov	r1, r3
 8001d18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d1c:	f002 fa6c 	bl	80041f8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8001d20:	4b1a      	ldr	r3, [pc, #104]	; (8001d8c <HAL_DAC_MspInit+0xd8>)
 8001d22:	4a1b      	ldr	r2, [pc, #108]	; (8001d90 <HAL_DAC_MspInit+0xdc>)
 8001d24:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d26:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <HAL_DAC_MspInit+0xd8>)
 8001d28:	2210      	movs	r2, #16
 8001d2a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d2c:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <HAL_DAC_MspInit+0xd8>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001d32:	4b16      	ldr	r3, [pc, #88]	; (8001d8c <HAL_DAC_MspInit+0xd8>)
 8001d34:	2280      	movs	r2, #128	; 0x80
 8001d36:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d38:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <HAL_DAC_MspInit+0xd8>)
 8001d3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d3e:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d40:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <HAL_DAC_MspInit+0xd8>)
 8001d42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d46:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001d48:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <HAL_DAC_MspInit+0xd8>)
 8001d4a:	2220      	movs	r2, #32
 8001d4c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001d4e:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <HAL_DAC_MspInit+0xd8>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001d54:	480d      	ldr	r0, [pc, #52]	; (8001d8c <HAL_DAC_MspInit+0xd8>)
 8001d56:	f002 f8b1 	bl	8003ebc <HAL_DMA_Init>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 8001d60:	f7ff ff40 	bl	8001be4 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8001d64:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <HAL_DAC_MspInit+0xe0>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <HAL_DAC_MspInit+0xe0>)
 8001d6a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d6e:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a06      	ldr	r2, [pc, #24]	; (8001d8c <HAL_DAC_MspInit+0xd8>)
 8001d74:	609a      	str	r2, [r3, #8]
 8001d76:	4a05      	ldr	r2, [pc, #20]	; (8001d8c <HAL_DAC_MspInit+0xd8>)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001d7c:	bf00      	nop
 8001d7e:	3728      	adds	r7, #40	; 0x28
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40007400 	.word	0x40007400
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	20000a90 	.word	0x20000a90
 8001d90:	40020030 	.word	0x40020030
 8001d94:	40010000 	.word	0x40010000

08001d98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001da8:	d114      	bne.n	8001dd4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001daa:	4b33      	ldr	r3, [pc, #204]	; (8001e78 <HAL_TIM_Base_MspInit+0xe0>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	4a32      	ldr	r2, [pc, #200]	; (8001e78 <HAL_TIM_Base_MspInit+0xe0>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	61d3      	str	r3, [r2, #28]
 8001db6:	4b30      	ldr	r3, [pc, #192]	; (8001e78 <HAL_TIM_Base_MspInit+0xe0>)
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	201c      	movs	r0, #28
 8001dc8:	f001 ffd3 	bl	8003d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001dcc:	201c      	movs	r0, #28
 8001dce:	f001 ffec 	bl	8003daa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001dd2:	e04c      	b.n	8001e6e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM15)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a28      	ldr	r2, [pc, #160]	; (8001e7c <HAL_TIM_Base_MspInit+0xe4>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d114      	bne.n	8001e08 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001dde:	4b26      	ldr	r3, [pc, #152]	; (8001e78 <HAL_TIM_Base_MspInit+0xe0>)
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	4a25      	ldr	r2, [pc, #148]	; (8001e78 <HAL_TIM_Base_MspInit+0xe0>)
 8001de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de8:	6193      	str	r3, [r2, #24]
 8001dea:	4b23      	ldr	r3, [pc, #140]	; (8001e78 <HAL_TIM_Base_MspInit+0xe0>)
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001df6:	2200      	movs	r2, #0
 8001df8:	2100      	movs	r1, #0
 8001dfa:	2018      	movs	r0, #24
 8001dfc:	f001 ffb9 	bl	8003d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001e00:	2018      	movs	r0, #24
 8001e02:	f001 ffd2 	bl	8003daa <HAL_NVIC_EnableIRQ>
}
 8001e06:	e032      	b.n	8001e6e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM16)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a1c      	ldr	r2, [pc, #112]	; (8001e80 <HAL_TIM_Base_MspInit+0xe8>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d114      	bne.n	8001e3c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001e12:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <HAL_TIM_Base_MspInit+0xe0>)
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	4a18      	ldr	r2, [pc, #96]	; (8001e78 <HAL_TIM_Base_MspInit+0xe0>)
 8001e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e1c:	6193      	str	r3, [r2, #24]
 8001e1e:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <HAL_TIM_Base_MspInit+0xe0>)
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	2019      	movs	r0, #25
 8001e30:	f001 ff9f 	bl	8003d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001e34:	2019      	movs	r0, #25
 8001e36:	f001 ffb8 	bl	8003daa <HAL_NVIC_EnableIRQ>
}
 8001e3a:	e018      	b.n	8001e6e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM17)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a10      	ldr	r2, [pc, #64]	; (8001e84 <HAL_TIM_Base_MspInit+0xec>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d113      	bne.n	8001e6e <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001e46:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <HAL_TIM_Base_MspInit+0xe0>)
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	4a0b      	ldr	r2, [pc, #44]	; (8001e78 <HAL_TIM_Base_MspInit+0xe0>)
 8001e4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e50:	6193      	str	r3, [r2, #24]
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <HAL_TIM_Base_MspInit+0xe0>)
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2100      	movs	r1, #0
 8001e62:	201a      	movs	r0, #26
 8001e64:	f001 ff85 	bl	8003d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001e68:	201a      	movs	r0, #26
 8001e6a:	f001 ff9e 	bl	8003daa <HAL_NVIC_EnableIRQ>
}
 8001e6e:	bf00      	nop
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40014000 	.word	0x40014000
 8001e80:	40014400 	.word	0x40014400
 8001e84:	40014800 	.word	0x40014800

08001e88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08a      	sub	sp, #40	; 0x28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a1b      	ldr	r2, [pc, #108]	; (8001f14 <HAL_UART_MspInit+0x8c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d130      	bne.n	8001f0c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eaa:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <HAL_UART_MspInit+0x90>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	4a1a      	ldr	r2, [pc, #104]	; (8001f18 <HAL_UART_MspInit+0x90>)
 8001eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb4:	61d3      	str	r3, [r2, #28]
 8001eb6:	4b18      	ldr	r3, [pc, #96]	; (8001f18 <HAL_UART_MspInit+0x90>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec2:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <HAL_UART_MspInit+0x90>)
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	4a14      	ldr	r2, [pc, #80]	; (8001f18 <HAL_UART_MspInit+0x90>)
 8001ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ecc:	6153      	str	r3, [r2, #20]
 8001ece:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <HAL_UART_MspInit+0x90>)
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001eda:	230c      	movs	r3, #12
 8001edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eea:	2307      	movs	r3, #7
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eee:	f107 0314 	add.w	r3, r7, #20
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ef8:	f002 f97e 	bl	80041f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001efc:	2200      	movs	r2, #0
 8001efe:	2100      	movs	r1, #0
 8001f00:	2026      	movs	r0, #38	; 0x26
 8001f02:	f001 ff36 	bl	8003d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f06:	2026      	movs	r0, #38	; 0x26
 8001f08:	f001 ff4f 	bl	8003daa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f0c:	bf00      	nop
 8001f0e:	3728      	adds	r7, #40	; 0x28
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40004400 	.word	0x40004400
 8001f18:	40021000 	.word	0x40021000

08001f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f2e:	e7fe      	b.n	8001f2e <HardFault_Handler+0x4>

08001f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f34:	e7fe      	b.n	8001f34 <MemManage_Handler+0x4>

08001f36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f3a:	e7fe      	b.n	8001f3a <BusFault_Handler+0x4>

08001f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f40:	e7fe      	b.n	8001f40 <UsageFault_Handler+0x4>

08001f42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f70:	f000 fc30 	bl	80027d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001f7c:	4802      	ldr	r0, [pc, #8]	; (8001f88 <DMA1_Channel3_IRQHandler+0x10>)
 8001f7e:	f002 f85b 	bl	8004038 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000a90 	.word	0x20000a90

08001f8c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001f90:	2040      	movs	r0, #64	; 0x40
 8001f92:	f002 fb05 	bl	80045a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001f96:	2080      	movs	r0, #128	; 0x80
 8001f98:	f002 fb02 	bl	80045a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001f9c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001fa0:	f002 fafe 	bl	80045a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001fa4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001fa8:	f002 fafa 	bl	80045a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001fac:	bf00      	nop
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001fb4:	4802      	ldr	r0, [pc, #8]	; (8001fc0 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001fb6:	f003 ffa5 	bl	8005f04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	200009f8 	.word	0x200009f8

08001fc4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001fca:	f003 ff9b 	bl	8005f04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000bf4 	.word	0x20000bf4

08001fd8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001fdc:	4802      	ldr	r0, [pc, #8]	; (8001fe8 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001fde:	f003 ff91 	bl	8005f04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000a44 	.word	0x20000a44

08001fec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ff0:	4802      	ldr	r0, [pc, #8]	; (8001ffc <TIM2_IRQHandler+0x10>)
 8001ff2:	f003 ff87 	bl	8005f04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000b24 	.word	0x20000b24

08002000 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002004:	4802      	ldr	r0, [pc, #8]	; (8002010 <USART2_IRQHandler+0x10>)
 8002006:	f004 fc95 	bl	8006934 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000b70 	.word	0x20000b70

08002014 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002018:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800201c:	f002 fac0 	bl	80045a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002020:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002024:	f002 fabc 	bl	80045a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002028:	bf00      	nop
 800202a:	bd80      	pop	{r7, pc}

0800202c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <SystemInit+0x20>)
 8002032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002036:	4a05      	ldr	r2, [pc, #20]	; (800204c <SystemInit+0x20>)
 8002038:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800203c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <UART_Main_Function>:
uint8_t rx_bytes[10] = {0};
uint8_t rx_bytes_counter = 0;
uint8_t count = 0;

void UART_Main_Function()
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
	if(rx_stored[0] != '\n' && rx_stored[0] != '\0' && rx_stored[0] != 0x0a)
 8002054:	4b1f      	ldr	r3, [pc, #124]	; (80020d4 <UART_Main_Function+0x84>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b0a      	cmp	r3, #10
 800205a:	d038      	beq.n	80020ce <UART_Main_Function+0x7e>
 800205c:	4b1d      	ldr	r3, [pc, #116]	; (80020d4 <UART_Main_Function+0x84>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d034      	beq.n	80020ce <UART_Main_Function+0x7e>
 8002064:	4b1b      	ldr	r3, [pc, #108]	; (80020d4 <UART_Main_Function+0x84>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b0a      	cmp	r3, #10
 800206a:	d030      	beq.n	80020ce <UART_Main_Function+0x7e>
	{
	  rx_bytes[rx_bytes_counter] = rx_stored[0];
 800206c:	4b1a      	ldr	r3, [pc, #104]	; (80020d8 <UART_Main_Function+0x88>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	461a      	mov	r2, r3
 8002072:	4b18      	ldr	r3, [pc, #96]	; (80020d4 <UART_Main_Function+0x84>)
 8002074:	7819      	ldrb	r1, [r3, #0]
 8002076:	4b19      	ldr	r3, [pc, #100]	; (80020dc <UART_Main_Function+0x8c>)
 8002078:	5499      	strb	r1, [r3, r2]
	  if(rx_bytes_counter == 0 && rx_stored[0] == '@'){
 800207a:	4b17      	ldr	r3, [pc, #92]	; (80020d8 <UART_Main_Function+0x88>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10a      	bne.n	8002098 <UART_Main_Function+0x48>
 8002082:	4b14      	ldr	r3, [pc, #80]	; (80020d4 <UART_Main_Function+0x84>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b40      	cmp	r3, #64	; 0x40
 8002088:	d106      	bne.n	8002098 <UART_Main_Function+0x48>
		  rx_bytes_counter++;
 800208a:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <UART_Main_Function+0x88>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	3301      	adds	r3, #1
 8002090:	b2da      	uxtb	r2, r3
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <UART_Main_Function+0x88>)
 8002094:	701a      	strb	r2, [r3, #0]
			  UART_Interpret_Rx_Message(rx_bytes, rx_bytes_counter);
			  rx_bytes_counter = 0;
		  }
	  }
	}
}
 8002096:	e01a      	b.n	80020ce <UART_Main_Function+0x7e>
	  } else if(rx_bytes_counter > 0){
 8002098:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <UART_Main_Function+0x88>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d016      	beq.n	80020ce <UART_Main_Function+0x7e>
		  rx_bytes_counter++;
 80020a0:	4b0d      	ldr	r3, [pc, #52]	; (80020d8 <UART_Main_Function+0x88>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	3301      	adds	r3, #1
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <UART_Main_Function+0x88>)
 80020aa:	701a      	strb	r2, [r3, #0]
		  if(UART_Rx_Complete(rx_stored[0]))
 80020ac:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <UART_Main_Function+0x84>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f000 f815 	bl	80020e0 <UART_Rx_Complete>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d008      	beq.n	80020ce <UART_Main_Function+0x7e>
			  UART_Interpret_Rx_Message(rx_bytes, rx_bytes_counter);
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <UART_Main_Function+0x88>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	4619      	mov	r1, r3
 80020c2:	4806      	ldr	r0, [pc, #24]	; (80020dc <UART_Main_Function+0x8c>)
 80020c4:	f000 f81d 	bl	8002102 <UART_Interpret_Rx_Message>
			  rx_bytes_counter = 0;
 80020c8:	4b03      	ldr	r3, [pc, #12]	; (80020d8 <UART_Main_Function+0x88>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	701a      	strb	r2, [r3, #0]
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000c40 	.word	0x20000c40
 80020d8:	20000052 	.word	0x20000052
 80020dc:	20000048 	.word	0x20000048

080020e0 <UART_Rx_Complete>:

bool UART_Rx_Complete(uint8_t last_byte)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	71fb      	strb	r3, [r7, #7]
	if(last_byte == '!')
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	2b21      	cmp	r3, #33	; 0x21
 80020ee:	d101      	bne.n	80020f4 <UART_Rx_Complete+0x14>
	{
		return true;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e000      	b.n	80020f6 <UART_Rx_Complete+0x16>
	}
	else
	{
		return false;
 80020f4:	2300      	movs	r3, #0
	}
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <UART_Interpret_Rx_Message>:

void UART_Interpret_Rx_Message(uint8_t *rx_array, uint8_t length)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	460b      	mov	r3, r1
 800210c:	70fb      	strb	r3, [r7, #3]

	if(length > 7)
 800210e:	78fb      	ldrb	r3, [r7, #3]
 8002110:	2b07      	cmp	r3, #7
 8002112:	d947      	bls.n	80021a4 <UART_Interpret_Rx_Message+0xa2>
	{
		if(rx_array[2] == '*')
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3302      	adds	r3, #2
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b2a      	cmp	r3, #42	; 0x2a
 800211c:	d117      	bne.n	800214e <UART_Interpret_Rx_Message+0x4c>
		{
			// Requests
			switch(rx_array[4])
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3304      	adds	r3, #4
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b6d      	cmp	r3, #109	; 0x6d
 8002126:	d002      	beq.n	800212e <UART_Interpret_Rx_Message+0x2c>
 8002128:	2b73      	cmp	r3, #115	; 0x73
 800212a:	d007      	beq.n	800213c <UART_Interpret_Rx_Message+0x3a>
					DAC_Switch_Output_OnOff(rx_array[6]);
					UART_Request_Status();
					break;
				default:
					// Problems
					break;
 800212c:	e03a      	b.n	80021a4 <UART_Interpret_Rx_Message+0xa2>
					UART_Request_Measurement(rx_array[6]);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3306      	adds	r3, #6
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f000 f85b 	bl	80021f0 <UART_Request_Measurement>
					break;
 800213a:	e033      	b.n	80021a4 <UART_Interpret_Rx_Message+0xa2>
					DAC_Switch_Output_OnOff(rx_array[6]);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3306      	adds	r3, #6
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe f912 	bl	800036c <DAC_Switch_Output_OnOff>
					UART_Request_Status();
 8002148:	f000 f9a4 	bl	8002494 <UART_Request_Status>
					break;
 800214c:	e02a      	b.n	80021a4 <UART_Interpret_Rx_Message+0xa2>
			}
		}
		else if(rx_array[2] == '$'){
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3302      	adds	r3, #2
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b24      	cmp	r3, #36	; 0x24
 8002156:	d10a      	bne.n	800216e <UART_Interpret_Rx_Message+0x6c>
			// Set Measurement Mode
			UART_Set_Measurement_Mode(rx_array[4], rx_array[5]);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3304      	adds	r3, #4
 800215c:	781a      	ldrb	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3305      	adds	r3, #5
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	4619      	mov	r1, r3
 8002166:	4610      	mov	r0, r2
 8002168:	f000 f9f2 	bl	8002550 <UART_Set_Measurement_Mode>
		}else if(rx_array[2] == '#'){
			// Display on LCD
			UART_Display_On_LCD(rx_array[4], rx_array[6]);
		}
	}
}
 800216c:	e01a      	b.n	80021a4 <UART_Interpret_Rx_Message+0xa2>
		}else if(rx_array[2] == '^'){
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3302      	adds	r3, #2
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b5e      	cmp	r3, #94	; 0x5e
 8002176:	d105      	bne.n	8002184 <UART_Interpret_Rx_Message+0x82>
			UART_Set_Output_Parameter(rx_array, length);
 8002178:	78fb      	ldrb	r3, [r7, #3]
 800217a:	4619      	mov	r1, r3
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 fa29 	bl	80025d4 <UART_Set_Output_Parameter>
}
 8002182:	e00f      	b.n	80021a4 <UART_Interpret_Rx_Message+0xa2>
		}else if(rx_array[2] == '#'){
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3302      	adds	r3, #2
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b23      	cmp	r3, #35	; 0x23
 800218c:	d10a      	bne.n	80021a4 <UART_Interpret_Rx_Message+0xa2>
			UART_Display_On_LCD(rx_array[4], rx_array[6]);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3304      	adds	r3, #4
 8002192:	781a      	ldrb	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3306      	adds	r3, #6
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	4619      	mov	r1, r3
 800219c:	4610      	mov	r0, r2
 800219e:	f000 f805 	bl	80021ac <UART_Display_On_LCD>
}
 80021a2:	e7ff      	b.n	80021a4 <UART_Interpret_Rx_Message+0xa2>
 80021a4:	bf00      	nop
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <UART_Display_On_LCD>:

void UART_Display_On_LCD(uint8_t rs, uint8_t byte)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	460a      	mov	r2, r1
 80021b6:	71fb      	strb	r3, [r7, #7]
 80021b8:	4613      	mov	r3, r2
 80021ba:	71bb      	strb	r3, [r7, #6]
	if(rs == '1'){
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	2b31      	cmp	r3, #49	; 0x31
 80021c0:	d106      	bne.n	80021d0 <UART_Display_On_LCD+0x24>
		// Set print flag; store rs and byte
		DisplayState.PrintFlag = 1;
 80021c2:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <UART_Display_On_LCD+0x40>)
 80021c4:	2201      	movs	r2, #1
 80021c6:	715a      	strb	r2, [r3, #5]
		DisplayState.PrintByte = byte;
 80021c8:	4a08      	ldr	r2, [pc, #32]	; (80021ec <UART_Display_On_LCD+0x40>)
 80021ca:	79bb      	ldrb	r3, [r7, #6]
 80021cc:	7193      	strb	r3, [r2, #6]
	}else if(rs == '0'){
		// Instruction
		LCD_Write_Instruction(byte);
		Delay_us_10(200); // 2ms
	}
}
 80021ce:	e009      	b.n	80021e4 <UART_Display_On_LCD+0x38>
	}else if(rs == '0'){
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	2b30      	cmp	r3, #48	; 0x30
 80021d4:	d106      	bne.n	80021e4 <UART_Display_On_LCD+0x38>
		LCD_Write_Instruction(byte);
 80021d6:	79bb      	ldrb	r3, [r7, #6]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe f9ab 	bl	8000534 <LCD_Write_Instruction>
		Delay_us_10(200); // 2ms
 80021de:	20c8      	movs	r0, #200	; 0xc8
 80021e0:	f7ff fce2 	bl	8001ba8 <Delay_us_10>
}
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	200009d8 	.word	0x200009d8

080021f0 <UART_Request_Measurement>:

void UART_Request_Measurement(uint8_t parameter)
{
 80021f0:	b590      	push	{r4, r7, lr}
 80021f2:	b087      	sub	sp, #28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	71fb      	strb	r3, [r7, #7]
	uint8_t msg[13] = "@,m,x,xxxx,!\n";
 80021fa:	4b9f      	ldr	r3, [pc, #636]	; (8002478 <UART_Request_Measurement+0x288>)
 80021fc:	f107 0408 	add.w	r4, r7, #8
 8002200:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002202:	c407      	stmia	r4!, {r0, r1, r2}
 8002204:	7023      	strb	r3, [r4, #0]
	switch(parameter){
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	3b61      	subs	r3, #97	; 0x61
 800220a:	2b13      	cmp	r3, #19
 800220c:	f200 8122 	bhi.w	8002454 <UART_Request_Measurement+0x264>
 8002210:	a201      	add	r2, pc, #4	; (adr r2, 8002218 <UART_Request_Measurement+0x28>)
 8002212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002216:	bf00      	nop
 8002218:	08002269 	.word	0x08002269
 800221c:	08002455 	.word	0x08002455
 8002220:	08002455 	.word	0x08002455
 8002224:	08002455 	.word	0x08002455
 8002228:	08002455 	.word	0x08002455
 800222c:	080023b1 	.word	0x080023b1
 8002230:	08002455 	.word	0x08002455
 8002234:	08002455 	.word	0x08002455
 8002238:	08002455 	.word	0x08002455
 800223c:	08002455 	.word	0x08002455
 8002240:	08002455 	.word	0x08002455
 8002244:	08002455 	.word	0x08002455
 8002248:	08002455 	.word	0x08002455
 800224c:	08002455 	.word	0x08002455
 8002250:	0800230d 	.word	0x0800230d
 8002254:	08002455 	.word	0x08002455
 8002258:	08002455 	.word	0x08002455
 800225c:	08002455 	.word	0x08002455
 8002260:	08002455 	.word	0x08002455
 8002264:	08002455 	.word	0x08002455
		case 't':
			// Type
			break;
		case 'a':
			// Amplitude (peak-to-peak)
			msg[4] = 'a';
 8002268:	2361      	movs	r3, #97	; 0x61
 800226a:	733b      	strb	r3, [r7, #12]
			msg[6] = ((MeasurementState.Amplitude/1000) % 10) + 48;
 800226c:	4b83      	ldr	r3, [pc, #524]	; (800247c <UART_Request_Measurement+0x28c>)
 800226e:	885b      	ldrh	r3, [r3, #2]
 8002270:	4a83      	ldr	r2, [pc, #524]	; (8002480 <UART_Request_Measurement+0x290>)
 8002272:	fba2 2303 	umull	r2, r3, r2, r3
 8002276:	099b      	lsrs	r3, r3, #6
 8002278:	b29a      	uxth	r2, r3
 800227a:	4b82      	ldr	r3, [pc, #520]	; (8002484 <UART_Request_Measurement+0x294>)
 800227c:	fba3 1302 	umull	r1, r3, r3, r2
 8002280:	08d9      	lsrs	r1, r3, #3
 8002282:	460b      	mov	r3, r1
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	440b      	add	r3, r1
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	b29b      	uxth	r3, r3
 800228e:	b2db      	uxtb	r3, r3
 8002290:	3330      	adds	r3, #48	; 0x30
 8002292:	b2db      	uxtb	r3, r3
 8002294:	73bb      	strb	r3, [r7, #14]
			msg[7] = ((MeasurementState.Amplitude/100) % 10) + 48;
 8002296:	4b79      	ldr	r3, [pc, #484]	; (800247c <UART_Request_Measurement+0x28c>)
 8002298:	885b      	ldrh	r3, [r3, #2]
 800229a:	4a7b      	ldr	r2, [pc, #492]	; (8002488 <UART_Request_Measurement+0x298>)
 800229c:	fba2 2303 	umull	r2, r3, r2, r3
 80022a0:	095b      	lsrs	r3, r3, #5
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	4b77      	ldr	r3, [pc, #476]	; (8002484 <UART_Request_Measurement+0x294>)
 80022a6:	fba3 1302 	umull	r1, r3, r3, r2
 80022aa:	08d9      	lsrs	r1, r3, #3
 80022ac:	460b      	mov	r3, r1
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	3330      	adds	r3, #48	; 0x30
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	73fb      	strb	r3, [r7, #15]
			msg[8] = ((MeasurementState.Amplitude/10) % 10) + 48;
 80022c0:	4b6e      	ldr	r3, [pc, #440]	; (800247c <UART_Request_Measurement+0x28c>)
 80022c2:	885b      	ldrh	r3, [r3, #2]
 80022c4:	4a6f      	ldr	r2, [pc, #444]	; (8002484 <UART_Request_Measurement+0x294>)
 80022c6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ca:	08db      	lsrs	r3, r3, #3
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	4b6d      	ldr	r3, [pc, #436]	; (8002484 <UART_Request_Measurement+0x294>)
 80022d0:	fba3 1302 	umull	r1, r3, r3, r2
 80022d4:	08d9      	lsrs	r1, r3, #3
 80022d6:	460b      	mov	r3, r1
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	440b      	add	r3, r1
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	3330      	adds	r3, #48	; 0x30
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	743b      	strb	r3, [r7, #16]
			msg[9] = (MeasurementState.Amplitude % 10) + 48;
 80022ea:	4b64      	ldr	r3, [pc, #400]	; (800247c <UART_Request_Measurement+0x28c>)
 80022ec:	885a      	ldrh	r2, [r3, #2]
 80022ee:	4b65      	ldr	r3, [pc, #404]	; (8002484 <UART_Request_Measurement+0x294>)
 80022f0:	fba3 1302 	umull	r1, r3, r3, r2
 80022f4:	08d9      	lsrs	r1, r3, #3
 80022f6:	460b      	mov	r3, r1
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	440b      	add	r3, r1
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	b29b      	uxth	r3, r3
 8002302:	b2db      	uxtb	r3, r3
 8002304:	3330      	adds	r3, #48	; 0x30
 8002306:	b2db      	uxtb	r3, r3
 8002308:	747b      	strb	r3, [r7, #17]
			break;
 800230a:	e0a4      	b.n	8002456 <UART_Request_Measurement+0x266>
		case 'o':
			// Offset
			msg[4] = 'o';
 800230c:	236f      	movs	r3, #111	; 0x6f
 800230e:	733b      	strb	r3, [r7, #12]
			msg[6] = ((MeasurementState.Offset/1000) % 10) + 48;
 8002310:	4b5a      	ldr	r3, [pc, #360]	; (800247c <UART_Request_Measurement+0x28c>)
 8002312:	891b      	ldrh	r3, [r3, #8]
 8002314:	4a5a      	ldr	r2, [pc, #360]	; (8002480 <UART_Request_Measurement+0x290>)
 8002316:	fba2 2303 	umull	r2, r3, r2, r3
 800231a:	099b      	lsrs	r3, r3, #6
 800231c:	b29a      	uxth	r2, r3
 800231e:	4b59      	ldr	r3, [pc, #356]	; (8002484 <UART_Request_Measurement+0x294>)
 8002320:	fba3 1302 	umull	r1, r3, r3, r2
 8002324:	08d9      	lsrs	r1, r3, #3
 8002326:	460b      	mov	r3, r1
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	b29b      	uxth	r3, r3
 8002332:	b2db      	uxtb	r3, r3
 8002334:	3330      	adds	r3, #48	; 0x30
 8002336:	b2db      	uxtb	r3, r3
 8002338:	73bb      	strb	r3, [r7, #14]
			msg[7] = ((MeasurementState.Offset/100) % 10) + 48;
 800233a:	4b50      	ldr	r3, [pc, #320]	; (800247c <UART_Request_Measurement+0x28c>)
 800233c:	891b      	ldrh	r3, [r3, #8]
 800233e:	4a52      	ldr	r2, [pc, #328]	; (8002488 <UART_Request_Measurement+0x298>)
 8002340:	fba2 2303 	umull	r2, r3, r2, r3
 8002344:	095b      	lsrs	r3, r3, #5
 8002346:	b29a      	uxth	r2, r3
 8002348:	4b4e      	ldr	r3, [pc, #312]	; (8002484 <UART_Request_Measurement+0x294>)
 800234a:	fba3 1302 	umull	r1, r3, r3, r2
 800234e:	08d9      	lsrs	r1, r3, #3
 8002350:	460b      	mov	r3, r1
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	b29b      	uxth	r3, r3
 800235c:	b2db      	uxtb	r3, r3
 800235e:	3330      	adds	r3, #48	; 0x30
 8002360:	b2db      	uxtb	r3, r3
 8002362:	73fb      	strb	r3, [r7, #15]
			msg[8] = ((MeasurementState.Offset/10) % 10) + 48;
 8002364:	4b45      	ldr	r3, [pc, #276]	; (800247c <UART_Request_Measurement+0x28c>)
 8002366:	891b      	ldrh	r3, [r3, #8]
 8002368:	4a46      	ldr	r2, [pc, #280]	; (8002484 <UART_Request_Measurement+0x294>)
 800236a:	fba2 2303 	umull	r2, r3, r2, r3
 800236e:	08db      	lsrs	r3, r3, #3
 8002370:	b29a      	uxth	r2, r3
 8002372:	4b44      	ldr	r3, [pc, #272]	; (8002484 <UART_Request_Measurement+0x294>)
 8002374:	fba3 1302 	umull	r1, r3, r3, r2
 8002378:	08d9      	lsrs	r1, r3, #3
 800237a:	460b      	mov	r3, r1
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	440b      	add	r3, r1
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	b29b      	uxth	r3, r3
 8002386:	b2db      	uxtb	r3, r3
 8002388:	3330      	adds	r3, #48	; 0x30
 800238a:	b2db      	uxtb	r3, r3
 800238c:	743b      	strb	r3, [r7, #16]
			msg[9] = (MeasurementState.Offset % 10) + 48;
 800238e:	4b3b      	ldr	r3, [pc, #236]	; (800247c <UART_Request_Measurement+0x28c>)
 8002390:	891a      	ldrh	r2, [r3, #8]
 8002392:	4b3c      	ldr	r3, [pc, #240]	; (8002484 <UART_Request_Measurement+0x294>)
 8002394:	fba3 1302 	umull	r1, r3, r3, r2
 8002398:	08d9      	lsrs	r1, r3, #3
 800239a:	460b      	mov	r3, r1
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	440b      	add	r3, r1
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	3330      	adds	r3, #48	; 0x30
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	747b      	strb	r3, [r7, #17]
			break;
 80023ae:	e052      	b.n	8002456 <UART_Request_Measurement+0x266>
		case 'f':
			// Frequency
			msg[4] = 'f';
 80023b0:	2366      	movs	r3, #102	; 0x66
 80023b2:	733b      	strb	r3, [r7, #12]
			msg[6] = ((MeasurementState.Frequency/1000) % 10) + 48;
 80023b4:	4b31      	ldr	r3, [pc, #196]	; (800247c <UART_Request_Measurement+0x28c>)
 80023b6:	889b      	ldrh	r3, [r3, #4]
 80023b8:	4a31      	ldr	r2, [pc, #196]	; (8002480 <UART_Request_Measurement+0x290>)
 80023ba:	fba2 2303 	umull	r2, r3, r2, r3
 80023be:	099b      	lsrs	r3, r3, #6
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	4b30      	ldr	r3, [pc, #192]	; (8002484 <UART_Request_Measurement+0x294>)
 80023c4:	fba3 1302 	umull	r1, r3, r3, r2
 80023c8:	08d9      	lsrs	r1, r3, #3
 80023ca:	460b      	mov	r3, r1
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	440b      	add	r3, r1
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	3330      	adds	r3, #48	; 0x30
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	73bb      	strb	r3, [r7, #14]
			msg[7] = ((MeasurementState.Frequency/100) % 10) + 48;
 80023de:	4b27      	ldr	r3, [pc, #156]	; (800247c <UART_Request_Measurement+0x28c>)
 80023e0:	889b      	ldrh	r3, [r3, #4]
 80023e2:	4a29      	ldr	r2, [pc, #164]	; (8002488 <UART_Request_Measurement+0x298>)
 80023e4:	fba2 2303 	umull	r2, r3, r2, r3
 80023e8:	095b      	lsrs	r3, r3, #5
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	4b25      	ldr	r3, [pc, #148]	; (8002484 <UART_Request_Measurement+0x294>)
 80023ee:	fba3 1302 	umull	r1, r3, r3, r2
 80023f2:	08d9      	lsrs	r1, r3, #3
 80023f4:	460b      	mov	r3, r1
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	b29b      	uxth	r3, r3
 8002400:	b2db      	uxtb	r3, r3
 8002402:	3330      	adds	r3, #48	; 0x30
 8002404:	b2db      	uxtb	r3, r3
 8002406:	73fb      	strb	r3, [r7, #15]
			msg[8] = ((MeasurementState.Frequency/10) % 10) + 48;
 8002408:	4b1c      	ldr	r3, [pc, #112]	; (800247c <UART_Request_Measurement+0x28c>)
 800240a:	889b      	ldrh	r3, [r3, #4]
 800240c:	4a1d      	ldr	r2, [pc, #116]	; (8002484 <UART_Request_Measurement+0x294>)
 800240e:	fba2 2303 	umull	r2, r3, r2, r3
 8002412:	08db      	lsrs	r3, r3, #3
 8002414:	b29a      	uxth	r2, r3
 8002416:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <UART_Request_Measurement+0x294>)
 8002418:	fba3 1302 	umull	r1, r3, r3, r2
 800241c:	08d9      	lsrs	r1, r3, #3
 800241e:	460b      	mov	r3, r1
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	440b      	add	r3, r1
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	b29b      	uxth	r3, r3
 800242a:	b2db      	uxtb	r3, r3
 800242c:	3330      	adds	r3, #48	; 0x30
 800242e:	b2db      	uxtb	r3, r3
 8002430:	743b      	strb	r3, [r7, #16]
			msg[9] = (MeasurementState.Frequency % 10) + 48;
 8002432:	4b12      	ldr	r3, [pc, #72]	; (800247c <UART_Request_Measurement+0x28c>)
 8002434:	889a      	ldrh	r2, [r3, #4]
 8002436:	4b13      	ldr	r3, [pc, #76]	; (8002484 <UART_Request_Measurement+0x294>)
 8002438:	fba3 1302 	umull	r1, r3, r3, r2
 800243c:	08d9      	lsrs	r1, r3, #3
 800243e:	460b      	mov	r3, r1
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	440b      	add	r3, r1
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	b29b      	uxth	r3, r3
 800244a:	b2db      	uxtb	r3, r3
 800244c:	3330      	adds	r3, #48	; 0x30
 800244e:	b2db      	uxtb	r3, r3
 8002450:	747b      	strb	r3, [r7, #17]
			break;
 8002452:	e000      	b.n	8002456 <UART_Request_Measurement+0x266>
		case 'c':
			// Temperature
			break;
		default:
			// Problems
			break;
 8002454:	bf00      	nop
	}
	HAL_UART_Transmit(&huart2, msg, 13, 10);
 8002456:	f107 0108 	add.w	r1, r7, #8
 800245a:	230a      	movs	r3, #10
 800245c:	220d      	movs	r2, #13
 800245e:	480b      	ldr	r0, [pc, #44]	; (800248c <UART_Request_Measurement+0x29c>)
 8002460:	f004 f986 	bl	8006770 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 8002464:	2201      	movs	r2, #1
 8002466:	490a      	ldr	r1, [pc, #40]	; (8002490 <UART_Request_Measurement+0x2a0>)
 8002468:	4808      	ldr	r0, [pc, #32]	; (800248c <UART_Request_Measurement+0x29c>)
 800246a:	f004 fa15 	bl	8006898 <HAL_UART_Receive_IT>
}
 800246e:	bf00      	nop
 8002470:	371c      	adds	r7, #28
 8002472:	46bd      	mov	sp, r7
 8002474:	bd90      	pop	{r4, r7, pc}
 8002476:	bf00      	nop
 8002478:	08007c7c 	.word	0x08007c7c
 800247c:	20000828 	.word	0x20000828
 8002480:	10624dd3 	.word	0x10624dd3
 8002484:	cccccccd 	.word	0xcccccccd
 8002488:	51eb851f 	.word	0x51eb851f
 800248c:	20000b70 	.word	0x20000b70
 8002490:	20000c44 	.word	0x20000c44

08002494 <UART_Request_Status>:

void UART_Request_Status()
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
	uint8_t msg[11] = "@,xx,x,x,!\n";
 800249a:	4a28      	ldr	r2, [pc, #160]	; (800253c <UART_Request_Status+0xa8>)
 800249c:	1d3b      	adds	r3, r7, #4
 800249e:	ca07      	ldmia	r2, {r0, r1, r2}
 80024a0:	c303      	stmia	r3!, {r0, r1}
 80024a2:	801a      	strh	r2, [r3, #0]
 80024a4:	3302      	adds	r3, #2
 80024a6:	0c12      	lsrs	r2, r2, #16
 80024a8:	701a      	strb	r2, [r3, #0]
	switch(MeasurementState.Mode){
 80024aa:	4b25      	ldr	r3, [pc, #148]	; (8002540 <UART_Request_Status+0xac>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d825      	bhi.n	80024fe <UART_Request_Status+0x6a>
 80024b2:	a201      	add	r2, pc, #4	; (adr r2, 80024b8 <UART_Request_Status+0x24>)
 80024b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b8:	080024cd 	.word	0x080024cd
 80024bc:	080024e1 	.word	0x080024e1
 80024c0:	080024d7 	.word	0x080024d7
 80024c4:	080024eb 	.word	0x080024eb
 80024c8:	080024f5 	.word	0x080024f5
		case DV:
			// DV
			msg[2] = 'D';
 80024cc:	2344      	movs	r3, #68	; 0x44
 80024ce:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'V';
 80024d0:	2356      	movs	r3, #86	; 0x56
 80024d2:	71fb      	strb	r3, [r7, #7]
			break;
 80024d4:	e014      	b.n	8002500 <UART_Request_Status+0x6c>
		case AV:
			// AV
			msg[2] = 'A';
 80024d6:	2341      	movs	r3, #65	; 0x41
 80024d8:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'V';
 80024da:	2356      	movs	r3, #86	; 0x56
 80024dc:	71fb      	strb	r3, [r7, #7]
			break;
 80024de:	e00f      	b.n	8002500 <UART_Request_Status+0x6c>
		case DI:
			// DI
			msg[2] = 'D';
 80024e0:	2344      	movs	r3, #68	; 0x44
 80024e2:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'I';
 80024e4:	2349      	movs	r3, #73	; 0x49
 80024e6:	71fb      	strb	r3, [r7, #7]
			break;
 80024e8:	e00a      	b.n	8002500 <UART_Request_Status+0x6c>
		case AI:
			// AI
			msg[2] = 'A';
 80024ea:	2341      	movs	r3, #65	; 0x41
 80024ec:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'I';
 80024ee:	2349      	movs	r3, #73	; 0x49
 80024f0:	71fb      	strb	r3, [r7, #7]
			break;
 80024f2:	e005      	b.n	8002500 <UART_Request_Status+0x6c>
		case TC:
			// TC
			msg[2] = 'T';
 80024f4:	2354      	movs	r3, #84	; 0x54
 80024f6:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'C';
 80024f8:	2343      	movs	r3, #67	; 0x43
 80024fa:	71fb      	strb	r3, [r7, #7]
			break;
 80024fc:	e000      	b.n	8002500 <UART_Request_Status+0x6c>
		default:
			// Problems
			break;
 80024fe:	bf00      	nop
	}
	msg[5] = OutputState.Mode;
 8002500:	4b10      	ldr	r3, [pc, #64]	; (8002544 <UART_Request_Status+0xb0>)
 8002502:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 8002506:	727b      	strb	r3, [r7, #9]
	if(OutputState.On){
 8002508:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <UART_Request_Status+0xb0>)
 800250a:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 800250e:	2b00      	cmp	r3, #0
 8002510:	d002      	beq.n	8002518 <UART_Request_Status+0x84>
		msg[7] = '1';
 8002512:	2331      	movs	r3, #49	; 0x31
 8002514:	72fb      	strb	r3, [r7, #11]
 8002516:	e001      	b.n	800251c <UART_Request_Status+0x88>
	} else {
		msg[7] = '0';
 8002518:	2330      	movs	r3, #48	; 0x30
 800251a:	72fb      	strb	r3, [r7, #11]
	}
	HAL_UART_Transmit(&huart2, msg, 11, 10);
 800251c:	1d39      	adds	r1, r7, #4
 800251e:	230a      	movs	r3, #10
 8002520:	220b      	movs	r2, #11
 8002522:	4809      	ldr	r0, [pc, #36]	; (8002548 <UART_Request_Status+0xb4>)
 8002524:	f004 f924 	bl	8006770 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 8002528:	2201      	movs	r2, #1
 800252a:	4908      	ldr	r1, [pc, #32]	; (800254c <UART_Request_Status+0xb8>)
 800252c:	4806      	ldr	r0, [pc, #24]	; (8002548 <UART_Request_Status+0xb4>)
 800252e:	f004 f9b3 	bl	8006898 <HAL_UART_Receive_IT>

}
 8002532:	bf00      	nop
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	08007c8c 	.word	0x08007c8c
 8002540:	20000828 	.word	0x20000828
 8002544:	20000834 	.word	0x20000834
 8002548:	20000b70 	.word	0x20000b70
 800254c:	20000c44 	.word	0x20000c44

08002550 <UART_Set_Measurement_Mode>:

void UART_Set_Measurement_Mode(uint8_t key1, uint8_t key2){
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	460a      	mov	r2, r1
 800255a:	71fb      	strb	r3, [r7, #7]
 800255c:	4613      	mov	r3, r2
 800255e:	71bb      	strb	r3, [r7, #6]
	if(key1 == 'D' && key2 == 'V'){
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	2b44      	cmp	r3, #68	; 0x44
 8002564:	d106      	bne.n	8002574 <UART_Set_Measurement_Mode+0x24>
 8002566:	79bb      	ldrb	r3, [r7, #6]
 8002568:	2b56      	cmp	r3, #86	; 0x56
 800256a:	d103      	bne.n	8002574 <UART_Set_Measurement_Mode+0x24>
		// DC Voltage
		MeasurementState.Mode = DV;
 800256c:	4b18      	ldr	r3, [pc, #96]	; (80025d0 <UART_Set_Measurement_Mode+0x80>)
 800256e:	2200      	movs	r2, #0
 8002570:	701a      	strb	r2, [r3, #0]
 8002572:	e026      	b.n	80025c2 <UART_Set_Measurement_Mode+0x72>
	} else if (key1 == 'A' && key2 == 'V'){
 8002574:	79fb      	ldrb	r3, [r7, #7]
 8002576:	2b41      	cmp	r3, #65	; 0x41
 8002578:	d106      	bne.n	8002588 <UART_Set_Measurement_Mode+0x38>
 800257a:	79bb      	ldrb	r3, [r7, #6]
 800257c:	2b56      	cmp	r3, #86	; 0x56
 800257e:	d103      	bne.n	8002588 <UART_Set_Measurement_Mode+0x38>
		// AC Voltage
		MeasurementState.Mode = AV;
 8002580:	4b13      	ldr	r3, [pc, #76]	; (80025d0 <UART_Set_Measurement_Mode+0x80>)
 8002582:	2202      	movs	r2, #2
 8002584:	701a      	strb	r2, [r3, #0]
 8002586:	e01c      	b.n	80025c2 <UART_Set_Measurement_Mode+0x72>
	} else if (key1 == 'D' && key2 == 'I'){
 8002588:	79fb      	ldrb	r3, [r7, #7]
 800258a:	2b44      	cmp	r3, #68	; 0x44
 800258c:	d106      	bne.n	800259c <UART_Set_Measurement_Mode+0x4c>
 800258e:	79bb      	ldrb	r3, [r7, #6]
 8002590:	2b49      	cmp	r3, #73	; 0x49
 8002592:	d103      	bne.n	800259c <UART_Set_Measurement_Mode+0x4c>
		// DC Current
		MeasurementState.Mode = DI;
 8002594:	4b0e      	ldr	r3, [pc, #56]	; (80025d0 <UART_Set_Measurement_Mode+0x80>)
 8002596:	2201      	movs	r2, #1
 8002598:	701a      	strb	r2, [r3, #0]
 800259a:	e012      	b.n	80025c2 <UART_Set_Measurement_Mode+0x72>
	} else if (key1 == 'A' && key2 == 'I'){
 800259c:	79fb      	ldrb	r3, [r7, #7]
 800259e:	2b41      	cmp	r3, #65	; 0x41
 80025a0:	d106      	bne.n	80025b0 <UART_Set_Measurement_Mode+0x60>
 80025a2:	79bb      	ldrb	r3, [r7, #6]
 80025a4:	2b49      	cmp	r3, #73	; 0x49
 80025a6:	d103      	bne.n	80025b0 <UART_Set_Measurement_Mode+0x60>
		// AC Current
		MeasurementState.Mode = AI;
 80025a8:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <UART_Set_Measurement_Mode+0x80>)
 80025aa:	2203      	movs	r2, #3
 80025ac:	701a      	strb	r2, [r3, #0]
 80025ae:	e008      	b.n	80025c2 <UART_Set_Measurement_Mode+0x72>
	} else if (key1 == 'T' && key2 == 'C'){
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	2b54      	cmp	r3, #84	; 0x54
 80025b4:	d105      	bne.n	80025c2 <UART_Set_Measurement_Mode+0x72>
 80025b6:	79bb      	ldrb	r3, [r7, #6]
 80025b8:	2b43      	cmp	r3, #67	; 0x43
 80025ba:	d102      	bne.n	80025c2 <UART_Set_Measurement_Mode+0x72>
		// Temperature
		MeasurementState.Mode = TC;
 80025bc:	4b04      	ldr	r3, [pc, #16]	; (80025d0 <UART_Set_Measurement_Mode+0x80>)
 80025be:	2204      	movs	r2, #4
 80025c0:	701a      	strb	r2, [r3, #0]
	}
//	DisplayState.DisplayMeasurementsFlag = true;
	LCD_changeDisplayMode(Measurement);
 80025c2:	2001      	movs	r0, #1
 80025c4:	f7fe f980 	bl	80008c8 <LCD_changeDisplayMode>
}
 80025c8:	bf00      	nop
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	20000828 	.word	0x20000828

080025d4 <UART_Set_Output_Parameter>:

void UART_Set_Output_Parameter(uint8_t *rx_array, uint8_t length)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	460b      	mov	r3, r1
 80025de:	70fb      	strb	r3, [r7, #3]
	uint8_t param = rx_array[4];
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	791b      	ldrb	r3, [r3, #4]
 80025e4:	73bb      	strb	r3, [r7, #14]
	uint8_t val0 = rx_array[6];
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	799b      	ldrb	r3, [r3, #6]
 80025ea:	737b      	strb	r3, [r7, #13]
	uint8_t received_value = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	73fb      	strb	r3, [r7, #15]
	if(length > 9){
 80025f0:	78fb      	ldrb	r3, [r7, #3]
 80025f2:	2b09      	cmp	r3, #9
 80025f4:	d92c      	bls.n	8002650 <UART_Set_Output_Parameter+0x7c>
		uint8_t val1 = rx_array[7];
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	79db      	ldrb	r3, [r3, #7]
 80025fa:	733b      	strb	r3, [r7, #12]
		uint8_t val2 = rx_array[8];
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	7a1b      	ldrb	r3, [r3, #8]
 8002600:	72fb      	strb	r3, [r7, #11]
		uint8_t val3 = rx_array[9];
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	7a5b      	ldrb	r3, [r3, #9]
 8002606:	72bb      	strb	r3, [r7, #10]
		received_value += val0*1000;
 8002608:	7b7b      	ldrb	r3, [r7, #13]
 800260a:	461a      	mov	r2, r3
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	b2da      	uxtb	r2, r3
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	4413      	add	r3, r2
 8002618:	73fb      	strb	r3, [r7, #15]
		received_value += val1*100;
 800261a:	7b3b      	ldrb	r3, [r7, #12]
 800261c:	461a      	mov	r2, r3
 800261e:	0092      	lsls	r2, r2, #2
 8002620:	4413      	add	r3, r2
 8002622:	461a      	mov	r2, r3
 8002624:	0091      	lsls	r1, r2, #2
 8002626:	461a      	mov	r2, r3
 8002628:	460b      	mov	r3, r1
 800262a:	4413      	add	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	b2da      	uxtb	r2, r3
 8002630:	7bfb      	ldrb	r3, [r7, #15]
 8002632:	4413      	add	r3, r2
 8002634:	73fb      	strb	r3, [r7, #15]
		received_value += val2*10;
 8002636:	7afb      	ldrb	r3, [r7, #11]
 8002638:	461a      	mov	r2, r3
 800263a:	0092      	lsls	r2, r2, #2
 800263c:	4413      	add	r3, r2
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	b2da      	uxtb	r2, r3
 8002642:	7bfb      	ldrb	r3, [r7, #15]
 8002644:	4413      	add	r3, r2
 8002646:	73fb      	strb	r3, [r7, #15]
		received_value += val3;
 8002648:	7bfa      	ldrb	r2, [r7, #15]
 800264a:	7abb      	ldrb	r3, [r7, #10]
 800264c:	4413      	add	r3, r2
 800264e:	73fb      	strb	r3, [r7, #15]
	}
	switch(param){
 8002650:	7bbb      	ldrb	r3, [r7, #14]
 8002652:	3b61      	subs	r3, #97	; 0x61
 8002654:	2b13      	cmp	r3, #19
 8002656:	d842      	bhi.n	80026de <UART_Set_Output_Parameter+0x10a>
 8002658:	a201      	add	r2, pc, #4	; (adr r2, 8002660 <UART_Set_Output_Parameter+0x8c>)
 800265a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265e:	bf00      	nop
 8002660:	080026bb 	.word	0x080026bb
 8002664:	080026df 	.word	0x080026df
 8002668:	080026df 	.word	0x080026df
 800266c:	080026df 	.word	0x080026df
 8002670:	080026df 	.word	0x080026df
 8002674:	080026d3 	.word	0x080026d3
 8002678:	080026df 	.word	0x080026df
 800267c:	080026df 	.word	0x080026df
 8002680:	080026df 	.word	0x080026df
 8002684:	080026df 	.word	0x080026df
 8002688:	080026df 	.word	0x080026df
 800268c:	080026df 	.word	0x080026df
 8002690:	080026df 	.word	0x080026df
 8002694:	080026df 	.word	0x080026df
 8002698:	080026c7 	.word	0x080026c7
 800269c:	080026df 	.word	0x080026df
 80026a0:	080026df 	.word	0x080026df
 80026a4:	080026df 	.word	0x080026df
 80026a8:	080026df 	.word	0x080026df
 80026ac:	080026b1 	.word	0x080026b1
		case 't':
			// Type
			OutputState.Mode = val0;
 80026b0:	4a0f      	ldr	r2, [pc, #60]	; (80026f0 <UART_Set_Output_Parameter+0x11c>)
 80026b2:	7b7b      	ldrb	r3, [r7, #13]
 80026b4:	f882 3195 	strb.w	r3, [r2, #405]	; 0x195
			break;
 80026b8:	e012      	b.n	80026e0 <UART_Set_Output_Parameter+0x10c>
		case 'a':
			// Amplitude
			OutputState.Amplitude = received_value;
 80026ba:	7bfb      	ldrb	r3, [r7, #15]
 80026bc:	b29a      	uxth	r2, r3
 80026be:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <UART_Set_Output_Parameter+0x11c>)
 80026c0:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196
			break;
 80026c4:	e00c      	b.n	80026e0 <UART_Set_Output_Parameter+0x10c>
		case 'o':
			// Offset
			OutputState.Offset = received_value;
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <UART_Set_Output_Parameter+0x11c>)
 80026cc:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
			break;
 80026d0:	e006      	b.n	80026e0 <UART_Set_Output_Parameter+0x10c>
		case 'f':
			// Frequency
			OutputState.Frequency = received_value;
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <UART_Set_Output_Parameter+0x11c>)
 80026d8:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
			break;
 80026dc:	e000      	b.n	80026e0 <UART_Set_Output_Parameter+0x10c>
		case 'c':
			// Temperature
			break;
		default:
			// Problems
			break;
 80026de:	bf00      	nop
	}
	LCD_changeDisplayMode(Measurement);
 80026e0:	2001      	movs	r0, #1
 80026e2:	f7fe f8f1 	bl	80008c8 <LCD_changeDisplayMode>
}
 80026e6:	bf00      	nop
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000834 	.word	0x20000834

080026f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800272c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026f8:	480d      	ldr	r0, [pc, #52]	; (8002730 <LoopForever+0x6>)
  ldr r1, =_edata
 80026fa:	490e      	ldr	r1, [pc, #56]	; (8002734 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026fc:	4a0e      	ldr	r2, [pc, #56]	; (8002738 <LoopForever+0xe>)
  movs r3, #0
 80026fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002700:	e002      	b.n	8002708 <LoopCopyDataInit>

08002702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002706:	3304      	adds	r3, #4

08002708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800270a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800270c:	d3f9      	bcc.n	8002702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800270e:	4a0b      	ldr	r2, [pc, #44]	; (800273c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002710:	4c0b      	ldr	r4, [pc, #44]	; (8002740 <LoopForever+0x16>)
  movs r3, #0
 8002712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002714:	e001      	b.n	800271a <LoopFillZerobss>

08002716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002718:	3204      	adds	r2, #4

0800271a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800271a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800271c:	d3fb      	bcc.n	8002716 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800271e:	f7ff fc85 	bl	800202c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002722:	f005 fa41 	bl	8007ba8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002726:	f7fe fd2f 	bl	8001188 <main>

0800272a <LoopForever>:

LoopForever:
    b LoopForever
 800272a:	e7fe      	b.n	800272a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800272c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002734:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8002738:	08007cd8 	.word	0x08007cd8
  ldr r2, =_sbss
 800273c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8002740:	20000c4c 	.word	0x20000c4c

08002744 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002744:	e7fe      	b.n	8002744 <ADC1_2_IRQHandler>
	...

08002748 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800274c:	4b08      	ldr	r3, [pc, #32]	; (8002770 <HAL_Init+0x28>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a07      	ldr	r2, [pc, #28]	; (8002770 <HAL_Init+0x28>)
 8002752:	f043 0310 	orr.w	r3, r3, #16
 8002756:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002758:	2003      	movs	r0, #3
 800275a:	f001 faff 	bl	8003d5c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800275e:	2000      	movs	r0, #0
 8002760:	f000 f808 	bl	8002774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002764:	f7ff fa46 	bl	8001bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40022000 	.word	0x40022000

08002774 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800277c:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <HAL_InitTick+0x54>)
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	4b12      	ldr	r3, [pc, #72]	; (80027cc <HAL_InitTick+0x58>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	4619      	mov	r1, r3
 8002786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800278a:	fbb3 f3f1 	udiv	r3, r3, r1
 800278e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002792:	4618      	mov	r0, r3
 8002794:	f001 fb17 	bl	8003dc6 <HAL_SYSTICK_Config>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e00e      	b.n	80027c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b0f      	cmp	r3, #15
 80027a6:	d80a      	bhi.n	80027be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027a8:	2200      	movs	r2, #0
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	f04f 30ff 	mov.w	r0, #4294967295
 80027b0:	f001 fadf 	bl	8003d72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027b4:	4a06      	ldr	r2, [pc, #24]	; (80027d0 <HAL_InitTick+0x5c>)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	e000      	b.n	80027c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20000010 	.word	0x20000010
 80027cc:	20000018 	.word	0x20000018
 80027d0:	20000014 	.word	0x20000014

080027d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027d8:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <HAL_IncTick+0x20>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	461a      	mov	r2, r3
 80027de:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <HAL_IncTick+0x24>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4413      	add	r3, r2
 80027e4:	4a04      	ldr	r2, [pc, #16]	; (80027f8 <HAL_IncTick+0x24>)
 80027e6:	6013      	str	r3, [r2, #0]
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	20000018 	.word	0x20000018
 80027f8:	20000c48 	.word	0x20000c48

080027fc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return uwTick;  
 8002800:	4b03      	ldr	r3, [pc, #12]	; (8002810 <HAL_GetTick+0x14>)
 8002802:	681b      	ldr	r3, [r3, #0]
}
 8002804:	4618      	mov	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	20000c48 	.word	0x20000c48

08002814 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800281c:	f7ff ffee 	bl	80027fc <HAL_GetTick>
 8002820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800282c:	d005      	beq.n	800283a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800282e:	4b09      	ldr	r3, [pc, #36]	; (8002854 <HAL_Delay+0x40>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	461a      	mov	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4413      	add	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800283a:	bf00      	nop
 800283c:	f7ff ffde 	bl	80027fc <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	429a      	cmp	r2, r3
 800284a:	d8f7      	bhi.n	800283c <HAL_Delay+0x28>
  {
  }
}
 800284c:	bf00      	nop
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	20000018 	.word	0x20000018

08002858 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b09a      	sub	sp, #104	; 0x68
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002860:	2300      	movs	r3, #0
 8002862:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002866:	2300      	movs	r3, #0
 8002868:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800286a:	2300      	movs	r3, #0
 800286c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e1e3      	b.n	8002c40 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	f003 0310 	and.w	r3, r3, #16
 8002886:	2b00      	cmp	r3, #0
 8002888:	d176      	bne.n	8002978 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	2b00      	cmp	r3, #0
 8002890:	d152      	bne.n	8002938 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f7ff f9c5 	bl	8001c3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d13b      	bne.n	8002938 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f001 f861 	bl	8003988 <ADC_Disable>
 80028c6:	4603      	mov	r3, r0
 80028c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d0:	f003 0310 	and.w	r3, r3, #16
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d12f      	bne.n	8002938 <HAL_ADC_Init+0xe0>
 80028d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d12b      	bne.n	8002938 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028e8:	f023 0302 	bic.w	r3, r3, #2
 80028ec:	f043 0202 	orr.w	r2, r3, #2
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002902:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002912:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002914:	4b92      	ldr	r3, [pc, #584]	; (8002b60 <HAL_ADC_Init+0x308>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a92      	ldr	r2, [pc, #584]	; (8002b64 <HAL_ADC_Init+0x30c>)
 800291a:	fba2 2303 	umull	r2, r3, r2, r3
 800291e:	0c9a      	lsrs	r2, r3, #18
 8002920:	4613      	mov	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800292a:	e002      	b.n	8002932 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	3b01      	subs	r3, #1
 8002930:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1f9      	bne.n	800292c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d007      	beq.n	8002956 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002954:	d110      	bne.n	8002978 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	f023 0312 	bic.w	r3, r3, #18
 800295e:	f043 0210 	orr.w	r2, r3, #16
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296a:	f043 0201 	orr.w	r2, r3, #1
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	f003 0310 	and.w	r3, r3, #16
 8002980:	2b00      	cmp	r3, #0
 8002982:	f040 8150 	bne.w	8002c26 <HAL_ADC_Init+0x3ce>
 8002986:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800298a:	2b00      	cmp	r3, #0
 800298c:	f040 814b 	bne.w	8002c26 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800299a:	2b00      	cmp	r3, #0
 800299c:	f040 8143 	bne.w	8002c26 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80029a8:	f043 0202 	orr.w	r2, r3, #2
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029b8:	d004      	beq.n	80029c4 <HAL_ADC_Init+0x16c>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a6a      	ldr	r2, [pc, #424]	; (8002b68 <HAL_ADC_Init+0x310>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d101      	bne.n	80029c8 <HAL_ADC_Init+0x170>
 80029c4:	4b69      	ldr	r3, [pc, #420]	; (8002b6c <HAL_ADC_Init+0x314>)
 80029c6:	e000      	b.n	80029ca <HAL_ADC_Init+0x172>
 80029c8:	4b69      	ldr	r3, [pc, #420]	; (8002b70 <HAL_ADC_Init+0x318>)
 80029ca:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029d4:	d102      	bne.n	80029dc <HAL_ADC_Init+0x184>
 80029d6:	4b64      	ldr	r3, [pc, #400]	; (8002b68 <HAL_ADC_Init+0x310>)
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	e01a      	b.n	8002a12 <HAL_ADC_Init+0x1ba>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a61      	ldr	r2, [pc, #388]	; (8002b68 <HAL_ADC_Init+0x310>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d103      	bne.n	80029ee <HAL_ADC_Init+0x196>
 80029e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	e011      	b.n	8002a12 <HAL_ADC_Init+0x1ba>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a60      	ldr	r2, [pc, #384]	; (8002b74 <HAL_ADC_Init+0x31c>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d102      	bne.n	80029fe <HAL_ADC_Init+0x1a6>
 80029f8:	4b5f      	ldr	r3, [pc, #380]	; (8002b78 <HAL_ADC_Init+0x320>)
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	e009      	b.n	8002a12 <HAL_ADC_Init+0x1ba>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a5d      	ldr	r2, [pc, #372]	; (8002b78 <HAL_ADC_Init+0x320>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d102      	bne.n	8002a0e <HAL_ADC_Init+0x1b6>
 8002a08:	4b5a      	ldr	r3, [pc, #360]	; (8002b74 <HAL_ADC_Init+0x31c>)
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	e001      	b.n	8002a12 <HAL_ADC_Init+0x1ba>
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 0303 	and.w	r3, r3, #3
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d108      	bne.n	8002a32 <HAL_ADC_Init+0x1da>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d101      	bne.n	8002a32 <HAL_ADC_Init+0x1da>
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e000      	b.n	8002a34 <HAL_ADC_Init+0x1dc>
 8002a32:	2300      	movs	r3, #0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d11c      	bne.n	8002a72 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002a38:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d010      	beq.n	8002a60 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 0303 	and.w	r3, r3, #3
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d107      	bne.n	8002a5a <HAL_ADC_Init+0x202>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d101      	bne.n	8002a5a <HAL_ADC_Init+0x202>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <HAL_ADC_Init+0x204>
 8002a5a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d108      	bne.n	8002a72 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002a60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a70:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	7e5b      	ldrb	r3, [r3, #25]
 8002a76:	035b      	lsls	r3, r3, #13
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a7c:	2a01      	cmp	r2, #1
 8002a7e:	d002      	beq.n	8002a86 <HAL_ADC_Init+0x22e>
 8002a80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a84:	e000      	b.n	8002a88 <HAL_ADC_Init+0x230>
 8002a86:	2200      	movs	r2, #0
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d11b      	bne.n	8002ade <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	7e5b      	ldrb	r3, [r3, #25]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d109      	bne.n	8002ac2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	045a      	lsls	r2, r3, #17
 8002ab6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002abe:	663b      	str	r3, [r7, #96]	; 0x60
 8002ac0:	e00d      	b.n	8002ade <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002aca:	f043 0220 	orr.w	r2, r3, #32
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad6:	f043 0201 	orr.w	r2, r3, #1
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d054      	beq.n	8002b90 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a22      	ldr	r2, [pc, #136]	; (8002b74 <HAL_ADC_Init+0x31c>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d004      	beq.n	8002afa <HAL_ADC_Init+0x2a2>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a20      	ldr	r2, [pc, #128]	; (8002b78 <HAL_ADC_Init+0x320>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d140      	bne.n	8002b7c <HAL_ADC_Init+0x324>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afe:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002b02:	d02a      	beq.n	8002b5a <HAL_ADC_Init+0x302>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b0c:	d022      	beq.n	8002b54 <HAL_ADC_Init+0x2fc>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b12:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002b16:	d01a      	beq.n	8002b4e <HAL_ADC_Init+0x2f6>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1c:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8002b20:	d012      	beq.n	8002b48 <HAL_ADC_Init+0x2f0>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b26:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8002b2a:	d00a      	beq.n	8002b42 <HAL_ADC_Init+0x2ea>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b30:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8002b34:	d002      	beq.n	8002b3c <HAL_ADC_Init+0x2e4>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3a:	e023      	b.n	8002b84 <HAL_ADC_Init+0x32c>
 8002b3c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002b40:	e020      	b.n	8002b84 <HAL_ADC_Init+0x32c>
 8002b42:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002b46:	e01d      	b.n	8002b84 <HAL_ADC_Init+0x32c>
 8002b48:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002b4c:	e01a      	b.n	8002b84 <HAL_ADC_Init+0x32c>
 8002b4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b52:	e017      	b.n	8002b84 <HAL_ADC_Init+0x32c>
 8002b54:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002b58:	e014      	b.n	8002b84 <HAL_ADC_Init+0x32c>
 8002b5a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002b5e:	e011      	b.n	8002b84 <HAL_ADC_Init+0x32c>
 8002b60:	20000010 	.word	0x20000010
 8002b64:	431bde83 	.word	0x431bde83
 8002b68:	50000100 	.word	0x50000100
 8002b6c:	50000300 	.word	0x50000300
 8002b70:	50000700 	.word	0x50000700
 8002b74:	50000400 	.word	0x50000400
 8002b78:	50000500 	.word	0x50000500
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 030c 	and.w	r3, r3, #12
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d114      	bne.n	8002bc8 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6812      	ldr	r2, [r2, #0]
 8002ba8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bac:	f023 0302 	bic.w	r3, r3, #2
 8002bb0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	7e1b      	ldrb	r3, [r3, #24]
 8002bb6:	039a      	lsls	r2, r3, #14
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	4b1e      	ldr	r3, [pc, #120]	; (8002c48 <HAL_ADC_Init+0x3f0>)
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6812      	ldr	r2, [r2, #0]
 8002bd6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002bd8:	430b      	orrs	r3, r1
 8002bda:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d10c      	bne.n	8002bfe <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	f023 010f 	bic.w	r1, r3, #15
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	1e5a      	subs	r2, r3, #1
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	631a      	str	r2, [r3, #48]	; 0x30
 8002bfc:	e007      	b.n	8002c0e <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 020f 	bic.w	r2, r2, #15
 8002c0c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	f023 0303 	bic.w	r3, r3, #3
 8002c1c:	f043 0201 	orr.w	r2, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	641a      	str	r2, [r3, #64]	; 0x40
 8002c24:	e00a      	b.n	8002c3c <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	f023 0312 	bic.w	r3, r3, #18
 8002c2e:	f043 0210 	orr.w	r2, r3, #16
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002c36:	2301      	movs	r3, #1
 8002c38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002c3c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3768      	adds	r7, #104	; 0x68
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	fff0c007 	.word	0xfff0c007

08002c4c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 0304 	and.w	r3, r3, #4
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f040 80f9 	bne.w	8002e5a <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d101      	bne.n	8002c76 <HAL_ADC_Start+0x2a>
 8002c72:	2302      	movs	r3, #2
 8002c74:	e0f4      	b.n	8002e60 <HAL_ADC_Start+0x214>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 fe1e 	bl	80038c0 <ADC_Enable>
 8002c84:	4603      	mov	r3, r0
 8002c86:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f040 80e0 	bne.w	8002e50 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c98:	f023 0301 	bic.w	r3, r3, #1
 8002c9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cac:	d004      	beq.n	8002cb8 <HAL_ADC_Start+0x6c>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a6d      	ldr	r2, [pc, #436]	; (8002e68 <HAL_ADC_Start+0x21c>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d106      	bne.n	8002cc6 <HAL_ADC_Start+0x7a>
 8002cb8:	4b6c      	ldr	r3, [pc, #432]	; (8002e6c <HAL_ADC_Start+0x220>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 031f 	and.w	r3, r3, #31
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d010      	beq.n	8002ce6 <HAL_ADC_Start+0x9a>
 8002cc4:	e005      	b.n	8002cd2 <HAL_ADC_Start+0x86>
 8002cc6:	4b6a      	ldr	r3, [pc, #424]	; (8002e70 <HAL_ADC_Start+0x224>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 031f 	and.w	r3, r3, #31
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d009      	beq.n	8002ce6 <HAL_ADC_Start+0x9a>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cda:	d004      	beq.n	8002ce6 <HAL_ADC_Start+0x9a>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a64      	ldr	r2, [pc, #400]	; (8002e74 <HAL_ADC_Start+0x228>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d115      	bne.n	8002d12 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d036      	beq.n	8002d6e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d08:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002d10:	e02d      	b.n	8002d6e <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d26:	d004      	beq.n	8002d32 <HAL_ADC_Start+0xe6>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a4e      	ldr	r2, [pc, #312]	; (8002e68 <HAL_ADC_Start+0x21c>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d10a      	bne.n	8002d48 <HAL_ADC_Start+0xfc>
 8002d32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	bf14      	ite	ne
 8002d40:	2301      	movne	r3, #1
 8002d42:	2300      	moveq	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	e008      	b.n	8002d5a <HAL_ADC_Start+0x10e>
 8002d48:	4b4a      	ldr	r3, [pc, #296]	; (8002e74 <HAL_ADC_Start+0x228>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	bf14      	ite	ne
 8002d54:	2301      	movne	r3, #1
 8002d56:	2300      	moveq	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d007      	beq.n	8002d6e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d66:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d7a:	d106      	bne.n	8002d8a <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d80:	f023 0206 	bic.w	r2, r3, #6
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	645a      	str	r2, [r3, #68]	; 0x44
 8002d88:	e002      	b.n	8002d90 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	221c      	movs	r2, #28
 8002d9e:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002da8:	d004      	beq.n	8002db4 <HAL_ADC_Start+0x168>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a2e      	ldr	r2, [pc, #184]	; (8002e68 <HAL_ADC_Start+0x21c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d106      	bne.n	8002dc2 <HAL_ADC_Start+0x176>
 8002db4:	4b2d      	ldr	r3, [pc, #180]	; (8002e6c <HAL_ADC_Start+0x220>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 031f 	and.w	r3, r3, #31
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d03e      	beq.n	8002e3e <HAL_ADC_Start+0x1f2>
 8002dc0:	e005      	b.n	8002dce <HAL_ADC_Start+0x182>
 8002dc2:	4b2b      	ldr	r3, [pc, #172]	; (8002e70 <HAL_ADC_Start+0x224>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 031f 	and.w	r3, r3, #31
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d037      	beq.n	8002e3e <HAL_ADC_Start+0x1f2>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dd6:	d004      	beq.n	8002de2 <HAL_ADC_Start+0x196>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a22      	ldr	r2, [pc, #136]	; (8002e68 <HAL_ADC_Start+0x21c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d106      	bne.n	8002df0 <HAL_ADC_Start+0x1a4>
 8002de2:	4b22      	ldr	r3, [pc, #136]	; (8002e6c <HAL_ADC_Start+0x220>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 031f 	and.w	r3, r3, #31
 8002dea:	2b05      	cmp	r3, #5
 8002dec:	d027      	beq.n	8002e3e <HAL_ADC_Start+0x1f2>
 8002dee:	e005      	b.n	8002dfc <HAL_ADC_Start+0x1b0>
 8002df0:	4b1f      	ldr	r3, [pc, #124]	; (8002e70 <HAL_ADC_Start+0x224>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 031f 	and.w	r3, r3, #31
 8002df8:	2b05      	cmp	r3, #5
 8002dfa:	d020      	beq.n	8002e3e <HAL_ADC_Start+0x1f2>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e04:	d004      	beq.n	8002e10 <HAL_ADC_Start+0x1c4>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a17      	ldr	r2, [pc, #92]	; (8002e68 <HAL_ADC_Start+0x21c>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d106      	bne.n	8002e1e <HAL_ADC_Start+0x1d2>
 8002e10:	4b16      	ldr	r3, [pc, #88]	; (8002e6c <HAL_ADC_Start+0x220>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f003 031f 	and.w	r3, r3, #31
 8002e18:	2b09      	cmp	r3, #9
 8002e1a:	d010      	beq.n	8002e3e <HAL_ADC_Start+0x1f2>
 8002e1c:	e005      	b.n	8002e2a <HAL_ADC_Start+0x1de>
 8002e1e:	4b14      	ldr	r3, [pc, #80]	; (8002e70 <HAL_ADC_Start+0x224>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 031f 	and.w	r3, r3, #31
 8002e26:	2b09      	cmp	r3, #9
 8002e28:	d009      	beq.n	8002e3e <HAL_ADC_Start+0x1f2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e32:	d004      	beq.n	8002e3e <HAL_ADC_Start+0x1f2>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a0e      	ldr	r2, [pc, #56]	; (8002e74 <HAL_ADC_Start+0x228>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d10f      	bne.n	8002e5e <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f042 0204 	orr.w	r2, r2, #4
 8002e4c:	609a      	str	r2, [r3, #8]
 8002e4e:	e006      	b.n	8002e5e <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002e58:	e001      	b.n	8002e5e <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	50000100 	.word	0x50000100
 8002e6c:	50000300 	.word	0x50000300
 8002e70:	50000700 	.word	0x50000700
 8002e74:	50000400 	.word	0x50000400

08002e78 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e80:	2300      	movs	r3, #0
 8002e82:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d101      	bne.n	8002e92 <HAL_ADC_Stop+0x1a>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e023      	b.n	8002eda <HAL_ADC_Stop+0x62>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002e9a:	216c      	movs	r1, #108	; 0x6c
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 fdd9 	bl	8003a54 <ADC_ConversionStop>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d111      	bne.n	8002ed0 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 fd6b 	bl	8003988 <ADC_Disable>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002eb6:	7bfb      	ldrb	r3, [r7, #15]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d109      	bne.n	8002ed0 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ec4:	f023 0301 	bic.w	r3, r3, #1
 8002ec8:	f043 0201 	orr.w	r2, r3, #1
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
	...

08002ee4 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	2b08      	cmp	r3, #8
 8002ef8:	d102      	bne.n	8002f00 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002efa:	2308      	movs	r3, #8
 8002efc:	617b      	str	r3, [r7, #20]
 8002efe:	e03a      	b.n	8002f76 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f08:	d004      	beq.n	8002f14 <HAL_ADC_PollForConversion+0x30>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a72      	ldr	r2, [pc, #456]	; (80030d8 <HAL_ADC_PollForConversion+0x1f4>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d101      	bne.n	8002f18 <HAL_ADC_PollForConversion+0x34>
 8002f14:	4b71      	ldr	r3, [pc, #452]	; (80030dc <HAL_ADC_PollForConversion+0x1f8>)
 8002f16:	e000      	b.n	8002f1a <HAL_ADC_PollForConversion+0x36>
 8002f18:	4b71      	ldr	r3, [pc, #452]	; (80030e0 <HAL_ADC_PollForConversion+0x1fc>)
 8002f1a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 031f 	and.w	r3, r3, #31
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d112      	bne.n	8002f4e <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d11d      	bne.n	8002f72 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	f043 0220 	orr.w	r2, r3, #32
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e0bf      	b.n	80030ce <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00b      	beq.n	8002f72 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	f043 0220 	orr.w	r2, r3, #32
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e0ad      	b.n	80030ce <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002f72:	230c      	movs	r3, #12
 8002f74:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f7e:	d004      	beq.n	8002f8a <HAL_ADC_PollForConversion+0xa6>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a54      	ldr	r2, [pc, #336]	; (80030d8 <HAL_ADC_PollForConversion+0x1f4>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d106      	bne.n	8002f98 <HAL_ADC_PollForConversion+0xb4>
 8002f8a:	4b54      	ldr	r3, [pc, #336]	; (80030dc <HAL_ADC_PollForConversion+0x1f8>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 031f 	and.w	r3, r3, #31
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d010      	beq.n	8002fb8 <HAL_ADC_PollForConversion+0xd4>
 8002f96:	e005      	b.n	8002fa4 <HAL_ADC_PollForConversion+0xc0>
 8002f98:	4b51      	ldr	r3, [pc, #324]	; (80030e0 <HAL_ADC_PollForConversion+0x1fc>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 031f 	and.w	r3, r3, #31
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d009      	beq.n	8002fb8 <HAL_ADC_PollForConversion+0xd4>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fac:	d004      	beq.n	8002fb8 <HAL_ADC_PollForConversion+0xd4>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a4c      	ldr	r2, [pc, #304]	; (80030e4 <HAL_ADC_PollForConversion+0x200>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d104      	bne.n	8002fc2 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	613b      	str	r3, [r7, #16]
 8002fc0:	e00f      	b.n	8002fe2 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fca:	d004      	beq.n	8002fd6 <HAL_ADC_PollForConversion+0xf2>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a41      	ldr	r2, [pc, #260]	; (80030d8 <HAL_ADC_PollForConversion+0x1f4>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d102      	bne.n	8002fdc <HAL_ADC_PollForConversion+0xf8>
 8002fd6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002fda:	e000      	b.n	8002fde <HAL_ADC_PollForConversion+0xfa>
 8002fdc:	4b41      	ldr	r3, [pc, #260]	; (80030e4 <HAL_ADC_PollForConversion+0x200>)
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002fe2:	f7ff fc0b 	bl	80027fc <HAL_GetTick>
 8002fe6:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002fe8:	e021      	b.n	800302e <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff0:	d01d      	beq.n	800302e <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d007      	beq.n	8003008 <HAL_ADC_PollForConversion+0x124>
 8002ff8:	f7ff fc00 	bl	80027fc <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	429a      	cmp	r2, r3
 8003006:	d212      	bcs.n	800302e <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	4013      	ands	r3, r2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10b      	bne.n	800302e <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f043 0204 	orr.w	r2, r3, #4
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e04f      	b.n	80030ce <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	4013      	ands	r3, r2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0d6      	beq.n	8002fea <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003052:	2b00      	cmp	r3, #0
 8003054:	d131      	bne.n	80030ba <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800305c:	2b00      	cmp	r3, #0
 800305e:	d12c      	bne.n	80030ba <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	2b08      	cmp	r3, #8
 800306c:	d125      	bne.n	80030ba <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	d112      	bne.n	80030a2 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003080:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d112      	bne.n	80030ba <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003098:	f043 0201 	orr.w	r2, r3, #1
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	641a      	str	r2, [r3, #64]	; 0x40
 80030a0:	e00b      	b.n	80030ba <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	f043 0220 	orr.w	r2, r3, #32
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b2:	f043 0201 	orr.w	r2, r3, #1
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d103      	bne.n	80030cc <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3718      	adds	r7, #24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	50000100 	.word	0x50000100
 80030dc:	50000300 	.word	0x50000300
 80030e0:	50000700 	.word	0x50000700
 80030e4:	50000400 	.word	0x50000400

080030e8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
	...

08003104 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003104:	b480      	push	{r7}
 8003106:	b09b      	sub	sp, #108	; 0x6c
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800310e:	2300      	movs	r3, #0
 8003110:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800311e:	2b01      	cmp	r3, #1
 8003120:	d101      	bne.n	8003126 <HAL_ADC_ConfigChannel+0x22>
 8003122:	2302      	movs	r3, #2
 8003124:	e2cb      	b.n	80036be <HAL_ADC_ConfigChannel+0x5ba>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b00      	cmp	r3, #0
 800313a:	f040 82af 	bne.w	800369c <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b04      	cmp	r3, #4
 8003144:	d81c      	bhi.n	8003180 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	4413      	add	r3, r2
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	461a      	mov	r2, r3
 800315a:	231f      	movs	r3, #31
 800315c:	4093      	lsls	r3, r2
 800315e:	43db      	mvns	r3, r3
 8003160:	4019      	ands	r1, r3
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	6818      	ldr	r0, [r3, #0]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	4613      	mov	r3, r2
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	4413      	add	r3, r2
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	fa00 f203 	lsl.w	r2, r0, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	631a      	str	r2, [r3, #48]	; 0x30
 800317e:	e063      	b.n	8003248 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	2b09      	cmp	r3, #9
 8003186:	d81e      	bhi.n	80031c6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	4413      	add	r3, r2
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	3b1e      	subs	r3, #30
 800319c:	221f      	movs	r2, #31
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43db      	mvns	r3, r3
 80031a4:	4019      	ands	r1, r3
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	6818      	ldr	r0, [r3, #0]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	4413      	add	r3, r2
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	3b1e      	subs	r3, #30
 80031b8:	fa00 f203 	lsl.w	r2, r0, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	635a      	str	r2, [r3, #52]	; 0x34
 80031c4:	e040      	b.n	8003248 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b0e      	cmp	r3, #14
 80031cc:	d81e      	bhi.n	800320c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	4413      	add	r3, r2
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	3b3c      	subs	r3, #60	; 0x3c
 80031e2:	221f      	movs	r2, #31
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	4019      	ands	r1, r3
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	6818      	ldr	r0, [r3, #0]
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	4613      	mov	r3, r2
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	4413      	add	r3, r2
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	3b3c      	subs	r3, #60	; 0x3c
 80031fe:	fa00 f203 	lsl.w	r2, r0, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	639a      	str	r2, [r3, #56]	; 0x38
 800320a:	e01d      	b.n	8003248 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	4413      	add	r3, r2
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	3b5a      	subs	r3, #90	; 0x5a
 8003220:	221f      	movs	r2, #31
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	43db      	mvns	r3, r3
 8003228:	4019      	ands	r1, r3
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	6818      	ldr	r0, [r3, #0]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	4413      	add	r3, r2
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	3b5a      	subs	r3, #90	; 0x5a
 800323c:	fa00 f203 	lsl.w	r2, r0, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 030c 	and.w	r3, r3, #12
 8003252:	2b00      	cmp	r3, #0
 8003254:	f040 80e5 	bne.w	8003422 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b09      	cmp	r3, #9
 800325e:	d91c      	bls.n	800329a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6999      	ldr	r1, [r3, #24]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	4613      	mov	r3, r2
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	4413      	add	r3, r2
 8003270:	3b1e      	subs	r3, #30
 8003272:	2207      	movs	r2, #7
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	4019      	ands	r1, r3
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	6898      	ldr	r0, [r3, #8]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	4613      	mov	r3, r2
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	4413      	add	r3, r2
 800328a:	3b1e      	subs	r3, #30
 800328c:	fa00 f203 	lsl.w	r2, r0, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	619a      	str	r2, [r3, #24]
 8003298:	e019      	b.n	80032ce <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6959      	ldr	r1, [r3, #20]
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	4613      	mov	r3, r2
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	4413      	add	r3, r2
 80032aa:	2207      	movs	r2, #7
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	43db      	mvns	r3, r3
 80032b2:	4019      	ands	r1, r3
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	6898      	ldr	r0, [r3, #8]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	4613      	mov	r3, r2
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	4413      	add	r3, r2
 80032c2:	fa00 f203 	lsl.w	r2, r0, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	695a      	ldr	r2, [r3, #20]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	08db      	lsrs	r3, r3, #3
 80032da:	f003 0303 	and.w	r3, r3, #3
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	3b01      	subs	r3, #1
 80032ec:	2b03      	cmp	r3, #3
 80032ee:	d84f      	bhi.n	8003390 <HAL_ADC_ConfigChannel+0x28c>
 80032f0:	a201      	add	r2, pc, #4	; (adr r2, 80032f8 <HAL_ADC_ConfigChannel+0x1f4>)
 80032f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f6:	bf00      	nop
 80032f8:	08003309 	.word	0x08003309
 80032fc:	0800332b 	.word	0x0800332b
 8003300:	0800334d 	.word	0x0800334d
 8003304:	0800336f 	.word	0x0800336f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800330e:	4b9f      	ldr	r3, [pc, #636]	; (800358c <HAL_ADC_ConfigChannel+0x488>)
 8003310:	4013      	ands	r3, r2
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	6812      	ldr	r2, [r2, #0]
 8003316:	0691      	lsls	r1, r2, #26
 8003318:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800331a:	430a      	orrs	r2, r1
 800331c:	431a      	orrs	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003326:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003328:	e07e      	b.n	8003428 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003330:	4b96      	ldr	r3, [pc, #600]	; (800358c <HAL_ADC_ConfigChannel+0x488>)
 8003332:	4013      	ands	r3, r2
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	6812      	ldr	r2, [r2, #0]
 8003338:	0691      	lsls	r1, r2, #26
 800333a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800333c:	430a      	orrs	r2, r1
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003348:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800334a:	e06d      	b.n	8003428 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003352:	4b8e      	ldr	r3, [pc, #568]	; (800358c <HAL_ADC_ConfigChannel+0x488>)
 8003354:	4013      	ands	r3, r2
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	6812      	ldr	r2, [r2, #0]
 800335a:	0691      	lsls	r1, r2, #26
 800335c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800335e:	430a      	orrs	r2, r1
 8003360:	431a      	orrs	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800336a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800336c:	e05c      	b.n	8003428 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003374:	4b85      	ldr	r3, [pc, #532]	; (800358c <HAL_ADC_ConfigChannel+0x488>)
 8003376:	4013      	ands	r3, r2
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	6812      	ldr	r2, [r2, #0]
 800337c:	0691      	lsls	r1, r2, #26
 800337e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003380:	430a      	orrs	r2, r1
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800338c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800338e:	e04b      	b.n	8003428 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003396:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	069b      	lsls	r3, r3, #26
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d107      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033b2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	069b      	lsls	r3, r3, #26
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d107      	bne.n	80033d8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033d6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	069b      	lsls	r3, r3, #26
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d107      	bne.n	80033fc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033fa:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003402:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	069b      	lsls	r3, r3, #26
 800340c:	429a      	cmp	r2, r3
 800340e:	d10a      	bne.n	8003426 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800341e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003420:	e001      	b.n	8003426 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8003422:	bf00      	nop
 8003424:	e000      	b.n	8003428 <HAL_ADC_ConfigChannel+0x324>
      break;
 8003426:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 0303 	and.w	r3, r3, #3
 8003432:	2b01      	cmp	r3, #1
 8003434:	d108      	bne.n	8003448 <HAL_ADC_ConfigChannel+0x344>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b01      	cmp	r3, #1
 8003442:	d101      	bne.n	8003448 <HAL_ADC_ConfigChannel+0x344>
 8003444:	2301      	movs	r3, #1
 8003446:	e000      	b.n	800344a <HAL_ADC_ConfigChannel+0x346>
 8003448:	2300      	movs	r3, #0
 800344a:	2b00      	cmp	r3, #0
 800344c:	f040 8131 	bne.w	80036b2 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d00f      	beq.n	8003478 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2201      	movs	r2, #1
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	43da      	mvns	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	400a      	ands	r2, r1
 8003472:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003476:	e049      	b.n	800350c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2201      	movs	r2, #1
 8003486:	409a      	lsls	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b09      	cmp	r3, #9
 8003498:	d91c      	bls.n	80034d4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6999      	ldr	r1, [r3, #24]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	4613      	mov	r3, r2
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	4413      	add	r3, r2
 80034aa:	3b1b      	subs	r3, #27
 80034ac:	2207      	movs	r2, #7
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	43db      	mvns	r3, r3
 80034b4:	4019      	ands	r1, r3
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	6898      	ldr	r0, [r3, #8]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	4613      	mov	r3, r2
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	4413      	add	r3, r2
 80034c4:	3b1b      	subs	r3, #27
 80034c6:	fa00 f203 	lsl.w	r2, r0, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	619a      	str	r2, [r3, #24]
 80034d2:	e01b      	b.n	800350c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6959      	ldr	r1, [r3, #20]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	1c5a      	adds	r2, r3, #1
 80034e0:	4613      	mov	r3, r2
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	4413      	add	r3, r2
 80034e6:	2207      	movs	r2, #7
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	4019      	ands	r1, r3
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	6898      	ldr	r0, [r3, #8]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	1c5a      	adds	r2, r3, #1
 80034fa:	4613      	mov	r3, r2
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	4413      	add	r3, r2
 8003500:	fa00 f203 	lsl.w	r2, r0, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003514:	d004      	beq.n	8003520 <HAL_ADC_ConfigChannel+0x41c>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a1d      	ldr	r2, [pc, #116]	; (8003590 <HAL_ADC_ConfigChannel+0x48c>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d101      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x420>
 8003520:	4b1c      	ldr	r3, [pc, #112]	; (8003594 <HAL_ADC_ConfigChannel+0x490>)
 8003522:	e000      	b.n	8003526 <HAL_ADC_ConfigChannel+0x422>
 8003524:	4b1c      	ldr	r3, [pc, #112]	; (8003598 <HAL_ADC_ConfigChannel+0x494>)
 8003526:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b10      	cmp	r3, #16
 800352e:	d105      	bne.n	800353c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003530:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003538:	2b00      	cmp	r3, #0
 800353a:	d015      	beq.n	8003568 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003540:	2b11      	cmp	r3, #17
 8003542:	d105      	bne.n	8003550 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003544:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00b      	beq.n	8003568 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003554:	2b12      	cmp	r3, #18
 8003556:	f040 80ac 	bne.w	80036b2 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800355a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003562:	2b00      	cmp	r3, #0
 8003564:	f040 80a5 	bne.w	80036b2 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003570:	d102      	bne.n	8003578 <HAL_ADC_ConfigChannel+0x474>
 8003572:	4b07      	ldr	r3, [pc, #28]	; (8003590 <HAL_ADC_ConfigChannel+0x48c>)
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	e023      	b.n	80035c0 <HAL_ADC_ConfigChannel+0x4bc>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a04      	ldr	r2, [pc, #16]	; (8003590 <HAL_ADC_ConfigChannel+0x48c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d10c      	bne.n	800359c <HAL_ADC_ConfigChannel+0x498>
 8003582:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	e01a      	b.n	80035c0 <HAL_ADC_ConfigChannel+0x4bc>
 800358a:	bf00      	nop
 800358c:	83fff000 	.word	0x83fff000
 8003590:	50000100 	.word	0x50000100
 8003594:	50000300 	.word	0x50000300
 8003598:	50000700 	.word	0x50000700
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a4a      	ldr	r2, [pc, #296]	; (80036cc <HAL_ADC_ConfigChannel+0x5c8>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d102      	bne.n	80035ac <HAL_ADC_ConfigChannel+0x4a8>
 80035a6:	4b4a      	ldr	r3, [pc, #296]	; (80036d0 <HAL_ADC_ConfigChannel+0x5cc>)
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	e009      	b.n	80035c0 <HAL_ADC_ConfigChannel+0x4bc>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a47      	ldr	r2, [pc, #284]	; (80036d0 <HAL_ADC_ConfigChannel+0x5cc>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d102      	bne.n	80035bc <HAL_ADC_ConfigChannel+0x4b8>
 80035b6:	4b45      	ldr	r3, [pc, #276]	; (80036cc <HAL_ADC_ConfigChannel+0x5c8>)
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	e001      	b.n	80035c0 <HAL_ADC_ConfigChannel+0x4bc>
 80035bc:	2300      	movs	r3, #0
 80035be:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d108      	bne.n	80035e0 <HAL_ADC_ConfigChannel+0x4dc>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d101      	bne.n	80035e0 <HAL_ADC_ConfigChannel+0x4dc>
 80035dc:	2301      	movs	r3, #1
 80035de:	e000      	b.n	80035e2 <HAL_ADC_ConfigChannel+0x4de>
 80035e0:	2300      	movs	r3, #0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d150      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80035e6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d010      	beq.n	800360e <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 0303 	and.w	r3, r3, #3
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d107      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x504>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x504>
 8003604:	2301      	movs	r3, #1
 8003606:	e000      	b.n	800360a <HAL_ADC_ConfigChannel+0x506>
 8003608:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800360a:	2b00      	cmp	r3, #0
 800360c:	d13c      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b10      	cmp	r3, #16
 8003614:	d11d      	bne.n	8003652 <HAL_ADC_ConfigChannel+0x54e>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800361e:	d118      	bne.n	8003652 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003620:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003628:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800362a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800362c:	4b29      	ldr	r3, [pc, #164]	; (80036d4 <HAL_ADC_ConfigChannel+0x5d0>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a29      	ldr	r2, [pc, #164]	; (80036d8 <HAL_ADC_ConfigChannel+0x5d4>)
 8003632:	fba2 2303 	umull	r2, r3, r2, r3
 8003636:	0c9a      	lsrs	r2, r3, #18
 8003638:	4613      	mov	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003642:	e002      	b.n	800364a <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	3b01      	subs	r3, #1
 8003648:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1f9      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003650:	e02e      	b.n	80036b0 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2b11      	cmp	r3, #17
 8003658:	d10b      	bne.n	8003672 <HAL_ADC_ConfigChannel+0x56e>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003662:	d106      	bne.n	8003672 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003664:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800366c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800366e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003670:	e01e      	b.n	80036b0 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b12      	cmp	r3, #18
 8003678:	d11a      	bne.n	80036b0 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800367a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003682:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003684:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003686:	e013      	b.n	80036b0 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368c:	f043 0220 	orr.w	r2, r3, #32
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800369a:	e00a      	b.n	80036b2 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	f043 0220 	orr.w	r2, r3, #32
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80036ae:	e000      	b.n	80036b2 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80036b0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80036ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80036be:	4618      	mov	r0, r3
 80036c0:	376c      	adds	r7, #108	; 0x6c
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	50000400 	.word	0x50000400
 80036d0:	50000500 	.word	0x50000500
 80036d4:	20000010 	.word	0x20000010
 80036d8:	431bde83 	.word	0x431bde83

080036dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80036dc:	b480      	push	{r7}
 80036de:	b099      	sub	sp, #100	; 0x64
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036e6:	2300      	movs	r3, #0
 80036e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036f4:	d102      	bne.n	80036fc <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80036f6:	4b6d      	ldr	r3, [pc, #436]	; (80038ac <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80036f8:	60bb      	str	r3, [r7, #8]
 80036fa:	e01a      	b.n	8003732 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a6a      	ldr	r2, [pc, #424]	; (80038ac <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d103      	bne.n	800370e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8003706:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800370a:	60bb      	str	r3, [r7, #8]
 800370c:	e011      	b.n	8003732 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a67      	ldr	r2, [pc, #412]	; (80038b0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d102      	bne.n	800371e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003718:	4b66      	ldr	r3, [pc, #408]	; (80038b4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800371a:	60bb      	str	r3, [r7, #8]
 800371c:	e009      	b.n	8003732 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a64      	ldr	r2, [pc, #400]	; (80038b4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d102      	bne.n	800372e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003728:	4b61      	ldr	r3, [pc, #388]	; (80038b0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800372a:	60bb      	str	r3, [r7, #8]
 800372c:	e001      	b.n	8003732 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800372e:	2300      	movs	r3, #0
 8003730:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e0b0      	b.n	800389e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003746:	2302      	movs	r3, #2
 8003748:	e0a9      	b.n	800389e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	f040 808d 	bne.w	800387c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 0304 	and.w	r3, r3, #4
 800376a:	2b00      	cmp	r3, #0
 800376c:	f040 8086 	bne.w	800387c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003778:	d004      	beq.n	8003784 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a4b      	ldr	r2, [pc, #300]	; (80038ac <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d101      	bne.n	8003788 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003784:	4b4c      	ldr	r3, [pc, #304]	; (80038b8 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8003786:	e000      	b.n	800378a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003788:	4b4c      	ldr	r3, [pc, #304]	; (80038bc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800378a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d040      	beq.n	8003816 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003794:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	6859      	ldr	r1, [r3, #4]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037a6:	035b      	lsls	r3, r3, #13
 80037a8:	430b      	orrs	r3, r1
 80037aa:	431a      	orrs	r2, r3
 80037ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037ae:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d108      	bne.n	80037d0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80037cc:	2301      	movs	r3, #1
 80037ce:	e000      	b.n	80037d2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80037d0:	2300      	movs	r3, #0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d15c      	bne.n	8003890 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d107      	bne.n	80037f2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d101      	bne.n	80037f2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80037ee:	2301      	movs	r3, #1
 80037f0:	e000      	b.n	80037f4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80037f2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d14b      	bne.n	8003890 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80037f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003800:	f023 030f 	bic.w	r3, r3, #15
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	6811      	ldr	r1, [r2, #0]
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	6892      	ldr	r2, [r2, #8]
 800380c:	430a      	orrs	r2, r1
 800380e:	431a      	orrs	r2, r3
 8003810:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003812:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003814:	e03c      	b.n	8003890 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003816:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800381e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003820:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f003 0303 	and.w	r3, r3, #3
 800382c:	2b01      	cmp	r3, #1
 800382e:	d108      	bne.n	8003842 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b01      	cmp	r3, #1
 800383c:	d101      	bne.n	8003842 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800383e:	2301      	movs	r3, #1
 8003840:	e000      	b.n	8003844 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003842:	2300      	movs	r3, #0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d123      	bne.n	8003890 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f003 0303 	and.w	r3, r3, #3
 8003850:	2b01      	cmp	r3, #1
 8003852:	d107      	bne.n	8003864 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003860:	2301      	movs	r3, #1
 8003862:	e000      	b.n	8003866 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003864:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003866:	2b00      	cmp	r3, #0
 8003868:	d112      	bne.n	8003890 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800386a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003872:	f023 030f 	bic.w	r3, r3, #15
 8003876:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003878:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800387a:	e009      	b.n	8003890 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	f043 0220 	orr.w	r2, r3, #32
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800388e:	e000      	b.n	8003892 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003890:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800389a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800389e:	4618      	mov	r0, r3
 80038a0:	3764      	adds	r7, #100	; 0x64
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	50000100 	.word	0x50000100
 80038b0:	50000400 	.word	0x50000400
 80038b4:	50000500 	.word	0x50000500
 80038b8:	50000300 	.word	0x50000300
 80038bc:	50000700 	.word	0x50000700

080038c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d108      	bne.n	80038ec <ADC_Enable+0x2c>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <ADC_Enable+0x2c>
 80038e8:	2301      	movs	r3, #1
 80038ea:	e000      	b.n	80038ee <ADC_Enable+0x2e>
 80038ec:	2300      	movs	r3, #0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d143      	bne.n	800397a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	4b22      	ldr	r3, [pc, #136]	; (8003984 <ADC_Enable+0xc4>)
 80038fa:	4013      	ands	r3, r2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00d      	beq.n	800391c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	f043 0210 	orr.w	r2, r3, #16
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003910:	f043 0201 	orr.w	r2, r3, #1
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e02f      	b.n	800397c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689a      	ldr	r2, [r3, #8]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 0201 	orr.w	r2, r2, #1
 800392a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800392c:	f7fe ff66 	bl	80027fc <HAL_GetTick>
 8003930:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003932:	e01b      	b.n	800396c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003934:	f7fe ff62 	bl	80027fc <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d914      	bls.n	800396c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b01      	cmp	r3, #1
 800394e:	d00d      	beq.n	800396c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003954:	f043 0210 	orr.w	r2, r3, #16
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003960:	f043 0201 	orr.w	r2, r3, #1
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e007      	b.n	800397c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b01      	cmp	r3, #1
 8003978:	d1dc      	bne.n	8003934 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	8000003f 	.word	0x8000003f

08003988 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003990:	2300      	movs	r3, #0
 8003992:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d108      	bne.n	80039b4 <ADC_Disable+0x2c>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d101      	bne.n	80039b4 <ADC_Disable+0x2c>
 80039b0:	2301      	movs	r3, #1
 80039b2:	e000      	b.n	80039b6 <ADC_Disable+0x2e>
 80039b4:	2300      	movs	r3, #0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d047      	beq.n	8003a4a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f003 030d 	and.w	r3, r3, #13
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d10f      	bne.n	80039e8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689a      	ldr	r2, [r3, #8]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0202 	orr.w	r2, r2, #2
 80039d6:	609a      	str	r2, [r3, #8]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2203      	movs	r2, #3
 80039de:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80039e0:	f7fe ff0c 	bl	80027fc <HAL_GetTick>
 80039e4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80039e6:	e029      	b.n	8003a3c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	f043 0210 	orr.w	r2, r3, #16
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f8:	f043 0201 	orr.w	r2, r3, #1
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e023      	b.n	8003a4c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a04:	f7fe fefa 	bl	80027fc <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d914      	bls.n	8003a3c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d10d      	bne.n	8003a3c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a24:	f043 0210 	orr.w	r2, r3, #16
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a30:	f043 0201 	orr.w	r2, r3, #1
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e007      	b.n	8003a4c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d0dc      	beq.n	8003a04 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f003 030c 	and.w	r3, r3, #12
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 809a 	beq.w	8003bae <ADC_ConversionStop+0x15a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a88:	d12a      	bne.n	8003ae0 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d126      	bne.n	8003ae0 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d122      	bne.n	8003ae0 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8003a9a:	230c      	movs	r3, #12
 8003a9c:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8003a9e:	e014      	b.n	8003aca <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	4a45      	ldr	r2, [pc, #276]	; (8003bb8 <ADC_ConversionStop+0x164>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d90d      	bls.n	8003ac4 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aac:	f043 0210 	orr.w	r2, r3, #16
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab8:	f043 0201 	orr.w	r2, r3, #1
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e075      	b.n	8003bb0 <ADC_ConversionStop+0x15c>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad4:	2b40      	cmp	r3, #64	; 0x40
 8003ad6:	d1e3      	bne.n	8003aa0 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2240      	movs	r2, #64	; 0x40
 8003ade:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2b60      	cmp	r3, #96	; 0x60
 8003ae4:	d015      	beq.n	8003b12 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d10e      	bne.n	8003b12 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d107      	bne.n	8003b12 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f042 0210 	orr.w	r2, r2, #16
 8003b10:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b0c      	cmp	r3, #12
 8003b16:	d015      	beq.n	8003b44 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	2b08      	cmp	r3, #8
 8003b24:	d10e      	bne.n	8003b44 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d107      	bne.n	8003b44 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689a      	ldr	r2, [r3, #8]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0220 	orr.w	r2, r2, #32
 8003b42:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	2b60      	cmp	r3, #96	; 0x60
 8003b48:	d004      	beq.n	8003b54 <ADC_ConversionStop+0x100>
 8003b4a:	2b6c      	cmp	r3, #108	; 0x6c
 8003b4c:	d105      	bne.n	8003b5a <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003b4e:	230c      	movs	r3, #12
 8003b50:	617b      	str	r3, [r7, #20]
        break;
 8003b52:	e005      	b.n	8003b60 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003b54:	2308      	movs	r3, #8
 8003b56:	617b      	str	r3, [r7, #20]
        break;
 8003b58:	e002      	b.n	8003b60 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003b5a:	2304      	movs	r3, #4
 8003b5c:	617b      	str	r3, [r7, #20]
        break;
 8003b5e:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003b60:	f7fe fe4c 	bl	80027fc <HAL_GetTick>
 8003b64:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003b66:	e01b      	b.n	8003ba0 <ADC_ConversionStop+0x14c>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003b68:	f7fe fe48 	bl	80027fc <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b0b      	cmp	r3, #11
 8003b74:	d914      	bls.n	8003ba0 <ADC_ConversionStop+0x14c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00d      	beq.n	8003ba0 <ADC_ConversionStop+0x14c>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	f043 0210 	orr.w	r2, r3, #16
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b94:	f043 0201 	orr.w	r2, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e007      	b.n	8003bb0 <ADC_ConversionStop+0x15c>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689a      	ldr	r2, [r3, #8]
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1dc      	bne.n	8003b68 <ADC_ConversionStop+0x114>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	000993ff 	.word	0x000993ff

08003bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f003 0307 	and.w	r3, r3, #7
 8003bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bcc:	4b0c      	ldr	r3, [pc, #48]	; (8003c00 <__NVIC_SetPriorityGrouping+0x44>)
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bd8:	4013      	ands	r3, r2
 8003bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bee:	4a04      	ldr	r2, [pc, #16]	; (8003c00 <__NVIC_SetPriorityGrouping+0x44>)
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	60d3      	str	r3, [r2, #12]
}
 8003bf4:	bf00      	nop
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	e000ed00 	.word	0xe000ed00

08003c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c08:	4b04      	ldr	r3, [pc, #16]	; (8003c1c <__NVIC_GetPriorityGrouping+0x18>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	0a1b      	lsrs	r3, r3, #8
 8003c0e:	f003 0307 	and.w	r3, r3, #7
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	e000ed00 	.word	0xe000ed00

08003c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	4603      	mov	r3, r0
 8003c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	db0b      	blt.n	8003c4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c32:	79fb      	ldrb	r3, [r7, #7]
 8003c34:	f003 021f 	and.w	r2, r3, #31
 8003c38:	4907      	ldr	r1, [pc, #28]	; (8003c58 <__NVIC_EnableIRQ+0x38>)
 8003c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3e:	095b      	lsrs	r3, r3, #5
 8003c40:	2001      	movs	r0, #1
 8003c42:	fa00 f202 	lsl.w	r2, r0, r2
 8003c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	e000e100 	.word	0xe000e100

08003c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	4603      	mov	r3, r0
 8003c64:	6039      	str	r1, [r7, #0]
 8003c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	db0a      	blt.n	8003c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	490c      	ldr	r1, [pc, #48]	; (8003ca8 <__NVIC_SetPriority+0x4c>)
 8003c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7a:	0112      	lsls	r2, r2, #4
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	440b      	add	r3, r1
 8003c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c84:	e00a      	b.n	8003c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	4908      	ldr	r1, [pc, #32]	; (8003cac <__NVIC_SetPriority+0x50>)
 8003c8c:	79fb      	ldrb	r3, [r7, #7]
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	3b04      	subs	r3, #4
 8003c94:	0112      	lsls	r2, r2, #4
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	440b      	add	r3, r1
 8003c9a:	761a      	strb	r2, [r3, #24]
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr
 8003ca8:	e000e100 	.word	0xe000e100
 8003cac:	e000ed00 	.word	0xe000ed00

08003cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b089      	sub	sp, #36	; 0x24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	f1c3 0307 	rsb	r3, r3, #7
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	bf28      	it	cs
 8003cce:	2304      	movcs	r3, #4
 8003cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	2b06      	cmp	r3, #6
 8003cd8:	d902      	bls.n	8003ce0 <NVIC_EncodePriority+0x30>
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	3b03      	subs	r3, #3
 8003cde:	e000      	b.n	8003ce2 <NVIC_EncodePriority+0x32>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	43da      	mvns	r2, r3
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	401a      	ands	r2, r3
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003d02:	43d9      	mvns	r1, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d08:	4313      	orrs	r3, r2
         );
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3724      	adds	r7, #36	; 0x24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
	...

08003d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3b01      	subs	r3, #1
 8003d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d28:	d301      	bcc.n	8003d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e00f      	b.n	8003d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d2e:	4a0a      	ldr	r2, [pc, #40]	; (8003d58 <SysTick_Config+0x40>)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3b01      	subs	r3, #1
 8003d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d36:	210f      	movs	r1, #15
 8003d38:	f04f 30ff 	mov.w	r0, #4294967295
 8003d3c:	f7ff ff8e 	bl	8003c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d40:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <SysTick_Config+0x40>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d46:	4b04      	ldr	r3, [pc, #16]	; (8003d58 <SysTick_Config+0x40>)
 8003d48:	2207      	movs	r2, #7
 8003d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	e000e010 	.word	0xe000e010

08003d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7ff ff29 	bl	8003bbc <__NVIC_SetPriorityGrouping>
}
 8003d6a:	bf00      	nop
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b086      	sub	sp, #24
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	4603      	mov	r3, r0
 8003d7a:	60b9      	str	r1, [r7, #8]
 8003d7c:	607a      	str	r2, [r7, #4]
 8003d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d80:	2300      	movs	r3, #0
 8003d82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d84:	f7ff ff3e 	bl	8003c04 <__NVIC_GetPriorityGrouping>
 8003d88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	68b9      	ldr	r1, [r7, #8]
 8003d8e:	6978      	ldr	r0, [r7, #20]
 8003d90:	f7ff ff8e 	bl	8003cb0 <NVIC_EncodePriority>
 8003d94:	4602      	mov	r2, r0
 8003d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff ff5d 	bl	8003c5c <__NVIC_SetPriority>
}
 8003da2:	bf00      	nop
 8003da4:	3718      	adds	r7, #24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b082      	sub	sp, #8
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	4603      	mov	r3, r0
 8003db2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff ff31 	bl	8003c20 <__NVIC_EnableIRQ>
}
 8003dbe:	bf00      	nop
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b082      	sub	sp, #8
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7ff ffa2 	bl	8003d18 <SysTick_Config>
 8003dd4:	4603      	mov	r3, r0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b082      	sub	sp, #8
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e014      	b.n	8003e1a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	791b      	ldrb	r3, [r3, #4]
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d105      	bne.n	8003e06 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f7fd ff57 	bl	8001cb4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2202      	movs	r2, #2
 8003e0a:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b087      	sub	sp, #28
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	60f8      	str	r0, [r7, #12]
 8003e2a:	60b9      	str	r1, [r7, #8]
 8003e2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	617b      	str	r3, [r7, #20]
 8003e32:	2300      	movs	r3, #0
 8003e34:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	795b      	ldrb	r3, [r3, #5]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <HAL_DAC_ConfigChannel+0x20>
 8003e3e:	2302      	movs	r3, #2
 8003e40:	e036      	b.n	8003eb0 <HAL_DAC_ConfigChannel+0x8e>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2201      	movs	r2, #1
 8003e46:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003e56:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	43db      	mvns	r3, r3
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	4013      	ands	r3, r2
 8003e66:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6819      	ldr	r1, [r3, #0]
 8003e90:	22c0      	movs	r2, #192	; 0xc0
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	43da      	mvns	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	400a      	ands	r2, r1
 8003ea0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	371c      	adds	r7, #28
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e037      	b.n	8003f42 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003ee8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003eec:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003ef6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f92b 	bl	8004180 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}  
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d008      	beq.n	8003f6e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2204      	movs	r2, #4
 8003f60:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e020      	b.n	8003fb0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 020e 	bic.w	r2, r2, #14
 8003f7c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 0201 	bic.w	r2, r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f96:	2101      	movs	r1, #1
 8003f98:	fa01 f202 	lsl.w	r2, r1, r2
 8003f9c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d005      	beq.n	8003fde <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2204      	movs	r2, #4
 8003fd6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	73fb      	strb	r3, [r7, #15]
 8003fdc:	e027      	b.n	800402e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 020e 	bic.w	r2, r2, #14
 8003fec:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 0201 	bic.w	r2, r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004006:	2101      	movs	r1, #1
 8004008:	fa01 f202 	lsl.w	r2, r1, r2
 800400c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	4798      	blx	r3
    } 
  }
  return status;
 800402e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004054:	2204      	movs	r2, #4
 8004056:	409a      	lsls	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4013      	ands	r3, r2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d024      	beq.n	80040aa <HAL_DMA_IRQHandler+0x72>
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f003 0304 	and.w	r3, r3, #4
 8004066:	2b00      	cmp	r3, #0
 8004068:	d01f      	beq.n	80040aa <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0320 	and.w	r3, r3, #32
 8004074:	2b00      	cmp	r3, #0
 8004076:	d107      	bne.n	8004088 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0204 	bic.w	r2, r2, #4
 8004086:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004090:	2104      	movs	r1, #4
 8004092:	fa01 f202 	lsl.w	r2, r1, r2
 8004096:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	2b00      	cmp	r3, #0
 800409e:	d06a      	beq.n	8004176 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80040a8:	e065      	b.n	8004176 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	2202      	movs	r2, #2
 80040b0:	409a      	lsls	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	4013      	ands	r3, r2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d02c      	beq.n	8004114 <HAL_DMA_IRQHandler+0xdc>
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d027      	beq.n	8004114 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0320 	and.w	r3, r3, #32
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10b      	bne.n	80040ea <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 020a 	bic.w	r2, r2, #10
 80040e0:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f2:	2102      	movs	r1, #2
 80040f4:	fa01 f202 	lsl.w	r2, r1, r2
 80040f8:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004106:	2b00      	cmp	r3, #0
 8004108:	d035      	beq.n	8004176 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004112:	e030      	b.n	8004176 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004118:	2208      	movs	r2, #8
 800411a:	409a      	lsls	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	4013      	ands	r3, r2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d028      	beq.n	8004176 <HAL_DMA_IRQHandler+0x13e>
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	f003 0308 	and.w	r3, r3, #8
 800412a:	2b00      	cmp	r3, #0
 800412c:	d023      	beq.n	8004176 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 020e 	bic.w	r2, r2, #14
 800413c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004146:	2101      	movs	r1, #1
 8004148:	fa01 f202 	lsl.w	r2, r1, r2
 800414c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004168:	2b00      	cmp	r3, #0
 800416a:	d004      	beq.n	8004176 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	4798      	blx	r3
    }
  }
}  
 8004174:	e7ff      	b.n	8004176 <HAL_DMA_IRQHandler+0x13e>
 8004176:	bf00      	nop
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
	...

08004180 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	461a      	mov	r2, r3
 800418e:	4b14      	ldr	r3, [pc, #80]	; (80041e0 <DMA_CalcBaseAndBitshift+0x60>)
 8004190:	429a      	cmp	r2, r3
 8004192:	d80f      	bhi.n	80041b4 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	461a      	mov	r2, r3
 800419a:	4b12      	ldr	r3, [pc, #72]	; (80041e4 <DMA_CalcBaseAndBitshift+0x64>)
 800419c:	4413      	add	r3, r2
 800419e:	4a12      	ldr	r2, [pc, #72]	; (80041e8 <DMA_CalcBaseAndBitshift+0x68>)
 80041a0:	fba2 2303 	umull	r2, r3, r2, r3
 80041a4:	091b      	lsrs	r3, r3, #4
 80041a6:	009a      	lsls	r2, r3, #2
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a0f      	ldr	r2, [pc, #60]	; (80041ec <DMA_CalcBaseAndBitshift+0x6c>)
 80041b0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80041b2:	e00e      	b.n	80041d2 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	461a      	mov	r2, r3
 80041ba:	4b0d      	ldr	r3, [pc, #52]	; (80041f0 <DMA_CalcBaseAndBitshift+0x70>)
 80041bc:	4413      	add	r3, r2
 80041be:	4a0a      	ldr	r2, [pc, #40]	; (80041e8 <DMA_CalcBaseAndBitshift+0x68>)
 80041c0:	fba2 2303 	umull	r2, r3, r2, r3
 80041c4:	091b      	lsrs	r3, r3, #4
 80041c6:	009a      	lsls	r2, r3, #2
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a09      	ldr	r2, [pc, #36]	; (80041f4 <DMA_CalcBaseAndBitshift+0x74>)
 80041d0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	40020407 	.word	0x40020407
 80041e4:	bffdfff8 	.word	0xbffdfff8
 80041e8:	cccccccd 	.word	0xcccccccd
 80041ec:	40020000 	.word	0x40020000
 80041f0:	bffdfbf8 	.word	0xbffdfbf8
 80041f4:	40020400 	.word	0x40020400

080041f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004202:	2300      	movs	r3, #0
 8004204:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004206:	e160      	b.n	80044ca <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	2101      	movs	r1, #1
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	fa01 f303 	lsl.w	r3, r1, r3
 8004214:	4013      	ands	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 8152 	beq.w	80044c4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f003 0303 	and.w	r3, r3, #3
 8004228:	2b01      	cmp	r3, #1
 800422a:	d005      	beq.n	8004238 <HAL_GPIO_Init+0x40>
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f003 0303 	and.w	r3, r3, #3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d130      	bne.n	800429a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	2203      	movs	r2, #3
 8004244:	fa02 f303 	lsl.w	r3, r2, r3
 8004248:	43db      	mvns	r3, r3
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	4013      	ands	r3, r2
 800424e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	68da      	ldr	r2, [r3, #12]
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	005b      	lsls	r3, r3, #1
 8004258:	fa02 f303 	lsl.w	r3, r2, r3
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	4313      	orrs	r3, r2
 8004260:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800426e:	2201      	movs	r2, #1
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	43db      	mvns	r3, r3
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	4013      	ands	r3, r2
 800427c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	091b      	lsrs	r3, r3, #4
 8004284:	f003 0201 	and.w	r2, r3, #1
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	fa02 f303 	lsl.w	r3, r2, r3
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	4313      	orrs	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	2b03      	cmp	r3, #3
 80042a4:	d017      	beq.n	80042d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	2203      	movs	r2, #3
 80042b2:	fa02 f303 	lsl.w	r3, r2, r3
 80042b6:	43db      	mvns	r3, r3
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	4013      	ands	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	689a      	ldr	r2, [r3, #8]
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f003 0303 	and.w	r3, r3, #3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d123      	bne.n	800432a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	08da      	lsrs	r2, r3, #3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	3208      	adds	r2, #8
 80042ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f003 0307 	and.w	r3, r3, #7
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	220f      	movs	r2, #15
 80042fa:	fa02 f303 	lsl.w	r3, r2, r3
 80042fe:	43db      	mvns	r3, r3
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	4013      	ands	r3, r2
 8004304:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	691a      	ldr	r2, [r3, #16]
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	fa02 f303 	lsl.w	r3, r2, r3
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	4313      	orrs	r3, r2
 800431a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	08da      	lsrs	r2, r3, #3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3208      	adds	r2, #8
 8004324:	6939      	ldr	r1, [r7, #16]
 8004326:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	2203      	movs	r2, #3
 8004336:	fa02 f303 	lsl.w	r3, r2, r3
 800433a:	43db      	mvns	r3, r3
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	4013      	ands	r3, r2
 8004340:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f003 0203 	and.w	r2, r3, #3
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	fa02 f303 	lsl.w	r3, r2, r3
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	4313      	orrs	r3, r2
 8004356:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 80ac 	beq.w	80044c4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800436c:	4b5e      	ldr	r3, [pc, #376]	; (80044e8 <HAL_GPIO_Init+0x2f0>)
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	4a5d      	ldr	r2, [pc, #372]	; (80044e8 <HAL_GPIO_Init+0x2f0>)
 8004372:	f043 0301 	orr.w	r3, r3, #1
 8004376:	6193      	str	r3, [r2, #24]
 8004378:	4b5b      	ldr	r3, [pc, #364]	; (80044e8 <HAL_GPIO_Init+0x2f0>)
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	60bb      	str	r3, [r7, #8]
 8004382:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004384:	4a59      	ldr	r2, [pc, #356]	; (80044ec <HAL_GPIO_Init+0x2f4>)
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	089b      	lsrs	r3, r3, #2
 800438a:	3302      	adds	r3, #2
 800438c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004390:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f003 0303 	and.w	r3, r3, #3
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	220f      	movs	r2, #15
 800439c:	fa02 f303 	lsl.w	r3, r2, r3
 80043a0:	43db      	mvns	r3, r3
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	4013      	ands	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80043ae:	d025      	beq.n	80043fc <HAL_GPIO_Init+0x204>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a4f      	ldr	r2, [pc, #316]	; (80044f0 <HAL_GPIO_Init+0x2f8>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d01f      	beq.n	80043f8 <HAL_GPIO_Init+0x200>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a4e      	ldr	r2, [pc, #312]	; (80044f4 <HAL_GPIO_Init+0x2fc>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d019      	beq.n	80043f4 <HAL_GPIO_Init+0x1fc>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a4d      	ldr	r2, [pc, #308]	; (80044f8 <HAL_GPIO_Init+0x300>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d013      	beq.n	80043f0 <HAL_GPIO_Init+0x1f8>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a4c      	ldr	r2, [pc, #304]	; (80044fc <HAL_GPIO_Init+0x304>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d00d      	beq.n	80043ec <HAL_GPIO_Init+0x1f4>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a4b      	ldr	r2, [pc, #300]	; (8004500 <HAL_GPIO_Init+0x308>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d007      	beq.n	80043e8 <HAL_GPIO_Init+0x1f0>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a4a      	ldr	r2, [pc, #296]	; (8004504 <HAL_GPIO_Init+0x30c>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d101      	bne.n	80043e4 <HAL_GPIO_Init+0x1ec>
 80043e0:	2306      	movs	r3, #6
 80043e2:	e00c      	b.n	80043fe <HAL_GPIO_Init+0x206>
 80043e4:	2307      	movs	r3, #7
 80043e6:	e00a      	b.n	80043fe <HAL_GPIO_Init+0x206>
 80043e8:	2305      	movs	r3, #5
 80043ea:	e008      	b.n	80043fe <HAL_GPIO_Init+0x206>
 80043ec:	2304      	movs	r3, #4
 80043ee:	e006      	b.n	80043fe <HAL_GPIO_Init+0x206>
 80043f0:	2303      	movs	r3, #3
 80043f2:	e004      	b.n	80043fe <HAL_GPIO_Init+0x206>
 80043f4:	2302      	movs	r3, #2
 80043f6:	e002      	b.n	80043fe <HAL_GPIO_Init+0x206>
 80043f8:	2301      	movs	r3, #1
 80043fa:	e000      	b.n	80043fe <HAL_GPIO_Init+0x206>
 80043fc:	2300      	movs	r3, #0
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	f002 0203 	and.w	r2, r2, #3
 8004404:	0092      	lsls	r2, r2, #2
 8004406:	4093      	lsls	r3, r2
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4313      	orrs	r3, r2
 800440c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800440e:	4937      	ldr	r1, [pc, #220]	; (80044ec <HAL_GPIO_Init+0x2f4>)
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	089b      	lsrs	r3, r3, #2
 8004414:	3302      	adds	r3, #2
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800441c:	4b3a      	ldr	r3, [pc, #232]	; (8004508 <HAL_GPIO_Init+0x310>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	43db      	mvns	r3, r3
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	4013      	ands	r3, r2
 800442a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d003      	beq.n	8004440 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	4313      	orrs	r3, r2
 800443e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004440:	4a31      	ldr	r2, [pc, #196]	; (8004508 <HAL_GPIO_Init+0x310>)
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004446:	4b30      	ldr	r3, [pc, #192]	; (8004508 <HAL_GPIO_Init+0x310>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	43db      	mvns	r3, r3
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	4013      	ands	r3, r2
 8004454:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4313      	orrs	r3, r2
 8004468:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800446a:	4a27      	ldr	r2, [pc, #156]	; (8004508 <HAL_GPIO_Init+0x310>)
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004470:	4b25      	ldr	r3, [pc, #148]	; (8004508 <HAL_GPIO_Init+0x310>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	43db      	mvns	r3, r3
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	4013      	ands	r3, r2
 800447e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	4313      	orrs	r3, r2
 8004492:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004494:	4a1c      	ldr	r2, [pc, #112]	; (8004508 <HAL_GPIO_Init+0x310>)
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800449a:	4b1b      	ldr	r3, [pc, #108]	; (8004508 <HAL_GPIO_Init+0x310>)
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	43db      	mvns	r3, r3
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	4013      	ands	r3, r2
 80044a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80044be:	4a12      	ldr	r2, [pc, #72]	; (8004508 <HAL_GPIO_Init+0x310>)
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	3301      	adds	r3, #1
 80044c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	fa22 f303 	lsr.w	r3, r2, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f47f ae97 	bne.w	8004208 <HAL_GPIO_Init+0x10>
  }
}
 80044da:	bf00      	nop
 80044dc:	371c      	adds	r7, #28
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	40021000 	.word	0x40021000
 80044ec:	40010000 	.word	0x40010000
 80044f0:	48000400 	.word	0x48000400
 80044f4:	48000800 	.word	0x48000800
 80044f8:	48000c00 	.word	0x48000c00
 80044fc:	48001000 	.word	0x48001000
 8004500:	48001400 	.word	0x48001400
 8004504:	48001800 	.word	0x48001800
 8004508:	40010400 	.word	0x40010400

0800450c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	460b      	mov	r3, r1
 8004516:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691a      	ldr	r2, [r3, #16]
 800451c:	887b      	ldrh	r3, [r7, #2]
 800451e:	4013      	ands	r3, r2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d002      	beq.n	800452a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004524:	2301      	movs	r3, #1
 8004526:	73fb      	strb	r3, [r7, #15]
 8004528:	e001      	b.n	800452e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800452a:	2300      	movs	r3, #0
 800452c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800452e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004530:	4618      	mov	r0, r3
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	460b      	mov	r3, r1
 8004546:	807b      	strh	r3, [r7, #2]
 8004548:	4613      	mov	r3, r2
 800454a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800454c:	787b      	ldrb	r3, [r7, #1]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004552:	887a      	ldrh	r2, [r7, #2]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004558:	e002      	b.n	8004560 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800455a:	887a      	ldrh	r2, [r7, #2]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	460b      	mov	r3, r1
 8004576:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800457e:	887a      	ldrh	r2, [r7, #2]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4013      	ands	r3, r2
 8004584:	041a      	lsls	r2, r3, #16
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	43d9      	mvns	r1, r3
 800458a:	887b      	ldrh	r3, [r7, #2]
 800458c:	400b      	ands	r3, r1
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	619a      	str	r2, [r3, #24]
}
 8004594:	bf00      	nop
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	4603      	mov	r3, r0
 80045a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80045aa:	4b08      	ldr	r3, [pc, #32]	; (80045cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045ac:	695a      	ldr	r2, [r3, #20]
 80045ae:	88fb      	ldrh	r3, [r7, #6]
 80045b0:	4013      	ands	r3, r2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d006      	beq.n	80045c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045b6:	4a05      	ldr	r2, [pc, #20]	; (80045cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045b8:	88fb      	ldrh	r3, [r7, #6]
 80045ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045bc:	88fb      	ldrh	r3, [r7, #6]
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fc fda2 	bl	8001108 <HAL_GPIO_EXTI_Callback>
  }
}
 80045c4:	bf00      	nop
 80045c6:	3708      	adds	r7, #8
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	40010400 	.word	0x40010400

080045d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	1d3b      	adds	r3, r7, #4
 80045da:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045dc:	1d3b      	adds	r3, r7, #4
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d102      	bne.n	80045ea <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	f000 bf01 	b.w	80053ec <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045ea:	1d3b      	adds	r3, r7, #4
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 8160 	beq.w	80048ba <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80045fa:	4bae      	ldr	r3, [pc, #696]	; (80048b4 <HAL_RCC_OscConfig+0x2e4>)
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f003 030c 	and.w	r3, r3, #12
 8004602:	2b04      	cmp	r3, #4
 8004604:	d00c      	beq.n	8004620 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004606:	4bab      	ldr	r3, [pc, #684]	; (80048b4 <HAL_RCC_OscConfig+0x2e4>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f003 030c 	and.w	r3, r3, #12
 800460e:	2b08      	cmp	r3, #8
 8004610:	d159      	bne.n	80046c6 <HAL_RCC_OscConfig+0xf6>
 8004612:	4ba8      	ldr	r3, [pc, #672]	; (80048b4 <HAL_RCC_OscConfig+0x2e4>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800461a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800461e:	d152      	bne.n	80046c6 <HAL_RCC_OscConfig+0xf6>
 8004620:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004624:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004628:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800462c:	fa93 f3a3 	rbit	r3, r3
 8004630:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004634:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004638:	fab3 f383 	clz	r3, r3
 800463c:	b2db      	uxtb	r3, r3
 800463e:	095b      	lsrs	r3, r3, #5
 8004640:	b2db      	uxtb	r3, r3
 8004642:	f043 0301 	orr.w	r3, r3, #1
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b01      	cmp	r3, #1
 800464a:	d102      	bne.n	8004652 <HAL_RCC_OscConfig+0x82>
 800464c:	4b99      	ldr	r3, [pc, #612]	; (80048b4 <HAL_RCC_OscConfig+0x2e4>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	e015      	b.n	800467e <HAL_RCC_OscConfig+0xae>
 8004652:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004656:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800465a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800465e:	fa93 f3a3 	rbit	r3, r3
 8004662:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004666:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800466a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800466e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8004672:	fa93 f3a3 	rbit	r3, r3
 8004676:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800467a:	4b8e      	ldr	r3, [pc, #568]	; (80048b4 <HAL_RCC_OscConfig+0x2e4>)
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004682:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8004686:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800468a:	fa92 f2a2 	rbit	r2, r2
 800468e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8004692:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004696:	fab2 f282 	clz	r2, r2
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	f042 0220 	orr.w	r2, r2, #32
 80046a0:	b2d2      	uxtb	r2, r2
 80046a2:	f002 021f 	and.w	r2, r2, #31
 80046a6:	2101      	movs	r1, #1
 80046a8:	fa01 f202 	lsl.w	r2, r1, r2
 80046ac:	4013      	ands	r3, r2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f000 8102 	beq.w	80048b8 <HAL_RCC_OscConfig+0x2e8>
 80046b4:	1d3b      	adds	r3, r7, #4
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f040 80fc 	bne.w	80048b8 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	f000 be93 	b.w	80053ec <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046c6:	1d3b      	adds	r3, r7, #4
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d0:	d106      	bne.n	80046e0 <HAL_RCC_OscConfig+0x110>
 80046d2:	4b78      	ldr	r3, [pc, #480]	; (80048b4 <HAL_RCC_OscConfig+0x2e4>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a77      	ldr	r2, [pc, #476]	; (80048b4 <HAL_RCC_OscConfig+0x2e4>)
 80046d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046dc:	6013      	str	r3, [r2, #0]
 80046de:	e030      	b.n	8004742 <HAL_RCC_OscConfig+0x172>
 80046e0:	1d3b      	adds	r3, r7, #4
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10c      	bne.n	8004704 <HAL_RCC_OscConfig+0x134>
 80046ea:	4b72      	ldr	r3, [pc, #456]	; (80048b4 <HAL_RCC_OscConfig+0x2e4>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a71      	ldr	r2, [pc, #452]	; (80048b4 <HAL_RCC_OscConfig+0x2e4>)
 80046f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046f4:	6013      	str	r3, [r2, #0]
 80046f6:	4b6f      	ldr	r3, [pc, #444]	; (80048b4 <HAL_RCC_OscConfig+0x2e4>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a6e      	ldr	r2, [pc, #440]	; (80048b4 <HAL_RCC_OscConfig+0x2e4>)
 80046fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	e01e      	b.n	8004742 <HAL_RCC_OscConfig+0x172>
 8004704:	1d3b      	adds	r3, r7, #4
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800470e:	d10c      	bne.n	800472a <HAL_RCC_OscConfig+0x15a>
 8004710:	4b68      	ldr	r3, [pc, #416]	; (80048b4 <HAL_RCC_OscConfig+0x2e4>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a67      	ldr	r2, [pc, #412]	; (80048b4 <HAL_RCC_OscConfig+0x2e4>)
 8004716:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800471a:	6013      	str	r3, [r2, #0]
 800471c:	4b65      	ldr	r3, [pc, #404]	; (80048b4 <HAL_RCC_OscConfig+0x2e4>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a64      	ldr	r2, [pc, #400]	; (80048b4 <HAL_RCC_OscConfig+0x2e4>)
 8004722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004726:	6013      	str	r3, [r2, #0]
 8004728:	e00b      	b.n	8004742 <HAL_RCC_OscConfig+0x172>
 800472a:	4b62      	ldr	r3, [pc, #392]	; (80048b4 <HAL_RCC_OscConfig+0x2e4>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a61      	ldr	r2, [pc, #388]	; (80048b4 <HAL_RCC_OscConfig+0x2e4>)
 8004730:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004734:	6013      	str	r3, [r2, #0]
 8004736:	4b5f      	ldr	r3, [pc, #380]	; (80048b4 <HAL_RCC_OscConfig+0x2e4>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a5e      	ldr	r2, [pc, #376]	; (80048b4 <HAL_RCC_OscConfig+0x2e4>)
 800473c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004740:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004742:	1d3b      	adds	r3, r7, #4
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d059      	beq.n	8004800 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800474c:	f7fe f856 	bl	80027fc <HAL_GetTick>
 8004750:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004754:	e00a      	b.n	800476c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004756:	f7fe f851 	bl	80027fc <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b64      	cmp	r3, #100	; 0x64
 8004764:	d902      	bls.n	800476c <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	f000 be40 	b.w	80053ec <HAL_RCC_OscConfig+0xe1c>
 800476c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004770:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004774:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004778:	fa93 f3a3 	rbit	r3, r3
 800477c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8004780:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004784:	fab3 f383 	clz	r3, r3
 8004788:	b2db      	uxtb	r3, r3
 800478a:	095b      	lsrs	r3, r3, #5
 800478c:	b2db      	uxtb	r3, r3
 800478e:	f043 0301 	orr.w	r3, r3, #1
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2b01      	cmp	r3, #1
 8004796:	d102      	bne.n	800479e <HAL_RCC_OscConfig+0x1ce>
 8004798:	4b46      	ldr	r3, [pc, #280]	; (80048b4 <HAL_RCC_OscConfig+0x2e4>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	e015      	b.n	80047ca <HAL_RCC_OscConfig+0x1fa>
 800479e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047a2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80047aa:	fa93 f3a3 	rbit	r3, r3
 80047ae:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80047b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047b6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80047ba:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80047be:	fa93 f3a3 	rbit	r3, r3
 80047c2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80047c6:	4b3b      	ldr	r3, [pc, #236]	; (80048b4 <HAL_RCC_OscConfig+0x2e4>)
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80047ce:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80047d2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80047d6:	fa92 f2a2 	rbit	r2, r2
 80047da:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80047de:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80047e2:	fab2 f282 	clz	r2, r2
 80047e6:	b2d2      	uxtb	r2, r2
 80047e8:	f042 0220 	orr.w	r2, r2, #32
 80047ec:	b2d2      	uxtb	r2, r2
 80047ee:	f002 021f 	and.w	r2, r2, #31
 80047f2:	2101      	movs	r1, #1
 80047f4:	fa01 f202 	lsl.w	r2, r1, r2
 80047f8:	4013      	ands	r3, r2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d0ab      	beq.n	8004756 <HAL_RCC_OscConfig+0x186>
 80047fe:	e05c      	b.n	80048ba <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004800:	f7fd fffc 	bl	80027fc <HAL_GetTick>
 8004804:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004808:	e00a      	b.n	8004820 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800480a:	f7fd fff7 	bl	80027fc <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b64      	cmp	r3, #100	; 0x64
 8004818:	d902      	bls.n	8004820 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	f000 bde6 	b.w	80053ec <HAL_RCC_OscConfig+0xe1c>
 8004820:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004824:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004828:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800482c:	fa93 f3a3 	rbit	r3, r3
 8004830:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8004834:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004838:	fab3 f383 	clz	r3, r3
 800483c:	b2db      	uxtb	r3, r3
 800483e:	095b      	lsrs	r3, r3, #5
 8004840:	b2db      	uxtb	r3, r3
 8004842:	f043 0301 	orr.w	r3, r3, #1
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b01      	cmp	r3, #1
 800484a:	d102      	bne.n	8004852 <HAL_RCC_OscConfig+0x282>
 800484c:	4b19      	ldr	r3, [pc, #100]	; (80048b4 <HAL_RCC_OscConfig+0x2e4>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	e015      	b.n	800487e <HAL_RCC_OscConfig+0x2ae>
 8004852:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004856:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800485e:	fa93 f3a3 	rbit	r3, r3
 8004862:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004866:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800486a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800486e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004872:	fa93 f3a3 	rbit	r3, r3
 8004876:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800487a:	4b0e      	ldr	r3, [pc, #56]	; (80048b4 <HAL_RCC_OscConfig+0x2e4>)
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004882:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004886:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800488a:	fa92 f2a2 	rbit	r2, r2
 800488e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8004892:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004896:	fab2 f282 	clz	r2, r2
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	f042 0220 	orr.w	r2, r2, #32
 80048a0:	b2d2      	uxtb	r2, r2
 80048a2:	f002 021f 	and.w	r2, r2, #31
 80048a6:	2101      	movs	r1, #1
 80048a8:	fa01 f202 	lsl.w	r2, r1, r2
 80048ac:	4013      	ands	r3, r2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1ab      	bne.n	800480a <HAL_RCC_OscConfig+0x23a>
 80048b2:	e002      	b.n	80048ba <HAL_RCC_OscConfig+0x2ea>
 80048b4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048ba:	1d3b      	adds	r3, r7, #4
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 8170 	beq.w	8004baa <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80048ca:	4bd0      	ldr	r3, [pc, #832]	; (8004c0c <HAL_RCC_OscConfig+0x63c>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f003 030c 	and.w	r3, r3, #12
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00c      	beq.n	80048f0 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80048d6:	4bcd      	ldr	r3, [pc, #820]	; (8004c0c <HAL_RCC_OscConfig+0x63c>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f003 030c 	and.w	r3, r3, #12
 80048de:	2b08      	cmp	r3, #8
 80048e0:	d16d      	bne.n	80049be <HAL_RCC_OscConfig+0x3ee>
 80048e2:	4bca      	ldr	r3, [pc, #808]	; (8004c0c <HAL_RCC_OscConfig+0x63c>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80048ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048ee:	d166      	bne.n	80049be <HAL_RCC_OscConfig+0x3ee>
 80048f0:	2302      	movs	r3, #2
 80048f2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80048fa:	fa93 f3a3 	rbit	r3, r3
 80048fe:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8004902:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004906:	fab3 f383 	clz	r3, r3
 800490a:	b2db      	uxtb	r3, r3
 800490c:	095b      	lsrs	r3, r3, #5
 800490e:	b2db      	uxtb	r3, r3
 8004910:	f043 0301 	orr.w	r3, r3, #1
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b01      	cmp	r3, #1
 8004918:	d102      	bne.n	8004920 <HAL_RCC_OscConfig+0x350>
 800491a:	4bbc      	ldr	r3, [pc, #752]	; (8004c0c <HAL_RCC_OscConfig+0x63c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	e013      	b.n	8004948 <HAL_RCC_OscConfig+0x378>
 8004920:	2302      	movs	r3, #2
 8004922:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004926:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800492a:	fa93 f3a3 	rbit	r3, r3
 800492e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004932:	2302      	movs	r3, #2
 8004934:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004938:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800493c:	fa93 f3a3 	rbit	r3, r3
 8004940:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004944:	4bb1      	ldr	r3, [pc, #708]	; (8004c0c <HAL_RCC_OscConfig+0x63c>)
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	2202      	movs	r2, #2
 800494a:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800494e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8004952:	fa92 f2a2 	rbit	r2, r2
 8004956:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800495a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800495e:	fab2 f282 	clz	r2, r2
 8004962:	b2d2      	uxtb	r2, r2
 8004964:	f042 0220 	orr.w	r2, r2, #32
 8004968:	b2d2      	uxtb	r2, r2
 800496a:	f002 021f 	and.w	r2, r2, #31
 800496e:	2101      	movs	r1, #1
 8004970:	fa01 f202 	lsl.w	r2, r1, r2
 8004974:	4013      	ands	r3, r2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d007      	beq.n	800498a <HAL_RCC_OscConfig+0x3ba>
 800497a:	1d3b      	adds	r3, r7, #4
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d002      	beq.n	800498a <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	f000 bd31 	b.w	80053ec <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800498a:	4ba0      	ldr	r3, [pc, #640]	; (8004c0c <HAL_RCC_OscConfig+0x63c>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004992:	1d3b      	adds	r3, r7, #4
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	21f8      	movs	r1, #248	; 0xf8
 800499a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80049a2:	fa91 f1a1 	rbit	r1, r1
 80049a6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80049aa:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80049ae:	fab1 f181 	clz	r1, r1
 80049b2:	b2c9      	uxtb	r1, r1
 80049b4:	408b      	lsls	r3, r1
 80049b6:	4995      	ldr	r1, [pc, #596]	; (8004c0c <HAL_RCC_OscConfig+0x63c>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049bc:	e0f5      	b.n	8004baa <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049be:	1d3b      	adds	r3, r7, #4
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 8085 	beq.w	8004ad4 <HAL_RCC_OscConfig+0x504>
 80049ca:	2301      	movs	r3, #1
 80049cc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80049d4:	fa93 f3a3 	rbit	r3, r3
 80049d8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80049dc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049e0:	fab3 f383 	clz	r3, r3
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80049ea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	461a      	mov	r2, r3
 80049f2:	2301      	movs	r3, #1
 80049f4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f6:	f7fd ff01 	bl	80027fc <HAL_GetTick>
 80049fa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049fe:	e00a      	b.n	8004a16 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a00:	f7fd fefc 	bl	80027fc <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d902      	bls.n	8004a16 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	f000 bceb 	b.w	80053ec <HAL_RCC_OscConfig+0xe1c>
 8004a16:	2302      	movs	r3, #2
 8004a18:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a1c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004a20:	fa93 f3a3 	rbit	r3, r3
 8004a24:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8004a28:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a2c:	fab3 f383 	clz	r3, r3
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	095b      	lsrs	r3, r3, #5
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	f043 0301 	orr.w	r3, r3, #1
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d102      	bne.n	8004a46 <HAL_RCC_OscConfig+0x476>
 8004a40:	4b72      	ldr	r3, [pc, #456]	; (8004c0c <HAL_RCC_OscConfig+0x63c>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	e013      	b.n	8004a6e <HAL_RCC_OscConfig+0x49e>
 8004a46:	2302      	movs	r3, #2
 8004a48:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a4c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004a50:	fa93 f3a3 	rbit	r3, r3
 8004a54:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004a58:	2302      	movs	r3, #2
 8004a5a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004a5e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004a62:	fa93 f3a3 	rbit	r3, r3
 8004a66:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004a6a:	4b68      	ldr	r3, [pc, #416]	; (8004c0c <HAL_RCC_OscConfig+0x63c>)
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004a74:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004a78:	fa92 f2a2 	rbit	r2, r2
 8004a7c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8004a80:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004a84:	fab2 f282 	clz	r2, r2
 8004a88:	b2d2      	uxtb	r2, r2
 8004a8a:	f042 0220 	orr.w	r2, r2, #32
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	f002 021f 	and.w	r2, r2, #31
 8004a94:	2101      	movs	r1, #1
 8004a96:	fa01 f202 	lsl.w	r2, r1, r2
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d0af      	beq.n	8004a00 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa0:	4b5a      	ldr	r3, [pc, #360]	; (8004c0c <HAL_RCC_OscConfig+0x63c>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004aa8:	1d3b      	adds	r3, r7, #4
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	21f8      	movs	r1, #248	; 0xf8
 8004ab0:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab4:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8004ab8:	fa91 f1a1 	rbit	r1, r1
 8004abc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8004ac0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004ac4:	fab1 f181 	clz	r1, r1
 8004ac8:	b2c9      	uxtb	r1, r1
 8004aca:	408b      	lsls	r3, r1
 8004acc:	494f      	ldr	r1, [pc, #316]	; (8004c0c <HAL_RCC_OscConfig+0x63c>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	600b      	str	r3, [r1, #0]
 8004ad2:	e06a      	b.n	8004baa <HAL_RCC_OscConfig+0x5da>
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ada:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004ade:	fa93 f3a3 	rbit	r3, r3
 8004ae2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8004ae6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aea:	fab3 f383 	clz	r3, r3
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004af4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	461a      	mov	r2, r3
 8004afc:	2300      	movs	r3, #0
 8004afe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b00:	f7fd fe7c 	bl	80027fc <HAL_GetTick>
 8004b04:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b08:	e00a      	b.n	8004b20 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b0a:	f7fd fe77 	bl	80027fc <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d902      	bls.n	8004b20 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	f000 bc66 	b.w	80053ec <HAL_RCC_OscConfig+0xe1c>
 8004b20:	2302      	movs	r3, #2
 8004b22:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b26:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004b2a:	fa93 f3a3 	rbit	r3, r3
 8004b2e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8004b32:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b36:	fab3 f383 	clz	r3, r3
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	095b      	lsrs	r3, r3, #5
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	f043 0301 	orr.w	r3, r3, #1
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d102      	bne.n	8004b50 <HAL_RCC_OscConfig+0x580>
 8004b4a:	4b30      	ldr	r3, [pc, #192]	; (8004c0c <HAL_RCC_OscConfig+0x63c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	e013      	b.n	8004b78 <HAL_RCC_OscConfig+0x5a8>
 8004b50:	2302      	movs	r3, #2
 8004b52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b5a:	fa93 f3a3 	rbit	r3, r3
 8004b5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004b62:	2302      	movs	r3, #2
 8004b64:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004b68:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004b6c:	fa93 f3a3 	rbit	r3, r3
 8004b70:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004b74:	4b25      	ldr	r3, [pc, #148]	; (8004c0c <HAL_RCC_OscConfig+0x63c>)
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	2202      	movs	r2, #2
 8004b7a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004b7e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8004b82:	fa92 f2a2 	rbit	r2, r2
 8004b86:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8004b8a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004b8e:	fab2 f282 	clz	r2, r2
 8004b92:	b2d2      	uxtb	r2, r2
 8004b94:	f042 0220 	orr.w	r2, r2, #32
 8004b98:	b2d2      	uxtb	r2, r2
 8004b9a:	f002 021f 	and.w	r2, r2, #31
 8004b9e:	2101      	movs	r1, #1
 8004ba0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1af      	bne.n	8004b0a <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004baa:	1d3b      	adds	r3, r7, #4
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0308 	and.w	r3, r3, #8
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f000 80da 	beq.w	8004d6e <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bba:	1d3b      	adds	r3, r7, #4
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d069      	beq.n	8004c98 <HAL_RCC_OscConfig+0x6c8>
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bce:	fa93 f3a3 	rbit	r3, r3
 8004bd2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8004bd6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bda:	fab3 f383 	clz	r3, r3
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	461a      	mov	r2, r3
 8004be2:	4b0b      	ldr	r3, [pc, #44]	; (8004c10 <HAL_RCC_OscConfig+0x640>)
 8004be4:	4413      	add	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	461a      	mov	r2, r3
 8004bea:	2301      	movs	r3, #1
 8004bec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bee:	f7fd fe05 	bl	80027fc <HAL_GetTick>
 8004bf2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bf6:	e00d      	b.n	8004c14 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bf8:	f7fd fe00 	bl	80027fc <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d905      	bls.n	8004c14 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e3ef      	b.n	80053ec <HAL_RCC_OscConfig+0xe1c>
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	10908120 	.word	0x10908120
 8004c14:	2302      	movs	r3, #2
 8004c16:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c1e:	fa93 f2a3 	rbit	r2, r3
 8004c22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	fa93 f2a3 	rbit	r2, r3
 8004c3a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004c44:	2202      	movs	r2, #2
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	fa93 f2a3 	rbit	r2, r3
 8004c52:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004c56:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c58:	4ba4      	ldr	r3, [pc, #656]	; (8004eec <HAL_RCC_OscConfig+0x91c>)
 8004c5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c5c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004c60:	2102      	movs	r1, #2
 8004c62:	6019      	str	r1, [r3, #0]
 8004c64:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	fa93 f1a3 	rbit	r1, r3
 8004c6e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004c72:	6019      	str	r1, [r3, #0]
  return result;
 8004c74:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	fab3 f383 	clz	r3, r3
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	f003 031f 	and.w	r3, r3, #31
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c90:	4013      	ands	r3, r2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d0b0      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x628>
 8004c96:	e06a      	b.n	8004d6e <HAL_RCC_OscConfig+0x79e>
 8004c98:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	fa93 f2a3 	rbit	r2, r3
 8004caa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004cae:	601a      	str	r2, [r3, #0]
  return result;
 8004cb0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004cb4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cb6:	fab3 f383 	clz	r3, r3
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	4b8c      	ldr	r3, [pc, #560]	; (8004ef0 <HAL_RCC_OscConfig+0x920>)
 8004cc0:	4413      	add	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cca:	f7fd fd97 	bl	80027fc <HAL_GetTick>
 8004cce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cd2:	e009      	b.n	8004ce8 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cd4:	f7fd fd92 	bl	80027fc <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e381      	b.n	80053ec <HAL_RCC_OscConfig+0xe1c>
 8004ce8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004cec:	2202      	movs	r2, #2
 8004cee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	fa93 f2a3 	rbit	r2, r3
 8004cfa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004d04:	2202      	movs	r2, #2
 8004d06:	601a      	str	r2, [r3, #0]
 8004d08:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	fa93 f2a3 	rbit	r2, r3
 8004d12:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004d16:	601a      	str	r2, [r3, #0]
 8004d18:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004d1c:	2202      	movs	r2, #2
 8004d1e:	601a      	str	r2, [r3, #0]
 8004d20:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	fa93 f2a3 	rbit	r2, r3
 8004d2a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004d2e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d30:	4b6e      	ldr	r3, [pc, #440]	; (8004eec <HAL_RCC_OscConfig+0x91c>)
 8004d32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d34:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004d38:	2102      	movs	r1, #2
 8004d3a:	6019      	str	r1, [r3, #0]
 8004d3c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	fa93 f1a3 	rbit	r1, r3
 8004d46:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004d4a:	6019      	str	r1, [r3, #0]
  return result;
 8004d4c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	fab3 f383 	clz	r3, r3
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	f003 031f 	and.w	r3, r3, #31
 8004d62:	2101      	movs	r1, #1
 8004d64:	fa01 f303 	lsl.w	r3, r1, r3
 8004d68:	4013      	ands	r3, r2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1b2      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d6e:	1d3b      	adds	r3, r7, #4
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0304 	and.w	r3, r3, #4
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 8157 	beq.w	800502c <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d84:	4b59      	ldr	r3, [pc, #356]	; (8004eec <HAL_RCC_OscConfig+0x91c>)
 8004d86:	69db      	ldr	r3, [r3, #28]
 8004d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d112      	bne.n	8004db6 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d90:	4b56      	ldr	r3, [pc, #344]	; (8004eec <HAL_RCC_OscConfig+0x91c>)
 8004d92:	69db      	ldr	r3, [r3, #28]
 8004d94:	4a55      	ldr	r2, [pc, #340]	; (8004eec <HAL_RCC_OscConfig+0x91c>)
 8004d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d9a:	61d3      	str	r3, [r2, #28]
 8004d9c:	4b53      	ldr	r3, [pc, #332]	; (8004eec <HAL_RCC_OscConfig+0x91c>)
 8004d9e:	69db      	ldr	r3, [r3, #28]
 8004da0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004da4:	f107 030c 	add.w	r3, r7, #12
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	f107 030c 	add.w	r3, r7, #12
 8004dae:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004db0:	2301      	movs	r3, #1
 8004db2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db6:	4b4f      	ldr	r3, [pc, #316]	; (8004ef4 <HAL_RCC_OscConfig+0x924>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d11a      	bne.n	8004df8 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dc2:	4b4c      	ldr	r3, [pc, #304]	; (8004ef4 <HAL_RCC_OscConfig+0x924>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a4b      	ldr	r2, [pc, #300]	; (8004ef4 <HAL_RCC_OscConfig+0x924>)
 8004dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dcc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dce:	f7fd fd15 	bl	80027fc <HAL_GetTick>
 8004dd2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dd6:	e009      	b.n	8004dec <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dd8:	f7fd fd10 	bl	80027fc <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	2b64      	cmp	r3, #100	; 0x64
 8004de6:	d901      	bls.n	8004dec <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e2ff      	b.n	80053ec <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dec:	4b41      	ldr	r3, [pc, #260]	; (8004ef4 <HAL_RCC_OscConfig+0x924>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d0ef      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004df8:	1d3b      	adds	r3, r7, #4
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d106      	bne.n	8004e10 <HAL_RCC_OscConfig+0x840>
 8004e02:	4b3a      	ldr	r3, [pc, #232]	; (8004eec <HAL_RCC_OscConfig+0x91c>)
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	4a39      	ldr	r2, [pc, #228]	; (8004eec <HAL_RCC_OscConfig+0x91c>)
 8004e08:	f043 0301 	orr.w	r3, r3, #1
 8004e0c:	6213      	str	r3, [r2, #32]
 8004e0e:	e02f      	b.n	8004e70 <HAL_RCC_OscConfig+0x8a0>
 8004e10:	1d3b      	adds	r3, r7, #4
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10c      	bne.n	8004e34 <HAL_RCC_OscConfig+0x864>
 8004e1a:	4b34      	ldr	r3, [pc, #208]	; (8004eec <HAL_RCC_OscConfig+0x91c>)
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	4a33      	ldr	r2, [pc, #204]	; (8004eec <HAL_RCC_OscConfig+0x91c>)
 8004e20:	f023 0301 	bic.w	r3, r3, #1
 8004e24:	6213      	str	r3, [r2, #32]
 8004e26:	4b31      	ldr	r3, [pc, #196]	; (8004eec <HAL_RCC_OscConfig+0x91c>)
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	4a30      	ldr	r2, [pc, #192]	; (8004eec <HAL_RCC_OscConfig+0x91c>)
 8004e2c:	f023 0304 	bic.w	r3, r3, #4
 8004e30:	6213      	str	r3, [r2, #32]
 8004e32:	e01d      	b.n	8004e70 <HAL_RCC_OscConfig+0x8a0>
 8004e34:	1d3b      	adds	r3, r7, #4
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	2b05      	cmp	r3, #5
 8004e3c:	d10c      	bne.n	8004e58 <HAL_RCC_OscConfig+0x888>
 8004e3e:	4b2b      	ldr	r3, [pc, #172]	; (8004eec <HAL_RCC_OscConfig+0x91c>)
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	4a2a      	ldr	r2, [pc, #168]	; (8004eec <HAL_RCC_OscConfig+0x91c>)
 8004e44:	f043 0304 	orr.w	r3, r3, #4
 8004e48:	6213      	str	r3, [r2, #32]
 8004e4a:	4b28      	ldr	r3, [pc, #160]	; (8004eec <HAL_RCC_OscConfig+0x91c>)
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	4a27      	ldr	r2, [pc, #156]	; (8004eec <HAL_RCC_OscConfig+0x91c>)
 8004e50:	f043 0301 	orr.w	r3, r3, #1
 8004e54:	6213      	str	r3, [r2, #32]
 8004e56:	e00b      	b.n	8004e70 <HAL_RCC_OscConfig+0x8a0>
 8004e58:	4b24      	ldr	r3, [pc, #144]	; (8004eec <HAL_RCC_OscConfig+0x91c>)
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	4a23      	ldr	r2, [pc, #140]	; (8004eec <HAL_RCC_OscConfig+0x91c>)
 8004e5e:	f023 0301 	bic.w	r3, r3, #1
 8004e62:	6213      	str	r3, [r2, #32]
 8004e64:	4b21      	ldr	r3, [pc, #132]	; (8004eec <HAL_RCC_OscConfig+0x91c>)
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	4a20      	ldr	r2, [pc, #128]	; (8004eec <HAL_RCC_OscConfig+0x91c>)
 8004e6a:	f023 0304 	bic.w	r3, r3, #4
 8004e6e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e70:	1d3b      	adds	r3, r7, #4
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d06a      	beq.n	8004f50 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e7a:	f7fd fcbf 	bl	80027fc <HAL_GetTick>
 8004e7e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e82:	e00b      	b.n	8004e9c <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e84:	f7fd fcba 	bl	80027fc <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e2a7      	b.n	80053ec <HAL_RCC_OscConfig+0xe1c>
 8004e9c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	fa93 f2a3 	rbit	r2, r3
 8004eae:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004eb8:	2202      	movs	r2, #2
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	fa93 f2a3 	rbit	r2, r3
 8004ec6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004eca:	601a      	str	r2, [r3, #0]
  return result;
 8004ecc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004ed0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed2:	fab3 f383 	clz	r3, r3
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	095b      	lsrs	r3, r3, #5
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	f043 0302 	orr.w	r3, r3, #2
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d108      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x928>
 8004ee6:	4b01      	ldr	r3, [pc, #4]	; (8004eec <HAL_RCC_OscConfig+0x91c>)
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	e013      	b.n	8004f14 <HAL_RCC_OscConfig+0x944>
 8004eec:	40021000 	.word	0x40021000
 8004ef0:	10908120 	.word	0x10908120
 8004ef4:	40007000 	.word	0x40007000
 8004ef8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004efc:	2202      	movs	r2, #2
 8004efe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f00:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	fa93 f2a3 	rbit	r2, r3
 8004f0a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	4bc0      	ldr	r3, [pc, #768]	; (8005214 <HAL_RCC_OscConfig+0xc44>)
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004f18:	2102      	movs	r1, #2
 8004f1a:	6011      	str	r1, [r2, #0]
 8004f1c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004f20:	6812      	ldr	r2, [r2, #0]
 8004f22:	fa92 f1a2 	rbit	r1, r2
 8004f26:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004f2a:	6011      	str	r1, [r2, #0]
  return result;
 8004f2c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004f30:	6812      	ldr	r2, [r2, #0]
 8004f32:	fab2 f282 	clz	r2, r2
 8004f36:	b2d2      	uxtb	r2, r2
 8004f38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f3c:	b2d2      	uxtb	r2, r2
 8004f3e:	f002 021f 	and.w	r2, r2, #31
 8004f42:	2101      	movs	r1, #1
 8004f44:	fa01 f202 	lsl.w	r2, r1, r2
 8004f48:	4013      	ands	r3, r2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d09a      	beq.n	8004e84 <HAL_RCC_OscConfig+0x8b4>
 8004f4e:	e063      	b.n	8005018 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f50:	f7fd fc54 	bl	80027fc <HAL_GetTick>
 8004f54:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f58:	e00b      	b.n	8004f72 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f5a:	f7fd fc4f 	bl	80027fc <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e23c      	b.n	80053ec <HAL_RCC_OscConfig+0xe1c>
 8004f72:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004f76:	2202      	movs	r2, #2
 8004f78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	fa93 f2a3 	rbit	r2, r3
 8004f84:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004f88:	601a      	str	r2, [r3, #0]
 8004f8a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004f8e:	2202      	movs	r2, #2
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	fa93 f2a3 	rbit	r2, r3
 8004f9c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004fa0:	601a      	str	r2, [r3, #0]
  return result;
 8004fa2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004fa6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fa8:	fab3 f383 	clz	r3, r3
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	095b      	lsrs	r3, r3, #5
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	f043 0302 	orr.w	r3, r3, #2
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d102      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x9f2>
 8004fbc:	4b95      	ldr	r3, [pc, #596]	; (8005214 <HAL_RCC_OscConfig+0xc44>)
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	e00d      	b.n	8004fde <HAL_RCC_OscConfig+0xa0e>
 8004fc2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fca:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	fa93 f2a3 	rbit	r2, r3
 8004fd4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004fd8:	601a      	str	r2, [r3, #0]
 8004fda:	4b8e      	ldr	r3, [pc, #568]	; (8005214 <HAL_RCC_OscConfig+0xc44>)
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fde:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8004fe2:	2102      	movs	r1, #2
 8004fe4:	6011      	str	r1, [r2, #0]
 8004fe6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8004fea:	6812      	ldr	r2, [r2, #0]
 8004fec:	fa92 f1a2 	rbit	r1, r2
 8004ff0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004ff4:	6011      	str	r1, [r2, #0]
  return result;
 8004ff6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004ffa:	6812      	ldr	r2, [r2, #0]
 8004ffc:	fab2 f282 	clz	r2, r2
 8005000:	b2d2      	uxtb	r2, r2
 8005002:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005006:	b2d2      	uxtb	r2, r2
 8005008:	f002 021f 	and.w	r2, r2, #31
 800500c:	2101      	movs	r1, #1
 800500e:	fa01 f202 	lsl.w	r2, r1, r2
 8005012:	4013      	ands	r3, r2
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1a0      	bne.n	8004f5a <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005018:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800501c:	2b01      	cmp	r3, #1
 800501e:	d105      	bne.n	800502c <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005020:	4b7c      	ldr	r3, [pc, #496]	; (8005214 <HAL_RCC_OscConfig+0xc44>)
 8005022:	69db      	ldr	r3, [r3, #28]
 8005024:	4a7b      	ldr	r2, [pc, #492]	; (8005214 <HAL_RCC_OscConfig+0xc44>)
 8005026:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800502a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800502c:	1d3b      	adds	r3, r7, #4
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	2b00      	cmp	r3, #0
 8005034:	f000 81d9 	beq.w	80053ea <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005038:	4b76      	ldr	r3, [pc, #472]	; (8005214 <HAL_RCC_OscConfig+0xc44>)
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f003 030c 	and.w	r3, r3, #12
 8005040:	2b08      	cmp	r3, #8
 8005042:	f000 81a6 	beq.w	8005392 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005046:	1d3b      	adds	r3, r7, #4
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	2b02      	cmp	r3, #2
 800504e:	f040 811e 	bne.w	800528e <HAL_RCC_OscConfig+0xcbe>
 8005052:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005056:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800505a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800505c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	fa93 f2a3 	rbit	r2, r3
 8005066:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800506a:	601a      	str	r2, [r3, #0]
  return result;
 800506c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005070:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005072:	fab3 f383 	clz	r3, r3
 8005076:	b2db      	uxtb	r3, r3
 8005078:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800507c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	461a      	mov	r2, r3
 8005084:	2300      	movs	r3, #0
 8005086:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005088:	f7fd fbb8 	bl	80027fc <HAL_GetTick>
 800508c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005090:	e009      	b.n	80050a6 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005092:	f7fd fbb3 	bl	80027fc <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e1a2      	b.n	80053ec <HAL_RCC_OscConfig+0xe1c>
 80050a6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80050aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	fa93 f2a3 	rbit	r2, r3
 80050ba:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80050be:	601a      	str	r2, [r3, #0]
  return result;
 80050c0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80050c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050c6:	fab3 f383 	clz	r3, r3
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	095b      	lsrs	r3, r3, #5
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	f043 0301 	orr.w	r3, r3, #1
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d102      	bne.n	80050e0 <HAL_RCC_OscConfig+0xb10>
 80050da:	4b4e      	ldr	r3, [pc, #312]	; (8005214 <HAL_RCC_OscConfig+0xc44>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	e01b      	b.n	8005118 <HAL_RCC_OscConfig+0xb48>
 80050e0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80050e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	fa93 f2a3 	rbit	r2, r3
 80050f4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80050f8:	601a      	str	r2, [r3, #0]
 80050fa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80050fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	fa93 f2a3 	rbit	r2, r3
 800510e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005112:	601a      	str	r2, [r3, #0]
 8005114:	4b3f      	ldr	r3, [pc, #252]	; (8005214 <HAL_RCC_OscConfig+0xc44>)
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800511c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005120:	6011      	str	r1, [r2, #0]
 8005122:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8005126:	6812      	ldr	r2, [r2, #0]
 8005128:	fa92 f1a2 	rbit	r1, r2
 800512c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005130:	6011      	str	r1, [r2, #0]
  return result;
 8005132:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005136:	6812      	ldr	r2, [r2, #0]
 8005138:	fab2 f282 	clz	r2, r2
 800513c:	b2d2      	uxtb	r2, r2
 800513e:	f042 0220 	orr.w	r2, r2, #32
 8005142:	b2d2      	uxtb	r2, r2
 8005144:	f002 021f 	and.w	r2, r2, #31
 8005148:	2101      	movs	r1, #1
 800514a:	fa01 f202 	lsl.w	r2, r1, r2
 800514e:	4013      	ands	r3, r2
 8005150:	2b00      	cmp	r3, #0
 8005152:	d19e      	bne.n	8005092 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005154:	4b2f      	ldr	r3, [pc, #188]	; (8005214 <HAL_RCC_OscConfig+0xc44>)
 8005156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005158:	f023 020f 	bic.w	r2, r3, #15
 800515c:	1d3b      	adds	r3, r7, #4
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	492c      	ldr	r1, [pc, #176]	; (8005214 <HAL_RCC_OscConfig+0xc44>)
 8005164:	4313      	orrs	r3, r2
 8005166:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005168:	4b2a      	ldr	r3, [pc, #168]	; (8005214 <HAL_RCC_OscConfig+0xc44>)
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8005170:	1d3b      	adds	r3, r7, #4
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6a19      	ldr	r1, [r3, #32]
 8005176:	1d3b      	adds	r3, r7, #4
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	69db      	ldr	r3, [r3, #28]
 800517c:	430b      	orrs	r3, r1
 800517e:	4925      	ldr	r1, [pc, #148]	; (8005214 <HAL_RCC_OscConfig+0xc44>)
 8005180:	4313      	orrs	r3, r2
 8005182:	604b      	str	r3, [r1, #4]
 8005184:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005188:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800518c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800518e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	fa93 f2a3 	rbit	r2, r3
 8005198:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800519c:	601a      	str	r2, [r3, #0]
  return result;
 800519e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80051a2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051a4:	fab3 f383 	clz	r3, r3
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80051ae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	461a      	mov	r2, r3
 80051b6:	2301      	movs	r3, #1
 80051b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ba:	f7fd fb1f 	bl	80027fc <HAL_GetTick>
 80051be:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051c2:	e009      	b.n	80051d8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051c4:	f7fd fb1a 	bl	80027fc <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d901      	bls.n	80051d8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e109      	b.n	80053ec <HAL_RCC_OscConfig+0xe1c>
 80051d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80051dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	fa93 f2a3 	rbit	r2, r3
 80051ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80051f0:	601a      	str	r2, [r3, #0]
  return result;
 80051f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80051f6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051f8:	fab3 f383 	clz	r3, r3
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	095b      	lsrs	r3, r3, #5
 8005200:	b2db      	uxtb	r3, r3
 8005202:	f043 0301 	orr.w	r3, r3, #1
 8005206:	b2db      	uxtb	r3, r3
 8005208:	2b01      	cmp	r3, #1
 800520a:	d105      	bne.n	8005218 <HAL_RCC_OscConfig+0xc48>
 800520c:	4b01      	ldr	r3, [pc, #4]	; (8005214 <HAL_RCC_OscConfig+0xc44>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	e01e      	b.n	8005250 <HAL_RCC_OscConfig+0xc80>
 8005212:	bf00      	nop
 8005214:	40021000 	.word	0x40021000
 8005218:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800521c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005220:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005222:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	fa93 f2a3 	rbit	r2, r3
 800522c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005236:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	fa93 f2a3 	rbit	r2, r3
 8005246:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800524a:	601a      	str	r2, [r3, #0]
 800524c:	4b6a      	ldr	r3, [pc, #424]	; (80053f8 <HAL_RCC_OscConfig+0xe28>)
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005254:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005258:	6011      	str	r1, [r2, #0]
 800525a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800525e:	6812      	ldr	r2, [r2, #0]
 8005260:	fa92 f1a2 	rbit	r1, r2
 8005264:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005268:	6011      	str	r1, [r2, #0]
  return result;
 800526a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800526e:	6812      	ldr	r2, [r2, #0]
 8005270:	fab2 f282 	clz	r2, r2
 8005274:	b2d2      	uxtb	r2, r2
 8005276:	f042 0220 	orr.w	r2, r2, #32
 800527a:	b2d2      	uxtb	r2, r2
 800527c:	f002 021f 	and.w	r2, r2, #31
 8005280:	2101      	movs	r1, #1
 8005282:	fa01 f202 	lsl.w	r2, r1, r2
 8005286:	4013      	ands	r3, r2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d09b      	beq.n	80051c4 <HAL_RCC_OscConfig+0xbf4>
 800528c:	e0ad      	b.n	80053ea <HAL_RCC_OscConfig+0xe1a>
 800528e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005292:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005296:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005298:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	fa93 f2a3 	rbit	r2, r3
 80052a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80052a6:	601a      	str	r2, [r3, #0]
  return result;
 80052a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80052ac:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ae:	fab3 f383 	clz	r3, r3
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80052b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	461a      	mov	r2, r3
 80052c0:	2300      	movs	r3, #0
 80052c2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c4:	f7fd fa9a 	bl	80027fc <HAL_GetTick>
 80052c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052cc:	e009      	b.n	80052e2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052ce:	f7fd fa95 	bl	80027fc <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e084      	b.n	80053ec <HAL_RCC_OscConfig+0xe1c>
 80052e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80052e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	fa93 f2a3 	rbit	r2, r3
 80052f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052fa:	601a      	str	r2, [r3, #0]
  return result;
 80052fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005300:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005302:	fab3 f383 	clz	r3, r3
 8005306:	b2db      	uxtb	r3, r3
 8005308:	095b      	lsrs	r3, r3, #5
 800530a:	b2db      	uxtb	r3, r3
 800530c:	f043 0301 	orr.w	r3, r3, #1
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b01      	cmp	r3, #1
 8005314:	d102      	bne.n	800531c <HAL_RCC_OscConfig+0xd4c>
 8005316:	4b38      	ldr	r3, [pc, #224]	; (80053f8 <HAL_RCC_OscConfig+0xe28>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	e01b      	b.n	8005354 <HAL_RCC_OscConfig+0xd84>
 800531c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005320:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005324:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	fa93 f2a3 	rbit	r2, r3
 8005330:	f107 0320 	add.w	r3, r7, #32
 8005334:	601a      	str	r2, [r3, #0]
 8005336:	f107 031c 	add.w	r3, r7, #28
 800533a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800533e:	601a      	str	r2, [r3, #0]
 8005340:	f107 031c 	add.w	r3, r7, #28
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	fa93 f2a3 	rbit	r2, r3
 800534a:	f107 0318 	add.w	r3, r7, #24
 800534e:	601a      	str	r2, [r3, #0]
 8005350:	4b29      	ldr	r3, [pc, #164]	; (80053f8 <HAL_RCC_OscConfig+0xe28>)
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	f107 0214 	add.w	r2, r7, #20
 8005358:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800535c:	6011      	str	r1, [r2, #0]
 800535e:	f107 0214 	add.w	r2, r7, #20
 8005362:	6812      	ldr	r2, [r2, #0]
 8005364:	fa92 f1a2 	rbit	r1, r2
 8005368:	f107 0210 	add.w	r2, r7, #16
 800536c:	6011      	str	r1, [r2, #0]
  return result;
 800536e:	f107 0210 	add.w	r2, r7, #16
 8005372:	6812      	ldr	r2, [r2, #0]
 8005374:	fab2 f282 	clz	r2, r2
 8005378:	b2d2      	uxtb	r2, r2
 800537a:	f042 0220 	orr.w	r2, r2, #32
 800537e:	b2d2      	uxtb	r2, r2
 8005380:	f002 021f 	and.w	r2, r2, #31
 8005384:	2101      	movs	r1, #1
 8005386:	fa01 f202 	lsl.w	r2, r1, r2
 800538a:	4013      	ands	r3, r2
 800538c:	2b00      	cmp	r3, #0
 800538e:	d19e      	bne.n	80052ce <HAL_RCC_OscConfig+0xcfe>
 8005390:	e02b      	b.n	80053ea <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005392:	1d3b      	adds	r3, r7, #4
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d101      	bne.n	80053a0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e025      	b.n	80053ec <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80053a0:	4b15      	ldr	r3, [pc, #84]	; (80053f8 <HAL_RCC_OscConfig+0xe28>)
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80053a8:	4b13      	ldr	r3, [pc, #76]	; (80053f8 <HAL_RCC_OscConfig+0xe28>)
 80053aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ac:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80053b0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80053b4:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80053b8:	1d3b      	adds	r3, r7, #4
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d111      	bne.n	80053e6 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80053c2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80053c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80053ca:	1d3b      	adds	r3, r7, #4
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d108      	bne.n	80053e6 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80053d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053d8:	f003 020f 	and.w	r2, r3, #15
 80053dc:	1d3b      	adds	r3, r7, #4
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d001      	beq.n	80053ea <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e000      	b.n	80053ec <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	40021000 	.word	0x40021000

080053fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b09e      	sub	sp, #120	; 0x78
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005406:	2300      	movs	r3, #0
 8005408:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e162      	b.n	80056da <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005414:	4b90      	ldr	r3, [pc, #576]	; (8005658 <HAL_RCC_ClockConfig+0x25c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0307 	and.w	r3, r3, #7
 800541c:	683a      	ldr	r2, [r7, #0]
 800541e:	429a      	cmp	r2, r3
 8005420:	d910      	bls.n	8005444 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005422:	4b8d      	ldr	r3, [pc, #564]	; (8005658 <HAL_RCC_ClockConfig+0x25c>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f023 0207 	bic.w	r2, r3, #7
 800542a:	498b      	ldr	r1, [pc, #556]	; (8005658 <HAL_RCC_ClockConfig+0x25c>)
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	4313      	orrs	r3, r2
 8005430:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005432:	4b89      	ldr	r3, [pc, #548]	; (8005658 <HAL_RCC_ClockConfig+0x25c>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0307 	and.w	r3, r3, #7
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	429a      	cmp	r2, r3
 800543e:	d001      	beq.n	8005444 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e14a      	b.n	80056da <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d008      	beq.n	8005462 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005450:	4b82      	ldr	r3, [pc, #520]	; (800565c <HAL_RCC_ClockConfig+0x260>)
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	497f      	ldr	r1, [pc, #508]	; (800565c <HAL_RCC_ClockConfig+0x260>)
 800545e:	4313      	orrs	r3, r2
 8005460:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 80dc 	beq.w	8005628 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d13c      	bne.n	80054f2 <HAL_RCC_ClockConfig+0xf6>
 8005478:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800547c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800547e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005480:	fa93 f3a3 	rbit	r3, r3
 8005484:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005488:	fab3 f383 	clz	r3, r3
 800548c:	b2db      	uxtb	r3, r3
 800548e:	095b      	lsrs	r3, r3, #5
 8005490:	b2db      	uxtb	r3, r3
 8005492:	f043 0301 	orr.w	r3, r3, #1
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b01      	cmp	r3, #1
 800549a:	d102      	bne.n	80054a2 <HAL_RCC_ClockConfig+0xa6>
 800549c:	4b6f      	ldr	r3, [pc, #444]	; (800565c <HAL_RCC_ClockConfig+0x260>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	e00f      	b.n	80054c2 <HAL_RCC_ClockConfig+0xc6>
 80054a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054aa:	fa93 f3a3 	rbit	r3, r3
 80054ae:	667b      	str	r3, [r7, #100]	; 0x64
 80054b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054b4:	663b      	str	r3, [r7, #96]	; 0x60
 80054b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054b8:	fa93 f3a3 	rbit	r3, r3
 80054bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054be:	4b67      	ldr	r3, [pc, #412]	; (800565c <HAL_RCC_ClockConfig+0x260>)
 80054c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80054c6:	65ba      	str	r2, [r7, #88]	; 0x58
 80054c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054ca:	fa92 f2a2 	rbit	r2, r2
 80054ce:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80054d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80054d2:	fab2 f282 	clz	r2, r2
 80054d6:	b2d2      	uxtb	r2, r2
 80054d8:	f042 0220 	orr.w	r2, r2, #32
 80054dc:	b2d2      	uxtb	r2, r2
 80054de:	f002 021f 	and.w	r2, r2, #31
 80054e2:	2101      	movs	r1, #1
 80054e4:	fa01 f202 	lsl.w	r2, r1, r2
 80054e8:	4013      	ands	r3, r2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d17b      	bne.n	80055e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e0f3      	b.n	80056da <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d13c      	bne.n	8005574 <HAL_RCC_ClockConfig+0x178>
 80054fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005502:	fa93 f3a3 	rbit	r3, r3
 8005506:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800550a:	fab3 f383 	clz	r3, r3
 800550e:	b2db      	uxtb	r3, r3
 8005510:	095b      	lsrs	r3, r3, #5
 8005512:	b2db      	uxtb	r3, r3
 8005514:	f043 0301 	orr.w	r3, r3, #1
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b01      	cmp	r3, #1
 800551c:	d102      	bne.n	8005524 <HAL_RCC_ClockConfig+0x128>
 800551e:	4b4f      	ldr	r3, [pc, #316]	; (800565c <HAL_RCC_ClockConfig+0x260>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	e00f      	b.n	8005544 <HAL_RCC_ClockConfig+0x148>
 8005524:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005528:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800552a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800552c:	fa93 f3a3 	rbit	r3, r3
 8005530:	647b      	str	r3, [r7, #68]	; 0x44
 8005532:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005536:	643b      	str	r3, [r7, #64]	; 0x40
 8005538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800553a:	fa93 f3a3 	rbit	r3, r3
 800553e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005540:	4b46      	ldr	r3, [pc, #280]	; (800565c <HAL_RCC_ClockConfig+0x260>)
 8005542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005544:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005548:	63ba      	str	r2, [r7, #56]	; 0x38
 800554a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800554c:	fa92 f2a2 	rbit	r2, r2
 8005550:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005552:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005554:	fab2 f282 	clz	r2, r2
 8005558:	b2d2      	uxtb	r2, r2
 800555a:	f042 0220 	orr.w	r2, r2, #32
 800555e:	b2d2      	uxtb	r2, r2
 8005560:	f002 021f 	and.w	r2, r2, #31
 8005564:	2101      	movs	r1, #1
 8005566:	fa01 f202 	lsl.w	r2, r1, r2
 800556a:	4013      	ands	r3, r2
 800556c:	2b00      	cmp	r3, #0
 800556e:	d13a      	bne.n	80055e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e0b2      	b.n	80056da <HAL_RCC_ClockConfig+0x2de>
 8005574:	2302      	movs	r3, #2
 8005576:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557a:	fa93 f3a3 	rbit	r3, r3
 800557e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005582:	fab3 f383 	clz	r3, r3
 8005586:	b2db      	uxtb	r3, r3
 8005588:	095b      	lsrs	r3, r3, #5
 800558a:	b2db      	uxtb	r3, r3
 800558c:	f043 0301 	orr.w	r3, r3, #1
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b01      	cmp	r3, #1
 8005594:	d102      	bne.n	800559c <HAL_RCC_ClockConfig+0x1a0>
 8005596:	4b31      	ldr	r3, [pc, #196]	; (800565c <HAL_RCC_ClockConfig+0x260>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	e00d      	b.n	80055b8 <HAL_RCC_ClockConfig+0x1bc>
 800559c:	2302      	movs	r3, #2
 800559e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a2:	fa93 f3a3 	rbit	r3, r3
 80055a6:	627b      	str	r3, [r7, #36]	; 0x24
 80055a8:	2302      	movs	r3, #2
 80055aa:	623b      	str	r3, [r7, #32]
 80055ac:	6a3b      	ldr	r3, [r7, #32]
 80055ae:	fa93 f3a3 	rbit	r3, r3
 80055b2:	61fb      	str	r3, [r7, #28]
 80055b4:	4b29      	ldr	r3, [pc, #164]	; (800565c <HAL_RCC_ClockConfig+0x260>)
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	2202      	movs	r2, #2
 80055ba:	61ba      	str	r2, [r7, #24]
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	fa92 f2a2 	rbit	r2, r2
 80055c2:	617a      	str	r2, [r7, #20]
  return result;
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	fab2 f282 	clz	r2, r2
 80055ca:	b2d2      	uxtb	r2, r2
 80055cc:	f042 0220 	orr.w	r2, r2, #32
 80055d0:	b2d2      	uxtb	r2, r2
 80055d2:	f002 021f 	and.w	r2, r2, #31
 80055d6:	2101      	movs	r1, #1
 80055d8:	fa01 f202 	lsl.w	r2, r1, r2
 80055dc:	4013      	ands	r3, r2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e079      	b.n	80056da <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055e6:	4b1d      	ldr	r3, [pc, #116]	; (800565c <HAL_RCC_ClockConfig+0x260>)
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f023 0203 	bic.w	r2, r3, #3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	491a      	ldr	r1, [pc, #104]	; (800565c <HAL_RCC_ClockConfig+0x260>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055f8:	f7fd f900 	bl	80027fc <HAL_GetTick>
 80055fc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055fe:	e00a      	b.n	8005616 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005600:	f7fd f8fc 	bl	80027fc <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	f241 3288 	movw	r2, #5000	; 0x1388
 800560e:	4293      	cmp	r3, r2
 8005610:	d901      	bls.n	8005616 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e061      	b.n	80056da <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005616:	4b11      	ldr	r3, [pc, #68]	; (800565c <HAL_RCC_ClockConfig+0x260>)
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f003 020c 	and.w	r2, r3, #12
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	429a      	cmp	r2, r3
 8005626:	d1eb      	bne.n	8005600 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005628:	4b0b      	ldr	r3, [pc, #44]	; (8005658 <HAL_RCC_ClockConfig+0x25c>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0307 	and.w	r3, r3, #7
 8005630:	683a      	ldr	r2, [r7, #0]
 8005632:	429a      	cmp	r2, r3
 8005634:	d214      	bcs.n	8005660 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005636:	4b08      	ldr	r3, [pc, #32]	; (8005658 <HAL_RCC_ClockConfig+0x25c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f023 0207 	bic.w	r2, r3, #7
 800563e:	4906      	ldr	r1, [pc, #24]	; (8005658 <HAL_RCC_ClockConfig+0x25c>)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	4313      	orrs	r3, r2
 8005644:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005646:	4b04      	ldr	r3, [pc, #16]	; (8005658 <HAL_RCC_ClockConfig+0x25c>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0307 	and.w	r3, r3, #7
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	429a      	cmp	r2, r3
 8005652:	d005      	beq.n	8005660 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e040      	b.n	80056da <HAL_RCC_ClockConfig+0x2de>
 8005658:	40022000 	.word	0x40022000
 800565c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0304 	and.w	r3, r3, #4
 8005668:	2b00      	cmp	r3, #0
 800566a:	d008      	beq.n	800567e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800566c:	4b1d      	ldr	r3, [pc, #116]	; (80056e4 <HAL_RCC_ClockConfig+0x2e8>)
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	491a      	ldr	r1, [pc, #104]	; (80056e4 <HAL_RCC_ClockConfig+0x2e8>)
 800567a:	4313      	orrs	r3, r2
 800567c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0308 	and.w	r3, r3, #8
 8005686:	2b00      	cmp	r3, #0
 8005688:	d009      	beq.n	800569e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800568a:	4b16      	ldr	r3, [pc, #88]	; (80056e4 <HAL_RCC_ClockConfig+0x2e8>)
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	00db      	lsls	r3, r3, #3
 8005698:	4912      	ldr	r1, [pc, #72]	; (80056e4 <HAL_RCC_ClockConfig+0x2e8>)
 800569a:	4313      	orrs	r3, r2
 800569c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800569e:	f000 f829 	bl	80056f4 <HAL_RCC_GetSysClockFreq>
 80056a2:	4601      	mov	r1, r0
 80056a4:	4b0f      	ldr	r3, [pc, #60]	; (80056e4 <HAL_RCC_ClockConfig+0x2e8>)
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056ac:	22f0      	movs	r2, #240	; 0xf0
 80056ae:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	fa92 f2a2 	rbit	r2, r2
 80056b6:	60fa      	str	r2, [r7, #12]
  return result;
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	fab2 f282 	clz	r2, r2
 80056be:	b2d2      	uxtb	r2, r2
 80056c0:	40d3      	lsrs	r3, r2
 80056c2:	4a09      	ldr	r2, [pc, #36]	; (80056e8 <HAL_RCC_ClockConfig+0x2ec>)
 80056c4:	5cd3      	ldrb	r3, [r2, r3]
 80056c6:	fa21 f303 	lsr.w	r3, r1, r3
 80056ca:	4a08      	ldr	r2, [pc, #32]	; (80056ec <HAL_RCC_ClockConfig+0x2f0>)
 80056cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80056ce:	4b08      	ldr	r3, [pc, #32]	; (80056f0 <HAL_RCC_ClockConfig+0x2f4>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7fd f84e 	bl	8002774 <HAL_InitTick>
  
  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3778      	adds	r7, #120	; 0x78
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	40021000 	.word	0x40021000
 80056e8:	08007c98 	.word	0x08007c98
 80056ec:	20000010 	.word	0x20000010
 80056f0:	20000014 	.word	0x20000014

080056f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b08b      	sub	sp, #44	; 0x2c
 80056f8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80056fa:	2300      	movs	r3, #0
 80056fc:	61fb      	str	r3, [r7, #28]
 80056fe:	2300      	movs	r3, #0
 8005700:	61bb      	str	r3, [r7, #24]
 8005702:	2300      	movs	r3, #0
 8005704:	627b      	str	r3, [r7, #36]	; 0x24
 8005706:	2300      	movs	r3, #0
 8005708:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800570a:	2300      	movs	r3, #0
 800570c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800570e:	4b2a      	ldr	r3, [pc, #168]	; (80057b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	f003 030c 	and.w	r3, r3, #12
 800571a:	2b04      	cmp	r3, #4
 800571c:	d002      	beq.n	8005724 <HAL_RCC_GetSysClockFreq+0x30>
 800571e:	2b08      	cmp	r3, #8
 8005720:	d003      	beq.n	800572a <HAL_RCC_GetSysClockFreq+0x36>
 8005722:	e03f      	b.n	80057a4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005724:	4b25      	ldr	r3, [pc, #148]	; (80057bc <HAL_RCC_GetSysClockFreq+0xc8>)
 8005726:	623b      	str	r3, [r7, #32]
      break;
 8005728:	e03f      	b.n	80057aa <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005730:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005734:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	fa92 f2a2 	rbit	r2, r2
 800573c:	607a      	str	r2, [r7, #4]
  return result;
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	fab2 f282 	clz	r2, r2
 8005744:	b2d2      	uxtb	r2, r2
 8005746:	40d3      	lsrs	r3, r2
 8005748:	4a1d      	ldr	r2, [pc, #116]	; (80057c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800574a:	5cd3      	ldrb	r3, [r2, r3]
 800574c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800574e:	4b1a      	ldr	r3, [pc, #104]	; (80057b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005752:	f003 030f 	and.w	r3, r3, #15
 8005756:	220f      	movs	r2, #15
 8005758:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	fa92 f2a2 	rbit	r2, r2
 8005760:	60fa      	str	r2, [r7, #12]
  return result;
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	fab2 f282 	clz	r2, r2
 8005768:	b2d2      	uxtb	r2, r2
 800576a:	40d3      	lsrs	r3, r2
 800576c:	4a15      	ldr	r2, [pc, #84]	; (80057c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800576e:	5cd3      	ldrb	r3, [r2, r3]
 8005770:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d008      	beq.n	800578e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800577c:	4a0f      	ldr	r2, [pc, #60]	; (80057bc <HAL_RCC_GetSysClockFreq+0xc8>)
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	fbb2 f2f3 	udiv	r2, r2, r3
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	fb02 f303 	mul.w	r3, r2, r3
 800578a:	627b      	str	r3, [r7, #36]	; 0x24
 800578c:	e007      	b.n	800579e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800578e:	4a0b      	ldr	r2, [pc, #44]	; (80057bc <HAL_RCC_GetSysClockFreq+0xc8>)
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	fbb2 f2f3 	udiv	r2, r2, r3
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	fb02 f303 	mul.w	r3, r2, r3
 800579c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	623b      	str	r3, [r7, #32]
      break;
 80057a2:	e002      	b.n	80057aa <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80057a4:	4b05      	ldr	r3, [pc, #20]	; (80057bc <HAL_RCC_GetSysClockFreq+0xc8>)
 80057a6:	623b      	str	r3, [r7, #32]
      break;
 80057a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057aa:	6a3b      	ldr	r3, [r7, #32]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	372c      	adds	r7, #44	; 0x2c
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	40021000 	.word	0x40021000
 80057bc:	007a1200 	.word	0x007a1200
 80057c0:	08007cb0 	.word	0x08007cb0
 80057c4:	08007cc0 	.word	0x08007cc0

080057c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057c8:	b480      	push	{r7}
 80057ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057cc:	4b03      	ldr	r3, [pc, #12]	; (80057dc <HAL_RCC_GetHCLKFreq+0x14>)
 80057ce:	681b      	ldr	r3, [r3, #0]
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	20000010 	.word	0x20000010

080057e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80057e6:	f7ff ffef 	bl	80057c8 <HAL_RCC_GetHCLKFreq>
 80057ea:	4601      	mov	r1, r0
 80057ec:	4b0b      	ldr	r3, [pc, #44]	; (800581c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057f4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80057f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	fa92 f2a2 	rbit	r2, r2
 8005800:	603a      	str	r2, [r7, #0]
  return result;
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	fab2 f282 	clz	r2, r2
 8005808:	b2d2      	uxtb	r2, r2
 800580a:	40d3      	lsrs	r3, r2
 800580c:	4a04      	ldr	r2, [pc, #16]	; (8005820 <HAL_RCC_GetPCLK1Freq+0x40>)
 800580e:	5cd3      	ldrb	r3, [r2, r3]
 8005810:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005814:	4618      	mov	r0, r3
 8005816:	3708      	adds	r7, #8
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	40021000 	.word	0x40021000
 8005820:	08007ca8 	.word	0x08007ca8

08005824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800582a:	f7ff ffcd 	bl	80057c8 <HAL_RCC_GetHCLKFreq>
 800582e:	4601      	mov	r1, r0
 8005830:	4b0b      	ldr	r3, [pc, #44]	; (8005860 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005838:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800583c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	fa92 f2a2 	rbit	r2, r2
 8005844:	603a      	str	r2, [r7, #0]
  return result;
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	fab2 f282 	clz	r2, r2
 800584c:	b2d2      	uxtb	r2, r2
 800584e:	40d3      	lsrs	r3, r2
 8005850:	4a04      	ldr	r2, [pc, #16]	; (8005864 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005852:	5cd3      	ldrb	r3, [r2, r3]
 8005854:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005858:	4618      	mov	r0, r3
 800585a:	3708      	adds	r7, #8
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	40021000 	.word	0x40021000
 8005864:	08007ca8 	.word	0x08007ca8

08005868 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b092      	sub	sp, #72	; 0x48
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005870:	2300      	movs	r3, #0
 8005872:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005874:	2300      	movs	r3, #0
 8005876:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005878:	2300      	movs	r3, #0
 800587a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005886:	2b00      	cmp	r3, #0
 8005888:	f000 80d4 	beq.w	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800588c:	4b4e      	ldr	r3, [pc, #312]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800588e:	69db      	ldr	r3, [r3, #28]
 8005890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d10e      	bne.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005898:	4b4b      	ldr	r3, [pc, #300]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800589a:	69db      	ldr	r3, [r3, #28]
 800589c:	4a4a      	ldr	r2, [pc, #296]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800589e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058a2:	61d3      	str	r3, [r2, #28]
 80058a4:	4b48      	ldr	r3, [pc, #288]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058a6:	69db      	ldr	r3, [r3, #28]
 80058a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ac:	60bb      	str	r3, [r7, #8]
 80058ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058b0:	2301      	movs	r3, #1
 80058b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058b6:	4b45      	ldr	r3, [pc, #276]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d118      	bne.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058c2:	4b42      	ldr	r3, [pc, #264]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a41      	ldr	r2, [pc, #260]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058ce:	f7fc ff95 	bl	80027fc <HAL_GetTick>
 80058d2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058d4:	e008      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058d6:	f7fc ff91 	bl	80027fc <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	2b64      	cmp	r3, #100	; 0x64
 80058e2:	d901      	bls.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e1d6      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058e8:	4b38      	ldr	r3, [pc, #224]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d0f0      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058f4:	4b34      	ldr	r3, [pc, #208]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005900:	2b00      	cmp	r3, #0
 8005902:	f000 8084 	beq.w	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800590e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005910:	429a      	cmp	r2, r3
 8005912:	d07c      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005914:	4b2c      	ldr	r3, [pc, #176]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005916:	6a1b      	ldr	r3, [r3, #32]
 8005918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800591c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800591e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005922:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005926:	fa93 f3a3 	rbit	r3, r3
 800592a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800592c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800592e:	fab3 f383 	clz	r3, r3
 8005932:	b2db      	uxtb	r3, r3
 8005934:	461a      	mov	r2, r3
 8005936:	4b26      	ldr	r3, [pc, #152]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005938:	4413      	add	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	461a      	mov	r2, r3
 800593e:	2301      	movs	r3, #1
 8005940:	6013      	str	r3, [r2, #0]
 8005942:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005946:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594a:	fa93 f3a3 	rbit	r3, r3
 800594e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005952:	fab3 f383 	clz	r3, r3
 8005956:	b2db      	uxtb	r3, r3
 8005958:	461a      	mov	r2, r3
 800595a:	4b1d      	ldr	r3, [pc, #116]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800595c:	4413      	add	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	461a      	mov	r2, r3
 8005962:	2300      	movs	r3, #0
 8005964:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005966:	4a18      	ldr	r2, [pc, #96]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800596a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800596c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	d04b      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005976:	f7fc ff41 	bl	80027fc <HAL_GetTick>
 800597a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800597c:	e00a      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800597e:	f7fc ff3d 	bl	80027fc <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	f241 3288 	movw	r2, #5000	; 0x1388
 800598c:	4293      	cmp	r3, r2
 800598e:	d901      	bls.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e180      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005994:	2302      	movs	r3, #2
 8005996:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599a:	fa93 f3a3 	rbit	r3, r3
 800599e:	627b      	str	r3, [r7, #36]	; 0x24
 80059a0:	2302      	movs	r3, #2
 80059a2:	623b      	str	r3, [r7, #32]
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	fa93 f3a3 	rbit	r3, r3
 80059aa:	61fb      	str	r3, [r7, #28]
  return result;
 80059ac:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059ae:	fab3 f383 	clz	r3, r3
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	095b      	lsrs	r3, r3, #5
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	f043 0302 	orr.w	r3, r3, #2
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d108      	bne.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80059c2:	4b01      	ldr	r3, [pc, #4]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	e00d      	b.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80059c8:	40021000 	.word	0x40021000
 80059cc:	40007000 	.word	0x40007000
 80059d0:	10908100 	.word	0x10908100
 80059d4:	2302      	movs	r3, #2
 80059d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	fa93 f3a3 	rbit	r3, r3
 80059de:	617b      	str	r3, [r7, #20]
 80059e0:	4ba0      	ldr	r3, [pc, #640]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	2202      	movs	r2, #2
 80059e6:	613a      	str	r2, [r7, #16]
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	fa92 f2a2 	rbit	r2, r2
 80059ee:	60fa      	str	r2, [r7, #12]
  return result;
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	fab2 f282 	clz	r2, r2
 80059f6:	b2d2      	uxtb	r2, r2
 80059f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059fc:	b2d2      	uxtb	r2, r2
 80059fe:	f002 021f 	and.w	r2, r2, #31
 8005a02:	2101      	movs	r1, #1
 8005a04:	fa01 f202 	lsl.w	r2, r1, r2
 8005a08:	4013      	ands	r3, r2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d0b7      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005a0e:	4b95      	ldr	r3, [pc, #596]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	4992      	ldr	r1, [pc, #584]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005a20:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d105      	bne.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a28:	4b8e      	ldr	r3, [pc, #568]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005a2a:	69db      	ldr	r3, [r3, #28]
 8005a2c:	4a8d      	ldr	r2, [pc, #564]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005a2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a32:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0301 	and.w	r3, r3, #1
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d008      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a40:	4b88      	ldr	r3, [pc, #544]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a44:	f023 0203 	bic.w	r2, r3, #3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	4985      	ldr	r1, [pc, #532]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d008      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a5e:	4b81      	ldr	r3, [pc, #516]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	497e      	ldr	r1, [pc, #504]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0304 	and.w	r3, r3, #4
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d008      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a7c:	4b79      	ldr	r3, [pc, #484]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	4976      	ldr	r1, [pc, #472]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0320 	and.w	r3, r3, #32
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d008      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a9a:	4b72      	ldr	r3, [pc, #456]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9e:	f023 0210 	bic.w	r2, r3, #16
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	496f      	ldr	r1, [pc, #444]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d008      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005ab8:	4b6a      	ldr	r3, [pc, #424]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac4:	4967      	ldr	r1, [pc, #412]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d008      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ad6:	4b63      	ldr	r3, [pc, #396]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ada:	f023 0220 	bic.w	r2, r3, #32
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	4960      	ldr	r1, [pc, #384]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d008      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005af4:	4b5b      	ldr	r3, [pc, #364]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b00:	4958      	ldr	r1, [pc, #352]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0308 	and.w	r3, r3, #8
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d008      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b12:	4b54      	ldr	r3, [pc, #336]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	4951      	ldr	r1, [pc, #324]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0310 	and.w	r3, r3, #16
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d008      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b30:	4b4c      	ldr	r3, [pc, #304]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	4949      	ldr	r1, [pc, #292]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d008      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b4e:	4b45      	ldr	r3, [pc, #276]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5a:	4942      	ldr	r1, [pc, #264]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d008      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005b6c:	4b3d      	ldr	r3, [pc, #244]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b70:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b78:	493a      	ldr	r1, [pc, #232]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d008      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005b8a:	4b36      	ldr	r3, [pc, #216]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b96:	4933      	ldr	r1, [pc, #204]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d008      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005ba8:	4b2e      	ldr	r3, [pc, #184]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb4:	492b      	ldr	r1, [pc, #172]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d008      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005bc6:	4b27      	ldr	r3, [pc, #156]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bca:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd2:	4924      	ldr	r1, [pc, #144]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d008      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005be4:	4b1f      	ldr	r3, [pc, #124]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf0:	491c      	ldr	r1, [pc, #112]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d008      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005c02:	4b18      	ldr	r3, [pc, #96]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c06:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c0e:	4915      	ldr	r1, [pc, #84]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c10:	4313      	orrs	r3, r2
 8005c12:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d008      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005c20:	4b10      	ldr	r3, [pc, #64]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c24:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c2c:	490d      	ldr	r1, [pc, #52]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d008      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005c3e:	4b09      	ldr	r3, [pc, #36]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c42:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c4a:	4906      	ldr	r1, [pc, #24]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00c      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005c5c:	4b01      	ldr	r3, [pc, #4]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c60:	e002      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005c62:	bf00      	nop
 8005c64:	40021000 	.word	0x40021000
 8005c68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c70:	490b      	ldr	r1, [pc, #44]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d008      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8005c82:	4b07      	ldr	r3, [pc, #28]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c86:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c8e:	4904      	ldr	r1, [pc, #16]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005c90:	4313      	orrs	r3, r2
 8005c92:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3748      	adds	r7, #72	; 0x48
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	40021000 	.word	0x40021000

08005ca4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e049      	b.n	8005d4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d106      	bne.n	8005cd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f7fc f864 	bl	8001d98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	3304      	adds	r3, #4
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	4610      	mov	r0, r2
 8005ce4:	f000 fb14 	bl	8006310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3708      	adds	r7, #8
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
	...

08005d54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d001      	beq.n	8005d6c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e047      	b.n	8005dfc <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2202      	movs	r2, #2
 8005d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a23      	ldr	r2, [pc, #140]	; (8005e08 <HAL_TIM_Base_Start+0xb4>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d01d      	beq.n	8005dba <HAL_TIM_Base_Start+0x66>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d86:	d018      	beq.n	8005dba <HAL_TIM_Base_Start+0x66>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a1f      	ldr	r2, [pc, #124]	; (8005e0c <HAL_TIM_Base_Start+0xb8>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d013      	beq.n	8005dba <HAL_TIM_Base_Start+0x66>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a1e      	ldr	r2, [pc, #120]	; (8005e10 <HAL_TIM_Base_Start+0xbc>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d00e      	beq.n	8005dba <HAL_TIM_Base_Start+0x66>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a1c      	ldr	r2, [pc, #112]	; (8005e14 <HAL_TIM_Base_Start+0xc0>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d009      	beq.n	8005dba <HAL_TIM_Base_Start+0x66>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a1b      	ldr	r2, [pc, #108]	; (8005e18 <HAL_TIM_Base_Start+0xc4>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d004      	beq.n	8005dba <HAL_TIM_Base_Start+0x66>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a19      	ldr	r2, [pc, #100]	; (8005e1c <HAL_TIM_Base_Start+0xc8>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d115      	bne.n	8005de6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	689a      	ldr	r2, [r3, #8]
 8005dc0:	4b17      	ldr	r3, [pc, #92]	; (8005e20 <HAL_TIM_Base_Start+0xcc>)
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2b06      	cmp	r3, #6
 8005dca:	d015      	beq.n	8005df8 <HAL_TIM_Base_Start+0xa4>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dd2:	d011      	beq.n	8005df8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f042 0201 	orr.w	r2, r2, #1
 8005de2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005de4:	e008      	b.n	8005df8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f042 0201 	orr.w	r2, r2, #1
 8005df4:	601a      	str	r2, [r3, #0]
 8005df6:	e000      	b.n	8005dfa <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005df8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3714      	adds	r7, #20
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr
 8005e08:	40012c00 	.word	0x40012c00
 8005e0c:	40000400 	.word	0x40000400
 8005e10:	40000800 	.word	0x40000800
 8005e14:	40013400 	.word	0x40013400
 8005e18:	40014000 	.word	0x40014000
 8005e1c:	40015000 	.word	0x40015000
 8005e20:	00010007 	.word	0x00010007

08005e24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d001      	beq.n	8005e3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e04f      	b.n	8005edc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2202      	movs	r2, #2
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68da      	ldr	r2, [r3, #12]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f042 0201 	orr.w	r2, r2, #1
 8005e52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a23      	ldr	r2, [pc, #140]	; (8005ee8 <HAL_TIM_Base_Start_IT+0xc4>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d01d      	beq.n	8005e9a <HAL_TIM_Base_Start_IT+0x76>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e66:	d018      	beq.n	8005e9a <HAL_TIM_Base_Start_IT+0x76>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a1f      	ldr	r2, [pc, #124]	; (8005eec <HAL_TIM_Base_Start_IT+0xc8>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d013      	beq.n	8005e9a <HAL_TIM_Base_Start_IT+0x76>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a1e      	ldr	r2, [pc, #120]	; (8005ef0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d00e      	beq.n	8005e9a <HAL_TIM_Base_Start_IT+0x76>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a1c      	ldr	r2, [pc, #112]	; (8005ef4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d009      	beq.n	8005e9a <HAL_TIM_Base_Start_IT+0x76>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a1b      	ldr	r2, [pc, #108]	; (8005ef8 <HAL_TIM_Base_Start_IT+0xd4>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d004      	beq.n	8005e9a <HAL_TIM_Base_Start_IT+0x76>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a19      	ldr	r2, [pc, #100]	; (8005efc <HAL_TIM_Base_Start_IT+0xd8>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d115      	bne.n	8005ec6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	4b17      	ldr	r3, [pc, #92]	; (8005f00 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2b06      	cmp	r3, #6
 8005eaa:	d015      	beq.n	8005ed8 <HAL_TIM_Base_Start_IT+0xb4>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eb2:	d011      	beq.n	8005ed8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f042 0201 	orr.w	r2, r2, #1
 8005ec2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ec4:	e008      	b.n	8005ed8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f042 0201 	orr.w	r2, r2, #1
 8005ed4:	601a      	str	r2, [r3, #0]
 8005ed6:	e000      	b.n	8005eda <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ed8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3714      	adds	r7, #20
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	40012c00 	.word	0x40012c00
 8005eec:	40000400 	.word	0x40000400
 8005ef0:	40000800 	.word	0x40000800
 8005ef4:	40013400 	.word	0x40013400
 8005ef8:	40014000 	.word	0x40014000
 8005efc:	40015000 	.word	0x40015000
 8005f00:	00010007 	.word	0x00010007

08005f04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d122      	bne.n	8005f60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	f003 0302 	and.w	r3, r3, #2
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d11b      	bne.n	8005f60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f06f 0202 	mvn.w	r2, #2
 8005f30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	f003 0303 	and.w	r3, r3, #3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f9c3 	bl	80062d2 <HAL_TIM_IC_CaptureCallback>
 8005f4c:	e005      	b.n	8005f5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f9b5 	bl	80062be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f9c6 	bl	80062e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	f003 0304 	and.w	r3, r3, #4
 8005f6a:	2b04      	cmp	r3, #4
 8005f6c:	d122      	bne.n	8005fb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	f003 0304 	and.w	r3, r3, #4
 8005f78:	2b04      	cmp	r3, #4
 8005f7a:	d11b      	bne.n	8005fb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f06f 0204 	mvn.w	r2, #4
 8005f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2202      	movs	r2, #2
 8005f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f999 	bl	80062d2 <HAL_TIM_IC_CaptureCallback>
 8005fa0:	e005      	b.n	8005fae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f98b 	bl	80062be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f99c 	bl	80062e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	f003 0308 	and.w	r3, r3, #8
 8005fbe:	2b08      	cmp	r3, #8
 8005fc0:	d122      	bne.n	8006008 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	f003 0308 	and.w	r3, r3, #8
 8005fcc:	2b08      	cmp	r3, #8
 8005fce:	d11b      	bne.n	8006008 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f06f 0208 	mvn.w	r2, #8
 8005fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2204      	movs	r2, #4
 8005fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	f003 0303 	and.w	r3, r3, #3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f96f 	bl	80062d2 <HAL_TIM_IC_CaptureCallback>
 8005ff4:	e005      	b.n	8006002 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f961 	bl	80062be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 f972 	bl	80062e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	f003 0310 	and.w	r3, r3, #16
 8006012:	2b10      	cmp	r3, #16
 8006014:	d122      	bne.n	800605c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	f003 0310 	and.w	r3, r3, #16
 8006020:	2b10      	cmp	r3, #16
 8006022:	d11b      	bne.n	800605c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f06f 0210 	mvn.w	r2, #16
 800602c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2208      	movs	r2, #8
 8006032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800603e:	2b00      	cmp	r3, #0
 8006040:	d003      	beq.n	800604a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f945 	bl	80062d2 <HAL_TIM_IC_CaptureCallback>
 8006048:	e005      	b.n	8006056 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 f937 	bl	80062be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 f948 	bl	80062e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	2b01      	cmp	r3, #1
 8006068:	d10e      	bne.n	8006088 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b01      	cmp	r3, #1
 8006076:	d107      	bne.n	8006088 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f06f 0201 	mvn.w	r2, #1
 8006080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7fb fd62 	bl	8001b4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006092:	2b80      	cmp	r3, #128	; 0x80
 8006094:	d10e      	bne.n	80060b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a0:	2b80      	cmp	r3, #128	; 0x80
 80060a2:	d107      	bne.n	80060b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fafc 	bl	80066ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060c2:	d10e      	bne.n	80060e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ce:	2b80      	cmp	r3, #128	; 0x80
 80060d0:	d107      	bne.n	80060e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80060da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 faef 	bl	80066c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ec:	2b40      	cmp	r3, #64	; 0x40
 80060ee:	d10e      	bne.n	800610e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060fa:	2b40      	cmp	r3, #64	; 0x40
 80060fc:	d107      	bne.n	800610e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 f8f6 	bl	80062fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	f003 0320 	and.w	r3, r3, #32
 8006118:	2b20      	cmp	r3, #32
 800611a:	d10e      	bne.n	800613a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	f003 0320 	and.w	r3, r3, #32
 8006126:	2b20      	cmp	r3, #32
 8006128:	d107      	bne.n	800613a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f06f 0220 	mvn.w	r2, #32
 8006132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 faaf 	bl	8006698 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800613a:	bf00      	nop
 800613c:	3708      	adds	r7, #8
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b084      	sub	sp, #16
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
 800614a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800614c:	2300      	movs	r3, #0
 800614e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006156:	2b01      	cmp	r3, #1
 8006158:	d101      	bne.n	800615e <HAL_TIM_ConfigClockSource+0x1c>
 800615a:	2302      	movs	r3, #2
 800615c:	e0ab      	b.n	80062b6 <HAL_TIM_ConfigClockSource+0x174>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2202      	movs	r2, #2
 800616a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800617c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006180:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006188:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2b40      	cmp	r3, #64	; 0x40
 8006198:	d067      	beq.n	800626a <HAL_TIM_ConfigClockSource+0x128>
 800619a:	2b40      	cmp	r3, #64	; 0x40
 800619c:	d80b      	bhi.n	80061b6 <HAL_TIM_ConfigClockSource+0x74>
 800619e:	2b10      	cmp	r3, #16
 80061a0:	d073      	beq.n	800628a <HAL_TIM_ConfigClockSource+0x148>
 80061a2:	2b10      	cmp	r3, #16
 80061a4:	d802      	bhi.n	80061ac <HAL_TIM_ConfigClockSource+0x6a>
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d06f      	beq.n	800628a <HAL_TIM_ConfigClockSource+0x148>
 80061aa:	e077      	b.n	800629c <HAL_TIM_ConfigClockSource+0x15a>
 80061ac:	2b20      	cmp	r3, #32
 80061ae:	d06c      	beq.n	800628a <HAL_TIM_ConfigClockSource+0x148>
 80061b0:	2b30      	cmp	r3, #48	; 0x30
 80061b2:	d06a      	beq.n	800628a <HAL_TIM_ConfigClockSource+0x148>
 80061b4:	e072      	b.n	800629c <HAL_TIM_ConfigClockSource+0x15a>
 80061b6:	2b70      	cmp	r3, #112	; 0x70
 80061b8:	d00d      	beq.n	80061d6 <HAL_TIM_ConfigClockSource+0x94>
 80061ba:	2b70      	cmp	r3, #112	; 0x70
 80061bc:	d804      	bhi.n	80061c8 <HAL_TIM_ConfigClockSource+0x86>
 80061be:	2b50      	cmp	r3, #80	; 0x50
 80061c0:	d033      	beq.n	800622a <HAL_TIM_ConfigClockSource+0xe8>
 80061c2:	2b60      	cmp	r3, #96	; 0x60
 80061c4:	d041      	beq.n	800624a <HAL_TIM_ConfigClockSource+0x108>
 80061c6:	e069      	b.n	800629c <HAL_TIM_ConfigClockSource+0x15a>
 80061c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061cc:	d069      	beq.n	80062a2 <HAL_TIM_ConfigClockSource+0x160>
 80061ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061d2:	d017      	beq.n	8006204 <HAL_TIM_ConfigClockSource+0xc2>
 80061d4:	e062      	b.n	800629c <HAL_TIM_ConfigClockSource+0x15a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6818      	ldr	r0, [r3, #0]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	6899      	ldr	r1, [r3, #8]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	f000 f9ab 	bl	8006540 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80061f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	609a      	str	r2, [r3, #8]
      break;
 8006202:	e04f      	b.n	80062a4 <HAL_TIM_ConfigClockSource+0x162>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6818      	ldr	r0, [r3, #0]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	6899      	ldr	r1, [r3, #8]
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	f000 f994 	bl	8006540 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	689a      	ldr	r2, [r3, #8]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006226:	609a      	str	r2, [r3, #8]
      break;
 8006228:	e03c      	b.n	80062a4 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6818      	ldr	r0, [r3, #0]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	6859      	ldr	r1, [r3, #4]
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	461a      	mov	r2, r3
 8006238:	f000 f908 	bl	800644c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2150      	movs	r1, #80	; 0x50
 8006242:	4618      	mov	r0, r3
 8006244:	f000 f961 	bl	800650a <TIM_ITRx_SetConfig>
      break;
 8006248:	e02c      	b.n	80062a4 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6818      	ldr	r0, [r3, #0]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	6859      	ldr	r1, [r3, #4]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	461a      	mov	r2, r3
 8006258:	f000 f927 	bl	80064aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2160      	movs	r1, #96	; 0x60
 8006262:	4618      	mov	r0, r3
 8006264:	f000 f951 	bl	800650a <TIM_ITRx_SetConfig>
      break;
 8006268:	e01c      	b.n	80062a4 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6818      	ldr	r0, [r3, #0]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	6859      	ldr	r1, [r3, #4]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	461a      	mov	r2, r3
 8006278:	f000 f8e8 	bl	800644c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2140      	movs	r1, #64	; 0x40
 8006282:	4618      	mov	r0, r3
 8006284:	f000 f941 	bl	800650a <TIM_ITRx_SetConfig>
      break;
 8006288:	e00c      	b.n	80062a4 <HAL_TIM_ConfigClockSource+0x162>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4619      	mov	r1, r3
 8006294:	4610      	mov	r0, r2
 8006296:	f000 f938 	bl	800650a <TIM_ITRx_SetConfig>
      break;
 800629a:	e003      	b.n	80062a4 <HAL_TIM_ConfigClockSource+0x162>
    }

    default:
      status = HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	73fb      	strb	r3, [r7, #15]
      break;
 80062a0:	e000      	b.n	80062a4 <HAL_TIM_ConfigClockSource+0x162>
      break;
 80062a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062be:	b480      	push	{r7}
 80062c0:	b083      	sub	sp, #12
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062c6:	bf00      	nop
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062d2:	b480      	push	{r7}
 80062d4:	b083      	sub	sp, #12
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062da:	bf00      	nop
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr

080062e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b083      	sub	sp, #12
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062ee:	bf00      	nop
 80062f0:	370c      	adds	r7, #12
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b083      	sub	sp, #12
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006302:	bf00      	nop
 8006304:	370c      	adds	r7, #12
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
	...

08006310 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a42      	ldr	r2, [pc, #264]	; (800642c <TIM_Base_SetConfig+0x11c>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d013      	beq.n	8006350 <TIM_Base_SetConfig+0x40>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800632e:	d00f      	beq.n	8006350 <TIM_Base_SetConfig+0x40>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a3f      	ldr	r2, [pc, #252]	; (8006430 <TIM_Base_SetConfig+0x120>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d00b      	beq.n	8006350 <TIM_Base_SetConfig+0x40>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a3e      	ldr	r2, [pc, #248]	; (8006434 <TIM_Base_SetConfig+0x124>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d007      	beq.n	8006350 <TIM_Base_SetConfig+0x40>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a3d      	ldr	r2, [pc, #244]	; (8006438 <TIM_Base_SetConfig+0x128>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d003      	beq.n	8006350 <TIM_Base_SetConfig+0x40>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a3c      	ldr	r2, [pc, #240]	; (800643c <TIM_Base_SetConfig+0x12c>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d108      	bne.n	8006362 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006356:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	4313      	orrs	r3, r2
 8006360:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a31      	ldr	r2, [pc, #196]	; (800642c <TIM_Base_SetConfig+0x11c>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d01f      	beq.n	80063aa <TIM_Base_SetConfig+0x9a>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006370:	d01b      	beq.n	80063aa <TIM_Base_SetConfig+0x9a>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a2e      	ldr	r2, [pc, #184]	; (8006430 <TIM_Base_SetConfig+0x120>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d017      	beq.n	80063aa <TIM_Base_SetConfig+0x9a>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a2d      	ldr	r2, [pc, #180]	; (8006434 <TIM_Base_SetConfig+0x124>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d013      	beq.n	80063aa <TIM_Base_SetConfig+0x9a>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a2c      	ldr	r2, [pc, #176]	; (8006438 <TIM_Base_SetConfig+0x128>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d00f      	beq.n	80063aa <TIM_Base_SetConfig+0x9a>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a2c      	ldr	r2, [pc, #176]	; (8006440 <TIM_Base_SetConfig+0x130>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d00b      	beq.n	80063aa <TIM_Base_SetConfig+0x9a>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a2b      	ldr	r2, [pc, #172]	; (8006444 <TIM_Base_SetConfig+0x134>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d007      	beq.n	80063aa <TIM_Base_SetConfig+0x9a>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a2a      	ldr	r2, [pc, #168]	; (8006448 <TIM_Base_SetConfig+0x138>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d003      	beq.n	80063aa <TIM_Base_SetConfig+0x9a>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a25      	ldr	r2, [pc, #148]	; (800643c <TIM_Base_SetConfig+0x12c>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d108      	bne.n	80063bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	689a      	ldr	r2, [r3, #8]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a12      	ldr	r2, [pc, #72]	; (800642c <TIM_Base_SetConfig+0x11c>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d013      	beq.n	8006410 <TIM_Base_SetConfig+0x100>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a13      	ldr	r2, [pc, #76]	; (8006438 <TIM_Base_SetConfig+0x128>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d00f      	beq.n	8006410 <TIM_Base_SetConfig+0x100>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a13      	ldr	r2, [pc, #76]	; (8006440 <TIM_Base_SetConfig+0x130>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d00b      	beq.n	8006410 <TIM_Base_SetConfig+0x100>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a12      	ldr	r2, [pc, #72]	; (8006444 <TIM_Base_SetConfig+0x134>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d007      	beq.n	8006410 <TIM_Base_SetConfig+0x100>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a11      	ldr	r2, [pc, #68]	; (8006448 <TIM_Base_SetConfig+0x138>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d003      	beq.n	8006410 <TIM_Base_SetConfig+0x100>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a0c      	ldr	r2, [pc, #48]	; (800643c <TIM_Base_SetConfig+0x12c>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d103      	bne.n	8006418 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	691a      	ldr	r2, [r3, #16]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	615a      	str	r2, [r3, #20]
}
 800641e:	bf00      	nop
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	40012c00 	.word	0x40012c00
 8006430:	40000400 	.word	0x40000400
 8006434:	40000800 	.word	0x40000800
 8006438:	40013400 	.word	0x40013400
 800643c:	40015000 	.word	0x40015000
 8006440:	40014000 	.word	0x40014000
 8006444:	40014400 	.word	0x40014400
 8006448:	40014800 	.word	0x40014800

0800644c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800644c:	b480      	push	{r7}
 800644e:	b087      	sub	sp, #28
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6a1b      	ldr	r3, [r3, #32]
 800645c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6a1b      	ldr	r3, [r3, #32]
 8006462:	f023 0201 	bic.w	r2, r3, #1
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006476:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	011b      	lsls	r3, r3, #4
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	4313      	orrs	r3, r2
 8006480:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	f023 030a 	bic.w	r3, r3, #10
 8006488:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	4313      	orrs	r3, r2
 8006490:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	697a      	ldr	r2, [r7, #20]
 800649c:	621a      	str	r2, [r3, #32]
}
 800649e:	bf00      	nop
 80064a0:	371c      	adds	r7, #28
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr

080064aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064aa:	b480      	push	{r7}
 80064ac:	b087      	sub	sp, #28
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	60f8      	str	r0, [r7, #12]
 80064b2:	60b9      	str	r1, [r7, #8]
 80064b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	f023 0210 	bic.w	r2, r3, #16
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6a1b      	ldr	r3, [r3, #32]
 80064cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	031b      	lsls	r3, r3, #12
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	4313      	orrs	r3, r2
 80064de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80064e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	011b      	lsls	r3, r3, #4
 80064ec:	693a      	ldr	r2, [r7, #16]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	621a      	str	r2, [r3, #32]
}
 80064fe:	bf00      	nop
 8006500:	371c      	adds	r7, #28
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800650a:	b480      	push	{r7}
 800650c:	b085      	sub	sp, #20
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
 8006512:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006520:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006522:	683a      	ldr	r2, [r7, #0]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	4313      	orrs	r3, r2
 8006528:	f043 0307 	orr.w	r3, r3, #7
 800652c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	609a      	str	r2, [r3, #8]
}
 8006534:	bf00      	nop
 8006536:	3714      	adds	r7, #20
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006540:	b480      	push	{r7}
 8006542:	b087      	sub	sp, #28
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	607a      	str	r2, [r7, #4]
 800654c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800655a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	021a      	lsls	r2, r3, #8
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	431a      	orrs	r2, r3
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	4313      	orrs	r3, r2
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	4313      	orrs	r3, r2
 800656c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	609a      	str	r2, [r3, #8]
}
 8006574:	bf00      	nop
 8006576:	371c      	adds	r7, #28
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006590:	2b01      	cmp	r3, #1
 8006592:	d101      	bne.n	8006598 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006594:	2302      	movs	r3, #2
 8006596:	e06d      	b.n	8006674 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2202      	movs	r2, #2
 80065a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a30      	ldr	r2, [pc, #192]	; (8006680 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d009      	beq.n	80065d6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a2f      	ldr	r2, [pc, #188]	; (8006684 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d004      	beq.n	80065d6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a2d      	ldr	r2, [pc, #180]	; (8006688 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d108      	bne.n	80065e8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80065dc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a1e      	ldr	r2, [pc, #120]	; (8006680 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d01d      	beq.n	8006648 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006614:	d018      	beq.n	8006648 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a1c      	ldr	r2, [pc, #112]	; (800668c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d013      	beq.n	8006648 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a1a      	ldr	r2, [pc, #104]	; (8006690 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d00e      	beq.n	8006648 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a15      	ldr	r2, [pc, #84]	; (8006684 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d009      	beq.n	8006648 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a16      	ldr	r2, [pc, #88]	; (8006694 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d004      	beq.n	8006648 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a11      	ldr	r2, [pc, #68]	; (8006688 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d10c      	bne.n	8006662 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800664e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	4313      	orrs	r3, r2
 8006658:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2201      	movs	r2, #1
 8006666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3714      	adds	r7, #20
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr
 8006680:	40012c00 	.word	0x40012c00
 8006684:	40013400 	.word	0x40013400
 8006688:	40015000 	.word	0x40015000
 800668c:	40000400 	.word	0x40000400
 8006690:	40000800 	.word	0x40000800
 8006694:	40014000 	.word	0x40014000

08006698 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e040      	b.n	8006768 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d106      	bne.n	80066fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f7fb fbc6 	bl	8001e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2224      	movs	r2, #36	; 0x24
 8006700:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f022 0201 	bic.w	r2, r2, #1
 8006710:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 fc0e 	bl	8006f34 <UART_SetConfig>
 8006718:	4603      	mov	r3, r0
 800671a:	2b01      	cmp	r3, #1
 800671c:	d101      	bne.n	8006722 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e022      	b.n	8006768 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006726:	2b00      	cmp	r3, #0
 8006728:	d002      	beq.n	8006730 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fdd6 	bl	80072dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	685a      	ldr	r2, [r3, #4]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800673e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	689a      	ldr	r2, [r3, #8]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800674e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f042 0201 	orr.w	r2, r2, #1
 800675e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 fe5d 	bl	8007420 <UART_CheckIdleState>
 8006766:	4603      	mov	r3, r0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3708      	adds	r7, #8
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b08a      	sub	sp, #40	; 0x28
 8006774:	af02      	add	r7, sp, #8
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	603b      	str	r3, [r7, #0]
 800677c:	4613      	mov	r3, r2
 800677e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006784:	2b20      	cmp	r3, #32
 8006786:	f040 8082 	bne.w	800688e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d002      	beq.n	8006796 <HAL_UART_Transmit+0x26>
 8006790:	88fb      	ldrh	r3, [r7, #6]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d101      	bne.n	800679a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e07a      	b.n	8006890 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d101      	bne.n	80067a8 <HAL_UART_Transmit+0x38>
 80067a4:	2302      	movs	r3, #2
 80067a6:	e073      	b.n	8006890 <HAL_UART_Transmit+0x120>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2221      	movs	r2, #33	; 0x21
 80067bc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067be:	f7fc f81d 	bl	80027fc <HAL_GetTick>
 80067c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	88fa      	ldrh	r2, [r7, #6]
 80067c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	88fa      	ldrh	r2, [r7, #6]
 80067d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067dc:	d108      	bne.n	80067f0 <HAL_UART_Transmit+0x80>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d104      	bne.n	80067f0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80067e6:	2300      	movs	r3, #0
 80067e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	61bb      	str	r3, [r7, #24]
 80067ee:	e003      	b.n	80067f8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067f4:	2300      	movs	r3, #0
 80067f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006800:	e02d      	b.n	800685e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	2200      	movs	r2, #0
 800680a:	2180      	movs	r1, #128	; 0x80
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	f000 fe50 	bl	80074b2 <UART_WaitOnFlagUntilTimeout>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d001      	beq.n	800681c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	e039      	b.n	8006890 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10b      	bne.n	800683a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	881a      	ldrh	r2, [r3, #0]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800682e:	b292      	uxth	r2, r2
 8006830:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	3302      	adds	r3, #2
 8006836:	61bb      	str	r3, [r7, #24]
 8006838:	e008      	b.n	800684c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	781a      	ldrb	r2, [r3, #0]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	b292      	uxth	r2, r2
 8006844:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	3301      	adds	r3, #1
 800684a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006852:	b29b      	uxth	r3, r3
 8006854:	3b01      	subs	r3, #1
 8006856:	b29a      	uxth	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006864:	b29b      	uxth	r3, r3
 8006866:	2b00      	cmp	r3, #0
 8006868:	d1cb      	bne.n	8006802 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	2200      	movs	r2, #0
 8006872:	2140      	movs	r1, #64	; 0x40
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f000 fe1c 	bl	80074b2 <UART_WaitOnFlagUntilTimeout>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d001      	beq.n	8006884 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e005      	b.n	8006890 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2220      	movs	r2, #32
 8006888:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800688a:	2300      	movs	r3, #0
 800688c:	e000      	b.n	8006890 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800688e:	2302      	movs	r3, #2
  }
}
 8006890:	4618      	mov	r0, r3
 8006892:	3720      	adds	r7, #32
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b08a      	sub	sp, #40	; 0x28
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	4613      	mov	r3, r2
 80068a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068aa:	2b20      	cmp	r3, #32
 80068ac:	d13d      	bne.n	800692a <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d002      	beq.n	80068ba <HAL_UART_Receive_IT+0x22>
 80068b4:	88fb      	ldrh	r3, [r7, #6]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d101      	bne.n	80068be <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e036      	b.n	800692c <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d101      	bne.n	80068cc <HAL_UART_Receive_IT+0x34>
 80068c8:	2302      	movs	r3, #2
 80068ca:	e02f      	b.n	800692c <HAL_UART_Receive_IT+0x94>
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d018      	beq.n	800691a <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	e853 3f00 	ldrex	r3, [r3]
 80068f4:	613b      	str	r3, [r7, #16]
   return(result);
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80068fc:	627b      	str	r3, [r7, #36]	; 0x24
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	461a      	mov	r2, r3
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	623b      	str	r3, [r7, #32]
 8006908:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690a:	69f9      	ldr	r1, [r7, #28]
 800690c:	6a3a      	ldr	r2, [r7, #32]
 800690e:	e841 2300 	strex	r3, r2, [r1]
 8006912:	61bb      	str	r3, [r7, #24]
   return(result);
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1e6      	bne.n	80068e8 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800691a:	88fb      	ldrh	r3, [r7, #6]
 800691c:	461a      	mov	r2, r3
 800691e:	68b9      	ldr	r1, [r7, #8]
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f000 fe8b 	bl	800763c <UART_Start_Receive_IT>
 8006926:	4603      	mov	r3, r0
 8006928:	e000      	b.n	800692c <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800692a:	2302      	movs	r3, #2
  }
}
 800692c:	4618      	mov	r0, r3
 800692e:	3728      	adds	r7, #40	; 0x28
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b0ba      	sub	sp, #232	; 0xe8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	69db      	ldr	r3, [r3, #28]
 8006942:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800695a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800695e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006962:	4013      	ands	r3, r2
 8006964:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006968:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800696c:	2b00      	cmp	r3, #0
 800696e:	d115      	bne.n	800699c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006974:	f003 0320 	and.w	r3, r3, #32
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00f      	beq.n	800699c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800697c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006980:	f003 0320 	and.w	r3, r3, #32
 8006984:	2b00      	cmp	r3, #0
 8006986:	d009      	beq.n	800699c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800698c:	2b00      	cmp	r3, #0
 800698e:	f000 82a4 	beq.w	8006eda <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	4798      	blx	r3
      }
      return;
 800699a:	e29e      	b.n	8006eda <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800699c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f000 8117 	beq.w	8006bd4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80069a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d106      	bne.n	80069c0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80069b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80069b6:	4b85      	ldr	r3, [pc, #532]	; (8006bcc <HAL_UART_IRQHandler+0x298>)
 80069b8:	4013      	ands	r3, r2
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 810a 	beq.w	8006bd4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80069c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069c4:	f003 0301 	and.w	r3, r3, #1
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d011      	beq.n	80069f0 <HAL_UART_IRQHandler+0xbc>
 80069cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00b      	beq.n	80069f0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2201      	movs	r2, #1
 80069de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069e6:	f043 0201 	orr.w	r2, r3, #1
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069f4:	f003 0302 	and.w	r3, r3, #2
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d011      	beq.n	8006a20 <HAL_UART_IRQHandler+0xec>
 80069fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a00:	f003 0301 	and.w	r3, r3, #1
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00b      	beq.n	8006a20 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2202      	movs	r2, #2
 8006a0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a16:	f043 0204 	orr.w	r2, r3, #4
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a24:	f003 0304 	and.w	r3, r3, #4
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d011      	beq.n	8006a50 <HAL_UART_IRQHandler+0x11c>
 8006a2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a30:	f003 0301 	and.w	r3, r3, #1
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00b      	beq.n	8006a50 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2204      	movs	r2, #4
 8006a3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a46:	f043 0202 	orr.w	r2, r3, #2
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a54:	f003 0308 	and.w	r3, r3, #8
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d017      	beq.n	8006a8c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a60:	f003 0320 	and.w	r3, r3, #32
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d105      	bne.n	8006a74 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006a68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a6c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00b      	beq.n	8006a8c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2208      	movs	r2, #8
 8006a7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a82:	f043 0208 	orr.w	r2, r3, #8
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d012      	beq.n	8006abe <HAL_UART_IRQHandler+0x18a>
 8006a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00c      	beq.n	8006abe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006aac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ab4:	f043 0220 	orr.w	r2, r3, #32
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f000 820a 	beq.w	8006ede <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ace:	f003 0320 	and.w	r3, r3, #32
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00d      	beq.n	8006af2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006ad6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ada:	f003 0320 	and.w	r3, r3, #32
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d007      	beq.n	8006af2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d003      	beq.n	8006af2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006af8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b06:	2b40      	cmp	r3, #64	; 0x40
 8006b08:	d005      	beq.n	8006b16 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006b0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d04f      	beq.n	8006bb6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 fe3c 	bl	8007794 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b26:	2b40      	cmp	r3, #64	; 0x40
 8006b28:	d141      	bne.n	8006bae <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3308      	adds	r3, #8
 8006b30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b38:	e853 3f00 	ldrex	r3, [r3]
 8006b3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006b40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	3308      	adds	r3, #8
 8006b52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006b56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006b5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006b62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006b66:	e841 2300 	strex	r3, r2, [r1]
 8006b6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006b6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1d9      	bne.n	8006b2a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d013      	beq.n	8006ba6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b82:	4a13      	ldr	r2, [pc, #76]	; (8006bd0 <HAL_UART_IRQHandler+0x29c>)
 8006b84:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7fd fa16 	bl	8003fbc <HAL_DMA_Abort_IT>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d017      	beq.n	8006bc6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006ba0:	4610      	mov	r0, r2
 8006ba2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ba4:	e00f      	b.n	8006bc6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f9ae 	bl	8006f08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bac:	e00b      	b.n	8006bc6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 f9aa 	bl	8006f08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bb4:	e007      	b.n	8006bc6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f9a6 	bl	8006f08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006bc4:	e18b      	b.n	8006ede <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bc6:	bf00      	nop
    return;
 8006bc8:	e189      	b.n	8006ede <HAL_UART_IRQHandler+0x5aa>
 8006bca:	bf00      	nop
 8006bcc:	04000120 	.word	0x04000120
 8006bd0:	0800785b 	.word	0x0800785b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	f040 8143 	bne.w	8006e64 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006be2:	f003 0310 	and.w	r3, r3, #16
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f000 813c 	beq.w	8006e64 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bf0:	f003 0310 	and.w	r3, r3, #16
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f000 8135 	beq.w	8006e64 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2210      	movs	r2, #16
 8006c00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c0c:	2b40      	cmp	r3, #64	; 0x40
 8006c0e:	f040 80b1 	bne.w	8006d74 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c1e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f000 815d 	beq.w	8006ee2 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006c2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c32:	429a      	cmp	r2, r3
 8006c34:	f080 8155 	bcs.w	8006ee2 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c3e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c46:	699b      	ldr	r3, [r3, #24]
 8006c48:	2b20      	cmp	r3, #32
 8006c4a:	f000 8085 	beq.w	8006d58 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c5a:	e853 3f00 	ldrex	r3, [r3]
 8006c5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006c62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	461a      	mov	r2, r3
 8006c74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006c7c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c80:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006c84:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c88:	e841 2300 	strex	r3, r2, [r1]
 8006c8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006c90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1da      	bne.n	8006c4e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	3308      	adds	r3, #8
 8006c9e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ca2:	e853 3f00 	ldrex	r3, [r3]
 8006ca6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006ca8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006caa:	f023 0301 	bic.w	r3, r3, #1
 8006cae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	3308      	adds	r3, #8
 8006cb8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006cbc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006cc0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006cc4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006cc8:	e841 2300 	strex	r3, r2, [r1]
 8006ccc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006cce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1e1      	bne.n	8006c98 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	3308      	adds	r3, #8
 8006cda:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cde:	e853 3f00 	ldrex	r3, [r3]
 8006ce2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006ce4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ce6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	3308      	adds	r3, #8
 8006cf4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006cf8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006cfa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006cfe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d00:	e841 2300 	strex	r3, r2, [r1]
 8006d04:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006d06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1e3      	bne.n	8006cd4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2220      	movs	r2, #32
 8006d10:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d20:	e853 3f00 	ldrex	r3, [r3]
 8006d24:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d28:	f023 0310 	bic.w	r3, r3, #16
 8006d2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	461a      	mov	r2, r3
 8006d36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d3c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d42:	e841 2300 	strex	r3, r2, [r1]
 8006d46:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1e4      	bne.n	8006d18 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7fd f8f9 	bl	8003f4a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f8d5 	bl	8006f1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d72:	e0b6      	b.n	8006ee2 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	1ad3      	subs	r3, r2, r3
 8006d84:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f000 80a8 	beq.w	8006ee6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8006d96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f000 80a3 	beq.w	8006ee6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da8:	e853 3f00 	ldrex	r3, [r3]
 8006dac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006db4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006dc2:	647b      	str	r3, [r7, #68]	; 0x44
 8006dc4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006dc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006dca:	e841 2300 	strex	r3, r2, [r1]
 8006dce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1e4      	bne.n	8006da0 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	3308      	adds	r3, #8
 8006ddc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de0:	e853 3f00 	ldrex	r3, [r3]
 8006de4:	623b      	str	r3, [r7, #32]
   return(result);
 8006de6:	6a3b      	ldr	r3, [r7, #32]
 8006de8:	f023 0301 	bic.w	r3, r3, #1
 8006dec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	3308      	adds	r3, #8
 8006df6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006dfa:	633a      	str	r2, [r7, #48]	; 0x30
 8006dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e02:	e841 2300 	strex	r3, r2, [r1]
 8006e06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1e3      	bne.n	8006dd6 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2220      	movs	r2, #32
 8006e12:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	e853 3f00 	ldrex	r3, [r3]
 8006e2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f023 0310 	bic.w	r3, r3, #16
 8006e34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006e42:	61fb      	str	r3, [r7, #28]
 8006e44:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e46:	69b9      	ldr	r1, [r7, #24]
 8006e48:	69fa      	ldr	r2, [r7, #28]
 8006e4a:	e841 2300 	strex	r3, r2, [r1]
 8006e4e:	617b      	str	r3, [r7, #20]
   return(result);
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1e4      	bne.n	8006e20 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 f85d 	bl	8006f1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e62:	e040      	b.n	8006ee6 <HAL_UART_IRQHandler+0x5b2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d00e      	beq.n	8006e8e <HAL_UART_IRQHandler+0x55a>
 8006e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d008      	beq.n	8006e8e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006e84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 fe83 	bl	8007b92 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e8c:	e02e      	b.n	8006eec <HAL_UART_IRQHandler+0x5b8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00e      	beq.n	8006eb8 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d008      	beq.n	8006eb8 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d01d      	beq.n	8006eea <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	4798      	blx	r3
    }
    return;
 8006eb6:	e018      	b.n	8006eea <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d013      	beq.n	8006eec <HAL_UART_IRQHandler+0x5b8>
 8006ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00d      	beq.n	8006eec <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 fcd8 	bl	8007886 <UART_EndTransmit_IT>
    return;
 8006ed6:	bf00      	nop
 8006ed8:	e008      	b.n	8006eec <HAL_UART_IRQHandler+0x5b8>
      return;
 8006eda:	bf00      	nop
 8006edc:	e006      	b.n	8006eec <HAL_UART_IRQHandler+0x5b8>
    return;
 8006ede:	bf00      	nop
 8006ee0:	e004      	b.n	8006eec <HAL_UART_IRQHandler+0x5b8>
      return;
 8006ee2:	bf00      	nop
 8006ee4:	e002      	b.n	8006eec <HAL_UART_IRQHandler+0x5b8>
      return;
 8006ee6:	bf00      	nop
 8006ee8:	e000      	b.n	8006eec <HAL_UART_IRQHandler+0x5b8>
    return;
 8006eea:	bf00      	nop
  }

}
 8006eec:	37e8      	adds	r7, #232	; 0xe8
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop

08006ef4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006efc:	bf00      	nop
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f10:	bf00      	nop
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	460b      	mov	r3, r1
 8006f26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b088      	sub	sp, #32
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	689a      	ldr	r2, [r3, #8]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	431a      	orrs	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	695b      	ldr	r3, [r3, #20]
 8006f4e:	431a      	orrs	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	69db      	ldr	r3, [r3, #28]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	4baa      	ldr	r3, [pc, #680]	; (8007208 <UART_SetConfig+0x2d4>)
 8006f60:	4013      	ands	r3, r2
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	6812      	ldr	r2, [r2, #0]
 8006f66:	6979      	ldr	r1, [r7, #20]
 8006f68:	430b      	orrs	r3, r1
 8006f6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	68da      	ldr	r2, [r3, #12]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	430a      	orrs	r2, r1
 8006f80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a1b      	ldr	r3, [r3, #32]
 8006f8c:	697a      	ldr	r2, [r7, #20]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	697a      	ldr	r2, [r7, #20]
 8006fa2:	430a      	orrs	r2, r1
 8006fa4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a98      	ldr	r2, [pc, #608]	; (800720c <UART_SetConfig+0x2d8>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d121      	bne.n	8006ff4 <UART_SetConfig+0xc0>
 8006fb0:	4b97      	ldr	r3, [pc, #604]	; (8007210 <UART_SetConfig+0x2dc>)
 8006fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb4:	f003 0303 	and.w	r3, r3, #3
 8006fb8:	2b03      	cmp	r3, #3
 8006fba:	d817      	bhi.n	8006fec <UART_SetConfig+0xb8>
 8006fbc:	a201      	add	r2, pc, #4	; (adr r2, 8006fc4 <UART_SetConfig+0x90>)
 8006fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc2:	bf00      	nop
 8006fc4:	08006fd5 	.word	0x08006fd5
 8006fc8:	08006fe1 	.word	0x08006fe1
 8006fcc:	08006fe7 	.word	0x08006fe7
 8006fd0:	08006fdb 	.word	0x08006fdb
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	77fb      	strb	r3, [r7, #31]
 8006fd8:	e0b2      	b.n	8007140 <UART_SetConfig+0x20c>
 8006fda:	2302      	movs	r3, #2
 8006fdc:	77fb      	strb	r3, [r7, #31]
 8006fde:	e0af      	b.n	8007140 <UART_SetConfig+0x20c>
 8006fe0:	2304      	movs	r3, #4
 8006fe2:	77fb      	strb	r3, [r7, #31]
 8006fe4:	e0ac      	b.n	8007140 <UART_SetConfig+0x20c>
 8006fe6:	2308      	movs	r3, #8
 8006fe8:	77fb      	strb	r3, [r7, #31]
 8006fea:	e0a9      	b.n	8007140 <UART_SetConfig+0x20c>
 8006fec:	2310      	movs	r3, #16
 8006fee:	77fb      	strb	r3, [r7, #31]
 8006ff0:	bf00      	nop
 8006ff2:	e0a5      	b.n	8007140 <UART_SetConfig+0x20c>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a86      	ldr	r2, [pc, #536]	; (8007214 <UART_SetConfig+0x2e0>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d123      	bne.n	8007046 <UART_SetConfig+0x112>
 8006ffe:	4b84      	ldr	r3, [pc, #528]	; (8007210 <UART_SetConfig+0x2dc>)
 8007000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007002:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800700a:	d012      	beq.n	8007032 <UART_SetConfig+0xfe>
 800700c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007010:	d802      	bhi.n	8007018 <UART_SetConfig+0xe4>
 8007012:	2b00      	cmp	r3, #0
 8007014:	d007      	beq.n	8007026 <UART_SetConfig+0xf2>
 8007016:	e012      	b.n	800703e <UART_SetConfig+0x10a>
 8007018:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800701c:	d00c      	beq.n	8007038 <UART_SetConfig+0x104>
 800701e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007022:	d003      	beq.n	800702c <UART_SetConfig+0xf8>
 8007024:	e00b      	b.n	800703e <UART_SetConfig+0x10a>
 8007026:	2300      	movs	r3, #0
 8007028:	77fb      	strb	r3, [r7, #31]
 800702a:	e089      	b.n	8007140 <UART_SetConfig+0x20c>
 800702c:	2302      	movs	r3, #2
 800702e:	77fb      	strb	r3, [r7, #31]
 8007030:	e086      	b.n	8007140 <UART_SetConfig+0x20c>
 8007032:	2304      	movs	r3, #4
 8007034:	77fb      	strb	r3, [r7, #31]
 8007036:	e083      	b.n	8007140 <UART_SetConfig+0x20c>
 8007038:	2308      	movs	r3, #8
 800703a:	77fb      	strb	r3, [r7, #31]
 800703c:	e080      	b.n	8007140 <UART_SetConfig+0x20c>
 800703e:	2310      	movs	r3, #16
 8007040:	77fb      	strb	r3, [r7, #31]
 8007042:	bf00      	nop
 8007044:	e07c      	b.n	8007140 <UART_SetConfig+0x20c>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a73      	ldr	r2, [pc, #460]	; (8007218 <UART_SetConfig+0x2e4>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d123      	bne.n	8007098 <UART_SetConfig+0x164>
 8007050:	4b6f      	ldr	r3, [pc, #444]	; (8007210 <UART_SetConfig+0x2dc>)
 8007052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007054:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007058:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800705c:	d012      	beq.n	8007084 <UART_SetConfig+0x150>
 800705e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007062:	d802      	bhi.n	800706a <UART_SetConfig+0x136>
 8007064:	2b00      	cmp	r3, #0
 8007066:	d007      	beq.n	8007078 <UART_SetConfig+0x144>
 8007068:	e012      	b.n	8007090 <UART_SetConfig+0x15c>
 800706a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800706e:	d00c      	beq.n	800708a <UART_SetConfig+0x156>
 8007070:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007074:	d003      	beq.n	800707e <UART_SetConfig+0x14a>
 8007076:	e00b      	b.n	8007090 <UART_SetConfig+0x15c>
 8007078:	2300      	movs	r3, #0
 800707a:	77fb      	strb	r3, [r7, #31]
 800707c:	e060      	b.n	8007140 <UART_SetConfig+0x20c>
 800707e:	2302      	movs	r3, #2
 8007080:	77fb      	strb	r3, [r7, #31]
 8007082:	e05d      	b.n	8007140 <UART_SetConfig+0x20c>
 8007084:	2304      	movs	r3, #4
 8007086:	77fb      	strb	r3, [r7, #31]
 8007088:	e05a      	b.n	8007140 <UART_SetConfig+0x20c>
 800708a:	2308      	movs	r3, #8
 800708c:	77fb      	strb	r3, [r7, #31]
 800708e:	e057      	b.n	8007140 <UART_SetConfig+0x20c>
 8007090:	2310      	movs	r3, #16
 8007092:	77fb      	strb	r3, [r7, #31]
 8007094:	bf00      	nop
 8007096:	e053      	b.n	8007140 <UART_SetConfig+0x20c>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a5f      	ldr	r2, [pc, #380]	; (800721c <UART_SetConfig+0x2e8>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d123      	bne.n	80070ea <UART_SetConfig+0x1b6>
 80070a2:	4b5b      	ldr	r3, [pc, #364]	; (8007210 <UART_SetConfig+0x2dc>)
 80070a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80070aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070ae:	d012      	beq.n	80070d6 <UART_SetConfig+0x1a2>
 80070b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070b4:	d802      	bhi.n	80070bc <UART_SetConfig+0x188>
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d007      	beq.n	80070ca <UART_SetConfig+0x196>
 80070ba:	e012      	b.n	80070e2 <UART_SetConfig+0x1ae>
 80070bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070c0:	d00c      	beq.n	80070dc <UART_SetConfig+0x1a8>
 80070c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80070c6:	d003      	beq.n	80070d0 <UART_SetConfig+0x19c>
 80070c8:	e00b      	b.n	80070e2 <UART_SetConfig+0x1ae>
 80070ca:	2300      	movs	r3, #0
 80070cc:	77fb      	strb	r3, [r7, #31]
 80070ce:	e037      	b.n	8007140 <UART_SetConfig+0x20c>
 80070d0:	2302      	movs	r3, #2
 80070d2:	77fb      	strb	r3, [r7, #31]
 80070d4:	e034      	b.n	8007140 <UART_SetConfig+0x20c>
 80070d6:	2304      	movs	r3, #4
 80070d8:	77fb      	strb	r3, [r7, #31]
 80070da:	e031      	b.n	8007140 <UART_SetConfig+0x20c>
 80070dc:	2308      	movs	r3, #8
 80070de:	77fb      	strb	r3, [r7, #31]
 80070e0:	e02e      	b.n	8007140 <UART_SetConfig+0x20c>
 80070e2:	2310      	movs	r3, #16
 80070e4:	77fb      	strb	r3, [r7, #31]
 80070e6:	bf00      	nop
 80070e8:	e02a      	b.n	8007140 <UART_SetConfig+0x20c>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a4c      	ldr	r2, [pc, #304]	; (8007220 <UART_SetConfig+0x2ec>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d123      	bne.n	800713c <UART_SetConfig+0x208>
 80070f4:	4b46      	ldr	r3, [pc, #280]	; (8007210 <UART_SetConfig+0x2dc>)
 80070f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80070fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007100:	d012      	beq.n	8007128 <UART_SetConfig+0x1f4>
 8007102:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007106:	d802      	bhi.n	800710e <UART_SetConfig+0x1da>
 8007108:	2b00      	cmp	r3, #0
 800710a:	d007      	beq.n	800711c <UART_SetConfig+0x1e8>
 800710c:	e012      	b.n	8007134 <UART_SetConfig+0x200>
 800710e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007112:	d00c      	beq.n	800712e <UART_SetConfig+0x1fa>
 8007114:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007118:	d003      	beq.n	8007122 <UART_SetConfig+0x1ee>
 800711a:	e00b      	b.n	8007134 <UART_SetConfig+0x200>
 800711c:	2300      	movs	r3, #0
 800711e:	77fb      	strb	r3, [r7, #31]
 8007120:	e00e      	b.n	8007140 <UART_SetConfig+0x20c>
 8007122:	2302      	movs	r3, #2
 8007124:	77fb      	strb	r3, [r7, #31]
 8007126:	e00b      	b.n	8007140 <UART_SetConfig+0x20c>
 8007128:	2304      	movs	r3, #4
 800712a:	77fb      	strb	r3, [r7, #31]
 800712c:	e008      	b.n	8007140 <UART_SetConfig+0x20c>
 800712e:	2308      	movs	r3, #8
 8007130:	77fb      	strb	r3, [r7, #31]
 8007132:	e005      	b.n	8007140 <UART_SetConfig+0x20c>
 8007134:	2310      	movs	r3, #16
 8007136:	77fb      	strb	r3, [r7, #31]
 8007138:	bf00      	nop
 800713a:	e001      	b.n	8007140 <UART_SetConfig+0x20c>
 800713c:	2310      	movs	r3, #16
 800713e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	69db      	ldr	r3, [r3, #28]
 8007144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007148:	d16e      	bne.n	8007228 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800714a:	7ffb      	ldrb	r3, [r7, #31]
 800714c:	2b08      	cmp	r3, #8
 800714e:	d828      	bhi.n	80071a2 <UART_SetConfig+0x26e>
 8007150:	a201      	add	r2, pc, #4	; (adr r2, 8007158 <UART_SetConfig+0x224>)
 8007152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007156:	bf00      	nop
 8007158:	0800717d 	.word	0x0800717d
 800715c:	08007185 	.word	0x08007185
 8007160:	0800718d 	.word	0x0800718d
 8007164:	080071a3 	.word	0x080071a3
 8007168:	08007193 	.word	0x08007193
 800716c:	080071a3 	.word	0x080071a3
 8007170:	080071a3 	.word	0x080071a3
 8007174:	080071a3 	.word	0x080071a3
 8007178:	0800719b 	.word	0x0800719b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800717c:	f7fe fb30 	bl	80057e0 <HAL_RCC_GetPCLK1Freq>
 8007180:	61b8      	str	r0, [r7, #24]
        break;
 8007182:	e013      	b.n	80071ac <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007184:	f7fe fb4e 	bl	8005824 <HAL_RCC_GetPCLK2Freq>
 8007188:	61b8      	str	r0, [r7, #24]
        break;
 800718a:	e00f      	b.n	80071ac <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800718c:	4b25      	ldr	r3, [pc, #148]	; (8007224 <UART_SetConfig+0x2f0>)
 800718e:	61bb      	str	r3, [r7, #24]
        break;
 8007190:	e00c      	b.n	80071ac <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007192:	f7fe faaf 	bl	80056f4 <HAL_RCC_GetSysClockFreq>
 8007196:	61b8      	str	r0, [r7, #24]
        break;
 8007198:	e008      	b.n	80071ac <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800719a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800719e:	61bb      	str	r3, [r7, #24]
        break;
 80071a0:	e004      	b.n	80071ac <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 80071a2:	2300      	movs	r3, #0
 80071a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	77bb      	strb	r3, [r7, #30]
        break;
 80071aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	f000 8086 	beq.w	80072c0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	005a      	lsls	r2, r3, #1
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	085b      	lsrs	r3, r3, #1
 80071be:	441a      	add	r2, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	2b0f      	cmp	r3, #15
 80071d0:	d916      	bls.n	8007200 <UART_SetConfig+0x2cc>
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071d8:	d212      	bcs.n	8007200 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	b29b      	uxth	r3, r3
 80071de:	f023 030f 	bic.w	r3, r3, #15
 80071e2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	085b      	lsrs	r3, r3, #1
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	f003 0307 	and.w	r3, r3, #7
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	89fb      	ldrh	r3, [r7, #14]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	89fa      	ldrh	r2, [r7, #14]
 80071fc:	60da      	str	r2, [r3, #12]
 80071fe:	e05f      	b.n	80072c0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	77bb      	strb	r3, [r7, #30]
 8007204:	e05c      	b.n	80072c0 <UART_SetConfig+0x38c>
 8007206:	bf00      	nop
 8007208:	efff69f3 	.word	0xefff69f3
 800720c:	40013800 	.word	0x40013800
 8007210:	40021000 	.word	0x40021000
 8007214:	40004400 	.word	0x40004400
 8007218:	40004800 	.word	0x40004800
 800721c:	40004c00 	.word	0x40004c00
 8007220:	40005000 	.word	0x40005000
 8007224:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8007228:	7ffb      	ldrb	r3, [r7, #31]
 800722a:	2b08      	cmp	r3, #8
 800722c:	d827      	bhi.n	800727e <UART_SetConfig+0x34a>
 800722e:	a201      	add	r2, pc, #4	; (adr r2, 8007234 <UART_SetConfig+0x300>)
 8007230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007234:	08007259 	.word	0x08007259
 8007238:	08007261 	.word	0x08007261
 800723c:	08007269 	.word	0x08007269
 8007240:	0800727f 	.word	0x0800727f
 8007244:	0800726f 	.word	0x0800726f
 8007248:	0800727f 	.word	0x0800727f
 800724c:	0800727f 	.word	0x0800727f
 8007250:	0800727f 	.word	0x0800727f
 8007254:	08007277 	.word	0x08007277
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007258:	f7fe fac2 	bl	80057e0 <HAL_RCC_GetPCLK1Freq>
 800725c:	61b8      	str	r0, [r7, #24]
        break;
 800725e:	e013      	b.n	8007288 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007260:	f7fe fae0 	bl	8005824 <HAL_RCC_GetPCLK2Freq>
 8007264:	61b8      	str	r0, [r7, #24]
        break;
 8007266:	e00f      	b.n	8007288 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007268:	4b1b      	ldr	r3, [pc, #108]	; (80072d8 <UART_SetConfig+0x3a4>)
 800726a:	61bb      	str	r3, [r7, #24]
        break;
 800726c:	e00c      	b.n	8007288 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800726e:	f7fe fa41 	bl	80056f4 <HAL_RCC_GetSysClockFreq>
 8007272:	61b8      	str	r0, [r7, #24]
        break;
 8007274:	e008      	b.n	8007288 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800727a:	61bb      	str	r3, [r7, #24]
        break;
 800727c:	e004      	b.n	8007288 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800727e:	2300      	movs	r3, #0
 8007280:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	77bb      	strb	r3, [r7, #30]
        break;
 8007286:	bf00      	nop
    }

    if (pclk != 0U)
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d018      	beq.n	80072c0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	085a      	lsrs	r2, r3, #1
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	441a      	add	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	fbb2 f3f3 	udiv	r3, r2, r3
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	2b0f      	cmp	r3, #15
 80072a8:	d908      	bls.n	80072bc <UART_SetConfig+0x388>
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072b0:	d204      	bcs.n	80072bc <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	693a      	ldr	r2, [r7, #16]
 80072b8:	60da      	str	r2, [r3, #12]
 80072ba:	e001      	b.n	80072c0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80072cc:	7fbb      	ldrb	r3, [r7, #30]
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3720      	adds	r7, #32
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	007a1200 	.word	0x007a1200

080072dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e8:	f003 0301 	and.w	r3, r3, #1
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00a      	beq.n	8007306 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	430a      	orrs	r2, r1
 8007304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730a:	f003 0302 	and.w	r3, r3, #2
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00a      	beq.n	8007328 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	430a      	orrs	r2, r1
 8007326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732c:	f003 0304 	and.w	r3, r3, #4
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00a      	beq.n	800734a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	430a      	orrs	r2, r1
 8007348:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734e:	f003 0308 	and.w	r3, r3, #8
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00a      	beq.n	800736c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	430a      	orrs	r2, r1
 800736a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007370:	f003 0310 	and.w	r3, r3, #16
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00a      	beq.n	800738e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	430a      	orrs	r2, r1
 800738c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007392:	f003 0320 	and.w	r3, r3, #32
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00a      	beq.n	80073b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	430a      	orrs	r2, r1
 80073ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d01a      	beq.n	80073f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	430a      	orrs	r2, r1
 80073d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073da:	d10a      	bne.n	80073f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	430a      	orrs	r2, r1
 80073f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00a      	beq.n	8007414 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	430a      	orrs	r2, r1
 8007412:	605a      	str	r2, [r3, #4]
  }
}
 8007414:	bf00      	nop
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af02      	add	r7, sp, #8
 8007426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007430:	f7fb f9e4 	bl	80027fc <HAL_GetTick>
 8007434:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 0308 	and.w	r3, r3, #8
 8007440:	2b08      	cmp	r3, #8
 8007442:	d10e      	bne.n	8007462 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007444:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007448:	9300      	str	r3, [sp, #0]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f82d 	bl	80074b2 <UART_WaitOnFlagUntilTimeout>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d001      	beq.n	8007462 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e023      	b.n	80074aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0304 	and.w	r3, r3, #4
 800746c:	2b04      	cmp	r3, #4
 800746e:	d10e      	bne.n	800748e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007470:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007474:	9300      	str	r3, [sp, #0]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f817 	bl	80074b2 <UART_WaitOnFlagUntilTimeout>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d001      	beq.n	800748e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e00d      	b.n	80074aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2220      	movs	r2, #32
 8007492:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2220      	movs	r2, #32
 8007498:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b09c      	sub	sp, #112	; 0x70
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	60f8      	str	r0, [r7, #12]
 80074ba:	60b9      	str	r1, [r7, #8]
 80074bc:	603b      	str	r3, [r7, #0]
 80074be:	4613      	mov	r3, r2
 80074c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074c2:	e0a5      	b.n	8007610 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ca:	f000 80a1 	beq.w	8007610 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074ce:	f7fb f995 	bl	80027fc <HAL_GetTick>
 80074d2:	4602      	mov	r2, r0
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80074da:	429a      	cmp	r2, r3
 80074dc:	d302      	bcc.n	80074e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80074de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d13e      	bne.n	8007562 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074ec:	e853 3f00 	ldrex	r3, [r3]
 80074f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80074f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80074f8:	667b      	str	r3, [r7, #100]	; 0x64
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	461a      	mov	r2, r3
 8007500:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007502:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007504:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007506:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007508:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800750a:	e841 2300 	strex	r3, r2, [r1]
 800750e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1e6      	bne.n	80074e4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	3308      	adds	r3, #8
 800751c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007520:	e853 3f00 	ldrex	r3, [r3]
 8007524:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007528:	f023 0301 	bic.w	r3, r3, #1
 800752c:	663b      	str	r3, [r7, #96]	; 0x60
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	3308      	adds	r3, #8
 8007534:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007536:	64ba      	str	r2, [r7, #72]	; 0x48
 8007538:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800753c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800753e:	e841 2300 	strex	r3, r2, [r1]
 8007542:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007546:	2b00      	cmp	r3, #0
 8007548:	d1e5      	bne.n	8007516 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2220      	movs	r2, #32
 800754e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2220      	movs	r2, #32
 8007554:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e067      	b.n	8007632 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 0304 	and.w	r3, r3, #4
 800756c:	2b00      	cmp	r3, #0
 800756e:	d04f      	beq.n	8007610 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	69db      	ldr	r3, [r3, #28]
 8007576:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800757a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800757e:	d147      	bne.n	8007610 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007588:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007592:	e853 3f00 	ldrex	r3, [r3]
 8007596:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800759e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	461a      	mov	r2, r3
 80075a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075a8:	637b      	str	r3, [r7, #52]	; 0x34
 80075aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80075ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075b0:	e841 2300 	strex	r3, r2, [r1]
 80075b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80075b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1e6      	bne.n	800758a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	3308      	adds	r3, #8
 80075c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	e853 3f00 	ldrex	r3, [r3]
 80075ca:	613b      	str	r3, [r7, #16]
   return(result);
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	f023 0301 	bic.w	r3, r3, #1
 80075d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	3308      	adds	r3, #8
 80075da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80075dc:	623a      	str	r2, [r7, #32]
 80075de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e0:	69f9      	ldr	r1, [r7, #28]
 80075e2:	6a3a      	ldr	r2, [r7, #32]
 80075e4:	e841 2300 	strex	r3, r2, [r1]
 80075e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1e5      	bne.n	80075bc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2220      	movs	r2, #32
 80075f4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2220      	movs	r2, #32
 80075fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2220      	movs	r2, #32
 8007600:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2200      	movs	r2, #0
 8007608:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800760c:	2303      	movs	r3, #3
 800760e:	e010      	b.n	8007632 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	69da      	ldr	r2, [r3, #28]
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	4013      	ands	r3, r2
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	429a      	cmp	r2, r3
 800761e:	bf0c      	ite	eq
 8007620:	2301      	moveq	r3, #1
 8007622:	2300      	movne	r3, #0
 8007624:	b2db      	uxtb	r3, r3
 8007626:	461a      	mov	r2, r3
 8007628:	79fb      	ldrb	r3, [r7, #7]
 800762a:	429a      	cmp	r2, r3
 800762c:	f43f af4a 	beq.w	80074c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	3770      	adds	r7, #112	; 0x70
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
	...

0800763c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800763c:	b480      	push	{r7}
 800763e:	b091      	sub	sp, #68	; 0x44
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	4613      	mov	r3, r2
 8007648:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	68ba      	ldr	r2, [r7, #8]
 800764e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	88fa      	ldrh	r2, [r7, #6]
 8007654:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	88fa      	ldrh	r2, [r7, #6]
 800765c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2200      	movs	r2, #0
 8007664:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800766e:	d10e      	bne.n	800768e <UART_Start_Receive_IT+0x52>
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d105      	bne.n	8007684 <UART_Start_Receive_IT+0x48>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800767e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007682:	e02d      	b.n	80076e0 <UART_Start_Receive_IT+0xa4>
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	22ff      	movs	r2, #255	; 0xff
 8007688:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800768c:	e028      	b.n	80076e0 <UART_Start_Receive_IT+0xa4>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d10d      	bne.n	80076b2 <UART_Start_Receive_IT+0x76>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d104      	bne.n	80076a8 <UART_Start_Receive_IT+0x6c>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	22ff      	movs	r2, #255	; 0xff
 80076a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076a6:	e01b      	b.n	80076e0 <UART_Start_Receive_IT+0xa4>
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	227f      	movs	r2, #127	; 0x7f
 80076ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076b0:	e016      	b.n	80076e0 <UART_Start_Receive_IT+0xa4>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076ba:	d10d      	bne.n	80076d8 <UART_Start_Receive_IT+0x9c>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d104      	bne.n	80076ce <UART_Start_Receive_IT+0x92>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	227f      	movs	r2, #127	; 0x7f
 80076c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076cc:	e008      	b.n	80076e0 <UART_Start_Receive_IT+0xa4>
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	223f      	movs	r2, #63	; 0x3f
 80076d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076d6:	e003      	b.n	80076e0 <UART_Start_Receive_IT+0xa4>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2200      	movs	r2, #0
 80076dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2222      	movs	r2, #34	; 0x22
 80076ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	3308      	adds	r3, #8
 80076f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f8:	e853 3f00 	ldrex	r3, [r3]
 80076fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007700:	f043 0301 	orr.w	r3, r3, #1
 8007704:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	3308      	adds	r3, #8
 800770c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800770e:	637a      	str	r2, [r7, #52]	; 0x34
 8007710:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007712:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007714:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007716:	e841 2300 	strex	r3, r2, [r1]
 800771a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800771c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1e5      	bne.n	80076ee <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800772a:	d107      	bne.n	800773c <UART_Start_Receive_IT+0x100>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	691b      	ldr	r3, [r3, #16]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d103      	bne.n	800773c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	4a15      	ldr	r2, [pc, #84]	; (800778c <UART_Start_Receive_IT+0x150>)
 8007738:	665a      	str	r2, [r3, #100]	; 0x64
 800773a:	e002      	b.n	8007742 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	4a14      	ldr	r2, [pc, #80]	; (8007790 <UART_Start_Receive_IT+0x154>)
 8007740:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2200      	movs	r2, #0
 8007746:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	e853 3f00 	ldrex	r3, [r3]
 8007756:	613b      	str	r3, [r7, #16]
   return(result);
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800775e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	461a      	mov	r2, r3
 8007766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007768:	623b      	str	r3, [r7, #32]
 800776a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800776c:	69f9      	ldr	r1, [r7, #28]
 800776e:	6a3a      	ldr	r2, [r7, #32]
 8007770:	e841 2300 	strex	r3, r2, [r1]
 8007774:	61bb      	str	r3, [r7, #24]
   return(result);
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1e6      	bne.n	800774a <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3744      	adds	r7, #68	; 0x44
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	08007a37 	.word	0x08007a37
 8007790:	080078db 	.word	0x080078db

08007794 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007794:	b480      	push	{r7}
 8007796:	b095      	sub	sp, #84	; 0x54
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a4:	e853 3f00 	ldrex	r3, [r3]
 80077a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	461a      	mov	r2, r3
 80077b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077ba:	643b      	str	r3, [r7, #64]	; 0x40
 80077bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077c2:	e841 2300 	strex	r3, r2, [r1]
 80077c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d1e6      	bne.n	800779c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	3308      	adds	r3, #8
 80077d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d6:	6a3b      	ldr	r3, [r7, #32]
 80077d8:	e853 3f00 	ldrex	r3, [r3]
 80077dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	f023 0301 	bic.w	r3, r3, #1
 80077e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	3308      	adds	r3, #8
 80077ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077f6:	e841 2300 	strex	r3, r2, [r1]
 80077fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1e5      	bne.n	80077ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007806:	2b01      	cmp	r3, #1
 8007808:	d118      	bne.n	800783c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	e853 3f00 	ldrex	r3, [r3]
 8007816:	60bb      	str	r3, [r7, #8]
   return(result);
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	f023 0310 	bic.w	r3, r3, #16
 800781e:	647b      	str	r3, [r7, #68]	; 0x44
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	461a      	mov	r2, r3
 8007826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007828:	61bb      	str	r3, [r7, #24]
 800782a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782c:	6979      	ldr	r1, [r7, #20]
 800782e:	69ba      	ldr	r2, [r7, #24]
 8007830:	e841 2300 	strex	r3, r2, [r1]
 8007834:	613b      	str	r3, [r7, #16]
   return(result);
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1e6      	bne.n	800780a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2220      	movs	r2, #32
 8007840:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800784e:	bf00      	nop
 8007850:	3754      	adds	r7, #84	; 0x54
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr

0800785a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b084      	sub	sp, #16
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007866:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2200      	movs	r2, #0
 800786c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	f7ff fb45 	bl	8006f08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800787e:	bf00      	nop
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b088      	sub	sp, #32
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	e853 3f00 	ldrex	r3, [r3]
 800789a:	60bb      	str	r3, [r7, #8]
   return(result);
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078a2:	61fb      	str	r3, [r7, #28]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	461a      	mov	r2, r3
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	61bb      	str	r3, [r7, #24]
 80078ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b0:	6979      	ldr	r1, [r7, #20]
 80078b2:	69ba      	ldr	r2, [r7, #24]
 80078b4:	e841 2300 	strex	r3, r2, [r1]
 80078b8:	613b      	str	r3, [r7, #16]
   return(result);
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1e6      	bne.n	800788e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2220      	movs	r2, #32
 80078c4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f7ff fb11 	bl	8006ef4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078d2:	bf00      	nop
 80078d4:	3720      	adds	r7, #32
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b096      	sub	sp, #88	; 0x58
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80078e8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078f0:	2b22      	cmp	r3, #34	; 0x22
 80078f2:	f040 8094 	bne.w	8007a1e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80078fc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007900:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007904:	b2d9      	uxtb	r1, r3
 8007906:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800790a:	b2da      	uxtb	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007910:	400a      	ands	r2, r1
 8007912:	b2d2      	uxtb	r2, r2
 8007914:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800791a:	1c5a      	adds	r2, r3, #1
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007926:	b29b      	uxth	r3, r3
 8007928:	3b01      	subs	r3, #1
 800792a:	b29a      	uxth	r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007938:	b29b      	uxth	r3, r3
 800793a:	2b00      	cmp	r3, #0
 800793c:	d177      	bne.n	8007a2e <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007946:	e853 3f00 	ldrex	r3, [r3]
 800794a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800794c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800794e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007952:	653b      	str	r3, [r7, #80]	; 0x50
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	461a      	mov	r2, r3
 800795a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800795c:	647b      	str	r3, [r7, #68]	; 0x44
 800795e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007960:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007962:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007964:	e841 2300 	strex	r3, r2, [r1]
 8007968:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800796a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800796c:	2b00      	cmp	r3, #0
 800796e:	d1e6      	bne.n	800793e <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	3308      	adds	r3, #8
 8007976:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797a:	e853 3f00 	ldrex	r3, [r3]
 800797e:	623b      	str	r3, [r7, #32]
   return(result);
 8007980:	6a3b      	ldr	r3, [r7, #32]
 8007982:	f023 0301 	bic.w	r3, r3, #1
 8007986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	3308      	adds	r3, #8
 800798e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007990:	633a      	str	r2, [r7, #48]	; 0x30
 8007992:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007994:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007998:	e841 2300 	strex	r3, r2, [r1]
 800799c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800799e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d1e5      	bne.n	8007970 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2220      	movs	r2, #32
 80079a8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d12e      	bne.n	8007a16 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	e853 3f00 	ldrex	r3, [r3]
 80079ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f023 0310 	bic.w	r3, r3, #16
 80079d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	461a      	mov	r2, r3
 80079da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079dc:	61fb      	str	r3, [r7, #28]
 80079de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e0:	69b9      	ldr	r1, [r7, #24]
 80079e2:	69fa      	ldr	r2, [r7, #28]
 80079e4:	e841 2300 	strex	r3, r2, [r1]
 80079e8:	617b      	str	r3, [r7, #20]
   return(result);
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1e6      	bne.n	80079be <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	69db      	ldr	r3, [r3, #28]
 80079f6:	f003 0310 	and.w	r3, r3, #16
 80079fa:	2b10      	cmp	r3, #16
 80079fc:	d103      	bne.n	8007a06 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2210      	movs	r2, #16
 8007a04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f7ff fa84 	bl	8006f1c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a14:	e00b      	b.n	8007a2e <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f7f9 fb5a 	bl	80010d0 <HAL_UART_RxCpltCallback>
}
 8007a1c:	e007      	b.n	8007a2e <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	699a      	ldr	r2, [r3, #24]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f042 0208 	orr.w	r2, r2, #8
 8007a2c:	619a      	str	r2, [r3, #24]
}
 8007a2e:	bf00      	nop
 8007a30:	3758      	adds	r7, #88	; 0x58
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b096      	sub	sp, #88	; 0x58
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a44:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a4c:	2b22      	cmp	r3, #34	; 0x22
 8007a4e:	f040 8094 	bne.w	8007b7a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007a58:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a60:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007a62:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007a66:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a70:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a76:	1c9a      	adds	r2, r3, #2
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	3b01      	subs	r3, #1
 8007a86:	b29a      	uxth	r2, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d177      	bne.n	8007b8a <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aa2:	e853 3f00 	ldrex	r3, [r3]
 8007aa6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aaa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007aae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ab8:	643b      	str	r3, [r7, #64]	; 0x40
 8007aba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007abc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007abe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ac0:	e841 2300 	strex	r3, r2, [r1]
 8007ac4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1e6      	bne.n	8007a9a <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	3308      	adds	r3, #8
 8007ad2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad4:	6a3b      	ldr	r3, [r7, #32]
 8007ad6:	e853 3f00 	ldrex	r3, [r3]
 8007ada:	61fb      	str	r3, [r7, #28]
   return(result);
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	f023 0301 	bic.w	r3, r3, #1
 8007ae2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	3308      	adds	r3, #8
 8007aea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007aec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007aee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007af2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007af4:	e841 2300 	strex	r3, r2, [r1]
 8007af8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d1e5      	bne.n	8007acc <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2220      	movs	r2, #32
 8007b04:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d12e      	bne.n	8007b72 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	e853 3f00 	ldrex	r3, [r3]
 8007b26:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	f023 0310 	bic.w	r3, r3, #16
 8007b2e:	647b      	str	r3, [r7, #68]	; 0x44
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	461a      	mov	r2, r3
 8007b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b38:	61bb      	str	r3, [r7, #24]
 8007b3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3c:	6979      	ldr	r1, [r7, #20]
 8007b3e:	69ba      	ldr	r2, [r7, #24]
 8007b40:	e841 2300 	strex	r3, r2, [r1]
 8007b44:	613b      	str	r3, [r7, #16]
   return(result);
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1e6      	bne.n	8007b1a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	69db      	ldr	r3, [r3, #28]
 8007b52:	f003 0310 	and.w	r3, r3, #16
 8007b56:	2b10      	cmp	r3, #16
 8007b58:	d103      	bne.n	8007b62 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2210      	movs	r2, #16
 8007b60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007b68:	4619      	mov	r1, r3
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f7ff f9d6 	bl	8006f1c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b70:	e00b      	b.n	8007b8a <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f7f9 faac 	bl	80010d0 <HAL_UART_RxCpltCallback>
}
 8007b78:	e007      	b.n	8007b8a <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	699a      	ldr	r2, [r3, #24]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f042 0208 	orr.w	r2, r2, #8
 8007b88:	619a      	str	r2, [r3, #24]
}
 8007b8a:	bf00      	nop
 8007b8c:	3758      	adds	r7, #88	; 0x58
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007b92:	b480      	push	{r7}
 8007b94:	b083      	sub	sp, #12
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007b9a:	bf00      	nop
 8007b9c:	370c      	adds	r7, #12
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr
	...

08007ba8 <__libc_init_array>:
 8007ba8:	b570      	push	{r4, r5, r6, lr}
 8007baa:	4e0d      	ldr	r6, [pc, #52]	; (8007be0 <__libc_init_array+0x38>)
 8007bac:	4c0d      	ldr	r4, [pc, #52]	; (8007be4 <__libc_init_array+0x3c>)
 8007bae:	1ba4      	subs	r4, r4, r6
 8007bb0:	10a4      	asrs	r4, r4, #2
 8007bb2:	2500      	movs	r5, #0
 8007bb4:	42a5      	cmp	r5, r4
 8007bb6:	d109      	bne.n	8007bcc <__libc_init_array+0x24>
 8007bb8:	4e0b      	ldr	r6, [pc, #44]	; (8007be8 <__libc_init_array+0x40>)
 8007bba:	4c0c      	ldr	r4, [pc, #48]	; (8007bec <__libc_init_array+0x44>)
 8007bbc:	f000 f820 	bl	8007c00 <_init>
 8007bc0:	1ba4      	subs	r4, r4, r6
 8007bc2:	10a4      	asrs	r4, r4, #2
 8007bc4:	2500      	movs	r5, #0
 8007bc6:	42a5      	cmp	r5, r4
 8007bc8:	d105      	bne.n	8007bd6 <__libc_init_array+0x2e>
 8007bca:	bd70      	pop	{r4, r5, r6, pc}
 8007bcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007bd0:	4798      	blx	r3
 8007bd2:	3501      	adds	r5, #1
 8007bd4:	e7ee      	b.n	8007bb4 <__libc_init_array+0xc>
 8007bd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007bda:	4798      	blx	r3
 8007bdc:	3501      	adds	r5, #1
 8007bde:	e7f2      	b.n	8007bc6 <__libc_init_array+0x1e>
 8007be0:	08007cd0 	.word	0x08007cd0
 8007be4:	08007cd0 	.word	0x08007cd0
 8007be8:	08007cd0 	.word	0x08007cd0
 8007bec:	08007cd4 	.word	0x08007cd4

08007bf0 <memset>:
 8007bf0:	4402      	add	r2, r0
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d100      	bne.n	8007bfa <memset+0xa>
 8007bf8:	4770      	bx	lr
 8007bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8007bfe:	e7f9      	b.n	8007bf4 <memset+0x4>

08007c00 <_init>:
 8007c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c02:	bf00      	nop
 8007c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c06:	bc08      	pop	{r3}
 8007c08:	469e      	mov	lr, r3
 8007c0a:	4770      	bx	lr

08007c0c <_fini>:
 8007c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c0e:	bf00      	nop
 8007c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c12:	bc08      	pop	{r3}
 8007c14:	469e      	mov	lr, r3
 8007c16:	4770      	bx	lr
