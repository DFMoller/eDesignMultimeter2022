
eDesignMultimeter2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dec  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08006f80  08006f80  00016f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007024  08007024  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08007024  08007024  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007024  08007024  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007024  08007024  00017024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007028  08007028  00017028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800702c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  2000001c  08007048  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  08007048  000203c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015dec  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002822  00000000  00000000  00035e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010c8  00000000  00000000  00038660  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fc0  00000000  00000000  00039728  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022344  00000000  00000000  0003a6e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010a88  00000000  00000000  0005ca2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4e98  00000000  00000000  0006d4b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014234c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004664  00000000  00000000  001423c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000001c 	.word	0x2000001c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006f68 	.word	0x08006f68

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000020 	.word	0x20000020
 80001d0:	08006f68 	.word	0x08006f68

080001d4 <LCD_Init>:
#define lcd_D7_bit			12

DisplayStateType DisplayState;

void LCD_Init()
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0

	HAL_UART_Transmit(&huart2, (uint8_t*)"\nStart of Init Function:\n", 25, 10);
 80001d8:	230a      	movs	r3, #10
 80001da:	2219      	movs	r2, #25
 80001dc:	491f      	ldr	r1, [pc, #124]	; (800025c <LCD_Init+0x88>)
 80001de:	4820      	ldr	r0, [pc, #128]	; (8000260 <LCD_Init+0x8c>)
 80001e0:	f005 fc7a 	bl	8005ad8 <HAL_UART_Transmit>

	HAL_Delay(20);
 80001e4:	2014      	movs	r0, #20
 80001e6:	f001 fcc9 	bl	8001b7c <HAL_Delay>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionReset);
 80001ea:	2030      	movs	r0, #48	; 0x30
 80001ec:	f000 f914 	bl	8000418 <LCD_Write_8bitInstruction>
	HAL_Delay(10);
 80001f0:	200a      	movs	r0, #10
 80001f2:	f001 fcc3 	bl	8001b7c <HAL_Delay>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionReset);
 80001f6:	2030      	movs	r0, #48	; 0x30
 80001f8:	f000 f90e 	bl	8000418 <LCD_Write_8bitInstruction>
	HAL_Delay(1);
 80001fc:	2001      	movs	r0, #1
 80001fe:	f001 fcbd 	bl	8001b7c <HAL_Delay>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionReset);
 8000202:	2030      	movs	r0, #48	; 0x30
 8000204:	f000 f908 	bl	8000418 <LCD_Write_8bitInstruction>
	HAL_Delay(10);
 8000208:	200a      	movs	r0, #10
 800020a:	f001 fcb7 	bl	8001b7c <HAL_Delay>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionSet4bit);
 800020e:	2028      	movs	r0, #40	; 0x28
 8000210:	f000 f902 	bl	8000418 <LCD_Write_8bitInstruction>
	HAL_Delay(1);
 8000214:	2001      	movs	r0, #1
 8000216:	f001 fcb1 	bl	8001b7c <HAL_Delay>

	LCD_Write_Instruction(lcd_instruction_FunctionSet4bit);
 800021a:	2028      	movs	r0, #40	; 0x28
 800021c:	f000 f858 	bl	80002d0 <LCD_Write_Instruction>
	HAL_Delay(1);
 8000220:	2001      	movs	r0, #1
 8000222:	f001 fcab 	bl	8001b7c <HAL_Delay>

	LCD_Write_Instruction(lcd_instruction_DisplayOn);
 8000226:	200f      	movs	r0, #15
 8000228:	f000 f852 	bl	80002d0 <LCD_Write_Instruction>
	HAL_Delay(1);
 800022c:	2001      	movs	r0, #1
 800022e:	f001 fca5 	bl	8001b7c <HAL_Delay>

	LCD_Write_Instruction(lcd_instruction_ClearDisplay);
 8000232:	2001      	movs	r0, #1
 8000234:	f000 f84c 	bl	80002d0 <LCD_Write_Instruction>
	HAL_Delay(3);
 8000238:	2003      	movs	r0, #3
 800023a:	f001 fc9f 	bl	8001b7c <HAL_Delay>

	LCD_Write_Instruction(lcd_instruction_EntryMode);
 800023e:	2006      	movs	r0, #6
 8000240:	f000 f846 	bl	80002d0 <LCD_Write_Instruction>
	HAL_Delay(1);
 8000244:	2001      	movs	r0, #1
 8000246:	f001 fc99 	bl	8001b7c <HAL_Delay>

	HAL_UART_Transmit(&huart2, (uint8_t*)"\nEnd of Init Function:\n", 23, 10);
 800024a:	230a      	movs	r3, #10
 800024c:	2217      	movs	r2, #23
 800024e:	4905      	ldr	r1, [pc, #20]	; (8000264 <LCD_Init+0x90>)
 8000250:	4803      	ldr	r0, [pc, #12]	; (8000260 <LCD_Init+0x8c>)
 8000252:	f005 fc41 	bl	8005ad8 <HAL_UART_Transmit>

}
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	08006f80 	.word	0x08006f80
 8000260:	200002f0 	.word	0x200002f0
 8000264:	08006f9c 	.word	0x08006f9c

08000268 <LCD_Write_String>:

void LCD_Write_String(uint8_t string[])
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000270:	2300      	movs	r3, #0
 8000272:	60fb      	str	r3, [r7, #12]
	while (string[i] != 0)
 8000274:	e00c      	b.n	8000290 <LCD_Write_String+0x28>
	{
		LCD_Write_Character(string[i]);
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	687a      	ldr	r2, [r7, #4]
 800027a:	4413      	add	r3, r2
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	4618      	mov	r0, r3
 8000280:	f000 f810 	bl	80002a4 <LCD_Write_Character>
		i++;
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	3301      	adds	r3, #1
 8000288:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1);
 800028a:	2001      	movs	r0, #1
 800028c:	f001 fc76 	bl	8001b7c <HAL_Delay>
	while (string[i] != 0)
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	687a      	ldr	r2, [r7, #4]
 8000294:	4413      	add	r3, r2
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d1ec      	bne.n	8000276 <LCD_Write_String+0xe>
	}
}
 800029c:	bf00      	nop
 800029e:	3710      	adds	r7, #16
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <LCD_Write_Character>:

void LCD_Write_Character(uint8_t character)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
	lcd_RS_GPIO_Port->ODR |= (1<<lcd_RS_bit);			// select data register (RS High)
 80002ae:	4b07      	ldr	r3, [pc, #28]	; (80002cc <LCD_Write_Character+0x28>)
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	4a06      	ldr	r2, [pc, #24]	; (80002cc <LCD_Write_Character+0x28>)
 80002b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002b8:	6153      	str	r3, [r2, #20]
	LCD_Write_Nibbles(character);
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	4618      	mov	r0, r3
 80002be:	f000 f81d 	bl	80002fc <LCD_Write_Nibbles>
}
 80002c2:	bf00      	nop
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	48000400 	.word	0x48000400

080002d0 <LCD_Write_Instruction>:

void LCD_Write_Instruction(uint8_t instruction)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	71fb      	strb	r3, [r7, #7]
	lcd_RS_GPIO_Port->ODR &= ~(1<<lcd_RS_bit);			// select the Instruction Register (RS low)
 80002da:	4b07      	ldr	r3, [pc, #28]	; (80002f8 <LCD_Write_Instruction+0x28>)
 80002dc:	695b      	ldr	r3, [r3, #20]
 80002de:	4a06      	ldr	r2, [pc, #24]	; (80002f8 <LCD_Write_Instruction+0x28>)
 80002e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80002e4:	6153      	str	r3, [r2, #20]
	LCD_Write_Nibbles(instruction);
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 f807 	bl	80002fc <LCD_Write_Nibbles>
}
 80002ee:	bf00      	nop
 80002f0:	3708      	adds	r7, #8
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	48000400 	.word	0x48000400

080002fc <LCD_Write_Nibbles>:

void LCD_Write_Nibbles(uint8_t byte)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	71fb      	strb	r3, [r7, #7]
	lcd_E_GPIO_Port->ODR |= (1<<lcd_E_bit);			// set E high
 8000306:	4b42      	ldr	r3, [pc, #264]	; (8000410 <LCD_Write_Nibbles+0x114>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	4a41      	ldr	r2, [pc, #260]	; (8000410 <LCD_Write_Nibbles+0x114>)
 800030c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000310:	6153      	str	r3, [r2, #20]
	LCD_ZeroPins();
 8000312:	f000 f8d5 	bl	80004c0 <LCD_ZeroPins>

	// Write first (most significant) nibble
	if(byte & 1<<7)	lcd_D7_GPIO_Port->ODR |= (1<<lcd_D7_bit);
 8000316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031a:	2b00      	cmp	r3, #0
 800031c:	da07      	bge.n	800032e <LCD_Write_Nibbles+0x32>
 800031e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000322:	695b      	ldr	r3, [r3, #20]
 8000324:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000328:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800032c:	6153      	str	r3, [r2, #20]
	if(byte & 1<<6)	lcd_D6_GPIO_Port->ODR |= (1<<lcd_D6_bit);
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000334:	2b00      	cmp	r3, #0
 8000336:	d007      	beq.n	8000348 <LCD_Write_Nibbles+0x4c>
 8000338:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000342:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000346:	6153      	str	r3, [r2, #20]
	if(byte & 1<<5)	lcd_D5_GPIO_Port->ODR |= (1<<lcd_D5_bit);
 8000348:	79fb      	ldrb	r3, [r7, #7]
 800034a:	f003 0320 	and.w	r3, r3, #32
 800034e:	2b00      	cmp	r3, #0
 8000350:	d005      	beq.n	800035e <LCD_Write_Nibbles+0x62>
 8000352:	4b30      	ldr	r3, [pc, #192]	; (8000414 <LCD_Write_Nibbles+0x118>)
 8000354:	695b      	ldr	r3, [r3, #20]
 8000356:	4a2f      	ldr	r2, [pc, #188]	; (8000414 <LCD_Write_Nibbles+0x118>)
 8000358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800035c:	6153      	str	r3, [r2, #20]
	if(byte & 1<<4)	lcd_D4_GPIO_Port->ODR |= (1<<lcd_D4_bit);
 800035e:	79fb      	ldrb	r3, [r7, #7]
 8000360:	f003 0310 	and.w	r3, r3, #16
 8000364:	2b00      	cmp	r3, #0
 8000366:	d005      	beq.n	8000374 <LCD_Write_Nibbles+0x78>
 8000368:	4b2a      	ldr	r3, [pc, #168]	; (8000414 <LCD_Write_Nibbles+0x118>)
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	4a29      	ldr	r2, [pc, #164]	; (8000414 <LCD_Write_Nibbles+0x118>)
 800036e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000372:	6153      	str	r3, [r2, #20]


	// Pulse Enable
	HAL_Delay(1);
 8000374:	2001      	movs	r0, #1
 8000376:	f001 fc01 	bl	8001b7c <HAL_Delay>
	lcd_E_GPIO_Port->ODR &= ~(1<<lcd_E_bit);			// Set to 0
 800037a:	4b25      	ldr	r3, [pc, #148]	; (8000410 <LCD_Write_Nibbles+0x114>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	4a24      	ldr	r2, [pc, #144]	; (8000410 <LCD_Write_Nibbles+0x114>)
 8000380:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000384:	6153      	str	r3, [r2, #20]
	lcd_E_GPIO_Port->ODR |= (1<<lcd_E_bit);				// Set to 1
 8000386:	4b22      	ldr	r3, [pc, #136]	; (8000410 <LCD_Write_Nibbles+0x114>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	4a21      	ldr	r2, [pc, #132]	; (8000410 <LCD_Write_Nibbles+0x114>)
 800038c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000390:	6153      	str	r3, [r2, #20]

	LCD_ZeroPins();
 8000392:	f000 f895 	bl	80004c0 <LCD_ZeroPins>
	if(byte & 1<<3)	lcd_D7_GPIO_Port->ODR |= (1<<lcd_D7_bit);
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	f003 0308 	and.w	r3, r3, #8
 800039c:	2b00      	cmp	r3, #0
 800039e:	d007      	beq.n	80003b0 <LCD_Write_Nibbles+0xb4>
 80003a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003ae:	6153      	str	r3, [r2, #20]
	if(byte & 1<<2)	lcd_D6_GPIO_Port->ODR |= (1<<lcd_D6_bit);
 80003b0:	79fb      	ldrb	r3, [r7, #7]
 80003b2:	f003 0304 	and.w	r3, r3, #4
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d007      	beq.n	80003ca <LCD_Write_Nibbles+0xce>
 80003ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003be:	695b      	ldr	r3, [r3, #20]
 80003c0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80003c8:	6153      	str	r3, [r2, #20]
	if(byte & 1<<1)	lcd_D5_GPIO_Port->ODR |= (1<<lcd_D5_bit);
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	f003 0302 	and.w	r3, r3, #2
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d005      	beq.n	80003e0 <LCD_Write_Nibbles+0xe4>
 80003d4:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <LCD_Write_Nibbles+0x118>)
 80003d6:	695b      	ldr	r3, [r3, #20]
 80003d8:	4a0e      	ldr	r2, [pc, #56]	; (8000414 <LCD_Write_Nibbles+0x118>)
 80003da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003de:	6153      	str	r3, [r2, #20]
	if(byte & 1<<0)	lcd_D4_GPIO_Port->ODR |= (1<<lcd_D4_bit);
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	f003 0301 	and.w	r3, r3, #1
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d005      	beq.n	80003f6 <LCD_Write_Nibbles+0xfa>
 80003ea:	4b0a      	ldr	r3, [pc, #40]	; (8000414 <LCD_Write_Nibbles+0x118>)
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	4a09      	ldr	r2, [pc, #36]	; (8000414 <LCD_Write_Nibbles+0x118>)
 80003f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003f4:	6153      	str	r3, [r2, #20]

	// Drop Enable
	HAL_Delay(1);
 80003f6:	2001      	movs	r0, #1
 80003f8:	f001 fbc0 	bl	8001b7c <HAL_Delay>
	lcd_E_GPIO_Port->ODR &= ~(1<<lcd_E_bit);		// Set to 0
 80003fc:	4b04      	ldr	r3, [pc, #16]	; (8000410 <LCD_Write_Nibbles+0x114>)
 80003fe:	695b      	ldr	r3, [r3, #20]
 8000400:	4a03      	ldr	r2, [pc, #12]	; (8000410 <LCD_Write_Nibbles+0x114>)
 8000402:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000406:	6153      	str	r3, [r2, #20]
}
 8000408:	bf00      	nop
 800040a:	3708      	adds	r7, #8
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	48000400 	.word	0x48000400
 8000414:	48000800 	.word	0x48000800

08000418 <LCD_Write_8bitInstruction>:

void LCD_Write_8bitInstruction(uint8_t byte)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
	lcd_RS_GPIO_Port->ODR &= ~(1<<lcd_RS_bit);			// Set RS to 0
 8000422:	4b25      	ldr	r3, [pc, #148]	; (80004b8 <LCD_Write_8bitInstruction+0xa0>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	4a24      	ldr	r2, [pc, #144]	; (80004b8 <LCD_Write_8bitInstruction+0xa0>)
 8000428:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800042c:	6153      	str	r3, [r2, #20]
	lcd_E_GPIO_Port->ODR |= (1<<lcd_E_bit);				// Set E to 1
 800042e:	4b22      	ldr	r3, [pc, #136]	; (80004b8 <LCD_Write_8bitInstruction+0xa0>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	4a21      	ldr	r2, [pc, #132]	; (80004b8 <LCD_Write_8bitInstruction+0xa0>)
 8000434:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000438:	6153      	str	r3, [r2, #20]
	LCD_ZeroPins();
 800043a:	f000 f841 	bl	80004c0 <LCD_ZeroPins>

	 // Set to zero first
	if(byte & 1<<7)	lcd_D7_GPIO_Port->ODR |= (1<<lcd_D7_bit);
 800043e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000442:	2b00      	cmp	r3, #0
 8000444:	da07      	bge.n	8000456 <LCD_Write_8bitInstruction+0x3e>
 8000446:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800044a:	695b      	ldr	r3, [r3, #20]
 800044c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000450:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000454:	6153      	str	r3, [r2, #20]
	if(byte & 1<<6)	lcd_D6_GPIO_Port->ODR |= (1<<lcd_D6_bit);
 8000456:	79fb      	ldrb	r3, [r7, #7]
 8000458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800045c:	2b00      	cmp	r3, #0
 800045e:	d007      	beq.n	8000470 <LCD_Write_8bitInstruction+0x58>
 8000460:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800046a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800046e:	6153      	str	r3, [r2, #20]
	if(byte & 1<<5)	lcd_D5_GPIO_Port->ODR |= (1<<lcd_D5_bit);
 8000470:	79fb      	ldrb	r3, [r7, #7]
 8000472:	f003 0320 	and.w	r3, r3, #32
 8000476:	2b00      	cmp	r3, #0
 8000478:	d005      	beq.n	8000486 <LCD_Write_8bitInstruction+0x6e>
 800047a:	4b10      	ldr	r3, [pc, #64]	; (80004bc <LCD_Write_8bitInstruction+0xa4>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	4a0f      	ldr	r2, [pc, #60]	; (80004bc <LCD_Write_8bitInstruction+0xa4>)
 8000480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000484:	6153      	str	r3, [r2, #20]
	if(byte & 1<<4)	lcd_D4_GPIO_Port->ODR |= (1<<lcd_D4_bit);
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	f003 0310 	and.w	r3, r3, #16
 800048c:	2b00      	cmp	r3, #0
 800048e:	d005      	beq.n	800049c <LCD_Write_8bitInstruction+0x84>
 8000490:	4b0a      	ldr	r3, [pc, #40]	; (80004bc <LCD_Write_8bitInstruction+0xa4>)
 8000492:	695b      	ldr	r3, [r3, #20]
 8000494:	4a09      	ldr	r2, [pc, #36]	; (80004bc <LCD_Write_8bitInstruction+0xa4>)
 8000496:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800049a:	6153      	str	r3, [r2, #20]

	HAL_Delay(1);
 800049c:	2001      	movs	r0, #1
 800049e:	f001 fb6d 	bl	8001b7c <HAL_Delay>
	lcd_E_GPIO_Port->ODR &= ~(1<<lcd_E_bit);		// Set E to 0
 80004a2:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <LCD_Write_8bitInstruction+0xa0>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	4a04      	ldr	r2, [pc, #16]	; (80004b8 <LCD_Write_8bitInstruction+0xa0>)
 80004a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80004ac:	6153      	str	r3, [r2, #20]
}
 80004ae:	bf00      	nop
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	48000400 	.word	0x48000400
 80004bc:	48000800 	.word	0x48000800

080004c0 <LCD_ZeroPins>:

void LCD_ZeroPins()
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
	lcd_D7_GPIO_Port->ODR &= ~(1<<lcd_D7_bit);
 80004c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80004d2:	6153      	str	r3, [r2, #20]
	lcd_D6_GPIO_Port->ODR &= ~(1<<lcd_D6_bit);
 80004d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80004e2:	6153      	str	r3, [r2, #20]
	lcd_D5_GPIO_Port->ODR &= ~(1<<lcd_D5_bit);
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <LCD_ZeroPins+0x48>)
 80004e6:	695b      	ldr	r3, [r3, #20]
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <LCD_ZeroPins+0x48>)
 80004ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004ee:	6153      	str	r3, [r2, #20]
	lcd_D4_GPIO_Port->ODR &= ~(1<<lcd_D4_bit);
 80004f0:	4b05      	ldr	r3, [pc, #20]	; (8000508 <LCD_ZeroPins+0x48>)
 80004f2:	695b      	ldr	r3, [r3, #20]
 80004f4:	4a04      	ldr	r2, [pc, #16]	; (8000508 <LCD_ZeroPins+0x48>)
 80004f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004fa:	6153      	str	r3, [r2, #20]
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	48000800 	.word	0x48000800

0800050c <LCD_Clear_Display>:

void LCD_Clear_Display()
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	LCD_Write_Instruction(lcd_instruction_ClearDisplay);
 8000510:	2001      	movs	r0, #1
 8000512:	f7ff fedd 	bl	80002d0 <LCD_Write_Instruction>
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
	...

0800051c <LCD_changeDisplayMode>:

void LCD_changeDisplayMode(DisplayMode newDisplayMode)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b08a      	sub	sp, #40	; 0x28
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	71fb      	strb	r3, [r7, #7]
	LCD_Clear_Display();
 8000526:	f7ff fff1 	bl	800050c <LCD_Clear_Display>
	if (newDisplayMode == Menu)
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d122      	bne.n	8000576 <LCD_changeDisplayMode+0x5a>
	{
		// Change to Menu Display State
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000530:	2201      	movs	r2, #1
 8000532:	2120      	movs	r1, #32
 8000534:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000538:	f003 f9b4 	bl	80038a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	2180      	movs	r1, #128	; 0x80
 8000540:	4835      	ldr	r0, [pc, #212]	; (8000618 <LCD_changeDisplayMode+0xfc>)
 8000542:	f003 f9af 	bl	80038a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800054c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000550:	f003 f9a8 	bl	80038a4 <HAL_GPIO_WritePin>
		uint8_t lcd_string[] = "Menu";
 8000554:	4a31      	ldr	r2, [pc, #196]	; (800061c <LCD_changeDisplayMode+0x100>)
 8000556:	f107 0320 	add.w	r3, r7, #32
 800055a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800055e:	6018      	str	r0, [r3, #0]
 8000560:	3304      	adds	r3, #4
 8000562:	7019      	strb	r1, [r3, #0]
		LCD_Write_String(lcd_string);
 8000564:	f107 0320 	add.w	r3, r7, #32
 8000568:	4618      	mov	r0, r3
 800056a:	f7ff fe7d 	bl	8000268 <LCD_Write_String>
		DisplayState.Mode = Menu;
 800056e:	4b2c      	ldr	r3, [pc, #176]	; (8000620 <LCD_changeDisplayMode+0x104>)
 8000570:	2200      	movs	r2, #0
 8000572:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
		uint8_t lcd_string[] = "Output";
		LCD_Write_String(lcd_string);
		DisplayState.Mode = Output;
	}
}
 8000574:	e04b      	b.n	800060e <LCD_changeDisplayMode+0xf2>
	else if (newDisplayMode == Measurement)
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	2b01      	cmp	r3, #1
 800057a:	d120      	bne.n	80005be <LCD_changeDisplayMode+0xa2>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	2120      	movs	r1, #32
 8000580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000584:	f003 f98e 	bl	80038a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000588:	2201      	movs	r2, #1
 800058a:	2180      	movs	r1, #128	; 0x80
 800058c:	4822      	ldr	r0, [pc, #136]	; (8000618 <LCD_changeDisplayMode+0xfc>)
 800058e:	f003 f989 	bl	80038a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059c:	f003 f982 	bl	80038a4 <HAL_GPIO_WritePin>
		uint8_t lcd_string[] = "Measurement";
 80005a0:	4a20      	ldr	r2, [pc, #128]	; (8000624 <LCD_changeDisplayMode+0x108>)
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80005a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		LCD_Write_String(lcd_string);
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	4618      	mov	r0, r3
 80005b2:	f7ff fe59 	bl	8000268 <LCD_Write_String>
		DisplayState.Mode = Measurement;
 80005b6:	4b1a      	ldr	r3, [pc, #104]	; (8000620 <LCD_changeDisplayMode+0x104>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	701a      	strb	r2, [r3, #0]
}
 80005bc:	e027      	b.n	800060e <LCD_changeDisplayMode+0xf2>
	else if (newDisplayMode == Output)
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	2b02      	cmp	r3, #2
 80005c2:	d124      	bne.n	800060e <LCD_changeDisplayMode+0xf2>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2120      	movs	r1, #32
 80005c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005cc:	f003 f96a 	bl	80038a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2180      	movs	r1, #128	; 0x80
 80005d4:	4810      	ldr	r0, [pc, #64]	; (8000618 <LCD_changeDisplayMode+0xfc>)
 80005d6:	f003 f965 	bl	80038a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 80005da:	2201      	movs	r2, #1
 80005dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e4:	f003 f95e 	bl	80038a4 <HAL_GPIO_WritePin>
		uint8_t lcd_string[] = "Output";
 80005e8:	4a0f      	ldr	r2, [pc, #60]	; (8000628 <LCD_changeDisplayMode+0x10c>)
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005f2:	6018      	str	r0, [r3, #0]
 80005f4:	3304      	adds	r3, #4
 80005f6:	8019      	strh	r1, [r3, #0]
 80005f8:	3302      	adds	r3, #2
 80005fa:	0c0a      	lsrs	r2, r1, #16
 80005fc:	701a      	strb	r2, [r3, #0]
		LCD_Write_String(lcd_string);
 80005fe:	f107 030c 	add.w	r3, r7, #12
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff fe30 	bl	8000268 <LCD_Write_String>
		DisplayState.Mode = Output;
 8000608:	4b05      	ldr	r3, [pc, #20]	; (8000620 <LCD_changeDisplayMode+0x104>)
 800060a:	2202      	movs	r2, #2
 800060c:	701a      	strb	r2, [r3, #0]
}
 800060e:	bf00      	nop
 8000610:	3728      	adds	r7, #40	; 0x28
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	48000800 	.word	0x48000800
 800061c:	08006fb4 	.word	0x08006fb4
 8000620:	200001f4 	.word	0x200001f4
 8000624:	08006fbc 	.word	0x08006fbc
 8000628:	08006fc8 	.word	0x08006fc8

0800062c <HAL_UART_RxCpltCallback>:
uint16_t measured_period = 0;
uint16_t measured_offset = 0;
uint8_t measurement_mode = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	message_received = 1;
 8000634:	4b04      	ldr	r3, [pc, #16]	; (8000648 <HAL_UART_RxCpltCallback+0x1c>)
 8000636:	2201      	movs	r2, #1
 8000638:	701a      	strb	r2, [r3, #0]
}
 800063a:	bf00      	nop
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	20000038 	.word	0x20000038

0800064c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	80fb      	strh	r3, [r7, #6]
	last_ticks = HAL_GetTick();
 8000656:	f001 fa85 	bl	8001b64 <HAL_GetTick>
 800065a:	4602      	mov	r2, r0
 800065c:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <HAL_GPIO_EXTI_Callback+0x68>)
 800065e:	601a      	str	r2, [r3, #0]
	if(GPIO_Pin == btn_mid_Pin)
 8000660:	88fb      	ldrh	r3, [r7, #6]
 8000662:	2b40      	cmp	r3, #64	; 0x40
 8000664:	d103      	bne.n	800066e <HAL_GPIO_EXTI_Callback+0x22>
	{
		btn_mid_flag = 1;
 8000666:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000668:	2201      	movs	r2, #1
 800066a:	701a      	strb	r2, [r3, #0]
	}
	else if(GPIO_Pin == btn_down_Pin)
	{
		btn_down_flag = 1;
	}
}
 800066c:	e01d      	b.n	80006aa <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_right_Pin)
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	2b80      	cmp	r3, #128	; 0x80
 8000672:	d103      	bne.n	800067c <HAL_GPIO_EXTI_Callback+0x30>
		btn_right_flag = 1;
 8000674:	4b11      	ldr	r3, [pc, #68]	; (80006bc <HAL_GPIO_EXTI_Callback+0x70>)
 8000676:	2201      	movs	r2, #1
 8000678:	701a      	strb	r2, [r3, #0]
}
 800067a:	e016      	b.n	80006aa <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_up_Pin)
 800067c:	88fb      	ldrh	r3, [r7, #6]
 800067e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000682:	d103      	bne.n	800068c <HAL_GPIO_EXTI_Callback+0x40>
		btn_up_flag = 1;
 8000684:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <HAL_GPIO_EXTI_Callback+0x74>)
 8000686:	2201      	movs	r2, #1
 8000688:	701a      	strb	r2, [r3, #0]
}
 800068a:	e00e      	b.n	80006aa <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_left_Pin)
 800068c:	88fb      	ldrh	r3, [r7, #6]
 800068e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000692:	d103      	bne.n	800069c <HAL_GPIO_EXTI_Callback+0x50>
		btn_left_flag = 1;
 8000694:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <HAL_GPIO_EXTI_Callback+0x78>)
 8000696:	2201      	movs	r2, #1
 8000698:	701a      	strb	r2, [r3, #0]
}
 800069a:	e006      	b.n	80006aa <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_down_Pin)
 800069c:	88fb      	ldrh	r3, [r7, #6]
 800069e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80006a2:	d102      	bne.n	80006aa <HAL_GPIO_EXTI_Callback+0x5e>
		btn_down_flag = 1;
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <HAL_GPIO_EXTI_Callback+0x7c>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	701a      	strb	r2, [r3, #0]
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000040 	.word	0x20000040
 80006b8:	20000039 	.word	0x20000039
 80006bc:	2000003a 	.word	0x2000003a
 80006c0:	2000003b 	.word	0x2000003b
 80006c4:	2000003c 	.word	0x2000003c
 80006c8:	2000003d 	.word	0x2000003d

080006cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	f5ad 6d00 	sub.w	sp, sp, #2048	; 0x800
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t raw;
	uint16_t millivolts;
	uint16_t adc_array[1000];
	uint16_t adc_count = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	f8a7 37fe 	strh.w	r3, [r7, #2046]	; 0x7fe
	uint8_t rx_bytes[10] = {0};
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	811a      	strh	r2, [r3, #8]
	uint8_t rx_bytes_counter = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	f887 37fd 	strb.w	r3, [r7, #2045]	; 0x7fd

	OutputState.TIM2_Clock = 72000000;
 80006ea:	4bb5      	ldr	r3, [pc, #724]	; (80009c0 <main+0x2f4>)
 80006ec:	4ab5      	ldr	r2, [pc, #724]	; (80009c4 <main+0x2f8>)
 80006ee:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OutputState.On = false;
 80006f2:	4bb3      	ldr	r3, [pc, #716]	; (80009c0 <main+0x2f4>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
	OutputState.Mode = d;
 80006fa:	4bb1      	ldr	r3, [pc, #708]	; (80009c0 <main+0x2f4>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
	OutputState.Amplitude = 1000;
 8000702:	4baf      	ldr	r3, [pc, #700]	; (80009c0 <main+0x2f4>)
 8000704:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000708:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196
	OutputState.Offset = 1200;
 800070c:	4bac      	ldr	r3, [pc, #688]	; (80009c0 <main+0x2f4>)
 800070e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000712:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
	OutputState.Frequency = 1000;
 8000716:	4baa      	ldr	r3, [pc, #680]	; (80009c0 <main+0x2f4>)
 8000718:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800071c:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
	OutputState.DCValue = 1000;
 8000720:	4ba7      	ldr	r3, [pc, #668]	; (80009c0 <main+0x2f4>)
 8000722:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000726:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072a:	f001 f9c1 	bl	8001ab0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072e:	f000 f9fd 	bl	8000b2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000732:	f000 fbbf 	bl	8000eb4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000736:	f000 fb9f 	bl	8000e78 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800073a:	f000 fb6d 	bl	8000e18 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 800073e:	f000 fb45 	bl	8000dcc <MX_TIM16_Init>
  MX_ADC1_Init();
 8000742:	f000 fa5b 	bl	8000bfc <MX_ADC1_Init>
  MX_DAC1_Init();
 8000746:	f000 fac9 	bl	8000cdc <MX_DAC1_Init>
  MX_TIM2_Init();
 800074a:	f000 faf1 	bl	8000d30 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  	// Init UART
	HAL_UART_Transmit(&huart2, std_num, 13, 10);
 800074e:	230a      	movs	r3, #10
 8000750:	220d      	movs	r2, #13
 8000752:	499d      	ldr	r1, [pc, #628]	; (80009c8 <main+0x2fc>)
 8000754:	489d      	ldr	r0, [pc, #628]	; (80009cc <main+0x300>)
 8000756:	f005 f9bf 	bl	8005ad8 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 800075a:	2201      	movs	r2, #1
 800075c:	499c      	ldr	r1, [pc, #624]	; (80009d0 <main+0x304>)
 800075e:	489b      	ldr	r0, [pc, #620]	; (80009cc <main+0x300>)
 8000760:	f005 fa4e 	bl	8005c00 <HAL_UART_Receive_IT>

	// Init ADC Timer
	HAL_TIM_Base_Start_IT(&htim16);
 8000764:	489b      	ldr	r0, [pc, #620]	; (80009d4 <main+0x308>)
 8000766:	f004 fd11 	bl	800518c <HAL_TIM_Base_Start_IT>

	// Init LCD
	LCD_Init();
 800076a:	f7ff fd33 	bl	80001d4 <LCD_Init>

	// Init Display State
	LCD_changeDisplayMode(Menu);
 800076e:	2000      	movs	r0, #0
 8000770:	f7ff fed4 	bl	800051c <LCD_changeDisplayMode>

	// Init DAC Timer
	HAL_TIM_Base_Start(&htim2);
 8000774:	4898      	ldr	r0, [pc, #608]	; (80009d8 <main+0x30c>)
 8000776:	f004 fca1 	bl	80050bc <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(message_received && rx_byte[0] != '\n')
 800077a:	4b98      	ldr	r3, [pc, #608]	; (80009dc <main+0x310>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d03a      	beq.n	80007f8 <main+0x12c>
 8000782:	4b93      	ldr	r3, [pc, #588]	; (80009d0 <main+0x304>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b0a      	cmp	r3, #10
 8000788:	d036      	beq.n	80007f8 <main+0x12c>
	  {
		  rx_bytes[rx_bytes_counter] = rx_byte[0];
 800078a:	f897 37fd 	ldrb.w	r3, [r7, #2045]	; 0x7fd
 800078e:	4a90      	ldr	r2, [pc, #576]	; (80009d0 <main+0x304>)
 8000790:	7811      	ldrb	r1, [r2, #0]
 8000792:	1d3a      	adds	r2, r7, #4
 8000794:	54d1      	strb	r1, [r2, r3]
		  if(rx_bytes_counter == 0 && rx_byte[0] == '@'){
 8000796:	f897 37fd 	ldrb.w	r3, [r7, #2045]	; 0x7fd
 800079a:	2b00      	cmp	r3, #0
 800079c:	d109      	bne.n	80007b2 <main+0xe6>
 800079e:	4b8c      	ldr	r3, [pc, #560]	; (80009d0 <main+0x304>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b40      	cmp	r3, #64	; 0x40
 80007a4:	d105      	bne.n	80007b2 <main+0xe6>
			  rx_bytes_counter++;
 80007a6:	f897 37fd 	ldrb.w	r3, [r7, #2045]	; 0x7fd
 80007aa:	3301      	adds	r3, #1
 80007ac:	f887 37fd 	strb.w	r3, [r7, #2045]	; 0x7fd
 80007b0:	e01a      	b.n	80007e8 <main+0x11c>
		  } else if(rx_bytes_counter > 0){
 80007b2:	f897 37fd 	ldrb.w	r3, [r7, #2045]	; 0x7fd
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d016      	beq.n	80007e8 <main+0x11c>
			  rx_bytes_counter++;
 80007ba:	f897 37fd 	ldrb.w	r3, [r7, #2045]	; 0x7fd
 80007be:	3301      	adds	r3, #1
 80007c0:	f887 37fd 	strb.w	r3, [r7, #2045]	; 0x7fd
			  if(uartRxComplete(rx_byte[0]))
 80007c4:	4b82      	ldr	r3, [pc, #520]	; (80009d0 <main+0x304>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 fc85 	bl	80010d8 <uartRxComplete>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d009      	beq.n	80007e8 <main+0x11c>
			  {
				  interpret_rx_message(rx_bytes, rx_bytes_counter);
 80007d4:	f897 27fd 	ldrb.w	r2, [r7, #2045]	; 0x7fd
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	4611      	mov	r1, r2
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 fc8d 	bl	80010fc <interpret_rx_message>
				  rx_bytes_counter = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	f887 37fd 	strb.w	r3, [r7, #2045]	; 0x7fd
			  }
		  }
		  HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 80007e8:	2201      	movs	r2, #1
 80007ea:	4979      	ldr	r1, [pc, #484]	; (80009d0 <main+0x304>)
 80007ec:	4877      	ldr	r0, [pc, #476]	; (80009cc <main+0x300>)
 80007ee:	f005 fa07 	bl	8005c00 <HAL_UART_Receive_IT>
		  message_received = 0;
 80007f2:	4b7a      	ldr	r3, [pc, #488]	; (80009dc <main+0x310>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	701a      	strb	r2, [r3, #0]
	  }
	  if(btn_up_flag)
 80007f8:	4b79      	ldr	r3, [pc, #484]	; (80009e0 <main+0x314>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d010      	beq.n	8000822 <main+0x156>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 8000800:	f001 f9b0 	bl	8001b64 <HAL_GetTick>
 8000804:	4602      	mov	r2, r0
 8000806:	4b77      	ldr	r3, [pc, #476]	; (80009e4 <main+0x318>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	2b36      	cmp	r3, #54	; 0x36
 800080e:	d96d      	bls.n	80008ec <main+0x220>
		  {
			  if(HAL_GPIO_ReadPin(btn_up_GPIO_Port, btn_up_Pin))
 8000810:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000814:	4874      	ldr	r0, [pc, #464]	; (80009e8 <main+0x31c>)
 8000816:	f003 f82d 	bl	8003874 <HAL_GPIO_ReadPin>
			  {
//				  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
			  }
			  btn_up_flag = 0;
 800081a:	4b71      	ldr	r3, [pc, #452]	; (80009e0 <main+0x314>)
 800081c:	2200      	movs	r2, #0
 800081e:	701a      	strb	r2, [r3, #0]
 8000820:	e064      	b.n	80008ec <main+0x220>
		  }
	  }
	  else if(btn_left_flag)
 8000822:	4b72      	ldr	r3, [pc, #456]	; (80009ec <main+0x320>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d010      	beq.n	800084c <main+0x180>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 800082a:	f001 f99b 	bl	8001b64 <HAL_GetTick>
 800082e:	4602      	mov	r2, r0
 8000830:	4b6c      	ldr	r3, [pc, #432]	; (80009e4 <main+0x318>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	2b36      	cmp	r3, #54	; 0x36
 8000838:	d958      	bls.n	80008ec <main+0x220>
		  {
			  if(HAL_GPIO_ReadPin(btn_left_GPIO_Port, btn_left_Pin))
 800083a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800083e:	486a      	ldr	r0, [pc, #424]	; (80009e8 <main+0x31c>)
 8000840:	f003 f818 	bl	8003874 <HAL_GPIO_ReadPin>
			  {
//				  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
			  }
			  btn_left_flag = 0;
 8000844:	4b69      	ldr	r3, [pc, #420]	; (80009ec <main+0x320>)
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
 800084a:	e04f      	b.n	80008ec <main+0x220>
		  }
	  }
	  else if(btn_down_flag)
 800084c:	4b68      	ldr	r3, [pc, #416]	; (80009f0 <main+0x324>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d010      	beq.n	8000876 <main+0x1aa>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 8000854:	f001 f986 	bl	8001b64 <HAL_GetTick>
 8000858:	4602      	mov	r2, r0
 800085a:	4b62      	ldr	r3, [pc, #392]	; (80009e4 <main+0x318>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	2b36      	cmp	r3, #54	; 0x36
 8000862:	d943      	bls.n	80008ec <main+0x220>
		  {
			  if(HAL_GPIO_ReadPin(btn_down_GPIO_Port, btn_down_Pin))
 8000864:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000868:	485f      	ldr	r0, [pc, #380]	; (80009e8 <main+0x31c>)
 800086a:	f003 f803 	bl	8003874 <HAL_GPIO_ReadPin>
			  {
//				  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
			  }
			  btn_down_flag = 0;
 800086e:	4b60      	ldr	r3, [pc, #384]	; (80009f0 <main+0x324>)
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]
 8000874:	e03a      	b.n	80008ec <main+0x220>
		  }
	  }
	  else if(btn_right_flag)
 8000876:	4b5f      	ldr	r3, [pc, #380]	; (80009f4 <main+0x328>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d010      	beq.n	80008a0 <main+0x1d4>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 800087e:	f001 f971 	bl	8001b64 <HAL_GetTick>
 8000882:	4602      	mov	r2, r0
 8000884:	4b57      	ldr	r3, [pc, #348]	; (80009e4 <main+0x318>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	2b36      	cmp	r3, #54	; 0x36
 800088c:	d92e      	bls.n	80008ec <main+0x220>
		  {
			  if(HAL_GPIO_ReadPin(btn_right_GPIO_Port, btn_right_Pin))
 800088e:	2180      	movs	r1, #128	; 0x80
 8000890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000894:	f002 ffee 	bl	8003874 <HAL_GPIO_ReadPin>
			  {
//				  HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
			  }
			  btn_right_flag = 0;
 8000898:	4b56      	ldr	r3, [pc, #344]	; (80009f4 <main+0x328>)
 800089a:	2200      	movs	r2, #0
 800089c:	701a      	strb	r2, [r3, #0]
 800089e:	e025      	b.n	80008ec <main+0x220>
		  }
	  }
	  else if(btn_mid_flag)
 80008a0:	4b55      	ldr	r3, [pc, #340]	; (80009f8 <main+0x32c>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d021      	beq.n	80008ec <main+0x220>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 80008a8:	f001 f95c 	bl	8001b64 <HAL_GetTick>
 80008ac:	4602      	mov	r2, r0
 80008ae:	4b4d      	ldr	r3, [pc, #308]	; (80009e4 <main+0x318>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	2b36      	cmp	r3, #54	; 0x36
 80008b6:	d919      	bls.n	80008ec <main+0x220>
		  {
			  if(HAL_GPIO_ReadPin(btn_mid_GPIO_Port, btn_mid_Pin))
 80008b8:	2140      	movs	r1, #64	; 0x40
 80008ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008be:	f002 ffd9 	bl	8003874 <HAL_GPIO_ReadPin>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d00e      	beq.n	80008e6 <main+0x21a>
			  {
				  // Toggle Menu Display state
				  if(DisplayState.Mode == Menu){
 80008c8:	4b4c      	ldr	r3, [pc, #304]	; (80009fc <main+0x330>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d103      	bne.n	80008d8 <main+0x20c>
					  LCD_changeDisplayMode(Measurement);
 80008d0:	2001      	movs	r0, #1
 80008d2:	f7ff fe23 	bl	800051c <LCD_changeDisplayMode>
 80008d6:	e006      	b.n	80008e6 <main+0x21a>
				  } else if(DisplayState.Mode == Measurement){
 80008d8:	4b48      	ldr	r3, [pc, #288]	; (80009fc <main+0x330>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d102      	bne.n	80008e6 <main+0x21a>
					  LCD_changeDisplayMode(Menu);
 80008e0:	2000      	movs	r0, #0
 80008e2:	f7ff fe1b 	bl	800051c <LCD_changeDisplayMode>
				  }
			  }
			  btn_mid_flag = 0;
 80008e6:	4b44      	ldr	r3, [pc, #272]	; (80009f8 <main+0x32c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  // ADC TIM16 interrupt
	  if(adc_timer_flag)
 80008ec:	4b44      	ldr	r3, [pc, #272]	; (8000a00 <main+0x334>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	f43f af42 	beq.w	800077a <main+0xae>
	  {
		  if(adc_count > 999)
 80008f6:	f8b7 37fe 	ldrh.w	r3, [r7, #2046]	; 0x7fe
 80008fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008fe:	f0c0 80bc 	bcc.w	8000a7a <main+0x3ae>
		  {
			  // Do calculations every 1000 readings
			  adc_count = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	f8a7 37fe 	strh.w	r3, [r7, #2046]	; 0x7fe
			  uint32_t total = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	f8c7 37f8 	str.w	r3, [r7, #2040]	; 0x7f8
			  uint16_t max = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	f8a7 37f6 	strh.w	r3, [r7, #2038]	; 0x7f6
			  uint16_t min = adc_array[99]; // arbitrary value
 8000914:	f107 0310 	add.w	r3, r7, #16
 8000918:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 800091c:	f8a7 37f4 	strh.w	r3, [r7, #2036]	; 0x7f4
			  int16_t diff = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	f8a7 37e2 	strh.w	r3, [r7, #2018]	; 0x7e2
			  int16_t prev_diff = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	f8a7 37f2 	strh.w	r3, [r7, #2034]	; 0x7f2
			  uint16_t mid_passes = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	f8a7 37f0 	strh.w	r3, [r7, #2032]	; 0x7f0
			  // 1000 measurements at 5kHz take 200ms
			  for(int x = 0; x < 1000; x++)
 8000932:	2300      	movs	r3, #0
 8000934:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
 8000938:	e035      	b.n	80009a6 <main+0x2da>
			  {
				  total += adc_array[x];
 800093a:	f107 0310 	add.w	r3, r7, #16
 800093e:	f8d7 27ec 	ldr.w	r2, [r7, #2028]	; 0x7ec
 8000942:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000946:	461a      	mov	r2, r3
 8000948:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	; 0x7f8
 800094c:	4413      	add	r3, r2
 800094e:	f8c7 37f8 	str.w	r3, [r7, #2040]	; 0x7f8
				  if(adc_array[x] > max)
 8000952:	f107 0310 	add.w	r3, r7, #16
 8000956:	f8d7 27ec 	ldr.w	r2, [r7, #2028]	; 0x7ec
 800095a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800095e:	f8b7 27f6 	ldrh.w	r2, [r7, #2038]	; 0x7f6
 8000962:	429a      	cmp	r2, r3
 8000964:	d208      	bcs.n	8000978 <main+0x2ac>
				  {
					  max = adc_array[x];
 8000966:	f107 0310 	add.w	r3, r7, #16
 800096a:	f8d7 27ec 	ldr.w	r2, [r7, #2028]	; 0x7ec
 800096e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000972:	f8a7 37f6 	strh.w	r3, [r7, #2038]	; 0x7f6
 8000976:	e011      	b.n	800099c <main+0x2d0>
				  }
				  else if(adc_array[x] < min)
 8000978:	f107 0310 	add.w	r3, r7, #16
 800097c:	f8d7 27ec 	ldr.w	r2, [r7, #2028]	; 0x7ec
 8000980:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000984:	f8b7 27f4 	ldrh.w	r2, [r7, #2036]	; 0x7f4
 8000988:	429a      	cmp	r2, r3
 800098a:	d907      	bls.n	800099c <main+0x2d0>
				  {
					  min = adc_array[x];
 800098c:	f107 0310 	add.w	r3, r7, #16
 8000990:	f8d7 27ec 	ldr.w	r2, [r7, #2028]	; 0x7ec
 8000994:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000998:	f8a7 37f4 	strh.w	r3, [r7, #2036]	; 0x7f4
			  for(int x = 0; x < 1000; x++)
 800099c:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 80009a0:	3301      	adds	r3, #1
 80009a2:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
 80009a6:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 80009aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009ae:	dbc4      	blt.n	800093a <main+0x26e>
				  }
			  }
//			  measured_offset = total/1000;
			  measured_offset = 1000;
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <main+0x338>)
 80009b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009b6:	801a      	strh	r2, [r3, #0]
			  for(int x = 0; x < 1000; x++)
 80009b8:	2300      	movs	r3, #0
 80009ba:	f8c7 37e8 	str.w	r3, [r7, #2024]	; 0x7e8
 80009be:	e045      	b.n	8000a4c <main+0x380>
 80009c0:	20000050 	.word	0x20000050
 80009c4:	044aa200 	.word	0x044aa200
 80009c8:	20000000 	.word	0x20000000
 80009cc:	200002f0 	.word	0x200002f0
 80009d0:	200002a0 	.word	0x200002a0
 80009d4:	20000374 	.word	0x20000374
 80009d8:	200002a4 	.word	0x200002a4
 80009dc:	20000038 	.word	0x20000038
 80009e0:	2000003b 	.word	0x2000003b
 80009e4:	20000040 	.word	0x20000040
 80009e8:	48000400 	.word	0x48000400
 80009ec:	2000003c 	.word	0x2000003c
 80009f0:	2000003d 	.word	0x2000003d
 80009f4:	2000003a 	.word	0x2000003a
 80009f8:	20000039 	.word	0x20000039
 80009fc:	200001f4 	.word	0x200001f4
 8000a00:	2000003e 	.word	0x2000003e
 8000a04:	2000004a 	.word	0x2000004a
			  {
				  // Calculate frequency
				  diff = adc_array[x] - measured_offset;
 8000a08:	f107 0310 	add.w	r3, r7, #16
 8000a0c:	f8d7 27e8 	ldr.w	r2, [r7, #2024]	; 0x7e8
 8000a10:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000a14:	4b3c      	ldr	r3, [pc, #240]	; (8000b08 <main+0x43c>)
 8000a16:	881b      	ldrh	r3, [r3, #0]
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	f8a7 37e2 	strh.w	r3, [r7, #2018]	; 0x7e2
				  if(diff > 0 && prev_diff < 0)
 8000a20:	f9b7 37e2 	ldrsh.w	r3, [r7, #2018]	; 0x7e2
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	dd08      	ble.n	8000a3a <main+0x36e>
 8000a28:	f9b7 37f2 	ldrsh.w	r3, [r7, #2034]	; 0x7f2
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	da04      	bge.n	8000a3a <main+0x36e>
				  {
					  mid_passes++;
 8000a30:	f8b7 37f0 	ldrh.w	r3, [r7, #2032]	; 0x7f0
 8000a34:	3301      	adds	r3, #1
 8000a36:	f8a7 37f0 	strh.w	r3, [r7, #2032]	; 0x7f0
				  }
				  prev_diff = diff;
 8000a3a:	f8b7 37e2 	ldrh.w	r3, [r7, #2018]	; 0x7e2
 8000a3e:	f8a7 37f2 	strh.w	r3, [r7, #2034]	; 0x7f2
			  for(int x = 0; x < 1000; x++)
 8000a42:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 8000a46:	3301      	adds	r3, #1
 8000a48:	f8c7 37e8 	str.w	r3, [r7, #2024]	; 0x7e8
 8000a4c:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 8000a50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a54:	dbd8      	blt.n	8000a08 <main+0x33c>
			  }
			  measured_period = 50000/(mid_passes);
 8000a56:	f8b7 37f0 	ldrh.w	r3, [r7, #2032]	; 0x7f0
 8000a5a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000a5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	4b29      	ldr	r3, [pc, #164]	; (8000b0c <main+0x440>)
 8000a66:	801a      	strh	r2, [r3, #0]
//			  measured_frequency = 1000000/measured_period;
			  measured_frequency = 5250;
 8000a68:	4b29      	ldr	r3, [pc, #164]	; (8000b10 <main+0x444>)
 8000a6a:	f241 4282 	movw	r2, #5250	; 0x1482
 8000a6e:	801a      	strh	r2, [r3, #0]
//			  measured_amplitude = max - min;
			  measured_amplitude = 500;
 8000a70:	4b28      	ldr	r3, [pc, #160]	; (8000b14 <main+0x448>)
 8000a72:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a76:	801a      	strh	r2, [r3, #0]
 8000a78:	e03d      	b.n	8000af6 <main+0x42a>
//			  sprintf(msg, "Max: %u\nMin: %u\nOffset: %u\nFrequency: %u\nAmplitude: %u\n\n", max, min, offset, frequency, amplitude);
//			  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 10);
		  }
		  else
		  {
			  HAL_ADC_Start(&hadc1);
 8000a7a:	4827      	ldr	r0, [pc, #156]	; (8000b18 <main+0x44c>)
 8000a7c:	f001 fa9a 	bl	8001fb4 <HAL_ADC_Start>
			  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000a80:	f04f 31ff 	mov.w	r1, #4294967295
 8000a84:	4824      	ldr	r0, [pc, #144]	; (8000b18 <main+0x44c>)
 8000a86:	f001 fbe1 	bl	800224c <HAL_ADC_PollForConversion>
			  raw = HAL_ADC_GetValue(&hadc1);
 8000a8a:	4823      	ldr	r0, [pc, #140]	; (8000b18 <main+0x44c>)
 8000a8c:	f001 fce0 	bl	8002450 <HAL_ADC_GetValue>
 8000a90:	4603      	mov	r3, r0
 8000a92:	f8a7 37e6 	strh.w	r3, [r7, #2022]	; 0x7e6
			  HAL_ADC_Stop(&hadc1);
 8000a96:	4820      	ldr	r0, [pc, #128]	; (8000b18 <main+0x44c>)
 8000a98:	f001 fba2 	bl	80021e0 <HAL_ADC_Stop>
			  millivolts = raw*3300/4095;
 8000a9c:	f8b7 37e6 	ldrh.w	r3, [r7, #2022]	; 0x7e6
 8000aa0:	f640 42e4 	movw	r2, #3300	; 0xce4
 8000aa4:	fb02 f303 	mul.w	r3, r2, r3
 8000aa8:	4a1c      	ldr	r2, [pc, #112]	; (8000b1c <main+0x450>)
 8000aaa:	fb82 1203 	smull	r1, r2, r2, r3
 8000aae:	441a      	add	r2, r3
 8000ab0:	12d2      	asrs	r2, r2, #11
 8000ab2:	17db      	asrs	r3, r3, #31
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	f8a7 37e4 	strh.w	r3, [r7, #2020]	; 0x7e4
			  millivolts += 100*millivolts/1000; // Calibration
 8000aba:	f8b7 37e4 	ldrh.w	r3, [r7, #2020]	; 0x7e4
 8000abe:	2264      	movs	r2, #100	; 0x64
 8000ac0:	fb02 f303 	mul.w	r3, r2, r3
 8000ac4:	4a16      	ldr	r2, [pc, #88]	; (8000b20 <main+0x454>)
 8000ac6:	fb82 1203 	smull	r1, r2, r2, r3
 8000aca:	1192      	asrs	r2, r2, #6
 8000acc:	17db      	asrs	r3, r3, #31
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	b29a      	uxth	r2, r3
 8000ad2:	f8b7 37e4 	ldrh.w	r3, [r7, #2020]	; 0x7e4
 8000ad6:	4413      	add	r3, r2
 8000ad8:	f8a7 37e4 	strh.w	r3, [r7, #2020]	; 0x7e4
			  adc_array[adc_count] = millivolts;
 8000adc:	f8b7 27fe 	ldrh.w	r2, [r7, #2046]	; 0x7fe
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	f8b7 17e4 	ldrh.w	r1, [r7, #2020]	; 0x7e4
 8000ae8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			  adc_count++;
 8000aec:	f8b7 37fe 	ldrh.w	r3, [r7, #2046]	; 0x7fe
 8000af0:	3301      	adds	r3, #1
 8000af2:	f8a7 37fe 	strh.w	r3, [r7, #2046]	; 0x7fe
		  }

		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8000af6:	2110      	movs	r1, #16
 8000af8:	480a      	ldr	r0, [pc, #40]	; (8000b24 <main+0x458>)
 8000afa:	f002 feeb 	bl	80038d4 <HAL_GPIO_TogglePin>
		  adc_timer_flag = 0;
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <main+0x45c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]
	  if(message_received && rx_byte[0] != '\n')
 8000b04:	e639      	b.n	800077a <main+0xae>
 8000b06:	bf00      	nop
 8000b08:	2000004a 	.word	0x2000004a
 8000b0c:	20000048 	.word	0x20000048
 8000b10:	20000046 	.word	0x20000046
 8000b14:	20000044 	.word	0x20000044
 8000b18:	20000250 	.word	0x20000250
 8000b1c:	80080081 	.word	0x80080081
 8000b20:	10624dd3 	.word	0x10624dd3
 8000b24:	48000800 	.word	0x48000800
 8000b28:	2000003e 	.word	0x2000003e

08000b2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b0a6      	sub	sp, #152	; 0x98
 8000b30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b32:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b36:	2228      	movs	r2, #40	; 0x28
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f006 fa0c 	bl	8006f58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b40:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	2258      	movs	r2, #88	; 0x58
 8000b54:	2100      	movs	r1, #0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f006 f9fe 	bl	8006f58 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b60:	2301      	movs	r3, #1
 8000b62:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b64:	2310      	movs	r3, #16
 8000b66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b78:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000b80:	2300      	movs	r3, #0
 8000b82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b86:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f002 fed4 	bl	8003938 <HAL_RCC_OscConfig>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b96:	f000 fd77 	bl	8001688 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b9a:	230f      	movs	r3, #15
 8000b9c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000baa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bac:	2300      	movs	r3, #0
 8000bae:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bb0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000bb4:	2102      	movs	r1, #2
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f003 fdd4 	bl	8004764 <HAL_RCC_ClockConfig>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000bc2:	f000 fd61 	bl	8001688 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM16
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <SystemClock_Config+0xcc>)
 8000bc8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000bce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	4618      	mov	r0, r3
 8000be0:	f003 fff6 	bl	8004bd0 <HAL_RCCEx_PeriphCLKConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000bea:	f000 fd4d 	bl	8001688 <Error_Handler>
  }
}
 8000bee:	bf00      	nop
 8000bf0:	3798      	adds	r7, #152	; 0x98
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	00900082 	.word	0x00900082

08000bfc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c02:	f107 031c 	add.w	r3, r7, #28
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
 8000c1c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000c1e:	4b2e      	ldr	r3, [pc, #184]	; (8000cd8 <MX_ADC1_Init+0xdc>)
 8000c20:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c24:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c26:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <MX_ADC1_Init+0xdc>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c2c:	4b2a      	ldr	r3, [pc, #168]	; (8000cd8 <MX_ADC1_Init+0xdc>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c32:	4b29      	ldr	r3, [pc, #164]	; (8000cd8 <MX_ADC1_Init+0xdc>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c38:	4b27      	ldr	r3, [pc, #156]	; (8000cd8 <MX_ADC1_Init+0xdc>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c3e:	4b26      	ldr	r3, [pc, #152]	; (8000cd8 <MX_ADC1_Init+0xdc>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c46:	4b24      	ldr	r3, [pc, #144]	; (8000cd8 <MX_ADC1_Init+0xdc>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c4c:	4b22      	ldr	r3, [pc, #136]	; (8000cd8 <MX_ADC1_Init+0xdc>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c52:	4b21      	ldr	r3, [pc, #132]	; (8000cd8 <MX_ADC1_Init+0xdc>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c58:	4b1f      	ldr	r3, [pc, #124]	; (8000cd8 <MX_ADC1_Init+0xdc>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c5e:	4b1e      	ldr	r3, [pc, #120]	; (8000cd8 <MX_ADC1_Init+0xdc>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c66:	4b1c      	ldr	r3, [pc, #112]	; (8000cd8 <MX_ADC1_Init+0xdc>)
 8000c68:	2204      	movs	r2, #4
 8000c6a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c6c:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <MX_ADC1_Init+0xdc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c72:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <MX_ADC1_Init+0xdc>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c78:	4817      	ldr	r0, [pc, #92]	; (8000cd8 <MX_ADC1_Init+0xdc>)
 8000c7a:	f000 ffa1 	bl	8001bc0 <HAL_ADC_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000c84:	f000 fd00 	bl	8001688 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c8c:	f107 031c 	add.w	r3, r7, #28
 8000c90:	4619      	mov	r1, r3
 8000c92:	4811      	ldr	r0, [pc, #68]	; (8000cd8 <MX_ADC1_Init+0xdc>)
 8000c94:	f001 fed6 	bl	8002a44 <HAL_ADCEx_MultiModeConfigChannel>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000c9e:	f000 fcf3 	bl	8001688 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4806      	ldr	r0, [pc, #24]	; (8000cd8 <MX_ADC1_Init+0xdc>)
 8000cc0:	f001 fbd4 	bl	800246c <HAL_ADC_ConfigChannel>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000cca:	f000 fcdd 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cce:	bf00      	nop
 8000cd0:	3728      	adds	r7, #40	; 0x28
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000250 	.word	0x20000250

08000cdc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8000cec:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <MX_DAC1_Init+0x4c>)
 8000cee:	4a0f      	ldr	r2, [pc, #60]	; (8000d2c <MX_DAC1_Init+0x50>)
 8000cf0:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000cf2:	480d      	ldr	r0, [pc, #52]	; (8000d28 <MX_DAC1_Init+0x4c>)
 8000cf4:	f002 fa27 	bl	8003146 <HAL_DAC_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8000cfe:	f000 fcc3 	bl	8001688 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000d02:	2324      	movs	r3, #36	; 0x24
 8000d04:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4805      	ldr	r0, [pc, #20]	; (8000d28 <MX_DAC1_Init+0x4c>)
 8000d12:	f002 fa3a 	bl	800318a <HAL_DAC_ConfigChannel>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8000d1c:	f000 fcb4 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000d20:	bf00      	nop
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	200001f8 	.word	0x200001f8
 8000d2c:	40007400 	.word	0x40007400

08000d30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b088      	sub	sp, #32
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d36:	f107 0310 	add.w	r3, r7, #16
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d4e:	4b1e      	ldr	r3, [pc, #120]	; (8000dc8 <MX_TIM2_Init+0x98>)
 8000d50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d54:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d56:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <MX_TIM2_Init+0x98>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <MX_TIM2_Init+0x98>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000d62:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <MX_TIM2_Init+0x98>)
 8000d64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d6a:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <MX_TIM2_Init+0x98>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d70:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <MX_TIM2_Init+0x98>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d76:	4814      	ldr	r0, [pc, #80]	; (8000dc8 <MX_TIM2_Init+0x98>)
 8000d78:	f004 f948 	bl	800500c <HAL_TIM_Base_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d82:	f000 fc81 	bl	8001688 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d8a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d8c:	f107 0310 	add.w	r3, r7, #16
 8000d90:	4619      	mov	r1, r3
 8000d92:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <MX_TIM2_Init+0x98>)
 8000d94:	f004 fb89 	bl	80054aa <HAL_TIM_ConfigClockSource>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d9e:	f000 fc73 	bl	8001688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000da2:	2320      	movs	r3, #32
 8000da4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	4619      	mov	r1, r3
 8000dae:	4806      	ldr	r0, [pc, #24]	; (8000dc8 <MX_TIM2_Init+0x98>)
 8000db0:	f004 fd9a 	bl	80058e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000dba:	f000 fc65 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	3720      	adds	r7, #32
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200002a4 	.word	0x200002a4

08000dcc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <MX_TIM16_Init+0x44>)
 8000dd2:	4a10      	ldr	r2, [pc, #64]	; (8000e14 <MX_TIM16_Init+0x48>)
 8000dd4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 72-1;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <MX_TIM16_Init+0x44>)
 8000dd8:	2247      	movs	r2, #71	; 0x47
 8000dda:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <MX_TIM16_Init+0x44>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 50 - 1;
 8000de2:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <MX_TIM16_Init+0x44>)
 8000de4:	2231      	movs	r2, #49	; 0x31
 8000de6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de8:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <MX_TIM16_Init+0x44>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000dee:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <MX_TIM16_Init+0x44>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <MX_TIM16_Init+0x44>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <MX_TIM16_Init+0x44>)
 8000dfc:	f004 f906 	bl	800500c <HAL_TIM_Base_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8000e06:	f000 fc3f 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000374 	.word	0x20000374
 8000e14:	40014400 	.word	0x40014400

08000e18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e1c:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <MX_USART2_UART_Init+0x58>)
 8000e1e:	4a15      	ldr	r2, [pc, #84]	; (8000e74 <MX_USART2_UART_Init+0x5c>)
 8000e20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e22:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <MX_USART2_UART_Init+0x58>)
 8000e24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e2a:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <MX_USART2_UART_Init+0x58>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <MX_USART2_UART_Init+0x58>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <MX_USART2_UART_Init+0x58>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <MX_USART2_UART_Init+0x58>)
 8000e3e:	220c      	movs	r2, #12
 8000e40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <MX_USART2_UART_Init+0x58>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e48:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <MX_USART2_UART_Init+0x58>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <MX_USART2_UART_Init+0x58>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <MX_USART2_UART_Init+0x58>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e5a:	4805      	ldr	r0, [pc, #20]	; (8000e70 <MX_USART2_UART_Init+0x58>)
 8000e5c:	f004 fdee 	bl	8005a3c <HAL_UART_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e66:	f000 fc0f 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200002f0 	.word	0x200002f0
 8000e74:	40004400 	.word	0x40004400

08000e78 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <MX_DMA_Init+0x38>)
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <MX_DMA_Init+0x38>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6153      	str	r3, [r2, #20]
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <MX_DMA_Init+0x38>)
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2100      	movs	r1, #0
 8000e9a:	200d      	movs	r0, #13
 8000e9c:	f002 f91d 	bl	80030da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000ea0:	200d      	movs	r0, #13
 8000ea2:	f002 f936 	bl	8003112 <HAL_NVIC_EnableIRQ>

}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40021000 	.word	0x40021000

08000eb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	; 0x28
 8000eb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
 8000ec8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eca:	4b75      	ldr	r3, [pc, #468]	; (80010a0 <MX_GPIO_Init+0x1ec>)
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	4a74      	ldr	r2, [pc, #464]	; (80010a0 <MX_GPIO_Init+0x1ec>)
 8000ed0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ed4:	6153      	str	r3, [r2, #20]
 8000ed6:	4b72      	ldr	r3, [pc, #456]	; (80010a0 <MX_GPIO_Init+0x1ec>)
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ee2:	4b6f      	ldr	r3, [pc, #444]	; (80010a0 <MX_GPIO_Init+0x1ec>)
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	4a6e      	ldr	r2, [pc, #440]	; (80010a0 <MX_GPIO_Init+0x1ec>)
 8000ee8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000eec:	6153      	str	r3, [r2, #20]
 8000eee:	4b6c      	ldr	r3, [pc, #432]	; (80010a0 <MX_GPIO_Init+0x1ec>)
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efa:	4b69      	ldr	r3, [pc, #420]	; (80010a0 <MX_GPIO_Init+0x1ec>)
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	4a68      	ldr	r2, [pc, #416]	; (80010a0 <MX_GPIO_Init+0x1ec>)
 8000f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f04:	6153      	str	r3, [r2, #20]
 8000f06:	4b66      	ldr	r3, [pc, #408]	; (80010a0 <MX_GPIO_Init+0x1ec>)
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f12:	4b63      	ldr	r3, [pc, #396]	; (80010a0 <MX_GPIO_Init+0x1ec>)
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	4a62      	ldr	r2, [pc, #392]	; (80010a0 <MX_GPIO_Init+0x1ec>)
 8000f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f1c:	6153      	str	r3, [r2, #20]
 8000f1e:	4b60      	ldr	r3, [pc, #384]	; (80010a0 <MX_GPIO_Init+0x1ec>)
 8000f20:	695b      	ldr	r3, [r3, #20]
 8000f22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD5_Pin|LD4_Pin|lcd_D6_Pin 
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f44f 51f1 	mov.w	r1, #7712	; 0x1e20
 8000f30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f34:	f002 fcb6 	bl	80038a4 <HAL_GPIO_WritePin>
                          |lcd_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|lcd_D4_Pin|LD3_Pin|lcd_D5_Pin, GPIO_PIN_RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8000f3e:	4859      	ldr	r0, [pc, #356]	; (80010a4 <MX_GPIO_Init+0x1f0>)
 8000f40:	f002 fcb0 	bl	80038a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, lcd_blown_Pin|lcd_RS_Pin|lcd_E_Pin, GPIO_PIN_RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8000f4a:	4857      	ldr	r0, [pc, #348]	; (80010a8 <MX_GPIO_Init+0x1f4>)
 8000f4c:	f002 fcaa 	bl	80038a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f56:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	4619      	mov	r1, r3
 8000f66:	484f      	ldr	r0, [pc, #316]	; (80010a4 <MX_GPIO_Init+0x1f0>)
 8000f68:	f002 fafa 	bl	8003560 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD5_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD5_Pin|LD4_Pin;
 8000f6c:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 8000f70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f72:	2301      	movs	r3, #1
 8000f74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4619      	mov	r1, r3
 8000f84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f88:	f002 faea 	bl	8003560 <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_mid_Pin */
  GPIO_InitStruct.Pin = btn_mid_Pin;
 8000f8c:	2340      	movs	r3, #64	; 0x40
 8000f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f90:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000f94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f96:	2301      	movs	r3, #1
 8000f98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn_mid_GPIO_Port, &GPIO_InitStruct);
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa4:	f002 fadc 	bl	8003560 <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_right_Pin */
  GPIO_InitStruct.Pin = btn_right_Pin;
 8000fa8:	2380      	movs	r3, #128	; 0x80
 8000faa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn_right_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc0:	f002 face 	bl	8003560 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD3_Pin;
 8000fc4:	2390      	movs	r3, #144	; 0x90
 8000fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4832      	ldr	r0, [pc, #200]	; (80010a4 <MX_GPIO_Init+0x1f0>)
 8000fdc:	f002 fac0 	bl	8003560 <HAL_GPIO_Init>

  /*Configure GPIO pins : btn_down_Pin btn_left_Pin btn_up_Pin */
  GPIO_InitStruct.Pin = btn_down_Pin|btn_left_Pin|btn_up_Pin;
 8000fe0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000fe4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fe6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fec:	2301      	movs	r3, #1
 8000fee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	482c      	ldr	r0, [pc, #176]	; (80010a8 <MX_GPIO_Init+0x1f4>)
 8000ff8:	f002 fab2 	bl	8003560 <HAL_GPIO_Init>

  /*Configure GPIO pin : lcd_blown_Pin */
  GPIO_InitStruct.Pin = lcd_blown_Pin;
 8000ffc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001002:	2311      	movs	r3, #17
 8001004:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(lcd_blown_GPIO_Port, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	4824      	ldr	r0, [pc, #144]	; (80010a8 <MX_GPIO_Init+0x1f4>)
 8001016:	f002 faa3 	bl	8003560 <HAL_GPIO_Init>

  /*Configure GPIO pins : lcd_RS_Pin lcd_E_Pin */
  GPIO_InitStruct.Pin = lcd_RS_Pin|lcd_E_Pin;
 800101a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800101e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	2301      	movs	r3, #1
 8001022:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4619      	mov	r1, r3
 8001032:	481d      	ldr	r0, [pc, #116]	; (80010a8 <MX_GPIO_Init+0x1f4>)
 8001034:	f002 fa94 	bl	8003560 <HAL_GPIO_Init>

  /*Configure GPIO pins : lcd_D4_Pin lcd_D5_Pin */
  GPIO_InitStruct.Pin = lcd_D4_Pin|lcd_D5_Pin;
 8001038:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800103c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800103e:	2311      	movs	r3, #17
 8001040:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	4814      	ldr	r0, [pc, #80]	; (80010a4 <MX_GPIO_Init+0x1f0>)
 8001052:	f002 fa85 	bl	8003560 <HAL_GPIO_Init>

  /*Configure GPIO pins : lcd_D6_Pin lcd_D7_Pin */
  GPIO_InitStruct.Pin = lcd_D6_Pin|lcd_D7_Pin;
 8001056:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800105a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800105c:	2311      	movs	r3, #17
 800105e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2300      	movs	r3, #0
 8001066:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4619      	mov	r1, r3
 800106e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001072:	f002 fa75 	bl	8003560 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2100      	movs	r1, #0
 800107a:	2017      	movs	r0, #23
 800107c:	f002 f82d 	bl	80030da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001080:	2017      	movs	r0, #23
 8001082:	f002 f846 	bl	8003112 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2100      	movs	r1, #0
 800108a:	2028      	movs	r0, #40	; 0x28
 800108c:	f002 f825 	bl	80030da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001090:	2028      	movs	r0, #40	; 0x28
 8001092:	f002 f83e 	bl	8003112 <HAL_NVIC_EnableIRQ>

}
 8001096:	bf00      	nop
 8001098:	3728      	adds	r7, #40	; 0x28
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40021000 	.word	0x40021000
 80010a4:	48000800 	.word	0x48000800
 80010a8:	48000400 	.word	0x48000400

080010ac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this interrupt
	if(htim == &htim16)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a06      	ldr	r2, [pc, #24]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d102      	bne.n	80010c2 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		adc_timer_flag = 1;
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80010be:	2201      	movs	r2, #1
 80010c0:	701a      	strb	r2, [r3, #0]
	}
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000374 	.word	0x20000374
 80010d4:	2000003e 	.word	0x2000003e

080010d8 <uartRxComplete>:

bool uartRxComplete(uint8_t last_byte)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
	if(last_byte == '!')
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	2b21      	cmp	r3, #33	; 0x21
 80010e6:	d101      	bne.n	80010ec <uartRxComplete+0x14>
	{
		return true;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e000      	b.n	80010ee <uartRxComplete+0x16>
	}
	else
	{
		return false;
 80010ec:	2300      	movs	r3, #0
	}
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <interpret_rx_message>:

void interpret_rx_message(uint8_t *rx_array, uint8_t length)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	70fb      	strb	r3, [r7, #3]

	if(length > 7)
 8001108:	78fb      	ldrb	r3, [r7, #3]
 800110a:	2b07      	cmp	r3, #7
 800110c:	d971      	bls.n	80011f2 <interpret_rx_message+0xf6>
	{
		if(rx_array[2] == '*')
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3302      	adds	r3, #2
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b2a      	cmp	r3, #42	; 0x2a
 8001116:	d124      	bne.n	8001162 <interpret_rx_message+0x66>
		{
			// Requests
			switch(rx_array[4])
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3304      	adds	r3, #4
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b6d      	cmp	r3, #109	; 0x6d
 8001120:	d002      	beq.n	8001128 <interpret_rx_message+0x2c>
 8001122:	2b73      	cmp	r3, #115	; 0x73
 8001124:	d007      	beq.n	8001136 <interpret_rx_message+0x3a>
					request_status();
					break;

				default:
					// Problems
					break;
 8001126:	e064      	b.n	80011f2 <interpret_rx_message+0xf6>
					request_measurement(rx_array[6]);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3306      	adds	r3, #6
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	4618      	mov	r0, r3
 8001130:	f000 f868 	bl	8001204 <request_measurement>
					break;
 8001134:	e05d      	b.n	80011f2 <interpret_rx_message+0xf6>
					if(rx_array[6] == '0'){
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3306      	adds	r3, #6
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b30      	cmp	r3, #48	; 0x30
 800113e:	d104      	bne.n	800114a <interpret_rx_message+0x4e>
						OutputState.On = false;
 8001140:	4b2e      	ldr	r3, [pc, #184]	; (80011fc <interpret_rx_message+0x100>)
 8001142:	2200      	movs	r2, #0
 8001144:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 8001148:	e008      	b.n	800115c <interpret_rx_message+0x60>
					} else if(rx_array[6] == '1'){
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3306      	adds	r3, #6
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b31      	cmp	r3, #49	; 0x31
 8001152:	d103      	bne.n	800115c <interpret_rx_message+0x60>
						OutputState.On = true;
 8001154:	4b29      	ldr	r3, [pc, #164]	; (80011fc <interpret_rx_message+0x100>)
 8001156:	2201      	movs	r2, #1
 8001158:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
					request_status();
 800115c:	f000 f9a8 	bl	80014b0 <request_status>
					break;
 8001160:	e047      	b.n	80011f2 <interpret_rx_message+0xf6>
			}
		}
		else if(rx_array[2] == '$')
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3302      	adds	r3, #2
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b24      	cmp	r3, #36	; 0x24
 800116a:	d137      	bne.n	80011dc <interpret_rx_message+0xe0>
		{
			// Set
			uint8_t key1 = rx_array[4];
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	791b      	ldrb	r3, [r3, #4]
 8001170:	73fb      	strb	r3, [r7, #15]
			uint8_t key2 = rx_array[5];
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	795b      	ldrb	r3, [r3, #5]
 8001176:	73bb      	strb	r3, [r7, #14]
			if(key1 == 'D' && key2 == 'V'){
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	2b44      	cmp	r3, #68	; 0x44
 800117c:	d106      	bne.n	800118c <interpret_rx_message+0x90>
 800117e:	7bbb      	ldrb	r3, [r7, #14]
 8001180:	2b56      	cmp	r3, #86	; 0x56
 8001182:	d103      	bne.n	800118c <interpret_rx_message+0x90>
				// DC Voltage
				measurement_mode = 0;
 8001184:	4b1e      	ldr	r3, [pc, #120]	; (8001200 <interpret_rx_message+0x104>)
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
 800118a:	e032      	b.n	80011f2 <interpret_rx_message+0xf6>
			} else if (key1 == 'A' && key2 == 'V'){
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	2b41      	cmp	r3, #65	; 0x41
 8001190:	d106      	bne.n	80011a0 <interpret_rx_message+0xa4>
 8001192:	7bbb      	ldrb	r3, [r7, #14]
 8001194:	2b56      	cmp	r3, #86	; 0x56
 8001196:	d103      	bne.n	80011a0 <interpret_rx_message+0xa4>
				// AC Voltage
				measurement_mode = 1;
 8001198:	4b19      	ldr	r3, [pc, #100]	; (8001200 <interpret_rx_message+0x104>)
 800119a:	2201      	movs	r2, #1
 800119c:	701a      	strb	r2, [r3, #0]
 800119e:	e028      	b.n	80011f2 <interpret_rx_message+0xf6>
			} else if (key1 == 'D' && key2 == 'I'){
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	2b44      	cmp	r3, #68	; 0x44
 80011a4:	d106      	bne.n	80011b4 <interpret_rx_message+0xb8>
 80011a6:	7bbb      	ldrb	r3, [r7, #14]
 80011a8:	2b49      	cmp	r3, #73	; 0x49
 80011aa:	d103      	bne.n	80011b4 <interpret_rx_message+0xb8>
				// DC Current
				measurement_mode = 2;
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <interpret_rx_message+0x104>)
 80011ae:	2202      	movs	r2, #2
 80011b0:	701a      	strb	r2, [r3, #0]
 80011b2:	e01e      	b.n	80011f2 <interpret_rx_message+0xf6>
			} else if (key1 == 'A' && key2 == 'I'){
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
 80011b6:	2b41      	cmp	r3, #65	; 0x41
 80011b8:	d106      	bne.n	80011c8 <interpret_rx_message+0xcc>
 80011ba:	7bbb      	ldrb	r3, [r7, #14]
 80011bc:	2b49      	cmp	r3, #73	; 0x49
 80011be:	d103      	bne.n	80011c8 <interpret_rx_message+0xcc>
				// AC Current
				measurement_mode = 3;
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <interpret_rx_message+0x104>)
 80011c2:	2203      	movs	r2, #3
 80011c4:	701a      	strb	r2, [r3, #0]
 80011c6:	e014      	b.n	80011f2 <interpret_rx_message+0xf6>
			} else if (key1 == 'T' && key2 == 'C'){
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	2b54      	cmp	r3, #84	; 0x54
 80011cc:	d111      	bne.n	80011f2 <interpret_rx_message+0xf6>
 80011ce:	7bbb      	ldrb	r3, [r7, #14]
 80011d0:	2b43      	cmp	r3, #67	; 0x43
 80011d2:	d10e      	bne.n	80011f2 <interpret_rx_message+0xf6>
				// Temperature
				measurement_mode = 4;
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <interpret_rx_message+0x104>)
 80011d6:	2204      	movs	r2, #4
 80011d8:	701a      	strb	r2, [r3, #0]
		else
		{
//			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
		}
	}
}
 80011da:	e00a      	b.n	80011f2 <interpret_rx_message+0xf6>
		}else if(rx_array[2] == '^'){
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3302      	adds	r3, #2
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b5e      	cmp	r3, #94	; 0x5e
 80011e4:	d105      	bne.n	80011f2 <interpret_rx_message+0xf6>
			set_output_parameter(rx_array, length);
 80011e6:	78fb      	ldrb	r3, [r7, #3]
 80011e8:	4619      	mov	r1, r3
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 f9be 	bl	800156c <set_output_parameter>
}
 80011f0:	e7ff      	b.n	80011f2 <interpret_rx_message+0xf6>
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000050 	.word	0x20000050
 8001200:	2000004c 	.word	0x2000004c

08001204 <request_measurement>:

void request_measurement(uint8_t parameter)
{
 8001204:	b590      	push	{r4, r7, lr}
 8001206:	b087      	sub	sp, #28
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
	uint8_t msg[13] = "@,m,x,xxxx,!\n";
 800120e:	4b9f      	ldr	r3, [pc, #636]	; (800148c <request_measurement+0x288>)
 8001210:	f107 0408 	add.w	r4, r7, #8
 8001214:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001216:	c407      	stmia	r4!, {r0, r1, r2}
 8001218:	7023      	strb	r3, [r4, #0]
	switch(parameter){
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	3b61      	subs	r3, #97	; 0x61
 800121e:	2b13      	cmp	r3, #19
 8001220:	f200 8122 	bhi.w	8001468 <request_measurement+0x264>
 8001224:	a201      	add	r2, pc, #4	; (adr r2, 800122c <request_measurement+0x28>)
 8001226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800122a:	bf00      	nop
 800122c:	0800127d 	.word	0x0800127d
 8001230:	08001469 	.word	0x08001469
 8001234:	08001469 	.word	0x08001469
 8001238:	08001469 	.word	0x08001469
 800123c:	08001469 	.word	0x08001469
 8001240:	080013c5 	.word	0x080013c5
 8001244:	08001469 	.word	0x08001469
 8001248:	08001469 	.word	0x08001469
 800124c:	08001469 	.word	0x08001469
 8001250:	08001469 	.word	0x08001469
 8001254:	08001469 	.word	0x08001469
 8001258:	08001469 	.word	0x08001469
 800125c:	08001469 	.word	0x08001469
 8001260:	08001469 	.word	0x08001469
 8001264:	08001321 	.word	0x08001321
 8001268:	08001469 	.word	0x08001469
 800126c:	08001469 	.word	0x08001469
 8001270:	08001469 	.word	0x08001469
 8001274:	08001469 	.word	0x08001469
 8001278:	08001469 	.word	0x08001469
		case 't':
			// Type
			break;
		case 'a':
			// Amplitude (peak-to-peak)
			msg[4] = 'a';
 800127c:	2361      	movs	r3, #97	; 0x61
 800127e:	733b      	strb	r3, [r7, #12]
			msg[6] = ((measured_amplitude/1000) % 10) + 48;
 8001280:	4b83      	ldr	r3, [pc, #524]	; (8001490 <request_measurement+0x28c>)
 8001282:	881b      	ldrh	r3, [r3, #0]
 8001284:	4a83      	ldr	r2, [pc, #524]	; (8001494 <request_measurement+0x290>)
 8001286:	fba2 2303 	umull	r2, r3, r2, r3
 800128a:	099b      	lsrs	r3, r3, #6
 800128c:	b29a      	uxth	r2, r3
 800128e:	4b82      	ldr	r3, [pc, #520]	; (8001498 <request_measurement+0x294>)
 8001290:	fba3 1302 	umull	r1, r3, r3, r2
 8001294:	08d9      	lsrs	r1, r3, #3
 8001296:	460b      	mov	r3, r1
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	440b      	add	r3, r1
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	3330      	adds	r3, #48	; 0x30
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	73bb      	strb	r3, [r7, #14]
			msg[7] = ((measured_amplitude/100) % 10) + 48;
 80012aa:	4b79      	ldr	r3, [pc, #484]	; (8001490 <request_measurement+0x28c>)
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	4a7b      	ldr	r2, [pc, #492]	; (800149c <request_measurement+0x298>)
 80012b0:	fba2 2303 	umull	r2, r3, r2, r3
 80012b4:	095b      	lsrs	r3, r3, #5
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	4b77      	ldr	r3, [pc, #476]	; (8001498 <request_measurement+0x294>)
 80012ba:	fba3 1302 	umull	r1, r3, r3, r2
 80012be:	08d9      	lsrs	r1, r3, #3
 80012c0:	460b      	mov	r3, r1
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	440b      	add	r3, r1
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	3330      	adds	r3, #48	; 0x30
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	73fb      	strb	r3, [r7, #15]
			msg[8] = ((measured_amplitude/10) % 10) + 48;
 80012d4:	4b6e      	ldr	r3, [pc, #440]	; (8001490 <request_measurement+0x28c>)
 80012d6:	881b      	ldrh	r3, [r3, #0]
 80012d8:	4a6f      	ldr	r2, [pc, #444]	; (8001498 <request_measurement+0x294>)
 80012da:	fba2 2303 	umull	r2, r3, r2, r3
 80012de:	08db      	lsrs	r3, r3, #3
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	4b6d      	ldr	r3, [pc, #436]	; (8001498 <request_measurement+0x294>)
 80012e4:	fba3 1302 	umull	r1, r3, r3, r2
 80012e8:	08d9      	lsrs	r1, r3, #3
 80012ea:	460b      	mov	r3, r1
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	440b      	add	r3, r1
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	3330      	adds	r3, #48	; 0x30
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	743b      	strb	r3, [r7, #16]
			msg[9] = (measured_amplitude % 10) + 48;
 80012fe:	4b64      	ldr	r3, [pc, #400]	; (8001490 <request_measurement+0x28c>)
 8001300:	881a      	ldrh	r2, [r3, #0]
 8001302:	4b65      	ldr	r3, [pc, #404]	; (8001498 <request_measurement+0x294>)
 8001304:	fba3 1302 	umull	r1, r3, r3, r2
 8001308:	08d9      	lsrs	r1, r3, #3
 800130a:	460b      	mov	r3, r1
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	440b      	add	r3, r1
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	b29b      	uxth	r3, r3
 8001316:	b2db      	uxtb	r3, r3
 8001318:	3330      	adds	r3, #48	; 0x30
 800131a:	b2db      	uxtb	r3, r3
 800131c:	747b      	strb	r3, [r7, #17]
			break;
 800131e:	e0a4      	b.n	800146a <request_measurement+0x266>
		case 'o':
			// Offset
			msg[4] = 'o';
 8001320:	236f      	movs	r3, #111	; 0x6f
 8001322:	733b      	strb	r3, [r7, #12]
			msg[6] = ((measured_offset/1000) % 10) + 48;
 8001324:	4b5e      	ldr	r3, [pc, #376]	; (80014a0 <request_measurement+0x29c>)
 8001326:	881b      	ldrh	r3, [r3, #0]
 8001328:	4a5a      	ldr	r2, [pc, #360]	; (8001494 <request_measurement+0x290>)
 800132a:	fba2 2303 	umull	r2, r3, r2, r3
 800132e:	099b      	lsrs	r3, r3, #6
 8001330:	b29a      	uxth	r2, r3
 8001332:	4b59      	ldr	r3, [pc, #356]	; (8001498 <request_measurement+0x294>)
 8001334:	fba3 1302 	umull	r1, r3, r3, r2
 8001338:	08d9      	lsrs	r1, r3, #3
 800133a:	460b      	mov	r3, r1
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	440b      	add	r3, r1
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	b29b      	uxth	r3, r3
 8001346:	b2db      	uxtb	r3, r3
 8001348:	3330      	adds	r3, #48	; 0x30
 800134a:	b2db      	uxtb	r3, r3
 800134c:	73bb      	strb	r3, [r7, #14]
			msg[7] = ((measured_offset/100) % 10) + 48;
 800134e:	4b54      	ldr	r3, [pc, #336]	; (80014a0 <request_measurement+0x29c>)
 8001350:	881b      	ldrh	r3, [r3, #0]
 8001352:	4a52      	ldr	r2, [pc, #328]	; (800149c <request_measurement+0x298>)
 8001354:	fba2 2303 	umull	r2, r3, r2, r3
 8001358:	095b      	lsrs	r3, r3, #5
 800135a:	b29a      	uxth	r2, r3
 800135c:	4b4e      	ldr	r3, [pc, #312]	; (8001498 <request_measurement+0x294>)
 800135e:	fba3 1302 	umull	r1, r3, r3, r2
 8001362:	08d9      	lsrs	r1, r3, #3
 8001364:	460b      	mov	r3, r1
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	440b      	add	r3, r1
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	b29b      	uxth	r3, r3
 8001370:	b2db      	uxtb	r3, r3
 8001372:	3330      	adds	r3, #48	; 0x30
 8001374:	b2db      	uxtb	r3, r3
 8001376:	73fb      	strb	r3, [r7, #15]
			msg[8] = ((measured_offset/10) % 10) + 48;
 8001378:	4b49      	ldr	r3, [pc, #292]	; (80014a0 <request_measurement+0x29c>)
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	4a46      	ldr	r2, [pc, #280]	; (8001498 <request_measurement+0x294>)
 800137e:	fba2 2303 	umull	r2, r3, r2, r3
 8001382:	08db      	lsrs	r3, r3, #3
 8001384:	b29a      	uxth	r2, r3
 8001386:	4b44      	ldr	r3, [pc, #272]	; (8001498 <request_measurement+0x294>)
 8001388:	fba3 1302 	umull	r1, r3, r3, r2
 800138c:	08d9      	lsrs	r1, r3, #3
 800138e:	460b      	mov	r3, r1
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	440b      	add	r3, r1
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	b29b      	uxth	r3, r3
 800139a:	b2db      	uxtb	r3, r3
 800139c:	3330      	adds	r3, #48	; 0x30
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	743b      	strb	r3, [r7, #16]
			msg[9] = (measured_offset % 10) + 48;
 80013a2:	4b3f      	ldr	r3, [pc, #252]	; (80014a0 <request_measurement+0x29c>)
 80013a4:	881a      	ldrh	r2, [r3, #0]
 80013a6:	4b3c      	ldr	r3, [pc, #240]	; (8001498 <request_measurement+0x294>)
 80013a8:	fba3 1302 	umull	r1, r3, r3, r2
 80013ac:	08d9      	lsrs	r1, r3, #3
 80013ae:	460b      	mov	r3, r1
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	440b      	add	r3, r1
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	3330      	adds	r3, #48	; 0x30
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	747b      	strb	r3, [r7, #17]
			break;
 80013c2:	e052      	b.n	800146a <request_measurement+0x266>
		case 'f':
			// Frequency
			msg[4] = 'f';
 80013c4:	2366      	movs	r3, #102	; 0x66
 80013c6:	733b      	strb	r3, [r7, #12]
			msg[6] = ((measured_frequency/1000) % 10) + 48;
 80013c8:	4b36      	ldr	r3, [pc, #216]	; (80014a4 <request_measurement+0x2a0>)
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	4a31      	ldr	r2, [pc, #196]	; (8001494 <request_measurement+0x290>)
 80013ce:	fba2 2303 	umull	r2, r3, r2, r3
 80013d2:	099b      	lsrs	r3, r3, #6
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	4b30      	ldr	r3, [pc, #192]	; (8001498 <request_measurement+0x294>)
 80013d8:	fba3 1302 	umull	r1, r3, r3, r2
 80013dc:	08d9      	lsrs	r1, r3, #3
 80013de:	460b      	mov	r3, r1
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	440b      	add	r3, r1
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	3330      	adds	r3, #48	; 0x30
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	73bb      	strb	r3, [r7, #14]
			msg[7] = ((measured_frequency/100) % 10) + 48;
 80013f2:	4b2c      	ldr	r3, [pc, #176]	; (80014a4 <request_measurement+0x2a0>)
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	4a29      	ldr	r2, [pc, #164]	; (800149c <request_measurement+0x298>)
 80013f8:	fba2 2303 	umull	r2, r3, r2, r3
 80013fc:	095b      	lsrs	r3, r3, #5
 80013fe:	b29a      	uxth	r2, r3
 8001400:	4b25      	ldr	r3, [pc, #148]	; (8001498 <request_measurement+0x294>)
 8001402:	fba3 1302 	umull	r1, r3, r3, r2
 8001406:	08d9      	lsrs	r1, r3, #3
 8001408:	460b      	mov	r3, r1
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	440b      	add	r3, r1
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	b29b      	uxth	r3, r3
 8001414:	b2db      	uxtb	r3, r3
 8001416:	3330      	adds	r3, #48	; 0x30
 8001418:	b2db      	uxtb	r3, r3
 800141a:	73fb      	strb	r3, [r7, #15]
			msg[8] = ((measured_frequency/10) % 10) + 48;
 800141c:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <request_measurement+0x2a0>)
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	4a1d      	ldr	r2, [pc, #116]	; (8001498 <request_measurement+0x294>)
 8001422:	fba2 2303 	umull	r2, r3, r2, r3
 8001426:	08db      	lsrs	r3, r3, #3
 8001428:	b29a      	uxth	r2, r3
 800142a:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <request_measurement+0x294>)
 800142c:	fba3 1302 	umull	r1, r3, r3, r2
 8001430:	08d9      	lsrs	r1, r3, #3
 8001432:	460b      	mov	r3, r1
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	440b      	add	r3, r1
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	b29b      	uxth	r3, r3
 800143e:	b2db      	uxtb	r3, r3
 8001440:	3330      	adds	r3, #48	; 0x30
 8001442:	b2db      	uxtb	r3, r3
 8001444:	743b      	strb	r3, [r7, #16]
			msg[9] = (measured_frequency % 10) + 48;
 8001446:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <request_measurement+0x2a0>)
 8001448:	881a      	ldrh	r2, [r3, #0]
 800144a:	4b13      	ldr	r3, [pc, #76]	; (8001498 <request_measurement+0x294>)
 800144c:	fba3 1302 	umull	r1, r3, r3, r2
 8001450:	08d9      	lsrs	r1, r3, #3
 8001452:	460b      	mov	r3, r1
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	440b      	add	r3, r1
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	b29b      	uxth	r3, r3
 800145e:	b2db      	uxtb	r3, r3
 8001460:	3330      	adds	r3, #48	; 0x30
 8001462:	b2db      	uxtb	r3, r3
 8001464:	747b      	strb	r3, [r7, #17]
			break;
 8001466:	e000      	b.n	800146a <request_measurement+0x266>
		case 'c':
			// Temperature
			break;
		default:
			// Problems
			break;
 8001468:	bf00      	nop
	}
	HAL_UART_Transmit(&huart2, msg, 13, 10);
 800146a:	f107 0108 	add.w	r1, r7, #8
 800146e:	230a      	movs	r3, #10
 8001470:	220d      	movs	r2, #13
 8001472:	480d      	ldr	r0, [pc, #52]	; (80014a8 <request_measurement+0x2a4>)
 8001474:	f004 fb30 	bl	8005ad8 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 8001478:	2201      	movs	r2, #1
 800147a:	490c      	ldr	r1, [pc, #48]	; (80014ac <request_measurement+0x2a8>)
 800147c:	480a      	ldr	r0, [pc, #40]	; (80014a8 <request_measurement+0x2a4>)
 800147e:	f004 fbbf 	bl	8005c00 <HAL_UART_Receive_IT>
}
 8001482:	bf00      	nop
 8001484:	371c      	adds	r7, #28
 8001486:	46bd      	mov	sp, r7
 8001488:	bd90      	pop	{r4, r7, pc}
 800148a:	bf00      	nop
 800148c:	08006fd0 	.word	0x08006fd0
 8001490:	20000044 	.word	0x20000044
 8001494:	10624dd3 	.word	0x10624dd3
 8001498:	cccccccd 	.word	0xcccccccd
 800149c:	51eb851f 	.word	0x51eb851f
 80014a0:	2000004a 	.word	0x2000004a
 80014a4:	20000046 	.word	0x20000046
 80014a8:	200002f0 	.word	0x200002f0
 80014ac:	200002a0 	.word	0x200002a0

080014b0 <request_status>:

void request_status()
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
	uint8_t msg[11] = "@,xx,x,x,!\n";
 80014b6:	4a28      	ldr	r2, [pc, #160]	; (8001558 <request_status+0xa8>)
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80014bc:	c303      	stmia	r3!, {r0, r1}
 80014be:	801a      	strh	r2, [r3, #0]
 80014c0:	3302      	adds	r3, #2
 80014c2:	0c12      	lsrs	r2, r2, #16
 80014c4:	701a      	strb	r2, [r3, #0]
	switch(measurement_mode){
 80014c6:	4b25      	ldr	r3, [pc, #148]	; (800155c <request_status+0xac>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	d825      	bhi.n	800151a <request_status+0x6a>
 80014ce:	a201      	add	r2, pc, #4	; (adr r2, 80014d4 <request_status+0x24>)
 80014d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d4:	080014e9 	.word	0x080014e9
 80014d8:	080014f3 	.word	0x080014f3
 80014dc:	080014fd 	.word	0x080014fd
 80014e0:	08001507 	.word	0x08001507
 80014e4:	08001511 	.word	0x08001511
		case 0:
			// DV
			msg[2] = 'D';
 80014e8:	2344      	movs	r3, #68	; 0x44
 80014ea:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'V';
 80014ec:	2356      	movs	r3, #86	; 0x56
 80014ee:	71fb      	strb	r3, [r7, #7]
			break;
 80014f0:	e014      	b.n	800151c <request_status+0x6c>
		case 1:
			// AV
			msg[2] = 'A';
 80014f2:	2341      	movs	r3, #65	; 0x41
 80014f4:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'V';
 80014f6:	2356      	movs	r3, #86	; 0x56
 80014f8:	71fb      	strb	r3, [r7, #7]
			break;
 80014fa:	e00f      	b.n	800151c <request_status+0x6c>
		case 2:
			// DI
			msg[2] = 'D';
 80014fc:	2344      	movs	r3, #68	; 0x44
 80014fe:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'I';
 8001500:	2349      	movs	r3, #73	; 0x49
 8001502:	71fb      	strb	r3, [r7, #7]
			break;
 8001504:	e00a      	b.n	800151c <request_status+0x6c>
		case 3:
			// AI
			msg[2] = 'A';
 8001506:	2341      	movs	r3, #65	; 0x41
 8001508:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'I';
 800150a:	2349      	movs	r3, #73	; 0x49
 800150c:	71fb      	strb	r3, [r7, #7]
			break;
 800150e:	e005      	b.n	800151c <request_status+0x6c>
		case 4:
			// TC
			msg[2] = 'T';
 8001510:	2354      	movs	r3, #84	; 0x54
 8001512:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'C';
 8001514:	2343      	movs	r3, #67	; 0x43
 8001516:	71fb      	strb	r3, [r7, #7]
			break;
 8001518:	e000      	b.n	800151c <request_status+0x6c>
		default:
			// Problems
			break;
 800151a:	bf00      	nop
	}
	msg[5] = (uint8_t)OutputState.Mode; // TODO: This might break! Need to test and try casting to uint8_t type
 800151c:	4b10      	ldr	r3, [pc, #64]	; (8001560 <request_status+0xb0>)
 800151e:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 8001522:	727b      	strb	r3, [r7, #9]
	if(OutputState.On){
 8001524:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <request_status+0xb0>)
 8001526:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 800152a:	2b00      	cmp	r3, #0
 800152c:	d002      	beq.n	8001534 <request_status+0x84>
		msg[7] = '1';
 800152e:	2331      	movs	r3, #49	; 0x31
 8001530:	72fb      	strb	r3, [r7, #11]
 8001532:	e001      	b.n	8001538 <request_status+0x88>
	} else {
		msg[7] = '0';
 8001534:	2330      	movs	r3, #48	; 0x30
 8001536:	72fb      	strb	r3, [r7, #11]
	}
	HAL_UART_Transmit(&huart2, msg, 11, 10);
 8001538:	1d39      	adds	r1, r7, #4
 800153a:	230a      	movs	r3, #10
 800153c:	220b      	movs	r2, #11
 800153e:	4809      	ldr	r0, [pc, #36]	; (8001564 <request_status+0xb4>)
 8001540:	f004 faca 	bl	8005ad8 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 8001544:	2201      	movs	r2, #1
 8001546:	4908      	ldr	r1, [pc, #32]	; (8001568 <request_status+0xb8>)
 8001548:	4806      	ldr	r0, [pc, #24]	; (8001564 <request_status+0xb4>)
 800154a:	f004 fb59 	bl	8005c00 <HAL_UART_Receive_IT>

}
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	08006fe0 	.word	0x08006fe0
 800155c:	2000004c 	.word	0x2000004c
 8001560:	20000050 	.word	0x20000050
 8001564:	200002f0 	.word	0x200002f0
 8001568:	200002a0 	.word	0x200002a0

0800156c <set_output_parameter>:

void set_output_parameter(uint8_t *rx_array, uint8_t length)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	70fb      	strb	r3, [r7, #3]
	uint8_t param = rx_array[4];
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	791b      	ldrb	r3, [r3, #4]
 800157c:	73bb      	strb	r3, [r7, #14]
	uint8_t val0 = rx_array[6];
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	799b      	ldrb	r3, [r3, #6]
 8001582:	737b      	strb	r3, [r7, #13]
	uint8_t received_value = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	73fb      	strb	r3, [r7, #15]
	if(length > 9){
 8001588:	78fb      	ldrb	r3, [r7, #3]
 800158a:	2b09      	cmp	r3, #9
 800158c:	d92c      	bls.n	80015e8 <set_output_parameter+0x7c>
		uint8_t val1 = rx_array[7];
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	79db      	ldrb	r3, [r3, #7]
 8001592:	733b      	strb	r3, [r7, #12]
		uint8_t val2 = rx_array[8];
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	7a1b      	ldrb	r3, [r3, #8]
 8001598:	72fb      	strb	r3, [r7, #11]
		uint8_t val3 = rx_array[9];
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	7a5b      	ldrb	r3, [r3, #9]
 800159e:	72bb      	strb	r3, [r7, #10]
		received_value += val0*1000;
 80015a0:	7b7b      	ldrb	r3, [r7, #13]
 80015a2:	461a      	mov	r2, r3
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	4413      	add	r3, r2
 80015b0:	73fb      	strb	r3, [r7, #15]
		received_value += val1*100;
 80015b2:	7b3b      	ldrb	r3, [r7, #12]
 80015b4:	461a      	mov	r2, r3
 80015b6:	0092      	lsls	r2, r2, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	461a      	mov	r2, r3
 80015bc:	0091      	lsls	r1, r2, #2
 80015be:	461a      	mov	r2, r3
 80015c0:	460b      	mov	r3, r1
 80015c2:	4413      	add	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	b2da      	uxtb	r2, r3
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
 80015ca:	4413      	add	r3, r2
 80015cc:	73fb      	strb	r3, [r7, #15]
		received_value += val2*10;
 80015ce:	7afb      	ldrb	r3, [r7, #11]
 80015d0:	461a      	mov	r2, r3
 80015d2:	0092      	lsls	r2, r2, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	4413      	add	r3, r2
 80015de:	73fb      	strb	r3, [r7, #15]
		received_value += val3;
 80015e0:	7bfa      	ldrb	r2, [r7, #15]
 80015e2:	7abb      	ldrb	r3, [r7, #10]
 80015e4:	4413      	add	r3, r2
 80015e6:	73fb      	strb	r3, [r7, #15]
	}
	switch(param){
 80015e8:	7bbb      	ldrb	r3, [r7, #14]
 80015ea:	3b61      	subs	r3, #97	; 0x61
 80015ec:	2b13      	cmp	r3, #19
 80015ee:	d842      	bhi.n	8001676 <set_output_parameter+0x10a>
 80015f0:	a201      	add	r2, pc, #4	; (adr r2, 80015f8 <set_output_parameter+0x8c>)
 80015f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f6:	bf00      	nop
 80015f8:	08001653 	.word	0x08001653
 80015fc:	08001677 	.word	0x08001677
 8001600:	08001677 	.word	0x08001677
 8001604:	08001677 	.word	0x08001677
 8001608:	08001677 	.word	0x08001677
 800160c:	0800166b 	.word	0x0800166b
 8001610:	08001677 	.word	0x08001677
 8001614:	08001677 	.word	0x08001677
 8001618:	08001677 	.word	0x08001677
 800161c:	08001677 	.word	0x08001677
 8001620:	08001677 	.word	0x08001677
 8001624:	08001677 	.word	0x08001677
 8001628:	08001677 	.word	0x08001677
 800162c:	08001677 	.word	0x08001677
 8001630:	0800165f 	.word	0x0800165f
 8001634:	08001677 	.word	0x08001677
 8001638:	08001677 	.word	0x08001677
 800163c:	08001677 	.word	0x08001677
 8001640:	08001677 	.word	0x08001677
 8001644:	08001649 	.word	0x08001649
		case 't':
			// Type
			OutputState.Mode = (OutputMode)val0; // TODO: This might break! Need to test and try casting to OutputMode type
 8001648:	4a0e      	ldr	r2, [pc, #56]	; (8001684 <set_output_parameter+0x118>)
 800164a:	7b7b      	ldrb	r3, [r7, #13]
 800164c:	f882 3195 	strb.w	r3, [r2, #405]	; 0x195
			break;
 8001650:	e012      	b.n	8001678 <set_output_parameter+0x10c>
		case 'a':
			// Amplitude
			OutputState.Amplitude = received_value;
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	b29a      	uxth	r2, r3
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <set_output_parameter+0x118>)
 8001658:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196
			break;
 800165c:	e00c      	b.n	8001678 <set_output_parameter+0x10c>
		case 'o':
			// Offset
			OutputState.Offset = received_value;
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	b29a      	uxth	r2, r3
 8001662:	4b08      	ldr	r3, [pc, #32]	; (8001684 <set_output_parameter+0x118>)
 8001664:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
			break;
 8001668:	e006      	b.n	8001678 <set_output_parameter+0x10c>
		case 'f':
			// Frequency
			OutputState.Frequency = received_value;
 800166a:	7bfb      	ldrb	r3, [r7, #15]
 800166c:	b29a      	uxth	r2, r3
 800166e:	4b05      	ldr	r3, [pc, #20]	; (8001684 <set_output_parameter+0x118>)
 8001670:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
			break;
 8001674:	e000      	b.n	8001678 <set_output_parameter+0x10c>
		case 'c':
			// Temperature
			break;
		default:
			// Problems
			break;
 8001676:	bf00      	nop
	}
}
 8001678:	bf00      	nop
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	20000050 	.word	0x20000050

08001688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169e:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <HAL_MspInit+0x44>)
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	4a0e      	ldr	r2, [pc, #56]	; (80016dc <HAL_MspInit+0x44>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6193      	str	r3, [r2, #24]
 80016aa:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <HAL_MspInit+0x44>)
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <HAL_MspInit+0x44>)
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	4a08      	ldr	r2, [pc, #32]	; (80016dc <HAL_MspInit+0x44>)
 80016bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c0:	61d3      	str	r3, [r2, #28]
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_MspInit+0x44>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016ce:	2007      	movs	r0, #7
 80016d0:	f001 fcf8 	bl	80030c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40021000 	.word	0x40021000

080016e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08a      	sub	sp, #40	; 0x28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001700:	d124      	bne.n	800174c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001702:	4b14      	ldr	r3, [pc, #80]	; (8001754 <HAL_ADC_MspInit+0x74>)
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	4a13      	ldr	r2, [pc, #76]	; (8001754 <HAL_ADC_MspInit+0x74>)
 8001708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800170c:	6153      	str	r3, [r2, #20]
 800170e:	4b11      	ldr	r3, [pc, #68]	; (8001754 <HAL_ADC_MspInit+0x74>)
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171a:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <HAL_ADC_MspInit+0x74>)
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	4a0d      	ldr	r2, [pc, #52]	; (8001754 <HAL_ADC_MspInit+0x74>)
 8001720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001724:	6153      	str	r3, [r2, #20]
 8001726:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <HAL_ADC_MspInit+0x74>)
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001732:	2301      	movs	r3, #1
 8001734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001736:	2303      	movs	r3, #3
 8001738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	4619      	mov	r1, r3
 8001744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001748:	f001 ff0a 	bl	8003560 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800174c:	bf00      	nop
 800174e:	3728      	adds	r7, #40	; 0x28
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40021000 	.word	0x40021000

08001758 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	; 0x28
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a2c      	ldr	r2, [pc, #176]	; (8001828 <HAL_DAC_MspInit+0xd0>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d152      	bne.n	8001820 <HAL_DAC_MspInit+0xc8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800177a:	4b2c      	ldr	r3, [pc, #176]	; (800182c <HAL_DAC_MspInit+0xd4>)
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	4a2b      	ldr	r2, [pc, #172]	; (800182c <HAL_DAC_MspInit+0xd4>)
 8001780:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001784:	61d3      	str	r3, [r2, #28]
 8001786:	4b29      	ldr	r3, [pc, #164]	; (800182c <HAL_DAC_MspInit+0xd4>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001792:	4b26      	ldr	r3, [pc, #152]	; (800182c <HAL_DAC_MspInit+0xd4>)
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	4a25      	ldr	r2, [pc, #148]	; (800182c <HAL_DAC_MspInit+0xd4>)
 8001798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800179c:	6153      	str	r3, [r2, #20]
 800179e:	4b23      	ldr	r3, [pc, #140]	; (800182c <HAL_DAC_MspInit+0xd4>)
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017aa:	2310      	movs	r3, #16
 80017ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ae:	2303      	movs	r3, #3
 80017b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b6:	f107 0314 	add.w	r3, r7, #20
 80017ba:	4619      	mov	r1, r3
 80017bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c0:	f001 fece 	bl	8003560 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 80017c4:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <HAL_DAC_MspInit+0xd8>)
 80017c6:	4a1b      	ldr	r2, [pc, #108]	; (8001834 <HAL_DAC_MspInit+0xdc>)
 80017c8:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017ca:	4b19      	ldr	r3, [pc, #100]	; (8001830 <HAL_DAC_MspInit+0xd8>)
 80017cc:	2210      	movs	r2, #16
 80017ce:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017d0:	4b17      	ldr	r3, [pc, #92]	; (8001830 <HAL_DAC_MspInit+0xd8>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80017d6:	4b16      	ldr	r3, [pc, #88]	; (8001830 <HAL_DAC_MspInit+0xd8>)
 80017d8:	2280      	movs	r2, #128	; 0x80
 80017da:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017dc:	4b14      	ldr	r3, [pc, #80]	; (8001830 <HAL_DAC_MspInit+0xd8>)
 80017de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017e2:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <HAL_DAC_MspInit+0xd8>)
 80017e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017ea:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80017ec:	4b10      	ldr	r3, [pc, #64]	; (8001830 <HAL_DAC_MspInit+0xd8>)
 80017ee:	2220      	movs	r2, #32
 80017f0:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80017f2:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <HAL_DAC_MspInit+0xd8>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80017f8:	480d      	ldr	r0, [pc, #52]	; (8001830 <HAL_DAC_MspInit+0xd8>)
 80017fa:	f001 fd13 	bl	8003224 <HAL_DMA_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 8001804:	f7ff ff40 	bl	8001688 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_DAC_MspInit+0xe0>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <HAL_DAC_MspInit+0xe0>)
 800180e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001812:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a06      	ldr	r2, [pc, #24]	; (8001830 <HAL_DAC_MspInit+0xd8>)
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	4a05      	ldr	r2, [pc, #20]	; (8001830 <HAL_DAC_MspInit+0xd8>)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001820:	bf00      	nop
 8001822:	3728      	adds	r7, #40	; 0x28
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40007400 	.word	0x40007400
 800182c:	40021000 	.word	0x40021000
 8001830:	2000020c 	.word	0x2000020c
 8001834:	40020030 	.word	0x40020030
 8001838:	40010000 	.word	0x40010000

0800183c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800184c:	d114      	bne.n	8001878 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800184e:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <HAL_TIM_Base_MspInit+0x78>)
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	4a18      	ldr	r2, [pc, #96]	; (80018b4 <HAL_TIM_Base_MspInit+0x78>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	61d3      	str	r3, [r2, #28]
 800185a:	4b16      	ldr	r3, [pc, #88]	; (80018b4 <HAL_TIM_Base_MspInit+0x78>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2100      	movs	r1, #0
 800186a:	201c      	movs	r0, #28
 800186c:	f001 fc35 	bl	80030da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001870:	201c      	movs	r0, #28
 8001872:	f001 fc4e 	bl	8003112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001876:	e018      	b.n	80018aa <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM16)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a0e      	ldr	r2, [pc, #56]	; (80018b8 <HAL_TIM_Base_MspInit+0x7c>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d113      	bne.n	80018aa <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001882:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <HAL_TIM_Base_MspInit+0x78>)
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	4a0b      	ldr	r2, [pc, #44]	; (80018b4 <HAL_TIM_Base_MspInit+0x78>)
 8001888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800188c:	6193      	str	r3, [r2, #24]
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <HAL_TIM_Base_MspInit+0x78>)
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	2100      	movs	r1, #0
 800189e:	2019      	movs	r0, #25
 80018a0:	f001 fc1b 	bl	80030da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80018a4:	2019      	movs	r0, #25
 80018a6:	f001 fc34 	bl	8003112 <HAL_NVIC_EnableIRQ>
}
 80018aa:	bf00      	nop
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40014400 	.word	0x40014400

080018bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	; 0x28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a1b      	ldr	r2, [pc, #108]	; (8001948 <HAL_UART_MspInit+0x8c>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d130      	bne.n	8001940 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018de:	4b1b      	ldr	r3, [pc, #108]	; (800194c <HAL_UART_MspInit+0x90>)
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	4a1a      	ldr	r2, [pc, #104]	; (800194c <HAL_UART_MspInit+0x90>)
 80018e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e8:	61d3      	str	r3, [r2, #28]
 80018ea:	4b18      	ldr	r3, [pc, #96]	; (800194c <HAL_UART_MspInit+0x90>)
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <HAL_UART_MspInit+0x90>)
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	4a14      	ldr	r2, [pc, #80]	; (800194c <HAL_UART_MspInit+0x90>)
 80018fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001900:	6153      	str	r3, [r2, #20]
 8001902:	4b12      	ldr	r3, [pc, #72]	; (800194c <HAL_UART_MspInit+0x90>)
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800190e:	230c      	movs	r3, #12
 8001910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001912:	2302      	movs	r3, #2
 8001914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191a:	2300      	movs	r3, #0
 800191c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800191e:	2307      	movs	r3, #7
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001922:	f107 0314 	add.w	r3, r7, #20
 8001926:	4619      	mov	r1, r3
 8001928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800192c:	f001 fe18 	bl	8003560 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001930:	2200      	movs	r2, #0
 8001932:	2100      	movs	r1, #0
 8001934:	2026      	movs	r0, #38	; 0x26
 8001936:	f001 fbd0 	bl	80030da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800193a:	2026      	movs	r0, #38	; 0x26
 800193c:	f001 fbe9 	bl	8003112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001940:	bf00      	nop
 8001942:	3728      	adds	r7, #40	; 0x28
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40004400 	.word	0x40004400
 800194c:	40021000 	.word	0x40021000

08001950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001962:	e7fe      	b.n	8001962 <HardFault_Handler+0x4>

08001964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001968:	e7fe      	b.n	8001968 <MemManage_Handler+0x4>

0800196a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800196e:	e7fe      	b.n	800196e <BusFault_Handler+0x4>

08001970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001974:	e7fe      	b.n	8001974 <UsageFault_Handler+0x4>

08001976 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a4:	f000 f8ca 	bl	8001b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}

080019ac <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80019b0:	4802      	ldr	r0, [pc, #8]	; (80019bc <DMA1_Channel3_IRQHandler+0x10>)
 80019b2:	f001 fcf5 	bl	80033a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	2000020c 	.word	0x2000020c

080019c0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80019c4:	2040      	movs	r0, #64	; 0x40
 80019c6:	f001 ff9f 	bl	8003908 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80019ca:	2080      	movs	r0, #128	; 0x80
 80019cc:	f001 ff9c 	bl	8003908 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80019d0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80019d4:	f001 ff98 	bl	8003908 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80019d8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019dc:	f001 ff94 	bl	8003908 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80019e8:	4802      	ldr	r0, [pc, #8]	; (80019f4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80019ea:	f003 fc3f 	bl	800526c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000374 	.word	0x20000374

080019f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019fc:	4802      	ldr	r0, [pc, #8]	; (8001a08 <TIM2_IRQHandler+0x10>)
 80019fe:	f003 fc35 	bl	800526c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	200002a4 	.word	0x200002a4

08001a0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a10:	4802      	ldr	r0, [pc, #8]	; (8001a1c <USART2_IRQHandler+0x10>)
 8001a12:	f004 f943 	bl	8005c9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200002f0 	.word	0x200002f0

08001a20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001a24:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001a28:	f001 ff6e 	bl	8003908 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001a2c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a30:	f001 ff6a 	bl	8003908 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <SystemInit+0x20>)
 8001a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a42:	4a05      	ldr	r2, [pc, #20]	; (8001a58 <SystemInit+0x20>)
 8001a44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a94 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a60:	480d      	ldr	r0, [pc, #52]	; (8001a98 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a62:	490e      	ldr	r1, [pc, #56]	; (8001a9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a64:	4a0e      	ldr	r2, [pc, #56]	; (8001aa0 <LoopForever+0xe>)
  movs r3, #0
 8001a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a68:	e002      	b.n	8001a70 <LoopCopyDataInit>

08001a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a6e:	3304      	adds	r3, #4

08001a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a74:	d3f9      	bcc.n	8001a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a76:	4a0b      	ldr	r2, [pc, #44]	; (8001aa4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a78:	4c0b      	ldr	r4, [pc, #44]	; (8001aa8 <LoopForever+0x16>)
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a7c:	e001      	b.n	8001a82 <LoopFillZerobss>

08001a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a80:	3204      	adds	r2, #4

08001a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a84:	d3fb      	bcc.n	8001a7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a86:	f7ff ffd7 	bl	8001a38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a8a:	f005 fa41 	bl	8006f10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a8e:	f7fe fe1d 	bl	80006cc <main>

08001a92 <LoopForever>:

LoopForever:
    b LoopForever
 8001a92:	e7fe      	b.n	8001a92 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a94:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a9c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001aa0:	0800702c 	.word	0x0800702c
  ldr r2, =_sbss
 8001aa4:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001aa8:	200003c4 	.word	0x200003c4

08001aac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001aac:	e7fe      	b.n	8001aac <ADC1_2_IRQHandler>
	...

08001ab0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ab4:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <HAL_Init+0x28>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a07      	ldr	r2, [pc, #28]	; (8001ad8 <HAL_Init+0x28>)
 8001aba:	f043 0310 	orr.w	r3, r3, #16
 8001abe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ac0:	2003      	movs	r0, #3
 8001ac2:	f001 faff 	bl	80030c4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	f000 f808 	bl	8001adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001acc:	f7ff fde4 	bl	8001698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40022000 	.word	0x40022000

08001adc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <HAL_InitTick+0x54>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <HAL_InitTick+0x58>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	4619      	mov	r1, r3
 8001aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afa:	4618      	mov	r0, r3
 8001afc:	f001 fb17 	bl	800312e <HAL_SYSTICK_Config>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e00e      	b.n	8001b28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b0f      	cmp	r3, #15
 8001b0e:	d80a      	bhi.n	8001b26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b10:	2200      	movs	r2, #0
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	f04f 30ff 	mov.w	r0, #4294967295
 8001b18:	f001 fadf 	bl	80030da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b1c:	4a06      	ldr	r2, [pc, #24]	; (8001b38 <HAL_InitTick+0x5c>)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
 8001b24:	e000      	b.n	8001b28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20000010 	.word	0x20000010
 8001b34:	20000018 	.word	0x20000018
 8001b38:	20000014 	.word	0x20000014

08001b3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_IncTick+0x20>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_IncTick+0x24>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <HAL_IncTick+0x24>)
 8001b4e:	6013      	str	r3, [r2, #0]
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	20000018 	.word	0x20000018
 8001b60:	200003c0 	.word	0x200003c0

08001b64 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return uwTick;  
 8001b68:	4b03      	ldr	r3, [pc, #12]	; (8001b78 <HAL_GetTick+0x14>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	200003c0 	.word	0x200003c0

08001b7c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b84:	f7ff ffee 	bl	8001b64 <HAL_GetTick>
 8001b88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b94:	d005      	beq.n	8001ba2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <HAL_Delay+0x40>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001ba2:	bf00      	nop
 8001ba4:	f7ff ffde 	bl	8001b64 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d8f7      	bhi.n	8001ba4 <HAL_Delay+0x28>
  {
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000018 	.word	0x20000018

08001bc0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b09a      	sub	sp, #104	; 0x68
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e1e3      	b.n	8001fa8 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	f003 0310 	and.w	r3, r3, #16
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d176      	bne.n	8001ce0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d152      	bne.n	8001ca0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7ff fd63 	bl	80016e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d13b      	bne.n	8001ca0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f001 f861 	bl	8002cf0 <ADC_Disable>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	f003 0310 	and.w	r3, r3, #16
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d12f      	bne.n	8001ca0 <HAL_ADC_Init+0xe0>
 8001c40:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d12b      	bne.n	8001ca0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c50:	f023 0302 	bic.w	r3, r3, #2
 8001c54:	f043 0202 	orr.w	r2, r3, #2
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c6a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c7a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c7c:	4b92      	ldr	r3, [pc, #584]	; (8001ec8 <HAL_ADC_Init+0x308>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a92      	ldr	r2, [pc, #584]	; (8001ecc <HAL_ADC_Init+0x30c>)
 8001c82:	fba2 2303 	umull	r2, r3, r2, r3
 8001c86:	0c9a      	lsrs	r2, r3, #18
 8001c88:	4613      	mov	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c92:	e002      	b.n	8001c9a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1f9      	bne.n	8001c94 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d007      	beq.n	8001cbe <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001cb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cbc:	d110      	bne.n	8001ce0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f023 0312 	bic.w	r3, r3, #18
 8001cc6:	f043 0210 	orr.w	r2, r3, #16
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd2:	f043 0201 	orr.w	r2, r3, #1
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	f003 0310 	and.w	r3, r3, #16
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f040 8150 	bne.w	8001f8e <HAL_ADC_Init+0x3ce>
 8001cee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f040 814b 	bne.w	8001f8e <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f040 8143 	bne.w	8001f8e <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d10:	f043 0202 	orr.w	r2, r3, #2
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d20:	d004      	beq.n	8001d2c <HAL_ADC_Init+0x16c>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a6a      	ldr	r2, [pc, #424]	; (8001ed0 <HAL_ADC_Init+0x310>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d101      	bne.n	8001d30 <HAL_ADC_Init+0x170>
 8001d2c:	4b69      	ldr	r3, [pc, #420]	; (8001ed4 <HAL_ADC_Init+0x314>)
 8001d2e:	e000      	b.n	8001d32 <HAL_ADC_Init+0x172>
 8001d30:	4b69      	ldr	r3, [pc, #420]	; (8001ed8 <HAL_ADC_Init+0x318>)
 8001d32:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d3c:	d102      	bne.n	8001d44 <HAL_ADC_Init+0x184>
 8001d3e:	4b64      	ldr	r3, [pc, #400]	; (8001ed0 <HAL_ADC_Init+0x310>)
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	e01a      	b.n	8001d7a <HAL_ADC_Init+0x1ba>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a61      	ldr	r2, [pc, #388]	; (8001ed0 <HAL_ADC_Init+0x310>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d103      	bne.n	8001d56 <HAL_ADC_Init+0x196>
 8001d4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	e011      	b.n	8001d7a <HAL_ADC_Init+0x1ba>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a60      	ldr	r2, [pc, #384]	; (8001edc <HAL_ADC_Init+0x31c>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d102      	bne.n	8001d66 <HAL_ADC_Init+0x1a6>
 8001d60:	4b5f      	ldr	r3, [pc, #380]	; (8001ee0 <HAL_ADC_Init+0x320>)
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	e009      	b.n	8001d7a <HAL_ADC_Init+0x1ba>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a5d      	ldr	r2, [pc, #372]	; (8001ee0 <HAL_ADC_Init+0x320>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d102      	bne.n	8001d76 <HAL_ADC_Init+0x1b6>
 8001d70:	4b5a      	ldr	r3, [pc, #360]	; (8001edc <HAL_ADC_Init+0x31c>)
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	e001      	b.n	8001d7a <HAL_ADC_Init+0x1ba>
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d108      	bne.n	8001d9a <HAL_ADC_Init+0x1da>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d101      	bne.n	8001d9a <HAL_ADC_Init+0x1da>
 8001d96:	2301      	movs	r3, #1
 8001d98:	e000      	b.n	8001d9c <HAL_ADC_Init+0x1dc>
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d11c      	bne.n	8001dda <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001da0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d010      	beq.n	8001dc8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d107      	bne.n	8001dc2 <HAL_ADC_Init+0x202>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d101      	bne.n	8001dc2 <HAL_ADC_Init+0x202>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <HAL_ADC_Init+0x204>
 8001dc2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d108      	bne.n	8001dda <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001dc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dd8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	7e5b      	ldrb	r3, [r3, #25]
 8001dde:	035b      	lsls	r3, r3, #13
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001de4:	2a01      	cmp	r2, #1
 8001de6:	d002      	beq.n	8001dee <HAL_ADC_Init+0x22e>
 8001de8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001dec:	e000      	b.n	8001df0 <HAL_ADC_Init+0x230>
 8001dee:	2200      	movs	r2, #0
 8001df0:	431a      	orrs	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e00:	4313      	orrs	r3, r2
 8001e02:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d11b      	bne.n	8001e46 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	7e5b      	ldrb	r3, [r3, #25]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d109      	bne.n	8001e2a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	045a      	lsls	r2, r3, #17
 8001e1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e20:	4313      	orrs	r3, r2
 8001e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e26:	663b      	str	r3, [r7, #96]	; 0x60
 8001e28:	e00d      	b.n	8001e46 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001e32:	f043 0220 	orr.w	r2, r3, #32
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	f043 0201 	orr.w	r2, r3, #1
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d054      	beq.n	8001ef8 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a22      	ldr	r2, [pc, #136]	; (8001edc <HAL_ADC_Init+0x31c>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d004      	beq.n	8001e62 <HAL_ADC_Init+0x2a2>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a20      	ldr	r2, [pc, #128]	; (8001ee0 <HAL_ADC_Init+0x320>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d140      	bne.n	8001ee4 <HAL_ADC_Init+0x324>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e66:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001e6a:	d02a      	beq.n	8001ec2 <HAL_ADC_Init+0x302>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e74:	d022      	beq.n	8001ebc <HAL_ADC_Init+0x2fc>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001e7e:	d01a      	beq.n	8001eb6 <HAL_ADC_Init+0x2f6>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e84:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8001e88:	d012      	beq.n	8001eb0 <HAL_ADC_Init+0x2f0>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8e:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8001e92:	d00a      	beq.n	8001eaa <HAL_ADC_Init+0x2ea>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e98:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8001e9c:	d002      	beq.n	8001ea4 <HAL_ADC_Init+0x2e4>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea2:	e023      	b.n	8001eec <HAL_ADC_Init+0x32c>
 8001ea4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001ea8:	e020      	b.n	8001eec <HAL_ADC_Init+0x32c>
 8001eaa:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001eae:	e01d      	b.n	8001eec <HAL_ADC_Init+0x32c>
 8001eb0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001eb4:	e01a      	b.n	8001eec <HAL_ADC_Init+0x32c>
 8001eb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eba:	e017      	b.n	8001eec <HAL_ADC_Init+0x32c>
 8001ebc:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001ec0:	e014      	b.n	8001eec <HAL_ADC_Init+0x32c>
 8001ec2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001ec6:	e011      	b.n	8001eec <HAL_ADC_Init+0x32c>
 8001ec8:	20000010 	.word	0x20000010
 8001ecc:	431bde83 	.word	0x431bde83
 8001ed0:	50000100 	.word	0x50000100
 8001ed4:	50000300 	.word	0x50000300
 8001ed8:	50000700 	.word	0x50000700
 8001edc:	50000400 	.word	0x50000400
 8001ee0:	50000500 	.word	0x50000500
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 030c 	and.w	r3, r3, #12
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d114      	bne.n	8001f30 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f14:	f023 0302 	bic.w	r3, r3, #2
 8001f18:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	7e1b      	ldrb	r3, [r3, #24]
 8001f1e:	039a      	lsls	r2, r3, #14
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68da      	ldr	r2, [r3, #12]
 8001f36:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <HAL_ADC_Init+0x3f0>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6812      	ldr	r2, [r2, #0]
 8001f3e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001f40:	430b      	orrs	r3, r1
 8001f42:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d10c      	bne.n	8001f66 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f023 010f 	bic.w	r1, r3, #15
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	1e5a      	subs	r2, r3, #1
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	631a      	str	r2, [r3, #48]	; 0x30
 8001f64:	e007      	b.n	8001f76 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 020f 	bic.w	r2, r2, #15
 8001f74:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f80:	f023 0303 	bic.w	r3, r3, #3
 8001f84:	f043 0201 	orr.w	r2, r3, #1
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	641a      	str	r2, [r3, #64]	; 0x40
 8001f8c:	e00a      	b.n	8001fa4 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	f023 0312 	bic.w	r3, r3, #18
 8001f96:	f043 0210 	orr.w	r2, r3, #16
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001fa4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3768      	adds	r7, #104	; 0x68
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	fff0c007 	.word	0xfff0c007

08001fb4 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 0304 	and.w	r3, r3, #4
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f040 80f9 	bne.w	80021c2 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d101      	bne.n	8001fde <HAL_ADC_Start+0x2a>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e0f4      	b.n	80021c8 <HAL_ADC_Start+0x214>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 fe1e 	bl	8002c28 <ADC_Enable>
 8001fec:	4603      	mov	r3, r0
 8001fee:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f040 80e0 	bne.w	80021b8 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002000:	f023 0301 	bic.w	r3, r3, #1
 8002004:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002014:	d004      	beq.n	8002020 <HAL_ADC_Start+0x6c>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a6d      	ldr	r2, [pc, #436]	; (80021d0 <HAL_ADC_Start+0x21c>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d106      	bne.n	800202e <HAL_ADC_Start+0x7a>
 8002020:	4b6c      	ldr	r3, [pc, #432]	; (80021d4 <HAL_ADC_Start+0x220>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 031f 	and.w	r3, r3, #31
 8002028:	2b00      	cmp	r3, #0
 800202a:	d010      	beq.n	800204e <HAL_ADC_Start+0x9a>
 800202c:	e005      	b.n	800203a <HAL_ADC_Start+0x86>
 800202e:	4b6a      	ldr	r3, [pc, #424]	; (80021d8 <HAL_ADC_Start+0x224>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 031f 	and.w	r3, r3, #31
 8002036:	2b00      	cmp	r3, #0
 8002038:	d009      	beq.n	800204e <HAL_ADC_Start+0x9a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002042:	d004      	beq.n	800204e <HAL_ADC_Start+0x9a>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a64      	ldr	r2, [pc, #400]	; (80021dc <HAL_ADC_Start+0x228>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d115      	bne.n	800207a <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d036      	beq.n	80020d6 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002070:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002078:	e02d      	b.n	80020d6 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800208e:	d004      	beq.n	800209a <HAL_ADC_Start+0xe6>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a4e      	ldr	r2, [pc, #312]	; (80021d0 <HAL_ADC_Start+0x21c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d10a      	bne.n	80020b0 <HAL_ADC_Start+0xfc>
 800209a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	bf14      	ite	ne
 80020a8:	2301      	movne	r3, #1
 80020aa:	2300      	moveq	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	e008      	b.n	80020c2 <HAL_ADC_Start+0x10e>
 80020b0:	4b4a      	ldr	r3, [pc, #296]	; (80021dc <HAL_ADC_Start+0x228>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	bf14      	ite	ne
 80020bc:	2301      	movne	r3, #1
 80020be:	2300      	moveq	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d007      	beq.n	80020d6 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020e2:	d106      	bne.n	80020f2 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e8:	f023 0206 	bic.w	r2, r3, #6
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	645a      	str	r2, [r3, #68]	; 0x44
 80020f0:	e002      	b.n	80020f8 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	221c      	movs	r2, #28
 8002106:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002110:	d004      	beq.n	800211c <HAL_ADC_Start+0x168>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a2e      	ldr	r2, [pc, #184]	; (80021d0 <HAL_ADC_Start+0x21c>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d106      	bne.n	800212a <HAL_ADC_Start+0x176>
 800211c:	4b2d      	ldr	r3, [pc, #180]	; (80021d4 <HAL_ADC_Start+0x220>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 031f 	and.w	r3, r3, #31
 8002124:	2b00      	cmp	r3, #0
 8002126:	d03e      	beq.n	80021a6 <HAL_ADC_Start+0x1f2>
 8002128:	e005      	b.n	8002136 <HAL_ADC_Start+0x182>
 800212a:	4b2b      	ldr	r3, [pc, #172]	; (80021d8 <HAL_ADC_Start+0x224>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 031f 	and.w	r3, r3, #31
 8002132:	2b00      	cmp	r3, #0
 8002134:	d037      	beq.n	80021a6 <HAL_ADC_Start+0x1f2>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800213e:	d004      	beq.n	800214a <HAL_ADC_Start+0x196>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a22      	ldr	r2, [pc, #136]	; (80021d0 <HAL_ADC_Start+0x21c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d106      	bne.n	8002158 <HAL_ADC_Start+0x1a4>
 800214a:	4b22      	ldr	r3, [pc, #136]	; (80021d4 <HAL_ADC_Start+0x220>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 031f 	and.w	r3, r3, #31
 8002152:	2b05      	cmp	r3, #5
 8002154:	d027      	beq.n	80021a6 <HAL_ADC_Start+0x1f2>
 8002156:	e005      	b.n	8002164 <HAL_ADC_Start+0x1b0>
 8002158:	4b1f      	ldr	r3, [pc, #124]	; (80021d8 <HAL_ADC_Start+0x224>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	2b05      	cmp	r3, #5
 8002162:	d020      	beq.n	80021a6 <HAL_ADC_Start+0x1f2>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800216c:	d004      	beq.n	8002178 <HAL_ADC_Start+0x1c4>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a17      	ldr	r2, [pc, #92]	; (80021d0 <HAL_ADC_Start+0x21c>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d106      	bne.n	8002186 <HAL_ADC_Start+0x1d2>
 8002178:	4b16      	ldr	r3, [pc, #88]	; (80021d4 <HAL_ADC_Start+0x220>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 031f 	and.w	r3, r3, #31
 8002180:	2b09      	cmp	r3, #9
 8002182:	d010      	beq.n	80021a6 <HAL_ADC_Start+0x1f2>
 8002184:	e005      	b.n	8002192 <HAL_ADC_Start+0x1de>
 8002186:	4b14      	ldr	r3, [pc, #80]	; (80021d8 <HAL_ADC_Start+0x224>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 031f 	and.w	r3, r3, #31
 800218e:	2b09      	cmp	r3, #9
 8002190:	d009      	beq.n	80021a6 <HAL_ADC_Start+0x1f2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800219a:	d004      	beq.n	80021a6 <HAL_ADC_Start+0x1f2>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a0e      	ldr	r2, [pc, #56]	; (80021dc <HAL_ADC_Start+0x228>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d10f      	bne.n	80021c6 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f042 0204 	orr.w	r2, r2, #4
 80021b4:	609a      	str	r2, [r3, #8]
 80021b6:	e006      	b.n	80021c6 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80021c0:	e001      	b.n	80021c6 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021c2:	2302      	movs	r3, #2
 80021c4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	50000100 	.word	0x50000100
 80021d4:	50000300 	.word	0x50000300
 80021d8:	50000700 	.word	0x50000700
 80021dc:	50000400 	.word	0x50000400

080021e0 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021e8:	2300      	movs	r3, #0
 80021ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d101      	bne.n	80021fa <HAL_ADC_Stop+0x1a>
 80021f6:	2302      	movs	r3, #2
 80021f8:	e023      	b.n	8002242 <HAL_ADC_Stop+0x62>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002202:	216c      	movs	r1, #108	; 0x6c
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 fdd9 	bl	8002dbc <ADC_ConversionStop>
 800220a:	4603      	mov	r3, r0
 800220c:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800220e:	7bfb      	ldrb	r3, [r7, #15]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d111      	bne.n	8002238 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 fd6b 	bl	8002cf0 <ADC_Disable>
 800221a:	4603      	mov	r3, r0
 800221c:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d109      	bne.n	8002238 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800222c:	f023 0301 	bic.w	r3, r3, #1
 8002230:	f043 0201 	orr.w	r2, r3, #1
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002240:	7bfb      	ldrb	r3, [r7, #15]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002256:	2300      	movs	r3, #0
 8002258:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	2b08      	cmp	r3, #8
 8002260:	d102      	bne.n	8002268 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002262:	2308      	movs	r3, #8
 8002264:	617b      	str	r3, [r7, #20]
 8002266:	e03a      	b.n	80022de <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002270:	d004      	beq.n	800227c <HAL_ADC_PollForConversion+0x30>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a72      	ldr	r2, [pc, #456]	; (8002440 <HAL_ADC_PollForConversion+0x1f4>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d101      	bne.n	8002280 <HAL_ADC_PollForConversion+0x34>
 800227c:	4b71      	ldr	r3, [pc, #452]	; (8002444 <HAL_ADC_PollForConversion+0x1f8>)
 800227e:	e000      	b.n	8002282 <HAL_ADC_PollForConversion+0x36>
 8002280:	4b71      	ldr	r3, [pc, #452]	; (8002448 <HAL_ADC_PollForConversion+0x1fc>)
 8002282:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 031f 	and.w	r3, r3, #31
 800228c:	2b00      	cmp	r3, #0
 800228e:	d112      	bne.n	80022b6 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b01      	cmp	r3, #1
 800229c:	d11d      	bne.n	80022da <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	f043 0220 	orr.w	r2, r3, #32
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e0bf      	b.n	8002436 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00b      	beq.n	80022da <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	f043 0220 	orr.w	r2, r3, #32
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e0ad      	b.n	8002436 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80022da:	230c      	movs	r3, #12
 80022dc:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022e6:	d004      	beq.n	80022f2 <HAL_ADC_PollForConversion+0xa6>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a54      	ldr	r2, [pc, #336]	; (8002440 <HAL_ADC_PollForConversion+0x1f4>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d106      	bne.n	8002300 <HAL_ADC_PollForConversion+0xb4>
 80022f2:	4b54      	ldr	r3, [pc, #336]	; (8002444 <HAL_ADC_PollForConversion+0x1f8>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 031f 	and.w	r3, r3, #31
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d010      	beq.n	8002320 <HAL_ADC_PollForConversion+0xd4>
 80022fe:	e005      	b.n	800230c <HAL_ADC_PollForConversion+0xc0>
 8002300:	4b51      	ldr	r3, [pc, #324]	; (8002448 <HAL_ADC_PollForConversion+0x1fc>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 031f 	and.w	r3, r3, #31
 8002308:	2b00      	cmp	r3, #0
 800230a:	d009      	beq.n	8002320 <HAL_ADC_PollForConversion+0xd4>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002314:	d004      	beq.n	8002320 <HAL_ADC_PollForConversion+0xd4>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a4c      	ldr	r2, [pc, #304]	; (800244c <HAL_ADC_PollForConversion+0x200>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d104      	bne.n	800232a <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	613b      	str	r3, [r7, #16]
 8002328:	e00f      	b.n	800234a <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002332:	d004      	beq.n	800233e <HAL_ADC_PollForConversion+0xf2>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a41      	ldr	r2, [pc, #260]	; (8002440 <HAL_ADC_PollForConversion+0x1f4>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d102      	bne.n	8002344 <HAL_ADC_PollForConversion+0xf8>
 800233e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002342:	e000      	b.n	8002346 <HAL_ADC_PollForConversion+0xfa>
 8002344:	4b41      	ldr	r3, [pc, #260]	; (800244c <HAL_ADC_PollForConversion+0x200>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800234a:	f7ff fc0b 	bl	8001b64 <HAL_GetTick>
 800234e:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002350:	e021      	b.n	8002396 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002358:	d01d      	beq.n	8002396 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d007      	beq.n	8002370 <HAL_ADC_PollForConversion+0x124>
 8002360:	f7ff fc00 	bl	8001b64 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	429a      	cmp	r2, r3
 800236e:	d212      	bcs.n	8002396 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	4013      	ands	r3, r2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10b      	bne.n	8002396 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f043 0204 	orr.w	r2, r3, #4
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e04f      	b.n	8002436 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	4013      	ands	r3, r2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0d6      	beq.n	8002352 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d131      	bne.n	8002422 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d12c      	bne.n	8002422 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0308 	and.w	r3, r3, #8
 80023d2:	2b08      	cmp	r3, #8
 80023d4:	d125      	bne.n	8002422 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d112      	bne.n	800240a <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d112      	bne.n	8002422 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002400:	f043 0201 	orr.w	r2, r3, #1
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	641a      	str	r2, [r3, #64]	; 0x40
 8002408:	e00b      	b.n	8002422 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	f043 0220 	orr.w	r2, r3, #32
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	f043 0201 	orr.w	r2, r3, #1
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d103      	bne.n	8002434 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	50000100 	.word	0x50000100
 8002444:	50000300 	.word	0x50000300
 8002448:	50000700 	.word	0x50000700
 800244c:	50000400 	.word	0x50000400

08002450 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800245e:	4618      	mov	r0, r3
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
	...

0800246c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800246c:	b480      	push	{r7}
 800246e:	b09b      	sub	sp, #108	; 0x6c
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002476:	2300      	movs	r3, #0
 8002478:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800247c:	2300      	movs	r3, #0
 800247e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002486:	2b01      	cmp	r3, #1
 8002488:	d101      	bne.n	800248e <HAL_ADC_ConfigChannel+0x22>
 800248a:	2302      	movs	r3, #2
 800248c:	e2cb      	b.n	8002a26 <HAL_ADC_ConfigChannel+0x5ba>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f040 82af 	bne.w	8002a04 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	d81c      	bhi.n	80024e8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	4413      	add	r3, r2
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	461a      	mov	r2, r3
 80024c2:	231f      	movs	r3, #31
 80024c4:	4093      	lsls	r3, r2
 80024c6:	43db      	mvns	r3, r3
 80024c8:	4019      	ands	r1, r3
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	6818      	ldr	r0, [r3, #0]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	4413      	add	r3, r2
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	fa00 f203 	lsl.w	r2, r0, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	631a      	str	r2, [r3, #48]	; 0x30
 80024e6:	e063      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b09      	cmp	r3, #9
 80024ee:	d81e      	bhi.n	800252e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	4413      	add	r3, r2
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	3b1e      	subs	r3, #30
 8002504:	221f      	movs	r2, #31
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43db      	mvns	r3, r3
 800250c:	4019      	ands	r1, r3
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	6818      	ldr	r0, [r3, #0]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	4413      	add	r3, r2
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	3b1e      	subs	r3, #30
 8002520:	fa00 f203 	lsl.w	r2, r0, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	430a      	orrs	r2, r1
 800252a:	635a      	str	r2, [r3, #52]	; 0x34
 800252c:	e040      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b0e      	cmp	r3, #14
 8002534:	d81e      	bhi.n	8002574 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	4413      	add	r3, r2
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	3b3c      	subs	r3, #60	; 0x3c
 800254a:	221f      	movs	r2, #31
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	4019      	ands	r1, r3
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	6818      	ldr	r0, [r3, #0]
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	4413      	add	r3, r2
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	3b3c      	subs	r3, #60	; 0x3c
 8002566:	fa00 f203 	lsl.w	r2, r0, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	639a      	str	r2, [r3, #56]	; 0x38
 8002572:	e01d      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	4613      	mov	r3, r2
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	4413      	add	r3, r2
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	3b5a      	subs	r3, #90	; 0x5a
 8002588:	221f      	movs	r2, #31
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43db      	mvns	r3, r3
 8002590:	4019      	ands	r1, r3
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	4613      	mov	r3, r2
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	4413      	add	r3, r2
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	3b5a      	subs	r3, #90	; 0x5a
 80025a4:	fa00 f203 	lsl.w	r2, r0, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 030c 	and.w	r3, r3, #12
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f040 80e5 	bne.w	800278a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b09      	cmp	r3, #9
 80025c6:	d91c      	bls.n	8002602 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6999      	ldr	r1, [r3, #24]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	4613      	mov	r3, r2
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	4413      	add	r3, r2
 80025d8:	3b1e      	subs	r3, #30
 80025da:	2207      	movs	r2, #7
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	4019      	ands	r1, r3
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	6898      	ldr	r0, [r3, #8]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	4613      	mov	r3, r2
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	4413      	add	r3, r2
 80025f2:	3b1e      	subs	r3, #30
 80025f4:	fa00 f203 	lsl.w	r2, r0, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	619a      	str	r2, [r3, #24]
 8002600:	e019      	b.n	8002636 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6959      	ldr	r1, [r3, #20]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4613      	mov	r3, r2
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	4413      	add	r3, r2
 8002612:	2207      	movs	r2, #7
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	4019      	ands	r1, r3
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	6898      	ldr	r0, [r3, #8]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	4613      	mov	r3, r2
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	4413      	add	r3, r2
 800262a:	fa00 f203 	lsl.w	r2, r0, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	430a      	orrs	r2, r1
 8002634:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	695a      	ldr	r2, [r3, #20]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	08db      	lsrs	r3, r3, #3
 8002642:	f003 0303 	and.w	r3, r3, #3
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	3b01      	subs	r3, #1
 8002654:	2b03      	cmp	r3, #3
 8002656:	d84f      	bhi.n	80026f8 <HAL_ADC_ConfigChannel+0x28c>
 8002658:	a201      	add	r2, pc, #4	; (adr r2, 8002660 <HAL_ADC_ConfigChannel+0x1f4>)
 800265a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265e:	bf00      	nop
 8002660:	08002671 	.word	0x08002671
 8002664:	08002693 	.word	0x08002693
 8002668:	080026b5 	.word	0x080026b5
 800266c:	080026d7 	.word	0x080026d7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002676:	4b9f      	ldr	r3, [pc, #636]	; (80028f4 <HAL_ADC_ConfigChannel+0x488>)
 8002678:	4013      	ands	r3, r2
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	6812      	ldr	r2, [r2, #0]
 800267e:	0691      	lsls	r1, r2, #26
 8002680:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002682:	430a      	orrs	r2, r1
 8002684:	431a      	orrs	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800268e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002690:	e07e      	b.n	8002790 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002698:	4b96      	ldr	r3, [pc, #600]	; (80028f4 <HAL_ADC_ConfigChannel+0x488>)
 800269a:	4013      	ands	r3, r2
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	6812      	ldr	r2, [r2, #0]
 80026a0:	0691      	lsls	r1, r2, #26
 80026a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80026a4:	430a      	orrs	r2, r1
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80026b0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80026b2:	e06d      	b.n	8002790 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80026ba:	4b8e      	ldr	r3, [pc, #568]	; (80028f4 <HAL_ADC_ConfigChannel+0x488>)
 80026bc:	4013      	ands	r3, r2
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	6812      	ldr	r2, [r2, #0]
 80026c2:	0691      	lsls	r1, r2, #26
 80026c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80026c6:	430a      	orrs	r2, r1
 80026c8:	431a      	orrs	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80026d2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80026d4:	e05c      	b.n	8002790 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80026dc:	4b85      	ldr	r3, [pc, #532]	; (80028f4 <HAL_ADC_ConfigChannel+0x488>)
 80026de:	4013      	ands	r3, r2
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	0691      	lsls	r1, r2, #26
 80026e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80026e8:	430a      	orrs	r2, r1
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80026f4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80026f6:	e04b      	b.n	8002790 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	069b      	lsls	r3, r3, #26
 8002708:	429a      	cmp	r2, r3
 800270a:	d107      	bne.n	800271c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800271a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002722:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	069b      	lsls	r3, r3, #26
 800272c:	429a      	cmp	r2, r3
 800272e:	d107      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800273e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002746:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	069b      	lsls	r3, r3, #26
 8002750:	429a      	cmp	r2, r3
 8002752:	d107      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002762:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800276a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	069b      	lsls	r3, r3, #26
 8002774:	429a      	cmp	r2, r3
 8002776:	d10a      	bne.n	800278e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002786:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002788:	e001      	b.n	800278e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800278a:	bf00      	nop
 800278c:	e000      	b.n	8002790 <HAL_ADC_ConfigChannel+0x324>
      break;
 800278e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	2b01      	cmp	r3, #1
 800279c:	d108      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x344>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d101      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x344>
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <HAL_ADC_ConfigChannel+0x346>
 80027b0:	2300      	movs	r3, #0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f040 8131 	bne.w	8002a1a <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d00f      	beq.n	80027e0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2201      	movs	r2, #1
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	43da      	mvns	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	400a      	ands	r2, r1
 80027da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80027de:	e049      	b.n	8002874 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2201      	movs	r2, #1
 80027ee:	409a      	lsls	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2b09      	cmp	r3, #9
 8002800:	d91c      	bls.n	800283c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6999      	ldr	r1, [r3, #24]
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	4613      	mov	r3, r2
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	4413      	add	r3, r2
 8002812:	3b1b      	subs	r3, #27
 8002814:	2207      	movs	r2, #7
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43db      	mvns	r3, r3
 800281c:	4019      	ands	r1, r3
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	6898      	ldr	r0, [r3, #8]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	4613      	mov	r3, r2
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	4413      	add	r3, r2
 800282c:	3b1b      	subs	r3, #27
 800282e:	fa00 f203 	lsl.w	r2, r0, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	619a      	str	r2, [r3, #24]
 800283a:	e01b      	b.n	8002874 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6959      	ldr	r1, [r3, #20]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	1c5a      	adds	r2, r3, #1
 8002848:	4613      	mov	r3, r2
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	4413      	add	r3, r2
 800284e:	2207      	movs	r2, #7
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	4019      	ands	r1, r3
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	6898      	ldr	r0, [r3, #8]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	1c5a      	adds	r2, r3, #1
 8002862:	4613      	mov	r3, r2
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	4413      	add	r3, r2
 8002868:	fa00 f203 	lsl.w	r2, r0, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800287c:	d004      	beq.n	8002888 <HAL_ADC_ConfigChannel+0x41c>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a1d      	ldr	r2, [pc, #116]	; (80028f8 <HAL_ADC_ConfigChannel+0x48c>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d101      	bne.n	800288c <HAL_ADC_ConfigChannel+0x420>
 8002888:	4b1c      	ldr	r3, [pc, #112]	; (80028fc <HAL_ADC_ConfigChannel+0x490>)
 800288a:	e000      	b.n	800288e <HAL_ADC_ConfigChannel+0x422>
 800288c:	4b1c      	ldr	r3, [pc, #112]	; (8002900 <HAL_ADC_ConfigChannel+0x494>)
 800288e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b10      	cmp	r3, #16
 8002896:	d105      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002898:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d015      	beq.n	80028d0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80028a8:	2b11      	cmp	r3, #17
 80028aa:	d105      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80028ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00b      	beq.n	80028d0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80028bc:	2b12      	cmp	r3, #18
 80028be:	f040 80ac 	bne.w	8002a1a <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80028c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f040 80a5 	bne.w	8002a1a <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028d8:	d102      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x474>
 80028da:	4b07      	ldr	r3, [pc, #28]	; (80028f8 <HAL_ADC_ConfigChannel+0x48c>)
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	e023      	b.n	8002928 <HAL_ADC_ConfigChannel+0x4bc>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a04      	ldr	r2, [pc, #16]	; (80028f8 <HAL_ADC_ConfigChannel+0x48c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d10c      	bne.n	8002904 <HAL_ADC_ConfigChannel+0x498>
 80028ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	e01a      	b.n	8002928 <HAL_ADC_ConfigChannel+0x4bc>
 80028f2:	bf00      	nop
 80028f4:	83fff000 	.word	0x83fff000
 80028f8:	50000100 	.word	0x50000100
 80028fc:	50000300 	.word	0x50000300
 8002900:	50000700 	.word	0x50000700
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a4a      	ldr	r2, [pc, #296]	; (8002a34 <HAL_ADC_ConfigChannel+0x5c8>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d102      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x4a8>
 800290e:	4b4a      	ldr	r3, [pc, #296]	; (8002a38 <HAL_ADC_ConfigChannel+0x5cc>)
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	e009      	b.n	8002928 <HAL_ADC_ConfigChannel+0x4bc>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a47      	ldr	r2, [pc, #284]	; (8002a38 <HAL_ADC_ConfigChannel+0x5cc>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d102      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x4b8>
 800291e:	4b45      	ldr	r3, [pc, #276]	; (8002a34 <HAL_ADC_ConfigChannel+0x5c8>)
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	e001      	b.n	8002928 <HAL_ADC_ConfigChannel+0x4bc>
 8002924:	2300      	movs	r3, #0
 8002926:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	2b01      	cmp	r3, #1
 8002934:	d108      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x4dc>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x4dc>
 8002944:	2301      	movs	r3, #1
 8002946:	e000      	b.n	800294a <HAL_ADC_ConfigChannel+0x4de>
 8002948:	2300      	movs	r3, #0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d150      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800294e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002950:	2b00      	cmp	r3, #0
 8002952:	d010      	beq.n	8002976 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 0303 	and.w	r3, r3, #3
 800295c:	2b01      	cmp	r3, #1
 800295e:	d107      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x504>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b01      	cmp	r3, #1
 800296a:	d101      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x504>
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <HAL_ADC_ConfigChannel+0x506>
 8002970:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002972:	2b00      	cmp	r3, #0
 8002974:	d13c      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2b10      	cmp	r3, #16
 800297c:	d11d      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x54e>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002986:	d118      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002988:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002990:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002992:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002994:	4b29      	ldr	r3, [pc, #164]	; (8002a3c <HAL_ADC_ConfigChannel+0x5d0>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a29      	ldr	r2, [pc, #164]	; (8002a40 <HAL_ADC_ConfigChannel+0x5d4>)
 800299a:	fba2 2303 	umull	r2, r3, r2, r3
 800299e:	0c9a      	lsrs	r2, r3, #18
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029aa:	e002      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1f9      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80029b8:	e02e      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2b11      	cmp	r3, #17
 80029c0:	d10b      	bne.n	80029da <HAL_ADC_ConfigChannel+0x56e>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029ca:	d106      	bne.n	80029da <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80029cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80029d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029d6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80029d8:	e01e      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2b12      	cmp	r3, #18
 80029e0:	d11a      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80029e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80029ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029ec:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80029ee:	e013      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	f043 0220 	orr.w	r2, r3, #32
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002a02:	e00a      	b.n	8002a1a <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	f043 0220 	orr.w	r2, r3, #32
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002a16:	e000      	b.n	8002a1a <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a18:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002a22:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	376c      	adds	r7, #108	; 0x6c
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	50000400 	.word	0x50000400
 8002a38:	50000500 	.word	0x50000500
 8002a3c:	20000010 	.word	0x20000010
 8002a40:	431bde83 	.word	0x431bde83

08002a44 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b099      	sub	sp, #100	; 0x64
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a5c:	d102      	bne.n	8002a64 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002a5e:	4b6d      	ldr	r3, [pc, #436]	; (8002c14 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002a60:	60bb      	str	r3, [r7, #8]
 8002a62:	e01a      	b.n	8002a9a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a6a      	ldr	r2, [pc, #424]	; (8002c14 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d103      	bne.n	8002a76 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002a6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a72:	60bb      	str	r3, [r7, #8]
 8002a74:	e011      	b.n	8002a9a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a67      	ldr	r2, [pc, #412]	; (8002c18 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d102      	bne.n	8002a86 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002a80:	4b66      	ldr	r3, [pc, #408]	; (8002c1c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002a82:	60bb      	str	r3, [r7, #8]
 8002a84:	e009      	b.n	8002a9a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a64      	ldr	r2, [pc, #400]	; (8002c1c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d102      	bne.n	8002a96 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002a90:	4b61      	ldr	r3, [pc, #388]	; (8002c18 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002a92:	60bb      	str	r3, [r7, #8]
 8002a94:	e001      	b.n	8002a9a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002a96:	2300      	movs	r3, #0
 8002a98:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e0b0      	b.n	8002c06 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d101      	bne.n	8002ab2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e0a9      	b.n	8002c06 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f040 808d 	bne.w	8002be4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f040 8086 	bne.w	8002be4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ae0:	d004      	beq.n	8002aec <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a4b      	ldr	r2, [pc, #300]	; (8002c14 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d101      	bne.n	8002af0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002aec:	4b4c      	ldr	r3, [pc, #304]	; (8002c20 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002aee:	e000      	b.n	8002af2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002af0:	4b4c      	ldr	r3, [pc, #304]	; (8002c24 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002af2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d040      	beq.n	8002b7e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002afc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	6859      	ldr	r1, [r3, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b0e:	035b      	lsls	r3, r3, #13
 8002b10:	430b      	orrs	r3, r1
 8002b12:	431a      	orrs	r2, r3
 8002b14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b16:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d108      	bne.n	8002b38 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d101      	bne.n	8002b38 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002b34:	2301      	movs	r3, #1
 8002b36:	e000      	b.n	8002b3a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002b38:	2300      	movs	r3, #0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d15c      	bne.n	8002bf8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 0303 	and.w	r3, r3, #3
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d107      	bne.n	8002b5a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002b5a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d14b      	bne.n	8002bf8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002b60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002b68:	f023 030f 	bic.w	r3, r3, #15
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	6811      	ldr	r1, [r2, #0]
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	6892      	ldr	r2, [r2, #8]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	431a      	orrs	r2, r3
 8002b78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b7a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b7c:	e03c      	b.n	8002bf8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002b7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b88:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 0303 	and.w	r3, r3, #3
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d108      	bne.n	8002baa <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d101      	bne.n	8002baa <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002baa:	2300      	movs	r3, #0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d123      	bne.n	8002bf8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 0303 	and.w	r3, r3, #3
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d107      	bne.n	8002bcc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e000      	b.n	8002bce <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002bcc:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d112      	bne.n	8002bf8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002bd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002bda:	f023 030f 	bic.w	r3, r3, #15
 8002bde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002be0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002be2:	e009      	b.n	8002bf8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	f043 0220 	orr.w	r2, r3, #32
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002bf6:	e000      	b.n	8002bfa <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bf8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002c02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002c06:	4618      	mov	r0, r3
 8002c08:	3764      	adds	r7, #100	; 0x64
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	50000100 	.word	0x50000100
 8002c18:	50000400 	.word	0x50000400
 8002c1c:	50000500 	.word	0x50000500
 8002c20:	50000300 	.word	0x50000300
 8002c24:	50000700 	.word	0x50000700

08002c28 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d108      	bne.n	8002c54 <ADC_Enable+0x2c>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d101      	bne.n	8002c54 <ADC_Enable+0x2c>
 8002c50:	2301      	movs	r3, #1
 8002c52:	e000      	b.n	8002c56 <ADC_Enable+0x2e>
 8002c54:	2300      	movs	r3, #0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d143      	bne.n	8002ce2 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	4b22      	ldr	r3, [pc, #136]	; (8002cec <ADC_Enable+0xc4>)
 8002c62:	4013      	ands	r3, r2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00d      	beq.n	8002c84 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	f043 0210 	orr.w	r2, r3, #16
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c78:	f043 0201 	orr.w	r2, r3, #1
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e02f      	b.n	8002ce4 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689a      	ldr	r2, [r3, #8]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0201 	orr.w	r2, r2, #1
 8002c92:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002c94:	f7fe ff66 	bl	8001b64 <HAL_GetTick>
 8002c98:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002c9a:	e01b      	b.n	8002cd4 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c9c:	f7fe ff62 	bl	8001b64 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d914      	bls.n	8002cd4 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d00d      	beq.n	8002cd4 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbc:	f043 0210 	orr.w	r2, r3, #16
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc8:	f043 0201 	orr.w	r2, r3, #1
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e007      	b.n	8002ce4 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d1dc      	bne.n	8002c9c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	8000003f 	.word	0x8000003f

08002cf0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d108      	bne.n	8002d1c <ADC_Disable+0x2c>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d101      	bne.n	8002d1c <ADC_Disable+0x2c>
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <ADC_Disable+0x2e>
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d047      	beq.n	8002db2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 030d 	and.w	r3, r3, #13
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d10f      	bne.n	8002d50 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0202 	orr.w	r2, r2, #2
 8002d3e:	609a      	str	r2, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2203      	movs	r2, #3
 8002d46:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002d48:	f7fe ff0c 	bl	8001b64 <HAL_GetTick>
 8002d4c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002d4e:	e029      	b.n	8002da4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	f043 0210 	orr.w	r2, r3, #16
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d60:	f043 0201 	orr.w	r2, r3, #1
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e023      	b.n	8002db4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d6c:	f7fe fefa 	bl	8001b64 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d914      	bls.n	8002da4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d10d      	bne.n	8002da4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	f043 0210 	orr.w	r2, r3, #16
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d98:	f043 0201 	orr.w	r2, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e007      	b.n	8002db4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d0dc      	beq.n	8002d6c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 030c 	and.w	r3, r3, #12
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 809a 	beq.w	8002f16 <ADC_ConversionStop+0x15a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002df0:	d12a      	bne.n	8002e48 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d126      	bne.n	8002e48 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d122      	bne.n	8002e48 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8002e02:	230c      	movs	r3, #12
 8002e04:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002e06:	e014      	b.n	8002e32 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	4a45      	ldr	r2, [pc, #276]	; (8002f20 <ADC_ConversionStop+0x164>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d90d      	bls.n	8002e2c <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e14:	f043 0210 	orr.w	r2, r3, #16
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e20:	f043 0201 	orr.w	r2, r3, #1
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e075      	b.n	8002f18 <ADC_ConversionStop+0x15c>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3c:	2b40      	cmp	r3, #64	; 0x40
 8002e3e:	d1e3      	bne.n	8002e08 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2240      	movs	r2, #64	; 0x40
 8002e46:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	2b60      	cmp	r3, #96	; 0x60
 8002e4c:	d015      	beq.n	8002e7a <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d10e      	bne.n	8002e7a <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d107      	bne.n	8002e7a <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f042 0210 	orr.w	r2, r2, #16
 8002e78:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	2b0c      	cmp	r3, #12
 8002e7e:	d015      	beq.n	8002eac <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d10e      	bne.n	8002eac <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d107      	bne.n	8002eac <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689a      	ldr	r2, [r3, #8]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0220 	orr.w	r2, r2, #32
 8002eaa:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	2b60      	cmp	r3, #96	; 0x60
 8002eb0:	d004      	beq.n	8002ebc <ADC_ConversionStop+0x100>
 8002eb2:	2b6c      	cmp	r3, #108	; 0x6c
 8002eb4:	d105      	bne.n	8002ec2 <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002eb6:	230c      	movs	r3, #12
 8002eb8:	617b      	str	r3, [r7, #20]
        break;
 8002eba:	e005      	b.n	8002ec8 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002ebc:	2308      	movs	r3, #8
 8002ebe:	617b      	str	r3, [r7, #20]
        break;
 8002ec0:	e002      	b.n	8002ec8 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002ec2:	2304      	movs	r3, #4
 8002ec4:	617b      	str	r3, [r7, #20]
        break;
 8002ec6:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002ec8:	f7fe fe4c 	bl	8001b64 <HAL_GetTick>
 8002ecc:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002ece:	e01b      	b.n	8002f08 <ADC_ConversionStop+0x14c>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002ed0:	f7fe fe48 	bl	8001b64 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b0b      	cmp	r3, #11
 8002edc:	d914      	bls.n	8002f08 <ADC_ConversionStop+0x14c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00d      	beq.n	8002f08 <ADC_ConversionStop+0x14c>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef0:	f043 0210 	orr.w	r2, r3, #16
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efc:	f043 0201 	orr.w	r2, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e007      	b.n	8002f18 <ADC_ConversionStop+0x15c>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	4013      	ands	r3, r2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1dc      	bne.n	8002ed0 <ADC_ConversionStop+0x114>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	000993ff 	.word	0x000993ff

08002f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f34:	4b0c      	ldr	r3, [pc, #48]	; (8002f68 <__NVIC_SetPriorityGrouping+0x44>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f40:	4013      	ands	r3, r2
 8002f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f56:	4a04      	ldr	r2, [pc, #16]	; (8002f68 <__NVIC_SetPriorityGrouping+0x44>)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	60d3      	str	r3, [r2, #12]
}
 8002f5c:	bf00      	nop
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	e000ed00 	.word	0xe000ed00

08002f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f70:	4b04      	ldr	r3, [pc, #16]	; (8002f84 <__NVIC_GetPriorityGrouping+0x18>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	0a1b      	lsrs	r3, r3, #8
 8002f76:	f003 0307 	and.w	r3, r3, #7
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	e000ed00 	.word	0xe000ed00

08002f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	4603      	mov	r3, r0
 8002f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	db0b      	blt.n	8002fb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f9a:	79fb      	ldrb	r3, [r7, #7]
 8002f9c:	f003 021f 	and.w	r2, r3, #31
 8002fa0:	4907      	ldr	r1, [pc, #28]	; (8002fc0 <__NVIC_EnableIRQ+0x38>)
 8002fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa6:	095b      	lsrs	r3, r3, #5
 8002fa8:	2001      	movs	r0, #1
 8002faa:	fa00 f202 	lsl.w	r2, r0, r2
 8002fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	e000e100 	.word	0xe000e100

08002fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	6039      	str	r1, [r7, #0]
 8002fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	db0a      	blt.n	8002fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	490c      	ldr	r1, [pc, #48]	; (8003010 <__NVIC_SetPriority+0x4c>)
 8002fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe2:	0112      	lsls	r2, r2, #4
 8002fe4:	b2d2      	uxtb	r2, r2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fec:	e00a      	b.n	8003004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	4908      	ldr	r1, [pc, #32]	; (8003014 <__NVIC_SetPriority+0x50>)
 8002ff4:	79fb      	ldrb	r3, [r7, #7]
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	3b04      	subs	r3, #4
 8002ffc:	0112      	lsls	r2, r2, #4
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	440b      	add	r3, r1
 8003002:	761a      	strb	r2, [r3, #24]
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	e000e100 	.word	0xe000e100
 8003014:	e000ed00 	.word	0xe000ed00

08003018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003018:	b480      	push	{r7}
 800301a:	b089      	sub	sp, #36	; 0x24
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	f1c3 0307 	rsb	r3, r3, #7
 8003032:	2b04      	cmp	r3, #4
 8003034:	bf28      	it	cs
 8003036:	2304      	movcs	r3, #4
 8003038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	3304      	adds	r3, #4
 800303e:	2b06      	cmp	r3, #6
 8003040:	d902      	bls.n	8003048 <NVIC_EncodePriority+0x30>
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	3b03      	subs	r3, #3
 8003046:	e000      	b.n	800304a <NVIC_EncodePriority+0x32>
 8003048:	2300      	movs	r3, #0
 800304a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800304c:	f04f 32ff 	mov.w	r2, #4294967295
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43da      	mvns	r2, r3
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	401a      	ands	r2, r3
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003060:	f04f 31ff 	mov.w	r1, #4294967295
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	fa01 f303 	lsl.w	r3, r1, r3
 800306a:	43d9      	mvns	r1, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003070:	4313      	orrs	r3, r2
         );
}
 8003072:	4618      	mov	r0, r3
 8003074:	3724      	adds	r7, #36	; 0x24
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
	...

08003080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3b01      	subs	r3, #1
 800308c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003090:	d301      	bcc.n	8003096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003092:	2301      	movs	r3, #1
 8003094:	e00f      	b.n	80030b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003096:	4a0a      	ldr	r2, [pc, #40]	; (80030c0 <SysTick_Config+0x40>)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	3b01      	subs	r3, #1
 800309c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800309e:	210f      	movs	r1, #15
 80030a0:	f04f 30ff 	mov.w	r0, #4294967295
 80030a4:	f7ff ff8e 	bl	8002fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030a8:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <SysTick_Config+0x40>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ae:	4b04      	ldr	r3, [pc, #16]	; (80030c0 <SysTick_Config+0x40>)
 80030b0:	2207      	movs	r2, #7
 80030b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	e000e010 	.word	0xe000e010

080030c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff ff29 	bl	8002f24 <__NVIC_SetPriorityGrouping>
}
 80030d2:	bf00      	nop
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b086      	sub	sp, #24
 80030de:	af00      	add	r7, sp, #0
 80030e0:	4603      	mov	r3, r0
 80030e2:	60b9      	str	r1, [r7, #8]
 80030e4:	607a      	str	r2, [r7, #4]
 80030e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030ec:	f7ff ff3e 	bl	8002f6c <__NVIC_GetPriorityGrouping>
 80030f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	68b9      	ldr	r1, [r7, #8]
 80030f6:	6978      	ldr	r0, [r7, #20]
 80030f8:	f7ff ff8e 	bl	8003018 <NVIC_EncodePriority>
 80030fc:	4602      	mov	r2, r0
 80030fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003102:	4611      	mov	r1, r2
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff ff5d 	bl	8002fc4 <__NVIC_SetPriority>
}
 800310a:	bf00      	nop
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b082      	sub	sp, #8
 8003116:	af00      	add	r7, sp, #0
 8003118:	4603      	mov	r3, r0
 800311a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800311c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff ff31 	bl	8002f88 <__NVIC_EnableIRQ>
}
 8003126:	bf00      	nop
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b082      	sub	sp, #8
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7ff ffa2 	bl	8003080 <SysTick_Config>
 800313c:	4603      	mov	r3, r0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003146:	b580      	push	{r7, lr}
 8003148:	b082      	sub	sp, #8
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e014      	b.n	8003182 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	791b      	ldrb	r3, [r3, #4]
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d105      	bne.n	800316e <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f7fe faf5 	bl	8001758 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2202      	movs	r2, #2
 8003172:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800318a:	b480      	push	{r7}
 800318c:	b087      	sub	sp, #28
 800318e:	af00      	add	r7, sp, #0
 8003190:	60f8      	str	r0, [r7, #12]
 8003192:	60b9      	str	r1, [r7, #8]
 8003194:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003196:	2300      	movs	r3, #0
 8003198:	617b      	str	r3, [r7, #20]
 800319a:	2300      	movs	r3, #0
 800319c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	795b      	ldrb	r3, [r3, #5]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_DAC_ConfigChannel+0x20>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e036      	b.n	8003218 <HAL_DAC_ConfigChannel+0x8e>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2201      	movs	r2, #1
 80031ae:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2202      	movs	r2, #2
 80031b4:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80031be:	f640 72fe 	movw	r2, #4094	; 0xffe
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	4013      	ands	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	4313      	orrs	r3, r2
 80031da:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6819      	ldr	r1, [r3, #0]
 80031f8:	22c0      	movs	r2, #192	; 0xc0
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	43da      	mvns	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	400a      	ands	r2, r1
 8003208:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2201      	movs	r2, #1
 800320e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	371c      	adds	r7, #28
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800322c:	2300      	movs	r3, #0
 800322e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e037      	b.n	80032aa <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2202      	movs	r2, #2
 800323e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003250:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003254:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800325e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800326a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003276:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	4313      	orrs	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 f92b 	bl	80034e8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}  
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d008      	beq.n	80032d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2204      	movs	r2, #4
 80032c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e020      	b.n	8003318 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 020e 	bic.w	r2, r2, #14
 80032e4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0201 	bic.w	r2, r2, #1
 80032f4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fe:	2101      	movs	r1, #1
 8003300:	fa01 f202 	lsl.w	r2, r1, r2
 8003304:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003336:	2b02      	cmp	r3, #2
 8003338:	d005      	beq.n	8003346 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2204      	movs	r2, #4
 800333e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	73fb      	strb	r3, [r7, #15]
 8003344:	e027      	b.n	8003396 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 020e 	bic.w	r2, r2, #14
 8003354:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 0201 	bic.w	r2, r2, #1
 8003364:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800336e:	2101      	movs	r1, #1
 8003370:	fa01 f202 	lsl.w	r2, r1, r2
 8003374:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	4798      	blx	r3
    } 
  }
  return status;
 8003396:	7bfb      	ldrb	r3, [r7, #15]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	2204      	movs	r2, #4
 80033be:	409a      	lsls	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4013      	ands	r3, r2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d024      	beq.n	8003412 <HAL_DMA_IRQHandler+0x72>
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d01f      	beq.n	8003412 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0320 	and.w	r3, r3, #32
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d107      	bne.n	80033f0 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0204 	bic.w	r2, r2, #4
 80033ee:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f8:	2104      	movs	r1, #4
 80033fa:	fa01 f202 	lsl.w	r2, r1, r2
 80033fe:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003404:	2b00      	cmp	r3, #0
 8003406:	d06a      	beq.n	80034de <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003410:	e065      	b.n	80034de <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	2202      	movs	r2, #2
 8003418:	409a      	lsls	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	4013      	ands	r3, r2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d02c      	beq.n	800347c <HAL_DMA_IRQHandler+0xdc>
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d027      	beq.n	800347c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0320 	and.w	r3, r3, #32
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10b      	bne.n	8003452 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 020a 	bic.w	r2, r2, #10
 8003448:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800345a:	2102      	movs	r1, #2
 800345c:	fa01 f202 	lsl.w	r2, r1, r2
 8003460:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346e:	2b00      	cmp	r3, #0
 8003470:	d035      	beq.n	80034de <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800347a:	e030      	b.n	80034de <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	2208      	movs	r2, #8
 8003482:	409a      	lsls	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4013      	ands	r3, r2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d028      	beq.n	80034de <HAL_DMA_IRQHandler+0x13e>
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b00      	cmp	r3, #0
 8003494:	d023      	beq.n	80034de <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 020e 	bic.w	r2, r2, #14
 80034a4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ae:	2101      	movs	r1, #1
 80034b0:	fa01 f202 	lsl.w	r2, r1, r2
 80034b4:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d004      	beq.n	80034de <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	4798      	blx	r3
    }
  }
}  
 80034dc:	e7ff      	b.n	80034de <HAL_DMA_IRQHandler+0x13e>
 80034de:	bf00      	nop
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	461a      	mov	r2, r3
 80034f6:	4b14      	ldr	r3, [pc, #80]	; (8003548 <DMA_CalcBaseAndBitshift+0x60>)
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d80f      	bhi.n	800351c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	461a      	mov	r2, r3
 8003502:	4b12      	ldr	r3, [pc, #72]	; (800354c <DMA_CalcBaseAndBitshift+0x64>)
 8003504:	4413      	add	r3, r2
 8003506:	4a12      	ldr	r2, [pc, #72]	; (8003550 <DMA_CalcBaseAndBitshift+0x68>)
 8003508:	fba2 2303 	umull	r2, r3, r2, r3
 800350c:	091b      	lsrs	r3, r3, #4
 800350e:	009a      	lsls	r2, r3, #2
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a0f      	ldr	r2, [pc, #60]	; (8003554 <DMA_CalcBaseAndBitshift+0x6c>)
 8003518:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800351a:	e00e      	b.n	800353a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	461a      	mov	r2, r3
 8003522:	4b0d      	ldr	r3, [pc, #52]	; (8003558 <DMA_CalcBaseAndBitshift+0x70>)
 8003524:	4413      	add	r3, r2
 8003526:	4a0a      	ldr	r2, [pc, #40]	; (8003550 <DMA_CalcBaseAndBitshift+0x68>)
 8003528:	fba2 2303 	umull	r2, r3, r2, r3
 800352c:	091b      	lsrs	r3, r3, #4
 800352e:	009a      	lsls	r2, r3, #2
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a09      	ldr	r2, [pc, #36]	; (800355c <DMA_CalcBaseAndBitshift+0x74>)
 8003538:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	40020407 	.word	0x40020407
 800354c:	bffdfff8 	.word	0xbffdfff8
 8003550:	cccccccd 	.word	0xcccccccd
 8003554:	40020000 	.word	0x40020000
 8003558:	bffdfbf8 	.word	0xbffdfbf8
 800355c:	40020400 	.word	0x40020400

08003560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003560:	b480      	push	{r7}
 8003562:	b087      	sub	sp, #28
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800356a:	2300      	movs	r3, #0
 800356c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800356e:	e160      	b.n	8003832 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	2101      	movs	r1, #1
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	fa01 f303 	lsl.w	r3, r1, r3
 800357c:	4013      	ands	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 8152 	beq.w	800382c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f003 0303 	and.w	r3, r3, #3
 8003590:	2b01      	cmp	r3, #1
 8003592:	d005      	beq.n	80035a0 <HAL_GPIO_Init+0x40>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f003 0303 	and.w	r3, r3, #3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d130      	bne.n	8003602 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	2203      	movs	r2, #3
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	43db      	mvns	r3, r3
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	4013      	ands	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035d6:	2201      	movs	r2, #1
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	43db      	mvns	r3, r3
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	4013      	ands	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	091b      	lsrs	r3, r3, #4
 80035ec:	f003 0201 	and.w	r2, r3, #1
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f003 0303 	and.w	r3, r3, #3
 800360a:	2b03      	cmp	r3, #3
 800360c:	d017      	beq.n	800363e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	2203      	movs	r2, #3
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	43db      	mvns	r3, r3
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	4013      	ands	r3, r2
 8003624:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	689a      	ldr	r2, [r3, #8]
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	4313      	orrs	r3, r2
 8003636:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d123      	bne.n	8003692 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	08da      	lsrs	r2, r3, #3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3208      	adds	r2, #8
 8003652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003656:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	220f      	movs	r2, #15
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	43db      	mvns	r3, r3
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	4013      	ands	r3, r2
 800366c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	691a      	ldr	r2, [r3, #16]
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	4313      	orrs	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	08da      	lsrs	r2, r3, #3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3208      	adds	r2, #8
 800368c:	6939      	ldr	r1, [r7, #16]
 800368e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	2203      	movs	r2, #3
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	43db      	mvns	r3, r3
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	4013      	ands	r3, r2
 80036a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f003 0203 	and.w	r2, r3, #3
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 80ac 	beq.w	800382c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036d4:	4b5e      	ldr	r3, [pc, #376]	; (8003850 <HAL_GPIO_Init+0x2f0>)
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	4a5d      	ldr	r2, [pc, #372]	; (8003850 <HAL_GPIO_Init+0x2f0>)
 80036da:	f043 0301 	orr.w	r3, r3, #1
 80036de:	6193      	str	r3, [r2, #24]
 80036e0:	4b5b      	ldr	r3, [pc, #364]	; (8003850 <HAL_GPIO_Init+0x2f0>)
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	60bb      	str	r3, [r7, #8]
 80036ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036ec:	4a59      	ldr	r2, [pc, #356]	; (8003854 <HAL_GPIO_Init+0x2f4>)
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	089b      	lsrs	r3, r3, #2
 80036f2:	3302      	adds	r3, #2
 80036f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f003 0303 	and.w	r3, r3, #3
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	220f      	movs	r2, #15
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	43db      	mvns	r3, r3
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4013      	ands	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003716:	d025      	beq.n	8003764 <HAL_GPIO_Init+0x204>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a4f      	ldr	r2, [pc, #316]	; (8003858 <HAL_GPIO_Init+0x2f8>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d01f      	beq.n	8003760 <HAL_GPIO_Init+0x200>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a4e      	ldr	r2, [pc, #312]	; (800385c <HAL_GPIO_Init+0x2fc>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d019      	beq.n	800375c <HAL_GPIO_Init+0x1fc>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a4d      	ldr	r2, [pc, #308]	; (8003860 <HAL_GPIO_Init+0x300>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d013      	beq.n	8003758 <HAL_GPIO_Init+0x1f8>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a4c      	ldr	r2, [pc, #304]	; (8003864 <HAL_GPIO_Init+0x304>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d00d      	beq.n	8003754 <HAL_GPIO_Init+0x1f4>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a4b      	ldr	r2, [pc, #300]	; (8003868 <HAL_GPIO_Init+0x308>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d007      	beq.n	8003750 <HAL_GPIO_Init+0x1f0>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a4a      	ldr	r2, [pc, #296]	; (800386c <HAL_GPIO_Init+0x30c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d101      	bne.n	800374c <HAL_GPIO_Init+0x1ec>
 8003748:	2306      	movs	r3, #6
 800374a:	e00c      	b.n	8003766 <HAL_GPIO_Init+0x206>
 800374c:	2307      	movs	r3, #7
 800374e:	e00a      	b.n	8003766 <HAL_GPIO_Init+0x206>
 8003750:	2305      	movs	r3, #5
 8003752:	e008      	b.n	8003766 <HAL_GPIO_Init+0x206>
 8003754:	2304      	movs	r3, #4
 8003756:	e006      	b.n	8003766 <HAL_GPIO_Init+0x206>
 8003758:	2303      	movs	r3, #3
 800375a:	e004      	b.n	8003766 <HAL_GPIO_Init+0x206>
 800375c:	2302      	movs	r3, #2
 800375e:	e002      	b.n	8003766 <HAL_GPIO_Init+0x206>
 8003760:	2301      	movs	r3, #1
 8003762:	e000      	b.n	8003766 <HAL_GPIO_Init+0x206>
 8003764:	2300      	movs	r3, #0
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	f002 0203 	and.w	r2, r2, #3
 800376c:	0092      	lsls	r2, r2, #2
 800376e:	4093      	lsls	r3, r2
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	4313      	orrs	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003776:	4937      	ldr	r1, [pc, #220]	; (8003854 <HAL_GPIO_Init+0x2f4>)
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	089b      	lsrs	r3, r3, #2
 800377c:	3302      	adds	r3, #2
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003784:	4b3a      	ldr	r3, [pc, #232]	; (8003870 <HAL_GPIO_Init+0x310>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	43db      	mvns	r3, r3
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	4013      	ands	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d003      	beq.n	80037a8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80037a8:	4a31      	ldr	r2, [pc, #196]	; (8003870 <HAL_GPIO_Init+0x310>)
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80037ae:	4b30      	ldr	r3, [pc, #192]	; (8003870 <HAL_GPIO_Init+0x310>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	43db      	mvns	r3, r3
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	4013      	ands	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80037d2:	4a27      	ldr	r2, [pc, #156]	; (8003870 <HAL_GPIO_Init+0x310>)
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037d8:	4b25      	ldr	r3, [pc, #148]	; (8003870 <HAL_GPIO_Init+0x310>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	43db      	mvns	r3, r3
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	4013      	ands	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d003      	beq.n	80037fc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80037fc:	4a1c      	ldr	r2, [pc, #112]	; (8003870 <HAL_GPIO_Init+0x310>)
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003802:	4b1b      	ldr	r3, [pc, #108]	; (8003870 <HAL_GPIO_Init+0x310>)
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	43db      	mvns	r3, r3
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	4013      	ands	r3, r2
 8003810:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4313      	orrs	r3, r2
 8003824:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003826:	4a12      	ldr	r2, [pc, #72]	; (8003870 <HAL_GPIO_Init+0x310>)
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	3301      	adds	r3, #1
 8003830:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	fa22 f303 	lsr.w	r3, r2, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	f47f ae97 	bne.w	8003570 <HAL_GPIO_Init+0x10>
  }
}
 8003842:	bf00      	nop
 8003844:	371c      	adds	r7, #28
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	40021000 	.word	0x40021000
 8003854:	40010000 	.word	0x40010000
 8003858:	48000400 	.word	0x48000400
 800385c:	48000800 	.word	0x48000800
 8003860:	48000c00 	.word	0x48000c00
 8003864:	48001000 	.word	0x48001000
 8003868:	48001400 	.word	0x48001400
 800386c:	48001800 	.word	0x48001800
 8003870:	40010400 	.word	0x40010400

08003874 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	460b      	mov	r3, r1
 800387e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691a      	ldr	r2, [r3, #16]
 8003884:	887b      	ldrh	r3, [r7, #2]
 8003886:	4013      	ands	r3, r2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d002      	beq.n	8003892 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800388c:	2301      	movs	r3, #1
 800388e:	73fb      	strb	r3, [r7, #15]
 8003890:	e001      	b.n	8003896 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003892:	2300      	movs	r3, #0
 8003894:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003896:	7bfb      	ldrb	r3, [r7, #15]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	807b      	strh	r3, [r7, #2]
 80038b0:	4613      	mov	r3, r2
 80038b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038b4:	787b      	ldrb	r3, [r7, #1]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038ba:	887a      	ldrh	r2, [r7, #2]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038c0:	e002      	b.n	80038c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038c2:	887a      	ldrh	r2, [r7, #2]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	460b      	mov	r3, r1
 80038de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038e6:	887a      	ldrh	r2, [r7, #2]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4013      	ands	r3, r2
 80038ec:	041a      	lsls	r2, r3, #16
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	43d9      	mvns	r1, r3
 80038f2:	887b      	ldrh	r3, [r7, #2]
 80038f4:	400b      	ands	r3, r1
 80038f6:	431a      	orrs	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	619a      	str	r2, [r3, #24]
}
 80038fc:	bf00      	nop
 80038fe:	3714      	adds	r7, #20
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	4603      	mov	r3, r0
 8003910:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003912:	4b08      	ldr	r3, [pc, #32]	; (8003934 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003914:	695a      	ldr	r2, [r3, #20]
 8003916:	88fb      	ldrh	r3, [r7, #6]
 8003918:	4013      	ands	r3, r2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d006      	beq.n	800392c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800391e:	4a05      	ldr	r2, [pc, #20]	; (8003934 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003920:	88fb      	ldrh	r3, [r7, #6]
 8003922:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003924:	88fb      	ldrh	r3, [r7, #6]
 8003926:	4618      	mov	r0, r3
 8003928:	f7fc fe90 	bl	800064c <HAL_GPIO_EXTI_Callback>
  }
}
 800392c:	bf00      	nop
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40010400 	.word	0x40010400

08003938 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800393e:	af00      	add	r7, sp, #0
 8003940:	1d3b      	adds	r3, r7, #4
 8003942:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003944:	1d3b      	adds	r3, r7, #4
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d102      	bne.n	8003952 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	f000 bf01 	b.w	8004754 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003952:	1d3b      	adds	r3, r7, #4
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 8160 	beq.w	8003c22 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003962:	4bae      	ldr	r3, [pc, #696]	; (8003c1c <HAL_RCC_OscConfig+0x2e4>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f003 030c 	and.w	r3, r3, #12
 800396a:	2b04      	cmp	r3, #4
 800396c:	d00c      	beq.n	8003988 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800396e:	4bab      	ldr	r3, [pc, #684]	; (8003c1c <HAL_RCC_OscConfig+0x2e4>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f003 030c 	and.w	r3, r3, #12
 8003976:	2b08      	cmp	r3, #8
 8003978:	d159      	bne.n	8003a2e <HAL_RCC_OscConfig+0xf6>
 800397a:	4ba8      	ldr	r3, [pc, #672]	; (8003c1c <HAL_RCC_OscConfig+0x2e4>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003986:	d152      	bne.n	8003a2e <HAL_RCC_OscConfig+0xf6>
 8003988:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800398c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003990:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003994:	fa93 f3a3 	rbit	r3, r3
 8003998:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800399c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a0:	fab3 f383 	clz	r3, r3
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	095b      	lsrs	r3, r3, #5
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	f043 0301 	orr.w	r3, r3, #1
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d102      	bne.n	80039ba <HAL_RCC_OscConfig+0x82>
 80039b4:	4b99      	ldr	r3, [pc, #612]	; (8003c1c <HAL_RCC_OscConfig+0x2e4>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	e015      	b.n	80039e6 <HAL_RCC_OscConfig+0xae>
 80039ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039be:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80039c6:	fa93 f3a3 	rbit	r3, r3
 80039ca:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80039ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039d2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80039d6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80039da:	fa93 f3a3 	rbit	r3, r3
 80039de:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80039e2:	4b8e      	ldr	r3, [pc, #568]	; (8003c1c <HAL_RCC_OscConfig+0x2e4>)
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039ea:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80039ee:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80039f2:	fa92 f2a2 	rbit	r2, r2
 80039f6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80039fa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80039fe:	fab2 f282 	clz	r2, r2
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	f042 0220 	orr.w	r2, r2, #32
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	f002 021f 	and.w	r2, r2, #31
 8003a0e:	2101      	movs	r1, #1
 8003a10:	fa01 f202 	lsl.w	r2, r1, r2
 8003a14:	4013      	ands	r3, r2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 8102 	beq.w	8003c20 <HAL_RCC_OscConfig+0x2e8>
 8003a1c:	1d3b      	adds	r3, r7, #4
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f040 80fc 	bne.w	8003c20 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	f000 be93 	b.w	8004754 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a2e:	1d3b      	adds	r3, r7, #4
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a38:	d106      	bne.n	8003a48 <HAL_RCC_OscConfig+0x110>
 8003a3a:	4b78      	ldr	r3, [pc, #480]	; (8003c1c <HAL_RCC_OscConfig+0x2e4>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a77      	ldr	r2, [pc, #476]	; (8003c1c <HAL_RCC_OscConfig+0x2e4>)
 8003a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	e030      	b.n	8003aaa <HAL_RCC_OscConfig+0x172>
 8003a48:	1d3b      	adds	r3, r7, #4
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10c      	bne.n	8003a6c <HAL_RCC_OscConfig+0x134>
 8003a52:	4b72      	ldr	r3, [pc, #456]	; (8003c1c <HAL_RCC_OscConfig+0x2e4>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a71      	ldr	r2, [pc, #452]	; (8003c1c <HAL_RCC_OscConfig+0x2e4>)
 8003a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	4b6f      	ldr	r3, [pc, #444]	; (8003c1c <HAL_RCC_OscConfig+0x2e4>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a6e      	ldr	r2, [pc, #440]	; (8003c1c <HAL_RCC_OscConfig+0x2e4>)
 8003a64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a68:	6013      	str	r3, [r2, #0]
 8003a6a:	e01e      	b.n	8003aaa <HAL_RCC_OscConfig+0x172>
 8003a6c:	1d3b      	adds	r3, r7, #4
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a76:	d10c      	bne.n	8003a92 <HAL_RCC_OscConfig+0x15a>
 8003a78:	4b68      	ldr	r3, [pc, #416]	; (8003c1c <HAL_RCC_OscConfig+0x2e4>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a67      	ldr	r2, [pc, #412]	; (8003c1c <HAL_RCC_OscConfig+0x2e4>)
 8003a7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	4b65      	ldr	r3, [pc, #404]	; (8003c1c <HAL_RCC_OscConfig+0x2e4>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a64      	ldr	r2, [pc, #400]	; (8003c1c <HAL_RCC_OscConfig+0x2e4>)
 8003a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	e00b      	b.n	8003aaa <HAL_RCC_OscConfig+0x172>
 8003a92:	4b62      	ldr	r3, [pc, #392]	; (8003c1c <HAL_RCC_OscConfig+0x2e4>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a61      	ldr	r2, [pc, #388]	; (8003c1c <HAL_RCC_OscConfig+0x2e4>)
 8003a98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a9c:	6013      	str	r3, [r2, #0]
 8003a9e:	4b5f      	ldr	r3, [pc, #380]	; (8003c1c <HAL_RCC_OscConfig+0x2e4>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a5e      	ldr	r2, [pc, #376]	; (8003c1c <HAL_RCC_OscConfig+0x2e4>)
 8003aa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aa8:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003aaa:	1d3b      	adds	r3, r7, #4
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d059      	beq.n	8003b68 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab4:	f7fe f856 	bl	8001b64 <HAL_GetTick>
 8003ab8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003abc:	e00a      	b.n	8003ad4 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003abe:	f7fe f851 	bl	8001b64 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b64      	cmp	r3, #100	; 0x64
 8003acc:	d902      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	f000 be40 	b.w	8004754 <HAL_RCC_OscConfig+0xe1c>
 8003ad4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ad8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003adc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003ae0:	fa93 f3a3 	rbit	r3, r3
 8003ae4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003ae8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aec:	fab3 f383 	clz	r3, r3
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	095b      	lsrs	r3, r3, #5
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	f043 0301 	orr.w	r3, r3, #1
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d102      	bne.n	8003b06 <HAL_RCC_OscConfig+0x1ce>
 8003b00:	4b46      	ldr	r3, [pc, #280]	; (8003c1c <HAL_RCC_OscConfig+0x2e4>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	e015      	b.n	8003b32 <HAL_RCC_OscConfig+0x1fa>
 8003b06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b0a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003b12:	fa93 f3a3 	rbit	r3, r3
 8003b16:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003b1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b1e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003b22:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003b26:	fa93 f3a3 	rbit	r3, r3
 8003b2a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003b2e:	4b3b      	ldr	r3, [pc, #236]	; (8003c1c <HAL_RCC_OscConfig+0x2e4>)
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b36:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003b3a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003b3e:	fa92 f2a2 	rbit	r2, r2
 8003b42:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003b46:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003b4a:	fab2 f282 	clz	r2, r2
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	f042 0220 	orr.w	r2, r2, #32
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	f002 021f 	and.w	r2, r2, #31
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b60:	4013      	ands	r3, r2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0ab      	beq.n	8003abe <HAL_RCC_OscConfig+0x186>
 8003b66:	e05c      	b.n	8003c22 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b68:	f7fd fffc 	bl	8001b64 <HAL_GetTick>
 8003b6c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b70:	e00a      	b.n	8003b88 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b72:	f7fd fff7 	bl	8001b64 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b64      	cmp	r3, #100	; 0x64
 8003b80:	d902      	bls.n	8003b88 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	f000 bde6 	b.w	8004754 <HAL_RCC_OscConfig+0xe1c>
 8003b88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b8c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b90:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003b94:	fa93 f3a3 	rbit	r3, r3
 8003b98:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003b9c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ba0:	fab3 f383 	clz	r3, r3
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	f043 0301 	orr.w	r3, r3, #1
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d102      	bne.n	8003bba <HAL_RCC_OscConfig+0x282>
 8003bb4:	4b19      	ldr	r3, [pc, #100]	; (8003c1c <HAL_RCC_OscConfig+0x2e4>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	e015      	b.n	8003be6 <HAL_RCC_OscConfig+0x2ae>
 8003bba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bbe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003bc6:	fa93 f3a3 	rbit	r3, r3
 8003bca:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003bce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bd2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003bd6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003bda:	fa93 f3a3 	rbit	r3, r3
 8003bde:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003be2:	4b0e      	ldr	r3, [pc, #56]	; (8003c1c <HAL_RCC_OscConfig+0x2e4>)
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003bea:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003bee:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003bf2:	fa92 f2a2 	rbit	r2, r2
 8003bf6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003bfa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003bfe:	fab2 f282 	clz	r2, r2
 8003c02:	b2d2      	uxtb	r2, r2
 8003c04:	f042 0220 	orr.w	r2, r2, #32
 8003c08:	b2d2      	uxtb	r2, r2
 8003c0a:	f002 021f 	and.w	r2, r2, #31
 8003c0e:	2101      	movs	r1, #1
 8003c10:	fa01 f202 	lsl.w	r2, r1, r2
 8003c14:	4013      	ands	r3, r2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1ab      	bne.n	8003b72 <HAL_RCC_OscConfig+0x23a>
 8003c1a:	e002      	b.n	8003c22 <HAL_RCC_OscConfig+0x2ea>
 8003c1c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c22:	1d3b      	adds	r3, r7, #4
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 8170 	beq.w	8003f12 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003c32:	4bd0      	ldr	r3, [pc, #832]	; (8003f74 <HAL_RCC_OscConfig+0x63c>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f003 030c 	and.w	r3, r3, #12
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00c      	beq.n	8003c58 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003c3e:	4bcd      	ldr	r3, [pc, #820]	; (8003f74 <HAL_RCC_OscConfig+0x63c>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f003 030c 	and.w	r3, r3, #12
 8003c46:	2b08      	cmp	r3, #8
 8003c48:	d16d      	bne.n	8003d26 <HAL_RCC_OscConfig+0x3ee>
 8003c4a:	4bca      	ldr	r3, [pc, #808]	; (8003f74 <HAL_RCC_OscConfig+0x63c>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003c52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c56:	d166      	bne.n	8003d26 <HAL_RCC_OscConfig+0x3ee>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003c62:	fa93 f3a3 	rbit	r3, r3
 8003c66:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003c6a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c6e:	fab3 f383 	clz	r3, r3
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	095b      	lsrs	r3, r3, #5
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	f043 0301 	orr.w	r3, r3, #1
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d102      	bne.n	8003c88 <HAL_RCC_OscConfig+0x350>
 8003c82:	4bbc      	ldr	r3, [pc, #752]	; (8003f74 <HAL_RCC_OscConfig+0x63c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	e013      	b.n	8003cb0 <HAL_RCC_OscConfig+0x378>
 8003c88:	2302      	movs	r3, #2
 8003c8a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003c92:	fa93 f3a3 	rbit	r3, r3
 8003c96:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003ca0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003ca4:	fa93 f3a3 	rbit	r3, r3
 8003ca8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003cac:	4bb1      	ldr	r3, [pc, #708]	; (8003f74 <HAL_RCC_OscConfig+0x63c>)
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003cb6:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003cba:	fa92 f2a2 	rbit	r2, r2
 8003cbe:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003cc2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003cc6:	fab2 f282 	clz	r2, r2
 8003cca:	b2d2      	uxtb	r2, r2
 8003ccc:	f042 0220 	orr.w	r2, r2, #32
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	f002 021f 	and.w	r2, r2, #31
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cdc:	4013      	ands	r3, r2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d007      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x3ba>
 8003ce2:	1d3b      	adds	r3, r7, #4
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d002      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	f000 bd31 	b.w	8004754 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf2:	4ba0      	ldr	r3, [pc, #640]	; (8003f74 <HAL_RCC_OscConfig+0x63c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cfa:	1d3b      	adds	r3, r7, #4
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	21f8      	movs	r1, #248	; 0xf8
 8003d02:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d06:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003d0a:	fa91 f1a1 	rbit	r1, r1
 8003d0e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003d12:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003d16:	fab1 f181 	clz	r1, r1
 8003d1a:	b2c9      	uxtb	r1, r1
 8003d1c:	408b      	lsls	r3, r1
 8003d1e:	4995      	ldr	r1, [pc, #596]	; (8003f74 <HAL_RCC_OscConfig+0x63c>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d24:	e0f5      	b.n	8003f12 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d26:	1d3b      	adds	r3, r7, #4
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 8085 	beq.w	8003e3c <HAL_RCC_OscConfig+0x504>
 8003d32:	2301      	movs	r3, #1
 8003d34:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d38:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003d3c:	fa93 f3a3 	rbit	r3, r3
 8003d40:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003d44:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d48:	fab3 f383 	clz	r3, r3
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d52:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	461a      	mov	r2, r3
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5e:	f7fd ff01 	bl	8001b64 <HAL_GetTick>
 8003d62:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d66:	e00a      	b.n	8003d7e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d68:	f7fd fefc 	bl	8001b64 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d902      	bls.n	8003d7e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	f000 bceb 	b.w	8004754 <HAL_RCC_OscConfig+0xe1c>
 8003d7e:	2302      	movs	r3, #2
 8003d80:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d84:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003d88:	fa93 f3a3 	rbit	r3, r3
 8003d8c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003d90:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d94:	fab3 f383 	clz	r3, r3
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	095b      	lsrs	r3, r3, #5
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	f043 0301 	orr.w	r3, r3, #1
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d102      	bne.n	8003dae <HAL_RCC_OscConfig+0x476>
 8003da8:	4b72      	ldr	r3, [pc, #456]	; (8003f74 <HAL_RCC_OscConfig+0x63c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	e013      	b.n	8003dd6 <HAL_RCC_OscConfig+0x49e>
 8003dae:	2302      	movs	r3, #2
 8003db0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003db8:	fa93 f3a3 	rbit	r3, r3
 8003dbc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003dc6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003dca:	fa93 f3a3 	rbit	r3, r3
 8003dce:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003dd2:	4b68      	ldr	r3, [pc, #416]	; (8003f74 <HAL_RCC_OscConfig+0x63c>)
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003ddc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003de0:	fa92 f2a2 	rbit	r2, r2
 8003de4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003de8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003dec:	fab2 f282 	clz	r2, r2
 8003df0:	b2d2      	uxtb	r2, r2
 8003df2:	f042 0220 	orr.w	r2, r2, #32
 8003df6:	b2d2      	uxtb	r2, r2
 8003df8:	f002 021f 	and.w	r2, r2, #31
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8003e02:	4013      	ands	r3, r2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0af      	beq.n	8003d68 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e08:	4b5a      	ldr	r3, [pc, #360]	; (8003f74 <HAL_RCC_OscConfig+0x63c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e10:	1d3b      	adds	r3, r7, #4
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	21f8      	movs	r1, #248	; 0xf8
 8003e18:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003e20:	fa91 f1a1 	rbit	r1, r1
 8003e24:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003e28:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003e2c:	fab1 f181 	clz	r1, r1
 8003e30:	b2c9      	uxtb	r1, r1
 8003e32:	408b      	lsls	r3, r1
 8003e34:	494f      	ldr	r1, [pc, #316]	; (8003f74 <HAL_RCC_OscConfig+0x63c>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	600b      	str	r3, [r1, #0]
 8003e3a:	e06a      	b.n	8003f12 <HAL_RCC_OscConfig+0x5da>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e42:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003e46:	fa93 f3a3 	rbit	r3, r3
 8003e4a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003e4e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e52:	fab3 f383 	clz	r3, r3
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	461a      	mov	r2, r3
 8003e64:	2300      	movs	r3, #0
 8003e66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e68:	f7fd fe7c 	bl	8001b64 <HAL_GetTick>
 8003e6c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e70:	e00a      	b.n	8003e88 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e72:	f7fd fe77 	bl	8001b64 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d902      	bls.n	8003e88 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	f000 bc66 	b.w	8004754 <HAL_RCC_OscConfig+0xe1c>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003e92:	fa93 f3a3 	rbit	r3, r3
 8003e96:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003e9a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e9e:	fab3 f383 	clz	r3, r3
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	095b      	lsrs	r3, r3, #5
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	f043 0301 	orr.w	r3, r3, #1
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d102      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x580>
 8003eb2:	4b30      	ldr	r3, [pc, #192]	; (8003f74 <HAL_RCC_OscConfig+0x63c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	e013      	b.n	8003ee0 <HAL_RCC_OscConfig+0x5a8>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ebe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ec2:	fa93 f3a3 	rbit	r3, r3
 8003ec6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003eca:	2302      	movs	r3, #2
 8003ecc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003ed0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003ed4:	fa93 f3a3 	rbit	r3, r3
 8003ed8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003edc:	4b25      	ldr	r3, [pc, #148]	; (8003f74 <HAL_RCC_OscConfig+0x63c>)
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	2202      	movs	r2, #2
 8003ee2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003ee6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003eea:	fa92 f2a2 	rbit	r2, r2
 8003eee:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003ef2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003ef6:	fab2 f282 	clz	r2, r2
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	f042 0220 	orr.w	r2, r2, #32
 8003f00:	b2d2      	uxtb	r2, r2
 8003f02:	f002 021f 	and.w	r2, r2, #31
 8003f06:	2101      	movs	r1, #1
 8003f08:	fa01 f202 	lsl.w	r2, r1, r2
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1af      	bne.n	8003e72 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f12:	1d3b      	adds	r3, r7, #4
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0308 	and.w	r3, r3, #8
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 80da 	beq.w	80040d6 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f22:	1d3b      	adds	r3, r7, #4
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d069      	beq.n	8004000 <HAL_RCC_OscConfig+0x6c8>
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f36:	fa93 f3a3 	rbit	r3, r3
 8003f3a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003f3e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f42:	fab3 f383 	clz	r3, r3
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	461a      	mov	r2, r3
 8003f4a:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <HAL_RCC_OscConfig+0x640>)
 8003f4c:	4413      	add	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	461a      	mov	r2, r3
 8003f52:	2301      	movs	r3, #1
 8003f54:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f56:	f7fd fe05 	bl	8001b64 <HAL_GetTick>
 8003f5a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f5e:	e00d      	b.n	8003f7c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f60:	f7fd fe00 	bl	8001b64 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d905      	bls.n	8003f7c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e3ef      	b.n	8004754 <HAL_RCC_OscConfig+0xe1c>
 8003f74:	40021000 	.word	0x40021000
 8003f78:	10908120 	.word	0x10908120
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f86:	fa93 f2a3 	rbit	r2, r3
 8003f8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003f94:	2202      	movs	r2, #2
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	fa93 f2a3 	rbit	r2, r3
 8003fa2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003fac:	2202      	movs	r2, #2
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	fa93 f2a3 	rbit	r2, r3
 8003fba:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003fbe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fc0:	4ba4      	ldr	r3, [pc, #656]	; (8004254 <HAL_RCC_OscConfig+0x91c>)
 8003fc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fc4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003fc8:	2102      	movs	r1, #2
 8003fca:	6019      	str	r1, [r3, #0]
 8003fcc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	fa93 f1a3 	rbit	r1, r3
 8003fd6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003fda:	6019      	str	r1, [r3, #0]
  return result;
 8003fdc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	fab3 f383 	clz	r3, r3
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	f003 031f 	and.w	r3, r3, #31
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0b0      	beq.n	8003f60 <HAL_RCC_OscConfig+0x628>
 8003ffe:	e06a      	b.n	80040d6 <HAL_RCC_OscConfig+0x79e>
 8004000:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004004:	2201      	movs	r2, #1
 8004006:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004008:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	fa93 f2a3 	rbit	r2, r3
 8004012:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004016:	601a      	str	r2, [r3, #0]
  return result;
 8004018:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800401c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800401e:	fab3 f383 	clz	r3, r3
 8004022:	b2db      	uxtb	r3, r3
 8004024:	461a      	mov	r2, r3
 8004026:	4b8c      	ldr	r3, [pc, #560]	; (8004258 <HAL_RCC_OscConfig+0x920>)
 8004028:	4413      	add	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	461a      	mov	r2, r3
 800402e:	2300      	movs	r3, #0
 8004030:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004032:	f7fd fd97 	bl	8001b64 <HAL_GetTick>
 8004036:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800403a:	e009      	b.n	8004050 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800403c:	f7fd fd92 	bl	8001b64 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e381      	b.n	8004754 <HAL_RCC_OscConfig+0xe1c>
 8004050:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004054:	2202      	movs	r2, #2
 8004056:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004058:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	fa93 f2a3 	rbit	r2, r3
 8004062:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800406c:	2202      	movs	r2, #2
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	fa93 f2a3 	rbit	r2, r3
 800407a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004084:	2202      	movs	r2, #2
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	fa93 f2a3 	rbit	r2, r3
 8004092:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004096:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004098:	4b6e      	ldr	r3, [pc, #440]	; (8004254 <HAL_RCC_OscConfig+0x91c>)
 800409a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800409c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80040a0:	2102      	movs	r1, #2
 80040a2:	6019      	str	r1, [r3, #0]
 80040a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	fa93 f1a3 	rbit	r1, r3
 80040ae:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80040b2:	6019      	str	r1, [r3, #0]
  return result;
 80040b4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	fab3 f383 	clz	r3, r3
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	f003 031f 	and.w	r3, r3, #31
 80040ca:	2101      	movs	r1, #1
 80040cc:	fa01 f303 	lsl.w	r3, r1, r3
 80040d0:	4013      	ands	r3, r2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1b2      	bne.n	800403c <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040d6:	1d3b      	adds	r3, r7, #4
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 8157 	beq.w	8004394 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040e6:	2300      	movs	r3, #0
 80040e8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ec:	4b59      	ldr	r3, [pc, #356]	; (8004254 <HAL_RCC_OscConfig+0x91c>)
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d112      	bne.n	800411e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040f8:	4b56      	ldr	r3, [pc, #344]	; (8004254 <HAL_RCC_OscConfig+0x91c>)
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	4a55      	ldr	r2, [pc, #340]	; (8004254 <HAL_RCC_OscConfig+0x91c>)
 80040fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004102:	61d3      	str	r3, [r2, #28]
 8004104:	4b53      	ldr	r3, [pc, #332]	; (8004254 <HAL_RCC_OscConfig+0x91c>)
 8004106:	69db      	ldr	r3, [r3, #28]
 8004108:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800410c:	f107 030c 	add.w	r3, r7, #12
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	f107 030c 	add.w	r3, r7, #12
 8004116:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004118:	2301      	movs	r3, #1
 800411a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800411e:	4b4f      	ldr	r3, [pc, #316]	; (800425c <HAL_RCC_OscConfig+0x924>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004126:	2b00      	cmp	r3, #0
 8004128:	d11a      	bne.n	8004160 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800412a:	4b4c      	ldr	r3, [pc, #304]	; (800425c <HAL_RCC_OscConfig+0x924>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a4b      	ldr	r2, [pc, #300]	; (800425c <HAL_RCC_OscConfig+0x924>)
 8004130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004134:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004136:	f7fd fd15 	bl	8001b64 <HAL_GetTick>
 800413a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800413e:	e009      	b.n	8004154 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004140:	f7fd fd10 	bl	8001b64 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b64      	cmp	r3, #100	; 0x64
 800414e:	d901      	bls.n	8004154 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e2ff      	b.n	8004754 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004154:	4b41      	ldr	r3, [pc, #260]	; (800425c <HAL_RCC_OscConfig+0x924>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0ef      	beq.n	8004140 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004160:	1d3b      	adds	r3, r7, #4
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d106      	bne.n	8004178 <HAL_RCC_OscConfig+0x840>
 800416a:	4b3a      	ldr	r3, [pc, #232]	; (8004254 <HAL_RCC_OscConfig+0x91c>)
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	4a39      	ldr	r2, [pc, #228]	; (8004254 <HAL_RCC_OscConfig+0x91c>)
 8004170:	f043 0301 	orr.w	r3, r3, #1
 8004174:	6213      	str	r3, [r2, #32]
 8004176:	e02f      	b.n	80041d8 <HAL_RCC_OscConfig+0x8a0>
 8004178:	1d3b      	adds	r3, r7, #4
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10c      	bne.n	800419c <HAL_RCC_OscConfig+0x864>
 8004182:	4b34      	ldr	r3, [pc, #208]	; (8004254 <HAL_RCC_OscConfig+0x91c>)
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	4a33      	ldr	r2, [pc, #204]	; (8004254 <HAL_RCC_OscConfig+0x91c>)
 8004188:	f023 0301 	bic.w	r3, r3, #1
 800418c:	6213      	str	r3, [r2, #32]
 800418e:	4b31      	ldr	r3, [pc, #196]	; (8004254 <HAL_RCC_OscConfig+0x91c>)
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	4a30      	ldr	r2, [pc, #192]	; (8004254 <HAL_RCC_OscConfig+0x91c>)
 8004194:	f023 0304 	bic.w	r3, r3, #4
 8004198:	6213      	str	r3, [r2, #32]
 800419a:	e01d      	b.n	80041d8 <HAL_RCC_OscConfig+0x8a0>
 800419c:	1d3b      	adds	r3, r7, #4
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	2b05      	cmp	r3, #5
 80041a4:	d10c      	bne.n	80041c0 <HAL_RCC_OscConfig+0x888>
 80041a6:	4b2b      	ldr	r3, [pc, #172]	; (8004254 <HAL_RCC_OscConfig+0x91c>)
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	4a2a      	ldr	r2, [pc, #168]	; (8004254 <HAL_RCC_OscConfig+0x91c>)
 80041ac:	f043 0304 	orr.w	r3, r3, #4
 80041b0:	6213      	str	r3, [r2, #32]
 80041b2:	4b28      	ldr	r3, [pc, #160]	; (8004254 <HAL_RCC_OscConfig+0x91c>)
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	4a27      	ldr	r2, [pc, #156]	; (8004254 <HAL_RCC_OscConfig+0x91c>)
 80041b8:	f043 0301 	orr.w	r3, r3, #1
 80041bc:	6213      	str	r3, [r2, #32]
 80041be:	e00b      	b.n	80041d8 <HAL_RCC_OscConfig+0x8a0>
 80041c0:	4b24      	ldr	r3, [pc, #144]	; (8004254 <HAL_RCC_OscConfig+0x91c>)
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	4a23      	ldr	r2, [pc, #140]	; (8004254 <HAL_RCC_OscConfig+0x91c>)
 80041c6:	f023 0301 	bic.w	r3, r3, #1
 80041ca:	6213      	str	r3, [r2, #32]
 80041cc:	4b21      	ldr	r3, [pc, #132]	; (8004254 <HAL_RCC_OscConfig+0x91c>)
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	4a20      	ldr	r2, [pc, #128]	; (8004254 <HAL_RCC_OscConfig+0x91c>)
 80041d2:	f023 0304 	bic.w	r3, r3, #4
 80041d6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041d8:	1d3b      	adds	r3, r7, #4
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d06a      	beq.n	80042b8 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041e2:	f7fd fcbf 	bl	8001b64 <HAL_GetTick>
 80041e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ea:	e00b      	b.n	8004204 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041ec:	f7fd fcba 	bl	8001b64 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d901      	bls.n	8004204 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e2a7      	b.n	8004754 <HAL_RCC_OscConfig+0xe1c>
 8004204:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004208:	2202      	movs	r2, #2
 800420a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	fa93 f2a3 	rbit	r2, r3
 8004216:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800421a:	601a      	str	r2, [r3, #0]
 800421c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004220:	2202      	movs	r2, #2
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	fa93 f2a3 	rbit	r2, r3
 800422e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004232:	601a      	str	r2, [r3, #0]
  return result;
 8004234:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004238:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800423a:	fab3 f383 	clz	r3, r3
 800423e:	b2db      	uxtb	r3, r3
 8004240:	095b      	lsrs	r3, r3, #5
 8004242:	b2db      	uxtb	r3, r3
 8004244:	f043 0302 	orr.w	r3, r3, #2
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d108      	bne.n	8004260 <HAL_RCC_OscConfig+0x928>
 800424e:	4b01      	ldr	r3, [pc, #4]	; (8004254 <HAL_RCC_OscConfig+0x91c>)
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	e013      	b.n	800427c <HAL_RCC_OscConfig+0x944>
 8004254:	40021000 	.word	0x40021000
 8004258:	10908120 	.word	0x10908120
 800425c:	40007000 	.word	0x40007000
 8004260:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004264:	2202      	movs	r2, #2
 8004266:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004268:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	fa93 f2a3 	rbit	r2, r3
 8004272:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	4bc0      	ldr	r3, [pc, #768]	; (800457c <HAL_RCC_OscConfig+0xc44>)
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004280:	2102      	movs	r1, #2
 8004282:	6011      	str	r1, [r2, #0]
 8004284:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004288:	6812      	ldr	r2, [r2, #0]
 800428a:	fa92 f1a2 	rbit	r1, r2
 800428e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004292:	6011      	str	r1, [r2, #0]
  return result;
 8004294:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004298:	6812      	ldr	r2, [r2, #0]
 800429a:	fab2 f282 	clz	r2, r2
 800429e:	b2d2      	uxtb	r2, r2
 80042a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	f002 021f 	and.w	r2, r2, #31
 80042aa:	2101      	movs	r1, #1
 80042ac:	fa01 f202 	lsl.w	r2, r1, r2
 80042b0:	4013      	ands	r3, r2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d09a      	beq.n	80041ec <HAL_RCC_OscConfig+0x8b4>
 80042b6:	e063      	b.n	8004380 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042b8:	f7fd fc54 	bl	8001b64 <HAL_GetTick>
 80042bc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042c0:	e00b      	b.n	80042da <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042c2:	f7fd fc4f 	bl	8001b64 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e23c      	b.n	8004754 <HAL_RCC_OscConfig+0xe1c>
 80042da:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80042de:	2202      	movs	r2, #2
 80042e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	fa93 f2a3 	rbit	r2, r3
 80042ec:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80042f6:	2202      	movs	r2, #2
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	fa93 f2a3 	rbit	r2, r3
 8004304:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004308:	601a      	str	r2, [r3, #0]
  return result;
 800430a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800430e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004310:	fab3 f383 	clz	r3, r3
 8004314:	b2db      	uxtb	r3, r3
 8004316:	095b      	lsrs	r3, r3, #5
 8004318:	b2db      	uxtb	r3, r3
 800431a:	f043 0302 	orr.w	r3, r3, #2
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d102      	bne.n	800432a <HAL_RCC_OscConfig+0x9f2>
 8004324:	4b95      	ldr	r3, [pc, #596]	; (800457c <HAL_RCC_OscConfig+0xc44>)
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	e00d      	b.n	8004346 <HAL_RCC_OscConfig+0xa0e>
 800432a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800432e:	2202      	movs	r2, #2
 8004330:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004332:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	fa93 f2a3 	rbit	r2, r3
 800433c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	4b8e      	ldr	r3, [pc, #568]	; (800457c <HAL_RCC_OscConfig+0xc44>)
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800434a:	2102      	movs	r1, #2
 800434c:	6011      	str	r1, [r2, #0]
 800434e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8004352:	6812      	ldr	r2, [r2, #0]
 8004354:	fa92 f1a2 	rbit	r1, r2
 8004358:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800435c:	6011      	str	r1, [r2, #0]
  return result;
 800435e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004362:	6812      	ldr	r2, [r2, #0]
 8004364:	fab2 f282 	clz	r2, r2
 8004368:	b2d2      	uxtb	r2, r2
 800436a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800436e:	b2d2      	uxtb	r2, r2
 8004370:	f002 021f 	and.w	r2, r2, #31
 8004374:	2101      	movs	r1, #1
 8004376:	fa01 f202 	lsl.w	r2, r1, r2
 800437a:	4013      	ands	r3, r2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1a0      	bne.n	80042c2 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004380:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004384:	2b01      	cmp	r3, #1
 8004386:	d105      	bne.n	8004394 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004388:	4b7c      	ldr	r3, [pc, #496]	; (800457c <HAL_RCC_OscConfig+0xc44>)
 800438a:	69db      	ldr	r3, [r3, #28]
 800438c:	4a7b      	ldr	r2, [pc, #492]	; (800457c <HAL_RCC_OscConfig+0xc44>)
 800438e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004392:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004394:	1d3b      	adds	r3, r7, #4
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 81d9 	beq.w	8004752 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043a0:	4b76      	ldr	r3, [pc, #472]	; (800457c <HAL_RCC_OscConfig+0xc44>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f003 030c 	and.w	r3, r3, #12
 80043a8:	2b08      	cmp	r3, #8
 80043aa:	f000 81a6 	beq.w	80046fa <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043ae:	1d3b      	adds	r3, r7, #4
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	f040 811e 	bne.w	80045f6 <HAL_RCC_OscConfig+0xcbe>
 80043ba:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80043be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	fa93 f2a3 	rbit	r2, r3
 80043ce:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80043d2:	601a      	str	r2, [r3, #0]
  return result;
 80043d4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80043d8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043da:	fab3 f383 	clz	r3, r3
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80043e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	461a      	mov	r2, r3
 80043ec:	2300      	movs	r3, #0
 80043ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f0:	f7fd fbb8 	bl	8001b64 <HAL_GetTick>
 80043f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043f8:	e009      	b.n	800440e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043fa:	f7fd fbb3 	bl	8001b64 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e1a2      	b.n	8004754 <HAL_RCC_OscConfig+0xe1c>
 800440e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004412:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004416:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004418:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	fa93 f2a3 	rbit	r2, r3
 8004422:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004426:	601a      	str	r2, [r3, #0]
  return result;
 8004428:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800442c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800442e:	fab3 f383 	clz	r3, r3
 8004432:	b2db      	uxtb	r3, r3
 8004434:	095b      	lsrs	r3, r3, #5
 8004436:	b2db      	uxtb	r3, r3
 8004438:	f043 0301 	orr.w	r3, r3, #1
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b01      	cmp	r3, #1
 8004440:	d102      	bne.n	8004448 <HAL_RCC_OscConfig+0xb10>
 8004442:	4b4e      	ldr	r3, [pc, #312]	; (800457c <HAL_RCC_OscConfig+0xc44>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	e01b      	b.n	8004480 <HAL_RCC_OscConfig+0xb48>
 8004448:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800444c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004450:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004452:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	fa93 f2a3 	rbit	r2, r3
 800445c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004466:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	fa93 f2a3 	rbit	r2, r3
 8004476:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	4b3f      	ldr	r3, [pc, #252]	; (800457c <HAL_RCC_OscConfig+0xc44>)
 800447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004480:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004484:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004488:	6011      	str	r1, [r2, #0]
 800448a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800448e:	6812      	ldr	r2, [r2, #0]
 8004490:	fa92 f1a2 	rbit	r1, r2
 8004494:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004498:	6011      	str	r1, [r2, #0]
  return result;
 800449a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800449e:	6812      	ldr	r2, [r2, #0]
 80044a0:	fab2 f282 	clz	r2, r2
 80044a4:	b2d2      	uxtb	r2, r2
 80044a6:	f042 0220 	orr.w	r2, r2, #32
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	f002 021f 	and.w	r2, r2, #31
 80044b0:	2101      	movs	r1, #1
 80044b2:	fa01 f202 	lsl.w	r2, r1, r2
 80044b6:	4013      	ands	r3, r2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d19e      	bne.n	80043fa <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044bc:	4b2f      	ldr	r3, [pc, #188]	; (800457c <HAL_RCC_OscConfig+0xc44>)
 80044be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c0:	f023 020f 	bic.w	r2, r3, #15
 80044c4:	1d3b      	adds	r3, r7, #4
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	492c      	ldr	r1, [pc, #176]	; (800457c <HAL_RCC_OscConfig+0xc44>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	62cb      	str	r3, [r1, #44]	; 0x2c
 80044d0:	4b2a      	ldr	r3, [pc, #168]	; (800457c <HAL_RCC_OscConfig+0xc44>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80044d8:	1d3b      	adds	r3, r7, #4
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6a19      	ldr	r1, [r3, #32]
 80044de:	1d3b      	adds	r3, r7, #4
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	430b      	orrs	r3, r1
 80044e6:	4925      	ldr	r1, [pc, #148]	; (800457c <HAL_RCC_OscConfig+0xc44>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	604b      	str	r3, [r1, #4]
 80044ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80044f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	fa93 f2a3 	rbit	r2, r3
 8004500:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004504:	601a      	str	r2, [r3, #0]
  return result;
 8004506:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800450a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800450c:	fab3 f383 	clz	r3, r3
 8004510:	b2db      	uxtb	r3, r3
 8004512:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004516:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	461a      	mov	r2, r3
 800451e:	2301      	movs	r3, #1
 8004520:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004522:	f7fd fb1f 	bl	8001b64 <HAL_GetTick>
 8004526:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800452a:	e009      	b.n	8004540 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800452c:	f7fd fb1a 	bl	8001b64 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e109      	b.n	8004754 <HAL_RCC_OscConfig+0xe1c>
 8004540:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004544:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004548:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	fa93 f2a3 	rbit	r2, r3
 8004554:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004558:	601a      	str	r2, [r3, #0]
  return result;
 800455a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800455e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004560:	fab3 f383 	clz	r3, r3
 8004564:	b2db      	uxtb	r3, r3
 8004566:	095b      	lsrs	r3, r3, #5
 8004568:	b2db      	uxtb	r3, r3
 800456a:	f043 0301 	orr.w	r3, r3, #1
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b01      	cmp	r3, #1
 8004572:	d105      	bne.n	8004580 <HAL_RCC_OscConfig+0xc48>
 8004574:	4b01      	ldr	r3, [pc, #4]	; (800457c <HAL_RCC_OscConfig+0xc44>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	e01e      	b.n	80045b8 <HAL_RCC_OscConfig+0xc80>
 800457a:	bf00      	nop
 800457c:	40021000 	.word	0x40021000
 8004580:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004584:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004588:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	fa93 f2a3 	rbit	r2, r3
 8004594:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004598:	601a      	str	r2, [r3, #0]
 800459a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800459e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	fa93 f2a3 	rbit	r2, r3
 80045ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	4b6a      	ldr	r3, [pc, #424]	; (8004760 <HAL_RCC_OscConfig+0xe28>)
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80045bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80045c0:	6011      	str	r1, [r2, #0]
 80045c2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80045c6:	6812      	ldr	r2, [r2, #0]
 80045c8:	fa92 f1a2 	rbit	r1, r2
 80045cc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80045d0:	6011      	str	r1, [r2, #0]
  return result;
 80045d2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80045d6:	6812      	ldr	r2, [r2, #0]
 80045d8:	fab2 f282 	clz	r2, r2
 80045dc:	b2d2      	uxtb	r2, r2
 80045de:	f042 0220 	orr.w	r2, r2, #32
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	f002 021f 	and.w	r2, r2, #31
 80045e8:	2101      	movs	r1, #1
 80045ea:	fa01 f202 	lsl.w	r2, r1, r2
 80045ee:	4013      	ands	r3, r2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d09b      	beq.n	800452c <HAL_RCC_OscConfig+0xbf4>
 80045f4:	e0ad      	b.n	8004752 <HAL_RCC_OscConfig+0xe1a>
 80045f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80045fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004600:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	fa93 f2a3 	rbit	r2, r3
 800460a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800460e:	601a      	str	r2, [r3, #0]
  return result;
 8004610:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004614:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004616:	fab3 f383 	clz	r3, r3
 800461a:	b2db      	uxtb	r3, r3
 800461c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004620:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	461a      	mov	r2, r3
 8004628:	2300      	movs	r3, #0
 800462a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462c:	f7fd fa9a 	bl	8001b64 <HAL_GetTick>
 8004630:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004634:	e009      	b.n	800464a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004636:	f7fd fa95 	bl	8001b64 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e084      	b.n	8004754 <HAL_RCC_OscConfig+0xe1c>
 800464a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800464e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004652:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004654:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	fa93 f2a3 	rbit	r2, r3
 800465e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004662:	601a      	str	r2, [r3, #0]
  return result;
 8004664:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004668:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800466a:	fab3 f383 	clz	r3, r3
 800466e:	b2db      	uxtb	r3, r3
 8004670:	095b      	lsrs	r3, r3, #5
 8004672:	b2db      	uxtb	r3, r3
 8004674:	f043 0301 	orr.w	r3, r3, #1
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b01      	cmp	r3, #1
 800467c:	d102      	bne.n	8004684 <HAL_RCC_OscConfig+0xd4c>
 800467e:	4b38      	ldr	r3, [pc, #224]	; (8004760 <HAL_RCC_OscConfig+0xe28>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	e01b      	b.n	80046bc <HAL_RCC_OscConfig+0xd84>
 8004684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004688:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800468c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	fa93 f2a3 	rbit	r2, r3
 8004698:	f107 0320 	add.w	r3, r7, #32
 800469c:	601a      	str	r2, [r3, #0]
 800469e:	f107 031c 	add.w	r3, r7, #28
 80046a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	f107 031c 	add.w	r3, r7, #28
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	fa93 f2a3 	rbit	r2, r3
 80046b2:	f107 0318 	add.w	r3, r7, #24
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	4b29      	ldr	r3, [pc, #164]	; (8004760 <HAL_RCC_OscConfig+0xe28>)
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	f107 0214 	add.w	r2, r7, #20
 80046c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80046c4:	6011      	str	r1, [r2, #0]
 80046c6:	f107 0214 	add.w	r2, r7, #20
 80046ca:	6812      	ldr	r2, [r2, #0]
 80046cc:	fa92 f1a2 	rbit	r1, r2
 80046d0:	f107 0210 	add.w	r2, r7, #16
 80046d4:	6011      	str	r1, [r2, #0]
  return result;
 80046d6:	f107 0210 	add.w	r2, r7, #16
 80046da:	6812      	ldr	r2, [r2, #0]
 80046dc:	fab2 f282 	clz	r2, r2
 80046e0:	b2d2      	uxtb	r2, r2
 80046e2:	f042 0220 	orr.w	r2, r2, #32
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	f002 021f 	and.w	r2, r2, #31
 80046ec:	2101      	movs	r1, #1
 80046ee:	fa01 f202 	lsl.w	r2, r1, r2
 80046f2:	4013      	ands	r3, r2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d19e      	bne.n	8004636 <HAL_RCC_OscConfig+0xcfe>
 80046f8:	e02b      	b.n	8004752 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046fa:	1d3b      	adds	r3, r7, #4
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d101      	bne.n	8004708 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e025      	b.n	8004754 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004708:	4b15      	ldr	r3, [pc, #84]	; (8004760 <HAL_RCC_OscConfig+0xe28>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004710:	4b13      	ldr	r3, [pc, #76]	; (8004760 <HAL_RCC_OscConfig+0xe28>)
 8004712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004714:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004718:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800471c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004720:	1d3b      	adds	r3, r7, #4
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	429a      	cmp	r2, r3
 8004728:	d111      	bne.n	800474e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800472a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800472e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004732:	1d3b      	adds	r3, r7, #4
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004738:	429a      	cmp	r2, r3
 800473a:	d108      	bne.n	800474e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800473c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004740:	f003 020f 	and.w	r2, r3, #15
 8004744:	1d3b      	adds	r3, r7, #4
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800474a:	429a      	cmp	r2, r3
 800474c:	d001      	beq.n	8004752 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e000      	b.n	8004754 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	40021000 	.word	0x40021000

08004764 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b09e      	sub	sp, #120	; 0x78
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800476e:	2300      	movs	r3, #0
 8004770:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e162      	b.n	8004a42 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800477c:	4b90      	ldr	r3, [pc, #576]	; (80049c0 <HAL_RCC_ClockConfig+0x25c>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0307 	and.w	r3, r3, #7
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	429a      	cmp	r2, r3
 8004788:	d910      	bls.n	80047ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800478a:	4b8d      	ldr	r3, [pc, #564]	; (80049c0 <HAL_RCC_ClockConfig+0x25c>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f023 0207 	bic.w	r2, r3, #7
 8004792:	498b      	ldr	r1, [pc, #556]	; (80049c0 <HAL_RCC_ClockConfig+0x25c>)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	4313      	orrs	r3, r2
 8004798:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800479a:	4b89      	ldr	r3, [pc, #548]	; (80049c0 <HAL_RCC_ClockConfig+0x25c>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0307 	and.w	r3, r3, #7
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d001      	beq.n	80047ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e14a      	b.n	8004a42 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d008      	beq.n	80047ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047b8:	4b82      	ldr	r3, [pc, #520]	; (80049c4 <HAL_RCC_ClockConfig+0x260>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	497f      	ldr	r1, [pc, #508]	; (80049c4 <HAL_RCC_ClockConfig+0x260>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 80dc 	beq.w	8004990 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d13c      	bne.n	800485a <HAL_RCC_ClockConfig+0xf6>
 80047e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047e4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047e8:	fa93 f3a3 	rbit	r3, r3
 80047ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80047ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047f0:	fab3 f383 	clz	r3, r3
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	095b      	lsrs	r3, r3, #5
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	f043 0301 	orr.w	r3, r3, #1
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b01      	cmp	r3, #1
 8004802:	d102      	bne.n	800480a <HAL_RCC_ClockConfig+0xa6>
 8004804:	4b6f      	ldr	r3, [pc, #444]	; (80049c4 <HAL_RCC_ClockConfig+0x260>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	e00f      	b.n	800482a <HAL_RCC_ClockConfig+0xc6>
 800480a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800480e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004810:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004812:	fa93 f3a3 	rbit	r3, r3
 8004816:	667b      	str	r3, [r7, #100]	; 0x64
 8004818:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800481c:	663b      	str	r3, [r7, #96]	; 0x60
 800481e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004820:	fa93 f3a3 	rbit	r3, r3
 8004824:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004826:	4b67      	ldr	r3, [pc, #412]	; (80049c4 <HAL_RCC_ClockConfig+0x260>)
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800482e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004830:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004832:	fa92 f2a2 	rbit	r2, r2
 8004836:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004838:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800483a:	fab2 f282 	clz	r2, r2
 800483e:	b2d2      	uxtb	r2, r2
 8004840:	f042 0220 	orr.w	r2, r2, #32
 8004844:	b2d2      	uxtb	r2, r2
 8004846:	f002 021f 	and.w	r2, r2, #31
 800484a:	2101      	movs	r1, #1
 800484c:	fa01 f202 	lsl.w	r2, r1, r2
 8004850:	4013      	ands	r3, r2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d17b      	bne.n	800494e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e0f3      	b.n	8004a42 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2b02      	cmp	r3, #2
 8004860:	d13c      	bne.n	80048dc <HAL_RCC_ClockConfig+0x178>
 8004862:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004866:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800486a:	fa93 f3a3 	rbit	r3, r3
 800486e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004872:	fab3 f383 	clz	r3, r3
 8004876:	b2db      	uxtb	r3, r3
 8004878:	095b      	lsrs	r3, r3, #5
 800487a:	b2db      	uxtb	r3, r3
 800487c:	f043 0301 	orr.w	r3, r3, #1
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b01      	cmp	r3, #1
 8004884:	d102      	bne.n	800488c <HAL_RCC_ClockConfig+0x128>
 8004886:	4b4f      	ldr	r3, [pc, #316]	; (80049c4 <HAL_RCC_ClockConfig+0x260>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	e00f      	b.n	80048ac <HAL_RCC_ClockConfig+0x148>
 800488c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004890:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004894:	fa93 f3a3 	rbit	r3, r3
 8004898:	647b      	str	r3, [r7, #68]	; 0x44
 800489a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800489e:	643b      	str	r3, [r7, #64]	; 0x40
 80048a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048a2:	fa93 f3a3 	rbit	r3, r3
 80048a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048a8:	4b46      	ldr	r3, [pc, #280]	; (80049c4 <HAL_RCC_ClockConfig+0x260>)
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048b0:	63ba      	str	r2, [r7, #56]	; 0x38
 80048b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048b4:	fa92 f2a2 	rbit	r2, r2
 80048b8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80048ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048bc:	fab2 f282 	clz	r2, r2
 80048c0:	b2d2      	uxtb	r2, r2
 80048c2:	f042 0220 	orr.w	r2, r2, #32
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	f002 021f 	and.w	r2, r2, #31
 80048cc:	2101      	movs	r1, #1
 80048ce:	fa01 f202 	lsl.w	r2, r1, r2
 80048d2:	4013      	ands	r3, r2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d13a      	bne.n	800494e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e0b2      	b.n	8004a42 <HAL_RCC_ClockConfig+0x2de>
 80048dc:	2302      	movs	r3, #2
 80048de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e2:	fa93 f3a3 	rbit	r3, r3
 80048e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80048e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ea:	fab3 f383 	clz	r3, r3
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	095b      	lsrs	r3, r3, #5
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	f043 0301 	orr.w	r3, r3, #1
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d102      	bne.n	8004904 <HAL_RCC_ClockConfig+0x1a0>
 80048fe:	4b31      	ldr	r3, [pc, #196]	; (80049c4 <HAL_RCC_ClockConfig+0x260>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	e00d      	b.n	8004920 <HAL_RCC_ClockConfig+0x1bc>
 8004904:	2302      	movs	r3, #2
 8004906:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490a:	fa93 f3a3 	rbit	r3, r3
 800490e:	627b      	str	r3, [r7, #36]	; 0x24
 8004910:	2302      	movs	r3, #2
 8004912:	623b      	str	r3, [r7, #32]
 8004914:	6a3b      	ldr	r3, [r7, #32]
 8004916:	fa93 f3a3 	rbit	r3, r3
 800491a:	61fb      	str	r3, [r7, #28]
 800491c:	4b29      	ldr	r3, [pc, #164]	; (80049c4 <HAL_RCC_ClockConfig+0x260>)
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	2202      	movs	r2, #2
 8004922:	61ba      	str	r2, [r7, #24]
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	fa92 f2a2 	rbit	r2, r2
 800492a:	617a      	str	r2, [r7, #20]
  return result;
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	fab2 f282 	clz	r2, r2
 8004932:	b2d2      	uxtb	r2, r2
 8004934:	f042 0220 	orr.w	r2, r2, #32
 8004938:	b2d2      	uxtb	r2, r2
 800493a:	f002 021f 	and.w	r2, r2, #31
 800493e:	2101      	movs	r1, #1
 8004940:	fa01 f202 	lsl.w	r2, r1, r2
 8004944:	4013      	ands	r3, r2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e079      	b.n	8004a42 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800494e:	4b1d      	ldr	r3, [pc, #116]	; (80049c4 <HAL_RCC_ClockConfig+0x260>)
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f023 0203 	bic.w	r2, r3, #3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	491a      	ldr	r1, [pc, #104]	; (80049c4 <HAL_RCC_ClockConfig+0x260>)
 800495c:	4313      	orrs	r3, r2
 800495e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004960:	f7fd f900 	bl	8001b64 <HAL_GetTick>
 8004964:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004966:	e00a      	b.n	800497e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004968:	f7fd f8fc 	bl	8001b64 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	f241 3288 	movw	r2, #5000	; 0x1388
 8004976:	4293      	cmp	r3, r2
 8004978:	d901      	bls.n	800497e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e061      	b.n	8004a42 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800497e:	4b11      	ldr	r3, [pc, #68]	; (80049c4 <HAL_RCC_ClockConfig+0x260>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f003 020c 	and.w	r2, r3, #12
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	429a      	cmp	r2, r3
 800498e:	d1eb      	bne.n	8004968 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004990:	4b0b      	ldr	r3, [pc, #44]	; (80049c0 <HAL_RCC_ClockConfig+0x25c>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	429a      	cmp	r2, r3
 800499c:	d214      	bcs.n	80049c8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800499e:	4b08      	ldr	r3, [pc, #32]	; (80049c0 <HAL_RCC_ClockConfig+0x25c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f023 0207 	bic.w	r2, r3, #7
 80049a6:	4906      	ldr	r1, [pc, #24]	; (80049c0 <HAL_RCC_ClockConfig+0x25c>)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ae:	4b04      	ldr	r3, [pc, #16]	; (80049c0 <HAL_RCC_ClockConfig+0x25c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0307 	and.w	r3, r3, #7
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d005      	beq.n	80049c8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e040      	b.n	8004a42 <HAL_RCC_ClockConfig+0x2de>
 80049c0:	40022000 	.word	0x40022000
 80049c4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0304 	and.w	r3, r3, #4
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d008      	beq.n	80049e6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049d4:	4b1d      	ldr	r3, [pc, #116]	; (8004a4c <HAL_RCC_ClockConfig+0x2e8>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	491a      	ldr	r1, [pc, #104]	; (8004a4c <HAL_RCC_ClockConfig+0x2e8>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0308 	and.w	r3, r3, #8
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d009      	beq.n	8004a06 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049f2:	4b16      	ldr	r3, [pc, #88]	; (8004a4c <HAL_RCC_ClockConfig+0x2e8>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	4912      	ldr	r1, [pc, #72]	; (8004a4c <HAL_RCC_ClockConfig+0x2e8>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004a06:	f000 f829 	bl	8004a5c <HAL_RCC_GetSysClockFreq>
 8004a0a:	4601      	mov	r1, r0
 8004a0c:	4b0f      	ldr	r3, [pc, #60]	; (8004a4c <HAL_RCC_ClockConfig+0x2e8>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a14:	22f0      	movs	r2, #240	; 0xf0
 8004a16:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	fa92 f2a2 	rbit	r2, r2
 8004a1e:	60fa      	str	r2, [r7, #12]
  return result;
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	fab2 f282 	clz	r2, r2
 8004a26:	b2d2      	uxtb	r2, r2
 8004a28:	40d3      	lsrs	r3, r2
 8004a2a:	4a09      	ldr	r2, [pc, #36]	; (8004a50 <HAL_RCC_ClockConfig+0x2ec>)
 8004a2c:	5cd3      	ldrb	r3, [r2, r3]
 8004a2e:	fa21 f303 	lsr.w	r3, r1, r3
 8004a32:	4a08      	ldr	r2, [pc, #32]	; (8004a54 <HAL_RCC_ClockConfig+0x2f0>)
 8004a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004a36:	4b08      	ldr	r3, [pc, #32]	; (8004a58 <HAL_RCC_ClockConfig+0x2f4>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7fd f84e 	bl	8001adc <HAL_InitTick>
  
  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3778      	adds	r7, #120	; 0x78
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	40021000 	.word	0x40021000
 8004a50:	08006fec 	.word	0x08006fec
 8004a54:	20000010 	.word	0x20000010
 8004a58:	20000014 	.word	0x20000014

08004a5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b08b      	sub	sp, #44	; 0x2c
 8004a60:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a62:	2300      	movs	r3, #0
 8004a64:	61fb      	str	r3, [r7, #28]
 8004a66:	2300      	movs	r3, #0
 8004a68:	61bb      	str	r3, [r7, #24]
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a6e:	2300      	movs	r3, #0
 8004a70:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004a76:	4b2a      	ldr	r3, [pc, #168]	; (8004b20 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	f003 030c 	and.w	r3, r3, #12
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d002      	beq.n	8004a8c <HAL_RCC_GetSysClockFreq+0x30>
 8004a86:	2b08      	cmp	r3, #8
 8004a88:	d003      	beq.n	8004a92 <HAL_RCC_GetSysClockFreq+0x36>
 8004a8a:	e03f      	b.n	8004b0c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a8c:	4b25      	ldr	r3, [pc, #148]	; (8004b24 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004a8e:	623b      	str	r3, [r7, #32]
      break;
 8004a90:	e03f      	b.n	8004b12 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004a98:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004a9c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	fa92 f2a2 	rbit	r2, r2
 8004aa4:	607a      	str	r2, [r7, #4]
  return result;
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	fab2 f282 	clz	r2, r2
 8004aac:	b2d2      	uxtb	r2, r2
 8004aae:	40d3      	lsrs	r3, r2
 8004ab0:	4a1d      	ldr	r2, [pc, #116]	; (8004b28 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004ab2:	5cd3      	ldrb	r3, [r2, r3]
 8004ab4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004ab6:	4b1a      	ldr	r3, [pc, #104]	; (8004b20 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aba:	f003 030f 	and.w	r3, r3, #15
 8004abe:	220f      	movs	r2, #15
 8004ac0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	fa92 f2a2 	rbit	r2, r2
 8004ac8:	60fa      	str	r2, [r7, #12]
  return result;
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	fab2 f282 	clz	r2, r2
 8004ad0:	b2d2      	uxtb	r2, r2
 8004ad2:	40d3      	lsrs	r3, r2
 8004ad4:	4a15      	ldr	r2, [pc, #84]	; (8004b2c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ad6:	5cd3      	ldrb	r3, [r2, r3]
 8004ad8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d008      	beq.n	8004af6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004ae4:	4a0f      	ldr	r2, [pc, #60]	; (8004b24 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	fb02 f303 	mul.w	r3, r2, r3
 8004af2:	627b      	str	r3, [r7, #36]	; 0x24
 8004af4:	e007      	b.n	8004b06 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004af6:	4a0b      	ldr	r2, [pc, #44]	; (8004b24 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	fbb2 f2f3 	udiv	r2, r2, r3
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	fb02 f303 	mul.w	r3, r2, r3
 8004b04:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	623b      	str	r3, [r7, #32]
      break;
 8004b0a:	e002      	b.n	8004b12 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b0c:	4b05      	ldr	r3, [pc, #20]	; (8004b24 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004b0e:	623b      	str	r3, [r7, #32]
      break;
 8004b10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b12:	6a3b      	ldr	r3, [r7, #32]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	372c      	adds	r7, #44	; 0x2c
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	40021000 	.word	0x40021000
 8004b24:	007a1200 	.word	0x007a1200
 8004b28:	08007004 	.word	0x08007004
 8004b2c:	08007014 	.word	0x08007014

08004b30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b30:	b480      	push	{r7}
 8004b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b34:	4b03      	ldr	r3, [pc, #12]	; (8004b44 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b36:	681b      	ldr	r3, [r3, #0]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	20000010 	.word	0x20000010

08004b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004b4e:	f7ff ffef 	bl	8004b30 <HAL_RCC_GetHCLKFreq>
 8004b52:	4601      	mov	r1, r0
 8004b54:	4b0b      	ldr	r3, [pc, #44]	; (8004b84 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b5c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004b60:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	fa92 f2a2 	rbit	r2, r2
 8004b68:	603a      	str	r2, [r7, #0]
  return result;
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	fab2 f282 	clz	r2, r2
 8004b70:	b2d2      	uxtb	r2, r2
 8004b72:	40d3      	lsrs	r3, r2
 8004b74:	4a04      	ldr	r2, [pc, #16]	; (8004b88 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004b76:	5cd3      	ldrb	r3, [r2, r3]
 8004b78:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	40021000 	.word	0x40021000
 8004b88:	08006ffc 	.word	0x08006ffc

08004b8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004b92:	f7ff ffcd 	bl	8004b30 <HAL_RCC_GetHCLKFreq>
 8004b96:	4601      	mov	r1, r0
 8004b98:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004ba0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004ba4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	fa92 f2a2 	rbit	r2, r2
 8004bac:	603a      	str	r2, [r7, #0]
  return result;
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	fab2 f282 	clz	r2, r2
 8004bb4:	b2d2      	uxtb	r2, r2
 8004bb6:	40d3      	lsrs	r3, r2
 8004bb8:	4a04      	ldr	r2, [pc, #16]	; (8004bcc <HAL_RCC_GetPCLK2Freq+0x40>)
 8004bba:	5cd3      	ldrb	r3, [r2, r3]
 8004bbc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3708      	adds	r7, #8
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	40021000 	.word	0x40021000
 8004bcc:	08006ffc 	.word	0x08006ffc

08004bd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b092      	sub	sp, #72	; 0x48
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004be0:	2300      	movs	r3, #0
 8004be2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 80d4 	beq.w	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bf4:	4b4e      	ldr	r3, [pc, #312]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bf6:	69db      	ldr	r3, [r3, #28]
 8004bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10e      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c00:	4b4b      	ldr	r3, [pc, #300]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	4a4a      	ldr	r2, [pc, #296]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c0a:	61d3      	str	r3, [r2, #28]
 8004c0c:	4b48      	ldr	r3, [pc, #288]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c14:	60bb      	str	r3, [r7, #8]
 8004c16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c1e:	4b45      	ldr	r3, [pc, #276]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d118      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c2a:	4b42      	ldr	r3, [pc, #264]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a41      	ldr	r2, [pc, #260]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c34:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c36:	f7fc ff95 	bl	8001b64 <HAL_GetTick>
 8004c3a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c3c:	e008      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c3e:	f7fc ff91 	bl	8001b64 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b64      	cmp	r3, #100	; 0x64
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e1d6      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c50:	4b38      	ldr	r3, [pc, #224]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d0f0      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c5c:	4b34      	ldr	r3, [pc, #208]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c64:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f000 8084 	beq.w	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d07c      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c7c:	4b2c      	ldr	r3, [pc, #176]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c7e:	6a1b      	ldr	r3, [r3, #32]
 8004c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8e:	fa93 f3a3 	rbit	r3, r3
 8004c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c96:	fab3 f383 	clz	r3, r3
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	4b26      	ldr	r3, [pc, #152]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ca0:	4413      	add	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	6013      	str	r3, [r2, #0]
 8004caa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004cae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb2:	fa93 f3a3 	rbit	r3, r3
 8004cb6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cba:	fab3 f383 	clz	r3, r3
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	4b1d      	ldr	r3, [pc, #116]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cc4:	4413      	add	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	461a      	mov	r2, r3
 8004cca:	2300      	movs	r3, #0
 8004ccc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004cce:	4a18      	ldr	r2, [pc, #96]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cd2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d04b      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cde:	f7fc ff41 	bl	8001b64 <HAL_GetTick>
 8004ce2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ce4:	e00a      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ce6:	f7fc ff3d 	bl	8001b64 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e180      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d02:	fa93 f3a3 	rbit	r3, r3
 8004d06:	627b      	str	r3, [r7, #36]	; 0x24
 8004d08:	2302      	movs	r3, #2
 8004d0a:	623b      	str	r3, [r7, #32]
 8004d0c:	6a3b      	ldr	r3, [r7, #32]
 8004d0e:	fa93 f3a3 	rbit	r3, r3
 8004d12:	61fb      	str	r3, [r7, #28]
  return result;
 8004d14:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d16:	fab3 f383 	clz	r3, r3
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	095b      	lsrs	r3, r3, #5
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	f043 0302 	orr.w	r3, r3, #2
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d108      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004d2a:	4b01      	ldr	r3, [pc, #4]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	e00d      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004d30:	40021000 	.word	0x40021000
 8004d34:	40007000 	.word	0x40007000
 8004d38:	10908100 	.word	0x10908100
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	fa93 f3a3 	rbit	r3, r3
 8004d46:	617b      	str	r3, [r7, #20]
 8004d48:	4ba0      	ldr	r3, [pc, #640]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4c:	2202      	movs	r2, #2
 8004d4e:	613a      	str	r2, [r7, #16]
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	fa92 f2a2 	rbit	r2, r2
 8004d56:	60fa      	str	r2, [r7, #12]
  return result;
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	fab2 f282 	clz	r2, r2
 8004d5e:	b2d2      	uxtb	r2, r2
 8004d60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d64:	b2d2      	uxtb	r2, r2
 8004d66:	f002 021f 	and.w	r2, r2, #31
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8004d70:	4013      	ands	r3, r2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d0b7      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004d76:	4b95      	ldr	r3, [pc, #596]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	4992      	ldr	r1, [pc, #584]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004d88:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d105      	bne.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d90:	4b8e      	ldr	r3, [pc, #568]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d92:	69db      	ldr	r3, [r3, #28]
 8004d94:	4a8d      	ldr	r2, [pc, #564]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d9a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d008      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004da8:	4b88      	ldr	r3, [pc, #544]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dac:	f023 0203 	bic.w	r2, r3, #3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	4985      	ldr	r1, [pc, #532]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d008      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004dc6:	4b81      	ldr	r3, [pc, #516]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	497e      	ldr	r1, [pc, #504]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0304 	and.w	r3, r3, #4
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d008      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004de4:	4b79      	ldr	r3, [pc, #484]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	4976      	ldr	r1, [pc, #472]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0320 	and.w	r3, r3, #32
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d008      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e02:	4b72      	ldr	r3, [pc, #456]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e06:	f023 0210 	bic.w	r2, r3, #16
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	496f      	ldr	r1, [pc, #444]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d008      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004e20:	4b6a      	ldr	r3, [pc, #424]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2c:	4967      	ldr	r1, [pc, #412]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d008      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e3e:	4b63      	ldr	r3, [pc, #396]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e42:	f023 0220 	bic.w	r2, r3, #32
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	4960      	ldr	r1, [pc, #384]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d008      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e5c:	4b5b      	ldr	r3, [pc, #364]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e60:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e68:	4958      	ldr	r1, [pc, #352]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0308 	and.w	r3, r3, #8
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d008      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e7a:	4b54      	ldr	r3, [pc, #336]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	4951      	ldr	r1, [pc, #324]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0310 	and.w	r3, r3, #16
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d008      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e98:	4b4c      	ldr	r3, [pc, #304]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	4949      	ldr	r1, [pc, #292]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d008      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004eb6:	4b45      	ldr	r3, [pc, #276]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec2:	4942      	ldr	r1, [pc, #264]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d008      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004ed4:	4b3d      	ldr	r3, [pc, #244]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee0:	493a      	ldr	r1, [pc, #232]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d008      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004ef2:	4b36      	ldr	r3, [pc, #216]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efe:	4933      	ldr	r1, [pc, #204]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d008      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004f10:	4b2e      	ldr	r3, [pc, #184]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f1c:	492b      	ldr	r1, [pc, #172]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d008      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004f2e:	4b27      	ldr	r3, [pc, #156]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f32:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3a:	4924      	ldr	r1, [pc, #144]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d008      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004f4c:	4b1f      	ldr	r3, [pc, #124]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f50:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f58:	491c      	ldr	r1, [pc, #112]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d008      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004f6a:	4b18      	ldr	r3, [pc, #96]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f76:	4915      	ldr	r1, [pc, #84]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d008      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004f88:	4b10      	ldr	r3, [pc, #64]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f94:	490d      	ldr	r1, [pc, #52]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d008      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004fa6:	4b09      	ldr	r3, [pc, #36]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004faa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fb2:	4906      	ldr	r1, [pc, #24]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00c      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004fc4:	4b01      	ldr	r3, [pc, #4]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc8:	e002      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004fca:	bf00      	nop
 8004fcc:	40021000 	.word	0x40021000
 8004fd0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fd8:	490b      	ldr	r1, [pc, #44]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d008      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004fea:	4b07      	ldr	r3, [pc, #28]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fee:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff6:	4904      	ldr	r1, [pc, #16]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3748      	adds	r7, #72	; 0x48
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	40021000 	.word	0x40021000

0800500c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e049      	b.n	80050b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d106      	bne.n	8005038 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7fc fc02 	bl	800183c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2202      	movs	r2, #2
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	3304      	adds	r3, #4
 8005048:	4619      	mov	r1, r3
 800504a:	4610      	mov	r0, r2
 800504c:	f000 fb14 	bl	8005678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
	...

080050bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d001      	beq.n	80050d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e047      	b.n	8005164 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a23      	ldr	r2, [pc, #140]	; (8005170 <HAL_TIM_Base_Start+0xb4>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d01d      	beq.n	8005122 <HAL_TIM_Base_Start+0x66>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ee:	d018      	beq.n	8005122 <HAL_TIM_Base_Start+0x66>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a1f      	ldr	r2, [pc, #124]	; (8005174 <HAL_TIM_Base_Start+0xb8>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d013      	beq.n	8005122 <HAL_TIM_Base_Start+0x66>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a1e      	ldr	r2, [pc, #120]	; (8005178 <HAL_TIM_Base_Start+0xbc>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d00e      	beq.n	8005122 <HAL_TIM_Base_Start+0x66>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a1c      	ldr	r2, [pc, #112]	; (800517c <HAL_TIM_Base_Start+0xc0>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d009      	beq.n	8005122 <HAL_TIM_Base_Start+0x66>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a1b      	ldr	r2, [pc, #108]	; (8005180 <HAL_TIM_Base_Start+0xc4>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d004      	beq.n	8005122 <HAL_TIM_Base_Start+0x66>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a19      	ldr	r2, [pc, #100]	; (8005184 <HAL_TIM_Base_Start+0xc8>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d115      	bne.n	800514e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	4b17      	ldr	r3, [pc, #92]	; (8005188 <HAL_TIM_Base_Start+0xcc>)
 800512a:	4013      	ands	r3, r2
 800512c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2b06      	cmp	r3, #6
 8005132:	d015      	beq.n	8005160 <HAL_TIM_Base_Start+0xa4>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800513a:	d011      	beq.n	8005160 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f042 0201 	orr.w	r2, r2, #1
 800514a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800514c:	e008      	b.n	8005160 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f042 0201 	orr.w	r2, r2, #1
 800515c:	601a      	str	r2, [r3, #0]
 800515e:	e000      	b.n	8005162 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005160:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3714      	adds	r7, #20
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr
 8005170:	40012c00 	.word	0x40012c00
 8005174:	40000400 	.word	0x40000400
 8005178:	40000800 	.word	0x40000800
 800517c:	40013400 	.word	0x40013400
 8005180:	40014000 	.word	0x40014000
 8005184:	40015000 	.word	0x40015000
 8005188:	00010007 	.word	0x00010007

0800518c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b01      	cmp	r3, #1
 800519e:	d001      	beq.n	80051a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e04f      	b.n	8005244 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2202      	movs	r2, #2
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0201 	orr.w	r2, r2, #1
 80051ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a23      	ldr	r2, [pc, #140]	; (8005250 <HAL_TIM_Base_Start_IT+0xc4>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d01d      	beq.n	8005202 <HAL_TIM_Base_Start_IT+0x76>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ce:	d018      	beq.n	8005202 <HAL_TIM_Base_Start_IT+0x76>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a1f      	ldr	r2, [pc, #124]	; (8005254 <HAL_TIM_Base_Start_IT+0xc8>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d013      	beq.n	8005202 <HAL_TIM_Base_Start_IT+0x76>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a1e      	ldr	r2, [pc, #120]	; (8005258 <HAL_TIM_Base_Start_IT+0xcc>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d00e      	beq.n	8005202 <HAL_TIM_Base_Start_IT+0x76>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a1c      	ldr	r2, [pc, #112]	; (800525c <HAL_TIM_Base_Start_IT+0xd0>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d009      	beq.n	8005202 <HAL_TIM_Base_Start_IT+0x76>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a1b      	ldr	r2, [pc, #108]	; (8005260 <HAL_TIM_Base_Start_IT+0xd4>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d004      	beq.n	8005202 <HAL_TIM_Base_Start_IT+0x76>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a19      	ldr	r2, [pc, #100]	; (8005264 <HAL_TIM_Base_Start_IT+0xd8>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d115      	bne.n	800522e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	4b17      	ldr	r3, [pc, #92]	; (8005268 <HAL_TIM_Base_Start_IT+0xdc>)
 800520a:	4013      	ands	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2b06      	cmp	r3, #6
 8005212:	d015      	beq.n	8005240 <HAL_TIM_Base_Start_IT+0xb4>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800521a:	d011      	beq.n	8005240 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0201 	orr.w	r2, r2, #1
 800522a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800522c:	e008      	b.n	8005240 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f042 0201 	orr.w	r2, r2, #1
 800523c:	601a      	str	r2, [r3, #0]
 800523e:	e000      	b.n	8005242 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005240:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	40012c00 	.word	0x40012c00
 8005254:	40000400 	.word	0x40000400
 8005258:	40000800 	.word	0x40000800
 800525c:	40013400 	.word	0x40013400
 8005260:	40014000 	.word	0x40014000
 8005264:	40015000 	.word	0x40015000
 8005268:	00010007 	.word	0x00010007

0800526c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b02      	cmp	r3, #2
 8005280:	d122      	bne.n	80052c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	2b02      	cmp	r3, #2
 800528e:	d11b      	bne.n	80052c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f06f 0202 	mvn.w	r2, #2
 8005298:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	f003 0303 	and.w	r3, r3, #3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f9c3 	bl	800563a <HAL_TIM_IC_CaptureCallback>
 80052b4:	e005      	b.n	80052c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f9b5 	bl	8005626 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f9c6 	bl	800564e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	f003 0304 	and.w	r3, r3, #4
 80052d2:	2b04      	cmp	r3, #4
 80052d4:	d122      	bne.n	800531c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b04      	cmp	r3, #4
 80052e2:	d11b      	bne.n	800531c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f06f 0204 	mvn.w	r2, #4
 80052ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2202      	movs	r2, #2
 80052f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f999 	bl	800563a <HAL_TIM_IC_CaptureCallback>
 8005308:	e005      	b.n	8005316 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f98b 	bl	8005626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 f99c 	bl	800564e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	f003 0308 	and.w	r3, r3, #8
 8005326:	2b08      	cmp	r3, #8
 8005328:	d122      	bne.n	8005370 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f003 0308 	and.w	r3, r3, #8
 8005334:	2b08      	cmp	r3, #8
 8005336:	d11b      	bne.n	8005370 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f06f 0208 	mvn.w	r2, #8
 8005340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2204      	movs	r2, #4
 8005346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	f003 0303 	and.w	r3, r3, #3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f96f 	bl	800563a <HAL_TIM_IC_CaptureCallback>
 800535c:	e005      	b.n	800536a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f961 	bl	8005626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f972 	bl	800564e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	f003 0310 	and.w	r3, r3, #16
 800537a:	2b10      	cmp	r3, #16
 800537c:	d122      	bne.n	80053c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	f003 0310 	and.w	r3, r3, #16
 8005388:	2b10      	cmp	r3, #16
 800538a:	d11b      	bne.n	80053c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f06f 0210 	mvn.w	r2, #16
 8005394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2208      	movs	r2, #8
 800539a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	69db      	ldr	r3, [r3, #28]
 80053a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f945 	bl	800563a <HAL_TIM_IC_CaptureCallback>
 80053b0:	e005      	b.n	80053be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f937 	bl	8005626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 f948 	bl	800564e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d10e      	bne.n	80053f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d107      	bne.n	80053f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f06f 0201 	mvn.w	r2, #1
 80053e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7fb fe5e 	bl	80010ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fa:	2b80      	cmp	r3, #128	; 0x80
 80053fc:	d10e      	bne.n	800541c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005408:	2b80      	cmp	r3, #128	; 0x80
 800540a:	d107      	bne.n	800541c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 fafc 	bl	8005a14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800542a:	d10e      	bne.n	800544a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005436:	2b80      	cmp	r3, #128	; 0x80
 8005438:	d107      	bne.n	800544a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 faef 	bl	8005a28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005454:	2b40      	cmp	r3, #64	; 0x40
 8005456:	d10e      	bne.n	8005476 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005462:	2b40      	cmp	r3, #64	; 0x40
 8005464:	d107      	bne.n	8005476 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800546e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f8f6 	bl	8005662 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	f003 0320 	and.w	r3, r3, #32
 8005480:	2b20      	cmp	r3, #32
 8005482:	d10e      	bne.n	80054a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	f003 0320 	and.w	r3, r3, #32
 800548e:	2b20      	cmp	r3, #32
 8005490:	d107      	bne.n	80054a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f06f 0220 	mvn.w	r2, #32
 800549a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 faaf 	bl	8005a00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054a2:	bf00      	nop
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b084      	sub	sp, #16
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
 80054b2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054b4:	2300      	movs	r3, #0
 80054b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d101      	bne.n	80054c6 <HAL_TIM_ConfigClockSource+0x1c>
 80054c2:	2302      	movs	r3, #2
 80054c4:	e0ab      	b.n	800561e <HAL_TIM_ConfigClockSource+0x174>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2202      	movs	r2, #2
 80054d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054e4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054e8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054f0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2b40      	cmp	r3, #64	; 0x40
 8005500:	d067      	beq.n	80055d2 <HAL_TIM_ConfigClockSource+0x128>
 8005502:	2b40      	cmp	r3, #64	; 0x40
 8005504:	d80b      	bhi.n	800551e <HAL_TIM_ConfigClockSource+0x74>
 8005506:	2b10      	cmp	r3, #16
 8005508:	d073      	beq.n	80055f2 <HAL_TIM_ConfigClockSource+0x148>
 800550a:	2b10      	cmp	r3, #16
 800550c:	d802      	bhi.n	8005514 <HAL_TIM_ConfigClockSource+0x6a>
 800550e:	2b00      	cmp	r3, #0
 8005510:	d06f      	beq.n	80055f2 <HAL_TIM_ConfigClockSource+0x148>
 8005512:	e077      	b.n	8005604 <HAL_TIM_ConfigClockSource+0x15a>
 8005514:	2b20      	cmp	r3, #32
 8005516:	d06c      	beq.n	80055f2 <HAL_TIM_ConfigClockSource+0x148>
 8005518:	2b30      	cmp	r3, #48	; 0x30
 800551a:	d06a      	beq.n	80055f2 <HAL_TIM_ConfigClockSource+0x148>
 800551c:	e072      	b.n	8005604 <HAL_TIM_ConfigClockSource+0x15a>
 800551e:	2b70      	cmp	r3, #112	; 0x70
 8005520:	d00d      	beq.n	800553e <HAL_TIM_ConfigClockSource+0x94>
 8005522:	2b70      	cmp	r3, #112	; 0x70
 8005524:	d804      	bhi.n	8005530 <HAL_TIM_ConfigClockSource+0x86>
 8005526:	2b50      	cmp	r3, #80	; 0x50
 8005528:	d033      	beq.n	8005592 <HAL_TIM_ConfigClockSource+0xe8>
 800552a:	2b60      	cmp	r3, #96	; 0x60
 800552c:	d041      	beq.n	80055b2 <HAL_TIM_ConfigClockSource+0x108>
 800552e:	e069      	b.n	8005604 <HAL_TIM_ConfigClockSource+0x15a>
 8005530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005534:	d069      	beq.n	800560a <HAL_TIM_ConfigClockSource+0x160>
 8005536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800553a:	d017      	beq.n	800556c <HAL_TIM_ConfigClockSource+0xc2>
 800553c:	e062      	b.n	8005604 <HAL_TIM_ConfigClockSource+0x15a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6818      	ldr	r0, [r3, #0]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	6899      	ldr	r1, [r3, #8]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	685a      	ldr	r2, [r3, #4]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	f000 f9ab 	bl	80058a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005560:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	609a      	str	r2, [r3, #8]
      break;
 800556a:	e04f      	b.n	800560c <HAL_TIM_ConfigClockSource+0x162>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6818      	ldr	r0, [r3, #0]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	6899      	ldr	r1, [r3, #8]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f000 f994 	bl	80058a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689a      	ldr	r2, [r3, #8]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800558e:	609a      	str	r2, [r3, #8]
      break;
 8005590:	e03c      	b.n	800560c <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6818      	ldr	r0, [r3, #0]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	6859      	ldr	r1, [r3, #4]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	461a      	mov	r2, r3
 80055a0:	f000 f908 	bl	80057b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2150      	movs	r1, #80	; 0x50
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 f961 	bl	8005872 <TIM_ITRx_SetConfig>
      break;
 80055b0:	e02c      	b.n	800560c <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6818      	ldr	r0, [r3, #0]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	6859      	ldr	r1, [r3, #4]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	461a      	mov	r2, r3
 80055c0:	f000 f927 	bl	8005812 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2160      	movs	r1, #96	; 0x60
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 f951 	bl	8005872 <TIM_ITRx_SetConfig>
      break;
 80055d0:	e01c      	b.n	800560c <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6818      	ldr	r0, [r3, #0]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	6859      	ldr	r1, [r3, #4]
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	461a      	mov	r2, r3
 80055e0:	f000 f8e8 	bl	80057b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2140      	movs	r1, #64	; 0x40
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 f941 	bl	8005872 <TIM_ITRx_SetConfig>
      break;
 80055f0:	e00c      	b.n	800560c <HAL_TIM_ConfigClockSource+0x162>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4619      	mov	r1, r3
 80055fc:	4610      	mov	r0, r2
 80055fe:	f000 f938 	bl	8005872 <TIM_ITRx_SetConfig>
      break;
 8005602:	e003      	b.n	800560c <HAL_TIM_ConfigClockSource+0x162>
    }

    default:
      status = HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	73fb      	strb	r3, [r7, #15]
      break;
 8005608:	e000      	b.n	800560c <HAL_TIM_ConfigClockSource+0x162>
      break;
 800560a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800561c:	7bfb      	ldrb	r3, [r7, #15]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005626:	b480      	push	{r7}
 8005628:	b083      	sub	sp, #12
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800562e:	bf00      	nop
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800563a:	b480      	push	{r7}
 800563c:	b083      	sub	sp, #12
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005642:	bf00      	nop
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800564e:	b480      	push	{r7}
 8005650:	b083      	sub	sp, #12
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005656:	bf00      	nop
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005662:	b480      	push	{r7}
 8005664:	b083      	sub	sp, #12
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800566a:	bf00      	nop
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
	...

08005678 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a42      	ldr	r2, [pc, #264]	; (8005794 <TIM_Base_SetConfig+0x11c>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d013      	beq.n	80056b8 <TIM_Base_SetConfig+0x40>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005696:	d00f      	beq.n	80056b8 <TIM_Base_SetConfig+0x40>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a3f      	ldr	r2, [pc, #252]	; (8005798 <TIM_Base_SetConfig+0x120>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d00b      	beq.n	80056b8 <TIM_Base_SetConfig+0x40>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a3e      	ldr	r2, [pc, #248]	; (800579c <TIM_Base_SetConfig+0x124>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d007      	beq.n	80056b8 <TIM_Base_SetConfig+0x40>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a3d      	ldr	r2, [pc, #244]	; (80057a0 <TIM_Base_SetConfig+0x128>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d003      	beq.n	80056b8 <TIM_Base_SetConfig+0x40>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a3c      	ldr	r2, [pc, #240]	; (80057a4 <TIM_Base_SetConfig+0x12c>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d108      	bne.n	80056ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a31      	ldr	r2, [pc, #196]	; (8005794 <TIM_Base_SetConfig+0x11c>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d01f      	beq.n	8005712 <TIM_Base_SetConfig+0x9a>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056d8:	d01b      	beq.n	8005712 <TIM_Base_SetConfig+0x9a>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a2e      	ldr	r2, [pc, #184]	; (8005798 <TIM_Base_SetConfig+0x120>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d017      	beq.n	8005712 <TIM_Base_SetConfig+0x9a>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a2d      	ldr	r2, [pc, #180]	; (800579c <TIM_Base_SetConfig+0x124>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d013      	beq.n	8005712 <TIM_Base_SetConfig+0x9a>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a2c      	ldr	r2, [pc, #176]	; (80057a0 <TIM_Base_SetConfig+0x128>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d00f      	beq.n	8005712 <TIM_Base_SetConfig+0x9a>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a2c      	ldr	r2, [pc, #176]	; (80057a8 <TIM_Base_SetConfig+0x130>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d00b      	beq.n	8005712 <TIM_Base_SetConfig+0x9a>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a2b      	ldr	r2, [pc, #172]	; (80057ac <TIM_Base_SetConfig+0x134>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d007      	beq.n	8005712 <TIM_Base_SetConfig+0x9a>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a2a      	ldr	r2, [pc, #168]	; (80057b0 <TIM_Base_SetConfig+0x138>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d003      	beq.n	8005712 <TIM_Base_SetConfig+0x9a>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a25      	ldr	r2, [pc, #148]	; (80057a4 <TIM_Base_SetConfig+0x12c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d108      	bne.n	8005724 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	4313      	orrs	r3, r2
 8005722:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	4313      	orrs	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	689a      	ldr	r2, [r3, #8]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a12      	ldr	r2, [pc, #72]	; (8005794 <TIM_Base_SetConfig+0x11c>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d013      	beq.n	8005778 <TIM_Base_SetConfig+0x100>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a13      	ldr	r2, [pc, #76]	; (80057a0 <TIM_Base_SetConfig+0x128>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d00f      	beq.n	8005778 <TIM_Base_SetConfig+0x100>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a13      	ldr	r2, [pc, #76]	; (80057a8 <TIM_Base_SetConfig+0x130>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d00b      	beq.n	8005778 <TIM_Base_SetConfig+0x100>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a12      	ldr	r2, [pc, #72]	; (80057ac <TIM_Base_SetConfig+0x134>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d007      	beq.n	8005778 <TIM_Base_SetConfig+0x100>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a11      	ldr	r2, [pc, #68]	; (80057b0 <TIM_Base_SetConfig+0x138>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d003      	beq.n	8005778 <TIM_Base_SetConfig+0x100>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a0c      	ldr	r2, [pc, #48]	; (80057a4 <TIM_Base_SetConfig+0x12c>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d103      	bne.n	8005780 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	691a      	ldr	r2, [r3, #16]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	615a      	str	r2, [r3, #20]
}
 8005786:	bf00      	nop
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	40012c00 	.word	0x40012c00
 8005798:	40000400 	.word	0x40000400
 800579c:	40000800 	.word	0x40000800
 80057a0:	40013400 	.word	0x40013400
 80057a4:	40015000 	.word	0x40015000
 80057a8:	40014000 	.word	0x40014000
 80057ac:	40014400 	.word	0x40014400
 80057b0:	40014800 	.word	0x40014800

080057b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b087      	sub	sp, #28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	f023 0201 	bic.w	r2, r3, #1
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	011b      	lsls	r3, r3, #4
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f023 030a 	bic.w	r3, r3, #10
 80057f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	621a      	str	r2, [r3, #32]
}
 8005806:	bf00      	nop
 8005808:	371c      	adds	r7, #28
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005812:	b480      	push	{r7}
 8005814:	b087      	sub	sp, #28
 8005816:	af00      	add	r7, sp, #0
 8005818:	60f8      	str	r0, [r7, #12]
 800581a:	60b9      	str	r1, [r7, #8]
 800581c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	f023 0210 	bic.w	r2, r3, #16
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6a1b      	ldr	r3, [r3, #32]
 8005834:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800583c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	031b      	lsls	r3, r3, #12
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	4313      	orrs	r3, r2
 8005846:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800584e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	011b      	lsls	r3, r3, #4
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	4313      	orrs	r3, r2
 8005858:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	621a      	str	r2, [r3, #32]
}
 8005866:	bf00      	nop
 8005868:	371c      	adds	r7, #28
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005872:	b480      	push	{r7}
 8005874:	b085      	sub	sp, #20
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
 800587a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005888:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	4313      	orrs	r3, r2
 8005890:	f043 0307 	orr.w	r3, r3, #7
 8005894:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	609a      	str	r2, [r3, #8]
}
 800589c:	bf00      	nop
 800589e:	3714      	adds	r7, #20
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b087      	sub	sp, #28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
 80058b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	021a      	lsls	r2, r3, #8
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	431a      	orrs	r2, r3
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	609a      	str	r2, [r3, #8]
}
 80058dc:	bf00      	nop
 80058de:	371c      	adds	r7, #28
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d101      	bne.n	8005900 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058fc:	2302      	movs	r3, #2
 80058fe:	e06d      	b.n	80059dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a30      	ldr	r2, [pc, #192]	; (80059e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d009      	beq.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a2f      	ldr	r2, [pc, #188]	; (80059ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d004      	beq.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a2d      	ldr	r2, [pc, #180]	; (80059f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d108      	bne.n	8005950 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005944:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	4313      	orrs	r3, r2
 800594e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005956:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	4313      	orrs	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a1e      	ldr	r2, [pc, #120]	; (80059e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d01d      	beq.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800597c:	d018      	beq.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a1c      	ldr	r2, [pc, #112]	; (80059f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d013      	beq.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a1a      	ldr	r2, [pc, #104]	; (80059f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d00e      	beq.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a15      	ldr	r2, [pc, #84]	; (80059ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d009      	beq.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a16      	ldr	r2, [pc, #88]	; (80059fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d004      	beq.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a11      	ldr	r2, [pc, #68]	; (80059f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d10c      	bne.n	80059ca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	4313      	orrs	r3, r2
 80059c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr
 80059e8:	40012c00 	.word	0x40012c00
 80059ec:	40013400 	.word	0x40013400
 80059f0:	40015000 	.word	0x40015000
 80059f4:	40000400 	.word	0x40000400
 80059f8:	40000800 	.word	0x40000800
 80059fc:	40014000 	.word	0x40014000

08005a00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e040      	b.n	8005ad0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d106      	bne.n	8005a64 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7fb ff2c 	bl	80018bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2224      	movs	r2, #36	; 0x24
 8005a68:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f022 0201 	bic.w	r2, r2, #1
 8005a78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 fc0e 	bl	800629c <UART_SetConfig>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d101      	bne.n	8005a8a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e022      	b.n	8005ad0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d002      	beq.n	8005a98 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 fdd6 	bl	8006644 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005aa6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	689a      	ldr	r2, [r3, #8]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ab6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f042 0201 	orr.w	r2, r2, #1
 8005ac6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 fe5d 	bl	8006788 <UART_CheckIdleState>
 8005ace:	4603      	mov	r3, r0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3708      	adds	r7, #8
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b08a      	sub	sp, #40	; 0x28
 8005adc:	af02      	add	r7, sp, #8
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	603b      	str	r3, [r7, #0]
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aec:	2b20      	cmp	r3, #32
 8005aee:	f040 8082 	bne.w	8005bf6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d002      	beq.n	8005afe <HAL_UART_Transmit+0x26>
 8005af8:	88fb      	ldrh	r3, [r7, #6]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e07a      	b.n	8005bf8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d101      	bne.n	8005b10 <HAL_UART_Transmit+0x38>
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	e073      	b.n	8005bf8 <HAL_UART_Transmit+0x120>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2221      	movs	r2, #33	; 0x21
 8005b24:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b26:	f7fc f81d 	bl	8001b64 <HAL_GetTick>
 8005b2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	88fa      	ldrh	r2, [r7, #6]
 8005b30:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	88fa      	ldrh	r2, [r7, #6]
 8005b38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b44:	d108      	bne.n	8005b58 <HAL_UART_Transmit+0x80>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d104      	bne.n	8005b58 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	61bb      	str	r3, [r7, #24]
 8005b56:	e003      	b.n	8005b60 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005b68:	e02d      	b.n	8005bc6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	2200      	movs	r2, #0
 8005b72:	2180      	movs	r1, #128	; 0x80
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f000 fe50 	bl	800681a <UART_WaitOnFlagUntilTimeout>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d001      	beq.n	8005b84 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e039      	b.n	8005bf8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10b      	bne.n	8005ba2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	881a      	ldrh	r2, [r3, #0]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b96:	b292      	uxth	r2, r2
 8005b98:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	3302      	adds	r3, #2
 8005b9e:	61bb      	str	r3, [r7, #24]
 8005ba0:	e008      	b.n	8005bb4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	781a      	ldrb	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	b292      	uxth	r2, r2
 8005bac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1cb      	bne.n	8005b6a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	9300      	str	r3, [sp, #0]
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	2140      	movs	r1, #64	; 0x40
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f000 fe1c 	bl	800681a <UART_WaitOnFlagUntilTimeout>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d001      	beq.n	8005bec <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e005      	b.n	8005bf8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2220      	movs	r2, #32
 8005bf0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	e000      	b.n	8005bf8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005bf6:	2302      	movs	r3, #2
  }
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3720      	adds	r7, #32
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b08a      	sub	sp, #40	; 0x28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c12:	2b20      	cmp	r3, #32
 8005c14:	d13d      	bne.n	8005c92 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d002      	beq.n	8005c22 <HAL_UART_Receive_IT+0x22>
 8005c1c:	88fb      	ldrh	r3, [r7, #6]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d101      	bne.n	8005c26 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e036      	b.n	8005c94 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d101      	bne.n	8005c34 <HAL_UART_Receive_IT+0x34>
 8005c30:	2302      	movs	r3, #2
 8005c32:	e02f      	b.n	8005c94 <HAL_UART_Receive_IT+0x94>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d018      	beq.n	8005c82 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	e853 3f00 	ldrex	r3, [r3]
 8005c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c64:	627b      	str	r3, [r7, #36]	; 0x24
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6e:	623b      	str	r3, [r7, #32]
 8005c70:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c72:	69f9      	ldr	r1, [r7, #28]
 8005c74:	6a3a      	ldr	r2, [r7, #32]
 8005c76:	e841 2300 	strex	r3, r2, [r1]
 8005c7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1e6      	bne.n	8005c50 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c82:	88fb      	ldrh	r3, [r7, #6]
 8005c84:	461a      	mov	r2, r3
 8005c86:	68b9      	ldr	r1, [r7, #8]
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f000 fe8b 	bl	80069a4 <UART_Start_Receive_IT>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	e000      	b.n	8005c94 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c92:	2302      	movs	r3, #2
  }
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3728      	adds	r7, #40	; 0x28
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b0ba      	sub	sp, #232	; 0xe8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005cc2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005cc6:	f640 030f 	movw	r3, #2063	; 0x80f
 8005cca:	4013      	ands	r3, r2
 8005ccc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005cd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d115      	bne.n	8005d04 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cdc:	f003 0320 	and.w	r3, r3, #32
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00f      	beq.n	8005d04 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ce8:	f003 0320 	and.w	r3, r3, #32
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d009      	beq.n	8005d04 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 82a4 	beq.w	8006242 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	4798      	blx	r3
      }
      return;
 8005d02:	e29e      	b.n	8006242 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005d04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 8117 	beq.w	8005f3c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005d0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d106      	bne.n	8005d28 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005d1a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005d1e:	4b85      	ldr	r3, [pc, #532]	; (8005f34 <HAL_UART_IRQHandler+0x298>)
 8005d20:	4013      	ands	r3, r2
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f000 810a 	beq.w	8005f3c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d011      	beq.n	8005d58 <HAL_UART_IRQHandler+0xbc>
 8005d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00b      	beq.n	8005d58 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2201      	movs	r2, #1
 8005d46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d4e:	f043 0201 	orr.w	r2, r3, #1
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d011      	beq.n	8005d88 <HAL_UART_IRQHandler+0xec>
 8005d64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d68:	f003 0301 	and.w	r3, r3, #1
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00b      	beq.n	8005d88 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2202      	movs	r2, #2
 8005d76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d7e:	f043 0204 	orr.w	r2, r3, #4
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d8c:	f003 0304 	and.w	r3, r3, #4
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d011      	beq.n	8005db8 <HAL_UART_IRQHandler+0x11c>
 8005d94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00b      	beq.n	8005db8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2204      	movs	r2, #4
 8005da6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dae:	f043 0202 	orr.w	r2, r3, #2
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dbc:	f003 0308 	and.w	r3, r3, #8
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d017      	beq.n	8005df4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dc8:	f003 0320 	and.w	r3, r3, #32
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d105      	bne.n	8005ddc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005dd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dd4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00b      	beq.n	8005df4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2208      	movs	r2, #8
 8005de2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dea:	f043 0208 	orr.w	r2, r3, #8
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005df8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d012      	beq.n	8005e26 <HAL_UART_IRQHandler+0x18a>
 8005e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00c      	beq.n	8005e26 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e1c:	f043 0220 	orr.w	r2, r3, #32
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 820a 	beq.w	8006246 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e36:	f003 0320 	and.w	r3, r3, #32
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00d      	beq.n	8005e5a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e42:	f003 0320 	and.w	r3, r3, #32
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d007      	beq.n	8005e5a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d003      	beq.n	8005e5a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6e:	2b40      	cmp	r3, #64	; 0x40
 8005e70:	d005      	beq.n	8005e7e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e76:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d04f      	beq.n	8005f1e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fe3c 	bl	8006afc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e8e:	2b40      	cmp	r3, #64	; 0x40
 8005e90:	d141      	bne.n	8005f16 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	3308      	adds	r3, #8
 8005e98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ea0:	e853 3f00 	ldrex	r3, [r3]
 8005ea4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ea8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005eac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	3308      	adds	r3, #8
 8005eba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ebe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ec2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005eca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ece:	e841 2300 	strex	r3, r2, [r1]
 8005ed2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005ed6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1d9      	bne.n	8005e92 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d013      	beq.n	8005f0e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eea:	4a13      	ldr	r2, [pc, #76]	; (8005f38 <HAL_UART_IRQHandler+0x29c>)
 8005eec:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7fd fa16 	bl	8003324 <HAL_DMA_Abort_IT>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d017      	beq.n	8005f2e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005f08:	4610      	mov	r0, r2
 8005f0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f0c:	e00f      	b.n	8005f2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 f9ae 	bl	8006270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f14:	e00b      	b.n	8005f2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f9aa 	bl	8006270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f1c:	e007      	b.n	8005f2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f9a6 	bl	8006270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005f2c:	e18b      	b.n	8006246 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f2e:	bf00      	nop
    return;
 8005f30:	e189      	b.n	8006246 <HAL_UART_IRQHandler+0x5aa>
 8005f32:	bf00      	nop
 8005f34:	04000120 	.word	0x04000120
 8005f38:	08006bc3 	.word	0x08006bc3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	f040 8143 	bne.w	80061cc <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f4a:	f003 0310 	and.w	r3, r3, #16
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f000 813c 	beq.w	80061cc <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f58:	f003 0310 	and.w	r3, r3, #16
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f000 8135 	beq.w	80061cc <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2210      	movs	r2, #16
 8005f68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f74:	2b40      	cmp	r3, #64	; 0x40
 8005f76:	f040 80b1 	bne.w	80060dc <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f86:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f000 815d 	beq.w	800624a <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005f96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	f080 8155 	bcs.w	800624a <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fa6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	2b20      	cmp	r3, #32
 8005fb2:	f000 8085 	beq.w	80060c0 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fc2:	e853 3f00 	ldrex	r3, [r3]
 8005fc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005fca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005fe0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005fe4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005fec:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005ff0:	e841 2300 	strex	r3, r2, [r1]
 8005ff4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005ff8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1da      	bne.n	8005fb6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3308      	adds	r3, #8
 8006006:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006008:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800600a:	e853 3f00 	ldrex	r3, [r3]
 800600e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006010:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006012:	f023 0301 	bic.w	r3, r3, #1
 8006016:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	3308      	adds	r3, #8
 8006020:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006024:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006028:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800602c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006030:	e841 2300 	strex	r3, r2, [r1]
 8006034:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006036:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1e1      	bne.n	8006000 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	3308      	adds	r3, #8
 8006042:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006044:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006046:	e853 3f00 	ldrex	r3, [r3]
 800604a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800604c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800604e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006052:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	3308      	adds	r3, #8
 800605c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006060:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006062:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006064:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006066:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006068:	e841 2300 	strex	r3, r2, [r1]
 800606c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800606e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1e3      	bne.n	800603c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2220      	movs	r2, #32
 8006078:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006088:	e853 3f00 	ldrex	r3, [r3]
 800608c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800608e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006090:	f023 0310 	bic.w	r3, r3, #16
 8006094:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	461a      	mov	r2, r3
 800609e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80060a4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060aa:	e841 2300 	strex	r3, r2, [r1]
 80060ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80060b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1e4      	bne.n	8006080 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7fd f8f9 	bl	80032b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	4619      	mov	r1, r3
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 f8d5 	bl	8006284 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060da:	e0b6      	b.n	800624a <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f000 80a8 	beq.w	800624e <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 80060fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006102:	2b00      	cmp	r3, #0
 8006104:	f000 80a3 	beq.w	800624e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006110:	e853 3f00 	ldrex	r3, [r3]
 8006114:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006118:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800611c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	461a      	mov	r2, r3
 8006126:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800612a:	647b      	str	r3, [r7, #68]	; 0x44
 800612c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006130:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006132:	e841 2300 	strex	r3, r2, [r1]
 8006136:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1e4      	bne.n	8006108 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	3308      	adds	r3, #8
 8006144:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006148:	e853 3f00 	ldrex	r3, [r3]
 800614c:	623b      	str	r3, [r7, #32]
   return(result);
 800614e:	6a3b      	ldr	r3, [r7, #32]
 8006150:	f023 0301 	bic.w	r3, r3, #1
 8006154:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	3308      	adds	r3, #8
 800615e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006162:	633a      	str	r2, [r7, #48]	; 0x30
 8006164:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006166:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800616a:	e841 2300 	strex	r3, r2, [r1]
 800616e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1e3      	bne.n	800613e <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2220      	movs	r2, #32
 800617a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	e853 3f00 	ldrex	r3, [r3]
 8006194:	60fb      	str	r3, [r7, #12]
   return(result);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f023 0310 	bic.w	r3, r3, #16
 800619c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	461a      	mov	r2, r3
 80061a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80061aa:	61fb      	str	r3, [r7, #28]
 80061ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ae:	69b9      	ldr	r1, [r7, #24]
 80061b0:	69fa      	ldr	r2, [r7, #28]
 80061b2:	e841 2300 	strex	r3, r2, [r1]
 80061b6:	617b      	str	r3, [r7, #20]
   return(result);
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1e4      	bne.n	8006188 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061c2:	4619      	mov	r1, r3
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 f85d 	bl	8006284 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061ca:	e040      	b.n	800624e <HAL_UART_IRQHandler+0x5b2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80061cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00e      	beq.n	80061f6 <HAL_UART_IRQHandler+0x55a>
 80061d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d008      	beq.n	80061f6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80061ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fe83 	bl	8006efa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80061f4:	e02e      	b.n	8006254 <HAL_UART_IRQHandler+0x5b8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80061f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00e      	beq.n	8006220 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800620a:	2b00      	cmp	r3, #0
 800620c:	d008      	beq.n	8006220 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006212:	2b00      	cmp	r3, #0
 8006214:	d01d      	beq.n	8006252 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	4798      	blx	r3
    }
    return;
 800621e:	e018      	b.n	8006252 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006228:	2b00      	cmp	r3, #0
 800622a:	d013      	beq.n	8006254 <HAL_UART_IRQHandler+0x5b8>
 800622c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00d      	beq.n	8006254 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 fcd8 	bl	8006bee <UART_EndTransmit_IT>
    return;
 800623e:	bf00      	nop
 8006240:	e008      	b.n	8006254 <HAL_UART_IRQHandler+0x5b8>
      return;
 8006242:	bf00      	nop
 8006244:	e006      	b.n	8006254 <HAL_UART_IRQHandler+0x5b8>
    return;
 8006246:	bf00      	nop
 8006248:	e004      	b.n	8006254 <HAL_UART_IRQHandler+0x5b8>
      return;
 800624a:	bf00      	nop
 800624c:	e002      	b.n	8006254 <HAL_UART_IRQHandler+0x5b8>
      return;
 800624e:	bf00      	nop
 8006250:	e000      	b.n	8006254 <HAL_UART_IRQHandler+0x5b8>
    return;
 8006252:	bf00      	nop
  }

}
 8006254:	37e8      	adds	r7, #232	; 0xe8
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop

0800625c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	460b      	mov	r3, r1
 800628e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b088      	sub	sp, #32
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062a4:	2300      	movs	r3, #0
 80062a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	689a      	ldr	r2, [r3, #8]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	431a      	orrs	r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	431a      	orrs	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	69db      	ldr	r3, [r3, #28]
 80062bc:	4313      	orrs	r3, r2
 80062be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	4baa      	ldr	r3, [pc, #680]	; (8006570 <UART_SetConfig+0x2d4>)
 80062c8:	4013      	ands	r3, r2
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	6812      	ldr	r2, [r2, #0]
 80062ce:	6979      	ldr	r1, [r7, #20]
 80062d0:	430b      	orrs	r3, r1
 80062d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68da      	ldr	r2, [r3, #12]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	430a      	orrs	r2, r1
 80062e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a1b      	ldr	r3, [r3, #32]
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	430a      	orrs	r2, r1
 800630c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a98      	ldr	r2, [pc, #608]	; (8006574 <UART_SetConfig+0x2d8>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d121      	bne.n	800635c <UART_SetConfig+0xc0>
 8006318:	4b97      	ldr	r3, [pc, #604]	; (8006578 <UART_SetConfig+0x2dc>)
 800631a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631c:	f003 0303 	and.w	r3, r3, #3
 8006320:	2b03      	cmp	r3, #3
 8006322:	d817      	bhi.n	8006354 <UART_SetConfig+0xb8>
 8006324:	a201      	add	r2, pc, #4	; (adr r2, 800632c <UART_SetConfig+0x90>)
 8006326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632a:	bf00      	nop
 800632c:	0800633d 	.word	0x0800633d
 8006330:	08006349 	.word	0x08006349
 8006334:	0800634f 	.word	0x0800634f
 8006338:	08006343 	.word	0x08006343
 800633c:	2301      	movs	r3, #1
 800633e:	77fb      	strb	r3, [r7, #31]
 8006340:	e0b2      	b.n	80064a8 <UART_SetConfig+0x20c>
 8006342:	2302      	movs	r3, #2
 8006344:	77fb      	strb	r3, [r7, #31]
 8006346:	e0af      	b.n	80064a8 <UART_SetConfig+0x20c>
 8006348:	2304      	movs	r3, #4
 800634a:	77fb      	strb	r3, [r7, #31]
 800634c:	e0ac      	b.n	80064a8 <UART_SetConfig+0x20c>
 800634e:	2308      	movs	r3, #8
 8006350:	77fb      	strb	r3, [r7, #31]
 8006352:	e0a9      	b.n	80064a8 <UART_SetConfig+0x20c>
 8006354:	2310      	movs	r3, #16
 8006356:	77fb      	strb	r3, [r7, #31]
 8006358:	bf00      	nop
 800635a:	e0a5      	b.n	80064a8 <UART_SetConfig+0x20c>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a86      	ldr	r2, [pc, #536]	; (800657c <UART_SetConfig+0x2e0>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d123      	bne.n	80063ae <UART_SetConfig+0x112>
 8006366:	4b84      	ldr	r3, [pc, #528]	; (8006578 <UART_SetConfig+0x2dc>)
 8006368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800636e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006372:	d012      	beq.n	800639a <UART_SetConfig+0xfe>
 8006374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006378:	d802      	bhi.n	8006380 <UART_SetConfig+0xe4>
 800637a:	2b00      	cmp	r3, #0
 800637c:	d007      	beq.n	800638e <UART_SetConfig+0xf2>
 800637e:	e012      	b.n	80063a6 <UART_SetConfig+0x10a>
 8006380:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006384:	d00c      	beq.n	80063a0 <UART_SetConfig+0x104>
 8006386:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800638a:	d003      	beq.n	8006394 <UART_SetConfig+0xf8>
 800638c:	e00b      	b.n	80063a6 <UART_SetConfig+0x10a>
 800638e:	2300      	movs	r3, #0
 8006390:	77fb      	strb	r3, [r7, #31]
 8006392:	e089      	b.n	80064a8 <UART_SetConfig+0x20c>
 8006394:	2302      	movs	r3, #2
 8006396:	77fb      	strb	r3, [r7, #31]
 8006398:	e086      	b.n	80064a8 <UART_SetConfig+0x20c>
 800639a:	2304      	movs	r3, #4
 800639c:	77fb      	strb	r3, [r7, #31]
 800639e:	e083      	b.n	80064a8 <UART_SetConfig+0x20c>
 80063a0:	2308      	movs	r3, #8
 80063a2:	77fb      	strb	r3, [r7, #31]
 80063a4:	e080      	b.n	80064a8 <UART_SetConfig+0x20c>
 80063a6:	2310      	movs	r3, #16
 80063a8:	77fb      	strb	r3, [r7, #31]
 80063aa:	bf00      	nop
 80063ac:	e07c      	b.n	80064a8 <UART_SetConfig+0x20c>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a73      	ldr	r2, [pc, #460]	; (8006580 <UART_SetConfig+0x2e4>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d123      	bne.n	8006400 <UART_SetConfig+0x164>
 80063b8:	4b6f      	ldr	r3, [pc, #444]	; (8006578 <UART_SetConfig+0x2dc>)
 80063ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063bc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80063c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063c4:	d012      	beq.n	80063ec <UART_SetConfig+0x150>
 80063c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063ca:	d802      	bhi.n	80063d2 <UART_SetConfig+0x136>
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d007      	beq.n	80063e0 <UART_SetConfig+0x144>
 80063d0:	e012      	b.n	80063f8 <UART_SetConfig+0x15c>
 80063d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80063d6:	d00c      	beq.n	80063f2 <UART_SetConfig+0x156>
 80063d8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80063dc:	d003      	beq.n	80063e6 <UART_SetConfig+0x14a>
 80063de:	e00b      	b.n	80063f8 <UART_SetConfig+0x15c>
 80063e0:	2300      	movs	r3, #0
 80063e2:	77fb      	strb	r3, [r7, #31]
 80063e4:	e060      	b.n	80064a8 <UART_SetConfig+0x20c>
 80063e6:	2302      	movs	r3, #2
 80063e8:	77fb      	strb	r3, [r7, #31]
 80063ea:	e05d      	b.n	80064a8 <UART_SetConfig+0x20c>
 80063ec:	2304      	movs	r3, #4
 80063ee:	77fb      	strb	r3, [r7, #31]
 80063f0:	e05a      	b.n	80064a8 <UART_SetConfig+0x20c>
 80063f2:	2308      	movs	r3, #8
 80063f4:	77fb      	strb	r3, [r7, #31]
 80063f6:	e057      	b.n	80064a8 <UART_SetConfig+0x20c>
 80063f8:	2310      	movs	r3, #16
 80063fa:	77fb      	strb	r3, [r7, #31]
 80063fc:	bf00      	nop
 80063fe:	e053      	b.n	80064a8 <UART_SetConfig+0x20c>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a5f      	ldr	r2, [pc, #380]	; (8006584 <UART_SetConfig+0x2e8>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d123      	bne.n	8006452 <UART_SetConfig+0x1b6>
 800640a:	4b5b      	ldr	r3, [pc, #364]	; (8006578 <UART_SetConfig+0x2dc>)
 800640c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006412:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006416:	d012      	beq.n	800643e <UART_SetConfig+0x1a2>
 8006418:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800641c:	d802      	bhi.n	8006424 <UART_SetConfig+0x188>
 800641e:	2b00      	cmp	r3, #0
 8006420:	d007      	beq.n	8006432 <UART_SetConfig+0x196>
 8006422:	e012      	b.n	800644a <UART_SetConfig+0x1ae>
 8006424:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006428:	d00c      	beq.n	8006444 <UART_SetConfig+0x1a8>
 800642a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800642e:	d003      	beq.n	8006438 <UART_SetConfig+0x19c>
 8006430:	e00b      	b.n	800644a <UART_SetConfig+0x1ae>
 8006432:	2300      	movs	r3, #0
 8006434:	77fb      	strb	r3, [r7, #31]
 8006436:	e037      	b.n	80064a8 <UART_SetConfig+0x20c>
 8006438:	2302      	movs	r3, #2
 800643a:	77fb      	strb	r3, [r7, #31]
 800643c:	e034      	b.n	80064a8 <UART_SetConfig+0x20c>
 800643e:	2304      	movs	r3, #4
 8006440:	77fb      	strb	r3, [r7, #31]
 8006442:	e031      	b.n	80064a8 <UART_SetConfig+0x20c>
 8006444:	2308      	movs	r3, #8
 8006446:	77fb      	strb	r3, [r7, #31]
 8006448:	e02e      	b.n	80064a8 <UART_SetConfig+0x20c>
 800644a:	2310      	movs	r3, #16
 800644c:	77fb      	strb	r3, [r7, #31]
 800644e:	bf00      	nop
 8006450:	e02a      	b.n	80064a8 <UART_SetConfig+0x20c>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a4c      	ldr	r2, [pc, #304]	; (8006588 <UART_SetConfig+0x2ec>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d123      	bne.n	80064a4 <UART_SetConfig+0x208>
 800645c:	4b46      	ldr	r3, [pc, #280]	; (8006578 <UART_SetConfig+0x2dc>)
 800645e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006460:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006464:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006468:	d012      	beq.n	8006490 <UART_SetConfig+0x1f4>
 800646a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800646e:	d802      	bhi.n	8006476 <UART_SetConfig+0x1da>
 8006470:	2b00      	cmp	r3, #0
 8006472:	d007      	beq.n	8006484 <UART_SetConfig+0x1e8>
 8006474:	e012      	b.n	800649c <UART_SetConfig+0x200>
 8006476:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800647a:	d00c      	beq.n	8006496 <UART_SetConfig+0x1fa>
 800647c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006480:	d003      	beq.n	800648a <UART_SetConfig+0x1ee>
 8006482:	e00b      	b.n	800649c <UART_SetConfig+0x200>
 8006484:	2300      	movs	r3, #0
 8006486:	77fb      	strb	r3, [r7, #31]
 8006488:	e00e      	b.n	80064a8 <UART_SetConfig+0x20c>
 800648a:	2302      	movs	r3, #2
 800648c:	77fb      	strb	r3, [r7, #31]
 800648e:	e00b      	b.n	80064a8 <UART_SetConfig+0x20c>
 8006490:	2304      	movs	r3, #4
 8006492:	77fb      	strb	r3, [r7, #31]
 8006494:	e008      	b.n	80064a8 <UART_SetConfig+0x20c>
 8006496:	2308      	movs	r3, #8
 8006498:	77fb      	strb	r3, [r7, #31]
 800649a:	e005      	b.n	80064a8 <UART_SetConfig+0x20c>
 800649c:	2310      	movs	r3, #16
 800649e:	77fb      	strb	r3, [r7, #31]
 80064a0:	bf00      	nop
 80064a2:	e001      	b.n	80064a8 <UART_SetConfig+0x20c>
 80064a4:	2310      	movs	r3, #16
 80064a6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	69db      	ldr	r3, [r3, #28]
 80064ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064b0:	d16e      	bne.n	8006590 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80064b2:	7ffb      	ldrb	r3, [r7, #31]
 80064b4:	2b08      	cmp	r3, #8
 80064b6:	d828      	bhi.n	800650a <UART_SetConfig+0x26e>
 80064b8:	a201      	add	r2, pc, #4	; (adr r2, 80064c0 <UART_SetConfig+0x224>)
 80064ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064be:	bf00      	nop
 80064c0:	080064e5 	.word	0x080064e5
 80064c4:	080064ed 	.word	0x080064ed
 80064c8:	080064f5 	.word	0x080064f5
 80064cc:	0800650b 	.word	0x0800650b
 80064d0:	080064fb 	.word	0x080064fb
 80064d4:	0800650b 	.word	0x0800650b
 80064d8:	0800650b 	.word	0x0800650b
 80064dc:	0800650b 	.word	0x0800650b
 80064e0:	08006503 	.word	0x08006503
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064e4:	f7fe fb30 	bl	8004b48 <HAL_RCC_GetPCLK1Freq>
 80064e8:	61b8      	str	r0, [r7, #24]
        break;
 80064ea:	e013      	b.n	8006514 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064ec:	f7fe fb4e 	bl	8004b8c <HAL_RCC_GetPCLK2Freq>
 80064f0:	61b8      	str	r0, [r7, #24]
        break;
 80064f2:	e00f      	b.n	8006514 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064f4:	4b25      	ldr	r3, [pc, #148]	; (800658c <UART_SetConfig+0x2f0>)
 80064f6:	61bb      	str	r3, [r7, #24]
        break;
 80064f8:	e00c      	b.n	8006514 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064fa:	f7fe faaf 	bl	8004a5c <HAL_RCC_GetSysClockFreq>
 80064fe:	61b8      	str	r0, [r7, #24]
        break;
 8006500:	e008      	b.n	8006514 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006506:	61bb      	str	r3, [r7, #24]
        break;
 8006508:	e004      	b.n	8006514 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 800650a:	2300      	movs	r3, #0
 800650c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	77bb      	strb	r3, [r7, #30]
        break;
 8006512:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	2b00      	cmp	r3, #0
 8006518:	f000 8086 	beq.w	8006628 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	005a      	lsls	r2, r3, #1
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	085b      	lsrs	r3, r3, #1
 8006526:	441a      	add	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006530:	b29b      	uxth	r3, r3
 8006532:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	2b0f      	cmp	r3, #15
 8006538:	d916      	bls.n	8006568 <UART_SetConfig+0x2cc>
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006540:	d212      	bcs.n	8006568 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	b29b      	uxth	r3, r3
 8006546:	f023 030f 	bic.w	r3, r3, #15
 800654a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	085b      	lsrs	r3, r3, #1
 8006550:	b29b      	uxth	r3, r3
 8006552:	f003 0307 	and.w	r3, r3, #7
 8006556:	b29a      	uxth	r2, r3
 8006558:	89fb      	ldrh	r3, [r7, #14]
 800655a:	4313      	orrs	r3, r2
 800655c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	89fa      	ldrh	r2, [r7, #14]
 8006564:	60da      	str	r2, [r3, #12]
 8006566:	e05f      	b.n	8006628 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	77bb      	strb	r3, [r7, #30]
 800656c:	e05c      	b.n	8006628 <UART_SetConfig+0x38c>
 800656e:	bf00      	nop
 8006570:	efff69f3 	.word	0xefff69f3
 8006574:	40013800 	.word	0x40013800
 8006578:	40021000 	.word	0x40021000
 800657c:	40004400 	.word	0x40004400
 8006580:	40004800 	.word	0x40004800
 8006584:	40004c00 	.word	0x40004c00
 8006588:	40005000 	.word	0x40005000
 800658c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8006590:	7ffb      	ldrb	r3, [r7, #31]
 8006592:	2b08      	cmp	r3, #8
 8006594:	d827      	bhi.n	80065e6 <UART_SetConfig+0x34a>
 8006596:	a201      	add	r2, pc, #4	; (adr r2, 800659c <UART_SetConfig+0x300>)
 8006598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659c:	080065c1 	.word	0x080065c1
 80065a0:	080065c9 	.word	0x080065c9
 80065a4:	080065d1 	.word	0x080065d1
 80065a8:	080065e7 	.word	0x080065e7
 80065ac:	080065d7 	.word	0x080065d7
 80065b0:	080065e7 	.word	0x080065e7
 80065b4:	080065e7 	.word	0x080065e7
 80065b8:	080065e7 	.word	0x080065e7
 80065bc:	080065df 	.word	0x080065df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065c0:	f7fe fac2 	bl	8004b48 <HAL_RCC_GetPCLK1Freq>
 80065c4:	61b8      	str	r0, [r7, #24]
        break;
 80065c6:	e013      	b.n	80065f0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065c8:	f7fe fae0 	bl	8004b8c <HAL_RCC_GetPCLK2Freq>
 80065cc:	61b8      	str	r0, [r7, #24]
        break;
 80065ce:	e00f      	b.n	80065f0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065d0:	4b1b      	ldr	r3, [pc, #108]	; (8006640 <UART_SetConfig+0x3a4>)
 80065d2:	61bb      	str	r3, [r7, #24]
        break;
 80065d4:	e00c      	b.n	80065f0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065d6:	f7fe fa41 	bl	8004a5c <HAL_RCC_GetSysClockFreq>
 80065da:	61b8      	str	r0, [r7, #24]
        break;
 80065dc:	e008      	b.n	80065f0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065e2:	61bb      	str	r3, [r7, #24]
        break;
 80065e4:	e004      	b.n	80065f0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80065e6:	2300      	movs	r3, #0
 80065e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	77bb      	strb	r3, [r7, #30]
        break;
 80065ee:	bf00      	nop
    }

    if (pclk != 0U)
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d018      	beq.n	8006628 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	085a      	lsrs	r2, r3, #1
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	441a      	add	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	fbb2 f3f3 	udiv	r3, r2, r3
 8006608:	b29b      	uxth	r3, r3
 800660a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	2b0f      	cmp	r3, #15
 8006610:	d908      	bls.n	8006624 <UART_SetConfig+0x388>
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006618:	d204      	bcs.n	8006624 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	693a      	ldr	r2, [r7, #16]
 8006620:	60da      	str	r2, [r3, #12]
 8006622:	e001      	b.n	8006628 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006634:	7fbb      	ldrb	r3, [r7, #30]
}
 8006636:	4618      	mov	r0, r3
 8006638:	3720      	adds	r7, #32
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	007a1200 	.word	0x007a1200

08006644 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006650:	f003 0301 	and.w	r3, r3, #1
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00a      	beq.n	800666e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	430a      	orrs	r2, r1
 800666c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006672:	f003 0302 	and.w	r3, r3, #2
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00a      	beq.n	8006690 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	430a      	orrs	r2, r1
 800668e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006694:	f003 0304 	and.w	r3, r3, #4
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00a      	beq.n	80066b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	430a      	orrs	r2, r1
 80066b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b6:	f003 0308 	and.w	r3, r3, #8
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00a      	beq.n	80066d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	430a      	orrs	r2, r1
 80066d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d8:	f003 0310 	and.w	r3, r3, #16
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00a      	beq.n	80066f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	430a      	orrs	r2, r1
 80066f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fa:	f003 0320 	and.w	r3, r3, #32
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00a      	beq.n	8006718 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	430a      	orrs	r2, r1
 8006716:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006720:	2b00      	cmp	r3, #0
 8006722:	d01a      	beq.n	800675a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	430a      	orrs	r2, r1
 8006738:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006742:	d10a      	bne.n	800675a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	430a      	orrs	r2, r1
 8006758:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00a      	beq.n	800677c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	430a      	orrs	r2, r1
 800677a:	605a      	str	r2, [r3, #4]
  }
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af02      	add	r7, sp, #8
 800678e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006798:	f7fb f9e4 	bl	8001b64 <HAL_GetTick>
 800679c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0308 	and.w	r3, r3, #8
 80067a8:	2b08      	cmp	r3, #8
 80067aa:	d10e      	bne.n	80067ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f82d 	bl	800681a <UART_WaitOnFlagUntilTimeout>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d001      	beq.n	80067ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e023      	b.n	8006812 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 0304 	and.w	r3, r3, #4
 80067d4:	2b04      	cmp	r3, #4
 80067d6:	d10e      	bne.n	80067f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f817 	bl	800681a <UART_WaitOnFlagUntilTimeout>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e00d      	b.n	8006812 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2220      	movs	r2, #32
 80067fa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2220      	movs	r2, #32
 8006800:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b09c      	sub	sp, #112	; 0x70
 800681e:	af00      	add	r7, sp, #0
 8006820:	60f8      	str	r0, [r7, #12]
 8006822:	60b9      	str	r1, [r7, #8]
 8006824:	603b      	str	r3, [r7, #0]
 8006826:	4613      	mov	r3, r2
 8006828:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800682a:	e0a5      	b.n	8006978 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800682c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800682e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006832:	f000 80a1 	beq.w	8006978 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006836:	f7fb f995 	bl	8001b64 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006842:	429a      	cmp	r2, r3
 8006844:	d302      	bcc.n	800684c <UART_WaitOnFlagUntilTimeout+0x32>
 8006846:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006848:	2b00      	cmp	r3, #0
 800684a:	d13e      	bne.n	80068ca <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006854:	e853 3f00 	ldrex	r3, [r3]
 8006858:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800685a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800685c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006860:	667b      	str	r3, [r7, #100]	; 0x64
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	461a      	mov	r2, r3
 8006868:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800686a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800686c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006870:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006872:	e841 2300 	strex	r3, r2, [r1]
 8006876:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1e6      	bne.n	800684c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	3308      	adds	r3, #8
 8006884:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006888:	e853 3f00 	ldrex	r3, [r3]
 800688c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800688e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006890:	f023 0301 	bic.w	r3, r3, #1
 8006894:	663b      	str	r3, [r7, #96]	; 0x60
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	3308      	adds	r3, #8
 800689c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800689e:	64ba      	str	r2, [r7, #72]	; 0x48
 80068a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80068a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068a6:	e841 2300 	strex	r3, r2, [r1]
 80068aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80068ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1e5      	bne.n	800687e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2220      	movs	r2, #32
 80068b6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2220      	movs	r2, #32
 80068bc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e067      	b.n	800699a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 0304 	and.w	r3, r3, #4
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d04f      	beq.n	8006978 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	69db      	ldr	r3, [r3, #28]
 80068de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068e6:	d147      	bne.n	8006978 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068f0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fa:	e853 3f00 	ldrex	r3, [r3]
 80068fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006902:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006906:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	461a      	mov	r2, r3
 800690e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006910:	637b      	str	r3, [r7, #52]	; 0x34
 8006912:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006914:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006916:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006918:	e841 2300 	strex	r3, r2, [r1]
 800691c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800691e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1e6      	bne.n	80068f2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	3308      	adds	r3, #8
 800692a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	e853 3f00 	ldrex	r3, [r3]
 8006932:	613b      	str	r3, [r7, #16]
   return(result);
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	f023 0301 	bic.w	r3, r3, #1
 800693a:	66bb      	str	r3, [r7, #104]	; 0x68
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	3308      	adds	r3, #8
 8006942:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006944:	623a      	str	r2, [r7, #32]
 8006946:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006948:	69f9      	ldr	r1, [r7, #28]
 800694a:	6a3a      	ldr	r2, [r7, #32]
 800694c:	e841 2300 	strex	r3, r2, [r1]
 8006950:	61bb      	str	r3, [r7, #24]
   return(result);
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d1e5      	bne.n	8006924 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2220      	movs	r2, #32
 800695c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2220      	movs	r2, #32
 8006962:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2220      	movs	r2, #32
 8006968:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e010      	b.n	800699a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	69da      	ldr	r2, [r3, #28]
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	4013      	ands	r3, r2
 8006982:	68ba      	ldr	r2, [r7, #8]
 8006984:	429a      	cmp	r2, r3
 8006986:	bf0c      	ite	eq
 8006988:	2301      	moveq	r3, #1
 800698a:	2300      	movne	r3, #0
 800698c:	b2db      	uxtb	r3, r3
 800698e:	461a      	mov	r2, r3
 8006990:	79fb      	ldrb	r3, [r7, #7]
 8006992:	429a      	cmp	r2, r3
 8006994:	f43f af4a 	beq.w	800682c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3770      	adds	r7, #112	; 0x70
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
	...

080069a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b091      	sub	sp, #68	; 0x44
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	4613      	mov	r3, r2
 80069b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	88fa      	ldrh	r2, [r7, #6]
 80069bc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	88fa      	ldrh	r2, [r7, #6]
 80069c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2200      	movs	r2, #0
 80069cc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069d6:	d10e      	bne.n	80069f6 <UART_Start_Receive_IT+0x52>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d105      	bne.n	80069ec <UART_Start_Receive_IT+0x48>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80069e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069ea:	e02d      	b.n	8006a48 <UART_Start_Receive_IT+0xa4>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	22ff      	movs	r2, #255	; 0xff
 80069f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069f4:	e028      	b.n	8006a48 <UART_Start_Receive_IT+0xa4>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10d      	bne.n	8006a1a <UART_Start_Receive_IT+0x76>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d104      	bne.n	8006a10 <UART_Start_Receive_IT+0x6c>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	22ff      	movs	r2, #255	; 0xff
 8006a0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a0e:	e01b      	b.n	8006a48 <UART_Start_Receive_IT+0xa4>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	227f      	movs	r2, #127	; 0x7f
 8006a14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a18:	e016      	b.n	8006a48 <UART_Start_Receive_IT+0xa4>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a22:	d10d      	bne.n	8006a40 <UART_Start_Receive_IT+0x9c>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d104      	bne.n	8006a36 <UART_Start_Receive_IT+0x92>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	227f      	movs	r2, #127	; 0x7f
 8006a30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a34:	e008      	b.n	8006a48 <UART_Start_Receive_IT+0xa4>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	223f      	movs	r2, #63	; 0x3f
 8006a3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a3e:	e003      	b.n	8006a48 <UART_Start_Receive_IT+0xa4>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2222      	movs	r2, #34	; 0x22
 8006a54:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	3308      	adds	r3, #8
 8006a5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a60:	e853 3f00 	ldrex	r3, [r3]
 8006a64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a68:	f043 0301 	orr.w	r3, r3, #1
 8006a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	3308      	adds	r3, #8
 8006a74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a76:	637a      	str	r2, [r7, #52]	; 0x34
 8006a78:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a7e:	e841 2300 	strex	r3, r2, [r1]
 8006a82:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1e5      	bne.n	8006a56 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a92:	d107      	bne.n	8006aa4 <UART_Start_Receive_IT+0x100>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d103      	bne.n	8006aa4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	4a15      	ldr	r2, [pc, #84]	; (8006af4 <UART_Start_Receive_IT+0x150>)
 8006aa0:	665a      	str	r2, [r3, #100]	; 0x64
 8006aa2:	e002      	b.n	8006aaa <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	4a14      	ldr	r2, [pc, #80]	; (8006af8 <UART_Start_Receive_IT+0x154>)
 8006aa8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	e853 3f00 	ldrex	r3, [r3]
 8006abe:	613b      	str	r3, [r7, #16]
   return(result);
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006ac6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	461a      	mov	r2, r3
 8006ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad0:	623b      	str	r3, [r7, #32]
 8006ad2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad4:	69f9      	ldr	r1, [r7, #28]
 8006ad6:	6a3a      	ldr	r2, [r7, #32]
 8006ad8:	e841 2300 	strex	r3, r2, [r1]
 8006adc:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1e6      	bne.n	8006ab2 <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3744      	adds	r7, #68	; 0x44
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	08006d9f 	.word	0x08006d9f
 8006af8:	08006c43 	.word	0x08006c43

08006afc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b095      	sub	sp, #84	; 0x54
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b0c:	e853 3f00 	ldrex	r3, [r3]
 8006b10:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b22:	643b      	str	r3, [r7, #64]	; 0x40
 8006b24:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b2a:	e841 2300 	strex	r3, r2, [r1]
 8006b2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1e6      	bne.n	8006b04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	3308      	adds	r3, #8
 8006b3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3e:	6a3b      	ldr	r3, [r7, #32]
 8006b40:	e853 3f00 	ldrex	r3, [r3]
 8006b44:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	f023 0301 	bic.w	r3, r3, #1
 8006b4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	3308      	adds	r3, #8
 8006b54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b5e:	e841 2300 	strex	r3, r2, [r1]
 8006b62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1e5      	bne.n	8006b36 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d118      	bne.n	8006ba4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	e853 3f00 	ldrex	r3, [r3]
 8006b7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	f023 0310 	bic.w	r3, r3, #16
 8006b86:	647b      	str	r3, [r7, #68]	; 0x44
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b90:	61bb      	str	r3, [r7, #24]
 8006b92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b94:	6979      	ldr	r1, [r7, #20]
 8006b96:	69ba      	ldr	r2, [r7, #24]
 8006b98:	e841 2300 	strex	r3, r2, [r1]
 8006b9c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d1e6      	bne.n	8006b72 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2220      	movs	r2, #32
 8006ba8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006bb6:	bf00      	nop
 8006bb8:	3754      	adds	r7, #84	; 0x54
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b084      	sub	sp, #16
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f7ff fb45 	bl	8006270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006be6:	bf00      	nop
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b088      	sub	sp, #32
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	e853 3f00 	ldrex	r3, [r3]
 8006c02:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c0a:	61fb      	str	r3, [r7, #28]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	461a      	mov	r2, r3
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	61bb      	str	r3, [r7, #24]
 8006c16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c18:	6979      	ldr	r1, [r7, #20]
 8006c1a:	69ba      	ldr	r2, [r7, #24]
 8006c1c:	e841 2300 	strex	r3, r2, [r1]
 8006c20:	613b      	str	r3, [r7, #16]
   return(result);
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1e6      	bne.n	8006bf6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2220      	movs	r2, #32
 8006c2c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f7ff fb11 	bl	800625c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c3a:	bf00      	nop
 8006c3c:	3720      	adds	r7, #32
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b096      	sub	sp, #88	; 0x58
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c50:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c58:	2b22      	cmp	r3, #34	; 0x22
 8006c5a:	f040 8094 	bne.w	8006d86 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006c64:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006c68:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006c6c:	b2d9      	uxtb	r1, r3
 8006c6e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006c72:	b2da      	uxtb	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c78:	400a      	ands	r2, r1
 8006c7a:	b2d2      	uxtb	r2, r2
 8006c7c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c82:	1c5a      	adds	r2, r3, #1
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	3b01      	subs	r3, #1
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d177      	bne.n	8006d96 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cae:	e853 3f00 	ldrex	r3, [r3]
 8006cb2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cba:	653b      	str	r3, [r7, #80]	; 0x50
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cc4:	647b      	str	r3, [r7, #68]	; 0x44
 8006cc6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006cca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ccc:	e841 2300 	strex	r3, r2, [r1]
 8006cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1e6      	bne.n	8006ca6 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	3308      	adds	r3, #8
 8006cde:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce2:	e853 3f00 	ldrex	r3, [r3]
 8006ce6:	623b      	str	r3, [r7, #32]
   return(result);
 8006ce8:	6a3b      	ldr	r3, [r7, #32]
 8006cea:	f023 0301 	bic.w	r3, r3, #1
 8006cee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	3308      	adds	r3, #8
 8006cf6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006cf8:	633a      	str	r2, [r7, #48]	; 0x30
 8006cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d00:	e841 2300 	strex	r3, r2, [r1]
 8006d04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1e5      	bne.n	8006cd8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2220      	movs	r2, #32
 8006d10:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d12e      	bne.n	8006d7e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	e853 3f00 	ldrex	r3, [r3]
 8006d32:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f023 0310 	bic.w	r3, r3, #16
 8006d3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	461a      	mov	r2, r3
 8006d42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d44:	61fb      	str	r3, [r7, #28]
 8006d46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d48:	69b9      	ldr	r1, [r7, #24]
 8006d4a:	69fa      	ldr	r2, [r7, #28]
 8006d4c:	e841 2300 	strex	r3, r2, [r1]
 8006d50:	617b      	str	r3, [r7, #20]
   return(result);
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1e6      	bne.n	8006d26 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	69db      	ldr	r3, [r3, #28]
 8006d5e:	f003 0310 	and.w	r3, r3, #16
 8006d62:	2b10      	cmp	r3, #16
 8006d64:	d103      	bne.n	8006d6e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2210      	movs	r2, #16
 8006d6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d74:	4619      	mov	r1, r3
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7ff fa84 	bl	8006284 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d7c:	e00b      	b.n	8006d96 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f7f9 fc54 	bl	800062c <HAL_UART_RxCpltCallback>
}
 8006d84:	e007      	b.n	8006d96 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	699a      	ldr	r2, [r3, #24]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f042 0208 	orr.w	r2, r2, #8
 8006d94:	619a      	str	r2, [r3, #24]
}
 8006d96:	bf00      	nop
 8006d98:	3758      	adds	r7, #88	; 0x58
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b096      	sub	sp, #88	; 0x58
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006dac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006db4:	2b22      	cmp	r3, #34	; 0x22
 8006db6:	f040 8094 	bne.w	8006ee2 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006dc0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006dca:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006dce:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dd8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dde:	1c9a      	adds	r2, r3, #2
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	3b01      	subs	r3, #1
 8006dee:	b29a      	uxth	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d177      	bne.n	8006ef2 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e0a:	e853 3f00 	ldrex	r3, [r3]
 8006e0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e20:	643b      	str	r3, [r7, #64]	; 0x40
 8006e22:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e28:	e841 2300 	strex	r3, r2, [r1]
 8006e2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1e6      	bne.n	8006e02 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	3308      	adds	r3, #8
 8006e3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3c:	6a3b      	ldr	r3, [r7, #32]
 8006e3e:	e853 3f00 	ldrex	r3, [r3]
 8006e42:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	f023 0301 	bic.w	r3, r3, #1
 8006e4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	3308      	adds	r3, #8
 8006e52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e5c:	e841 2300 	strex	r3, r2, [r1]
 8006e60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d1e5      	bne.n	8006e34 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2220      	movs	r2, #32
 8006e6c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d12e      	bne.n	8006eda <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	e853 3f00 	ldrex	r3, [r3]
 8006e8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	f023 0310 	bic.w	r3, r3, #16
 8006e96:	647b      	str	r3, [r7, #68]	; 0x44
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ea0:	61bb      	str	r3, [r7, #24]
 8006ea2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea4:	6979      	ldr	r1, [r7, #20]
 8006ea6:	69ba      	ldr	r2, [r7, #24]
 8006ea8:	e841 2300 	strex	r3, r2, [r1]
 8006eac:	613b      	str	r3, [r7, #16]
   return(result);
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d1e6      	bne.n	8006e82 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	f003 0310 	and.w	r3, r3, #16
 8006ebe:	2b10      	cmp	r3, #16
 8006ec0:	d103      	bne.n	8006eca <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2210      	movs	r2, #16
 8006ec8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f7ff f9d6 	bl	8006284 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ed8:	e00b      	b.n	8006ef2 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f7f9 fba6 	bl	800062c <HAL_UART_RxCpltCallback>
}
 8006ee0:	e007      	b.n	8006ef2 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	699a      	ldr	r2, [r3, #24]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f042 0208 	orr.w	r2, r2, #8
 8006ef0:	619a      	str	r2, [r3, #24]
}
 8006ef2:	bf00      	nop
 8006ef4:	3758      	adds	r7, #88	; 0x58
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006efa:	b480      	push	{r7}
 8006efc:	b083      	sub	sp, #12
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006f02:	bf00      	nop
 8006f04:	370c      	adds	r7, #12
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
	...

08006f10 <__libc_init_array>:
 8006f10:	b570      	push	{r4, r5, r6, lr}
 8006f12:	4e0d      	ldr	r6, [pc, #52]	; (8006f48 <__libc_init_array+0x38>)
 8006f14:	4c0d      	ldr	r4, [pc, #52]	; (8006f4c <__libc_init_array+0x3c>)
 8006f16:	1ba4      	subs	r4, r4, r6
 8006f18:	10a4      	asrs	r4, r4, #2
 8006f1a:	2500      	movs	r5, #0
 8006f1c:	42a5      	cmp	r5, r4
 8006f1e:	d109      	bne.n	8006f34 <__libc_init_array+0x24>
 8006f20:	4e0b      	ldr	r6, [pc, #44]	; (8006f50 <__libc_init_array+0x40>)
 8006f22:	4c0c      	ldr	r4, [pc, #48]	; (8006f54 <__libc_init_array+0x44>)
 8006f24:	f000 f820 	bl	8006f68 <_init>
 8006f28:	1ba4      	subs	r4, r4, r6
 8006f2a:	10a4      	asrs	r4, r4, #2
 8006f2c:	2500      	movs	r5, #0
 8006f2e:	42a5      	cmp	r5, r4
 8006f30:	d105      	bne.n	8006f3e <__libc_init_array+0x2e>
 8006f32:	bd70      	pop	{r4, r5, r6, pc}
 8006f34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f38:	4798      	blx	r3
 8006f3a:	3501      	adds	r5, #1
 8006f3c:	e7ee      	b.n	8006f1c <__libc_init_array+0xc>
 8006f3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f42:	4798      	blx	r3
 8006f44:	3501      	adds	r5, #1
 8006f46:	e7f2      	b.n	8006f2e <__libc_init_array+0x1e>
 8006f48:	08007024 	.word	0x08007024
 8006f4c:	08007024 	.word	0x08007024
 8006f50:	08007024 	.word	0x08007024
 8006f54:	08007028 	.word	0x08007028

08006f58 <memset>:
 8006f58:	4402      	add	r2, r0
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d100      	bne.n	8006f62 <memset+0xa>
 8006f60:	4770      	bx	lr
 8006f62:	f803 1b01 	strb.w	r1, [r3], #1
 8006f66:	e7f9      	b.n	8006f5c <memset+0x4>

08006f68 <_init>:
 8006f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f6a:	bf00      	nop
 8006f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f6e:	bc08      	pop	{r3}
 8006f70:	469e      	mov	lr, r3
 8006f72:	4770      	bx	lr

08006f74 <_fini>:
 8006f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f76:	bf00      	nop
 8006f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f7a:	bc08      	pop	{r3}
 8006f7c:	469e      	mov	lr, r3
 8006f7e:	4770      	bx	lr
