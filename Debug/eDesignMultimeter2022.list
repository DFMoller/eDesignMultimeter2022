
eDesignMultimeter2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f30  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080060d0  080060d0  000160d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006144  08006144  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08006144  08006144  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006144  08006144  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006144  08006144  00016144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006148  08006148  00016148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800614c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000080  080061cc  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  080061cc  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f5d  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000216e  00000000  00000000  0003300d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e90  00000000  00000000  00035180  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000db8  00000000  00000000  00036010  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021e2c  00000000  00000000  00036dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e8ed  00000000  00000000  00058bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3c4f  00000000  00000000  000674e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013b130  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004078  00000000  00000000  0013b1ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080060b8 	.word	0x080060b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	080060b8 	.word	0x080060b8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <HAL_UART_RxCpltCallback>:
uint8_t btn_up_flag = 0;
uint8_t btn_left_flag = 0;
uint8_t btn_down_flag = 0;
uint8_t adc_timer_flag = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	echo_flag = 1;
 8000298:	4b04      	ldr	r3, [pc, #16]	; (80002ac <HAL_UART_RxCpltCallback+0x1c>)
 800029a:	2201      	movs	r2, #1
 800029c:	701a      	strb	r2, [r3, #0]
}
 800029e:	bf00      	nop
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	2000009c 	.word	0x2000009c

080002b0 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == btn_mid_Pin)
 80002ba:	88fb      	ldrh	r3, [r7, #6]
 80002bc:	2b40      	cmp	r3, #64	; 0x40
 80002be:	d103      	bne.n	80002c8 <HAL_GPIO_EXTI_Callback+0x18>
	{
		btn_mid_flag = 1;
 80002c0:	4b13      	ldr	r3, [pc, #76]	; (8000310 <HAL_GPIO_EXTI_Callback+0x60>)
 80002c2:	2201      	movs	r2, #1
 80002c4:	701a      	strb	r2, [r3, #0]
	}
	else if(GPIO_Pin == btn_down_Pin)
	{
		btn_down_flag = 1;
	}
}
 80002c6:	e01d      	b.n	8000304 <HAL_GPIO_EXTI_Callback+0x54>
	else if(GPIO_Pin == btn_right_Pin)
 80002c8:	88fb      	ldrh	r3, [r7, #6]
 80002ca:	2b80      	cmp	r3, #128	; 0x80
 80002cc:	d103      	bne.n	80002d6 <HAL_GPIO_EXTI_Callback+0x26>
		btn_right_flag = 1;
 80002ce:	4b11      	ldr	r3, [pc, #68]	; (8000314 <HAL_GPIO_EXTI_Callback+0x64>)
 80002d0:	2201      	movs	r2, #1
 80002d2:	701a      	strb	r2, [r3, #0]
}
 80002d4:	e016      	b.n	8000304 <HAL_GPIO_EXTI_Callback+0x54>
	else if(GPIO_Pin == btn_up_Pin)
 80002d6:	88fb      	ldrh	r3, [r7, #6]
 80002d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80002dc:	d103      	bne.n	80002e6 <HAL_GPIO_EXTI_Callback+0x36>
		btn_up_flag = 1;
 80002de:	4b0e      	ldr	r3, [pc, #56]	; (8000318 <HAL_GPIO_EXTI_Callback+0x68>)
 80002e0:	2201      	movs	r2, #1
 80002e2:	701a      	strb	r2, [r3, #0]
}
 80002e4:	e00e      	b.n	8000304 <HAL_GPIO_EXTI_Callback+0x54>
	else if(GPIO_Pin == btn_left_Pin)
 80002e6:	88fb      	ldrh	r3, [r7, #6]
 80002e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002ec:	d103      	bne.n	80002f6 <HAL_GPIO_EXTI_Callback+0x46>
		btn_left_flag = 1;
 80002ee:	4b0b      	ldr	r3, [pc, #44]	; (800031c <HAL_GPIO_EXTI_Callback+0x6c>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	701a      	strb	r2, [r3, #0]
}
 80002f4:	e006      	b.n	8000304 <HAL_GPIO_EXTI_Callback+0x54>
	else if(GPIO_Pin == btn_down_Pin)
 80002f6:	88fb      	ldrh	r3, [r7, #6]
 80002f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80002fc:	d102      	bne.n	8000304 <HAL_GPIO_EXTI_Callback+0x54>
		btn_down_flag = 1;
 80002fe:	4b08      	ldr	r3, [pc, #32]	; (8000320 <HAL_GPIO_EXTI_Callback+0x70>)
 8000300:	2201      	movs	r2, #1
 8000302:	701a      	strb	r2, [r3, #0]
}
 8000304:	bf00      	nop
 8000306:	370c      	adds	r7, #12
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr
 8000310:	2000009d 	.word	0x2000009d
 8000314:	2000009e 	.word	0x2000009e
 8000318:	2000009f 	.word	0x2000009f
 800031c:	200000a0 	.word	0x200000a0
 8000320:	200000a1 	.word	0x200000a1

08000324 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b086      	sub	sp, #24
 8000328:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800032a:	f000 fc57 	bl	8000bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800032e:	f000 f8bb 	bl	80004a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000332:	f000 f9e5 	bl	8000700 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000336:	f000 f9b3 	bl	80006a0 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 800033a:	f000 f98b 	bl	8000654 <MX_TIM16_Init>
  MX_ADC1_Init();
 800033e:	f000 f919 	bl	8000574 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, myTxData, 13, 10);
 8000342:	230a      	movs	r3, #10
 8000344:	220d      	movs	r2, #13
 8000346:	4949      	ldr	r1, [pc, #292]	; (800046c <main+0x148>)
 8000348:	4849      	ldr	r0, [pc, #292]	; (8000470 <main+0x14c>)
 800034a:	f004 f861 	bl	8004410 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, myRxData, 1);
 800034e:	2201      	movs	r2, #1
 8000350:	4948      	ldr	r1, [pc, #288]	; (8000474 <main+0x150>)
 8000352:	4847      	ldr	r0, [pc, #284]	; (8000470 <main+0x14c>)
 8000354:	f004 f8f0 	bl	8004538 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 8000358:	4847      	ldr	r0, [pc, #284]	; (8000478 <main+0x154>)
 800035a:	f003 fd97 	bl	8003e8c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(echo_flag)
 800035e:	4b47      	ldr	r3, [pc, #284]	; (800047c <main+0x158>)
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d00d      	beq.n	8000382 <main+0x5e>
	  {
		HAL_UART_Transmit(&huart2, myRxData, 1, 10);
 8000366:	230a      	movs	r3, #10
 8000368:	2201      	movs	r2, #1
 800036a:	4942      	ldr	r1, [pc, #264]	; (8000474 <main+0x150>)
 800036c:	4840      	ldr	r0, [pc, #256]	; (8000470 <main+0x14c>)
 800036e:	f004 f84f 	bl	8004410 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, myRxData, 1);
 8000372:	2201      	movs	r2, #1
 8000374:	493f      	ldr	r1, [pc, #252]	; (8000474 <main+0x150>)
 8000376:	483e      	ldr	r0, [pc, #248]	; (8000470 <main+0x14c>)
 8000378:	f004 f8de 	bl	8004538 <HAL_UART_Receive_IT>
		echo_flag = 0;
 800037c:	4b3f      	ldr	r3, [pc, #252]	; (800047c <main+0x158>)
 800037e:	2200      	movs	r2, #0
 8000380:	701a      	strb	r2, [r3, #0]
	  }
	  if(btn_up_flag)
 8000382:	4b3f      	ldr	r3, [pc, #252]	; (8000480 <main+0x15c>)
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d008      	beq.n	800039c <main+0x78>
	  {
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800038a:	2120      	movs	r1, #32
 800038c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000390:	f002 f988 	bl	80026a4 <HAL_GPIO_TogglePin>
		  btn_up_flag = 0;
 8000394:	4b3a      	ldr	r3, [pc, #232]	; (8000480 <main+0x15c>)
 8000396:	2200      	movs	r2, #0
 8000398:	701a      	strb	r2, [r3, #0]
 800039a:	e02e      	b.n	80003fa <main+0xd6>
	  }
	  else if(btn_left_flag)
 800039c:	4b39      	ldr	r3, [pc, #228]	; (8000484 <main+0x160>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d007      	beq.n	80003b4 <main+0x90>
	  {
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80003a4:	2180      	movs	r1, #128	; 0x80
 80003a6:	4838      	ldr	r0, [pc, #224]	; (8000488 <main+0x164>)
 80003a8:	f002 f97c 	bl	80026a4 <HAL_GPIO_TogglePin>
		  btn_left_flag = 0;
 80003ac:	4b35      	ldr	r3, [pc, #212]	; (8000484 <main+0x160>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	701a      	strb	r2, [r3, #0]
 80003b2:	e022      	b.n	80003fa <main+0xd6>
	  }
	  else if(btn_down_flag)
 80003b4:	4b35      	ldr	r3, [pc, #212]	; (800048c <main+0x168>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d009      	beq.n	80003d0 <main+0xac>
	  {
		  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80003bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003c4:	f002 f96e 	bl	80026a4 <HAL_GPIO_TogglePin>
		  btn_down_flag = 0;
 80003c8:	4b30      	ldr	r3, [pc, #192]	; (800048c <main+0x168>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	701a      	strb	r2, [r3, #0]
 80003ce:	e014      	b.n	80003fa <main+0xd6>
	  }
	  else if(btn_right_flag)
 80003d0:	4b2f      	ldr	r3, [pc, #188]	; (8000490 <main+0x16c>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d009      	beq.n	80003ec <main+0xc8>
	  {
		  HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 80003d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003e0:	f002 f960 	bl	80026a4 <HAL_GPIO_TogglePin>
		  btn_right_flag = 0;
 80003e4:	4b2a      	ldr	r3, [pc, #168]	; (8000490 <main+0x16c>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	701a      	strb	r2, [r3, #0]
 80003ea:	e006      	b.n	80003fa <main+0xd6>
	  }
	  else if(btn_mid_flag)
 80003ec:	4b29      	ldr	r3, [pc, #164]	; (8000494 <main+0x170>)
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d002      	beq.n	80003fa <main+0xd6>
	  {
		  btn_mid_flag = 0;
 80003f4:	4b27      	ldr	r3, [pc, #156]	; (8000494 <main+0x170>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	701a      	strb	r2, [r3, #0]
	  }

	  // ADC TIM16 interrupt
	  if(adc_timer_flag)
 80003fa:	4b27      	ldr	r3, [pc, #156]	; (8000498 <main+0x174>)
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d030      	beq.n	8000464 <main+0x140>
	  {
		  HAL_ADC_Start(&hadc1);
 8000402:	4826      	ldr	r0, [pc, #152]	; (800049c <main+0x178>)
 8000404:	f000 fe6c 	bl	80010e0 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000408:	f04f 31ff 	mov.w	r1, #4294967295
 800040c:	4823      	ldr	r0, [pc, #140]	; (800049c <main+0x178>)
 800040e:	f000 ffb3 	bl	8001378 <HAL_ADC_PollForConversion>
		  raw = HAL_ADC_GetValue(&hadc1);
 8000412:	4822      	ldr	r0, [pc, #136]	; (800049c <main+0x178>)
 8000414:	f001 f8b2 	bl	800157c <HAL_ADC_GetValue>
 8000418:	4603      	mov	r3, r0
 800041a:	82fb      	strh	r3, [r7, #22]
		  HAL_ADC_Stop(&hadc1);
 800041c:	481f      	ldr	r0, [pc, #124]	; (800049c <main+0x178>)
 800041e:	f000 ff75 	bl	800130c <HAL_ADC_Stop>
		  millivolts = raw*3300/4095;
 8000422:	8afb      	ldrh	r3, [r7, #22]
 8000424:	f640 42e4 	movw	r2, #3300	; 0xce4
 8000428:	fb02 f303 	mul.w	r3, r2, r3
 800042c:	4a1c      	ldr	r2, [pc, #112]	; (80004a0 <main+0x17c>)
 800042e:	fb82 1203 	smull	r1, r2, r2, r3
 8000432:	441a      	add	r2, r3
 8000434:	12d2      	asrs	r2, r2, #11
 8000436:	17db      	asrs	r3, r3, #31
 8000438:	1ad3      	subs	r3, r2, r3
 800043a:	613b      	str	r3, [r7, #16]
		  sprintf(msg, "%lu\n", millivolts);
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	693a      	ldr	r2, [r7, #16]
 8000440:	4918      	ldr	r1, [pc, #96]	; (80004a4 <main+0x180>)
 8000442:	4618      	mov	r0, r3
 8000444:	f005 fa32 	bl	80058ac <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 10);
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff fec8 	bl	80001e0 <strlen>
 8000450:	4603      	mov	r3, r0
 8000452:	b29a      	uxth	r2, r3
 8000454:	1d39      	adds	r1, r7, #4
 8000456:	230a      	movs	r3, #10
 8000458:	4805      	ldr	r0, [pc, #20]	; (8000470 <main+0x14c>)
 800045a:	f003 ffd9 	bl	8004410 <HAL_UART_Transmit>
		  adc_timer_flag = 0;
 800045e:	4b0e      	ldr	r3, [pc, #56]	; (8000498 <main+0x174>)
 8000460:	2200      	movs	r2, #0
 8000462:	701a      	strb	r2, [r3, #0]
	  }

	  HAL_Delay(1);
 8000464:	2001      	movs	r0, #1
 8000466:	f000 fc1f 	bl	8000ca8 <HAL_Delay>
	  if(echo_flag)
 800046a:	e778      	b.n	800035e <main+0x3a>
 800046c:	20000000 	.word	0x20000000
 8000470:	20000104 	.word	0x20000104
 8000474:	200000b0 	.word	0x200000b0
 8000478:	20000188 	.word	0x20000188
 800047c:	2000009c 	.word	0x2000009c
 8000480:	2000009f 	.word	0x2000009f
 8000484:	200000a0 	.word	0x200000a0
 8000488:	48000800 	.word	0x48000800
 800048c:	200000a1 	.word	0x200000a1
 8000490:	2000009e 	.word	0x2000009e
 8000494:	2000009d 	.word	0x2000009d
 8000498:	200000a2 	.word	0x200000a2
 800049c:	200000b4 	.word	0x200000b4
 80004a0:	80080081 	.word	0x80080081
 80004a4:	080060d0 	.word	0x080060d0

080004a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b0a6      	sub	sp, #152	; 0x98
 80004ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80004b2:	2228      	movs	r2, #40	; 0x28
 80004b4:	2100      	movs	r1, #0
 80004b6:	4618      	mov	r0, r3
 80004b8:	f005 f9f0 	bl	800589c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
 80004c8:	60da      	str	r2, [r3, #12]
 80004ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	2258      	movs	r2, #88	; 0x58
 80004d0:	2100      	movs	r1, #0
 80004d2:	4618      	mov	r0, r3
 80004d4:	f005 f9e2 	bl	800589c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004d8:	2302      	movs	r3, #2
 80004da:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004dc:	2301      	movs	r3, #1
 80004de:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004e0:	2310      	movs	r3, #16
 80004e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004e6:	2302      	movs	r3, #2
 80004e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004f4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80004fc:	2300      	movs	r3, #0
 80004fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000502:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000506:	4618      	mov	r0, r3
 8000508:	f002 f8fe 	bl	8002708 <HAL_RCC_OscConfig>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000512:	f000 f9c3 	bl	800089c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000516:	230f      	movs	r3, #15
 8000518:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800051a:	2302      	movs	r3, #2
 800051c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800051e:	2300      	movs	r3, #0
 8000520:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000526:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000528:	2300      	movs	r3, #0
 800052a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800052c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000530:	2102      	movs	r1, #2
 8000532:	4618      	mov	r0, r3
 8000534:	f002 fffe 	bl	8003534 <HAL_RCC_ClockConfig>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800053e:	f000 f9ad 	bl	800089c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM16
 8000542:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <SystemClock_Config+0xc8>)
 8000544:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000546:	2300      	movs	r3, #0
 8000548:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800054a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800054e:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8000550:	2300      	movs	r3, #0
 8000552:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	4618      	mov	r0, r3
 8000558:	f003 fa22 	bl	80039a0 <HAL_RCCEx_PeriphCLKConfig>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000562:	f000 f99b 	bl	800089c <Error_Handler>
  }
}
 8000566:	bf00      	nop
 8000568:	3798      	adds	r7, #152	; 0x98
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	00800082 	.word	0x00800082

08000574 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08a      	sub	sp, #40	; 0x28
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800057a:	f107 031c 	add.w	r3, r7, #28
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]
 8000594:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000596:	4b2e      	ldr	r3, [pc, #184]	; (8000650 <MX_ADC1_Init+0xdc>)
 8000598:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800059c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800059e:	4b2c      	ldr	r3, [pc, #176]	; (8000650 <MX_ADC1_Init+0xdc>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005a4:	4b2a      	ldr	r3, [pc, #168]	; (8000650 <MX_ADC1_Init+0xdc>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005aa:	4b29      	ldr	r3, [pc, #164]	; (8000650 <MX_ADC1_Init+0xdc>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005b0:	4b27      	ldr	r3, [pc, #156]	; (8000650 <MX_ADC1_Init+0xdc>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005b6:	4b26      	ldr	r3, [pc, #152]	; (8000650 <MX_ADC1_Init+0xdc>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005be:	4b24      	ldr	r3, [pc, #144]	; (8000650 <MX_ADC1_Init+0xdc>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005c4:	4b22      	ldr	r3, [pc, #136]	; (8000650 <MX_ADC1_Init+0xdc>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ca:	4b21      	ldr	r3, [pc, #132]	; (8000650 <MX_ADC1_Init+0xdc>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005d0:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <MX_ADC1_Init+0xdc>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005d6:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <MX_ADC1_Init+0xdc>)
 80005d8:	2200      	movs	r2, #0
 80005da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005de:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <MX_ADC1_Init+0xdc>)
 80005e0:	2204      	movs	r2, #4
 80005e2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005e4:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <MX_ADC1_Init+0xdc>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80005ea:	4b19      	ldr	r3, [pc, #100]	; (8000650 <MX_ADC1_Init+0xdc>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005f0:	4817      	ldr	r0, [pc, #92]	; (8000650 <MX_ADC1_Init+0xdc>)
 80005f2:	f000 fb7b 	bl	8000cec <HAL_ADC_Init>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80005fc:	f000 f94e 	bl	800089c <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000604:	f107 031c 	add.w	r3, r7, #28
 8000608:	4619      	mov	r1, r3
 800060a:	4811      	ldr	r0, [pc, #68]	; (8000650 <MX_ADC1_Init+0xdc>)
 800060c:	f001 fab0 	bl	8001b70 <HAL_ADCEx_MultiModeConfigChannel>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000616:	f000 f941 	bl	800089c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800061a:	2301      	movs	r3, #1
 800061c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800061e:	2301      	movs	r3, #1
 8000620:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000622:	2300      	movs	r3, #0
 8000624:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	4619      	mov	r1, r3
 8000636:	4806      	ldr	r0, [pc, #24]	; (8000650 <MX_ADC1_Init+0xdc>)
 8000638:	f000 ffae 	bl	8001598 <HAL_ADC_ConfigChannel>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000642:	f000 f92b 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000646:	bf00      	nop
 8000648:	3728      	adds	r7, #40	; 0x28
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	200000b4 	.word	0x200000b4

08000654 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000658:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <MX_TIM16_Init+0x44>)
 800065a:	4a10      	ldr	r2, [pc, #64]	; (800069c <MX_TIM16_Init+0x48>)
 800065c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 72-1;
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_TIM16_Init+0x44>)
 8000660:	2247      	movs	r2, #71	; 0x47
 8000662:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_TIM16_Init+0x44>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000 - 1;
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <MX_TIM16_Init+0x44>)
 800066c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000670:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_TIM16_Init+0x44>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000678:	4b07      	ldr	r3, [pc, #28]	; (8000698 <MX_TIM16_Init+0x44>)
 800067a:	2200      	movs	r2, #0
 800067c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_TIM16_Init+0x44>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000684:	4804      	ldr	r0, [pc, #16]	; (8000698 <MX_TIM16_Init+0x44>)
 8000686:	f003 fba9 	bl	8003ddc <HAL_TIM_Base_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000690:	f000 f904 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000188 	.word	0x20000188
 800069c:	40014400 	.word	0x40014400

080006a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a4:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006a6:	4a15      	ldr	r2, [pc, #84]	; (80006fc <MX_USART2_UART_Init+0x5c>)
 80006a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006de:	2200      	movs	r2, #0
 80006e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006e4:	f003 fe46 	bl	8004374 <HAL_UART_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006ee:	f000 f8d5 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000104 	.word	0x20000104
 80006fc:	40004400 	.word	0x40004400

08000700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	; 0x28
 8000704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	4b53      	ldr	r3, [pc, #332]	; (8000864 <MX_GPIO_Init+0x164>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	4a52      	ldr	r2, [pc, #328]	; (8000864 <MX_GPIO_Init+0x164>)
 800071c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000720:	6153      	str	r3, [r2, #20]
 8000722:	4b50      	ldr	r3, [pc, #320]	; (8000864 <MX_GPIO_Init+0x164>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800072a:	613b      	str	r3, [r7, #16]
 800072c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800072e:	4b4d      	ldr	r3, [pc, #308]	; (8000864 <MX_GPIO_Init+0x164>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	4a4c      	ldr	r2, [pc, #304]	; (8000864 <MX_GPIO_Init+0x164>)
 8000734:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000738:	6153      	str	r3, [r2, #20]
 800073a:	4b4a      	ldr	r3, [pc, #296]	; (8000864 <MX_GPIO_Init+0x164>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	4b47      	ldr	r3, [pc, #284]	; (8000864 <MX_GPIO_Init+0x164>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	4a46      	ldr	r2, [pc, #280]	; (8000864 <MX_GPIO_Init+0x164>)
 800074c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000750:	6153      	str	r3, [r2, #20]
 8000752:	4b44      	ldr	r3, [pc, #272]	; (8000864 <MX_GPIO_Init+0x164>)
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	4b41      	ldr	r3, [pc, #260]	; (8000864 <MX_GPIO_Init+0x164>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	4a40      	ldr	r2, [pc, #256]	; (8000864 <MX_GPIO_Init+0x164>)
 8000764:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000768:	6153      	str	r3, [r2, #20]
 800076a:	4b3e      	ldr	r3, [pc, #248]	; (8000864 <MX_GPIO_Init+0x164>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD5_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 800077c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000780:	f001 ff78 	bl	8002674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|LD3_Pin, GPIO_PIN_RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	2190      	movs	r1, #144	; 0x90
 8000788:	4837      	ldr	r0, [pc, #220]	; (8000868 <MX_GPIO_Init+0x168>)
 800078a:	f001 ff73 	bl	8002674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800078e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000794:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	4619      	mov	r1, r3
 80007a4:	4830      	ldr	r0, [pc, #192]	; (8000868 <MX_GPIO_Init+0x168>)
 80007a6:	f001 fddb 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD5_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD5_Pin|LD4_Pin;
 80007aa:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 80007ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c6:	f001 fdcb 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_mid_Pin */
  GPIO_InitStruct.Pin = btn_mid_Pin;
 80007ca:	2340      	movs	r3, #64	; 0x40
 80007cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80007ce:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80007d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007d4:	2301      	movs	r3, #1
 80007d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn_mid_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4619      	mov	r1, r3
 80007de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e2:	f001 fdbd 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_right_Pin */
  GPIO_InitStruct.Pin = btn_right_Pin;
 80007e6:	2380      	movs	r3, #128	; 0x80
 80007e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f0:	2301      	movs	r3, #1
 80007f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn_right_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fe:	f001 fdaf 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD3_Pin;
 8000802:	2390      	movs	r3, #144	; 0x90
 8000804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	4619      	mov	r1, r3
 8000818:	4813      	ldr	r0, [pc, #76]	; (8000868 <MX_GPIO_Init+0x168>)
 800081a:	f001 fda1 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : btn_down_Pin btn_left_Pin btn_up_Pin */
  GPIO_InitStruct.Pin = btn_down_Pin|btn_left_Pin|btn_up_Pin;
 800081e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000824:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800082a:	2301      	movs	r3, #1
 800082c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	4619      	mov	r1, r3
 8000834:	480d      	ldr	r0, [pc, #52]	; (800086c <MX_GPIO_Init+0x16c>)
 8000836:	f001 fd93 	bl	8002360 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	2100      	movs	r1, #0
 800083e:	2017      	movs	r0, #23
 8000840:	f001 fce1 	bl	8002206 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000844:	2017      	movs	r0, #23
 8000846:	f001 fcfa 	bl	800223e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2100      	movs	r1, #0
 800084e:	2028      	movs	r0, #40	; 0x28
 8000850:	f001 fcd9 	bl	8002206 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000854:	2028      	movs	r0, #40	; 0x28
 8000856:	f001 fcf2 	bl	800223e <HAL_NVIC_EnableIRQ>

}
 800085a:	bf00      	nop
 800085c:	3728      	adds	r7, #40	; 0x28
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40021000 	.word	0x40021000
 8000868:	48000800 	.word	0x48000800
 800086c:	48000400 	.word	0x48000400

08000870 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this interrupt
	if(htim == &htim16)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4a06      	ldr	r2, [pc, #24]	; (8000894 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d102      	bne.n	8000886 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		adc_timer_flag = 1;
 8000880:	4b05      	ldr	r3, [pc, #20]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000882:	2201      	movs	r2, #1
 8000884:	701a      	strb	r2, [r3, #0]
	}
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	20000188 	.word	0x20000188
 8000898:	200000a2 	.word	0x200000a2

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
	...

080008ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b2:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <HAL_MspInit+0x44>)
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	4a0e      	ldr	r2, [pc, #56]	; (80008f0 <HAL_MspInit+0x44>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6193      	str	r3, [r2, #24]
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <HAL_MspInit+0x44>)
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <HAL_MspInit+0x44>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	4a08      	ldr	r2, [pc, #32]	; (80008f0 <HAL_MspInit+0x44>)
 80008d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d4:	61d3      	str	r3, [r2, #28]
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <HAL_MspInit+0x44>)
 80008d8:	69db      	ldr	r3, [r3, #28]
 80008da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008e2:	2007      	movs	r0, #7
 80008e4:	f001 fc84 	bl	80021f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40021000 	.word	0x40021000

080008f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08a      	sub	sp, #40	; 0x28
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000914:	d124      	bne.n	8000960 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <HAL_ADC_MspInit+0x74>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	4a13      	ldr	r2, [pc, #76]	; (8000968 <HAL_ADC_MspInit+0x74>)
 800091c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000920:	6153      	str	r3, [r2, #20]
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <HAL_ADC_MspInit+0x74>)
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <HAL_ADC_MspInit+0x74>)
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	4a0d      	ldr	r2, [pc, #52]	; (8000968 <HAL_ADC_MspInit+0x74>)
 8000934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000938:	6153      	str	r3, [r2, #20]
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <HAL_ADC_MspInit+0x74>)
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000946:	2301      	movs	r3, #1
 8000948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800094a:	2303      	movs	r3, #3
 800094c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800095c:	f001 fd00 	bl	8002360 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000960:	bf00      	nop
 8000962:	3728      	adds	r7, #40	; 0x28
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40021000 	.word	0x40021000

0800096c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a0d      	ldr	r2, [pc, #52]	; (80009b0 <HAL_TIM_Base_MspInit+0x44>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d113      	bne.n	80009a6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800097e:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <HAL_TIM_Base_MspInit+0x48>)
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	4a0c      	ldr	r2, [pc, #48]	; (80009b4 <HAL_TIM_Base_MspInit+0x48>)
 8000984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000988:	6193      	str	r3, [r2, #24]
 800098a:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <HAL_TIM_Base_MspInit+0x48>)
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2100      	movs	r1, #0
 800099a:	2019      	movs	r0, #25
 800099c:	f001 fc33 	bl	8002206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80009a0:	2019      	movs	r0, #25
 80009a2:	f001 fc4c 	bl	800223e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80009a6:	bf00      	nop
 80009a8:	3710      	adds	r7, #16
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40014400 	.word	0x40014400
 80009b4:	40021000 	.word	0x40021000

080009b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	; 0x28
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a1b      	ldr	r2, [pc, #108]	; (8000a44 <HAL_UART_MspInit+0x8c>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d130      	bne.n	8000a3c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009da:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <HAL_UART_MspInit+0x90>)
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	4a1a      	ldr	r2, [pc, #104]	; (8000a48 <HAL_UART_MspInit+0x90>)
 80009e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e4:	61d3      	str	r3, [r2, #28]
 80009e6:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <HAL_UART_MspInit+0x90>)
 80009e8:	69db      	ldr	r3, [r3, #28]
 80009ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <HAL_UART_MspInit+0x90>)
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	4a14      	ldr	r2, [pc, #80]	; (8000a48 <HAL_UART_MspInit+0x90>)
 80009f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009fc:	6153      	str	r3, [r2, #20]
 80009fe:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <HAL_UART_MspInit+0x90>)
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a0a:	230c      	movs	r3, #12
 8000a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a1a:	2307      	movs	r3, #7
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a28:	f001 fc9a 	bl	8002360 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2100      	movs	r1, #0
 8000a30:	2026      	movs	r0, #38	; 0x26
 8000a32:	f001 fbe8 	bl	8002206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a36:	2026      	movs	r0, #38	; 0x26
 8000a38:	f001 fc01 	bl	800223e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a3c:	bf00      	nop
 8000a3e:	3728      	adds	r7, #40	; 0x28
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40004400 	.word	0x40004400
 8000a48:	40021000 	.word	0x40021000

08000a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <HardFault_Handler+0x4>

08000a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <MemManage_Handler+0x4>

08000a66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <BusFault_Handler+0x4>

08000a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <UsageFault_Handler+0x4>

08000a72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa0:	f000 f8e2 	bl	8000c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000aac:	2040      	movs	r0, #64	; 0x40
 8000aae:	f001 fe13 	bl	80026d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000ab2:	2080      	movs	r0, #128	; 0x80
 8000ab4:	f001 fe10 	bl	80026d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000ab8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000abc:	f001 fe0c 	bl	80026d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000ac0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ac4:	f001 fe08 	bl	80026d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}

08000acc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000ad0:	4802      	ldr	r0, [pc, #8]	; (8000adc <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000ad2:	f003 fa4b 	bl	8003f6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000188 	.word	0x20000188

08000ae0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ae4:	4802      	ldr	r0, [pc, #8]	; (8000af0 <USART2_IRQHandler+0x10>)
 8000ae6:	f003 fd75 	bl	80045d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000104 	.word	0x20000104

08000af4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000af8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000afc:	f001 fdec 	bl	80026d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000b00:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b04:	f001 fde8 	bl	80026d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <_sbrk+0x50>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d102      	bne.n	8000b22 <_sbrk+0x16>
		heap_end = &end;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <_sbrk+0x50>)
 8000b1e:	4a10      	ldr	r2, [pc, #64]	; (8000b60 <_sbrk+0x54>)
 8000b20:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <_sbrk+0x50>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <_sbrk+0x50>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4413      	add	r3, r2
 8000b30:	466a      	mov	r2, sp
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d907      	bls.n	8000b46 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000b36:	f004 fe87 	bl	8005848 <__errno>
 8000b3a:	4602      	mov	r2, r0
 8000b3c:	230c      	movs	r3, #12
 8000b3e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000b40:	f04f 33ff 	mov.w	r3, #4294967295
 8000b44:	e006      	b.n	8000b54 <_sbrk+0x48>
	}

	heap_end += incr;
 8000b46:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <_sbrk+0x50>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	4a03      	ldr	r2, [pc, #12]	; (8000b5c <_sbrk+0x50>)
 8000b50:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b52:	68fb      	ldr	r3, [r7, #12]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	200000a4 	.word	0x200000a4
 8000b60:	200001e0 	.word	0x200001e0

08000b64 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <SystemInit+0x20>)
 8000b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b6e:	4a05      	ldr	r2, [pc, #20]	; (8000b84 <SystemInit+0x20>)
 8000b70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b8c:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b8e:	490e      	ldr	r1, [pc, #56]	; (8000bc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b90:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <LoopForever+0xe>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b94:	e002      	b.n	8000b9c <LoopCopyDataInit>

08000b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9a:	3304      	adds	r3, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba0:	d3f9      	bcc.n	8000b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba2:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba4:	4c0b      	ldr	r4, [pc, #44]	; (8000bd4 <LoopForever+0x16>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba8:	e001      	b.n	8000bae <LoopFillZerobss>

08000baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bac:	3204      	adds	r2, #4

08000bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb0:	d3fb      	bcc.n	8000baa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bb2:	f7ff ffd7 	bl	8000b64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bb6:	f004 fe4d 	bl	8005854 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bba:	f7ff fbb3 	bl	8000324 <main>

08000bbe <LoopForever>:

LoopForever:
    b LoopForever
 8000bbe:	e7fe      	b.n	8000bbe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bc0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000bcc:	0800614c 	.word	0x0800614c
  ldr r2, =_sbss
 8000bd0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000bd4:	200001dc 	.word	0x200001dc

08000bd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC1_2_IRQHandler>
	...

08000bdc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <HAL_Init+0x28>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <HAL_Init+0x28>)
 8000be6:	f043 0310 	orr.w	r3, r3, #16
 8000bea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bec:	2003      	movs	r0, #3
 8000bee:	f001 faff 	bl	80021f0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f000 f808 	bl	8000c08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf8:	f7ff fe58 	bl	80008ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40022000 	.word	0x40022000

08000c08 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <HAL_InitTick+0x54>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <HAL_InitTick+0x58>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c26:	4618      	mov	r0, r3
 8000c28:	f001 fb17 	bl	800225a <HAL_SYSTICK_Config>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e00e      	b.n	8000c54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2b0f      	cmp	r3, #15
 8000c3a:	d80a      	bhi.n	8000c52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	f04f 30ff 	mov.w	r0, #4294967295
 8000c44:	f001 fadf 	bl	8002206 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c48:	4a06      	ldr	r2, [pc, #24]	; (8000c64 <HAL_InitTick+0x5c>)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e000      	b.n	8000c54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000010 	.word	0x20000010
 8000c60:	20000018 	.word	0x20000018
 8000c64:	20000014 	.word	0x20000014

08000c68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_IncTick+0x20>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_IncTick+0x24>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4413      	add	r3, r2
 8000c78:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <HAL_IncTick+0x24>)
 8000c7a:	6013      	str	r3, [r2, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	20000018 	.word	0x20000018
 8000c8c:	200001d4 	.word	0x200001d4

08000c90 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c94:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <HAL_GetTick+0x14>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	200001d4 	.word	0x200001d4

08000ca8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb0:	f7ff ffee 	bl	8000c90 <HAL_GetTick>
 8000cb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc0:	d005      	beq.n	8000cce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <HAL_Delay+0x40>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4413      	add	r3, r2
 8000ccc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000cce:	bf00      	nop
 8000cd0:	f7ff ffde 	bl	8000c90 <HAL_GetTick>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d8f7      	bhi.n	8000cd0 <HAL_Delay+0x28>
  {
  }
}
 8000ce0:	bf00      	nop
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000018 	.word	0x20000018

08000cec <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b09a      	sub	sp, #104	; 0x68
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d101      	bne.n	8000d0c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e1e3      	b.n	80010d4 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	691b      	ldr	r3, [r3, #16]
 8000d10:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	f003 0310 	and.w	r3, r3, #16
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d176      	bne.n	8000e0c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d152      	bne.n	8000dcc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f7ff fdd7 	bl	80008f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d13b      	bne.n	8000dcc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f001 f861 	bl	8001e1c <ADC_Disable>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d64:	f003 0310 	and.w	r3, r3, #16
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d12f      	bne.n	8000dcc <HAL_ADC_Init+0xe0>
 8000d6c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d12b      	bne.n	8000dcc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d78:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d7c:	f023 0302 	bic.w	r3, r3, #2
 8000d80:	f043 0202 	orr.w	r2, r3, #2
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	689a      	ldr	r2, [r3, #8]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000d96:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	689a      	ldr	r2, [r3, #8]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000da6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000da8:	4b92      	ldr	r3, [pc, #584]	; (8000ff4 <HAL_ADC_Init+0x308>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a92      	ldr	r2, [pc, #584]	; (8000ff8 <HAL_ADC_Init+0x30c>)
 8000dae:	fba2 2303 	umull	r2, r3, r2, r3
 8000db2:	0c9a      	lsrs	r2, r3, #18
 8000db4:	4613      	mov	r3, r2
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	4413      	add	r3, r2
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000dbe:	e002      	b.n	8000dc6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d1f9      	bne.n	8000dc0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d007      	beq.n	8000dea <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000de4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000de8:	d110      	bne.n	8000e0c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	f023 0312 	bic.w	r3, r3, #18
 8000df2:	f043 0210 	orr.w	r2, r3, #16
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	f043 0201 	orr.w	r2, r3, #1
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e10:	f003 0310 	and.w	r3, r3, #16
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	f040 8150 	bne.w	80010ba <HAL_ADC_Init+0x3ce>
 8000e1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 814b 	bne.w	80010ba <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8143 	bne.w	80010ba <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e38:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000e3c:	f043 0202 	orr.w	r2, r3, #2
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e4c:	d004      	beq.n	8000e58 <HAL_ADC_Init+0x16c>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a6a      	ldr	r2, [pc, #424]	; (8000ffc <HAL_ADC_Init+0x310>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d101      	bne.n	8000e5c <HAL_ADC_Init+0x170>
 8000e58:	4b69      	ldr	r3, [pc, #420]	; (8001000 <HAL_ADC_Init+0x314>)
 8000e5a:	e000      	b.n	8000e5e <HAL_ADC_Init+0x172>
 8000e5c:	4b69      	ldr	r3, [pc, #420]	; (8001004 <HAL_ADC_Init+0x318>)
 8000e5e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e68:	d102      	bne.n	8000e70 <HAL_ADC_Init+0x184>
 8000e6a:	4b64      	ldr	r3, [pc, #400]	; (8000ffc <HAL_ADC_Init+0x310>)
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	e01a      	b.n	8000ea6 <HAL_ADC_Init+0x1ba>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a61      	ldr	r2, [pc, #388]	; (8000ffc <HAL_ADC_Init+0x310>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d103      	bne.n	8000e82 <HAL_ADC_Init+0x196>
 8000e7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	e011      	b.n	8000ea6 <HAL_ADC_Init+0x1ba>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a60      	ldr	r2, [pc, #384]	; (8001008 <HAL_ADC_Init+0x31c>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d102      	bne.n	8000e92 <HAL_ADC_Init+0x1a6>
 8000e8c:	4b5f      	ldr	r3, [pc, #380]	; (800100c <HAL_ADC_Init+0x320>)
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	e009      	b.n	8000ea6 <HAL_ADC_Init+0x1ba>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a5d      	ldr	r2, [pc, #372]	; (800100c <HAL_ADC_Init+0x320>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d102      	bne.n	8000ea2 <HAL_ADC_Init+0x1b6>
 8000e9c:	4b5a      	ldr	r3, [pc, #360]	; (8001008 <HAL_ADC_Init+0x31c>)
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	e001      	b.n	8000ea6 <HAL_ADC_Init+0x1ba>
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	f003 0303 	and.w	r3, r3, #3
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d108      	bne.n	8000ec6 <HAL_ADC_Init+0x1da>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d101      	bne.n	8000ec6 <HAL_ADC_Init+0x1da>
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e000      	b.n	8000ec8 <HAL_ADC_Init+0x1dc>
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d11c      	bne.n	8000f06 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000ecc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d010      	beq.n	8000ef4 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d107      	bne.n	8000eee <HAL_ADC_Init+0x202>
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d101      	bne.n	8000eee <HAL_ADC_Init+0x202>
 8000eea:	2301      	movs	r3, #1
 8000eec:	e000      	b.n	8000ef0 <HAL_ADC_Init+0x204>
 8000eee:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d108      	bne.n	8000f06 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000ef4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	431a      	orrs	r2, r3
 8000f02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f04:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	7e5b      	ldrb	r3, [r3, #25]
 8000f0a:	035b      	lsls	r3, r3, #13
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000f10:	2a01      	cmp	r2, #1
 8000f12:	d002      	beq.n	8000f1a <HAL_ADC_Init+0x22e>
 8000f14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f18:	e000      	b.n	8000f1c <HAL_ADC_Init+0x230>
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	431a      	orrs	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	431a      	orrs	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d11b      	bne.n	8000f72 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	7e5b      	ldrb	r3, [r3, #25]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d109      	bne.n	8000f56 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f46:	3b01      	subs	r3, #1
 8000f48:	045a      	lsls	r2, r3, #17
 8000f4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f52:	663b      	str	r3, [r7, #96]	; 0x60
 8000f54:	e00d      	b.n	8000f72 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000f5e:	f043 0220 	orr.w	r2, r3, #32
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	f043 0201 	orr.w	r2, r3, #1
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d054      	beq.n	8001024 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a22      	ldr	r2, [pc, #136]	; (8001008 <HAL_ADC_Init+0x31c>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d004      	beq.n	8000f8e <HAL_ADC_Init+0x2a2>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a20      	ldr	r2, [pc, #128]	; (800100c <HAL_ADC_Init+0x320>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d140      	bne.n	8001010 <HAL_ADC_Init+0x324>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f92:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000f96:	d02a      	beq.n	8000fee <HAL_ADC_Init+0x302>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fa0:	d022      	beq.n	8000fe8 <HAL_ADC_Init+0x2fc>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa6:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000faa:	d01a      	beq.n	8000fe2 <HAL_ADC_Init+0x2f6>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb0:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8000fb4:	d012      	beq.n	8000fdc <HAL_ADC_Init+0x2f0>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fba:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8000fbe:	d00a      	beq.n	8000fd6 <HAL_ADC_Init+0x2ea>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc4:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8000fc8:	d002      	beq.n	8000fd0 <HAL_ADC_Init+0x2e4>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fce:	e023      	b.n	8001018 <HAL_ADC_Init+0x32c>
 8000fd0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000fd4:	e020      	b.n	8001018 <HAL_ADC_Init+0x32c>
 8000fd6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000fda:	e01d      	b.n	8001018 <HAL_ADC_Init+0x32c>
 8000fdc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000fe0:	e01a      	b.n	8001018 <HAL_ADC_Init+0x32c>
 8000fe2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fe6:	e017      	b.n	8001018 <HAL_ADC_Init+0x32c>
 8000fe8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000fec:	e014      	b.n	8001018 <HAL_ADC_Init+0x32c>
 8000fee:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000ff2:	e011      	b.n	8001018 <HAL_ADC_Init+0x32c>
 8000ff4:	20000010 	.word	0x20000010
 8000ff8:	431bde83 	.word	0x431bde83
 8000ffc:	50000100 	.word	0x50000100
 8001000:	50000300 	.word	0x50000300
 8001004:	50000700 	.word	0x50000700
 8001008:	50000400 	.word	0x50000400
 800100c:	50000500 	.word	0x50000500
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001014:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800101c:	4313      	orrs	r3, r2
 800101e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001020:	4313      	orrs	r3, r2
 8001022:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	f003 030c 	and.w	r3, r3, #12
 800102e:	2b00      	cmp	r3, #0
 8001030:	d114      	bne.n	800105c <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	6812      	ldr	r2, [r2, #0]
 800103c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001040:	f023 0302 	bic.w	r3, r3, #2
 8001044:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	7e1b      	ldrb	r3, [r3, #24]
 800104a:	039a      	lsls	r2, r3, #14
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	4313      	orrs	r3, r2
 8001056:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001058:	4313      	orrs	r3, r2
 800105a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	68da      	ldr	r2, [r3, #12]
 8001062:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <HAL_ADC_Init+0x3f0>)
 8001064:	4013      	ands	r3, r2
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	6812      	ldr	r2, [r2, #0]
 800106a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800106c:	430b      	orrs	r3, r1
 800106e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	691b      	ldr	r3, [r3, #16]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d10c      	bne.n	8001092 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f023 010f 	bic.w	r1, r3, #15
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	1e5a      	subs	r2, r3, #1
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	430a      	orrs	r2, r1
 800108e:	631a      	str	r2, [r3, #48]	; 0x30
 8001090:	e007      	b.n	80010a2 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f022 020f 	bic.w	r2, r2, #15
 80010a0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ac:	f023 0303 	bic.w	r3, r3, #3
 80010b0:	f043 0201 	orr.w	r2, r3, #1
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	641a      	str	r2, [r3, #64]	; 0x40
 80010b8:	e00a      	b.n	80010d0 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	f023 0312 	bic.w	r3, r3, #18
 80010c2:	f043 0210 	orr.w	r2, r3, #16
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80010ca:	2301      	movs	r3, #1
 80010cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80010d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3768      	adds	r7, #104	; 0x68
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	fff0c007 	.word	0xfff0c007

080010e0 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010e8:	2300      	movs	r3, #0
 80010ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f040 80f9 	bne.w	80012ee <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001102:	2b01      	cmp	r3, #1
 8001104:	d101      	bne.n	800110a <HAL_ADC_Start+0x2a>
 8001106:	2302      	movs	r3, #2
 8001108:	e0f4      	b.n	80012f4 <HAL_ADC_Start+0x214>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2201      	movs	r2, #1
 800110e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f000 fe1e 	bl	8001d54 <ADC_Enable>
 8001118:	4603      	mov	r3, r0
 800111a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	2b00      	cmp	r3, #0
 8001120:	f040 80e0 	bne.w	80012e4 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800112c:	f023 0301 	bic.w	r3, r3, #1
 8001130:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001140:	d004      	beq.n	800114c <HAL_ADC_Start+0x6c>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a6d      	ldr	r2, [pc, #436]	; (80012fc <HAL_ADC_Start+0x21c>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d106      	bne.n	800115a <HAL_ADC_Start+0x7a>
 800114c:	4b6c      	ldr	r3, [pc, #432]	; (8001300 <HAL_ADC_Start+0x220>)
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 031f 	and.w	r3, r3, #31
 8001154:	2b00      	cmp	r3, #0
 8001156:	d010      	beq.n	800117a <HAL_ADC_Start+0x9a>
 8001158:	e005      	b.n	8001166 <HAL_ADC_Start+0x86>
 800115a:	4b6a      	ldr	r3, [pc, #424]	; (8001304 <HAL_ADC_Start+0x224>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f003 031f 	and.w	r3, r3, #31
 8001162:	2b00      	cmp	r3, #0
 8001164:	d009      	beq.n	800117a <HAL_ADC_Start+0x9a>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800116e:	d004      	beq.n	800117a <HAL_ADC_Start+0x9a>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a64      	ldr	r2, [pc, #400]	; (8001308 <HAL_ADC_Start+0x228>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d115      	bne.n	80011a6 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d036      	beq.n	8001202 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800119c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80011a4:	e02d      	b.n	8001202 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011ba:	d004      	beq.n	80011c6 <HAL_ADC_Start+0xe6>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a4e      	ldr	r2, [pc, #312]	; (80012fc <HAL_ADC_Start+0x21c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d10a      	bne.n	80011dc <HAL_ADC_Start+0xfc>
 80011c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	bf14      	ite	ne
 80011d4:	2301      	movne	r3, #1
 80011d6:	2300      	moveq	r3, #0
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	e008      	b.n	80011ee <HAL_ADC_Start+0x10e>
 80011dc:	4b4a      	ldr	r3, [pc, #296]	; (8001308 <HAL_ADC_Start+0x228>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	bf14      	ite	ne
 80011e8:	2301      	movne	r3, #1
 80011ea:	2300      	moveq	r3, #0
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d007      	beq.n	8001202 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800120a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800120e:	d106      	bne.n	800121e <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001214:	f023 0206 	bic.w	r2, r3, #6
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	645a      	str	r2, [r3, #68]	; 0x44
 800121c:	e002      	b.n	8001224 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	221c      	movs	r2, #28
 8001232:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800123c:	d004      	beq.n	8001248 <HAL_ADC_Start+0x168>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a2e      	ldr	r2, [pc, #184]	; (80012fc <HAL_ADC_Start+0x21c>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d106      	bne.n	8001256 <HAL_ADC_Start+0x176>
 8001248:	4b2d      	ldr	r3, [pc, #180]	; (8001300 <HAL_ADC_Start+0x220>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f003 031f 	and.w	r3, r3, #31
 8001250:	2b00      	cmp	r3, #0
 8001252:	d03e      	beq.n	80012d2 <HAL_ADC_Start+0x1f2>
 8001254:	e005      	b.n	8001262 <HAL_ADC_Start+0x182>
 8001256:	4b2b      	ldr	r3, [pc, #172]	; (8001304 <HAL_ADC_Start+0x224>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 031f 	and.w	r3, r3, #31
 800125e:	2b00      	cmp	r3, #0
 8001260:	d037      	beq.n	80012d2 <HAL_ADC_Start+0x1f2>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800126a:	d004      	beq.n	8001276 <HAL_ADC_Start+0x196>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a22      	ldr	r2, [pc, #136]	; (80012fc <HAL_ADC_Start+0x21c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d106      	bne.n	8001284 <HAL_ADC_Start+0x1a4>
 8001276:	4b22      	ldr	r3, [pc, #136]	; (8001300 <HAL_ADC_Start+0x220>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f003 031f 	and.w	r3, r3, #31
 800127e:	2b05      	cmp	r3, #5
 8001280:	d027      	beq.n	80012d2 <HAL_ADC_Start+0x1f2>
 8001282:	e005      	b.n	8001290 <HAL_ADC_Start+0x1b0>
 8001284:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <HAL_ADC_Start+0x224>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f003 031f 	and.w	r3, r3, #31
 800128c:	2b05      	cmp	r3, #5
 800128e:	d020      	beq.n	80012d2 <HAL_ADC_Start+0x1f2>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001298:	d004      	beq.n	80012a4 <HAL_ADC_Start+0x1c4>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a17      	ldr	r2, [pc, #92]	; (80012fc <HAL_ADC_Start+0x21c>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d106      	bne.n	80012b2 <HAL_ADC_Start+0x1d2>
 80012a4:	4b16      	ldr	r3, [pc, #88]	; (8001300 <HAL_ADC_Start+0x220>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f003 031f 	and.w	r3, r3, #31
 80012ac:	2b09      	cmp	r3, #9
 80012ae:	d010      	beq.n	80012d2 <HAL_ADC_Start+0x1f2>
 80012b0:	e005      	b.n	80012be <HAL_ADC_Start+0x1de>
 80012b2:	4b14      	ldr	r3, [pc, #80]	; (8001304 <HAL_ADC_Start+0x224>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 031f 	and.w	r3, r3, #31
 80012ba:	2b09      	cmp	r3, #9
 80012bc:	d009      	beq.n	80012d2 <HAL_ADC_Start+0x1f2>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012c6:	d004      	beq.n	80012d2 <HAL_ADC_Start+0x1f2>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <HAL_ADC_Start+0x228>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d10f      	bne.n	80012f2 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f042 0204 	orr.w	r2, r2, #4
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	e006      	b.n	80012f2 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80012ec:	e001      	b.n	80012f2 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80012ee:	2302      	movs	r3, #2
 80012f0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	50000100 	.word	0x50000100
 8001300:	50000300 	.word	0x50000300
 8001304:	50000700 	.word	0x50000700
 8001308:	50000400 	.word	0x50000400

0800130c <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001314:	2300      	movs	r3, #0
 8001316:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800131e:	2b01      	cmp	r3, #1
 8001320:	d101      	bne.n	8001326 <HAL_ADC_Stop+0x1a>
 8001322:	2302      	movs	r3, #2
 8001324:	e023      	b.n	800136e <HAL_ADC_Stop+0x62>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2201      	movs	r2, #1
 800132a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800132e:	216c      	movs	r1, #108	; 0x6c
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 fdd9 	bl	8001ee8 <ADC_ConversionStop>
 8001336:	4603      	mov	r3, r0
 8001338:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d111      	bne.n	8001364 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 fd6b 	bl	8001e1c <ADC_Disable>
 8001346:	4603      	mov	r3, r0
 8001348:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d109      	bne.n	8001364 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001358:	f023 0301 	bic.w	r3, r3, #1
 800135c:	f043 0201 	orr.w	r2, r3, #1
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800136c:	7bfb      	ldrb	r3, [r7, #15]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	2b08      	cmp	r3, #8
 800138c:	d102      	bne.n	8001394 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800138e:	2308      	movs	r3, #8
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	e03a      	b.n	800140a <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800139c:	d004      	beq.n	80013a8 <HAL_ADC_PollForConversion+0x30>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a72      	ldr	r2, [pc, #456]	; (800156c <HAL_ADC_PollForConversion+0x1f4>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d101      	bne.n	80013ac <HAL_ADC_PollForConversion+0x34>
 80013a8:	4b71      	ldr	r3, [pc, #452]	; (8001570 <HAL_ADC_PollForConversion+0x1f8>)
 80013aa:	e000      	b.n	80013ae <HAL_ADC_PollForConversion+0x36>
 80013ac:	4b71      	ldr	r3, [pc, #452]	; (8001574 <HAL_ADC_PollForConversion+0x1fc>)
 80013ae:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 031f 	and.w	r3, r3, #31
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d112      	bne.n	80013e2 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d11d      	bne.n	8001406 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f043 0220 	orr.w	r2, r3, #32
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e0bf      	b.n	8001562 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00b      	beq.n	8001406 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	f043 0220 	orr.w	r2, r3, #32
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e0ad      	b.n	8001562 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001406:	230c      	movs	r3, #12
 8001408:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001412:	d004      	beq.n	800141e <HAL_ADC_PollForConversion+0xa6>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a54      	ldr	r2, [pc, #336]	; (800156c <HAL_ADC_PollForConversion+0x1f4>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d106      	bne.n	800142c <HAL_ADC_PollForConversion+0xb4>
 800141e:	4b54      	ldr	r3, [pc, #336]	; (8001570 <HAL_ADC_PollForConversion+0x1f8>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f003 031f 	and.w	r3, r3, #31
 8001426:	2b00      	cmp	r3, #0
 8001428:	d010      	beq.n	800144c <HAL_ADC_PollForConversion+0xd4>
 800142a:	e005      	b.n	8001438 <HAL_ADC_PollForConversion+0xc0>
 800142c:	4b51      	ldr	r3, [pc, #324]	; (8001574 <HAL_ADC_PollForConversion+0x1fc>)
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f003 031f 	and.w	r3, r3, #31
 8001434:	2b00      	cmp	r3, #0
 8001436:	d009      	beq.n	800144c <HAL_ADC_PollForConversion+0xd4>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001440:	d004      	beq.n	800144c <HAL_ADC_PollForConversion+0xd4>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a4c      	ldr	r2, [pc, #304]	; (8001578 <HAL_ADC_PollForConversion+0x200>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d104      	bne.n	8001456 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	e00f      	b.n	8001476 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800145e:	d004      	beq.n	800146a <HAL_ADC_PollForConversion+0xf2>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a41      	ldr	r2, [pc, #260]	; (800156c <HAL_ADC_PollForConversion+0x1f4>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d102      	bne.n	8001470 <HAL_ADC_PollForConversion+0xf8>
 800146a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800146e:	e000      	b.n	8001472 <HAL_ADC_PollForConversion+0xfa>
 8001470:	4b41      	ldr	r3, [pc, #260]	; (8001578 <HAL_ADC_PollForConversion+0x200>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001476:	f7ff fc0b 	bl	8000c90 <HAL_GetTick>
 800147a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800147c:	e021      	b.n	80014c2 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001484:	d01d      	beq.n	80014c2 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d007      	beq.n	800149c <HAL_ADC_PollForConversion+0x124>
 800148c:	f7ff fc00 	bl	8000c90 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	429a      	cmp	r2, r3
 800149a:	d212      	bcs.n	80014c2 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	4013      	ands	r3, r2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10b      	bne.n	80014c2 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f043 0204 	orr.w	r2, r3, #4
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e04f      	b.n	8001562 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	4013      	ands	r3, r2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0d6      	beq.n	800147e <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d131      	bne.n	800154e <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d12c      	bne.n	800154e <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	2b08      	cmp	r3, #8
 8001500:	d125      	bne.n	800154e <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	2b00      	cmp	r3, #0
 800150e:	d112      	bne.n	8001536 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d112      	bne.n	800154e <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	f043 0201 	orr.w	r2, r3, #1
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	641a      	str	r2, [r3, #64]	; 0x40
 8001534:	e00b      	b.n	800154e <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f043 0220 	orr.w	r2, r3, #32
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	f043 0201 	orr.w	r2, r3, #1
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d103      	bne.n	8001560 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	697a      	ldr	r2, [r7, #20]
 800155e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	50000100 	.word	0x50000100
 8001570:	50000300 	.word	0x50000300
 8001574:	50000700 	.word	0x50000700
 8001578:	50000400 	.word	0x50000400

0800157c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001598:	b480      	push	{r7}
 800159a:	b09b      	sub	sp, #108	; 0x6c
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015a2:	2300      	movs	r3, #0
 80015a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d101      	bne.n	80015ba <HAL_ADC_ConfigChannel+0x22>
 80015b6:	2302      	movs	r3, #2
 80015b8:	e2cb      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x5ba>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2201      	movs	r2, #1
 80015be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f040 82af 	bne.w	8001b30 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	d81c      	bhi.n	8001614 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	4613      	mov	r3, r2
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	4413      	add	r3, r2
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	461a      	mov	r2, r3
 80015ee:	231f      	movs	r3, #31
 80015f0:	4093      	lsls	r3, r2
 80015f2:	43db      	mvns	r3, r3
 80015f4:	4019      	ands	r1, r3
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	6818      	ldr	r0, [r3, #0]
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	4613      	mov	r3, r2
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	4413      	add	r3, r2
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	fa00 f203 	lsl.w	r2, r0, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	430a      	orrs	r2, r1
 8001610:	631a      	str	r2, [r3, #48]	; 0x30
 8001612:	e063      	b.n	80016dc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b09      	cmp	r3, #9
 800161a:	d81e      	bhi.n	800165a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	4613      	mov	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4413      	add	r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	3b1e      	subs	r3, #30
 8001630:	221f      	movs	r2, #31
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43db      	mvns	r3, r3
 8001638:	4019      	ands	r1, r3
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	6818      	ldr	r0, [r3, #0]
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	4613      	mov	r3, r2
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	4413      	add	r3, r2
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	3b1e      	subs	r3, #30
 800164c:	fa00 f203 	lsl.w	r2, r0, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	430a      	orrs	r2, r1
 8001656:	635a      	str	r2, [r3, #52]	; 0x34
 8001658:	e040      	b.n	80016dc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b0e      	cmp	r3, #14
 8001660:	d81e      	bhi.n	80016a0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	4613      	mov	r3, r2
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	4413      	add	r3, r2
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	3b3c      	subs	r3, #60	; 0x3c
 8001676:	221f      	movs	r2, #31
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	4019      	ands	r1, r3
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	6818      	ldr	r0, [r3, #0]
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	4613      	mov	r3, r2
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	4413      	add	r3, r2
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	3b3c      	subs	r3, #60	; 0x3c
 8001692:	fa00 f203 	lsl.w	r2, r0, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	639a      	str	r2, [r3, #56]	; 0x38
 800169e:	e01d      	b.n	80016dc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	4413      	add	r3, r2
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	3b5a      	subs	r3, #90	; 0x5a
 80016b4:	221f      	movs	r2, #31
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	4019      	ands	r1, r3
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	6818      	ldr	r0, [r3, #0]
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	4413      	add	r3, r2
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	3b5a      	subs	r3, #90	; 0x5a
 80016d0:	fa00 f203 	lsl.w	r2, r0, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	430a      	orrs	r2, r1
 80016da:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f003 030c 	and.w	r3, r3, #12
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f040 80e5 	bne.w	80018b6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b09      	cmp	r3, #9
 80016f2:	d91c      	bls.n	800172e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6999      	ldr	r1, [r3, #24]
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	4613      	mov	r3, r2
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	4413      	add	r3, r2
 8001704:	3b1e      	subs	r3, #30
 8001706:	2207      	movs	r2, #7
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	4019      	ands	r1, r3
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	6898      	ldr	r0, [r3, #8]
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4613      	mov	r3, r2
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	4413      	add	r3, r2
 800171e:	3b1e      	subs	r3, #30
 8001720:	fa00 f203 	lsl.w	r2, r0, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	619a      	str	r2, [r3, #24]
 800172c:	e019      	b.n	8001762 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6959      	ldr	r1, [r3, #20]
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4613      	mov	r3, r2
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	4413      	add	r3, r2
 800173e:	2207      	movs	r2, #7
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	4019      	ands	r1, r3
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	6898      	ldr	r0, [r3, #8]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4613      	mov	r3, r2
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	4413      	add	r3, r2
 8001756:	fa00 f203 	lsl.w	r2, r0, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	430a      	orrs	r2, r1
 8001760:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	695a      	ldr	r2, [r3, #20]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	08db      	lsrs	r3, r3, #3
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	3b01      	subs	r3, #1
 8001780:	2b03      	cmp	r3, #3
 8001782:	d84f      	bhi.n	8001824 <HAL_ADC_ConfigChannel+0x28c>
 8001784:	a201      	add	r2, pc, #4	; (adr r2, 800178c <HAL_ADC_ConfigChannel+0x1f4>)
 8001786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800178a:	bf00      	nop
 800178c:	0800179d 	.word	0x0800179d
 8001790:	080017bf 	.word	0x080017bf
 8001794:	080017e1 	.word	0x080017e1
 8001798:	08001803 	.word	0x08001803
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017a2:	4b9f      	ldr	r3, [pc, #636]	; (8001a20 <HAL_ADC_ConfigChannel+0x488>)
 80017a4:	4013      	ands	r3, r2
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	6812      	ldr	r2, [r2, #0]
 80017aa:	0691      	lsls	r1, r2, #26
 80017ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017ae:	430a      	orrs	r2, r1
 80017b0:	431a      	orrs	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017ba:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80017bc:	e07e      	b.n	80018bc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80017c4:	4b96      	ldr	r3, [pc, #600]	; (8001a20 <HAL_ADC_ConfigChannel+0x488>)
 80017c6:	4013      	ands	r3, r2
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	6812      	ldr	r2, [r2, #0]
 80017cc:	0691      	lsls	r1, r2, #26
 80017ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017d0:	430a      	orrs	r2, r1
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017dc:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80017de:	e06d      	b.n	80018bc <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80017e6:	4b8e      	ldr	r3, [pc, #568]	; (8001a20 <HAL_ADC_ConfigChannel+0x488>)
 80017e8:	4013      	ands	r3, r2
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	6812      	ldr	r2, [r2, #0]
 80017ee:	0691      	lsls	r1, r2, #26
 80017f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017f2:	430a      	orrs	r2, r1
 80017f4:	431a      	orrs	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017fe:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001800:	e05c      	b.n	80018bc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001808:	4b85      	ldr	r3, [pc, #532]	; (8001a20 <HAL_ADC_ConfigChannel+0x488>)
 800180a:	4013      	ands	r3, r2
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	6812      	ldr	r2, [r2, #0]
 8001810:	0691      	lsls	r1, r2, #26
 8001812:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001814:	430a      	orrs	r2, r1
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001820:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001822:	e04b      	b.n	80018bc <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800182a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	069b      	lsls	r3, r3, #26
 8001834:	429a      	cmp	r2, r3
 8001836:	d107      	bne.n	8001848 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001846:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800184e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	069b      	lsls	r3, r3, #26
 8001858:	429a      	cmp	r2, r3
 800185a:	d107      	bne.n	800186c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800186a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001872:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	069b      	lsls	r3, r3, #26
 800187c:	429a      	cmp	r2, r3
 800187e:	d107      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800188e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001896:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	069b      	lsls	r3, r3, #26
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d10a      	bne.n	80018ba <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018b2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80018b4:	e001      	b.n	80018ba <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80018b6:	bf00      	nop
 80018b8:	e000      	b.n	80018bc <HAL_ADC_ConfigChannel+0x324>
      break;
 80018ba:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d108      	bne.n	80018dc <HAL_ADC_ConfigChannel+0x344>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d101      	bne.n	80018dc <HAL_ADC_ConfigChannel+0x344>
 80018d8:	2301      	movs	r3, #1
 80018da:	e000      	b.n	80018de <HAL_ADC_ConfigChannel+0x346>
 80018dc:	2300      	movs	r3, #0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f040 8131 	bne.w	8001b46 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d00f      	beq.n	800190c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2201      	movs	r2, #1
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43da      	mvns	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	400a      	ands	r2, r1
 8001906:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800190a:	e049      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2201      	movs	r2, #1
 800191a:	409a      	lsls	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	430a      	orrs	r2, r1
 8001922:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b09      	cmp	r3, #9
 800192c:	d91c      	bls.n	8001968 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6999      	ldr	r1, [r3, #24]
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4613      	mov	r3, r2
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	4413      	add	r3, r2
 800193e:	3b1b      	subs	r3, #27
 8001940:	2207      	movs	r2, #7
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43db      	mvns	r3, r3
 8001948:	4019      	ands	r1, r3
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	6898      	ldr	r0, [r3, #8]
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	4613      	mov	r3, r2
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	4413      	add	r3, r2
 8001958:	3b1b      	subs	r3, #27
 800195a:	fa00 f203 	lsl.w	r2, r0, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	430a      	orrs	r2, r1
 8001964:	619a      	str	r2, [r3, #24]
 8001966:	e01b      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6959      	ldr	r1, [r3, #20]
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	1c5a      	adds	r2, r3, #1
 8001974:	4613      	mov	r3, r2
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4413      	add	r3, r2
 800197a:	2207      	movs	r2, #7
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	4019      	ands	r1, r3
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	6898      	ldr	r0, [r3, #8]
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	1c5a      	adds	r2, r3, #1
 800198e:	4613      	mov	r3, r2
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	4413      	add	r3, r2
 8001994:	fa00 f203 	lsl.w	r2, r0, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019a8:	d004      	beq.n	80019b4 <HAL_ADC_ConfigChannel+0x41c>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a1d      	ldr	r2, [pc, #116]	; (8001a24 <HAL_ADC_ConfigChannel+0x48c>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d101      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x420>
 80019b4:	4b1c      	ldr	r3, [pc, #112]	; (8001a28 <HAL_ADC_ConfigChannel+0x490>)
 80019b6:	e000      	b.n	80019ba <HAL_ADC_ConfigChannel+0x422>
 80019b8:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <HAL_ADC_ConfigChannel+0x494>)
 80019ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b10      	cmp	r3, #16
 80019c2:	d105      	bne.n	80019d0 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80019c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d015      	beq.n	80019fc <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80019d4:	2b11      	cmp	r3, #17
 80019d6:	d105      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80019d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d00b      	beq.n	80019fc <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80019e8:	2b12      	cmp	r3, #18
 80019ea:	f040 80ac 	bne.w	8001b46 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80019ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f040 80a5 	bne.w	8001b46 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a04:	d102      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x474>
 8001a06:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <HAL_ADC_ConfigChannel+0x48c>)
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	e023      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x4bc>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <HAL_ADC_ConfigChannel+0x48c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d10c      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x498>
 8001a16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	e01a      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x4bc>
 8001a1e:	bf00      	nop
 8001a20:	83fff000 	.word	0x83fff000
 8001a24:	50000100 	.word	0x50000100
 8001a28:	50000300 	.word	0x50000300
 8001a2c:	50000700 	.word	0x50000700
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a4a      	ldr	r2, [pc, #296]	; (8001b60 <HAL_ADC_ConfigChannel+0x5c8>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d102      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x4a8>
 8001a3a:	4b4a      	ldr	r3, [pc, #296]	; (8001b64 <HAL_ADC_ConfigChannel+0x5cc>)
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	e009      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x4bc>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a47      	ldr	r2, [pc, #284]	; (8001b64 <HAL_ADC_ConfigChannel+0x5cc>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d102      	bne.n	8001a50 <HAL_ADC_ConfigChannel+0x4b8>
 8001a4a:	4b45      	ldr	r3, [pc, #276]	; (8001b60 <HAL_ADC_ConfigChannel+0x5c8>)
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	e001      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x4bc>
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d108      	bne.n	8001a74 <HAL_ADC_ConfigChannel+0x4dc>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d101      	bne.n	8001a74 <HAL_ADC_ConfigChannel+0x4dc>
 8001a70:	2301      	movs	r3, #1
 8001a72:	e000      	b.n	8001a76 <HAL_ADC_ConfigChannel+0x4de>
 8001a74:	2300      	movs	r3, #0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d150      	bne.n	8001b1c <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a7a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d010      	beq.n	8001aa2 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 0303 	and.w	r3, r3, #3
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d107      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x504>
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d101      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x504>
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e000      	b.n	8001a9e <HAL_ADC_ConfigChannel+0x506>
 8001a9c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d13c      	bne.n	8001b1c <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2b10      	cmp	r3, #16
 8001aa8:	d11d      	bne.n	8001ae6 <HAL_ADC_ConfigChannel+0x54e>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ab2:	d118      	bne.n	8001ae6 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001ab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001abc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001abe:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ac0:	4b29      	ldr	r3, [pc, #164]	; (8001b68 <HAL_ADC_ConfigChannel+0x5d0>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a29      	ldr	r2, [pc, #164]	; (8001b6c <HAL_ADC_ConfigChannel+0x5d4>)
 8001ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aca:	0c9a      	lsrs	r2, r3, #18
 8001acc:	4613      	mov	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ad6:	e002      	b.n	8001ade <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1f9      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ae4:	e02e      	b.n	8001b44 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2b11      	cmp	r3, #17
 8001aec:	d10b      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x56e>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001af6:	d106      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001af8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001b00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b02:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b04:	e01e      	b.n	8001b44 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2b12      	cmp	r3, #18
 8001b0c:	d11a      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001b0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b18:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b1a:	e013      	b.n	8001b44 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	f043 0220 	orr.w	r2, r3, #32
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001b2e:	e00a      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	f043 0220 	orr.w	r2, r3, #32
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001b42:	e000      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b44:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001b4e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	376c      	adds	r7, #108	; 0x6c
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	50000400 	.word	0x50000400
 8001b64:	50000500 	.word	0x50000500
 8001b68:	20000010 	.word	0x20000010
 8001b6c:	431bde83 	.word	0x431bde83

08001b70 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b099      	sub	sp, #100	; 0x64
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b88:	d102      	bne.n	8001b90 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001b8a:	4b6d      	ldr	r3, [pc, #436]	; (8001d40 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	e01a      	b.n	8001bc6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a6a      	ldr	r2, [pc, #424]	; (8001d40 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d103      	bne.n	8001ba2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001b9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	e011      	b.n	8001bc6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a67      	ldr	r2, [pc, #412]	; (8001d44 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d102      	bne.n	8001bb2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001bac:	4b66      	ldr	r3, [pc, #408]	; (8001d48 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	e009      	b.n	8001bc6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a64      	ldr	r2, [pc, #400]	; (8001d48 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d102      	bne.n	8001bc2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001bbc:	4b61      	ldr	r3, [pc, #388]	; (8001d44 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	e001      	b.n	8001bc6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0b0      	b.n	8001d32 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d101      	bne.n	8001bde <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e0a9      	b.n	8001d32 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f040 808d 	bne.w	8001d10 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 0304 	and.w	r3, r3, #4
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f040 8086 	bne.w	8001d10 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c0c:	d004      	beq.n	8001c18 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a4b      	ldr	r2, [pc, #300]	; (8001d40 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d101      	bne.n	8001c1c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001c18:	4b4c      	ldr	r3, [pc, #304]	; (8001d4c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001c1a:	e000      	b.n	8001c1e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001c1c:	4b4c      	ldr	r3, [pc, #304]	; (8001d50 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001c1e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d040      	beq.n	8001caa <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001c28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	6859      	ldr	r1, [r3, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c3a:	035b      	lsls	r3, r3, #13
 8001c3c:	430b      	orrs	r3, r1
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c42:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d108      	bne.n	8001c64 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d101      	bne.n	8001c64 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001c60:	2301      	movs	r3, #1
 8001c62:	e000      	b.n	8001c66 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001c64:	2300      	movs	r3, #0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d15c      	bne.n	8001d24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 0303 	and.w	r3, r3, #3
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d107      	bne.n	8001c86 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d101      	bne.n	8001c86 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001c86:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d14b      	bne.n	8001d24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001c8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001c94:	f023 030f 	bic.w	r3, r3, #15
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	6811      	ldr	r1, [r2, #0]
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	6892      	ldr	r2, [r2, #8]
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ca6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ca8:	e03c      	b.n	8001d24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001caa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cb4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d108      	bne.n	8001cd6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d101      	bne.n	8001cd6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d123      	bne.n	8001d24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 0303 	and.w	r3, r3, #3
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d107      	bne.n	8001cf8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e000      	b.n	8001cfa <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001cf8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d112      	bne.n	8001d24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001cfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001d06:	f023 030f 	bic.w	r3, r3, #15
 8001d0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d0c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d0e:	e009      	b.n	8001d24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	f043 0220 	orr.w	r2, r3, #32
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001d22:	e000      	b.n	8001d26 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d24:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001d2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001d32:	4618      	mov	r0, r3
 8001d34:	3764      	adds	r7, #100	; 0x64
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	50000100 	.word	0x50000100
 8001d44:	50000400 	.word	0x50000400
 8001d48:	50000500 	.word	0x50000500
 8001d4c:	50000300 	.word	0x50000300
 8001d50:	50000700 	.word	0x50000700

08001d54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d108      	bne.n	8001d80 <ADC_Enable+0x2c>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d101      	bne.n	8001d80 <ADC_Enable+0x2c>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <ADC_Enable+0x2e>
 8001d80:	2300      	movs	r3, #0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d143      	bne.n	8001e0e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	4b22      	ldr	r3, [pc, #136]	; (8001e18 <ADC_Enable+0xc4>)
 8001d8e:	4013      	ands	r3, r2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00d      	beq.n	8001db0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	f043 0210 	orr.w	r2, r3, #16
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da4:	f043 0201 	orr.w	r2, r3, #1
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e02f      	b.n	8001e10 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0201 	orr.w	r2, r2, #1
 8001dbe:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001dc0:	f7fe ff66 	bl	8000c90 <HAL_GetTick>
 8001dc4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001dc6:	e01b      	b.n	8001e00 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001dc8:	f7fe ff62 	bl	8000c90 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d914      	bls.n	8001e00 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d00d      	beq.n	8001e00 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	f043 0210 	orr.w	r2, r3, #16
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df4:	f043 0201 	orr.w	r2, r3, #1
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e007      	b.n	8001e10 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d1dc      	bne.n	8001dc8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	8000003f 	.word	0x8000003f

08001e1c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d108      	bne.n	8001e48 <ADC_Disable+0x2c>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d101      	bne.n	8001e48 <ADC_Disable+0x2c>
 8001e44:	2301      	movs	r3, #1
 8001e46:	e000      	b.n	8001e4a <ADC_Disable+0x2e>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d047      	beq.n	8001ede <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 030d 	and.w	r3, r3, #13
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d10f      	bne.n	8001e7c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f042 0202 	orr.w	r2, r2, #2
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2203      	movs	r2, #3
 8001e72:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001e74:	f7fe ff0c 	bl	8000c90 <HAL_GetTick>
 8001e78:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e7a:	e029      	b.n	8001ed0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e80:	f043 0210 	orr.w	r2, r3, #16
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8c:	f043 0201 	orr.w	r2, r3, #1
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e023      	b.n	8001ee0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e98:	f7fe fefa 	bl	8000c90 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d914      	bls.n	8001ed0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d10d      	bne.n	8001ed0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb8:	f043 0210 	orr.w	r2, r3, #16
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec4:	f043 0201 	orr.w	r2, r3, #1
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e007      	b.n	8001ee0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d0dc      	beq.n	8001e98 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 030c 	and.w	r3, r3, #12
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 809a 	beq.w	8002042 <ADC_ConversionStop+0x15a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f1c:	d12a      	bne.n	8001f74 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d126      	bne.n	8001f74 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d122      	bne.n	8001f74 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8001f2e:	230c      	movs	r3, #12
 8001f30:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001f32:	e014      	b.n	8001f5e <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4a45      	ldr	r2, [pc, #276]	; (800204c <ADC_ConversionStop+0x164>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d90d      	bls.n	8001f58 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	f043 0210 	orr.w	r2, r3, #16
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4c:	f043 0201 	orr.w	r2, r3, #1
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e075      	b.n	8002044 <ADC_ConversionStop+0x15c>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f68:	2b40      	cmp	r3, #64	; 0x40
 8001f6a:	d1e3      	bne.n	8001f34 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2240      	movs	r2, #64	; 0x40
 8001f72:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	2b60      	cmp	r3, #96	; 0x60
 8001f78:	d015      	beq.n	8001fa6 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b04      	cmp	r3, #4
 8001f86:	d10e      	bne.n	8001fa6 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d107      	bne.n	8001fa6 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f042 0210 	orr.w	r2, r2, #16
 8001fa4:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	2b0c      	cmp	r3, #12
 8001faa:	d015      	beq.n	8001fd8 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d10e      	bne.n	8001fd8 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d107      	bne.n	8001fd8 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0220 	orr.w	r2, r2, #32
 8001fd6:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	2b60      	cmp	r3, #96	; 0x60
 8001fdc:	d004      	beq.n	8001fe8 <ADC_ConversionStop+0x100>
 8001fde:	2b6c      	cmp	r3, #108	; 0x6c
 8001fe0:	d105      	bne.n	8001fee <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001fe2:	230c      	movs	r3, #12
 8001fe4:	617b      	str	r3, [r7, #20]
        break;
 8001fe6:	e005      	b.n	8001ff4 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001fe8:	2308      	movs	r3, #8
 8001fea:	617b      	str	r3, [r7, #20]
        break;
 8001fec:	e002      	b.n	8001ff4 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001fee:	2304      	movs	r3, #4
 8001ff0:	617b      	str	r3, [r7, #20]
        break;
 8001ff2:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001ff4:	f7fe fe4c 	bl	8000c90 <HAL_GetTick>
 8001ff8:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001ffa:	e01b      	b.n	8002034 <ADC_ConversionStop+0x14c>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001ffc:	f7fe fe48 	bl	8000c90 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b0b      	cmp	r3, #11
 8002008:	d914      	bls.n	8002034 <ADC_ConversionStop+0x14c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	4013      	ands	r3, r2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00d      	beq.n	8002034 <ADC_ConversionStop+0x14c>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201c:	f043 0210 	orr.w	r2, r3, #16
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002028:	f043 0201 	orr.w	r2, r3, #1
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e007      	b.n	8002044 <ADC_ConversionStop+0x15c>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	4013      	ands	r3, r2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1dc      	bne.n	8001ffc <ADC_ConversionStop+0x114>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	000993ff 	.word	0x000993ff

08002050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <__NVIC_SetPriorityGrouping+0x44>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800206c:	4013      	ands	r3, r2
 800206e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800207c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002082:	4a04      	ldr	r2, [pc, #16]	; (8002094 <__NVIC_SetPriorityGrouping+0x44>)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	60d3      	str	r3, [r2, #12]
}
 8002088:	bf00      	nop
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800209c:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <__NVIC_GetPriorityGrouping+0x18>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	0a1b      	lsrs	r3, r3, #8
 80020a2:	f003 0307 	and.w	r3, r3, #7
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	db0b      	blt.n	80020de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020c6:	79fb      	ldrb	r3, [r7, #7]
 80020c8:	f003 021f 	and.w	r2, r3, #31
 80020cc:	4907      	ldr	r1, [pc, #28]	; (80020ec <__NVIC_EnableIRQ+0x38>)
 80020ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d2:	095b      	lsrs	r3, r3, #5
 80020d4:	2001      	movs	r0, #1
 80020d6:	fa00 f202 	lsl.w	r2, r0, r2
 80020da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	e000e100 	.word	0xe000e100

080020f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	6039      	str	r1, [r7, #0]
 80020fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002100:	2b00      	cmp	r3, #0
 8002102:	db0a      	blt.n	800211a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	b2da      	uxtb	r2, r3
 8002108:	490c      	ldr	r1, [pc, #48]	; (800213c <__NVIC_SetPriority+0x4c>)
 800210a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210e:	0112      	lsls	r2, r2, #4
 8002110:	b2d2      	uxtb	r2, r2
 8002112:	440b      	add	r3, r1
 8002114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002118:	e00a      	b.n	8002130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	b2da      	uxtb	r2, r3
 800211e:	4908      	ldr	r1, [pc, #32]	; (8002140 <__NVIC_SetPriority+0x50>)
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	3b04      	subs	r3, #4
 8002128:	0112      	lsls	r2, r2, #4
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	440b      	add	r3, r1
 800212e:	761a      	strb	r2, [r3, #24]
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	e000e100 	.word	0xe000e100
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002144:	b480      	push	{r7}
 8002146:	b089      	sub	sp, #36	; 0x24
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f1c3 0307 	rsb	r3, r3, #7
 800215e:	2b04      	cmp	r3, #4
 8002160:	bf28      	it	cs
 8002162:	2304      	movcs	r3, #4
 8002164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3304      	adds	r3, #4
 800216a:	2b06      	cmp	r3, #6
 800216c:	d902      	bls.n	8002174 <NVIC_EncodePriority+0x30>
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	3b03      	subs	r3, #3
 8002172:	e000      	b.n	8002176 <NVIC_EncodePriority+0x32>
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002178:	f04f 32ff 	mov.w	r2, #4294967295
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43da      	mvns	r2, r3
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	401a      	ands	r2, r3
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800218c:	f04f 31ff 	mov.w	r1, #4294967295
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	fa01 f303 	lsl.w	r3, r1, r3
 8002196:	43d9      	mvns	r1, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800219c:	4313      	orrs	r3, r2
         );
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3724      	adds	r7, #36	; 0x24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021bc:	d301      	bcc.n	80021c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021be:	2301      	movs	r3, #1
 80021c0:	e00f      	b.n	80021e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021c2:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <SysTick_Config+0x40>)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ca:	210f      	movs	r1, #15
 80021cc:	f04f 30ff 	mov.w	r0, #4294967295
 80021d0:	f7ff ff8e 	bl	80020f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <SysTick_Config+0x40>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021da:	4b04      	ldr	r3, [pc, #16]	; (80021ec <SysTick_Config+0x40>)
 80021dc:	2207      	movs	r2, #7
 80021de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	e000e010 	.word	0xe000e010

080021f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff ff29 	bl	8002050 <__NVIC_SetPriorityGrouping>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b086      	sub	sp, #24
 800220a:	af00      	add	r7, sp, #0
 800220c:	4603      	mov	r3, r0
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	607a      	str	r2, [r7, #4]
 8002212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002218:	f7ff ff3e 	bl	8002098 <__NVIC_GetPriorityGrouping>
 800221c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	68b9      	ldr	r1, [r7, #8]
 8002222:	6978      	ldr	r0, [r7, #20]
 8002224:	f7ff ff8e 	bl	8002144 <NVIC_EncodePriority>
 8002228:	4602      	mov	r2, r0
 800222a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800222e:	4611      	mov	r1, r2
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff ff5d 	bl	80020f0 <__NVIC_SetPriority>
}
 8002236:	bf00      	nop
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	af00      	add	r7, sp, #0
 8002244:	4603      	mov	r3, r0
 8002246:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff31 	bl	80020b4 <__NVIC_EnableIRQ>
}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7ff ffa2 	bl	80021ac <SysTick_Config>
 8002268:	4603      	mov	r3, r0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002280:	2b02      	cmp	r3, #2
 8002282:	d008      	beq.n	8002296 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2204      	movs	r2, #4
 8002288:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e020      	b.n	80022d8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 020e 	bic.w	r2, r2, #14
 80022a4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0201 	bic.w	r2, r2, #1
 80022b4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022be:	2101      	movs	r1, #1
 80022c0:	fa01 f202 	lsl.w	r2, r1, r2
 80022c4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022ec:	2300      	movs	r3, #0
 80022ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d005      	beq.n	8002306 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2204      	movs	r2, #4
 80022fe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	73fb      	strb	r3, [r7, #15]
 8002304:	e027      	b.n	8002356 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 020e 	bic.w	r2, r2, #14
 8002314:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0201 	bic.w	r2, r2, #1
 8002324:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232e:	2101      	movs	r1, #1
 8002330:	fa01 f202 	lsl.w	r2, r1, r2
 8002334:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	4798      	blx	r3
    } 
  }
  return status;
 8002356:	7bfb      	ldrb	r3, [r7, #15]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002360:	b480      	push	{r7}
 8002362:	b087      	sub	sp, #28
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800236e:	e160      	b.n	8002632 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	2101      	movs	r1, #1
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	fa01 f303 	lsl.w	r3, r1, r3
 800237c:	4013      	ands	r3, r2
 800237e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 8152 	beq.w	800262c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 0303 	and.w	r3, r3, #3
 8002390:	2b01      	cmp	r3, #1
 8002392:	d005      	beq.n	80023a0 <HAL_GPIO_Init+0x40>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 0303 	and.w	r3, r3, #3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d130      	bne.n	8002402 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	2203      	movs	r2, #3
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4013      	ands	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023d6:	2201      	movs	r2, #1
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	4013      	ands	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	091b      	lsrs	r3, r3, #4
 80023ec:	f003 0201 	and.w	r2, r3, #1
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	2b03      	cmp	r3, #3
 800240c:	d017      	beq.n	800243e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	2203      	movs	r2, #3
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	4013      	ands	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	4313      	orrs	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d123      	bne.n	8002492 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	08da      	lsrs	r2, r3, #3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3208      	adds	r2, #8
 8002452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002456:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	220f      	movs	r2, #15
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	4013      	ands	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	691a      	ldr	r2, [r3, #16]
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	08da      	lsrs	r2, r3, #3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3208      	adds	r2, #8
 800248c:	6939      	ldr	r1, [r7, #16]
 800248e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	2203      	movs	r2, #3
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	4013      	ands	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f003 0203 	and.w	r2, r3, #3
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 80ac 	beq.w	800262c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d4:	4b5e      	ldr	r3, [pc, #376]	; (8002650 <HAL_GPIO_Init+0x2f0>)
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	4a5d      	ldr	r2, [pc, #372]	; (8002650 <HAL_GPIO_Init+0x2f0>)
 80024da:	f043 0301 	orr.w	r3, r3, #1
 80024de:	6193      	str	r3, [r2, #24]
 80024e0:	4b5b      	ldr	r3, [pc, #364]	; (8002650 <HAL_GPIO_Init+0x2f0>)
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	60bb      	str	r3, [r7, #8]
 80024ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024ec:	4a59      	ldr	r2, [pc, #356]	; (8002654 <HAL_GPIO_Init+0x2f4>)
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	089b      	lsrs	r3, r3, #2
 80024f2:	3302      	adds	r3, #2
 80024f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	f003 0303 	and.w	r3, r3, #3
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	220f      	movs	r2, #15
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4013      	ands	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002516:	d025      	beq.n	8002564 <HAL_GPIO_Init+0x204>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a4f      	ldr	r2, [pc, #316]	; (8002658 <HAL_GPIO_Init+0x2f8>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d01f      	beq.n	8002560 <HAL_GPIO_Init+0x200>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a4e      	ldr	r2, [pc, #312]	; (800265c <HAL_GPIO_Init+0x2fc>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d019      	beq.n	800255c <HAL_GPIO_Init+0x1fc>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a4d      	ldr	r2, [pc, #308]	; (8002660 <HAL_GPIO_Init+0x300>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d013      	beq.n	8002558 <HAL_GPIO_Init+0x1f8>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a4c      	ldr	r2, [pc, #304]	; (8002664 <HAL_GPIO_Init+0x304>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d00d      	beq.n	8002554 <HAL_GPIO_Init+0x1f4>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a4b      	ldr	r2, [pc, #300]	; (8002668 <HAL_GPIO_Init+0x308>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d007      	beq.n	8002550 <HAL_GPIO_Init+0x1f0>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a4a      	ldr	r2, [pc, #296]	; (800266c <HAL_GPIO_Init+0x30c>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d101      	bne.n	800254c <HAL_GPIO_Init+0x1ec>
 8002548:	2306      	movs	r3, #6
 800254a:	e00c      	b.n	8002566 <HAL_GPIO_Init+0x206>
 800254c:	2307      	movs	r3, #7
 800254e:	e00a      	b.n	8002566 <HAL_GPIO_Init+0x206>
 8002550:	2305      	movs	r3, #5
 8002552:	e008      	b.n	8002566 <HAL_GPIO_Init+0x206>
 8002554:	2304      	movs	r3, #4
 8002556:	e006      	b.n	8002566 <HAL_GPIO_Init+0x206>
 8002558:	2303      	movs	r3, #3
 800255a:	e004      	b.n	8002566 <HAL_GPIO_Init+0x206>
 800255c:	2302      	movs	r3, #2
 800255e:	e002      	b.n	8002566 <HAL_GPIO_Init+0x206>
 8002560:	2301      	movs	r3, #1
 8002562:	e000      	b.n	8002566 <HAL_GPIO_Init+0x206>
 8002564:	2300      	movs	r3, #0
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	f002 0203 	and.w	r2, r2, #3
 800256c:	0092      	lsls	r2, r2, #2
 800256e:	4093      	lsls	r3, r2
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002576:	4937      	ldr	r1, [pc, #220]	; (8002654 <HAL_GPIO_Init+0x2f4>)
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	089b      	lsrs	r3, r3, #2
 800257c:	3302      	adds	r3, #2
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002584:	4b3a      	ldr	r3, [pc, #232]	; (8002670 <HAL_GPIO_Init+0x310>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	43db      	mvns	r3, r3
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	4013      	ands	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80025a8:	4a31      	ldr	r2, [pc, #196]	; (8002670 <HAL_GPIO_Init+0x310>)
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025ae:	4b30      	ldr	r3, [pc, #192]	; (8002670 <HAL_GPIO_Init+0x310>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	43db      	mvns	r3, r3
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	4013      	ands	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80025d2:	4a27      	ldr	r2, [pc, #156]	; (8002670 <HAL_GPIO_Init+0x310>)
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025d8:	4b25      	ldr	r3, [pc, #148]	; (8002670 <HAL_GPIO_Init+0x310>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	43db      	mvns	r3, r3
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4013      	ands	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80025fc:	4a1c      	ldr	r2, [pc, #112]	; (8002670 <HAL_GPIO_Init+0x310>)
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002602:	4b1b      	ldr	r3, [pc, #108]	; (8002670 <HAL_GPIO_Init+0x310>)
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	43db      	mvns	r3, r3
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	4013      	ands	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4313      	orrs	r3, r2
 8002624:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002626:	4a12      	ldr	r2, [pc, #72]	; (8002670 <HAL_GPIO_Init+0x310>)
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	3301      	adds	r3, #1
 8002630:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	fa22 f303 	lsr.w	r3, r2, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	f47f ae97 	bne.w	8002370 <HAL_GPIO_Init+0x10>
  }
}
 8002642:	bf00      	nop
 8002644:	371c      	adds	r7, #28
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	40021000 	.word	0x40021000
 8002654:	40010000 	.word	0x40010000
 8002658:	48000400 	.word	0x48000400
 800265c:	48000800 	.word	0x48000800
 8002660:	48000c00 	.word	0x48000c00
 8002664:	48001000 	.word	0x48001000
 8002668:	48001400 	.word	0x48001400
 800266c:	48001800 	.word	0x48001800
 8002670:	40010400 	.word	0x40010400

08002674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	807b      	strh	r3, [r7, #2]
 8002680:	4613      	mov	r3, r2
 8002682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002684:	787b      	ldrb	r3, [r7, #1]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800268a:	887a      	ldrh	r2, [r7, #2]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002690:	e002      	b.n	8002698 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002692:	887a      	ldrh	r2, [r7, #2]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026b6:	887a      	ldrh	r2, [r7, #2]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4013      	ands	r3, r2
 80026bc:	041a      	lsls	r2, r3, #16
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	43d9      	mvns	r1, r3
 80026c2:	887b      	ldrh	r3, [r7, #2]
 80026c4:	400b      	ands	r3, r1
 80026c6:	431a      	orrs	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	619a      	str	r2, [r3, #24]
}
 80026cc:	bf00      	nop
 80026ce:	3714      	adds	r7, #20
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026e2:	4b08      	ldr	r3, [pc, #32]	; (8002704 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026e4:	695a      	ldr	r2, [r3, #20]
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	4013      	ands	r3, r2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d006      	beq.n	80026fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026ee:	4a05      	ldr	r2, [pc, #20]	; (8002704 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026f0:	88fb      	ldrh	r3, [r7, #6]
 80026f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026f4:	88fb      	ldrh	r3, [r7, #6]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fd fdda 	bl	80002b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40010400 	.word	0x40010400

08002708 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800270e:	af00      	add	r7, sp, #0
 8002710:	1d3b      	adds	r3, r7, #4
 8002712:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002714:	1d3b      	adds	r3, r7, #4
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d102      	bne.n	8002722 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	f000 bf01 	b.w	8003524 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002722:	1d3b      	adds	r3, r7, #4
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 8160 	beq.w	80029f2 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002732:	4bae      	ldr	r3, [pc, #696]	; (80029ec <HAL_RCC_OscConfig+0x2e4>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f003 030c 	and.w	r3, r3, #12
 800273a:	2b04      	cmp	r3, #4
 800273c:	d00c      	beq.n	8002758 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800273e:	4bab      	ldr	r3, [pc, #684]	; (80029ec <HAL_RCC_OscConfig+0x2e4>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 030c 	and.w	r3, r3, #12
 8002746:	2b08      	cmp	r3, #8
 8002748:	d159      	bne.n	80027fe <HAL_RCC_OscConfig+0xf6>
 800274a:	4ba8      	ldr	r3, [pc, #672]	; (80029ec <HAL_RCC_OscConfig+0x2e4>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002756:	d152      	bne.n	80027fe <HAL_RCC_OscConfig+0xf6>
 8002758:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800275c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002760:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002764:	fa93 f3a3 	rbit	r3, r3
 8002768:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800276c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002770:	fab3 f383 	clz	r3, r3
 8002774:	b2db      	uxtb	r3, r3
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	b2db      	uxtb	r3, r3
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b01      	cmp	r3, #1
 8002782:	d102      	bne.n	800278a <HAL_RCC_OscConfig+0x82>
 8002784:	4b99      	ldr	r3, [pc, #612]	; (80029ec <HAL_RCC_OscConfig+0x2e4>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	e015      	b.n	80027b6 <HAL_RCC_OscConfig+0xae>
 800278a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800278e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002792:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002796:	fa93 f3a3 	rbit	r3, r3
 800279a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800279e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027a2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80027a6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80027aa:	fa93 f3a3 	rbit	r3, r3
 80027ae:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80027b2:	4b8e      	ldr	r3, [pc, #568]	; (80029ec <HAL_RCC_OscConfig+0x2e4>)
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027ba:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80027be:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80027c2:	fa92 f2a2 	rbit	r2, r2
 80027c6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80027ca:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80027ce:	fab2 f282 	clz	r2, r2
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	f042 0220 	orr.w	r2, r2, #32
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	f002 021f 	and.w	r2, r2, #31
 80027de:	2101      	movs	r1, #1
 80027e0:	fa01 f202 	lsl.w	r2, r1, r2
 80027e4:	4013      	ands	r3, r2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 8102 	beq.w	80029f0 <HAL_RCC_OscConfig+0x2e8>
 80027ec:	1d3b      	adds	r3, r7, #4
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f040 80fc 	bne.w	80029f0 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	f000 be93 	b.w	8003524 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027fe:	1d3b      	adds	r3, r7, #4
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002808:	d106      	bne.n	8002818 <HAL_RCC_OscConfig+0x110>
 800280a:	4b78      	ldr	r3, [pc, #480]	; (80029ec <HAL_RCC_OscConfig+0x2e4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a77      	ldr	r2, [pc, #476]	; (80029ec <HAL_RCC_OscConfig+0x2e4>)
 8002810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	e030      	b.n	800287a <HAL_RCC_OscConfig+0x172>
 8002818:	1d3b      	adds	r3, r7, #4
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10c      	bne.n	800283c <HAL_RCC_OscConfig+0x134>
 8002822:	4b72      	ldr	r3, [pc, #456]	; (80029ec <HAL_RCC_OscConfig+0x2e4>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a71      	ldr	r2, [pc, #452]	; (80029ec <HAL_RCC_OscConfig+0x2e4>)
 8002828:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	4b6f      	ldr	r3, [pc, #444]	; (80029ec <HAL_RCC_OscConfig+0x2e4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a6e      	ldr	r2, [pc, #440]	; (80029ec <HAL_RCC_OscConfig+0x2e4>)
 8002834:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	e01e      	b.n	800287a <HAL_RCC_OscConfig+0x172>
 800283c:	1d3b      	adds	r3, r7, #4
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002846:	d10c      	bne.n	8002862 <HAL_RCC_OscConfig+0x15a>
 8002848:	4b68      	ldr	r3, [pc, #416]	; (80029ec <HAL_RCC_OscConfig+0x2e4>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a67      	ldr	r2, [pc, #412]	; (80029ec <HAL_RCC_OscConfig+0x2e4>)
 800284e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002852:	6013      	str	r3, [r2, #0]
 8002854:	4b65      	ldr	r3, [pc, #404]	; (80029ec <HAL_RCC_OscConfig+0x2e4>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a64      	ldr	r2, [pc, #400]	; (80029ec <HAL_RCC_OscConfig+0x2e4>)
 800285a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	e00b      	b.n	800287a <HAL_RCC_OscConfig+0x172>
 8002862:	4b62      	ldr	r3, [pc, #392]	; (80029ec <HAL_RCC_OscConfig+0x2e4>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a61      	ldr	r2, [pc, #388]	; (80029ec <HAL_RCC_OscConfig+0x2e4>)
 8002868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	4b5f      	ldr	r3, [pc, #380]	; (80029ec <HAL_RCC_OscConfig+0x2e4>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a5e      	ldr	r2, [pc, #376]	; (80029ec <HAL_RCC_OscConfig+0x2e4>)
 8002874:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002878:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800287a:	1d3b      	adds	r3, r7, #4
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d059      	beq.n	8002938 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002884:	f7fe fa04 	bl	8000c90 <HAL_GetTick>
 8002888:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288c:	e00a      	b.n	80028a4 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800288e:	f7fe f9ff 	bl	8000c90 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b64      	cmp	r3, #100	; 0x64
 800289c:	d902      	bls.n	80028a4 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	f000 be40 	b.w	8003524 <HAL_RCC_OscConfig+0xe1c>
 80028a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028a8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ac:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80028b0:	fa93 f3a3 	rbit	r3, r3
 80028b4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80028b8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028bc:	fab3 f383 	clz	r3, r3
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	095b      	lsrs	r3, r3, #5
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	f043 0301 	orr.w	r3, r3, #1
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d102      	bne.n	80028d6 <HAL_RCC_OscConfig+0x1ce>
 80028d0:	4b46      	ldr	r3, [pc, #280]	; (80029ec <HAL_RCC_OscConfig+0x2e4>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	e015      	b.n	8002902 <HAL_RCC_OscConfig+0x1fa>
 80028d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028da:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80028e2:	fa93 f3a3 	rbit	r3, r3
 80028e6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80028ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028ee:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80028f2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80028f6:	fa93 f3a3 	rbit	r3, r3
 80028fa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80028fe:	4b3b      	ldr	r3, [pc, #236]	; (80029ec <HAL_RCC_OscConfig+0x2e4>)
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002906:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800290a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800290e:	fa92 f2a2 	rbit	r2, r2
 8002912:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002916:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800291a:	fab2 f282 	clz	r2, r2
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	f042 0220 	orr.w	r2, r2, #32
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	f002 021f 	and.w	r2, r2, #31
 800292a:	2101      	movs	r1, #1
 800292c:	fa01 f202 	lsl.w	r2, r1, r2
 8002930:	4013      	ands	r3, r2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0ab      	beq.n	800288e <HAL_RCC_OscConfig+0x186>
 8002936:	e05c      	b.n	80029f2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002938:	f7fe f9aa 	bl	8000c90 <HAL_GetTick>
 800293c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002940:	e00a      	b.n	8002958 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002942:	f7fe f9a5 	bl	8000c90 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b64      	cmp	r3, #100	; 0x64
 8002950:	d902      	bls.n	8002958 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	f000 bde6 	b.w	8003524 <HAL_RCC_OscConfig+0xe1c>
 8002958:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800295c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002960:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002964:	fa93 f3a3 	rbit	r3, r3
 8002968:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800296c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002970:	fab3 f383 	clz	r3, r3
 8002974:	b2db      	uxtb	r3, r3
 8002976:	095b      	lsrs	r3, r3, #5
 8002978:	b2db      	uxtb	r3, r3
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b01      	cmp	r3, #1
 8002982:	d102      	bne.n	800298a <HAL_RCC_OscConfig+0x282>
 8002984:	4b19      	ldr	r3, [pc, #100]	; (80029ec <HAL_RCC_OscConfig+0x2e4>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	e015      	b.n	80029b6 <HAL_RCC_OscConfig+0x2ae>
 800298a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800298e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002992:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002996:	fa93 f3a3 	rbit	r3, r3
 800299a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800299e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029a2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80029a6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029aa:	fa93 f3a3 	rbit	r3, r3
 80029ae:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80029b2:	4b0e      	ldr	r3, [pc, #56]	; (80029ec <HAL_RCC_OscConfig+0x2e4>)
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029ba:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80029be:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80029c2:	fa92 f2a2 	rbit	r2, r2
 80029c6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80029ca:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80029ce:	fab2 f282 	clz	r2, r2
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	f042 0220 	orr.w	r2, r2, #32
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	f002 021f 	and.w	r2, r2, #31
 80029de:	2101      	movs	r1, #1
 80029e0:	fa01 f202 	lsl.w	r2, r1, r2
 80029e4:	4013      	ands	r3, r2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1ab      	bne.n	8002942 <HAL_RCC_OscConfig+0x23a>
 80029ea:	e002      	b.n	80029f2 <HAL_RCC_OscConfig+0x2ea>
 80029ec:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029f2:	1d3b      	adds	r3, r7, #4
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 8170 	beq.w	8002ce2 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002a02:	4bd0      	ldr	r3, [pc, #832]	; (8002d44 <HAL_RCC_OscConfig+0x63c>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f003 030c 	and.w	r3, r3, #12
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00c      	beq.n	8002a28 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a0e:	4bcd      	ldr	r3, [pc, #820]	; (8002d44 <HAL_RCC_OscConfig+0x63c>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f003 030c 	and.w	r3, r3, #12
 8002a16:	2b08      	cmp	r3, #8
 8002a18:	d16d      	bne.n	8002af6 <HAL_RCC_OscConfig+0x3ee>
 8002a1a:	4bca      	ldr	r3, [pc, #808]	; (8002d44 <HAL_RCC_OscConfig+0x63c>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002a22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a26:	d166      	bne.n	8002af6 <HAL_RCC_OscConfig+0x3ee>
 8002a28:	2302      	movs	r3, #2
 8002a2a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002a32:	fa93 f3a3 	rbit	r3, r3
 8002a36:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002a3a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a3e:	fab3 f383 	clz	r3, r3
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	095b      	lsrs	r3, r3, #5
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d102      	bne.n	8002a58 <HAL_RCC_OscConfig+0x350>
 8002a52:	4bbc      	ldr	r3, [pc, #752]	; (8002d44 <HAL_RCC_OscConfig+0x63c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	e013      	b.n	8002a80 <HAL_RCC_OscConfig+0x378>
 8002a58:	2302      	movs	r3, #2
 8002a5a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002a62:	fa93 f3a3 	rbit	r3, r3
 8002a66:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002a70:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002a74:	fa93 f3a3 	rbit	r3, r3
 8002a78:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002a7c:	4bb1      	ldr	r3, [pc, #708]	; (8002d44 <HAL_RCC_OscConfig+0x63c>)
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	2202      	movs	r2, #2
 8002a82:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002a86:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002a8a:	fa92 f2a2 	rbit	r2, r2
 8002a8e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002a92:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002a96:	fab2 f282 	clz	r2, r2
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	f042 0220 	orr.w	r2, r2, #32
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	f002 021f 	and.w	r2, r2, #31
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d007      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x3ba>
 8002ab2:	1d3b      	adds	r3, r7, #4
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d002      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	f000 bd31 	b.w	8003524 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac2:	4ba0      	ldr	r3, [pc, #640]	; (8002d44 <HAL_RCC_OscConfig+0x63c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	21f8      	movs	r1, #248	; 0xf8
 8002ad2:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad6:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002ada:	fa91 f1a1 	rbit	r1, r1
 8002ade:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002ae2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002ae6:	fab1 f181 	clz	r1, r1
 8002aea:	b2c9      	uxtb	r1, r1
 8002aec:	408b      	lsls	r3, r1
 8002aee:	4995      	ldr	r1, [pc, #596]	; (8002d44 <HAL_RCC_OscConfig+0x63c>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af4:	e0f5      	b.n	8002ce2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002af6:	1d3b      	adds	r3, r7, #4
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 8085 	beq.w	8002c0c <HAL_RCC_OscConfig+0x504>
 8002b02:	2301      	movs	r3, #1
 8002b04:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b08:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002b0c:	fa93 f3a3 	rbit	r3, r3
 8002b10:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002b14:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b18:	fab3 f383 	clz	r3, r3
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b22:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	461a      	mov	r2, r3
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2e:	f7fe f8af 	bl	8000c90 <HAL_GetTick>
 8002b32:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b36:	e00a      	b.n	8002b4e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b38:	f7fe f8aa 	bl	8000c90 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d902      	bls.n	8002b4e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	f000 bceb 	b.w	8003524 <HAL_RCC_OscConfig+0xe1c>
 8002b4e:	2302      	movs	r3, #2
 8002b50:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b54:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002b58:	fa93 f3a3 	rbit	r3, r3
 8002b5c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002b60:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b64:	fab3 f383 	clz	r3, r3
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	095b      	lsrs	r3, r3, #5
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	f043 0301 	orr.w	r3, r3, #1
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d102      	bne.n	8002b7e <HAL_RCC_OscConfig+0x476>
 8002b78:	4b72      	ldr	r3, [pc, #456]	; (8002d44 <HAL_RCC_OscConfig+0x63c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	e013      	b.n	8002ba6 <HAL_RCC_OscConfig+0x49e>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b84:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002b88:	fa93 f3a3 	rbit	r3, r3
 8002b8c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002b90:	2302      	movs	r3, #2
 8002b92:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002b96:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002b9a:	fa93 f3a3 	rbit	r3, r3
 8002b9e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002ba2:	4b68      	ldr	r3, [pc, #416]	; (8002d44 <HAL_RCC_OscConfig+0x63c>)
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002bac:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002bb0:	fa92 f2a2 	rbit	r2, r2
 8002bb4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002bb8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002bbc:	fab2 f282 	clz	r2, r2
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	f042 0220 	orr.w	r2, r2, #32
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	f002 021f 	and.w	r2, r2, #31
 8002bcc:	2101      	movs	r1, #1
 8002bce:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0af      	beq.n	8002b38 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd8:	4b5a      	ldr	r3, [pc, #360]	; (8002d44 <HAL_RCC_OscConfig+0x63c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002be0:	1d3b      	adds	r3, r7, #4
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	21f8      	movs	r1, #248	; 0xf8
 8002be8:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bec:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002bf0:	fa91 f1a1 	rbit	r1, r1
 8002bf4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002bf8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002bfc:	fab1 f181 	clz	r1, r1
 8002c00:	b2c9      	uxtb	r1, r1
 8002c02:	408b      	lsls	r3, r1
 8002c04:	494f      	ldr	r1, [pc, #316]	; (8002d44 <HAL_RCC_OscConfig+0x63c>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	600b      	str	r3, [r1, #0]
 8002c0a:	e06a      	b.n	8002ce2 <HAL_RCC_OscConfig+0x5da>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c12:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002c16:	fa93 f3a3 	rbit	r3, r3
 8002c1a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002c1e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c22:	fab3 f383 	clz	r3, r3
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	461a      	mov	r2, r3
 8002c34:	2300      	movs	r3, #0
 8002c36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c38:	f7fe f82a 	bl	8000c90 <HAL_GetTick>
 8002c3c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c40:	e00a      	b.n	8002c58 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c42:	f7fe f825 	bl	8000c90 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d902      	bls.n	8002c58 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	f000 bc66 	b.w	8003524 <HAL_RCC_OscConfig+0xe1c>
 8002c58:	2302      	movs	r3, #2
 8002c5a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002c62:	fa93 f3a3 	rbit	r3, r3
 8002c66:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002c6a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c6e:	fab3 f383 	clz	r3, r3
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	095b      	lsrs	r3, r3, #5
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d102      	bne.n	8002c88 <HAL_RCC_OscConfig+0x580>
 8002c82:	4b30      	ldr	r3, [pc, #192]	; (8002d44 <HAL_RCC_OscConfig+0x63c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	e013      	b.n	8002cb0 <HAL_RCC_OscConfig+0x5a8>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002c92:	fa93 f3a3 	rbit	r3, r3
 8002c96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002ca0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002ca4:	fa93 f3a3 	rbit	r3, r3
 8002ca8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002cac:	4b25      	ldr	r3, [pc, #148]	; (8002d44 <HAL_RCC_OscConfig+0x63c>)
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002cb6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002cba:	fa92 f2a2 	rbit	r2, r2
 8002cbe:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002cc2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002cc6:	fab2 f282 	clz	r2, r2
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	f042 0220 	orr.w	r2, r2, #32
 8002cd0:	b2d2      	uxtb	r2, r2
 8002cd2:	f002 021f 	and.w	r2, r2, #31
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cdc:	4013      	ands	r3, r2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1af      	bne.n	8002c42 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ce2:	1d3b      	adds	r3, r7, #4
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0308 	and.w	r3, r3, #8
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 80da 	beq.w	8002ea6 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cf2:	1d3b      	adds	r3, r7, #4
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d069      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x6c8>
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d06:	fa93 f3a3 	rbit	r3, r3
 8002d0a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002d0e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d12:	fab3 f383 	clz	r3, r3
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4b0b      	ldr	r3, [pc, #44]	; (8002d48 <HAL_RCC_OscConfig+0x640>)
 8002d1c:	4413      	add	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	461a      	mov	r2, r3
 8002d22:	2301      	movs	r3, #1
 8002d24:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d26:	f7fd ffb3 	bl	8000c90 <HAL_GetTick>
 8002d2a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d2e:	e00d      	b.n	8002d4c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d30:	f7fd ffae 	bl	8000c90 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d905      	bls.n	8002d4c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e3ef      	b.n	8003524 <HAL_RCC_OscConfig+0xe1c>
 8002d44:	40021000 	.word	0x40021000
 8002d48:	10908120 	.word	0x10908120
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d56:	fa93 f2a3 	rbit	r2, r3
 8002d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002d64:	2202      	movs	r2, #2
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	fa93 f2a3 	rbit	r2, r3
 8002d72:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	fa93 f2a3 	rbit	r2, r3
 8002d8a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002d8e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d90:	4ba4      	ldr	r3, [pc, #656]	; (8003024 <HAL_RCC_OscConfig+0x91c>)
 8002d92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d94:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002d98:	2102      	movs	r1, #2
 8002d9a:	6019      	str	r1, [r3, #0]
 8002d9c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	fa93 f1a3 	rbit	r1, r3
 8002da6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002daa:	6019      	str	r1, [r3, #0]
  return result;
 8002dac:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	fab3 f383 	clz	r3, r3
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	f003 031f 	and.w	r3, r3, #31
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc8:	4013      	ands	r3, r2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0b0      	beq.n	8002d30 <HAL_RCC_OscConfig+0x628>
 8002dce:	e06a      	b.n	8002ea6 <HAL_RCC_OscConfig+0x79e>
 8002dd0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	fa93 f2a3 	rbit	r2, r3
 8002de2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002de6:	601a      	str	r2, [r3, #0]
  return result;
 8002de8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002dec:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dee:	fab3 f383 	clz	r3, r3
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	461a      	mov	r2, r3
 8002df6:	4b8c      	ldr	r3, [pc, #560]	; (8003028 <HAL_RCC_OscConfig+0x920>)
 8002df8:	4413      	add	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	2300      	movs	r3, #0
 8002e00:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e02:	f7fd ff45 	bl	8000c90 <HAL_GetTick>
 8002e06:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e0a:	e009      	b.n	8002e20 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e0c:	f7fd ff40 	bl	8000c90 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e381      	b.n	8003524 <HAL_RCC_OscConfig+0xe1c>
 8002e20:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002e24:	2202      	movs	r2, #2
 8002e26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e28:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	fa93 f2a3 	rbit	r2, r3
 8002e32:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	fa93 f2a3 	rbit	r2, r3
 8002e4a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e54:	2202      	movs	r2, #2
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	fa93 f2a3 	rbit	r2, r3
 8002e62:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002e66:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e68:	4b6e      	ldr	r3, [pc, #440]	; (8003024 <HAL_RCC_OscConfig+0x91c>)
 8002e6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e6c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002e70:	2102      	movs	r1, #2
 8002e72:	6019      	str	r1, [r3, #0]
 8002e74:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	fa93 f1a3 	rbit	r1, r3
 8002e7e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002e82:	6019      	str	r1, [r3, #0]
  return result;
 8002e84:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	fab3 f383 	clz	r3, r3
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	f003 031f 	and.w	r3, r3, #31
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1b2      	bne.n	8002e0c <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ea6:	1d3b      	adds	r3, r7, #4
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0304 	and.w	r3, r3, #4
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 8157 	beq.w	8003164 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ebc:	4b59      	ldr	r3, [pc, #356]	; (8003024 <HAL_RCC_OscConfig+0x91c>)
 8002ebe:	69db      	ldr	r3, [r3, #28]
 8002ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d112      	bne.n	8002eee <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ec8:	4b56      	ldr	r3, [pc, #344]	; (8003024 <HAL_RCC_OscConfig+0x91c>)
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	4a55      	ldr	r2, [pc, #340]	; (8003024 <HAL_RCC_OscConfig+0x91c>)
 8002ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	61d3      	str	r3, [r2, #28]
 8002ed4:	4b53      	ldr	r3, [pc, #332]	; (8003024 <HAL_RCC_OscConfig+0x91c>)
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002edc:	f107 030c 	add.w	r3, r7, #12
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	f107 030c 	add.w	r3, r7, #12
 8002ee6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eee:	4b4f      	ldr	r3, [pc, #316]	; (800302c <HAL_RCC_OscConfig+0x924>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d11a      	bne.n	8002f30 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002efa:	4b4c      	ldr	r3, [pc, #304]	; (800302c <HAL_RCC_OscConfig+0x924>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a4b      	ldr	r2, [pc, #300]	; (800302c <HAL_RCC_OscConfig+0x924>)
 8002f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f04:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f06:	f7fd fec3 	bl	8000c90 <HAL_GetTick>
 8002f0a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f0e:	e009      	b.n	8002f24 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f10:	f7fd febe 	bl	8000c90 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b64      	cmp	r3, #100	; 0x64
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e2ff      	b.n	8003524 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f24:	4b41      	ldr	r3, [pc, #260]	; (800302c <HAL_RCC_OscConfig+0x924>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0ef      	beq.n	8002f10 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f30:	1d3b      	adds	r3, r7, #4
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d106      	bne.n	8002f48 <HAL_RCC_OscConfig+0x840>
 8002f3a:	4b3a      	ldr	r3, [pc, #232]	; (8003024 <HAL_RCC_OscConfig+0x91c>)
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	4a39      	ldr	r2, [pc, #228]	; (8003024 <HAL_RCC_OscConfig+0x91c>)
 8002f40:	f043 0301 	orr.w	r3, r3, #1
 8002f44:	6213      	str	r3, [r2, #32]
 8002f46:	e02f      	b.n	8002fa8 <HAL_RCC_OscConfig+0x8a0>
 8002f48:	1d3b      	adds	r3, r7, #4
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10c      	bne.n	8002f6c <HAL_RCC_OscConfig+0x864>
 8002f52:	4b34      	ldr	r3, [pc, #208]	; (8003024 <HAL_RCC_OscConfig+0x91c>)
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	4a33      	ldr	r2, [pc, #204]	; (8003024 <HAL_RCC_OscConfig+0x91c>)
 8002f58:	f023 0301 	bic.w	r3, r3, #1
 8002f5c:	6213      	str	r3, [r2, #32]
 8002f5e:	4b31      	ldr	r3, [pc, #196]	; (8003024 <HAL_RCC_OscConfig+0x91c>)
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	4a30      	ldr	r2, [pc, #192]	; (8003024 <HAL_RCC_OscConfig+0x91c>)
 8002f64:	f023 0304 	bic.w	r3, r3, #4
 8002f68:	6213      	str	r3, [r2, #32]
 8002f6a:	e01d      	b.n	8002fa8 <HAL_RCC_OscConfig+0x8a0>
 8002f6c:	1d3b      	adds	r3, r7, #4
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	2b05      	cmp	r3, #5
 8002f74:	d10c      	bne.n	8002f90 <HAL_RCC_OscConfig+0x888>
 8002f76:	4b2b      	ldr	r3, [pc, #172]	; (8003024 <HAL_RCC_OscConfig+0x91c>)
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	4a2a      	ldr	r2, [pc, #168]	; (8003024 <HAL_RCC_OscConfig+0x91c>)
 8002f7c:	f043 0304 	orr.w	r3, r3, #4
 8002f80:	6213      	str	r3, [r2, #32]
 8002f82:	4b28      	ldr	r3, [pc, #160]	; (8003024 <HAL_RCC_OscConfig+0x91c>)
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	4a27      	ldr	r2, [pc, #156]	; (8003024 <HAL_RCC_OscConfig+0x91c>)
 8002f88:	f043 0301 	orr.w	r3, r3, #1
 8002f8c:	6213      	str	r3, [r2, #32]
 8002f8e:	e00b      	b.n	8002fa8 <HAL_RCC_OscConfig+0x8a0>
 8002f90:	4b24      	ldr	r3, [pc, #144]	; (8003024 <HAL_RCC_OscConfig+0x91c>)
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	4a23      	ldr	r2, [pc, #140]	; (8003024 <HAL_RCC_OscConfig+0x91c>)
 8002f96:	f023 0301 	bic.w	r3, r3, #1
 8002f9a:	6213      	str	r3, [r2, #32]
 8002f9c:	4b21      	ldr	r3, [pc, #132]	; (8003024 <HAL_RCC_OscConfig+0x91c>)
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	4a20      	ldr	r2, [pc, #128]	; (8003024 <HAL_RCC_OscConfig+0x91c>)
 8002fa2:	f023 0304 	bic.w	r3, r3, #4
 8002fa6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fa8:	1d3b      	adds	r3, r7, #4
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d06a      	beq.n	8003088 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb2:	f7fd fe6d 	bl	8000c90 <HAL_GetTick>
 8002fb6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fba:	e00b      	b.n	8002fd4 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fbc:	f7fd fe68 	bl	8000c90 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e2a7      	b.n	8003524 <HAL_RCC_OscConfig+0xe1c>
 8002fd4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002fd8:	2202      	movs	r2, #2
 8002fda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fdc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	fa93 f2a3 	rbit	r2, r3
 8002fe6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	fa93 f2a3 	rbit	r2, r3
 8002ffe:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003002:	601a      	str	r2, [r3, #0]
  return result;
 8003004:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003008:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800300a:	fab3 f383 	clz	r3, r3
 800300e:	b2db      	uxtb	r3, r3
 8003010:	095b      	lsrs	r3, r3, #5
 8003012:	b2db      	uxtb	r3, r3
 8003014:	f043 0302 	orr.w	r3, r3, #2
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d108      	bne.n	8003030 <HAL_RCC_OscConfig+0x928>
 800301e:	4b01      	ldr	r3, [pc, #4]	; (8003024 <HAL_RCC_OscConfig+0x91c>)
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	e013      	b.n	800304c <HAL_RCC_OscConfig+0x944>
 8003024:	40021000 	.word	0x40021000
 8003028:	10908120 	.word	0x10908120
 800302c:	40007000 	.word	0x40007000
 8003030:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003034:	2202      	movs	r2, #2
 8003036:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003038:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	fa93 f2a3 	rbit	r2, r3
 8003042:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	4bc0      	ldr	r3, [pc, #768]	; (800334c <HAL_RCC_OscConfig+0xc44>)
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003050:	2102      	movs	r1, #2
 8003052:	6011      	str	r1, [r2, #0]
 8003054:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003058:	6812      	ldr	r2, [r2, #0]
 800305a:	fa92 f1a2 	rbit	r1, r2
 800305e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003062:	6011      	str	r1, [r2, #0]
  return result;
 8003064:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003068:	6812      	ldr	r2, [r2, #0]
 800306a:	fab2 f282 	clz	r2, r2
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003074:	b2d2      	uxtb	r2, r2
 8003076:	f002 021f 	and.w	r2, r2, #31
 800307a:	2101      	movs	r1, #1
 800307c:	fa01 f202 	lsl.w	r2, r1, r2
 8003080:	4013      	ands	r3, r2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d09a      	beq.n	8002fbc <HAL_RCC_OscConfig+0x8b4>
 8003086:	e063      	b.n	8003150 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003088:	f7fd fe02 	bl	8000c90 <HAL_GetTick>
 800308c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003090:	e00b      	b.n	80030aa <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003092:	f7fd fdfd 	bl	8000c90 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e23c      	b.n	8003524 <HAL_RCC_OscConfig+0xe1c>
 80030aa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80030ae:	2202      	movs	r2, #2
 80030b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	fa93 f2a3 	rbit	r2, r3
 80030bc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80030c6:	2202      	movs	r2, #2
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	fa93 f2a3 	rbit	r2, r3
 80030d4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80030d8:	601a      	str	r2, [r3, #0]
  return result;
 80030da:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80030de:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e0:	fab3 f383 	clz	r3, r3
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	095b      	lsrs	r3, r3, #5
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	f043 0302 	orr.w	r3, r3, #2
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d102      	bne.n	80030fa <HAL_RCC_OscConfig+0x9f2>
 80030f4:	4b95      	ldr	r3, [pc, #596]	; (800334c <HAL_RCC_OscConfig+0xc44>)
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	e00d      	b.n	8003116 <HAL_RCC_OscConfig+0xa0e>
 80030fa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80030fe:	2202      	movs	r2, #2
 8003100:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003102:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	fa93 f2a3 	rbit	r2, r3
 800310c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	4b8e      	ldr	r3, [pc, #568]	; (800334c <HAL_RCC_OscConfig+0xc44>)
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800311a:	2102      	movs	r1, #2
 800311c:	6011      	str	r1, [r2, #0]
 800311e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	fa92 f1a2 	rbit	r1, r2
 8003128:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800312c:	6011      	str	r1, [r2, #0]
  return result;
 800312e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003132:	6812      	ldr	r2, [r2, #0]
 8003134:	fab2 f282 	clz	r2, r2
 8003138:	b2d2      	uxtb	r2, r2
 800313a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800313e:	b2d2      	uxtb	r2, r2
 8003140:	f002 021f 	and.w	r2, r2, #31
 8003144:	2101      	movs	r1, #1
 8003146:	fa01 f202 	lsl.w	r2, r1, r2
 800314a:	4013      	ands	r3, r2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1a0      	bne.n	8003092 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003150:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003154:	2b01      	cmp	r3, #1
 8003156:	d105      	bne.n	8003164 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003158:	4b7c      	ldr	r3, [pc, #496]	; (800334c <HAL_RCC_OscConfig+0xc44>)
 800315a:	69db      	ldr	r3, [r3, #28]
 800315c:	4a7b      	ldr	r2, [pc, #492]	; (800334c <HAL_RCC_OscConfig+0xc44>)
 800315e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003162:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003164:	1d3b      	adds	r3, r7, #4
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 81d9 	beq.w	8003522 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003170:	4b76      	ldr	r3, [pc, #472]	; (800334c <HAL_RCC_OscConfig+0xc44>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f003 030c 	and.w	r3, r3, #12
 8003178:	2b08      	cmp	r3, #8
 800317a:	f000 81a6 	beq.w	80034ca <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800317e:	1d3b      	adds	r3, r7, #4
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	2b02      	cmp	r3, #2
 8003186:	f040 811e 	bne.w	80033c6 <HAL_RCC_OscConfig+0xcbe>
 800318a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800318e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003192:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003194:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	fa93 f2a3 	rbit	r2, r3
 800319e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80031a2:	601a      	str	r2, [r3, #0]
  return result;
 80031a4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80031a8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031aa:	fab3 f383 	clz	r3, r3
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	461a      	mov	r2, r3
 80031bc:	2300      	movs	r3, #0
 80031be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c0:	f7fd fd66 	bl	8000c90 <HAL_GetTick>
 80031c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031c8:	e009      	b.n	80031de <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ca:	f7fd fd61 	bl	8000c90 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e1a2      	b.n	8003524 <HAL_RCC_OscConfig+0xe1c>
 80031de:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80031e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	fa93 f2a3 	rbit	r2, r3
 80031f2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80031f6:	601a      	str	r2, [r3, #0]
  return result;
 80031f8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80031fc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031fe:	fab3 f383 	clz	r3, r3
 8003202:	b2db      	uxtb	r3, r3
 8003204:	095b      	lsrs	r3, r3, #5
 8003206:	b2db      	uxtb	r3, r3
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b01      	cmp	r3, #1
 8003210:	d102      	bne.n	8003218 <HAL_RCC_OscConfig+0xb10>
 8003212:	4b4e      	ldr	r3, [pc, #312]	; (800334c <HAL_RCC_OscConfig+0xc44>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	e01b      	b.n	8003250 <HAL_RCC_OscConfig+0xb48>
 8003218:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800321c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003220:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003222:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	fa93 f2a3 	rbit	r2, r3
 800322c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003236:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	fa93 f2a3 	rbit	r2, r3
 8003246:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	4b3f      	ldr	r3, [pc, #252]	; (800334c <HAL_RCC_OscConfig+0xc44>)
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003254:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003258:	6011      	str	r1, [r2, #0]
 800325a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800325e:	6812      	ldr	r2, [r2, #0]
 8003260:	fa92 f1a2 	rbit	r1, r2
 8003264:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003268:	6011      	str	r1, [r2, #0]
  return result;
 800326a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800326e:	6812      	ldr	r2, [r2, #0]
 8003270:	fab2 f282 	clz	r2, r2
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	f042 0220 	orr.w	r2, r2, #32
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	f002 021f 	and.w	r2, r2, #31
 8003280:	2101      	movs	r1, #1
 8003282:	fa01 f202 	lsl.w	r2, r1, r2
 8003286:	4013      	ands	r3, r2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d19e      	bne.n	80031ca <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800328c:	4b2f      	ldr	r3, [pc, #188]	; (800334c <HAL_RCC_OscConfig+0xc44>)
 800328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003290:	f023 020f 	bic.w	r2, r3, #15
 8003294:	1d3b      	adds	r3, r7, #4
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	492c      	ldr	r1, [pc, #176]	; (800334c <HAL_RCC_OscConfig+0xc44>)
 800329c:	4313      	orrs	r3, r2
 800329e:	62cb      	str	r3, [r1, #44]	; 0x2c
 80032a0:	4b2a      	ldr	r3, [pc, #168]	; (800334c <HAL_RCC_OscConfig+0xc44>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80032a8:	1d3b      	adds	r3, r7, #4
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6a19      	ldr	r1, [r3, #32]
 80032ae:	1d3b      	adds	r3, r7, #4
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	430b      	orrs	r3, r1
 80032b6:	4925      	ldr	r1, [pc, #148]	; (800334c <HAL_RCC_OscConfig+0xc44>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	604b      	str	r3, [r1, #4]
 80032bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80032c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	fa93 f2a3 	rbit	r2, r3
 80032d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80032d4:	601a      	str	r2, [r3, #0]
  return result;
 80032d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80032da:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032dc:	fab3 f383 	clz	r3, r3
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	461a      	mov	r2, r3
 80032ee:	2301      	movs	r3, #1
 80032f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f2:	f7fd fccd 	bl	8000c90 <HAL_GetTick>
 80032f6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032fa:	e009      	b.n	8003310 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032fc:	f7fd fcc8 	bl	8000c90 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e109      	b.n	8003524 <HAL_RCC_OscConfig+0xe1c>
 8003310:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003314:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003318:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	fa93 f2a3 	rbit	r2, r3
 8003324:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003328:	601a      	str	r2, [r3, #0]
  return result;
 800332a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800332e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003330:	fab3 f383 	clz	r3, r3
 8003334:	b2db      	uxtb	r3, r3
 8003336:	095b      	lsrs	r3, r3, #5
 8003338:	b2db      	uxtb	r3, r3
 800333a:	f043 0301 	orr.w	r3, r3, #1
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b01      	cmp	r3, #1
 8003342:	d105      	bne.n	8003350 <HAL_RCC_OscConfig+0xc48>
 8003344:	4b01      	ldr	r3, [pc, #4]	; (800334c <HAL_RCC_OscConfig+0xc44>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	e01e      	b.n	8003388 <HAL_RCC_OscConfig+0xc80>
 800334a:	bf00      	nop
 800334c:	40021000 	.word	0x40021000
 8003350:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003354:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003358:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	fa93 f2a3 	rbit	r2, r3
 8003364:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800336e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	fa93 f2a3 	rbit	r2, r3
 800337e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	4b6a      	ldr	r3, [pc, #424]	; (8003530 <HAL_RCC_OscConfig+0xe28>)
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800338c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003390:	6011      	str	r1, [r2, #0]
 8003392:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003396:	6812      	ldr	r2, [r2, #0]
 8003398:	fa92 f1a2 	rbit	r1, r2
 800339c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80033a0:	6011      	str	r1, [r2, #0]
  return result;
 80033a2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80033a6:	6812      	ldr	r2, [r2, #0]
 80033a8:	fab2 f282 	clz	r2, r2
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	f042 0220 	orr.w	r2, r2, #32
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	f002 021f 	and.w	r2, r2, #31
 80033b8:	2101      	movs	r1, #1
 80033ba:	fa01 f202 	lsl.w	r2, r1, r2
 80033be:	4013      	ands	r3, r2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d09b      	beq.n	80032fc <HAL_RCC_OscConfig+0xbf4>
 80033c4:	e0ad      	b.n	8003522 <HAL_RCC_OscConfig+0xe1a>
 80033c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80033ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	fa93 f2a3 	rbit	r2, r3
 80033da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80033de:	601a      	str	r2, [r3, #0]
  return result;
 80033e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80033e4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e6:	fab3 f383 	clz	r3, r3
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	461a      	mov	r2, r3
 80033f8:	2300      	movs	r3, #0
 80033fa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fc:	f7fd fc48 	bl	8000c90 <HAL_GetTick>
 8003400:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003404:	e009      	b.n	800341a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003406:	f7fd fc43 	bl	8000c90 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e084      	b.n	8003524 <HAL_RCC_OscConfig+0xe1c>
 800341a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800341e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003422:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003424:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	fa93 f2a3 	rbit	r2, r3
 800342e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003432:	601a      	str	r2, [r3, #0]
  return result;
 8003434:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003438:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800343a:	fab3 f383 	clz	r3, r3
 800343e:	b2db      	uxtb	r3, r3
 8003440:	095b      	lsrs	r3, r3, #5
 8003442:	b2db      	uxtb	r3, r3
 8003444:	f043 0301 	orr.w	r3, r3, #1
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b01      	cmp	r3, #1
 800344c:	d102      	bne.n	8003454 <HAL_RCC_OscConfig+0xd4c>
 800344e:	4b38      	ldr	r3, [pc, #224]	; (8003530 <HAL_RCC_OscConfig+0xe28>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	e01b      	b.n	800348c <HAL_RCC_OscConfig+0xd84>
 8003454:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003458:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800345c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	fa93 f2a3 	rbit	r2, r3
 8003468:	f107 0320 	add.w	r3, r7, #32
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	f107 031c 	add.w	r3, r7, #28
 8003472:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	f107 031c 	add.w	r3, r7, #28
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	fa93 f2a3 	rbit	r2, r3
 8003482:	f107 0318 	add.w	r3, r7, #24
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	4b29      	ldr	r3, [pc, #164]	; (8003530 <HAL_RCC_OscConfig+0xe28>)
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	f107 0214 	add.w	r2, r7, #20
 8003490:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003494:	6011      	str	r1, [r2, #0]
 8003496:	f107 0214 	add.w	r2, r7, #20
 800349a:	6812      	ldr	r2, [r2, #0]
 800349c:	fa92 f1a2 	rbit	r1, r2
 80034a0:	f107 0210 	add.w	r2, r7, #16
 80034a4:	6011      	str	r1, [r2, #0]
  return result;
 80034a6:	f107 0210 	add.w	r2, r7, #16
 80034aa:	6812      	ldr	r2, [r2, #0]
 80034ac:	fab2 f282 	clz	r2, r2
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	f042 0220 	orr.w	r2, r2, #32
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	f002 021f 	and.w	r2, r2, #31
 80034bc:	2101      	movs	r1, #1
 80034be:	fa01 f202 	lsl.w	r2, r1, r2
 80034c2:	4013      	ands	r3, r2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d19e      	bne.n	8003406 <HAL_RCC_OscConfig+0xcfe>
 80034c8:	e02b      	b.n	8003522 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034ca:	1d3b      	adds	r3, r7, #4
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e025      	b.n	8003524 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034d8:	4b15      	ldr	r3, [pc, #84]	; (8003530 <HAL_RCC_OscConfig+0xe28>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80034e0:	4b13      	ldr	r3, [pc, #76]	; (8003530 <HAL_RCC_OscConfig+0xe28>)
 80034e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80034e8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80034ec:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80034f0:	1d3b      	adds	r3, r7, #4
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d111      	bne.n	800351e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80034fa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80034fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003502:	1d3b      	adds	r3, r7, #4
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003508:	429a      	cmp	r2, r3
 800350a:	d108      	bne.n	800351e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800350c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003510:	f003 020f 	and.w	r2, r3, #15
 8003514:	1d3b      	adds	r3, r7, #4
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800351a:	429a      	cmp	r2, r3
 800351c:	d001      	beq.n	8003522 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	40021000 	.word	0x40021000

08003534 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b09e      	sub	sp, #120	; 0x78
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800353e:	2300      	movs	r3, #0
 8003540:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e162      	b.n	8003812 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800354c:	4b90      	ldr	r3, [pc, #576]	; (8003790 <HAL_RCC_ClockConfig+0x25c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d910      	bls.n	800357c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800355a:	4b8d      	ldr	r3, [pc, #564]	; (8003790 <HAL_RCC_ClockConfig+0x25c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f023 0207 	bic.w	r2, r3, #7
 8003562:	498b      	ldr	r1, [pc, #556]	; (8003790 <HAL_RCC_ClockConfig+0x25c>)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	4313      	orrs	r3, r2
 8003568:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800356a:	4b89      	ldr	r3, [pc, #548]	; (8003790 <HAL_RCC_ClockConfig+0x25c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d001      	beq.n	800357c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e14a      	b.n	8003812 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d008      	beq.n	800359a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003588:	4b82      	ldr	r3, [pc, #520]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	497f      	ldr	r1, [pc, #508]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 8003596:	4313      	orrs	r3, r2
 8003598:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 80dc 	beq.w	8003760 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d13c      	bne.n	800362a <HAL_RCC_ClockConfig+0xf6>
 80035b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035b4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035b8:	fa93 f3a3 	rbit	r3, r3
 80035bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80035be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c0:	fab3 f383 	clz	r3, r3
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	095b      	lsrs	r3, r3, #5
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	f043 0301 	orr.w	r3, r3, #1
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d102      	bne.n	80035da <HAL_RCC_ClockConfig+0xa6>
 80035d4:	4b6f      	ldr	r3, [pc, #444]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	e00f      	b.n	80035fa <HAL_RCC_ClockConfig+0xc6>
 80035da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035e2:	fa93 f3a3 	rbit	r3, r3
 80035e6:	667b      	str	r3, [r7, #100]	; 0x64
 80035e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035ec:	663b      	str	r3, [r7, #96]	; 0x60
 80035ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035f0:	fa93 f3a3 	rbit	r3, r3
 80035f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035f6:	4b67      	ldr	r3, [pc, #412]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035fe:	65ba      	str	r2, [r7, #88]	; 0x58
 8003600:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003602:	fa92 f2a2 	rbit	r2, r2
 8003606:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003608:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800360a:	fab2 f282 	clz	r2, r2
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	f042 0220 	orr.w	r2, r2, #32
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	f002 021f 	and.w	r2, r2, #31
 800361a:	2101      	movs	r1, #1
 800361c:	fa01 f202 	lsl.w	r2, r1, r2
 8003620:	4013      	ands	r3, r2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d17b      	bne.n	800371e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e0f3      	b.n	8003812 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2b02      	cmp	r3, #2
 8003630:	d13c      	bne.n	80036ac <HAL_RCC_ClockConfig+0x178>
 8003632:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003636:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800363a:	fa93 f3a3 	rbit	r3, r3
 800363e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003642:	fab3 f383 	clz	r3, r3
 8003646:	b2db      	uxtb	r3, r3
 8003648:	095b      	lsrs	r3, r3, #5
 800364a:	b2db      	uxtb	r3, r3
 800364c:	f043 0301 	orr.w	r3, r3, #1
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b01      	cmp	r3, #1
 8003654:	d102      	bne.n	800365c <HAL_RCC_ClockConfig+0x128>
 8003656:	4b4f      	ldr	r3, [pc, #316]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	e00f      	b.n	800367c <HAL_RCC_ClockConfig+0x148>
 800365c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003660:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003664:	fa93 f3a3 	rbit	r3, r3
 8003668:	647b      	str	r3, [r7, #68]	; 0x44
 800366a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800366e:	643b      	str	r3, [r7, #64]	; 0x40
 8003670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003672:	fa93 f3a3 	rbit	r3, r3
 8003676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003678:	4b46      	ldr	r3, [pc, #280]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003680:	63ba      	str	r2, [r7, #56]	; 0x38
 8003682:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003684:	fa92 f2a2 	rbit	r2, r2
 8003688:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800368a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800368c:	fab2 f282 	clz	r2, r2
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	f042 0220 	orr.w	r2, r2, #32
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	f002 021f 	and.w	r2, r2, #31
 800369c:	2101      	movs	r1, #1
 800369e:	fa01 f202 	lsl.w	r2, r1, r2
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d13a      	bne.n	800371e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e0b2      	b.n	8003812 <HAL_RCC_ClockConfig+0x2de>
 80036ac:	2302      	movs	r3, #2
 80036ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b2:	fa93 f3a3 	rbit	r3, r3
 80036b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80036b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ba:	fab3 f383 	clz	r3, r3
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	095b      	lsrs	r3, r3, #5
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	f043 0301 	orr.w	r3, r3, #1
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d102      	bne.n	80036d4 <HAL_RCC_ClockConfig+0x1a0>
 80036ce:	4b31      	ldr	r3, [pc, #196]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	e00d      	b.n	80036f0 <HAL_RCC_ClockConfig+0x1bc>
 80036d4:	2302      	movs	r3, #2
 80036d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036da:	fa93 f3a3 	rbit	r3, r3
 80036de:	627b      	str	r3, [r7, #36]	; 0x24
 80036e0:	2302      	movs	r3, #2
 80036e2:	623b      	str	r3, [r7, #32]
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	fa93 f3a3 	rbit	r3, r3
 80036ea:	61fb      	str	r3, [r7, #28]
 80036ec:	4b29      	ldr	r3, [pc, #164]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	2202      	movs	r2, #2
 80036f2:	61ba      	str	r2, [r7, #24]
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	fa92 f2a2 	rbit	r2, r2
 80036fa:	617a      	str	r2, [r7, #20]
  return result;
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	fab2 f282 	clz	r2, r2
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	f042 0220 	orr.w	r2, r2, #32
 8003708:	b2d2      	uxtb	r2, r2
 800370a:	f002 021f 	and.w	r2, r2, #31
 800370e:	2101      	movs	r1, #1
 8003710:	fa01 f202 	lsl.w	r2, r1, r2
 8003714:	4013      	ands	r3, r2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e079      	b.n	8003812 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800371e:	4b1d      	ldr	r3, [pc, #116]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f023 0203 	bic.w	r2, r3, #3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	491a      	ldr	r1, [pc, #104]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 800372c:	4313      	orrs	r3, r2
 800372e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003730:	f7fd faae 	bl	8000c90 <HAL_GetTick>
 8003734:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003736:	e00a      	b.n	800374e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003738:	f7fd faaa 	bl	8000c90 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	f241 3288 	movw	r2, #5000	; 0x1388
 8003746:	4293      	cmp	r3, r2
 8003748:	d901      	bls.n	800374e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e061      	b.n	8003812 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800374e:	4b11      	ldr	r3, [pc, #68]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f003 020c 	and.w	r2, r3, #12
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	429a      	cmp	r2, r3
 800375e:	d1eb      	bne.n	8003738 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003760:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <HAL_RCC_ClockConfig+0x25c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	429a      	cmp	r2, r3
 800376c:	d214      	bcs.n	8003798 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800376e:	4b08      	ldr	r3, [pc, #32]	; (8003790 <HAL_RCC_ClockConfig+0x25c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f023 0207 	bic.w	r2, r3, #7
 8003776:	4906      	ldr	r1, [pc, #24]	; (8003790 <HAL_RCC_ClockConfig+0x25c>)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	4313      	orrs	r3, r2
 800377c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800377e:	4b04      	ldr	r3, [pc, #16]	; (8003790 <HAL_RCC_ClockConfig+0x25c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	429a      	cmp	r2, r3
 800378a:	d005      	beq.n	8003798 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e040      	b.n	8003812 <HAL_RCC_ClockConfig+0x2de>
 8003790:	40022000 	.word	0x40022000
 8003794:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d008      	beq.n	80037b6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037a4:	4b1d      	ldr	r3, [pc, #116]	; (800381c <HAL_RCC_ClockConfig+0x2e8>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	491a      	ldr	r1, [pc, #104]	; (800381c <HAL_RCC_ClockConfig+0x2e8>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d009      	beq.n	80037d6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037c2:	4b16      	ldr	r3, [pc, #88]	; (800381c <HAL_RCC_ClockConfig+0x2e8>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	4912      	ldr	r1, [pc, #72]	; (800381c <HAL_RCC_ClockConfig+0x2e8>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80037d6:	f000 f829 	bl	800382c <HAL_RCC_GetSysClockFreq>
 80037da:	4601      	mov	r1, r0
 80037dc:	4b0f      	ldr	r3, [pc, #60]	; (800381c <HAL_RCC_ClockConfig+0x2e8>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037e4:	22f0      	movs	r2, #240	; 0xf0
 80037e6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	fa92 f2a2 	rbit	r2, r2
 80037ee:	60fa      	str	r2, [r7, #12]
  return result;
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	fab2 f282 	clz	r2, r2
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	40d3      	lsrs	r3, r2
 80037fa:	4a09      	ldr	r2, [pc, #36]	; (8003820 <HAL_RCC_ClockConfig+0x2ec>)
 80037fc:	5cd3      	ldrb	r3, [r2, r3]
 80037fe:	fa21 f303 	lsr.w	r3, r1, r3
 8003802:	4a08      	ldr	r2, [pc, #32]	; (8003824 <HAL_RCC_ClockConfig+0x2f0>)
 8003804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003806:	4b08      	ldr	r3, [pc, #32]	; (8003828 <HAL_RCC_ClockConfig+0x2f4>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f7fd f9fc 	bl	8000c08 <HAL_InitTick>
  
  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3778      	adds	r7, #120	; 0x78
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	40021000 	.word	0x40021000
 8003820:	080060d8 	.word	0x080060d8
 8003824:	20000010 	.word	0x20000010
 8003828:	20000014 	.word	0x20000014

0800382c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800382c:	b480      	push	{r7}
 800382e:	b08b      	sub	sp, #44	; 0x2c
 8003830:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003832:	2300      	movs	r3, #0
 8003834:	61fb      	str	r3, [r7, #28]
 8003836:	2300      	movs	r3, #0
 8003838:	61bb      	str	r3, [r7, #24]
 800383a:	2300      	movs	r3, #0
 800383c:	627b      	str	r3, [r7, #36]	; 0x24
 800383e:	2300      	movs	r3, #0
 8003840:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003842:	2300      	movs	r3, #0
 8003844:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003846:	4b2a      	ldr	r3, [pc, #168]	; (80038f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	f003 030c 	and.w	r3, r3, #12
 8003852:	2b04      	cmp	r3, #4
 8003854:	d002      	beq.n	800385c <HAL_RCC_GetSysClockFreq+0x30>
 8003856:	2b08      	cmp	r3, #8
 8003858:	d003      	beq.n	8003862 <HAL_RCC_GetSysClockFreq+0x36>
 800385a:	e03f      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800385c:	4b25      	ldr	r3, [pc, #148]	; (80038f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800385e:	623b      	str	r3, [r7, #32]
      break;
 8003860:	e03f      	b.n	80038e2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003868:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800386c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	fa92 f2a2 	rbit	r2, r2
 8003874:	607a      	str	r2, [r7, #4]
  return result;
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	fab2 f282 	clz	r2, r2
 800387c:	b2d2      	uxtb	r2, r2
 800387e:	40d3      	lsrs	r3, r2
 8003880:	4a1d      	ldr	r2, [pc, #116]	; (80038f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003882:	5cd3      	ldrb	r3, [r2, r3]
 8003884:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003886:	4b1a      	ldr	r3, [pc, #104]	; (80038f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	220f      	movs	r2, #15
 8003890:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	fa92 f2a2 	rbit	r2, r2
 8003898:	60fa      	str	r2, [r7, #12]
  return result;
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	fab2 f282 	clz	r2, r2
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	40d3      	lsrs	r3, r2
 80038a4:	4a15      	ldr	r2, [pc, #84]	; (80038fc <HAL_RCC_GetSysClockFreq+0xd0>)
 80038a6:	5cd3      	ldrb	r3, [r2, r3]
 80038a8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d008      	beq.n	80038c6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80038b4:	4a0f      	ldr	r2, [pc, #60]	; (80038f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	fb02 f303 	mul.w	r3, r2, r3
 80038c2:	627b      	str	r3, [r7, #36]	; 0x24
 80038c4:	e007      	b.n	80038d6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80038c6:	4a0b      	ldr	r2, [pc, #44]	; (80038f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	fb02 f303 	mul.w	r3, r2, r3
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	623b      	str	r3, [r7, #32]
      break;
 80038da:	e002      	b.n	80038e2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038dc:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80038de:	623b      	str	r3, [r7, #32]
      break;
 80038e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038e2:	6a3b      	ldr	r3, [r7, #32]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	372c      	adds	r7, #44	; 0x2c
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	40021000 	.word	0x40021000
 80038f4:	007a1200 	.word	0x007a1200
 80038f8:	080060f0 	.word	0x080060f0
 80038fc:	08006100 	.word	0x08006100

08003900 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003904:	4b03      	ldr	r3, [pc, #12]	; (8003914 <HAL_RCC_GetHCLKFreq+0x14>)
 8003906:	681b      	ldr	r3, [r3, #0]
}
 8003908:	4618      	mov	r0, r3
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	20000010 	.word	0x20000010

08003918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800391e:	f7ff ffef 	bl	8003900 <HAL_RCC_GetHCLKFreq>
 8003922:	4601      	mov	r1, r0
 8003924:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800392c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003930:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	fa92 f2a2 	rbit	r2, r2
 8003938:	603a      	str	r2, [r7, #0]
  return result;
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	fab2 f282 	clz	r2, r2
 8003940:	b2d2      	uxtb	r2, r2
 8003942:	40d3      	lsrs	r3, r2
 8003944:	4a04      	ldr	r2, [pc, #16]	; (8003958 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003946:	5cd3      	ldrb	r3, [r2, r3]
 8003948:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800394c:	4618      	mov	r0, r3
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40021000 	.word	0x40021000
 8003958:	080060e8 	.word	0x080060e8

0800395c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003962:	f7ff ffcd 	bl	8003900 <HAL_RCC_GetHCLKFreq>
 8003966:	4601      	mov	r1, r0
 8003968:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003970:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003974:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	fa92 f2a2 	rbit	r2, r2
 800397c:	603a      	str	r2, [r7, #0]
  return result;
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	fab2 f282 	clz	r2, r2
 8003984:	b2d2      	uxtb	r2, r2
 8003986:	40d3      	lsrs	r3, r2
 8003988:	4a04      	ldr	r2, [pc, #16]	; (800399c <HAL_RCC_GetPCLK2Freq+0x40>)
 800398a:	5cd3      	ldrb	r3, [r2, r3]
 800398c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003990:	4618      	mov	r0, r3
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40021000 	.word	0x40021000
 800399c:	080060e8 	.word	0x080060e8

080039a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b092      	sub	sp, #72	; 0x48
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80039b0:	2300      	movs	r3, #0
 80039b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 80d4 	beq.w	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039c4:	4b4e      	ldr	r3, [pc, #312]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039c6:	69db      	ldr	r3, [r3, #28]
 80039c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10e      	bne.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039d0:	4b4b      	ldr	r3, [pc, #300]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	4a4a      	ldr	r2, [pc, #296]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039da:	61d3      	str	r3, [r2, #28]
 80039dc:	4b48      	ldr	r3, [pc, #288]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039de:	69db      	ldr	r3, [r3, #28]
 80039e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e4:	60bb      	str	r3, [r7, #8]
 80039e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039e8:	2301      	movs	r3, #1
 80039ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ee:	4b45      	ldr	r3, [pc, #276]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d118      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039fa:	4b42      	ldr	r3, [pc, #264]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a41      	ldr	r2, [pc, #260]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a04:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a06:	f7fd f943 	bl	8000c90 <HAL_GetTick>
 8003a0a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0c:	e008      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a0e:	f7fd f93f 	bl	8000c90 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b64      	cmp	r3, #100	; 0x64
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e1d6      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a20:	4b38      	ldr	r3, [pc, #224]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0f0      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a2c:	4b34      	ldr	r3, [pc, #208]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a34:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 8084 	beq.w	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d07c      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a4c:	4b2c      	ldr	r3, [pc, #176]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a5a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5e:	fa93 f3a3 	rbit	r3, r3
 8003a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a66:	fab3 f383 	clz	r3, r3
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	4b26      	ldr	r3, [pc, #152]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a70:	4413      	add	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	461a      	mov	r2, r3
 8003a76:	2301      	movs	r3, #1
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a7e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a82:	fa93 f3a3 	rbit	r3, r3
 8003a86:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a8a:	fab3 f383 	clz	r3, r3
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	461a      	mov	r2, r3
 8003a92:	4b1d      	ldr	r3, [pc, #116]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	461a      	mov	r2, r3
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a9e:	4a18      	ldr	r2, [pc, #96]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aa2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d04b      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aae:	f7fd f8ef 	bl	8000c90 <HAL_GetTick>
 8003ab2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab4:	e00a      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab6:	f7fd f8eb 	bl	8000c90 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e180      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003acc:	2302      	movs	r3, #2
 8003ace:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad2:	fa93 f3a3 	rbit	r3, r3
 8003ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad8:	2302      	movs	r3, #2
 8003ada:	623b      	str	r3, [r7, #32]
 8003adc:	6a3b      	ldr	r3, [r7, #32]
 8003ade:	fa93 f3a3 	rbit	r3, r3
 8003ae2:	61fb      	str	r3, [r7, #28]
  return result;
 8003ae4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae6:	fab3 f383 	clz	r3, r3
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	095b      	lsrs	r3, r3, #5
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	f043 0302 	orr.w	r3, r3, #2
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d108      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003afa:	4b01      	ldr	r3, [pc, #4]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	e00d      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003b00:	40021000 	.word	0x40021000
 8003b04:	40007000 	.word	0x40007000
 8003b08:	10908100 	.word	0x10908100
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	fa93 f3a3 	rbit	r3, r3
 8003b16:	617b      	str	r3, [r7, #20]
 8003b18:	4ba0      	ldr	r3, [pc, #640]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	2202      	movs	r2, #2
 8003b1e:	613a      	str	r2, [r7, #16]
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	fa92 f2a2 	rbit	r2, r2
 8003b26:	60fa      	str	r2, [r7, #12]
  return result;
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	fab2 f282 	clz	r2, r2
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	f002 021f 	and.w	r2, r2, #31
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b40:	4013      	ands	r3, r2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0b7      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003b46:	4b95      	ldr	r3, [pc, #596]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	4992      	ldr	r1, [pc, #584]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d105      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b60:	4b8e      	ldr	r3, [pc, #568]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	4a8d      	ldr	r2, [pc, #564]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b6a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d008      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b78:	4b88      	ldr	r3, [pc, #544]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7c:	f023 0203 	bic.w	r2, r3, #3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	4985      	ldr	r1, [pc, #532]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d008      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b96:	4b81      	ldr	r3, [pc, #516]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	497e      	ldr	r1, [pc, #504]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d008      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bb4:	4b79      	ldr	r3, [pc, #484]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	4976      	ldr	r1, [pc, #472]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0320 	and.w	r3, r3, #32
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d008      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bd2:	4b72      	ldr	r3, [pc, #456]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd6:	f023 0210 	bic.w	r2, r3, #16
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	496f      	ldr	r1, [pc, #444]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d008      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003bf0:	4b6a      	ldr	r3, [pc, #424]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfc:	4967      	ldr	r1, [pc, #412]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d008      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c0e:	4b63      	ldr	r3, [pc, #396]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c12:	f023 0220 	bic.w	r2, r3, #32
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	4960      	ldr	r1, [pc, #384]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d008      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c2c:	4b5b      	ldr	r3, [pc, #364]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c30:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	4958      	ldr	r1, [pc, #352]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0308 	and.w	r3, r3, #8
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d008      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c4a:	4b54      	ldr	r3, [pc, #336]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	4951      	ldr	r1, [pc, #324]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0310 	and.w	r3, r3, #16
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d008      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c68:	4b4c      	ldr	r3, [pc, #304]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	4949      	ldr	r1, [pc, #292]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d008      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c86:	4b45      	ldr	r3, [pc, #276]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c92:	4942      	ldr	r1, [pc, #264]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d008      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ca4:	4b3d      	ldr	r3, [pc, #244]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb0:	493a      	ldr	r1, [pc, #232]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d008      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003cc2:	4b36      	ldr	r3, [pc, #216]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cce:	4933      	ldr	r1, [pc, #204]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003ce0:	4b2e      	ldr	r3, [pc, #184]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cec:	492b      	ldr	r1, [pc, #172]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d008      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003cfe:	4b27      	ldr	r3, [pc, #156]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	4924      	ldr	r1, [pc, #144]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d008      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003d1c:	4b1f      	ldr	r3, [pc, #124]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d20:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d28:	491c      	ldr	r1, [pc, #112]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d008      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003d3a:	4b18      	ldr	r3, [pc, #96]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d46:	4915      	ldr	r1, [pc, #84]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d008      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003d58:	4b10      	ldr	r3, [pc, #64]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d64:	490d      	ldr	r1, [pc, #52]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d008      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003d76:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d82:	4906      	ldr	r1, [pc, #24]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00c      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003d94:	4b01      	ldr	r3, [pc, #4]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d98:	e002      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003d9a:	bf00      	nop
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003da8:	490b      	ldr	r1, [pc, #44]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d008      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003dba:	4b07      	ldr	r3, [pc, #28]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc6:	4904      	ldr	r1, [pc, #16]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3748      	adds	r7, #72	; 0x48
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	40021000 	.word	0x40021000

08003ddc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e049      	b.n	8003e82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d106      	bne.n	8003e08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7fc fdb2 	bl	800096c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3304      	adds	r3, #4
 8003e18:	4619      	mov	r1, r3
 8003e1a:	4610      	mov	r0, r2
 8003e1c:	f000 f9ee 	bl	80041fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
	...

08003e8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d001      	beq.n	8003ea4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e04f      	b.n	8003f44 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0201 	orr.w	r2, r2, #1
 8003eba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a23      	ldr	r2, [pc, #140]	; (8003f50 <HAL_TIM_Base_Start_IT+0xc4>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d01d      	beq.n	8003f02 <HAL_TIM_Base_Start_IT+0x76>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ece:	d018      	beq.n	8003f02 <HAL_TIM_Base_Start_IT+0x76>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a1f      	ldr	r2, [pc, #124]	; (8003f54 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d013      	beq.n	8003f02 <HAL_TIM_Base_Start_IT+0x76>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a1e      	ldr	r2, [pc, #120]	; (8003f58 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d00e      	beq.n	8003f02 <HAL_TIM_Base_Start_IT+0x76>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a1c      	ldr	r2, [pc, #112]	; (8003f5c <HAL_TIM_Base_Start_IT+0xd0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d009      	beq.n	8003f02 <HAL_TIM_Base_Start_IT+0x76>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a1b      	ldr	r2, [pc, #108]	; (8003f60 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d004      	beq.n	8003f02 <HAL_TIM_Base_Start_IT+0x76>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a19      	ldr	r2, [pc, #100]	; (8003f64 <HAL_TIM_Base_Start_IT+0xd8>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d115      	bne.n	8003f2e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	4b17      	ldr	r3, [pc, #92]	; (8003f68 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2b06      	cmp	r3, #6
 8003f12:	d015      	beq.n	8003f40 <HAL_TIM_Base_Start_IT+0xb4>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f1a:	d011      	beq.n	8003f40 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0201 	orr.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f2c:	e008      	b.n	8003f40 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f042 0201 	orr.w	r2, r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	e000      	b.n	8003f42 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	40012c00 	.word	0x40012c00
 8003f54:	40000400 	.word	0x40000400
 8003f58:	40000800 	.word	0x40000800
 8003f5c:	40013400 	.word	0x40013400
 8003f60:	40014000 	.word	0x40014000
 8003f64:	40015000 	.word	0x40015000
 8003f68:	00010007 	.word	0x00010007

08003f6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d122      	bne.n	8003fc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d11b      	bne.n	8003fc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f06f 0202 	mvn.w	r2, #2
 8003f98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f905 	bl	80041be <HAL_TIM_IC_CaptureCallback>
 8003fb4:	e005      	b.n	8003fc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f8f7 	bl	80041aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 f908 	bl	80041d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	f003 0304 	and.w	r3, r3, #4
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d122      	bne.n	800401c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	2b04      	cmp	r3, #4
 8003fe2:	d11b      	bne.n	800401c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f06f 0204 	mvn.w	r2, #4
 8003fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f8db 	bl	80041be <HAL_TIM_IC_CaptureCallback>
 8004008:	e005      	b.n	8004016 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f8cd 	bl	80041aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f8de 	bl	80041d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	f003 0308 	and.w	r3, r3, #8
 8004026:	2b08      	cmp	r3, #8
 8004028:	d122      	bne.n	8004070 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f003 0308 	and.w	r3, r3, #8
 8004034:	2b08      	cmp	r3, #8
 8004036:	d11b      	bne.n	8004070 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f06f 0208 	mvn.w	r2, #8
 8004040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2204      	movs	r2, #4
 8004046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	f003 0303 	and.w	r3, r3, #3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f8b1 	bl	80041be <HAL_TIM_IC_CaptureCallback>
 800405c:	e005      	b.n	800406a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f8a3 	bl	80041aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f8b4 	bl	80041d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	f003 0310 	and.w	r3, r3, #16
 800407a:	2b10      	cmp	r3, #16
 800407c:	d122      	bne.n	80040c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f003 0310 	and.w	r3, r3, #16
 8004088:	2b10      	cmp	r3, #16
 800408a:	d11b      	bne.n	80040c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f06f 0210 	mvn.w	r2, #16
 8004094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2208      	movs	r2, #8
 800409a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f887 	bl	80041be <HAL_TIM_IC_CaptureCallback>
 80040b0:	e005      	b.n	80040be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f879 	bl	80041aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f88a 	bl	80041d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d10e      	bne.n	80040f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d107      	bne.n	80040f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f06f 0201 	mvn.w	r2, #1
 80040e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7fc fbc0 	bl	8000870 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040fa:	2b80      	cmp	r3, #128	; 0x80
 80040fc:	d10e      	bne.n	800411c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004108:	2b80      	cmp	r3, #128	; 0x80
 800410a:	d107      	bne.n	800411c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f918 	bl	800434c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800412a:	d10e      	bne.n	800414a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004136:	2b80      	cmp	r3, #128	; 0x80
 8004138:	d107      	bne.n	800414a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 f90b 	bl	8004360 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004154:	2b40      	cmp	r3, #64	; 0x40
 8004156:	d10e      	bne.n	8004176 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004162:	2b40      	cmp	r3, #64	; 0x40
 8004164:	d107      	bne.n	8004176 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800416e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f838 	bl	80041e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	f003 0320 	and.w	r3, r3, #32
 8004180:	2b20      	cmp	r3, #32
 8004182:	d10e      	bne.n	80041a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f003 0320 	and.w	r3, r3, #32
 800418e:	2b20      	cmp	r3, #32
 8004190:	d107      	bne.n	80041a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f06f 0220 	mvn.w	r2, #32
 800419a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f8cb 	bl	8004338 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041a2:	bf00      	nop
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b083      	sub	sp, #12
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041be:	b480      	push	{r7}
 80041c0:	b083      	sub	sp, #12
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
	...

080041fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a42      	ldr	r2, [pc, #264]	; (8004318 <TIM_Base_SetConfig+0x11c>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d013      	beq.n	800423c <TIM_Base_SetConfig+0x40>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800421a:	d00f      	beq.n	800423c <TIM_Base_SetConfig+0x40>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a3f      	ldr	r2, [pc, #252]	; (800431c <TIM_Base_SetConfig+0x120>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d00b      	beq.n	800423c <TIM_Base_SetConfig+0x40>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a3e      	ldr	r2, [pc, #248]	; (8004320 <TIM_Base_SetConfig+0x124>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d007      	beq.n	800423c <TIM_Base_SetConfig+0x40>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a3d      	ldr	r2, [pc, #244]	; (8004324 <TIM_Base_SetConfig+0x128>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d003      	beq.n	800423c <TIM_Base_SetConfig+0x40>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a3c      	ldr	r2, [pc, #240]	; (8004328 <TIM_Base_SetConfig+0x12c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d108      	bne.n	800424e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004242:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	4313      	orrs	r3, r2
 800424c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a31      	ldr	r2, [pc, #196]	; (8004318 <TIM_Base_SetConfig+0x11c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d01f      	beq.n	8004296 <TIM_Base_SetConfig+0x9a>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800425c:	d01b      	beq.n	8004296 <TIM_Base_SetConfig+0x9a>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a2e      	ldr	r2, [pc, #184]	; (800431c <TIM_Base_SetConfig+0x120>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d017      	beq.n	8004296 <TIM_Base_SetConfig+0x9a>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a2d      	ldr	r2, [pc, #180]	; (8004320 <TIM_Base_SetConfig+0x124>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d013      	beq.n	8004296 <TIM_Base_SetConfig+0x9a>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a2c      	ldr	r2, [pc, #176]	; (8004324 <TIM_Base_SetConfig+0x128>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d00f      	beq.n	8004296 <TIM_Base_SetConfig+0x9a>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a2c      	ldr	r2, [pc, #176]	; (800432c <TIM_Base_SetConfig+0x130>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d00b      	beq.n	8004296 <TIM_Base_SetConfig+0x9a>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a2b      	ldr	r2, [pc, #172]	; (8004330 <TIM_Base_SetConfig+0x134>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d007      	beq.n	8004296 <TIM_Base_SetConfig+0x9a>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a2a      	ldr	r2, [pc, #168]	; (8004334 <TIM_Base_SetConfig+0x138>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d003      	beq.n	8004296 <TIM_Base_SetConfig+0x9a>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a25      	ldr	r2, [pc, #148]	; (8004328 <TIM_Base_SetConfig+0x12c>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d108      	bne.n	80042a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800429c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a12      	ldr	r2, [pc, #72]	; (8004318 <TIM_Base_SetConfig+0x11c>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d013      	beq.n	80042fc <TIM_Base_SetConfig+0x100>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a13      	ldr	r2, [pc, #76]	; (8004324 <TIM_Base_SetConfig+0x128>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d00f      	beq.n	80042fc <TIM_Base_SetConfig+0x100>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a13      	ldr	r2, [pc, #76]	; (800432c <TIM_Base_SetConfig+0x130>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d00b      	beq.n	80042fc <TIM_Base_SetConfig+0x100>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a12      	ldr	r2, [pc, #72]	; (8004330 <TIM_Base_SetConfig+0x134>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d007      	beq.n	80042fc <TIM_Base_SetConfig+0x100>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a11      	ldr	r2, [pc, #68]	; (8004334 <TIM_Base_SetConfig+0x138>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d003      	beq.n	80042fc <TIM_Base_SetConfig+0x100>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a0c      	ldr	r2, [pc, #48]	; (8004328 <TIM_Base_SetConfig+0x12c>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d103      	bne.n	8004304 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	615a      	str	r2, [r3, #20]
}
 800430a:	bf00      	nop
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	40012c00 	.word	0x40012c00
 800431c:	40000400 	.word	0x40000400
 8004320:	40000800 	.word	0x40000800
 8004324:	40013400 	.word	0x40013400
 8004328:	40015000 	.word	0x40015000
 800432c:	40014000 	.word	0x40014000
 8004330:	40014400 	.word	0x40014400
 8004334:	40014800 	.word	0x40014800

08004338 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e040      	b.n	8004408 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800438a:	2b00      	cmp	r3, #0
 800438c:	d106      	bne.n	800439c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7fc fb0e 	bl	80009b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2224      	movs	r2, #36	; 0x24
 80043a0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 0201 	bic.w	r2, r2, #1
 80043b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 fc0e 	bl	8004bd4 <UART_SetConfig>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d101      	bne.n	80043c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e022      	b.n	8004408 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d002      	beq.n	80043d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 fdd6 	bl	8004f7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689a      	ldr	r2, [r3, #8]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0201 	orr.w	r2, r2, #1
 80043fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 fe5d 	bl	80050c0 <UART_CheckIdleState>
 8004406:	4603      	mov	r3, r0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3708      	adds	r7, #8
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b08a      	sub	sp, #40	; 0x28
 8004414:	af02      	add	r7, sp, #8
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	603b      	str	r3, [r7, #0]
 800441c:	4613      	mov	r3, r2
 800441e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004424:	2b20      	cmp	r3, #32
 8004426:	f040 8082 	bne.w	800452e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <HAL_UART_Transmit+0x26>
 8004430:	88fb      	ldrh	r3, [r7, #6]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e07a      	b.n	8004530 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004440:	2b01      	cmp	r3, #1
 8004442:	d101      	bne.n	8004448 <HAL_UART_Transmit+0x38>
 8004444:	2302      	movs	r3, #2
 8004446:	e073      	b.n	8004530 <HAL_UART_Transmit+0x120>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2221      	movs	r2, #33	; 0x21
 800445c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800445e:	f7fc fc17 	bl	8000c90 <HAL_GetTick>
 8004462:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	88fa      	ldrh	r2, [r7, #6]
 8004468:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	88fa      	ldrh	r2, [r7, #6]
 8004470:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800447c:	d108      	bne.n	8004490 <HAL_UART_Transmit+0x80>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d104      	bne.n	8004490 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004486:	2300      	movs	r3, #0
 8004488:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	61bb      	str	r3, [r7, #24]
 800448e:	e003      	b.n	8004498 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004494:	2300      	movs	r3, #0
 8004496:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80044a0:	e02d      	b.n	80044fe <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2200      	movs	r2, #0
 80044aa:	2180      	movs	r1, #128	; 0x80
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f000 fe50 	bl	8005152 <UART_WaitOnFlagUntilTimeout>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e039      	b.n	8004530 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10b      	bne.n	80044da <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	881a      	ldrh	r2, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044ce:	b292      	uxth	r2, r2
 80044d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	3302      	adds	r3, #2
 80044d6:	61bb      	str	r3, [r7, #24]
 80044d8:	e008      	b.n	80044ec <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	781a      	ldrb	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	b292      	uxth	r2, r2
 80044e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	3301      	adds	r3, #1
 80044ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004504:	b29b      	uxth	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1cb      	bne.n	80044a2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	2200      	movs	r2, #0
 8004512:	2140      	movs	r1, #64	; 0x40
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f000 fe1c 	bl	8005152 <UART_WaitOnFlagUntilTimeout>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e005      	b.n	8004530 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2220      	movs	r2, #32
 8004528:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	e000      	b.n	8004530 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800452e:	2302      	movs	r3, #2
  }
}
 8004530:	4618      	mov	r0, r3
 8004532:	3720      	adds	r7, #32
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b08a      	sub	sp, #40	; 0x28
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	4613      	mov	r3, r2
 8004544:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800454a:	2b20      	cmp	r3, #32
 800454c:	d13d      	bne.n	80045ca <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <HAL_UART_Receive_IT+0x22>
 8004554:	88fb      	ldrh	r3, [r7, #6]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e036      	b.n	80045cc <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004564:	2b01      	cmp	r3, #1
 8004566:	d101      	bne.n	800456c <HAL_UART_Receive_IT+0x34>
 8004568:	2302      	movs	r3, #2
 800456a:	e02f      	b.n	80045cc <HAL_UART_Receive_IT+0x94>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d018      	beq.n	80045ba <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	e853 3f00 	ldrex	r3, [r3]
 8004594:	613b      	str	r3, [r7, #16]
   return(result);
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800459c:	627b      	str	r3, [r7, #36]	; 0x24
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	461a      	mov	r2, r3
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a6:	623b      	str	r3, [r7, #32]
 80045a8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045aa:	69f9      	ldr	r1, [r7, #28]
 80045ac:	6a3a      	ldr	r2, [r7, #32]
 80045ae:	e841 2300 	strex	r3, r2, [r1]
 80045b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1e6      	bne.n	8004588 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80045ba:	88fb      	ldrh	r3, [r7, #6]
 80045bc:	461a      	mov	r2, r3
 80045be:	68b9      	ldr	r1, [r7, #8]
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f000 fe8b 	bl	80052dc <UART_Start_Receive_IT>
 80045c6:	4603      	mov	r3, r0
 80045c8:	e000      	b.n	80045cc <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045ca:	2302      	movs	r3, #2
  }
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3728      	adds	r7, #40	; 0x28
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b0ba      	sub	sp, #232	; 0xe8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80045fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80045fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8004602:	4013      	ands	r3, r2
 8004604:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004608:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800460c:	2b00      	cmp	r3, #0
 800460e:	d115      	bne.n	800463c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004614:	f003 0320 	and.w	r3, r3, #32
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00f      	beq.n	800463c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800461c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004620:	f003 0320 	and.w	r3, r3, #32
 8004624:	2b00      	cmp	r3, #0
 8004626:	d009      	beq.n	800463c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 82a4 	beq.w	8004b7a <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	4798      	blx	r3
      }
      return;
 800463a:	e29e      	b.n	8004b7a <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800463c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 8117 	beq.w	8004874 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004646:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d106      	bne.n	8004660 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004652:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004656:	4b85      	ldr	r3, [pc, #532]	; (800486c <HAL_UART_IRQHandler+0x298>)
 8004658:	4013      	ands	r3, r2
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 810a 	beq.w	8004874 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b00      	cmp	r3, #0
 800466a:	d011      	beq.n	8004690 <HAL_UART_IRQHandler+0xbc>
 800466c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00b      	beq.n	8004690 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2201      	movs	r2, #1
 800467e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004686:	f043 0201 	orr.w	r2, r3, #1
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d011      	beq.n	80046c0 <HAL_UART_IRQHandler+0xec>
 800469c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00b      	beq.n	80046c0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2202      	movs	r2, #2
 80046ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046b6:	f043 0204 	orr.w	r2, r3, #4
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c4:	f003 0304 	and.w	r3, r3, #4
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d011      	beq.n	80046f0 <HAL_UART_IRQHandler+0x11c>
 80046cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00b      	beq.n	80046f0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2204      	movs	r2, #4
 80046de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046e6:	f043 0202 	orr.w	r2, r3, #2
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80046f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f4:	f003 0308 	and.w	r3, r3, #8
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d017      	beq.n	800472c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004700:	f003 0320 	and.w	r3, r3, #32
 8004704:	2b00      	cmp	r3, #0
 8004706:	d105      	bne.n	8004714 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004708:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800470c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00b      	beq.n	800472c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2208      	movs	r2, #8
 800471a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004722:	f043 0208 	orr.w	r2, r3, #8
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800472c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004730:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004734:	2b00      	cmp	r3, #0
 8004736:	d012      	beq.n	800475e <HAL_UART_IRQHandler+0x18a>
 8004738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800473c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00c      	beq.n	800475e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800474c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004754:	f043 0220 	orr.w	r2, r3, #32
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 820a 	beq.w	8004b7e <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800476a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800476e:	f003 0320 	and.w	r3, r3, #32
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00d      	beq.n	8004792 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800477a:	f003 0320 	and.w	r3, r3, #32
 800477e:	2b00      	cmp	r3, #0
 8004780:	d007      	beq.n	8004792 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004798:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a6:	2b40      	cmp	r3, #64	; 0x40
 80047a8:	d005      	beq.n	80047b6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80047aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d04f      	beq.n	8004856 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 fe3c 	bl	8005434 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c6:	2b40      	cmp	r3, #64	; 0x40
 80047c8:	d141      	bne.n	800484e <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	3308      	adds	r3, #8
 80047d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047d8:	e853 3f00 	ldrex	r3, [r3]
 80047dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80047e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	3308      	adds	r3, #8
 80047f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80047f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80047fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004802:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004806:	e841 2300 	strex	r3, r2, [r1]
 800480a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800480e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1d9      	bne.n	80047ca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481a:	2b00      	cmp	r3, #0
 800481c:	d013      	beq.n	8004846 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004822:	4a13      	ldr	r2, [pc, #76]	; (8004870 <HAL_UART_IRQHandler+0x29c>)
 8004824:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482a:	4618      	mov	r0, r3
 800482c:	f7fd fd5a 	bl	80022e4 <HAL_DMA_Abort_IT>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d017      	beq.n	8004866 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004840:	4610      	mov	r0, r2
 8004842:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004844:	e00f      	b.n	8004866 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f9ae 	bl	8004ba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800484c:	e00b      	b.n	8004866 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f9aa 	bl	8004ba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004854:	e007      	b.n	8004866 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f9a6 	bl	8004ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004864:	e18b      	b.n	8004b7e <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004866:	bf00      	nop
    return;
 8004868:	e189      	b.n	8004b7e <HAL_UART_IRQHandler+0x5aa>
 800486a:	bf00      	nop
 800486c:	04000120 	.word	0x04000120
 8004870:	080054fb 	.word	0x080054fb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004878:	2b01      	cmp	r3, #1
 800487a:	f040 8143 	bne.w	8004b04 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800487e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004882:	f003 0310 	and.w	r3, r3, #16
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 813c 	beq.w	8004b04 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800488c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004890:	f003 0310 	and.w	r3, r3, #16
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 8135 	beq.w	8004b04 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2210      	movs	r2, #16
 80048a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ac:	2b40      	cmp	r3, #64	; 0x40
 80048ae:	f040 80b1 	bne.w	8004a14 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f000 815d 	beq.w	8004b82 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80048ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048d2:	429a      	cmp	r2, r3
 80048d4:	f080 8155 	bcs.w	8004b82 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	2b20      	cmp	r3, #32
 80048ea:	f000 8085 	beq.w	80049f8 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048fa:	e853 3f00 	ldrex	r3, [r3]
 80048fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004902:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004906:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800490a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	461a      	mov	r2, r3
 8004914:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004918:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800491c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004920:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004924:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004928:	e841 2300 	strex	r3, r2, [r1]
 800492c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004930:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1da      	bne.n	80048ee <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3308      	adds	r3, #8
 800493e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004940:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004942:	e853 3f00 	ldrex	r3, [r3]
 8004946:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004948:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800494a:	f023 0301 	bic.w	r3, r3, #1
 800494e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3308      	adds	r3, #8
 8004958:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800495c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004960:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004962:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004964:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004968:	e841 2300 	strex	r3, r2, [r1]
 800496c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800496e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1e1      	bne.n	8004938 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3308      	adds	r3, #8
 800497a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800497e:	e853 3f00 	ldrex	r3, [r3]
 8004982:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004984:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004986:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800498a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	3308      	adds	r3, #8
 8004994:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004998:	66fa      	str	r2, [r7, #108]	; 0x6c
 800499a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800499e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80049a0:	e841 2300 	strex	r3, r2, [r1]
 80049a4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80049a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1e3      	bne.n	8004974 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2220      	movs	r2, #32
 80049b0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049c0:	e853 3f00 	ldrex	r3, [r3]
 80049c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80049c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049c8:	f023 0310 	bic.w	r3, r3, #16
 80049cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	461a      	mov	r2, r3
 80049d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049da:	65bb      	str	r3, [r7, #88]	; 0x58
 80049dc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80049e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049e2:	e841 2300 	strex	r3, r2, [r1]
 80049e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80049e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1e4      	bne.n	80049b8 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fd fc3d 	bl	8002272 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f8d5 	bl	8004bbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a12:	e0b6      	b.n	8004b82 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 80a8 	beq.w	8004b86 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8004a36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 80a3 	beq.w	8004b86 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a48:	e853 3f00 	ldrex	r3, [r3]
 8004a4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a62:	647b      	str	r3, [r7, #68]	; 0x44
 8004a64:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a6a:	e841 2300 	strex	r3, r2, [r1]
 8004a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1e4      	bne.n	8004a40 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3308      	adds	r3, #8
 8004a7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	e853 3f00 	ldrex	r3, [r3]
 8004a84:	623b      	str	r3, [r7, #32]
   return(result);
 8004a86:	6a3b      	ldr	r3, [r7, #32]
 8004a88:	f023 0301 	bic.w	r3, r3, #1
 8004a8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3308      	adds	r3, #8
 8004a96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a9a:	633a      	str	r2, [r7, #48]	; 0x30
 8004a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aa2:	e841 2300 	strex	r3, r2, [r1]
 8004aa6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1e3      	bne.n	8004a76 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	e853 3f00 	ldrex	r3, [r3]
 8004acc:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f023 0310 	bic.w	r3, r3, #16
 8004ad4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	461a      	mov	r2, r3
 8004ade:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ae2:	61fb      	str	r3, [r7, #28]
 8004ae4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae6:	69b9      	ldr	r1, [r7, #24]
 8004ae8:	69fa      	ldr	r2, [r7, #28]
 8004aea:	e841 2300 	strex	r3, r2, [r1]
 8004aee:	617b      	str	r3, [r7, #20]
   return(result);
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1e4      	bne.n	8004ac0 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004af6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004afa:	4619      	mov	r1, r3
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f85d 	bl	8004bbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b02:	e040      	b.n	8004b86 <HAL_UART_IRQHandler+0x5b2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00e      	beq.n	8004b2e <HAL_UART_IRQHandler+0x55a>
 8004b10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d008      	beq.n	8004b2e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004b24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 fe83 	bl	8005832 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b2c:	e02e      	b.n	8004b8c <HAL_UART_IRQHandler+0x5b8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00e      	beq.n	8004b58 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d008      	beq.n	8004b58 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d01d      	beq.n	8004b8a <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	4798      	blx	r3
    }
    return;
 8004b56:	e018      	b.n	8004b8a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d013      	beq.n	8004b8c <HAL_UART_IRQHandler+0x5b8>
 8004b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00d      	beq.n	8004b8c <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 fcd8 	bl	8005526 <UART_EndTransmit_IT>
    return;
 8004b76:	bf00      	nop
 8004b78:	e008      	b.n	8004b8c <HAL_UART_IRQHandler+0x5b8>
      return;
 8004b7a:	bf00      	nop
 8004b7c:	e006      	b.n	8004b8c <HAL_UART_IRQHandler+0x5b8>
    return;
 8004b7e:	bf00      	nop
 8004b80:	e004      	b.n	8004b8c <HAL_UART_IRQHandler+0x5b8>
      return;
 8004b82:	bf00      	nop
 8004b84:	e002      	b.n	8004b8c <HAL_UART_IRQHandler+0x5b8>
      return;
 8004b86:	bf00      	nop
 8004b88:	e000      	b.n	8004b8c <HAL_UART_IRQHandler+0x5b8>
    return;
 8004b8a:	bf00      	nop
  }

}
 8004b8c:	37e8      	adds	r7, #232	; 0xe8
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop

08004b94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b088      	sub	sp, #32
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	431a      	orrs	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	69db      	ldr	r3, [r3, #28]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	4baa      	ldr	r3, [pc, #680]	; (8004ea8 <UART_SetConfig+0x2d4>)
 8004c00:	4013      	ands	r3, r2
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	6812      	ldr	r2, [r2, #0]
 8004c06:	6979      	ldr	r1, [r7, #20]
 8004c08:	430b      	orrs	r3, r1
 8004c0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68da      	ldr	r2, [r3, #12]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a98      	ldr	r2, [pc, #608]	; (8004eac <UART_SetConfig+0x2d8>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d121      	bne.n	8004c94 <UART_SetConfig+0xc0>
 8004c50:	4b97      	ldr	r3, [pc, #604]	; (8004eb0 <UART_SetConfig+0x2dc>)
 8004c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c54:	f003 0303 	and.w	r3, r3, #3
 8004c58:	2b03      	cmp	r3, #3
 8004c5a:	d817      	bhi.n	8004c8c <UART_SetConfig+0xb8>
 8004c5c:	a201      	add	r2, pc, #4	; (adr r2, 8004c64 <UART_SetConfig+0x90>)
 8004c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c62:	bf00      	nop
 8004c64:	08004c75 	.word	0x08004c75
 8004c68:	08004c81 	.word	0x08004c81
 8004c6c:	08004c87 	.word	0x08004c87
 8004c70:	08004c7b 	.word	0x08004c7b
 8004c74:	2301      	movs	r3, #1
 8004c76:	77fb      	strb	r3, [r7, #31]
 8004c78:	e0b2      	b.n	8004de0 <UART_SetConfig+0x20c>
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	77fb      	strb	r3, [r7, #31]
 8004c7e:	e0af      	b.n	8004de0 <UART_SetConfig+0x20c>
 8004c80:	2304      	movs	r3, #4
 8004c82:	77fb      	strb	r3, [r7, #31]
 8004c84:	e0ac      	b.n	8004de0 <UART_SetConfig+0x20c>
 8004c86:	2308      	movs	r3, #8
 8004c88:	77fb      	strb	r3, [r7, #31]
 8004c8a:	e0a9      	b.n	8004de0 <UART_SetConfig+0x20c>
 8004c8c:	2310      	movs	r3, #16
 8004c8e:	77fb      	strb	r3, [r7, #31]
 8004c90:	bf00      	nop
 8004c92:	e0a5      	b.n	8004de0 <UART_SetConfig+0x20c>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a86      	ldr	r2, [pc, #536]	; (8004eb4 <UART_SetConfig+0x2e0>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d123      	bne.n	8004ce6 <UART_SetConfig+0x112>
 8004c9e:	4b84      	ldr	r3, [pc, #528]	; (8004eb0 <UART_SetConfig+0x2dc>)
 8004ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004caa:	d012      	beq.n	8004cd2 <UART_SetConfig+0xfe>
 8004cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cb0:	d802      	bhi.n	8004cb8 <UART_SetConfig+0xe4>
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d007      	beq.n	8004cc6 <UART_SetConfig+0xf2>
 8004cb6:	e012      	b.n	8004cde <UART_SetConfig+0x10a>
 8004cb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cbc:	d00c      	beq.n	8004cd8 <UART_SetConfig+0x104>
 8004cbe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004cc2:	d003      	beq.n	8004ccc <UART_SetConfig+0xf8>
 8004cc4:	e00b      	b.n	8004cde <UART_SetConfig+0x10a>
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	77fb      	strb	r3, [r7, #31]
 8004cca:	e089      	b.n	8004de0 <UART_SetConfig+0x20c>
 8004ccc:	2302      	movs	r3, #2
 8004cce:	77fb      	strb	r3, [r7, #31]
 8004cd0:	e086      	b.n	8004de0 <UART_SetConfig+0x20c>
 8004cd2:	2304      	movs	r3, #4
 8004cd4:	77fb      	strb	r3, [r7, #31]
 8004cd6:	e083      	b.n	8004de0 <UART_SetConfig+0x20c>
 8004cd8:	2308      	movs	r3, #8
 8004cda:	77fb      	strb	r3, [r7, #31]
 8004cdc:	e080      	b.n	8004de0 <UART_SetConfig+0x20c>
 8004cde:	2310      	movs	r3, #16
 8004ce0:	77fb      	strb	r3, [r7, #31]
 8004ce2:	bf00      	nop
 8004ce4:	e07c      	b.n	8004de0 <UART_SetConfig+0x20c>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a73      	ldr	r2, [pc, #460]	; (8004eb8 <UART_SetConfig+0x2e4>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d123      	bne.n	8004d38 <UART_SetConfig+0x164>
 8004cf0:	4b6f      	ldr	r3, [pc, #444]	; (8004eb0 <UART_SetConfig+0x2dc>)
 8004cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004cf8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004cfc:	d012      	beq.n	8004d24 <UART_SetConfig+0x150>
 8004cfe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d02:	d802      	bhi.n	8004d0a <UART_SetConfig+0x136>
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d007      	beq.n	8004d18 <UART_SetConfig+0x144>
 8004d08:	e012      	b.n	8004d30 <UART_SetConfig+0x15c>
 8004d0a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d0e:	d00c      	beq.n	8004d2a <UART_SetConfig+0x156>
 8004d10:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004d14:	d003      	beq.n	8004d1e <UART_SetConfig+0x14a>
 8004d16:	e00b      	b.n	8004d30 <UART_SetConfig+0x15c>
 8004d18:	2300      	movs	r3, #0
 8004d1a:	77fb      	strb	r3, [r7, #31]
 8004d1c:	e060      	b.n	8004de0 <UART_SetConfig+0x20c>
 8004d1e:	2302      	movs	r3, #2
 8004d20:	77fb      	strb	r3, [r7, #31]
 8004d22:	e05d      	b.n	8004de0 <UART_SetConfig+0x20c>
 8004d24:	2304      	movs	r3, #4
 8004d26:	77fb      	strb	r3, [r7, #31]
 8004d28:	e05a      	b.n	8004de0 <UART_SetConfig+0x20c>
 8004d2a:	2308      	movs	r3, #8
 8004d2c:	77fb      	strb	r3, [r7, #31]
 8004d2e:	e057      	b.n	8004de0 <UART_SetConfig+0x20c>
 8004d30:	2310      	movs	r3, #16
 8004d32:	77fb      	strb	r3, [r7, #31]
 8004d34:	bf00      	nop
 8004d36:	e053      	b.n	8004de0 <UART_SetConfig+0x20c>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a5f      	ldr	r2, [pc, #380]	; (8004ebc <UART_SetConfig+0x2e8>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d123      	bne.n	8004d8a <UART_SetConfig+0x1b6>
 8004d42:	4b5b      	ldr	r3, [pc, #364]	; (8004eb0 <UART_SetConfig+0x2dc>)
 8004d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d46:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004d4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d4e:	d012      	beq.n	8004d76 <UART_SetConfig+0x1a2>
 8004d50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d54:	d802      	bhi.n	8004d5c <UART_SetConfig+0x188>
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d007      	beq.n	8004d6a <UART_SetConfig+0x196>
 8004d5a:	e012      	b.n	8004d82 <UART_SetConfig+0x1ae>
 8004d5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d60:	d00c      	beq.n	8004d7c <UART_SetConfig+0x1a8>
 8004d62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d66:	d003      	beq.n	8004d70 <UART_SetConfig+0x19c>
 8004d68:	e00b      	b.n	8004d82 <UART_SetConfig+0x1ae>
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	77fb      	strb	r3, [r7, #31]
 8004d6e:	e037      	b.n	8004de0 <UART_SetConfig+0x20c>
 8004d70:	2302      	movs	r3, #2
 8004d72:	77fb      	strb	r3, [r7, #31]
 8004d74:	e034      	b.n	8004de0 <UART_SetConfig+0x20c>
 8004d76:	2304      	movs	r3, #4
 8004d78:	77fb      	strb	r3, [r7, #31]
 8004d7a:	e031      	b.n	8004de0 <UART_SetConfig+0x20c>
 8004d7c:	2308      	movs	r3, #8
 8004d7e:	77fb      	strb	r3, [r7, #31]
 8004d80:	e02e      	b.n	8004de0 <UART_SetConfig+0x20c>
 8004d82:	2310      	movs	r3, #16
 8004d84:	77fb      	strb	r3, [r7, #31]
 8004d86:	bf00      	nop
 8004d88:	e02a      	b.n	8004de0 <UART_SetConfig+0x20c>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a4c      	ldr	r2, [pc, #304]	; (8004ec0 <UART_SetConfig+0x2ec>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d123      	bne.n	8004ddc <UART_SetConfig+0x208>
 8004d94:	4b46      	ldr	r3, [pc, #280]	; (8004eb0 <UART_SetConfig+0x2dc>)
 8004d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d98:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004d9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004da0:	d012      	beq.n	8004dc8 <UART_SetConfig+0x1f4>
 8004da2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004da6:	d802      	bhi.n	8004dae <UART_SetConfig+0x1da>
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d007      	beq.n	8004dbc <UART_SetConfig+0x1e8>
 8004dac:	e012      	b.n	8004dd4 <UART_SetConfig+0x200>
 8004dae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004db2:	d00c      	beq.n	8004dce <UART_SetConfig+0x1fa>
 8004db4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004db8:	d003      	beq.n	8004dc2 <UART_SetConfig+0x1ee>
 8004dba:	e00b      	b.n	8004dd4 <UART_SetConfig+0x200>
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	77fb      	strb	r3, [r7, #31]
 8004dc0:	e00e      	b.n	8004de0 <UART_SetConfig+0x20c>
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	77fb      	strb	r3, [r7, #31]
 8004dc6:	e00b      	b.n	8004de0 <UART_SetConfig+0x20c>
 8004dc8:	2304      	movs	r3, #4
 8004dca:	77fb      	strb	r3, [r7, #31]
 8004dcc:	e008      	b.n	8004de0 <UART_SetConfig+0x20c>
 8004dce:	2308      	movs	r3, #8
 8004dd0:	77fb      	strb	r3, [r7, #31]
 8004dd2:	e005      	b.n	8004de0 <UART_SetConfig+0x20c>
 8004dd4:	2310      	movs	r3, #16
 8004dd6:	77fb      	strb	r3, [r7, #31]
 8004dd8:	bf00      	nop
 8004dda:	e001      	b.n	8004de0 <UART_SetConfig+0x20c>
 8004ddc:	2310      	movs	r3, #16
 8004dde:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	69db      	ldr	r3, [r3, #28]
 8004de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004de8:	d16e      	bne.n	8004ec8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004dea:	7ffb      	ldrb	r3, [r7, #31]
 8004dec:	2b08      	cmp	r3, #8
 8004dee:	d828      	bhi.n	8004e42 <UART_SetConfig+0x26e>
 8004df0:	a201      	add	r2, pc, #4	; (adr r2, 8004df8 <UART_SetConfig+0x224>)
 8004df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df6:	bf00      	nop
 8004df8:	08004e1d 	.word	0x08004e1d
 8004dfc:	08004e25 	.word	0x08004e25
 8004e00:	08004e2d 	.word	0x08004e2d
 8004e04:	08004e43 	.word	0x08004e43
 8004e08:	08004e33 	.word	0x08004e33
 8004e0c:	08004e43 	.word	0x08004e43
 8004e10:	08004e43 	.word	0x08004e43
 8004e14:	08004e43 	.word	0x08004e43
 8004e18:	08004e3b 	.word	0x08004e3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e1c:	f7fe fd7c 	bl	8003918 <HAL_RCC_GetPCLK1Freq>
 8004e20:	61b8      	str	r0, [r7, #24]
        break;
 8004e22:	e013      	b.n	8004e4c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e24:	f7fe fd9a 	bl	800395c <HAL_RCC_GetPCLK2Freq>
 8004e28:	61b8      	str	r0, [r7, #24]
        break;
 8004e2a:	e00f      	b.n	8004e4c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e2c:	4b25      	ldr	r3, [pc, #148]	; (8004ec4 <UART_SetConfig+0x2f0>)
 8004e2e:	61bb      	str	r3, [r7, #24]
        break;
 8004e30:	e00c      	b.n	8004e4c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e32:	f7fe fcfb 	bl	800382c <HAL_RCC_GetSysClockFreq>
 8004e36:	61b8      	str	r0, [r7, #24]
        break;
 8004e38:	e008      	b.n	8004e4c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e3e:	61bb      	str	r3, [r7, #24]
        break;
 8004e40:	e004      	b.n	8004e4c <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8004e42:	2300      	movs	r3, #0
 8004e44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	77bb      	strb	r3, [r7, #30]
        break;
 8004e4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f000 8086 	beq.w	8004f60 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	005a      	lsls	r2, r3, #1
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	085b      	lsrs	r3, r3, #1
 8004e5e:	441a      	add	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	2b0f      	cmp	r3, #15
 8004e70:	d916      	bls.n	8004ea0 <UART_SetConfig+0x2cc>
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e78:	d212      	bcs.n	8004ea0 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	f023 030f 	bic.w	r3, r3, #15
 8004e82:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	085b      	lsrs	r3, r3, #1
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	f003 0307 	and.w	r3, r3, #7
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	89fb      	ldrh	r3, [r7, #14]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	89fa      	ldrh	r2, [r7, #14]
 8004e9c:	60da      	str	r2, [r3, #12]
 8004e9e:	e05f      	b.n	8004f60 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	77bb      	strb	r3, [r7, #30]
 8004ea4:	e05c      	b.n	8004f60 <UART_SetConfig+0x38c>
 8004ea6:	bf00      	nop
 8004ea8:	efff69f3 	.word	0xefff69f3
 8004eac:	40013800 	.word	0x40013800
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	40004400 	.word	0x40004400
 8004eb8:	40004800 	.word	0x40004800
 8004ebc:	40004c00 	.word	0x40004c00
 8004ec0:	40005000 	.word	0x40005000
 8004ec4:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ec8:	7ffb      	ldrb	r3, [r7, #31]
 8004eca:	2b08      	cmp	r3, #8
 8004ecc:	d827      	bhi.n	8004f1e <UART_SetConfig+0x34a>
 8004ece:	a201      	add	r2, pc, #4	; (adr r2, 8004ed4 <UART_SetConfig+0x300>)
 8004ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed4:	08004ef9 	.word	0x08004ef9
 8004ed8:	08004f01 	.word	0x08004f01
 8004edc:	08004f09 	.word	0x08004f09
 8004ee0:	08004f1f 	.word	0x08004f1f
 8004ee4:	08004f0f 	.word	0x08004f0f
 8004ee8:	08004f1f 	.word	0x08004f1f
 8004eec:	08004f1f 	.word	0x08004f1f
 8004ef0:	08004f1f 	.word	0x08004f1f
 8004ef4:	08004f17 	.word	0x08004f17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ef8:	f7fe fd0e 	bl	8003918 <HAL_RCC_GetPCLK1Freq>
 8004efc:	61b8      	str	r0, [r7, #24]
        break;
 8004efe:	e013      	b.n	8004f28 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f00:	f7fe fd2c 	bl	800395c <HAL_RCC_GetPCLK2Freq>
 8004f04:	61b8      	str	r0, [r7, #24]
        break;
 8004f06:	e00f      	b.n	8004f28 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f08:	4b1b      	ldr	r3, [pc, #108]	; (8004f78 <UART_SetConfig+0x3a4>)
 8004f0a:	61bb      	str	r3, [r7, #24]
        break;
 8004f0c:	e00c      	b.n	8004f28 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f0e:	f7fe fc8d 	bl	800382c <HAL_RCC_GetSysClockFreq>
 8004f12:	61b8      	str	r0, [r7, #24]
        break;
 8004f14:	e008      	b.n	8004f28 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f1a:	61bb      	str	r3, [r7, #24]
        break;
 8004f1c:	e004      	b.n	8004f28 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	77bb      	strb	r3, [r7, #30]
        break;
 8004f26:	bf00      	nop
    }

    if (pclk != 0U)
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d018      	beq.n	8004f60 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	085a      	lsrs	r2, r3, #1
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	441a      	add	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	2b0f      	cmp	r3, #15
 8004f48:	d908      	bls.n	8004f5c <UART_SetConfig+0x388>
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f50:	d204      	bcs.n	8004f5c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	60da      	str	r2, [r3, #12]
 8004f5a:	e001      	b.n	8004f60 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004f6c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3720      	adds	r7, #32
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	007a1200 	.word	0x007a1200

08004f7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00a      	beq.n	8004fa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00a      	beq.n	8004fea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fee:	f003 0308 	and.w	r3, r3, #8
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	f003 0310 	and.w	r3, r3, #16
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00a      	beq.n	800502e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	430a      	orrs	r2, r1
 800502c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005032:	f003 0320 	and.w	r3, r3, #32
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005058:	2b00      	cmp	r3, #0
 800505a:	d01a      	beq.n	8005092 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800507a:	d10a      	bne.n	8005092 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	605a      	str	r2, [r3, #4]
  }
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af02      	add	r7, sp, #8
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050d0:	f7fb fdde 	bl	8000c90 <HAL_GetTick>
 80050d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0308 	and.w	r3, r3, #8
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d10e      	bne.n	8005102 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f82d 	bl	8005152 <UART_WaitOnFlagUntilTimeout>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e023      	b.n	800514a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0304 	and.w	r3, r3, #4
 800510c:	2b04      	cmp	r3, #4
 800510e:	d10e      	bne.n	800512e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005110:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f817 	bl	8005152 <UART_WaitOnFlagUntilTimeout>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e00d      	b.n	800514a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2220      	movs	r2, #32
 8005132:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2220      	movs	r2, #32
 8005138:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b09c      	sub	sp, #112	; 0x70
 8005156:	af00      	add	r7, sp, #0
 8005158:	60f8      	str	r0, [r7, #12]
 800515a:	60b9      	str	r1, [r7, #8]
 800515c:	603b      	str	r3, [r7, #0]
 800515e:	4613      	mov	r3, r2
 8005160:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005162:	e0a5      	b.n	80052b0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005164:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516a:	f000 80a1 	beq.w	80052b0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800516e:	f7fb fd8f 	bl	8000c90 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800517a:	429a      	cmp	r2, r3
 800517c:	d302      	bcc.n	8005184 <UART_WaitOnFlagUntilTimeout+0x32>
 800517e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005180:	2b00      	cmp	r3, #0
 8005182:	d13e      	bne.n	8005202 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800518c:	e853 3f00 	ldrex	r3, [r3]
 8005190:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005194:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005198:	667b      	str	r3, [r7, #100]	; 0x64
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	461a      	mov	r2, r3
 80051a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051a4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80051a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80051aa:	e841 2300 	strex	r3, r2, [r1]
 80051ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80051b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1e6      	bne.n	8005184 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	3308      	adds	r3, #8
 80051bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051c0:	e853 3f00 	ldrex	r3, [r3]
 80051c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c8:	f023 0301 	bic.w	r3, r3, #1
 80051cc:	663b      	str	r3, [r7, #96]	; 0x60
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	3308      	adds	r3, #8
 80051d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80051d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80051d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80051dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051de:	e841 2300 	strex	r3, r2, [r1]
 80051e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80051e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1e5      	bne.n	80051b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2220      	movs	r2, #32
 80051ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2220      	movs	r2, #32
 80051f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e067      	b.n	80052d2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0304 	and.w	r3, r3, #4
 800520c:	2b00      	cmp	r3, #0
 800520e:	d04f      	beq.n	80052b0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800521a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800521e:	d147      	bne.n	80052b0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005228:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005232:	e853 3f00 	ldrex	r3, [r3]
 8005236:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800523e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	461a      	mov	r2, r3
 8005246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005248:	637b      	str	r3, [r7, #52]	; 0x34
 800524a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800524e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005250:	e841 2300 	strex	r3, r2, [r1]
 8005254:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1e6      	bne.n	800522a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	3308      	adds	r3, #8
 8005262:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	e853 3f00 	ldrex	r3, [r3]
 800526a:	613b      	str	r3, [r7, #16]
   return(result);
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	f023 0301 	bic.w	r3, r3, #1
 8005272:	66bb      	str	r3, [r7, #104]	; 0x68
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	3308      	adds	r3, #8
 800527a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800527c:	623a      	str	r2, [r7, #32]
 800527e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005280:	69f9      	ldr	r1, [r7, #28]
 8005282:	6a3a      	ldr	r2, [r7, #32]
 8005284:	e841 2300 	strex	r3, r2, [r1]
 8005288:	61bb      	str	r3, [r7, #24]
   return(result);
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1e5      	bne.n	800525c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2220      	movs	r2, #32
 8005294:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2220      	movs	r2, #32
 800529a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2220      	movs	r2, #32
 80052a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e010      	b.n	80052d2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	69da      	ldr	r2, [r3, #28]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	4013      	ands	r3, r2
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	429a      	cmp	r2, r3
 80052be:	bf0c      	ite	eq
 80052c0:	2301      	moveq	r3, #1
 80052c2:	2300      	movne	r3, #0
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	461a      	mov	r2, r3
 80052c8:	79fb      	ldrb	r3, [r7, #7]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	f43f af4a 	beq.w	8005164 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3770      	adds	r7, #112	; 0x70
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
	...

080052dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052dc:	b480      	push	{r7}
 80052de:	b091      	sub	sp, #68	; 0x44
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	4613      	mov	r3, r2
 80052e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	88fa      	ldrh	r2, [r7, #6]
 80052f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	88fa      	ldrh	r2, [r7, #6]
 80052fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800530e:	d10e      	bne.n	800532e <UART_Start_Receive_IT+0x52>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d105      	bne.n	8005324 <UART_Start_Receive_IT+0x48>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800531e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005322:	e02d      	b.n	8005380 <UART_Start_Receive_IT+0xa4>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	22ff      	movs	r2, #255	; 0xff
 8005328:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800532c:	e028      	b.n	8005380 <UART_Start_Receive_IT+0xa4>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d10d      	bne.n	8005352 <UART_Start_Receive_IT+0x76>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d104      	bne.n	8005348 <UART_Start_Receive_IT+0x6c>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	22ff      	movs	r2, #255	; 0xff
 8005342:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005346:	e01b      	b.n	8005380 <UART_Start_Receive_IT+0xa4>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	227f      	movs	r2, #127	; 0x7f
 800534c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005350:	e016      	b.n	8005380 <UART_Start_Receive_IT+0xa4>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800535a:	d10d      	bne.n	8005378 <UART_Start_Receive_IT+0x9c>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d104      	bne.n	800536e <UART_Start_Receive_IT+0x92>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	227f      	movs	r2, #127	; 0x7f
 8005368:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800536c:	e008      	b.n	8005380 <UART_Start_Receive_IT+0xa4>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	223f      	movs	r2, #63	; 0x3f
 8005372:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005376:	e003      	b.n	8005380 <UART_Start_Receive_IT+0xa4>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2222      	movs	r2, #34	; 0x22
 800538c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	3308      	adds	r3, #8
 8005394:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005398:	e853 3f00 	ldrex	r3, [r3]
 800539c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	f043 0301 	orr.w	r3, r3, #1
 80053a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	3308      	adds	r3, #8
 80053ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80053ae:	637a      	str	r2, [r7, #52]	; 0x34
 80053b0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053b6:	e841 2300 	strex	r3, r2, [r1]
 80053ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80053bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1e5      	bne.n	800538e <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ca:	d107      	bne.n	80053dc <UART_Start_Receive_IT+0x100>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d103      	bne.n	80053dc <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4a15      	ldr	r2, [pc, #84]	; (800542c <UART_Start_Receive_IT+0x150>)
 80053d8:	665a      	str	r2, [r3, #100]	; 0x64
 80053da:	e002      	b.n	80053e2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	4a14      	ldr	r2, [pc, #80]	; (8005430 <UART_Start_Receive_IT+0x154>)
 80053e0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	e853 3f00 	ldrex	r3, [r3]
 80053f6:	613b      	str	r3, [r7, #16]
   return(result);
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80053fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	461a      	mov	r2, r3
 8005406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005408:	623b      	str	r3, [r7, #32]
 800540a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540c:	69f9      	ldr	r1, [r7, #28]
 800540e:	6a3a      	ldr	r2, [r7, #32]
 8005410:	e841 2300 	strex	r3, r2, [r1]
 8005414:	61bb      	str	r3, [r7, #24]
   return(result);
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1e6      	bne.n	80053ea <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3744      	adds	r7, #68	; 0x44
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	080056d7 	.word	0x080056d7
 8005430:	0800557b 	.word	0x0800557b

08005434 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005434:	b480      	push	{r7}
 8005436:	b095      	sub	sp, #84	; 0x54
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005444:	e853 3f00 	ldrex	r3, [r3]
 8005448:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800544a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005450:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	461a      	mov	r2, r3
 8005458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800545a:	643b      	str	r3, [r7, #64]	; 0x40
 800545c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005460:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005462:	e841 2300 	strex	r3, r2, [r1]
 8005466:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1e6      	bne.n	800543c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	3308      	adds	r3, #8
 8005474:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005476:	6a3b      	ldr	r3, [r7, #32]
 8005478:	e853 3f00 	ldrex	r3, [r3]
 800547c:	61fb      	str	r3, [r7, #28]
   return(result);
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	f023 0301 	bic.w	r3, r3, #1
 8005484:	64bb      	str	r3, [r7, #72]	; 0x48
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	3308      	adds	r3, #8
 800548c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800548e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005490:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005492:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005496:	e841 2300 	strex	r3, r2, [r1]
 800549a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800549c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1e5      	bne.n	800546e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d118      	bne.n	80054dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	e853 3f00 	ldrex	r3, [r3]
 80054b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	f023 0310 	bic.w	r3, r3, #16
 80054be:	647b      	str	r3, [r7, #68]	; 0x44
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	461a      	mov	r2, r3
 80054c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054c8:	61bb      	str	r3, [r7, #24]
 80054ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054cc:	6979      	ldr	r1, [r7, #20]
 80054ce:	69ba      	ldr	r2, [r7, #24]
 80054d0:	e841 2300 	strex	r3, r2, [r1]
 80054d4:	613b      	str	r3, [r7, #16]
   return(result);
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1e6      	bne.n	80054aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2220      	movs	r2, #32
 80054e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	665a      	str	r2, [r3, #100]	; 0x64
}
 80054ee:	bf00      	nop
 80054f0:	3754      	adds	r7, #84	; 0x54
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b084      	sub	sp, #16
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005506:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f7ff fb45 	bl	8004ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800551e:	bf00      	nop
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b088      	sub	sp, #32
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	e853 3f00 	ldrex	r3, [r3]
 800553a:	60bb      	str	r3, [r7, #8]
   return(result);
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005542:	61fb      	str	r3, [r7, #28]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	461a      	mov	r2, r3
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	61bb      	str	r3, [r7, #24]
 800554e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005550:	6979      	ldr	r1, [r7, #20]
 8005552:	69ba      	ldr	r2, [r7, #24]
 8005554:	e841 2300 	strex	r3, r2, [r1]
 8005558:	613b      	str	r3, [r7, #16]
   return(result);
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1e6      	bne.n	800552e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2220      	movs	r2, #32
 8005564:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7ff fb11 	bl	8004b94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005572:	bf00      	nop
 8005574:	3720      	adds	r7, #32
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b096      	sub	sp, #88	; 0x58
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005588:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005590:	2b22      	cmp	r3, #34	; 0x22
 8005592:	f040 8094 	bne.w	80056be <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800559c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80055a0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80055a4:	b2d9      	uxtb	r1, r3
 80055a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80055aa:	b2da      	uxtb	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b0:	400a      	ands	r2, r1
 80055b2:	b2d2      	uxtb	r2, r2
 80055b4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ba:	1c5a      	adds	r2, r3, #1
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	3b01      	subs	r3, #1
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055d8:	b29b      	uxth	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d177      	bne.n	80056ce <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e6:	e853 3f00 	ldrex	r3, [r3]
 80055ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055f2:	653b      	str	r3, [r7, #80]	; 0x50
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	461a      	mov	r2, r3
 80055fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055fc:	647b      	str	r3, [r7, #68]	; 0x44
 80055fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005600:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005602:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005604:	e841 2300 	strex	r3, r2, [r1]
 8005608:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800560a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1e6      	bne.n	80055de <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	3308      	adds	r3, #8
 8005616:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	e853 3f00 	ldrex	r3, [r3]
 800561e:	623b      	str	r3, [r7, #32]
   return(result);
 8005620:	6a3b      	ldr	r3, [r7, #32]
 8005622:	f023 0301 	bic.w	r3, r3, #1
 8005626:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	3308      	adds	r3, #8
 800562e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005630:	633a      	str	r2, [r7, #48]	; 0x30
 8005632:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005634:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005638:	e841 2300 	strex	r3, r2, [r1]
 800563c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800563e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1e5      	bne.n	8005610 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2220      	movs	r2, #32
 8005648:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005654:	2b01      	cmp	r3, #1
 8005656:	d12e      	bne.n	80056b6 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	e853 3f00 	ldrex	r3, [r3]
 800566a:	60fb      	str	r3, [r7, #12]
   return(result);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f023 0310 	bic.w	r3, r3, #16
 8005672:	64bb      	str	r3, [r7, #72]	; 0x48
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	461a      	mov	r2, r3
 800567a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800567c:	61fb      	str	r3, [r7, #28]
 800567e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005680:	69b9      	ldr	r1, [r7, #24]
 8005682:	69fa      	ldr	r2, [r7, #28]
 8005684:	e841 2300 	strex	r3, r2, [r1]
 8005688:	617b      	str	r3, [r7, #20]
   return(result);
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1e6      	bne.n	800565e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	f003 0310 	and.w	r3, r3, #16
 800569a:	2b10      	cmp	r3, #16
 800569c:	d103      	bne.n	80056a6 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2210      	movs	r2, #16
 80056a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80056ac:	4619      	mov	r1, r3
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7ff fa84 	bl	8004bbc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80056b4:	e00b      	b.n	80056ce <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f7fa fdea 	bl	8000290 <HAL_UART_RxCpltCallback>
}
 80056bc:	e007      	b.n	80056ce <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	699a      	ldr	r2, [r3, #24]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f042 0208 	orr.w	r2, r2, #8
 80056cc:	619a      	str	r2, [r3, #24]
}
 80056ce:	bf00      	nop
 80056d0:	3758      	adds	r7, #88	; 0x58
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b096      	sub	sp, #88	; 0x58
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80056e4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056ec:	2b22      	cmp	r3, #34	; 0x22
 80056ee:	f040 8094 	bne.w	800581a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80056f8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005700:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005702:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005706:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800570a:	4013      	ands	r3, r2
 800570c:	b29a      	uxth	r2, r3
 800570e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005710:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005716:	1c9a      	adds	r2, r3, #2
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005722:	b29b      	uxth	r3, r3
 8005724:	3b01      	subs	r3, #1
 8005726:	b29a      	uxth	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005734:	b29b      	uxth	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d177      	bne.n	800582a <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005742:	e853 3f00 	ldrex	r3, [r3]
 8005746:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800574e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	461a      	mov	r2, r3
 8005756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005758:	643b      	str	r3, [r7, #64]	; 0x40
 800575a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800575e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005760:	e841 2300 	strex	r3, r2, [r1]
 8005764:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1e6      	bne.n	800573a <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	3308      	adds	r3, #8
 8005772:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	e853 3f00 	ldrex	r3, [r3]
 800577a:	61fb      	str	r3, [r7, #28]
   return(result);
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	f023 0301 	bic.w	r3, r3, #1
 8005782:	64bb      	str	r3, [r7, #72]	; 0x48
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	3308      	adds	r3, #8
 800578a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800578c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800578e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005790:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005794:	e841 2300 	strex	r3, r2, [r1]
 8005798:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1e5      	bne.n	800576c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2220      	movs	r2, #32
 80057a4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d12e      	bne.n	8005812 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	e853 3f00 	ldrex	r3, [r3]
 80057c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	f023 0310 	bic.w	r3, r3, #16
 80057ce:	647b      	str	r3, [r7, #68]	; 0x44
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	461a      	mov	r2, r3
 80057d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057d8:	61bb      	str	r3, [r7, #24]
 80057da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057dc:	6979      	ldr	r1, [r7, #20]
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	e841 2300 	strex	r3, r2, [r1]
 80057e4:	613b      	str	r3, [r7, #16]
   return(result);
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1e6      	bne.n	80057ba <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	69db      	ldr	r3, [r3, #28]
 80057f2:	f003 0310 	and.w	r3, r3, #16
 80057f6:	2b10      	cmp	r3, #16
 80057f8:	d103      	bne.n	8005802 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2210      	movs	r2, #16
 8005800:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005808:	4619      	mov	r1, r3
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7ff f9d6 	bl	8004bbc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005810:	e00b      	b.n	800582a <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7fa fd3c 	bl	8000290 <HAL_UART_RxCpltCallback>
}
 8005818:	e007      	b.n	800582a <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	699a      	ldr	r2, [r3, #24]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f042 0208 	orr.w	r2, r2, #8
 8005828:	619a      	str	r2, [r3, #24]
}
 800582a:	bf00      	nop
 800582c:	3758      	adds	r7, #88	; 0x58
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005832:	b480      	push	{r7}
 8005834:	b083      	sub	sp, #12
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800583a:	bf00      	nop
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
	...

08005848 <__errno>:
 8005848:	4b01      	ldr	r3, [pc, #4]	; (8005850 <__errno+0x8>)
 800584a:	6818      	ldr	r0, [r3, #0]
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	2000001c 	.word	0x2000001c

08005854 <__libc_init_array>:
 8005854:	b570      	push	{r4, r5, r6, lr}
 8005856:	4e0d      	ldr	r6, [pc, #52]	; (800588c <__libc_init_array+0x38>)
 8005858:	4c0d      	ldr	r4, [pc, #52]	; (8005890 <__libc_init_array+0x3c>)
 800585a:	1ba4      	subs	r4, r4, r6
 800585c:	10a4      	asrs	r4, r4, #2
 800585e:	2500      	movs	r5, #0
 8005860:	42a5      	cmp	r5, r4
 8005862:	d109      	bne.n	8005878 <__libc_init_array+0x24>
 8005864:	4e0b      	ldr	r6, [pc, #44]	; (8005894 <__libc_init_array+0x40>)
 8005866:	4c0c      	ldr	r4, [pc, #48]	; (8005898 <__libc_init_array+0x44>)
 8005868:	f000 fc26 	bl	80060b8 <_init>
 800586c:	1ba4      	subs	r4, r4, r6
 800586e:	10a4      	asrs	r4, r4, #2
 8005870:	2500      	movs	r5, #0
 8005872:	42a5      	cmp	r5, r4
 8005874:	d105      	bne.n	8005882 <__libc_init_array+0x2e>
 8005876:	bd70      	pop	{r4, r5, r6, pc}
 8005878:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800587c:	4798      	blx	r3
 800587e:	3501      	adds	r5, #1
 8005880:	e7ee      	b.n	8005860 <__libc_init_array+0xc>
 8005882:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005886:	4798      	blx	r3
 8005888:	3501      	adds	r5, #1
 800588a:	e7f2      	b.n	8005872 <__libc_init_array+0x1e>
 800588c:	08006144 	.word	0x08006144
 8005890:	08006144 	.word	0x08006144
 8005894:	08006144 	.word	0x08006144
 8005898:	08006148 	.word	0x08006148

0800589c <memset>:
 800589c:	4402      	add	r2, r0
 800589e:	4603      	mov	r3, r0
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d100      	bne.n	80058a6 <memset+0xa>
 80058a4:	4770      	bx	lr
 80058a6:	f803 1b01 	strb.w	r1, [r3], #1
 80058aa:	e7f9      	b.n	80058a0 <memset+0x4>

080058ac <siprintf>:
 80058ac:	b40e      	push	{r1, r2, r3}
 80058ae:	b500      	push	{lr}
 80058b0:	b09c      	sub	sp, #112	; 0x70
 80058b2:	ab1d      	add	r3, sp, #116	; 0x74
 80058b4:	9002      	str	r0, [sp, #8]
 80058b6:	9006      	str	r0, [sp, #24]
 80058b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80058bc:	4809      	ldr	r0, [pc, #36]	; (80058e4 <siprintf+0x38>)
 80058be:	9107      	str	r1, [sp, #28]
 80058c0:	9104      	str	r1, [sp, #16]
 80058c2:	4909      	ldr	r1, [pc, #36]	; (80058e8 <siprintf+0x3c>)
 80058c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80058c8:	9105      	str	r1, [sp, #20]
 80058ca:	6800      	ldr	r0, [r0, #0]
 80058cc:	9301      	str	r3, [sp, #4]
 80058ce:	a902      	add	r1, sp, #8
 80058d0:	f000 f866 	bl	80059a0 <_svfiprintf_r>
 80058d4:	9b02      	ldr	r3, [sp, #8]
 80058d6:	2200      	movs	r2, #0
 80058d8:	701a      	strb	r2, [r3, #0]
 80058da:	b01c      	add	sp, #112	; 0x70
 80058dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80058e0:	b003      	add	sp, #12
 80058e2:	4770      	bx	lr
 80058e4:	2000001c 	.word	0x2000001c
 80058e8:	ffff0208 	.word	0xffff0208

080058ec <__ssputs_r>:
 80058ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058f0:	688e      	ldr	r6, [r1, #8]
 80058f2:	429e      	cmp	r6, r3
 80058f4:	4682      	mov	sl, r0
 80058f6:	460c      	mov	r4, r1
 80058f8:	4690      	mov	r8, r2
 80058fa:	4699      	mov	r9, r3
 80058fc:	d837      	bhi.n	800596e <__ssputs_r+0x82>
 80058fe:	898a      	ldrh	r2, [r1, #12]
 8005900:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005904:	d031      	beq.n	800596a <__ssputs_r+0x7e>
 8005906:	6825      	ldr	r5, [r4, #0]
 8005908:	6909      	ldr	r1, [r1, #16]
 800590a:	1a6f      	subs	r7, r5, r1
 800590c:	6965      	ldr	r5, [r4, #20]
 800590e:	2302      	movs	r3, #2
 8005910:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005914:	fb95 f5f3 	sdiv	r5, r5, r3
 8005918:	f109 0301 	add.w	r3, r9, #1
 800591c:	443b      	add	r3, r7
 800591e:	429d      	cmp	r5, r3
 8005920:	bf38      	it	cc
 8005922:	461d      	movcc	r5, r3
 8005924:	0553      	lsls	r3, r2, #21
 8005926:	d530      	bpl.n	800598a <__ssputs_r+0x9e>
 8005928:	4629      	mov	r1, r5
 800592a:	f000 fb2b 	bl	8005f84 <_malloc_r>
 800592e:	4606      	mov	r6, r0
 8005930:	b950      	cbnz	r0, 8005948 <__ssputs_r+0x5c>
 8005932:	230c      	movs	r3, #12
 8005934:	f8ca 3000 	str.w	r3, [sl]
 8005938:	89a3      	ldrh	r3, [r4, #12]
 800593a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800593e:	81a3      	strh	r3, [r4, #12]
 8005940:	f04f 30ff 	mov.w	r0, #4294967295
 8005944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005948:	463a      	mov	r2, r7
 800594a:	6921      	ldr	r1, [r4, #16]
 800594c:	f000 faa8 	bl	8005ea0 <memcpy>
 8005950:	89a3      	ldrh	r3, [r4, #12]
 8005952:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800595a:	81a3      	strh	r3, [r4, #12]
 800595c:	6126      	str	r6, [r4, #16]
 800595e:	6165      	str	r5, [r4, #20]
 8005960:	443e      	add	r6, r7
 8005962:	1bed      	subs	r5, r5, r7
 8005964:	6026      	str	r6, [r4, #0]
 8005966:	60a5      	str	r5, [r4, #8]
 8005968:	464e      	mov	r6, r9
 800596a:	454e      	cmp	r6, r9
 800596c:	d900      	bls.n	8005970 <__ssputs_r+0x84>
 800596e:	464e      	mov	r6, r9
 8005970:	4632      	mov	r2, r6
 8005972:	4641      	mov	r1, r8
 8005974:	6820      	ldr	r0, [r4, #0]
 8005976:	f000 fa9e 	bl	8005eb6 <memmove>
 800597a:	68a3      	ldr	r3, [r4, #8]
 800597c:	1b9b      	subs	r3, r3, r6
 800597e:	60a3      	str	r3, [r4, #8]
 8005980:	6823      	ldr	r3, [r4, #0]
 8005982:	441e      	add	r6, r3
 8005984:	6026      	str	r6, [r4, #0]
 8005986:	2000      	movs	r0, #0
 8005988:	e7dc      	b.n	8005944 <__ssputs_r+0x58>
 800598a:	462a      	mov	r2, r5
 800598c:	f000 fb54 	bl	8006038 <_realloc_r>
 8005990:	4606      	mov	r6, r0
 8005992:	2800      	cmp	r0, #0
 8005994:	d1e2      	bne.n	800595c <__ssputs_r+0x70>
 8005996:	6921      	ldr	r1, [r4, #16]
 8005998:	4650      	mov	r0, sl
 800599a:	f000 faa5 	bl	8005ee8 <_free_r>
 800599e:	e7c8      	b.n	8005932 <__ssputs_r+0x46>

080059a0 <_svfiprintf_r>:
 80059a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a4:	461d      	mov	r5, r3
 80059a6:	898b      	ldrh	r3, [r1, #12]
 80059a8:	061f      	lsls	r7, r3, #24
 80059aa:	b09d      	sub	sp, #116	; 0x74
 80059ac:	4680      	mov	r8, r0
 80059ae:	460c      	mov	r4, r1
 80059b0:	4616      	mov	r6, r2
 80059b2:	d50f      	bpl.n	80059d4 <_svfiprintf_r+0x34>
 80059b4:	690b      	ldr	r3, [r1, #16]
 80059b6:	b96b      	cbnz	r3, 80059d4 <_svfiprintf_r+0x34>
 80059b8:	2140      	movs	r1, #64	; 0x40
 80059ba:	f000 fae3 	bl	8005f84 <_malloc_r>
 80059be:	6020      	str	r0, [r4, #0]
 80059c0:	6120      	str	r0, [r4, #16]
 80059c2:	b928      	cbnz	r0, 80059d0 <_svfiprintf_r+0x30>
 80059c4:	230c      	movs	r3, #12
 80059c6:	f8c8 3000 	str.w	r3, [r8]
 80059ca:	f04f 30ff 	mov.w	r0, #4294967295
 80059ce:	e0c8      	b.n	8005b62 <_svfiprintf_r+0x1c2>
 80059d0:	2340      	movs	r3, #64	; 0x40
 80059d2:	6163      	str	r3, [r4, #20]
 80059d4:	2300      	movs	r3, #0
 80059d6:	9309      	str	r3, [sp, #36]	; 0x24
 80059d8:	2320      	movs	r3, #32
 80059da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059de:	2330      	movs	r3, #48	; 0x30
 80059e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059e4:	9503      	str	r5, [sp, #12]
 80059e6:	f04f 0b01 	mov.w	fp, #1
 80059ea:	4637      	mov	r7, r6
 80059ec:	463d      	mov	r5, r7
 80059ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80059f2:	b10b      	cbz	r3, 80059f8 <_svfiprintf_r+0x58>
 80059f4:	2b25      	cmp	r3, #37	; 0x25
 80059f6:	d13e      	bne.n	8005a76 <_svfiprintf_r+0xd6>
 80059f8:	ebb7 0a06 	subs.w	sl, r7, r6
 80059fc:	d00b      	beq.n	8005a16 <_svfiprintf_r+0x76>
 80059fe:	4653      	mov	r3, sl
 8005a00:	4632      	mov	r2, r6
 8005a02:	4621      	mov	r1, r4
 8005a04:	4640      	mov	r0, r8
 8005a06:	f7ff ff71 	bl	80058ec <__ssputs_r>
 8005a0a:	3001      	adds	r0, #1
 8005a0c:	f000 80a4 	beq.w	8005b58 <_svfiprintf_r+0x1b8>
 8005a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a12:	4453      	add	r3, sl
 8005a14:	9309      	str	r3, [sp, #36]	; 0x24
 8005a16:	783b      	ldrb	r3, [r7, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 809d 	beq.w	8005b58 <_svfiprintf_r+0x1b8>
 8005a1e:	2300      	movs	r3, #0
 8005a20:	f04f 32ff 	mov.w	r2, #4294967295
 8005a24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a28:	9304      	str	r3, [sp, #16]
 8005a2a:	9307      	str	r3, [sp, #28]
 8005a2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a30:	931a      	str	r3, [sp, #104]	; 0x68
 8005a32:	462f      	mov	r7, r5
 8005a34:	2205      	movs	r2, #5
 8005a36:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005a3a:	4850      	ldr	r0, [pc, #320]	; (8005b7c <_svfiprintf_r+0x1dc>)
 8005a3c:	f7fa fbd8 	bl	80001f0 <memchr>
 8005a40:	9b04      	ldr	r3, [sp, #16]
 8005a42:	b9d0      	cbnz	r0, 8005a7a <_svfiprintf_r+0xda>
 8005a44:	06d9      	lsls	r1, r3, #27
 8005a46:	bf44      	itt	mi
 8005a48:	2220      	movmi	r2, #32
 8005a4a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a4e:	071a      	lsls	r2, r3, #28
 8005a50:	bf44      	itt	mi
 8005a52:	222b      	movmi	r2, #43	; 0x2b
 8005a54:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a58:	782a      	ldrb	r2, [r5, #0]
 8005a5a:	2a2a      	cmp	r2, #42	; 0x2a
 8005a5c:	d015      	beq.n	8005a8a <_svfiprintf_r+0xea>
 8005a5e:	9a07      	ldr	r2, [sp, #28]
 8005a60:	462f      	mov	r7, r5
 8005a62:	2000      	movs	r0, #0
 8005a64:	250a      	movs	r5, #10
 8005a66:	4639      	mov	r1, r7
 8005a68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a6c:	3b30      	subs	r3, #48	; 0x30
 8005a6e:	2b09      	cmp	r3, #9
 8005a70:	d94d      	bls.n	8005b0e <_svfiprintf_r+0x16e>
 8005a72:	b1b8      	cbz	r0, 8005aa4 <_svfiprintf_r+0x104>
 8005a74:	e00f      	b.n	8005a96 <_svfiprintf_r+0xf6>
 8005a76:	462f      	mov	r7, r5
 8005a78:	e7b8      	b.n	80059ec <_svfiprintf_r+0x4c>
 8005a7a:	4a40      	ldr	r2, [pc, #256]	; (8005b7c <_svfiprintf_r+0x1dc>)
 8005a7c:	1a80      	subs	r0, r0, r2
 8005a7e:	fa0b f000 	lsl.w	r0, fp, r0
 8005a82:	4318      	orrs	r0, r3
 8005a84:	9004      	str	r0, [sp, #16]
 8005a86:	463d      	mov	r5, r7
 8005a88:	e7d3      	b.n	8005a32 <_svfiprintf_r+0x92>
 8005a8a:	9a03      	ldr	r2, [sp, #12]
 8005a8c:	1d11      	adds	r1, r2, #4
 8005a8e:	6812      	ldr	r2, [r2, #0]
 8005a90:	9103      	str	r1, [sp, #12]
 8005a92:	2a00      	cmp	r2, #0
 8005a94:	db01      	blt.n	8005a9a <_svfiprintf_r+0xfa>
 8005a96:	9207      	str	r2, [sp, #28]
 8005a98:	e004      	b.n	8005aa4 <_svfiprintf_r+0x104>
 8005a9a:	4252      	negs	r2, r2
 8005a9c:	f043 0302 	orr.w	r3, r3, #2
 8005aa0:	9207      	str	r2, [sp, #28]
 8005aa2:	9304      	str	r3, [sp, #16]
 8005aa4:	783b      	ldrb	r3, [r7, #0]
 8005aa6:	2b2e      	cmp	r3, #46	; 0x2e
 8005aa8:	d10c      	bne.n	8005ac4 <_svfiprintf_r+0x124>
 8005aaa:	787b      	ldrb	r3, [r7, #1]
 8005aac:	2b2a      	cmp	r3, #42	; 0x2a
 8005aae:	d133      	bne.n	8005b18 <_svfiprintf_r+0x178>
 8005ab0:	9b03      	ldr	r3, [sp, #12]
 8005ab2:	1d1a      	adds	r2, r3, #4
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	9203      	str	r2, [sp, #12]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	bfb8      	it	lt
 8005abc:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ac0:	3702      	adds	r7, #2
 8005ac2:	9305      	str	r3, [sp, #20]
 8005ac4:	4d2e      	ldr	r5, [pc, #184]	; (8005b80 <_svfiprintf_r+0x1e0>)
 8005ac6:	7839      	ldrb	r1, [r7, #0]
 8005ac8:	2203      	movs	r2, #3
 8005aca:	4628      	mov	r0, r5
 8005acc:	f7fa fb90 	bl	80001f0 <memchr>
 8005ad0:	b138      	cbz	r0, 8005ae2 <_svfiprintf_r+0x142>
 8005ad2:	2340      	movs	r3, #64	; 0x40
 8005ad4:	1b40      	subs	r0, r0, r5
 8005ad6:	fa03 f000 	lsl.w	r0, r3, r0
 8005ada:	9b04      	ldr	r3, [sp, #16]
 8005adc:	4303      	orrs	r3, r0
 8005ade:	3701      	adds	r7, #1
 8005ae0:	9304      	str	r3, [sp, #16]
 8005ae2:	7839      	ldrb	r1, [r7, #0]
 8005ae4:	4827      	ldr	r0, [pc, #156]	; (8005b84 <_svfiprintf_r+0x1e4>)
 8005ae6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005aea:	2206      	movs	r2, #6
 8005aec:	1c7e      	adds	r6, r7, #1
 8005aee:	f7fa fb7f 	bl	80001f0 <memchr>
 8005af2:	2800      	cmp	r0, #0
 8005af4:	d038      	beq.n	8005b68 <_svfiprintf_r+0x1c8>
 8005af6:	4b24      	ldr	r3, [pc, #144]	; (8005b88 <_svfiprintf_r+0x1e8>)
 8005af8:	bb13      	cbnz	r3, 8005b40 <_svfiprintf_r+0x1a0>
 8005afa:	9b03      	ldr	r3, [sp, #12]
 8005afc:	3307      	adds	r3, #7
 8005afe:	f023 0307 	bic.w	r3, r3, #7
 8005b02:	3308      	adds	r3, #8
 8005b04:	9303      	str	r3, [sp, #12]
 8005b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b08:	444b      	add	r3, r9
 8005b0a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b0c:	e76d      	b.n	80059ea <_svfiprintf_r+0x4a>
 8005b0e:	fb05 3202 	mla	r2, r5, r2, r3
 8005b12:	2001      	movs	r0, #1
 8005b14:	460f      	mov	r7, r1
 8005b16:	e7a6      	b.n	8005a66 <_svfiprintf_r+0xc6>
 8005b18:	2300      	movs	r3, #0
 8005b1a:	3701      	adds	r7, #1
 8005b1c:	9305      	str	r3, [sp, #20]
 8005b1e:	4619      	mov	r1, r3
 8005b20:	250a      	movs	r5, #10
 8005b22:	4638      	mov	r0, r7
 8005b24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b28:	3a30      	subs	r2, #48	; 0x30
 8005b2a:	2a09      	cmp	r2, #9
 8005b2c:	d903      	bls.n	8005b36 <_svfiprintf_r+0x196>
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d0c8      	beq.n	8005ac4 <_svfiprintf_r+0x124>
 8005b32:	9105      	str	r1, [sp, #20]
 8005b34:	e7c6      	b.n	8005ac4 <_svfiprintf_r+0x124>
 8005b36:	fb05 2101 	mla	r1, r5, r1, r2
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	4607      	mov	r7, r0
 8005b3e:	e7f0      	b.n	8005b22 <_svfiprintf_r+0x182>
 8005b40:	ab03      	add	r3, sp, #12
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	4622      	mov	r2, r4
 8005b46:	4b11      	ldr	r3, [pc, #68]	; (8005b8c <_svfiprintf_r+0x1ec>)
 8005b48:	a904      	add	r1, sp, #16
 8005b4a:	4640      	mov	r0, r8
 8005b4c:	f3af 8000 	nop.w
 8005b50:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005b54:	4681      	mov	r9, r0
 8005b56:	d1d6      	bne.n	8005b06 <_svfiprintf_r+0x166>
 8005b58:	89a3      	ldrh	r3, [r4, #12]
 8005b5a:	065b      	lsls	r3, r3, #25
 8005b5c:	f53f af35 	bmi.w	80059ca <_svfiprintf_r+0x2a>
 8005b60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b62:	b01d      	add	sp, #116	; 0x74
 8005b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b68:	ab03      	add	r3, sp, #12
 8005b6a:	9300      	str	r3, [sp, #0]
 8005b6c:	4622      	mov	r2, r4
 8005b6e:	4b07      	ldr	r3, [pc, #28]	; (8005b8c <_svfiprintf_r+0x1ec>)
 8005b70:	a904      	add	r1, sp, #16
 8005b72:	4640      	mov	r0, r8
 8005b74:	f000 f882 	bl	8005c7c <_printf_i>
 8005b78:	e7ea      	b.n	8005b50 <_svfiprintf_r+0x1b0>
 8005b7a:	bf00      	nop
 8005b7c:	08006110 	.word	0x08006110
 8005b80:	08006116 	.word	0x08006116
 8005b84:	0800611a 	.word	0x0800611a
 8005b88:	00000000 	.word	0x00000000
 8005b8c:	080058ed 	.word	0x080058ed

08005b90 <_printf_common>:
 8005b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b94:	4691      	mov	r9, r2
 8005b96:	461f      	mov	r7, r3
 8005b98:	688a      	ldr	r2, [r1, #8]
 8005b9a:	690b      	ldr	r3, [r1, #16]
 8005b9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	bfb8      	it	lt
 8005ba4:	4613      	movlt	r3, r2
 8005ba6:	f8c9 3000 	str.w	r3, [r9]
 8005baa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bae:	4606      	mov	r6, r0
 8005bb0:	460c      	mov	r4, r1
 8005bb2:	b112      	cbz	r2, 8005bba <_printf_common+0x2a>
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	f8c9 3000 	str.w	r3, [r9]
 8005bba:	6823      	ldr	r3, [r4, #0]
 8005bbc:	0699      	lsls	r1, r3, #26
 8005bbe:	bf42      	ittt	mi
 8005bc0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005bc4:	3302      	addmi	r3, #2
 8005bc6:	f8c9 3000 	strmi.w	r3, [r9]
 8005bca:	6825      	ldr	r5, [r4, #0]
 8005bcc:	f015 0506 	ands.w	r5, r5, #6
 8005bd0:	d107      	bne.n	8005be2 <_printf_common+0x52>
 8005bd2:	f104 0a19 	add.w	sl, r4, #25
 8005bd6:	68e3      	ldr	r3, [r4, #12]
 8005bd8:	f8d9 2000 	ldr.w	r2, [r9]
 8005bdc:	1a9b      	subs	r3, r3, r2
 8005bde:	42ab      	cmp	r3, r5
 8005be0:	dc28      	bgt.n	8005c34 <_printf_common+0xa4>
 8005be2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005be6:	6822      	ldr	r2, [r4, #0]
 8005be8:	3300      	adds	r3, #0
 8005bea:	bf18      	it	ne
 8005bec:	2301      	movne	r3, #1
 8005bee:	0692      	lsls	r2, r2, #26
 8005bf0:	d42d      	bmi.n	8005c4e <_printf_common+0xbe>
 8005bf2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bf6:	4639      	mov	r1, r7
 8005bf8:	4630      	mov	r0, r6
 8005bfa:	47c0      	blx	r8
 8005bfc:	3001      	adds	r0, #1
 8005bfe:	d020      	beq.n	8005c42 <_printf_common+0xb2>
 8005c00:	6823      	ldr	r3, [r4, #0]
 8005c02:	68e5      	ldr	r5, [r4, #12]
 8005c04:	f8d9 2000 	ldr.w	r2, [r9]
 8005c08:	f003 0306 	and.w	r3, r3, #6
 8005c0c:	2b04      	cmp	r3, #4
 8005c0e:	bf08      	it	eq
 8005c10:	1aad      	subeq	r5, r5, r2
 8005c12:	68a3      	ldr	r3, [r4, #8]
 8005c14:	6922      	ldr	r2, [r4, #16]
 8005c16:	bf0c      	ite	eq
 8005c18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c1c:	2500      	movne	r5, #0
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	bfc4      	itt	gt
 8005c22:	1a9b      	subgt	r3, r3, r2
 8005c24:	18ed      	addgt	r5, r5, r3
 8005c26:	f04f 0900 	mov.w	r9, #0
 8005c2a:	341a      	adds	r4, #26
 8005c2c:	454d      	cmp	r5, r9
 8005c2e:	d11a      	bne.n	8005c66 <_printf_common+0xd6>
 8005c30:	2000      	movs	r0, #0
 8005c32:	e008      	b.n	8005c46 <_printf_common+0xb6>
 8005c34:	2301      	movs	r3, #1
 8005c36:	4652      	mov	r2, sl
 8005c38:	4639      	mov	r1, r7
 8005c3a:	4630      	mov	r0, r6
 8005c3c:	47c0      	blx	r8
 8005c3e:	3001      	adds	r0, #1
 8005c40:	d103      	bne.n	8005c4a <_printf_common+0xba>
 8005c42:	f04f 30ff 	mov.w	r0, #4294967295
 8005c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c4a:	3501      	adds	r5, #1
 8005c4c:	e7c3      	b.n	8005bd6 <_printf_common+0x46>
 8005c4e:	18e1      	adds	r1, r4, r3
 8005c50:	1c5a      	adds	r2, r3, #1
 8005c52:	2030      	movs	r0, #48	; 0x30
 8005c54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c58:	4422      	add	r2, r4
 8005c5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c62:	3302      	adds	r3, #2
 8005c64:	e7c5      	b.n	8005bf2 <_printf_common+0x62>
 8005c66:	2301      	movs	r3, #1
 8005c68:	4622      	mov	r2, r4
 8005c6a:	4639      	mov	r1, r7
 8005c6c:	4630      	mov	r0, r6
 8005c6e:	47c0      	blx	r8
 8005c70:	3001      	adds	r0, #1
 8005c72:	d0e6      	beq.n	8005c42 <_printf_common+0xb2>
 8005c74:	f109 0901 	add.w	r9, r9, #1
 8005c78:	e7d8      	b.n	8005c2c <_printf_common+0x9c>
	...

08005c7c <_printf_i>:
 8005c7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c80:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005c84:	460c      	mov	r4, r1
 8005c86:	7e09      	ldrb	r1, [r1, #24]
 8005c88:	b085      	sub	sp, #20
 8005c8a:	296e      	cmp	r1, #110	; 0x6e
 8005c8c:	4617      	mov	r7, r2
 8005c8e:	4606      	mov	r6, r0
 8005c90:	4698      	mov	r8, r3
 8005c92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c94:	f000 80b3 	beq.w	8005dfe <_printf_i+0x182>
 8005c98:	d822      	bhi.n	8005ce0 <_printf_i+0x64>
 8005c9a:	2963      	cmp	r1, #99	; 0x63
 8005c9c:	d036      	beq.n	8005d0c <_printf_i+0x90>
 8005c9e:	d80a      	bhi.n	8005cb6 <_printf_i+0x3a>
 8005ca0:	2900      	cmp	r1, #0
 8005ca2:	f000 80b9 	beq.w	8005e18 <_printf_i+0x19c>
 8005ca6:	2958      	cmp	r1, #88	; 0x58
 8005ca8:	f000 8083 	beq.w	8005db2 <_printf_i+0x136>
 8005cac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cb0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005cb4:	e032      	b.n	8005d1c <_printf_i+0xa0>
 8005cb6:	2964      	cmp	r1, #100	; 0x64
 8005cb8:	d001      	beq.n	8005cbe <_printf_i+0x42>
 8005cba:	2969      	cmp	r1, #105	; 0x69
 8005cbc:	d1f6      	bne.n	8005cac <_printf_i+0x30>
 8005cbe:	6820      	ldr	r0, [r4, #0]
 8005cc0:	6813      	ldr	r3, [r2, #0]
 8005cc2:	0605      	lsls	r5, r0, #24
 8005cc4:	f103 0104 	add.w	r1, r3, #4
 8005cc8:	d52a      	bpl.n	8005d20 <_printf_i+0xa4>
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6011      	str	r1, [r2, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	da03      	bge.n	8005cda <_printf_i+0x5e>
 8005cd2:	222d      	movs	r2, #45	; 0x2d
 8005cd4:	425b      	negs	r3, r3
 8005cd6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005cda:	486f      	ldr	r0, [pc, #444]	; (8005e98 <_printf_i+0x21c>)
 8005cdc:	220a      	movs	r2, #10
 8005cde:	e039      	b.n	8005d54 <_printf_i+0xd8>
 8005ce0:	2973      	cmp	r1, #115	; 0x73
 8005ce2:	f000 809d 	beq.w	8005e20 <_printf_i+0x1a4>
 8005ce6:	d808      	bhi.n	8005cfa <_printf_i+0x7e>
 8005ce8:	296f      	cmp	r1, #111	; 0x6f
 8005cea:	d020      	beq.n	8005d2e <_printf_i+0xb2>
 8005cec:	2970      	cmp	r1, #112	; 0x70
 8005cee:	d1dd      	bne.n	8005cac <_printf_i+0x30>
 8005cf0:	6823      	ldr	r3, [r4, #0]
 8005cf2:	f043 0320 	orr.w	r3, r3, #32
 8005cf6:	6023      	str	r3, [r4, #0]
 8005cf8:	e003      	b.n	8005d02 <_printf_i+0x86>
 8005cfa:	2975      	cmp	r1, #117	; 0x75
 8005cfc:	d017      	beq.n	8005d2e <_printf_i+0xb2>
 8005cfe:	2978      	cmp	r1, #120	; 0x78
 8005d00:	d1d4      	bne.n	8005cac <_printf_i+0x30>
 8005d02:	2378      	movs	r3, #120	; 0x78
 8005d04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d08:	4864      	ldr	r0, [pc, #400]	; (8005e9c <_printf_i+0x220>)
 8005d0a:	e055      	b.n	8005db8 <_printf_i+0x13c>
 8005d0c:	6813      	ldr	r3, [r2, #0]
 8005d0e:	1d19      	adds	r1, r3, #4
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	6011      	str	r1, [r2, #0]
 8005d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e08c      	b.n	8005e3a <_printf_i+0x1be>
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6011      	str	r1, [r2, #0]
 8005d24:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d28:	bf18      	it	ne
 8005d2a:	b21b      	sxthne	r3, r3
 8005d2c:	e7cf      	b.n	8005cce <_printf_i+0x52>
 8005d2e:	6813      	ldr	r3, [r2, #0]
 8005d30:	6825      	ldr	r5, [r4, #0]
 8005d32:	1d18      	adds	r0, r3, #4
 8005d34:	6010      	str	r0, [r2, #0]
 8005d36:	0628      	lsls	r0, r5, #24
 8005d38:	d501      	bpl.n	8005d3e <_printf_i+0xc2>
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	e002      	b.n	8005d44 <_printf_i+0xc8>
 8005d3e:	0668      	lsls	r0, r5, #25
 8005d40:	d5fb      	bpl.n	8005d3a <_printf_i+0xbe>
 8005d42:	881b      	ldrh	r3, [r3, #0]
 8005d44:	4854      	ldr	r0, [pc, #336]	; (8005e98 <_printf_i+0x21c>)
 8005d46:	296f      	cmp	r1, #111	; 0x6f
 8005d48:	bf14      	ite	ne
 8005d4a:	220a      	movne	r2, #10
 8005d4c:	2208      	moveq	r2, #8
 8005d4e:	2100      	movs	r1, #0
 8005d50:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d54:	6865      	ldr	r5, [r4, #4]
 8005d56:	60a5      	str	r5, [r4, #8]
 8005d58:	2d00      	cmp	r5, #0
 8005d5a:	f2c0 8095 	blt.w	8005e88 <_printf_i+0x20c>
 8005d5e:	6821      	ldr	r1, [r4, #0]
 8005d60:	f021 0104 	bic.w	r1, r1, #4
 8005d64:	6021      	str	r1, [r4, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d13d      	bne.n	8005de6 <_printf_i+0x16a>
 8005d6a:	2d00      	cmp	r5, #0
 8005d6c:	f040 808e 	bne.w	8005e8c <_printf_i+0x210>
 8005d70:	4665      	mov	r5, ip
 8005d72:	2a08      	cmp	r2, #8
 8005d74:	d10b      	bne.n	8005d8e <_printf_i+0x112>
 8005d76:	6823      	ldr	r3, [r4, #0]
 8005d78:	07db      	lsls	r3, r3, #31
 8005d7a:	d508      	bpl.n	8005d8e <_printf_i+0x112>
 8005d7c:	6923      	ldr	r3, [r4, #16]
 8005d7e:	6862      	ldr	r2, [r4, #4]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	bfde      	ittt	le
 8005d84:	2330      	movle	r3, #48	; 0x30
 8005d86:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d8a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d8e:	ebac 0305 	sub.w	r3, ip, r5
 8005d92:	6123      	str	r3, [r4, #16]
 8005d94:	f8cd 8000 	str.w	r8, [sp]
 8005d98:	463b      	mov	r3, r7
 8005d9a:	aa03      	add	r2, sp, #12
 8005d9c:	4621      	mov	r1, r4
 8005d9e:	4630      	mov	r0, r6
 8005da0:	f7ff fef6 	bl	8005b90 <_printf_common>
 8005da4:	3001      	adds	r0, #1
 8005da6:	d14d      	bne.n	8005e44 <_printf_i+0x1c8>
 8005da8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dac:	b005      	add	sp, #20
 8005dae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005db2:	4839      	ldr	r0, [pc, #228]	; (8005e98 <_printf_i+0x21c>)
 8005db4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005db8:	6813      	ldr	r3, [r2, #0]
 8005dba:	6821      	ldr	r1, [r4, #0]
 8005dbc:	1d1d      	adds	r5, r3, #4
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6015      	str	r5, [r2, #0]
 8005dc2:	060a      	lsls	r2, r1, #24
 8005dc4:	d50b      	bpl.n	8005dde <_printf_i+0x162>
 8005dc6:	07ca      	lsls	r2, r1, #31
 8005dc8:	bf44      	itt	mi
 8005dca:	f041 0120 	orrmi.w	r1, r1, #32
 8005dce:	6021      	strmi	r1, [r4, #0]
 8005dd0:	b91b      	cbnz	r3, 8005dda <_printf_i+0x15e>
 8005dd2:	6822      	ldr	r2, [r4, #0]
 8005dd4:	f022 0220 	bic.w	r2, r2, #32
 8005dd8:	6022      	str	r2, [r4, #0]
 8005dda:	2210      	movs	r2, #16
 8005ddc:	e7b7      	b.n	8005d4e <_printf_i+0xd2>
 8005dde:	064d      	lsls	r5, r1, #25
 8005de0:	bf48      	it	mi
 8005de2:	b29b      	uxthmi	r3, r3
 8005de4:	e7ef      	b.n	8005dc6 <_printf_i+0x14a>
 8005de6:	4665      	mov	r5, ip
 8005de8:	fbb3 f1f2 	udiv	r1, r3, r2
 8005dec:	fb02 3311 	mls	r3, r2, r1, r3
 8005df0:	5cc3      	ldrb	r3, [r0, r3]
 8005df2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005df6:	460b      	mov	r3, r1
 8005df8:	2900      	cmp	r1, #0
 8005dfa:	d1f5      	bne.n	8005de8 <_printf_i+0x16c>
 8005dfc:	e7b9      	b.n	8005d72 <_printf_i+0xf6>
 8005dfe:	6813      	ldr	r3, [r2, #0]
 8005e00:	6825      	ldr	r5, [r4, #0]
 8005e02:	6961      	ldr	r1, [r4, #20]
 8005e04:	1d18      	adds	r0, r3, #4
 8005e06:	6010      	str	r0, [r2, #0]
 8005e08:	0628      	lsls	r0, r5, #24
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	d501      	bpl.n	8005e12 <_printf_i+0x196>
 8005e0e:	6019      	str	r1, [r3, #0]
 8005e10:	e002      	b.n	8005e18 <_printf_i+0x19c>
 8005e12:	066a      	lsls	r2, r5, #25
 8005e14:	d5fb      	bpl.n	8005e0e <_printf_i+0x192>
 8005e16:	8019      	strh	r1, [r3, #0]
 8005e18:	2300      	movs	r3, #0
 8005e1a:	6123      	str	r3, [r4, #16]
 8005e1c:	4665      	mov	r5, ip
 8005e1e:	e7b9      	b.n	8005d94 <_printf_i+0x118>
 8005e20:	6813      	ldr	r3, [r2, #0]
 8005e22:	1d19      	adds	r1, r3, #4
 8005e24:	6011      	str	r1, [r2, #0]
 8005e26:	681d      	ldr	r5, [r3, #0]
 8005e28:	6862      	ldr	r2, [r4, #4]
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	4628      	mov	r0, r5
 8005e2e:	f7fa f9df 	bl	80001f0 <memchr>
 8005e32:	b108      	cbz	r0, 8005e38 <_printf_i+0x1bc>
 8005e34:	1b40      	subs	r0, r0, r5
 8005e36:	6060      	str	r0, [r4, #4]
 8005e38:	6863      	ldr	r3, [r4, #4]
 8005e3a:	6123      	str	r3, [r4, #16]
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e42:	e7a7      	b.n	8005d94 <_printf_i+0x118>
 8005e44:	6923      	ldr	r3, [r4, #16]
 8005e46:	462a      	mov	r2, r5
 8005e48:	4639      	mov	r1, r7
 8005e4a:	4630      	mov	r0, r6
 8005e4c:	47c0      	blx	r8
 8005e4e:	3001      	adds	r0, #1
 8005e50:	d0aa      	beq.n	8005da8 <_printf_i+0x12c>
 8005e52:	6823      	ldr	r3, [r4, #0]
 8005e54:	079b      	lsls	r3, r3, #30
 8005e56:	d413      	bmi.n	8005e80 <_printf_i+0x204>
 8005e58:	68e0      	ldr	r0, [r4, #12]
 8005e5a:	9b03      	ldr	r3, [sp, #12]
 8005e5c:	4298      	cmp	r0, r3
 8005e5e:	bfb8      	it	lt
 8005e60:	4618      	movlt	r0, r3
 8005e62:	e7a3      	b.n	8005dac <_printf_i+0x130>
 8005e64:	2301      	movs	r3, #1
 8005e66:	464a      	mov	r2, r9
 8005e68:	4639      	mov	r1, r7
 8005e6a:	4630      	mov	r0, r6
 8005e6c:	47c0      	blx	r8
 8005e6e:	3001      	adds	r0, #1
 8005e70:	d09a      	beq.n	8005da8 <_printf_i+0x12c>
 8005e72:	3501      	adds	r5, #1
 8005e74:	68e3      	ldr	r3, [r4, #12]
 8005e76:	9a03      	ldr	r2, [sp, #12]
 8005e78:	1a9b      	subs	r3, r3, r2
 8005e7a:	42ab      	cmp	r3, r5
 8005e7c:	dcf2      	bgt.n	8005e64 <_printf_i+0x1e8>
 8005e7e:	e7eb      	b.n	8005e58 <_printf_i+0x1dc>
 8005e80:	2500      	movs	r5, #0
 8005e82:	f104 0919 	add.w	r9, r4, #25
 8005e86:	e7f5      	b.n	8005e74 <_printf_i+0x1f8>
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d1ac      	bne.n	8005de6 <_printf_i+0x16a>
 8005e8c:	7803      	ldrb	r3, [r0, #0]
 8005e8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e92:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e96:	e76c      	b.n	8005d72 <_printf_i+0xf6>
 8005e98:	08006121 	.word	0x08006121
 8005e9c:	08006132 	.word	0x08006132

08005ea0 <memcpy>:
 8005ea0:	b510      	push	{r4, lr}
 8005ea2:	1e43      	subs	r3, r0, #1
 8005ea4:	440a      	add	r2, r1
 8005ea6:	4291      	cmp	r1, r2
 8005ea8:	d100      	bne.n	8005eac <memcpy+0xc>
 8005eaa:	bd10      	pop	{r4, pc}
 8005eac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005eb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005eb4:	e7f7      	b.n	8005ea6 <memcpy+0x6>

08005eb6 <memmove>:
 8005eb6:	4288      	cmp	r0, r1
 8005eb8:	b510      	push	{r4, lr}
 8005eba:	eb01 0302 	add.w	r3, r1, r2
 8005ebe:	d807      	bhi.n	8005ed0 <memmove+0x1a>
 8005ec0:	1e42      	subs	r2, r0, #1
 8005ec2:	4299      	cmp	r1, r3
 8005ec4:	d00a      	beq.n	8005edc <memmove+0x26>
 8005ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005eca:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005ece:	e7f8      	b.n	8005ec2 <memmove+0xc>
 8005ed0:	4283      	cmp	r3, r0
 8005ed2:	d9f5      	bls.n	8005ec0 <memmove+0xa>
 8005ed4:	1881      	adds	r1, r0, r2
 8005ed6:	1ad2      	subs	r2, r2, r3
 8005ed8:	42d3      	cmn	r3, r2
 8005eda:	d100      	bne.n	8005ede <memmove+0x28>
 8005edc:	bd10      	pop	{r4, pc}
 8005ede:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ee2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005ee6:	e7f7      	b.n	8005ed8 <memmove+0x22>

08005ee8 <_free_r>:
 8005ee8:	b538      	push	{r3, r4, r5, lr}
 8005eea:	4605      	mov	r5, r0
 8005eec:	2900      	cmp	r1, #0
 8005eee:	d045      	beq.n	8005f7c <_free_r+0x94>
 8005ef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ef4:	1f0c      	subs	r4, r1, #4
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	bfb8      	it	lt
 8005efa:	18e4      	addlt	r4, r4, r3
 8005efc:	f000 f8d2 	bl	80060a4 <__malloc_lock>
 8005f00:	4a1f      	ldr	r2, [pc, #124]	; (8005f80 <_free_r+0x98>)
 8005f02:	6813      	ldr	r3, [r2, #0]
 8005f04:	4610      	mov	r0, r2
 8005f06:	b933      	cbnz	r3, 8005f16 <_free_r+0x2e>
 8005f08:	6063      	str	r3, [r4, #4]
 8005f0a:	6014      	str	r4, [r2, #0]
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f12:	f000 b8c8 	b.w	80060a6 <__malloc_unlock>
 8005f16:	42a3      	cmp	r3, r4
 8005f18:	d90c      	bls.n	8005f34 <_free_r+0x4c>
 8005f1a:	6821      	ldr	r1, [r4, #0]
 8005f1c:	1862      	adds	r2, r4, r1
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	bf04      	itt	eq
 8005f22:	681a      	ldreq	r2, [r3, #0]
 8005f24:	685b      	ldreq	r3, [r3, #4]
 8005f26:	6063      	str	r3, [r4, #4]
 8005f28:	bf04      	itt	eq
 8005f2a:	1852      	addeq	r2, r2, r1
 8005f2c:	6022      	streq	r2, [r4, #0]
 8005f2e:	6004      	str	r4, [r0, #0]
 8005f30:	e7ec      	b.n	8005f0c <_free_r+0x24>
 8005f32:	4613      	mov	r3, r2
 8005f34:	685a      	ldr	r2, [r3, #4]
 8005f36:	b10a      	cbz	r2, 8005f3c <_free_r+0x54>
 8005f38:	42a2      	cmp	r2, r4
 8005f3a:	d9fa      	bls.n	8005f32 <_free_r+0x4a>
 8005f3c:	6819      	ldr	r1, [r3, #0]
 8005f3e:	1858      	adds	r0, r3, r1
 8005f40:	42a0      	cmp	r0, r4
 8005f42:	d10b      	bne.n	8005f5c <_free_r+0x74>
 8005f44:	6820      	ldr	r0, [r4, #0]
 8005f46:	4401      	add	r1, r0
 8005f48:	1858      	adds	r0, r3, r1
 8005f4a:	4282      	cmp	r2, r0
 8005f4c:	6019      	str	r1, [r3, #0]
 8005f4e:	d1dd      	bne.n	8005f0c <_free_r+0x24>
 8005f50:	6810      	ldr	r0, [r2, #0]
 8005f52:	6852      	ldr	r2, [r2, #4]
 8005f54:	605a      	str	r2, [r3, #4]
 8005f56:	4401      	add	r1, r0
 8005f58:	6019      	str	r1, [r3, #0]
 8005f5a:	e7d7      	b.n	8005f0c <_free_r+0x24>
 8005f5c:	d902      	bls.n	8005f64 <_free_r+0x7c>
 8005f5e:	230c      	movs	r3, #12
 8005f60:	602b      	str	r3, [r5, #0]
 8005f62:	e7d3      	b.n	8005f0c <_free_r+0x24>
 8005f64:	6820      	ldr	r0, [r4, #0]
 8005f66:	1821      	adds	r1, r4, r0
 8005f68:	428a      	cmp	r2, r1
 8005f6a:	bf04      	itt	eq
 8005f6c:	6811      	ldreq	r1, [r2, #0]
 8005f6e:	6852      	ldreq	r2, [r2, #4]
 8005f70:	6062      	str	r2, [r4, #4]
 8005f72:	bf04      	itt	eq
 8005f74:	1809      	addeq	r1, r1, r0
 8005f76:	6021      	streq	r1, [r4, #0]
 8005f78:	605c      	str	r4, [r3, #4]
 8005f7a:	e7c7      	b.n	8005f0c <_free_r+0x24>
 8005f7c:	bd38      	pop	{r3, r4, r5, pc}
 8005f7e:	bf00      	nop
 8005f80:	200000a8 	.word	0x200000a8

08005f84 <_malloc_r>:
 8005f84:	b570      	push	{r4, r5, r6, lr}
 8005f86:	1ccd      	adds	r5, r1, #3
 8005f88:	f025 0503 	bic.w	r5, r5, #3
 8005f8c:	3508      	adds	r5, #8
 8005f8e:	2d0c      	cmp	r5, #12
 8005f90:	bf38      	it	cc
 8005f92:	250c      	movcc	r5, #12
 8005f94:	2d00      	cmp	r5, #0
 8005f96:	4606      	mov	r6, r0
 8005f98:	db01      	blt.n	8005f9e <_malloc_r+0x1a>
 8005f9a:	42a9      	cmp	r1, r5
 8005f9c:	d903      	bls.n	8005fa6 <_malloc_r+0x22>
 8005f9e:	230c      	movs	r3, #12
 8005fa0:	6033      	str	r3, [r6, #0]
 8005fa2:	2000      	movs	r0, #0
 8005fa4:	bd70      	pop	{r4, r5, r6, pc}
 8005fa6:	f000 f87d 	bl	80060a4 <__malloc_lock>
 8005faa:	4a21      	ldr	r2, [pc, #132]	; (8006030 <_malloc_r+0xac>)
 8005fac:	6814      	ldr	r4, [r2, #0]
 8005fae:	4621      	mov	r1, r4
 8005fb0:	b991      	cbnz	r1, 8005fd8 <_malloc_r+0x54>
 8005fb2:	4c20      	ldr	r4, [pc, #128]	; (8006034 <_malloc_r+0xb0>)
 8005fb4:	6823      	ldr	r3, [r4, #0]
 8005fb6:	b91b      	cbnz	r3, 8005fc0 <_malloc_r+0x3c>
 8005fb8:	4630      	mov	r0, r6
 8005fba:	f000 f863 	bl	8006084 <_sbrk_r>
 8005fbe:	6020      	str	r0, [r4, #0]
 8005fc0:	4629      	mov	r1, r5
 8005fc2:	4630      	mov	r0, r6
 8005fc4:	f000 f85e 	bl	8006084 <_sbrk_r>
 8005fc8:	1c43      	adds	r3, r0, #1
 8005fca:	d124      	bne.n	8006016 <_malloc_r+0x92>
 8005fcc:	230c      	movs	r3, #12
 8005fce:	6033      	str	r3, [r6, #0]
 8005fd0:	4630      	mov	r0, r6
 8005fd2:	f000 f868 	bl	80060a6 <__malloc_unlock>
 8005fd6:	e7e4      	b.n	8005fa2 <_malloc_r+0x1e>
 8005fd8:	680b      	ldr	r3, [r1, #0]
 8005fda:	1b5b      	subs	r3, r3, r5
 8005fdc:	d418      	bmi.n	8006010 <_malloc_r+0x8c>
 8005fde:	2b0b      	cmp	r3, #11
 8005fe0:	d90f      	bls.n	8006002 <_malloc_r+0x7e>
 8005fe2:	600b      	str	r3, [r1, #0]
 8005fe4:	50cd      	str	r5, [r1, r3]
 8005fe6:	18cc      	adds	r4, r1, r3
 8005fe8:	4630      	mov	r0, r6
 8005fea:	f000 f85c 	bl	80060a6 <__malloc_unlock>
 8005fee:	f104 000b 	add.w	r0, r4, #11
 8005ff2:	1d23      	adds	r3, r4, #4
 8005ff4:	f020 0007 	bic.w	r0, r0, #7
 8005ff8:	1ac3      	subs	r3, r0, r3
 8005ffa:	d0d3      	beq.n	8005fa4 <_malloc_r+0x20>
 8005ffc:	425a      	negs	r2, r3
 8005ffe:	50e2      	str	r2, [r4, r3]
 8006000:	e7d0      	b.n	8005fa4 <_malloc_r+0x20>
 8006002:	428c      	cmp	r4, r1
 8006004:	684b      	ldr	r3, [r1, #4]
 8006006:	bf16      	itet	ne
 8006008:	6063      	strne	r3, [r4, #4]
 800600a:	6013      	streq	r3, [r2, #0]
 800600c:	460c      	movne	r4, r1
 800600e:	e7eb      	b.n	8005fe8 <_malloc_r+0x64>
 8006010:	460c      	mov	r4, r1
 8006012:	6849      	ldr	r1, [r1, #4]
 8006014:	e7cc      	b.n	8005fb0 <_malloc_r+0x2c>
 8006016:	1cc4      	adds	r4, r0, #3
 8006018:	f024 0403 	bic.w	r4, r4, #3
 800601c:	42a0      	cmp	r0, r4
 800601e:	d005      	beq.n	800602c <_malloc_r+0xa8>
 8006020:	1a21      	subs	r1, r4, r0
 8006022:	4630      	mov	r0, r6
 8006024:	f000 f82e 	bl	8006084 <_sbrk_r>
 8006028:	3001      	adds	r0, #1
 800602a:	d0cf      	beq.n	8005fcc <_malloc_r+0x48>
 800602c:	6025      	str	r5, [r4, #0]
 800602e:	e7db      	b.n	8005fe8 <_malloc_r+0x64>
 8006030:	200000a8 	.word	0x200000a8
 8006034:	200000ac 	.word	0x200000ac

08006038 <_realloc_r>:
 8006038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800603a:	4607      	mov	r7, r0
 800603c:	4614      	mov	r4, r2
 800603e:	460e      	mov	r6, r1
 8006040:	b921      	cbnz	r1, 800604c <_realloc_r+0x14>
 8006042:	4611      	mov	r1, r2
 8006044:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006048:	f7ff bf9c 	b.w	8005f84 <_malloc_r>
 800604c:	b922      	cbnz	r2, 8006058 <_realloc_r+0x20>
 800604e:	f7ff ff4b 	bl	8005ee8 <_free_r>
 8006052:	4625      	mov	r5, r4
 8006054:	4628      	mov	r0, r5
 8006056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006058:	f000 f826 	bl	80060a8 <_malloc_usable_size_r>
 800605c:	42a0      	cmp	r0, r4
 800605e:	d20f      	bcs.n	8006080 <_realloc_r+0x48>
 8006060:	4621      	mov	r1, r4
 8006062:	4638      	mov	r0, r7
 8006064:	f7ff ff8e 	bl	8005f84 <_malloc_r>
 8006068:	4605      	mov	r5, r0
 800606a:	2800      	cmp	r0, #0
 800606c:	d0f2      	beq.n	8006054 <_realloc_r+0x1c>
 800606e:	4631      	mov	r1, r6
 8006070:	4622      	mov	r2, r4
 8006072:	f7ff ff15 	bl	8005ea0 <memcpy>
 8006076:	4631      	mov	r1, r6
 8006078:	4638      	mov	r0, r7
 800607a:	f7ff ff35 	bl	8005ee8 <_free_r>
 800607e:	e7e9      	b.n	8006054 <_realloc_r+0x1c>
 8006080:	4635      	mov	r5, r6
 8006082:	e7e7      	b.n	8006054 <_realloc_r+0x1c>

08006084 <_sbrk_r>:
 8006084:	b538      	push	{r3, r4, r5, lr}
 8006086:	4c06      	ldr	r4, [pc, #24]	; (80060a0 <_sbrk_r+0x1c>)
 8006088:	2300      	movs	r3, #0
 800608a:	4605      	mov	r5, r0
 800608c:	4608      	mov	r0, r1
 800608e:	6023      	str	r3, [r4, #0]
 8006090:	f7fa fd3c 	bl	8000b0c <_sbrk>
 8006094:	1c43      	adds	r3, r0, #1
 8006096:	d102      	bne.n	800609e <_sbrk_r+0x1a>
 8006098:	6823      	ldr	r3, [r4, #0]
 800609a:	b103      	cbz	r3, 800609e <_sbrk_r+0x1a>
 800609c:	602b      	str	r3, [r5, #0]
 800609e:	bd38      	pop	{r3, r4, r5, pc}
 80060a0:	200001d8 	.word	0x200001d8

080060a4 <__malloc_lock>:
 80060a4:	4770      	bx	lr

080060a6 <__malloc_unlock>:
 80060a6:	4770      	bx	lr

080060a8 <_malloc_usable_size_r>:
 80060a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060ac:	1f18      	subs	r0, r3, #4
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	bfbc      	itt	lt
 80060b2:	580b      	ldrlt	r3, [r1, r0]
 80060b4:	18c0      	addlt	r0, r0, r3
 80060b6:	4770      	bx	lr

080060b8 <_init>:
 80060b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ba:	bf00      	nop
 80060bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060be:	bc08      	pop	{r3}
 80060c0:	469e      	mov	lr, r3
 80060c2:	4770      	bx	lr

080060c4 <_fini>:
 80060c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c6:	bf00      	nop
 80060c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ca:	bc08      	pop	{r3}
 80060cc:	469e      	mov	lr, r3
 80060ce:	4770      	bx	lr
