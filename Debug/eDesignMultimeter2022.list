
eDesignMultimeter2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a644  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  0800a7e0  0800a7e0  0001a7e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aac0  0800aac0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  0800aac0  0800aac0  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aac0  0800aac0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aac0  0800aac0  0001aac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aac4  0800aac4  0001aac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800aac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c78  2000001c  0800aae4  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c94  0800aae4  00020c94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a659  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ff5  00000000  00000000  0003a6a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001470  00000000  00000000  0003d6a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001328  00000000  00000000  0003eb10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022cc8  00000000  00000000  0003fe38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001409c  00000000  00000000  00062b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d622a  00000000  00000000  00076b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014cdc6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059f0  00000000  00000000  0014ce44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000001c 	.word	0x2000001c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a7c4 	.word	0x0800a7c4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000020 	.word	0x20000020
 80001d4:	0800a7c4 	.word	0x0800a7c4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <ADC_Main_Function>:
uint16_t millivolts;
uint16_t adc_array[1000];
uint16_t adc_count = 0;

void ADC_Main_Function()
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
	if(adc_count > 999)
 8000b7a:	4b59      	ldr	r3, [pc, #356]	; (8000ce0 <ADC_Main_Function+0x16c>)
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b82:	d364      	bcc.n	8000c4e <ADC_Main_Function+0xda>
	{
	  // Do calculations every 1000 readings
	  adc_count = 0;
 8000b84:	4b56      	ldr	r3, [pc, #344]	; (8000ce0 <ADC_Main_Function+0x16c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	801a      	strh	r2, [r3, #0]
	  uint32_t total = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
	  uint16_t max = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	827b      	strh	r3, [r7, #18]
	  uint16_t min = adc_array[99]; // arbitrary value
 8000b92:	4b54      	ldr	r3, [pc, #336]	; (8000ce4 <ADC_Main_Function+0x170>)
 8000b94:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8000b98:	823b      	strh	r3, [r7, #16]
	  int16_t diff = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	807b      	strh	r3, [r7, #2]
	  int16_t prev_diff = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	81fb      	strh	r3, [r7, #14]
	  uint16_t mid_passes = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	81bb      	strh	r3, [r7, #12]
	  // 1000 measurements at 5kHz take 200ms
	  for(int x = 0; x < 1000; x++)
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	e023      	b.n	8000bf4 <ADC_Main_Function+0x80>
	  {
		  total += adc_array[x];
 8000bac:	4a4d      	ldr	r2, [pc, #308]	; (8000ce4 <ADC_Main_Function+0x170>)
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	4413      	add	r3, r2
 8000bba:	617b      	str	r3, [r7, #20]
		  if(adc_array[x] > max)
 8000bbc:	4a49      	ldr	r2, [pc, #292]	; (8000ce4 <ADC_Main_Function+0x170>)
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bc4:	8a7a      	ldrh	r2, [r7, #18]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d205      	bcs.n	8000bd6 <ADC_Main_Function+0x62>
		  {
			  max = adc_array[x];
 8000bca:	4a46      	ldr	r2, [pc, #280]	; (8000ce4 <ADC_Main_Function+0x170>)
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bd2:	827b      	strh	r3, [r7, #18]
 8000bd4:	e00b      	b.n	8000bee <ADC_Main_Function+0x7a>
		  }
		  else if(adc_array[x] < min)
 8000bd6:	4a43      	ldr	r2, [pc, #268]	; (8000ce4 <ADC_Main_Function+0x170>)
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bde:	8a3a      	ldrh	r2, [r7, #16]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d904      	bls.n	8000bee <ADC_Main_Function+0x7a>
		  {
			  min = adc_array[x];
 8000be4:	4a3f      	ldr	r2, [pc, #252]	; (8000ce4 <ADC_Main_Function+0x170>)
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bec:	823b      	strh	r3, [r7, #16]
	  for(int x = 0; x < 1000; x++)
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000bfa:	dbd7      	blt.n	8000bac <ADC_Main_Function+0x38>
		  }
	  }
	//			  measured_offset = total/1000;
//	  MeasurementState.Offset = 1000;
	  for(int x = 0; x < 1000; x++)
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	e018      	b.n	8000c34 <ADC_Main_Function+0xc0>
	  {
		  // Calculate frequency
		  diff = adc_array[x] - MeasurementState.Offset;
 8000c02:	4a38      	ldr	r2, [pc, #224]	; (8000ce4 <ADC_Main_Function+0x170>)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000c0a:	4b37      	ldr	r3, [pc, #220]	; (8000ce8 <ADC_Main_Function+0x174>)
 8000c0c:	891b      	ldrh	r3, [r3, #8]
 8000c0e:	1ad3      	subs	r3, r2, r3
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	807b      	strh	r3, [r7, #2]
		  if(diff > 0 && prev_diff < 0)
 8000c14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	dd06      	ble.n	8000c2a <ADC_Main_Function+0xb6>
 8000c1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	da02      	bge.n	8000c2a <ADC_Main_Function+0xb6>
		  {
			  mid_passes++;
 8000c24:	89bb      	ldrh	r3, [r7, #12]
 8000c26:	3301      	adds	r3, #1
 8000c28:	81bb      	strh	r3, [r7, #12]
		  }
		  prev_diff = diff;
 8000c2a:	887b      	ldrh	r3, [r7, #2]
 8000c2c:	81fb      	strh	r3, [r7, #14]
	  for(int x = 0; x < 1000; x++)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	3301      	adds	r3, #1
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c3a:	dbe2      	blt.n	8000c02 <ADC_Main_Function+0x8e>
	  }
	  MeasurementState.Period = 50000/(mid_passes);
 8000c3c:	89bb      	ldrh	r3, [r7, #12]
 8000c3e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000c42:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c46:	b29a      	uxth	r2, r3
 8000c48:	4b27      	ldr	r3, [pc, #156]	; (8000ce8 <ADC_Main_Function+0x174>)
 8000c4a:	80da      	strh	r2, [r3, #6]
	  adc_array[adc_count] = millivolts;
	  adc_count++;
	}

//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
}
 8000c4c:	e043      	b.n	8000cd6 <ADC_Main_Function+0x162>
	  HAL_ADC_Start(&hadc1);
 8000c4e:	4827      	ldr	r0, [pc, #156]	; (8000cec <ADC_Main_Function+0x178>)
 8000c50:	f002 feb0 	bl	80039b4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000c54:	f04f 31ff 	mov.w	r1, #4294967295
 8000c58:	4824      	ldr	r0, [pc, #144]	; (8000cec <ADC_Main_Function+0x178>)
 8000c5a:	f002 fff7 	bl	8003c4c <HAL_ADC_PollForConversion>
	  raw = HAL_ADC_GetValue(&hadc1);
 8000c5e:	4823      	ldr	r0, [pc, #140]	; (8000cec <ADC_Main_Function+0x178>)
 8000c60:	f003 f8f6 	bl	8003e50 <HAL_ADC_GetValue>
 8000c64:	4603      	mov	r3, r0
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <ADC_Main_Function+0x17c>)
 8000c6a:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 8000c6c:	481f      	ldr	r0, [pc, #124]	; (8000cec <ADC_Main_Function+0x178>)
 8000c6e:	f002 ffb7 	bl	8003be0 <HAL_ADC_Stop>
	  millivolts = raw*3300/4095;
 8000c72:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <ADC_Main_Function+0x17c>)
 8000c74:	881b      	ldrh	r3, [r3, #0]
 8000c76:	461a      	mov	r2, r3
 8000c78:	f640 43e4 	movw	r3, #3300	; 0xce4
 8000c7c:	fb03 f302 	mul.w	r3, r3, r2
 8000c80:	4a1c      	ldr	r2, [pc, #112]	; (8000cf4 <ADC_Main_Function+0x180>)
 8000c82:	fb82 1203 	smull	r1, r2, r2, r3
 8000c86:	441a      	add	r2, r3
 8000c88:	12d2      	asrs	r2, r2, #11
 8000c8a:	17db      	asrs	r3, r3, #31
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	b29a      	uxth	r2, r3
 8000c90:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <ADC_Main_Function+0x184>)
 8000c92:	801a      	strh	r2, [r3, #0]
	  millivolts += 100*millivolts/1000; // Calibration
 8000c94:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <ADC_Main_Function+0x184>)
 8000c96:	881b      	ldrh	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	2364      	movs	r3, #100	; 0x64
 8000c9c:	fb03 f302 	mul.w	r3, r3, r2
 8000ca0:	4a16      	ldr	r2, [pc, #88]	; (8000cfc <ADC_Main_Function+0x188>)
 8000ca2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ca6:	1192      	asrs	r2, r2, #6
 8000ca8:	17db      	asrs	r3, r3, #31
 8000caa:	1ad3      	subs	r3, r2, r3
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <ADC_Main_Function+0x184>)
 8000cb0:	881b      	ldrh	r3, [r3, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <ADC_Main_Function+0x184>)
 8000cb8:	801a      	strh	r2, [r3, #0]
	  adc_array[adc_count] = millivolts;
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <ADC_Main_Function+0x16c>)
 8000cbc:	881b      	ldrh	r3, [r3, #0]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <ADC_Main_Function+0x184>)
 8000cc2:	8819      	ldrh	r1, [r3, #0]
 8000cc4:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <ADC_Main_Function+0x170>)
 8000cc6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  adc_count++;
 8000cca:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <ADC_Main_Function+0x16c>)
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <ADC_Main_Function+0x16c>)
 8000cd4:	801a      	strh	r2, [r3, #0]
}
 8000cd6:	bf00      	nop
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000038 	.word	0x20000038
 8000ce4:	20000048 	.word	0x20000048
 8000ce8:	2000081c 	.word	0x2000081c
 8000cec:	20000b14 	.word	0x20000b14
 8000cf0:	20000818 	.word	0x20000818
 8000cf4:	80080081 	.word	0x80080081
 8000cf8:	2000081a 	.word	0x2000081a
 8000cfc:	10624dd3 	.word	0x10624dd3

08000d00 <DAC_Calculate_Buffer>:
extern DAC_HandleTypeDef hdac1;

OutputStateType OutputState;

void DAC_Calculate_Buffer()
{
 8000d00:	b590      	push	{r4, r7, lr}
 8000d02:	ed2d 8b02 	vpush	{d8}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
	if(OutputState.Mode == d)
 8000d0a:	4b3c      	ldr	r3, [pc, #240]	; (8000dfc <DAC_Calculate_Buffer+0xfc>)
 8000d0c:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 8000d10:	2b64      	cmp	r3, #100	; 0x64
 8000d12:	d11c      	bne.n	8000d4e <DAC_Calculate_Buffer+0x4e>
	{
		for(int i=0; i<100; i++)
 8000d14:	2300      	movs	r3, #0
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	e015      	b.n	8000d46 <DAC_Calculate_Buffer+0x46>
		{
			OutputState.Buffer[i] = (float)((float)(OutputState.Offset) * (float)(4096/3300) * (float)((float)(1000 / 600) / 2));
 8000d1a:	4b38      	ldr	r3, [pc, #224]	; (8000dfc <DAC_Calculate_Buffer+0xfc>)
 8000d1c:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8000d20:	ee07 3a90 	vmov	s15, r3
 8000d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d28:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000d2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d34:	ee17 1a90 	vmov	r1, s15
 8000d38:	4a30      	ldr	r2, [pc, #192]	; (8000dfc <DAC_Calculate_Buffer+0xfc>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i=0; i<100; i++)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3301      	adds	r3, #1
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b63      	cmp	r3, #99	; 0x63
 8000d4a:	dde6      	ble.n	8000d1a <DAC_Calculate_Buffer+0x1a>
		for(int i=0; i<100; i++)
		{
			OutputState.Buffer[i] = ((float)((float)OutputState.Amplitude/2)*(float)sin(i*2*(float)(PI/100)) + (float)((float)OutputState.Offset * (float)0.85))*((float)(4096/3300)) * (float)((float)(1.165) / 2);
		}
	}
}
 8000d4c:	e04f      	b.n	8000dee <DAC_Calculate_Buffer+0xee>
	else if (OutputState.Mode == s)
 8000d4e:	4b2b      	ldr	r3, [pc, #172]	; (8000dfc <DAC_Calculate_Buffer+0xfc>)
 8000d50:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 8000d54:	2b73      	cmp	r3, #115	; 0x73
 8000d56:	d14a      	bne.n	8000dee <DAC_Calculate_Buffer+0xee>
		for(int i=0; i<100; i++)
 8000d58:	2300      	movs	r3, #0
 8000d5a:	603b      	str	r3, [r7, #0]
 8000d5c:	e044      	b.n	8000de8 <DAC_Calculate_Buffer+0xe8>
			OutputState.Buffer[i] = ((float)((float)OutputState.Amplitude/2)*(float)sin(i*2*(float)(PI/100)) + (float)((float)OutputState.Offset * (float)0.85))*((float)(4096/3300)) * (float)((float)(1.165) / 2);
 8000d5e:	4b27      	ldr	r3, [pc, #156]	; (8000dfc <DAC_Calculate_Buffer+0xfc>)
 8000d60:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8000d64:	ee07 3a90 	vmov	s15, r3
 8000d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d6c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000d70:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	ee07 3a90 	vmov	s15, r3
 8000d7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d80:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000e00 <DAC_Calculate_Buffer+0x100>
 8000d84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d88:	ee17 0a90 	vmov	r0, s15
 8000d8c:	f7ff fb88 	bl	80004a0 <__aeabi_f2d>
 8000d90:	4603      	mov	r3, r0
 8000d92:	460c      	mov	r4, r1
 8000d94:	ec44 3b10 	vmov	d0, r3, r4
 8000d98:	f008 fd02 	bl	80097a0 <sin>
 8000d9c:	ec54 3b10 	vmov	r3, r4, d0
 8000da0:	4618      	mov	r0, r3
 8000da2:	4621      	mov	r1, r4
 8000da4:	f7ff fe96 	bl	8000ad4 <__aeabi_d2f>
 8000da8:	ee07 0a90 	vmov	s15, r0
 8000dac:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <DAC_Calculate_Buffer+0xfc>)
 8000db2:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8000db6:	ee07 3a90 	vmov	s15, r3
 8000dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dbe:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000e04 <DAC_Calculate_Buffer+0x104>
 8000dc2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000dc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dca:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000e08 <DAC_Calculate_Buffer+0x108>
 8000dce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dd6:	ee17 1a90 	vmov	r1, s15
 8000dda:	4a08      	ldr	r2, [pc, #32]	; (8000dfc <DAC_Calculate_Buffer+0xfc>)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i=0; i<100; i++)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	3301      	adds	r3, #1
 8000de6:	603b      	str	r3, [r7, #0]
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	2b63      	cmp	r3, #99	; 0x63
 8000dec:	ddb7      	ble.n	8000d5e <DAC_Calculate_Buffer+0x5e>
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	ecbd 8b02 	vpop	{d8}
 8000df8:	bd90      	pop	{r4, r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000828 	.word	0x20000828
 8000e00:	3d00adfc 	.word	0x3d00adfc
 8000e04:	3f59999a 	.word	0x3f59999a
 8000e08:	3f151eb8 	.word	0x3f151eb8

08000e0c <DAC_Set_Output_Frequency>:

void DAC_Set_Output_Frequency()
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
	OutputState.ARR_Val = OutputState.TIM2_Clock / (OutputState.Frequency*100);
 8000e10:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <DAC_Set_Output_Frequency+0x5c>)
 8000e12:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8000e16:	4a14      	ldr	r2, [pc, #80]	; (8000e68 <DAC_Set_Output_Frequency+0x5c>)
 8000e18:	f8b2 2198 	ldrh.w	r2, [r2, #408]	; 0x198
 8000e1c:	4611      	mov	r1, r2
 8000e1e:	2264      	movs	r2, #100	; 0x64
 8000e20:	fb02 f201 	mul.w	r2, r2, r1
 8000e24:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e28:	4a0f      	ldr	r2, [pc, #60]	; (8000e68 <DAC_Set_Output_Frequency+0x5c>)
 8000e2a:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
	__HAL_TIM_SET_AUTORELOAD(&htim2, OutputState.ARR_Val);
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <DAC_Set_Output_Frequency+0x60>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a0d      	ldr	r2, [pc, #52]	; (8000e68 <DAC_Set_Output_Frequency+0x5c>)
 8000e34:	f8d2 21a0 	ldr.w	r2, [r2, #416]	; 0x1a0
 8000e38:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e3a:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <DAC_Set_Output_Frequency+0x5c>)
 8000e3c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000e40:	4a0a      	ldr	r2, [pc, #40]	; (8000e6c <DAC_Set_Output_Frequency+0x60>)
 8000e42:	60d3      	str	r3, [r2, #12]
	TIM2->CR1 = 0;				// 	Disable Timer
 8000e44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
	TIM2->EGR = TIM_EGR_UG;		//	Init registers
 8000e4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e50:	2201      	movs	r2, #1
 8000e52:	615a      	str	r2, [r3, #20]
	TIM2->CR1 = 1;				// 	Start
 8000e54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e58:	2201      	movs	r2, #1
 8000e5a:	601a      	str	r2, [r3, #0]
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	20000828 	.word	0x20000828
 8000e6c:	20000b64 	.word	0x20000b64

08000e70 <DAC_Start>:

void DAC_Start()
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af02      	add	r7, sp, #8
	if(OutputState.Mode != p)
 8000e76:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <DAC_Start+0x44>)
 8000e78:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 8000e7c:	2b70      	cmp	r3, #112	; 0x70
 8000e7e:	d016      	beq.n	8000eae <DAC_Start+0x3e>
	{
		DAC_Calculate_Buffer();
 8000e80:	f7ff ff3e 	bl	8000d00 <DAC_Calculate_Buffer>
		DAC_Set_Output_Frequency();
 8000e84:	f7ff ffc2 	bl	8000e0c <DAC_Set_Output_Frequency>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, OutputState.Buffer, 100, DAC_ALIGN_12B_R);
 8000e88:	2300      	movs	r3, #0
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	2364      	movs	r3, #100	; 0x64
 8000e8e:	4a09      	ldr	r2, [pc, #36]	; (8000eb4 <DAC_Start+0x44>)
 8000e90:	2100      	movs	r1, #0
 8000e92:	4809      	ldr	r0, [pc, #36]	; (8000eb8 <DAC_Start+0x48>)
 8000e94:	f003 fee8 	bl	8004c68 <HAL_DAC_Start_DMA>
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea2:	f004 fc33 	bl	800570c <HAL_GPIO_WritePin>
		OutputState.On = true;
 8000ea6:	4b03      	ldr	r3, [pc, #12]	; (8000eb4 <DAC_Start+0x44>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
	}
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000828 	.word	0x20000828
 8000eb8:	200009d8 	.word	0x200009d8

08000ebc <DAC_Stop>:

void DAC_Stop()
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	OutputState.On = false;
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <DAC_Stop+0x28>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4807      	ldr	r0, [pc, #28]	; (8000ee8 <DAC_Stop+0x2c>)
 8000ecc:	f003 fe5d 	bl	8004b8a <HAL_DAC_Stop_DMA>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ed6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eda:	f004 fc17 	bl	800570c <HAL_GPIO_WritePin>
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000828 	.word	0x20000828
 8000ee8:	200009d8 	.word	0x200009d8

08000eec <DAC_Update_Output>:

void DAC_Update_Output()
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	DAC_Stop();
 8000ef0:	f7ff ffe4 	bl	8000ebc <DAC_Stop>
	DAC_Start();
 8000ef4:	f7ff ffbc 	bl	8000e70 <DAC_Start>
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}

08000efc <LCD_Init>:
#define lcd_D7_bit			12

DisplayStateType DisplayState;

void LCD_Init()
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0

	HAL_Delay(20);
 8000f00:	2014      	movs	r0, #20
 8000f02:	f002 fb3b 	bl	800357c <HAL_Delay>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionReset);
 8000f06:	2030      	movs	r0, #48	; 0x30
 8000f08:	f000 f95c 	bl	80011c4 <LCD_Write_8bitInstruction>
	HAL_Delay(5);
 8000f0c:	2005      	movs	r0, #5
 8000f0e:	f002 fb35 	bl	800357c <HAL_Delay>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionReset);
 8000f12:	2030      	movs	r0, #48	; 0x30
 8000f14:	f000 f956 	bl	80011c4 <LCD_Write_8bitInstruction>
	Delay_us_10(11);
 8000f18:	200b      	movs	r0, #11
 8000f1a:	f001 fcef 	bl	80028fc <Delay_us_10>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionReset);
 8000f1e:	2030      	movs	r0, #48	; 0x30
 8000f20:	f000 f950 	bl	80011c4 <LCD_Write_8bitInstruction>
	Delay_us_10(5);
 8000f24:	2005      	movs	r0, #5
 8000f26:	f001 fce9 	bl	80028fc <Delay_us_10>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionSet4bit);
 8000f2a:	2028      	movs	r0, #40	; 0x28
 8000f2c:	f000 f94a 	bl	80011c4 <LCD_Write_8bitInstruction>
	Delay_us_10(5);
 8000f30:	2005      	movs	r0, #5
 8000f32:	f001 fce3 	bl	80028fc <Delay_us_10>

	LCD_Write_Instruction(lcd_instruction_FunctionSet4bit);
 8000f36:	2028      	movs	r0, #40	; 0x28
 8000f38:	f000 f89c 	bl	8001074 <LCD_Write_Instruction>
	Delay_us_10(5);
 8000f3c:	2005      	movs	r0, #5
 8000f3e:	f001 fcdd 	bl	80028fc <Delay_us_10>

	LCD_Write_Instruction(lcd_instruction_DisplayOn);
 8000f42:	200f      	movs	r0, #15
 8000f44:	f000 f896 	bl	8001074 <LCD_Write_Instruction>
	Delay_us_10(5);
 8000f48:	2005      	movs	r0, #5
 8000f4a:	f001 fcd7 	bl	80028fc <Delay_us_10>

	LCD_Write_Instruction(lcd_instruction_ClearDisplay);
 8000f4e:	2001      	movs	r0, #1
 8000f50:	f000 f890 	bl	8001074 <LCD_Write_Instruction>
	HAL_Delay(2);
 8000f54:	2002      	movs	r0, #2
 8000f56:	f002 fb11 	bl	800357c <HAL_Delay>

	LCD_Write_Instruction(lcd_instruction_EntryMode);
 8000f5a:	2006      	movs	r0, #6
 8000f5c:	f000 f88a 	bl	8001074 <LCD_Write_Instruction>
	Delay_us_10(5);
 8000f60:	2005      	movs	r0, #5
 8000f62:	f001 fccb 	bl	80028fc <Delay_us_10>
//	HAL_Delay(1);
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <LCD_Write_String>:

void LCD_Write_String(uint8_t string[])
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b084      	sub	sp, #16
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
//	HAL_Delay(1);
	int i = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
	while (string[i] != 0)
 8000f76:	e009      	b.n	8000f8c <LCD_Write_String+0x22>
	{
		LCD_Write_Character(string[i]);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 f84b 	bl	800101c <LCD_Write_Character>
		i++;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	60fb      	str	r3, [r7, #12]
	while (string[i] != 0)
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d1ef      	bne.n	8000f78 <LCD_Write_String+0xe>
//		HAL_Delay(1);
	}
}
 8000f98:	bf00      	nop
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <LCD_Write_Character_Shift>:

void LCD_Write_Character_Shift(uint8_t character)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
	lcd_RS_GPIO_Port->ODR |= (1<<lcd_RS_bit);			// select data register (RS High)
 8000faa:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <LCD_Write_Character_Shift+0x74>)
 8000fac:	695b      	ldr	r3, [r3, #20]
 8000fae:	4a19      	ldr	r2, [pc, #100]	; (8001014 <LCD_Write_Character_Shift+0x74>)
 8000fb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fb4:	6153      	str	r3, [r2, #20]
	LCD_Write_Nibbles(character);
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 f871 	bl	80010a0 <LCD_Write_Nibbles>
	if(DisplayState.CurrentLine == Topline){
 8000fbe:	4b16      	ldr	r3, [pc, #88]	; (8001018 <LCD_Write_Character_Shift+0x78>)
 8000fc0:	789b      	ldrb	r3, [r3, #2]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d106      	bne.n	8000fd4 <LCD_Write_Character_Shift+0x34>
		DisplayState.ToplineCharacters ++;
 8000fc6:	4b14      	ldr	r3, [pc, #80]	; (8001018 <LCD_Write_Character_Shift+0x78>)
 8000fc8:	78db      	ldrb	r3, [r3, #3]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4b12      	ldr	r3, [pc, #72]	; (8001018 <LCD_Write_Character_Shift+0x78>)
 8000fd0:	70da      	strb	r2, [r3, #3]
 8000fd2:	e009      	b.n	8000fe8 <LCD_Write_Character_Shift+0x48>
	} else if (DisplayState.CurrentLine == Bottomline){
 8000fd4:	4b10      	ldr	r3, [pc, #64]	; (8001018 <LCD_Write_Character_Shift+0x78>)
 8000fd6:	789b      	ldrb	r3, [r3, #2]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d105      	bne.n	8000fe8 <LCD_Write_Character_Shift+0x48>
		DisplayState.BottomlineCharacters ++;
 8000fdc:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <LCD_Write_Character_Shift+0x78>)
 8000fde:	791b      	ldrb	r3, [r3, #4]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <LCD_Write_Character_Shift+0x78>)
 8000fe6:	711a      	strb	r2, [r3, #4]
	}
	if((DisplayState.CurrentLine == Topline && DisplayState.ToplineCharacters > 15)
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <LCD_Write_Character_Shift+0x78>)
 8000fea:	789b      	ldrb	r3, [r3, #2]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d103      	bne.n	8000ff8 <LCD_Write_Character_Shift+0x58>
 8000ff0:	4b09      	ldr	r3, [pc, #36]	; (8001018 <LCD_Write_Character_Shift+0x78>)
 8000ff2:	78db      	ldrb	r3, [r3, #3]
 8000ff4:	2b0f      	cmp	r3, #15
 8000ff6:	d807      	bhi.n	8001008 <LCD_Write_Character_Shift+0x68>
			|| (DisplayState.CurrentLine == Bottomline && DisplayState.BottomlineCharacters > 15))
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <LCD_Write_Character_Shift+0x78>)
 8000ffa:	789b      	ldrb	r3, [r3, #2]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d105      	bne.n	800100c <LCD_Write_Character_Shift+0x6c>
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <LCD_Write_Character_Shift+0x78>)
 8001002:	791b      	ldrb	r3, [r3, #4]
 8001004:	2b0f      	cmp	r3, #15
 8001006:	d901      	bls.n	800100c <LCD_Write_Character_Shift+0x6c>
	{
		// Scroll Screen
		LCD_Shift_Left();
 8001008:	f000 f9ac 	bl	8001364 <LCD_Shift_Left>
	}
}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	48000400 	.word	0x48000400
 8001018:	200009cc 	.word	0x200009cc

0800101c <LCD_Write_Character>:

void LCD_Write_Character(uint8_t character)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
	lcd_RS_GPIO_Port->ODR |= (1<<lcd_RS_bit);			// select data register (RS High)
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <LCD_Write_Character+0x50>)
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	4a10      	ldr	r2, [pc, #64]	; (800106c <LCD_Write_Character+0x50>)
 800102c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001030:	6153      	str	r3, [r2, #20]
	LCD_Write_Nibbles(character);
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	4618      	mov	r0, r3
 8001036:	f000 f833 	bl	80010a0 <LCD_Write_Nibbles>
	if(DisplayState.CurrentLine == Topline){
 800103a:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <LCD_Write_Character+0x54>)
 800103c:	789b      	ldrb	r3, [r3, #2]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d106      	bne.n	8001050 <LCD_Write_Character+0x34>
		DisplayState.ToplineCharacters ++;
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <LCD_Write_Character+0x54>)
 8001044:	78db      	ldrb	r3, [r3, #3]
 8001046:	3301      	adds	r3, #1
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <LCD_Write_Character+0x54>)
 800104c:	70da      	strb	r2, [r3, #3]
	} else if (DisplayState.CurrentLine == Bottomline){
		DisplayState.BottomlineCharacters ++;
	}
}
 800104e:	e009      	b.n	8001064 <LCD_Write_Character+0x48>
	} else if (DisplayState.CurrentLine == Bottomline){
 8001050:	4b07      	ldr	r3, [pc, #28]	; (8001070 <LCD_Write_Character+0x54>)
 8001052:	789b      	ldrb	r3, [r3, #2]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d105      	bne.n	8001064 <LCD_Write_Character+0x48>
		DisplayState.BottomlineCharacters ++;
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <LCD_Write_Character+0x54>)
 800105a:	791b      	ldrb	r3, [r3, #4]
 800105c:	3301      	adds	r3, #1
 800105e:	b2da      	uxtb	r2, r3
 8001060:	4b03      	ldr	r3, [pc, #12]	; (8001070 <LCD_Write_Character+0x54>)
 8001062:	711a      	strb	r2, [r3, #4]
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	48000400 	.word	0x48000400
 8001070:	200009cc 	.word	0x200009cc

08001074 <LCD_Write_Instruction>:

void LCD_Write_Instruction(uint8_t instruction)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
	lcd_RS_GPIO_Port->ODR &= ~(1<<lcd_RS_bit);			// select the Instruction Register (RS low)
 800107e:	4b07      	ldr	r3, [pc, #28]	; (800109c <LCD_Write_Instruction+0x28>)
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	4a06      	ldr	r2, [pc, #24]	; (800109c <LCD_Write_Instruction+0x28>)
 8001084:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001088:	6153      	str	r3, [r2, #20]
	LCD_Write_Nibbles(instruction);
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	4618      	mov	r0, r3
 800108e:	f000 f807 	bl	80010a0 <LCD_Write_Nibbles>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	48000400 	.word	0x48000400

080010a0 <LCD_Write_Nibbles>:

void LCD_Write_Nibbles(uint8_t byte)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
	Delay_us_10(1); // tsu1 > 40ns
 80010aa:	2001      	movs	r0, #1
 80010ac:	f001 fc26 	bl	80028fc <Delay_us_10>
	lcd_E_GPIO_Port->ODR |= (1<<lcd_E_bit);			// set E high
 80010b0:	4b42      	ldr	r3, [pc, #264]	; (80011bc <LCD_Write_Nibbles+0x11c>)
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	4a41      	ldr	r2, [pc, #260]	; (80011bc <LCD_Write_Nibbles+0x11c>)
 80010b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010ba:	6153      	str	r3, [r2, #20]
	LCD_ZeroPins();
 80010bc:	f000 f8d8 	bl	8001270 <LCD_ZeroPins>

	// Write first (most significant) nibble
	if(byte & 1<<7)	lcd_D7_GPIO_Port->ODR |= (1<<lcd_D7_bit);
 80010c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	da07      	bge.n	80010d8 <LCD_Write_Nibbles+0x38>
 80010c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80010d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010d6:	6153      	str	r3, [r2, #20]
	if(byte & 1<<6)	lcd_D6_GPIO_Port->ODR |= (1<<lcd_D6_bit);
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d007      	beq.n	80010f2 <LCD_Write_Nibbles+0x52>
 80010e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80010ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010f0:	6153      	str	r3, [r2, #20]
	if(byte & 1<<5)	lcd_D5_GPIO_Port->ODR |= (1<<lcd_D5_bit);
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	f003 0320 	and.w	r3, r3, #32
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d005      	beq.n	8001108 <LCD_Write_Nibbles+0x68>
 80010fc:	4b30      	ldr	r3, [pc, #192]	; (80011c0 <LCD_Write_Nibbles+0x120>)
 80010fe:	695b      	ldr	r3, [r3, #20]
 8001100:	4a2f      	ldr	r2, [pc, #188]	; (80011c0 <LCD_Write_Nibbles+0x120>)
 8001102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001106:	6153      	str	r3, [r2, #20]
	if(byte & 1<<4)	lcd_D4_GPIO_Port->ODR |= (1<<lcd_D4_bit);
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	f003 0310 	and.w	r3, r3, #16
 800110e:	2b00      	cmp	r3, #0
 8001110:	d005      	beq.n	800111e <LCD_Write_Nibbles+0x7e>
 8001112:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <LCD_Write_Nibbles+0x120>)
 8001114:	695b      	ldr	r3, [r3, #20]
 8001116:	4a2a      	ldr	r2, [pc, #168]	; (80011c0 <LCD_Write_Nibbles+0x120>)
 8001118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800111c:	6153      	str	r3, [r2, #20]


	// Pulse Enable
//	HAL_Delay(1);
	Delay_us_10(10);
 800111e:	200a      	movs	r0, #10
 8001120:	f001 fbec 	bl	80028fc <Delay_us_10>
	lcd_E_GPIO_Port->ODR &= ~(1<<lcd_E_bit);			// Set to 0
 8001124:	4b25      	ldr	r3, [pc, #148]	; (80011bc <LCD_Write_Nibbles+0x11c>)
 8001126:	695b      	ldr	r3, [r3, #20]
 8001128:	4a24      	ldr	r2, [pc, #144]	; (80011bc <LCD_Write_Nibbles+0x11c>)
 800112a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800112e:	6153      	str	r3, [r2, #20]
	lcd_E_GPIO_Port->ODR |= (1<<lcd_E_bit);				// Set to 1
 8001130:	4b22      	ldr	r3, [pc, #136]	; (80011bc <LCD_Write_Nibbles+0x11c>)
 8001132:	695b      	ldr	r3, [r3, #20]
 8001134:	4a21      	ldr	r2, [pc, #132]	; (80011bc <LCD_Write_Nibbles+0x11c>)
 8001136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800113a:	6153      	str	r3, [r2, #20]

	LCD_ZeroPins();
 800113c:	f000 f898 	bl	8001270 <LCD_ZeroPins>
	if(byte & 1<<3)	lcd_D7_GPIO_Port->ODR |= (1<<lcd_D7_bit);
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	f003 0308 	and.w	r3, r3, #8
 8001146:	2b00      	cmp	r3, #0
 8001148:	d007      	beq.n	800115a <LCD_Write_Nibbles+0xba>
 800114a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800114e:	695b      	ldr	r3, [r3, #20]
 8001150:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001154:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001158:	6153      	str	r3, [r2, #20]
	if(byte & 1<<2)	lcd_D6_GPIO_Port->ODR |= (1<<lcd_D6_bit);
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	2b00      	cmp	r3, #0
 8001162:	d007      	beq.n	8001174 <LCD_Write_Nibbles+0xd4>
 8001164:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800116e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001172:	6153      	str	r3, [r2, #20]
	if(byte & 1<<1)	lcd_D5_GPIO_Port->ODR |= (1<<lcd_D5_bit);
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d005      	beq.n	800118a <LCD_Write_Nibbles+0xea>
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <LCD_Write_Nibbles+0x120>)
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	4a0f      	ldr	r2, [pc, #60]	; (80011c0 <LCD_Write_Nibbles+0x120>)
 8001184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001188:	6153      	str	r3, [r2, #20]
	if(byte & 1<<0)	lcd_D4_GPIO_Port->ODR |= (1<<lcd_D4_bit);
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	2b00      	cmp	r3, #0
 8001192:	d005      	beq.n	80011a0 <LCD_Write_Nibbles+0x100>
 8001194:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <LCD_Write_Nibbles+0x120>)
 8001196:	695b      	ldr	r3, [r3, #20]
 8001198:	4a09      	ldr	r2, [pc, #36]	; (80011c0 <LCD_Write_Nibbles+0x120>)
 800119a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800119e:	6153      	str	r3, [r2, #20]

	// Drop Enable
//	HAL_Delay(1);
	Delay_us_10(10);
 80011a0:	200a      	movs	r0, #10
 80011a2:	f001 fbab 	bl	80028fc <Delay_us_10>
	lcd_E_GPIO_Port->ODR &= ~(1<<lcd_E_bit);		// Set to 0
 80011a6:	4b05      	ldr	r3, [pc, #20]	; (80011bc <LCD_Write_Nibbles+0x11c>)
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	4a04      	ldr	r2, [pc, #16]	; (80011bc <LCD_Write_Nibbles+0x11c>)
 80011ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80011b0:	6153      	str	r3, [r2, #20]
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	48000400 	.word	0x48000400
 80011c0:	48000800 	.word	0x48000800

080011c4 <LCD_Write_8bitInstruction>:

void LCD_Write_8bitInstruction(uint8_t byte)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
	lcd_RS_GPIO_Port->ODR &= ~(1<<lcd_RS_bit);			// Set RS to 0
 80011ce:	4b26      	ldr	r3, [pc, #152]	; (8001268 <LCD_Write_8bitInstruction+0xa4>)
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	4a25      	ldr	r2, [pc, #148]	; (8001268 <LCD_Write_8bitInstruction+0xa4>)
 80011d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80011d8:	6153      	str	r3, [r2, #20]
	Delay_us_10(1); // tsu1 > 40ns
 80011da:	2001      	movs	r0, #1
 80011dc:	f001 fb8e 	bl	80028fc <Delay_us_10>
	lcd_E_GPIO_Port->ODR |= (1<<lcd_E_bit);				// Set E to 1
 80011e0:	4b21      	ldr	r3, [pc, #132]	; (8001268 <LCD_Write_8bitInstruction+0xa4>)
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	4a20      	ldr	r2, [pc, #128]	; (8001268 <LCD_Write_8bitInstruction+0xa4>)
 80011e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011ea:	6153      	str	r3, [r2, #20]
	LCD_ZeroPins();
 80011ec:	f000 f840 	bl	8001270 <LCD_ZeroPins>

	// Set to zero first
	if(byte & 1<<7)	lcd_D7_GPIO_Port->ODR |= (1<<lcd_D7_bit);
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	da07      	bge.n	8001208 <LCD_Write_8bitInstruction+0x44>
 80011f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001202:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001206:	6153      	str	r3, [r2, #20]
	if(byte & 1<<6)	lcd_D6_GPIO_Port->ODR |= (1<<lcd_D6_bit);
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800120e:	2b00      	cmp	r3, #0
 8001210:	d007      	beq.n	8001222 <LCD_Write_8bitInstruction+0x5e>
 8001212:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001216:	695b      	ldr	r3, [r3, #20]
 8001218:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800121c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001220:	6153      	str	r3, [r2, #20]
	if(byte & 1<<5)	lcd_D5_GPIO_Port->ODR |= (1<<lcd_D5_bit);
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	f003 0320 	and.w	r3, r3, #32
 8001228:	2b00      	cmp	r3, #0
 800122a:	d005      	beq.n	8001238 <LCD_Write_8bitInstruction+0x74>
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <LCD_Write_8bitInstruction+0xa8>)
 800122e:	695b      	ldr	r3, [r3, #20]
 8001230:	4a0e      	ldr	r2, [pc, #56]	; (800126c <LCD_Write_8bitInstruction+0xa8>)
 8001232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001236:	6153      	str	r3, [r2, #20]
	if(byte & 1<<4)	lcd_D4_GPIO_Port->ODR |= (1<<lcd_D4_bit);
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	f003 0310 	and.w	r3, r3, #16
 800123e:	2b00      	cmp	r3, #0
 8001240:	d005      	beq.n	800124e <LCD_Write_8bitInstruction+0x8a>
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <LCD_Write_8bitInstruction+0xa8>)
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	4a09      	ldr	r2, [pc, #36]	; (800126c <LCD_Write_8bitInstruction+0xa8>)
 8001248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800124c:	6153      	str	r3, [r2, #20]

//	HAL_Delay(1);
	Delay_us_10(1);
 800124e:	2001      	movs	r0, #1
 8001250:	f001 fb54 	bl	80028fc <Delay_us_10>
	lcd_E_GPIO_Port->ODR &= ~(1<<lcd_E_bit);		// Set E to 0
 8001254:	4b04      	ldr	r3, [pc, #16]	; (8001268 <LCD_Write_8bitInstruction+0xa4>)
 8001256:	695b      	ldr	r3, [r3, #20]
 8001258:	4a03      	ldr	r2, [pc, #12]	; (8001268 <LCD_Write_8bitInstruction+0xa4>)
 800125a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800125e:	6153      	str	r3, [r2, #20]
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	48000400 	.word	0x48000400
 800126c:	48000800 	.word	0x48000800

08001270 <LCD_ZeroPins>:

void LCD_ZeroPins()
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
	lcd_D7_GPIO_Port->ODR &= ~(1<<lcd_D7_bit);
 8001274:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800127e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001282:	6153      	str	r3, [r2, #20]
	lcd_D6_GPIO_Port->ODR &= ~(1<<lcd_D6_bit);
 8001284:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800128e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001292:	6153      	str	r3, [r2, #20]
	lcd_D5_GPIO_Port->ODR &= ~(1<<lcd_D5_bit);
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <LCD_ZeroPins+0x48>)
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	4a07      	ldr	r2, [pc, #28]	; (80012b8 <LCD_ZeroPins+0x48>)
 800129a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800129e:	6153      	str	r3, [r2, #20]
	lcd_D4_GPIO_Port->ODR &= ~(1<<lcd_D4_bit);
 80012a0:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <LCD_ZeroPins+0x48>)
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <LCD_ZeroPins+0x48>)
 80012a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012aa:	6153      	str	r3, [r2, #20]
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	48000800 	.word	0x48000800

080012bc <LCD_Clear_Display>:

void LCD_Clear_Display()
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
	LCD_Write_Instruction(lcd_instruction_ReturnHome);
 80012c0:	2002      	movs	r0, #2
 80012c2:	f7ff fed7 	bl	8001074 <LCD_Write_Instruction>
	Delay_us_10(200); // 2ms
 80012c6:	20c8      	movs	r0, #200	; 0xc8
 80012c8:	f001 fb18 	bl	80028fc <Delay_us_10>
	LCD_Write_Instruction(lcd_instruction_ClearDisplay);
 80012cc:	2001      	movs	r0, #1
 80012ce:	f7ff fed1 	bl	8001074 <LCD_Write_Instruction>
	Delay_us_10(200); // 2ms
 80012d2:	20c8      	movs	r0, #200	; 0xc8
 80012d4:	f001 fb12 	bl	80028fc <Delay_us_10>
	DisplayState.ToplineCharacters = 0;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <LCD_Clear_Display+0x38>)
 80012da:	2200      	movs	r2, #0
 80012dc:	70da      	strb	r2, [r3, #3]
	DisplayState.BottomlineCharacters = 0;
 80012de:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <LCD_Clear_Display+0x38>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	711a      	strb	r2, [r3, #4]
	DisplayState.CurrentLine = Topline;
 80012e4:	4b03      	ldr	r3, [pc, #12]	; (80012f4 <LCD_Clear_Display+0x38>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	709a      	strb	r2, [r3, #2]
	DisplayState.DisplayPosition = 0;
 80012ea:	4b02      	ldr	r3, [pc, #8]	; (80012f4 <LCD_Clear_Display+0x38>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	725a      	strb	r2, [r3, #9]
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	200009cc 	.word	0x200009cc

080012f8 <LCD_NewLine>:

void LCD_NewLine()
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	LCD_Write_Instruction(lcd_instruction_CursorNewLine);
 80012fc:	20c0      	movs	r0, #192	; 0xc0
 80012fe:	f7ff feb9 	bl	8001074 <LCD_Write_Instruction>
	Delay_us_10(5);
 8001302:	2005      	movs	r0, #5
 8001304:	f001 fafa 	bl	80028fc <Delay_us_10>
	DisplayState.CurrentLine = Bottomline;
 8001308:	4b02      	ldr	r3, [pc, #8]	; (8001314 <LCD_NewLine+0x1c>)
 800130a:	2201      	movs	r2, #1
 800130c:	709a      	strb	r2, [r3, #2]
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200009cc 	.word	0x200009cc

08001318 <LCD_AutoScroll>:

void LCD_AutoScroll()
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
	uint8_t returnflag = DisplayState.DisplayPosition + 12;
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <LCD_AutoScroll+0x48>)
 8001320:	7a5b      	ldrb	r3, [r3, #9]
 8001322:	330c      	adds	r3, #12
 8001324:	71bb      	strb	r3, [r7, #6]
	uint8_t longestline;
	if(DisplayState.ToplineCharacters >= DisplayState.BottomlineCharacters) longestline = DisplayState.ToplineCharacters;
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <LCD_AutoScroll+0x48>)
 8001328:	78da      	ldrb	r2, [r3, #3]
 800132a:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <LCD_AutoScroll+0x48>)
 800132c:	791b      	ldrb	r3, [r3, #4]
 800132e:	429a      	cmp	r2, r3
 8001330:	d303      	bcc.n	800133a <LCD_AutoScroll+0x22>
 8001332:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <LCD_AutoScroll+0x48>)
 8001334:	78db      	ldrb	r3, [r3, #3]
 8001336:	71fb      	strb	r3, [r7, #7]
 8001338:	e002      	b.n	8001340 <LCD_AutoScroll+0x28>
	else longestline = DisplayState.BottomlineCharacters;
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <LCD_AutoScroll+0x48>)
 800133c:	791b      	ldrb	r3, [r3, #4]
 800133e:	71fb      	strb	r3, [r7, #7]
	if(longestline > 16)
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	2b10      	cmp	r3, #16
 8001344:	d908      	bls.n	8001358 <LCD_AutoScroll+0x40>
	{
		if(returnflag > longestline)
 8001346:	79ba      	ldrb	r2, [r7, #6]
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	429a      	cmp	r2, r3
 800134c:	d902      	bls.n	8001354 <LCD_AutoScroll+0x3c>
		{
			LCD_Shift_Home();
 800134e:	f000 f82d 	bl	80013ac <LCD_Shift_Home>
		else
		{
			LCD_Shift_Left();
		}
	}
}
 8001352:	e001      	b.n	8001358 <LCD_AutoScroll+0x40>
			LCD_Shift_Left();
 8001354:	f000 f806 	bl	8001364 <LCD_Shift_Left>
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	200009cc 	.word	0x200009cc

08001364 <LCD_Shift_Left>:

void LCD_Shift_Left()
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
	LCD_Write_Instruction(lcd_instruction_DisplayShiftLeft);
 8001368:	2018      	movs	r0, #24
 800136a:	f7ff fe83 	bl	8001074 <LCD_Write_Instruction>
	Delay_us_10(5);
 800136e:	2005      	movs	r0, #5
 8001370:	f001 fac4 	bl	80028fc <Delay_us_10>
	DisplayState.DisplayPosition ++;
 8001374:	4b03      	ldr	r3, [pc, #12]	; (8001384 <LCD_Shift_Left+0x20>)
 8001376:	7a5b      	ldrb	r3, [r3, #9]
 8001378:	3301      	adds	r3, #1
 800137a:	b2da      	uxtb	r2, r3
 800137c:	4b01      	ldr	r3, [pc, #4]	; (8001384 <LCD_Shift_Left+0x20>)
 800137e:	725a      	strb	r2, [r3, #9]
}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	200009cc 	.word	0x200009cc

08001388 <LCD_Shift_Right>:

void LCD_Shift_Right()
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	LCD_Write_Instruction(lcd_instruction_DisplayShiftRight);
 800138c:	201c      	movs	r0, #28
 800138e:	f7ff fe71 	bl	8001074 <LCD_Write_Instruction>
	Delay_us_10(5);
 8001392:	2005      	movs	r0, #5
 8001394:	f001 fab2 	bl	80028fc <Delay_us_10>
	DisplayState.DisplayPosition -= 1;
 8001398:	4b03      	ldr	r3, [pc, #12]	; (80013a8 <LCD_Shift_Right+0x20>)
 800139a:	7a5b      	ldrb	r3, [r3, #9]
 800139c:	3b01      	subs	r3, #1
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	4b01      	ldr	r3, [pc, #4]	; (80013a8 <LCD_Shift_Right+0x20>)
 80013a2:	725a      	strb	r2, [r3, #9]
}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	200009cc 	.word	0x200009cc

080013ac <LCD_Shift_Home>:

void LCD_Shift_Home()
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
	uint8_t num_shifted = DisplayState.DisplayPosition;
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <LCD_Shift_Home+0x2c>)
 80013b4:	7a5b      	ldrb	r3, [r3, #9]
 80013b6:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < num_shifted; i++)
 80013b8:	2300      	movs	r3, #0
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	e004      	b.n	80013c8 <LCD_Shift_Home+0x1c>
	{
		LCD_Shift_Right();
 80013be:	f7ff ffe3 	bl	8001388 <LCD_Shift_Right>
	for(int i = 0; i < num_shifted; i++)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3301      	adds	r3, #1
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	78fb      	ldrb	r3, [r7, #3]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	dbf6      	blt.n	80013be <LCD_Shift_Home+0x12>
	}
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	200009cc 	.word	0x200009cc

080013dc <LCD_Cursor_Home>:

void LCD_Cursor_Home()
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
	LCD_Write_Instruction(lcd_instruction_CursorHome);
 80013e0:	2080      	movs	r0, #128	; 0x80
 80013e2:	f7ff fe47 	bl	8001074 <LCD_Write_Instruction>
	Delay_us_10(5);
 80013e6:	2005      	movs	r0, #5
 80013e8:	f001 fa88 	bl	80028fc <Delay_us_10>
	DisplayState.ToplineCharacters = 0;
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <LCD_Cursor_Home+0x28>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	70da      	strb	r2, [r3, #3]
	DisplayState.BottomlineCharacters = 0;
 80013f2:	4b04      	ldr	r3, [pc, #16]	; (8001404 <LCD_Cursor_Home+0x28>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	711a      	strb	r2, [r3, #4]
	DisplayState.CurrentLine = Topline;
 80013f8:	4b02      	ldr	r3, [pc, #8]	; (8001404 <LCD_Cursor_Home+0x28>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	709a      	strb	r2, [r3, #2]
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200009cc 	.word	0x200009cc

08001408 <LCD_changeDisplayMode>:

void LCD_changeDisplayMode(DisplayMode newDisplayMode)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
	LCD_Clear_Display();
 8001412:	f7ff ff53 	bl	80012bc <LCD_Clear_Display>
	if (newDisplayMode == Menu)
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d11b      	bne.n	8001454 <LCD_changeDisplayMode+0x4c>
	{
		// Change to Menu Display State
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800141c:	2201      	movs	r2, #1
 800141e:	2120      	movs	r1, #32
 8001420:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001424:	f004 f972 	bl	800570c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001428:	2200      	movs	r2, #0
 800142a:	2180      	movs	r1, #128	; 0x80
 800142c:	4829      	ldr	r0, [pc, #164]	; (80014d4 <LCD_changeDisplayMode+0xcc>)
 800142e:	f004 f96d 	bl	800570c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001432:	2200      	movs	r2, #0
 8001434:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001438:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800143c:	f004 f966 	bl	800570c <HAL_GPIO_WritePin>
		LCD_Display_Menu();
 8001440:	f000 f84c 	bl	80014dc <LCD_Display_Menu>
		DisplayState.LastMode = DisplayState.Mode;
 8001444:	4b24      	ldr	r3, [pc, #144]	; (80014d8 <LCD_changeDisplayMode+0xd0>)
 8001446:	781a      	ldrb	r2, [r3, #0]
 8001448:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <LCD_changeDisplayMode+0xd0>)
 800144a:	705a      	strb	r2, [r3, #1]
		DisplayState.Mode = Menu;
 800144c:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <LCD_changeDisplayMode+0xd0>)
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
		DisplayState.LastMode = DisplayState.Mode;
		DisplayState.Mode = Output;
	}
}
 8001452:	e03a      	b.n	80014ca <LCD_changeDisplayMode+0xc2>
	else if (newDisplayMode == Measurement)
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d11b      	bne.n	8001492 <LCD_changeDisplayMode+0x8a>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800145a:	2200      	movs	r2, #0
 800145c:	2120      	movs	r1, #32
 800145e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001462:	f004 f953 	bl	800570c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001466:	2201      	movs	r2, #1
 8001468:	2180      	movs	r1, #128	; 0x80
 800146a:	481a      	ldr	r0, [pc, #104]	; (80014d4 <LCD_changeDisplayMode+0xcc>)
 800146c:	f004 f94e 	bl	800570c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001476:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800147a:	f004 f947 	bl	800570c <HAL_GPIO_WritePin>
		LCD_Display_Measurement();
 800147e:	f000 f843 	bl	8001508 <LCD_Display_Measurement>
		DisplayState.LastMode = DisplayState.Mode;
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <LCD_changeDisplayMode+0xd0>)
 8001484:	781a      	ldrb	r2, [r3, #0]
 8001486:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <LCD_changeDisplayMode+0xd0>)
 8001488:	705a      	strb	r2, [r3, #1]
		DisplayState.Mode = Measurement;
 800148a:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <LCD_changeDisplayMode+0xd0>)
 800148c:	2201      	movs	r2, #1
 800148e:	701a      	strb	r2, [r3, #0]
}
 8001490:	e01b      	b.n	80014ca <LCD_changeDisplayMode+0xc2>
	else if (newDisplayMode == Output)
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	2b02      	cmp	r3, #2
 8001496:	d118      	bne.n	80014ca <LCD_changeDisplayMode+0xc2>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001498:	2200      	movs	r2, #0
 800149a:	2120      	movs	r1, #32
 800149c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a0:	f004 f934 	bl	800570c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80014a4:	2200      	movs	r2, #0
 80014a6:	2180      	movs	r1, #128	; 0x80
 80014a8:	480a      	ldr	r0, [pc, #40]	; (80014d4 <LCD_changeDisplayMode+0xcc>)
 80014aa:	f004 f92f 	bl	800570c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 80014ae:	2201      	movs	r2, #1
 80014b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014b8:	f004 f928 	bl	800570c <HAL_GPIO_WritePin>
		DisplayState.LastMode = DisplayState.Mode;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <LCD_changeDisplayMode+0xd0>)
 80014be:	781a      	ldrb	r2, [r3, #0]
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <LCD_changeDisplayMode+0xd0>)
 80014c2:	705a      	strb	r2, [r3, #1]
		DisplayState.Mode = Output;
 80014c4:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <LCD_changeDisplayMode+0xd0>)
 80014c6:	2202      	movs	r2, #2
 80014c8:	701a      	strb	r2, [r3, #0]
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	48000800 	.word	0x48000800
 80014d8:	200009cc 	.word	0x200009cc

080014dc <LCD_Display_Menu>:

void LCD_Display_Menu()
{
 80014dc:	b590      	push	{r4, r7, lr}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
	uint8_t lcd_string[] = "Menu Top Level";
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <LCD_Display_Menu+0x28>)
 80014e4:	463c      	mov	r4, r7
 80014e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014e8:	c407      	stmia	r4!, {r0, r1, r2}
 80014ea:	8023      	strh	r3, [r4, #0]
 80014ec:	3402      	adds	r4, #2
 80014ee:	0c1b      	lsrs	r3, r3, #16
 80014f0:	7023      	strb	r3, [r4, #0]
	LCD_Write_String(lcd_string);
 80014f2:	463b      	mov	r3, r7
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fd38 	bl	8000f6a <LCD_Write_String>
}
 80014fa:	bf00      	nop
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd90      	pop	{r4, r7, pc}
 8001502:	bf00      	nop
 8001504:	0800a7e0 	.word	0x0800a7e0

08001508 <LCD_Display_Measurement>:

void LCD_Display_Measurement()
{
 8001508:	b5b0      	push	{r4, r5, r7, lr}
 800150a:	b09e      	sub	sp, #120	; 0x78
 800150c:	af00      	add	r7, sp, #0
//	LCD_Clear_Display();
	LCD_Cursor_Home();
 800150e:	f7ff ff65 	bl	80013dc <LCD_Cursor_Home>
	switch(MeasurementState.Mode)
 8001512:	4b44      	ldr	r3, [pc, #272]	; (8001624 <LCD_Display_Measurement+0x11c>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b04      	cmp	r3, #4
 8001518:	f200 81c8 	bhi.w	80018ac <LCD_Display_Measurement+0x3a4>
 800151c:	a201      	add	r2, pc, #4	; (adr r2, 8001524 <LCD_Display_Measurement+0x1c>)
 800151e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001522:	bf00      	nop
 8001524:	08001539 	.word	0x08001539
 8001528:	08001603 	.word	0x08001603
 800152c:	0800163d 	.word	0x0800163d
 8001530:	08001857 	.word	0x08001857
 8001534:	08001877 	.word	0x08001877
	{
		case DV:
		{
			uint8_t topline[] = "x.xxxV";
 8001538:	4a3b      	ldr	r2, [pc, #236]	; (8001628 <LCD_Display_Measurement+0x120>)
 800153a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800153e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001542:	6018      	str	r0, [r3, #0]
 8001544:	3304      	adds	r3, #4
 8001546:	8019      	strh	r1, [r3, #0]
 8001548:	3302      	adds	r3, #2
 800154a:	0c0a      	lsrs	r2, r1, #16
 800154c:	701a      	strb	r2, [r3, #0]
			topline[0] = ((MeasurementState.Offset/1000) % 10) + 48;
 800154e:	4b35      	ldr	r3, [pc, #212]	; (8001624 <LCD_Display_Measurement+0x11c>)
 8001550:	891b      	ldrh	r3, [r3, #8]
 8001552:	4a36      	ldr	r2, [pc, #216]	; (800162c <LCD_Display_Measurement+0x124>)
 8001554:	fba2 2303 	umull	r2, r3, r2, r3
 8001558:	099b      	lsrs	r3, r3, #6
 800155a:	b29a      	uxth	r2, r3
 800155c:	4b34      	ldr	r3, [pc, #208]	; (8001630 <LCD_Display_Measurement+0x128>)
 800155e:	fba3 1302 	umull	r1, r3, r3, r2
 8001562:	08d9      	lsrs	r1, r3, #3
 8001564:	460b      	mov	r3, r1
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	440b      	add	r3, r1
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	b29b      	uxth	r3, r3
 8001570:	b2db      	uxtb	r3, r3
 8001572:	3330      	adds	r3, #48	; 0x30
 8001574:	b2db      	uxtb	r3, r3
 8001576:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
			topline[2] = ((MeasurementState.Offset/100) % 10) + 48;
 800157a:	4b2a      	ldr	r3, [pc, #168]	; (8001624 <LCD_Display_Measurement+0x11c>)
 800157c:	891b      	ldrh	r3, [r3, #8]
 800157e:	4a2d      	ldr	r2, [pc, #180]	; (8001634 <LCD_Display_Measurement+0x12c>)
 8001580:	fba2 2303 	umull	r2, r3, r2, r3
 8001584:	095b      	lsrs	r3, r3, #5
 8001586:	b29a      	uxth	r2, r3
 8001588:	4b29      	ldr	r3, [pc, #164]	; (8001630 <LCD_Display_Measurement+0x128>)
 800158a:	fba3 1302 	umull	r1, r3, r3, r2
 800158e:	08d9      	lsrs	r1, r3, #3
 8001590:	460b      	mov	r3, r1
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	440b      	add	r3, r1
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	b29b      	uxth	r3, r3
 800159c:	b2db      	uxtb	r3, r3
 800159e:	3330      	adds	r3, #48	; 0x30
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
			topline[3] = ((MeasurementState.Offset/10) % 10) + 48;
 80015a6:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <LCD_Display_Measurement+0x11c>)
 80015a8:	891b      	ldrh	r3, [r3, #8]
 80015aa:	4a21      	ldr	r2, [pc, #132]	; (8001630 <LCD_Display_Measurement+0x128>)
 80015ac:	fba2 2303 	umull	r2, r3, r2, r3
 80015b0:	08db      	lsrs	r3, r3, #3
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	4b1e      	ldr	r3, [pc, #120]	; (8001630 <LCD_Display_Measurement+0x128>)
 80015b6:	fba3 1302 	umull	r1, r3, r3, r2
 80015ba:	08d9      	lsrs	r1, r3, #3
 80015bc:	460b      	mov	r3, r1
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	440b      	add	r3, r1
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	3330      	adds	r3, #48	; 0x30
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
			topline[4] = ((MeasurementState.Offset) % 10) + 48;
 80015d2:	4b14      	ldr	r3, [pc, #80]	; (8001624 <LCD_Display_Measurement+0x11c>)
 80015d4:	891a      	ldrh	r2, [r3, #8]
 80015d6:	4b16      	ldr	r3, [pc, #88]	; (8001630 <LCD_Display_Measurement+0x128>)
 80015d8:	fba3 1302 	umull	r1, r3, r3, r2
 80015dc:	08d9      	lsrs	r1, r3, #3
 80015de:	460b      	mov	r3, r1
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	440b      	add	r3, r1
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	3330      	adds	r3, #48	; 0x30
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
			LCD_Write_String(topline);
 80015f4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fcb6 	bl	8000f6a <LCD_Write_String>
			break;
 80015fe:	bf00      	nop
 8001600:	e155      	b.n	80018ae <LCD_Display_Measurement+0x3a6>
		}
		case DI:
		{
			uint8_t topline[] = "DC Current";
 8001602:	4a0d      	ldr	r2, [pc, #52]	; (8001638 <LCD_Display_Measurement+0x130>)
 8001604:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001608:	ca07      	ldmia	r2, {r0, r1, r2}
 800160a:	c303      	stmia	r3!, {r0, r1}
 800160c:	801a      	strh	r2, [r3, #0]
 800160e:	3302      	adds	r3, #2
 8001610:	0c12      	lsrs	r2, r2, #16
 8001612:	701a      	strb	r2, [r3, #0]
			LCD_Write_String(topline);
 8001614:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fca6 	bl	8000f6a <LCD_Write_String>
			break;
 800161e:	bf00      	nop
 8001620:	e145      	b.n	80018ae <LCD_Display_Measurement+0x3a6>
 8001622:	bf00      	nop
 8001624:	2000081c 	.word	0x2000081c
 8001628:	0800a7f0 	.word	0x0800a7f0
 800162c:	10624dd3 	.word	0x10624dd3
 8001630:	cccccccd 	.word	0xcccccccd
 8001634:	51eb851f 	.word	0x51eb851f
 8001638:	0800a7f8 	.word	0x0800a7f8
		}
		case AV:
		{
			uint8_t topline[] = "O:x.xxxV,A:x.xxxV,F:xxxxHz";
 800163c:	4b94      	ldr	r3, [pc, #592]	; (8001890 <LCD_Display_Measurement+0x388>)
 800163e:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001642:	461d      	mov	r5, r3
 8001644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001648:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800164c:	c403      	stmia	r4!, {r0, r1}
 800164e:	8022      	strh	r2, [r4, #0]
 8001650:	3402      	adds	r4, #2
 8001652:	0c13      	lsrs	r3, r2, #16
 8001654:	7023      	strb	r3, [r4, #0]
			topline[2] = ((MeasurementState.Offset/1000) % 10) + 48;
 8001656:	4b8f      	ldr	r3, [pc, #572]	; (8001894 <LCD_Display_Measurement+0x38c>)
 8001658:	891b      	ldrh	r3, [r3, #8]
 800165a:	4a8f      	ldr	r2, [pc, #572]	; (8001898 <LCD_Display_Measurement+0x390>)
 800165c:	fba2 2303 	umull	r2, r3, r2, r3
 8001660:	099b      	lsrs	r3, r3, #6
 8001662:	b29a      	uxth	r2, r3
 8001664:	4b8d      	ldr	r3, [pc, #564]	; (800189c <LCD_Display_Measurement+0x394>)
 8001666:	fba3 1302 	umull	r1, r3, r3, r2
 800166a:	08d9      	lsrs	r1, r3, #3
 800166c:	460b      	mov	r3, r1
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	440b      	add	r3, r1
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	b29b      	uxth	r3, r3
 8001678:	b2db      	uxtb	r3, r3
 800167a:	3330      	adds	r3, #48	; 0x30
 800167c:	b2db      	uxtb	r3, r3
 800167e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
			topline[4] = ((MeasurementState.Offset/100) % 10) + 48;
 8001682:	4b84      	ldr	r3, [pc, #528]	; (8001894 <LCD_Display_Measurement+0x38c>)
 8001684:	891b      	ldrh	r3, [r3, #8]
 8001686:	4a86      	ldr	r2, [pc, #536]	; (80018a0 <LCD_Display_Measurement+0x398>)
 8001688:	fba2 2303 	umull	r2, r3, r2, r3
 800168c:	095b      	lsrs	r3, r3, #5
 800168e:	b29a      	uxth	r2, r3
 8001690:	4b82      	ldr	r3, [pc, #520]	; (800189c <LCD_Display_Measurement+0x394>)
 8001692:	fba3 1302 	umull	r1, r3, r3, r2
 8001696:	08d9      	lsrs	r1, r3, #3
 8001698:	460b      	mov	r3, r1
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	440b      	add	r3, r1
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	3330      	adds	r3, #48	; 0x30
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
			topline[5] = ((MeasurementState.Offset/10) % 10) + 48;
 80016ae:	4b79      	ldr	r3, [pc, #484]	; (8001894 <LCD_Display_Measurement+0x38c>)
 80016b0:	891b      	ldrh	r3, [r3, #8]
 80016b2:	4a7a      	ldr	r2, [pc, #488]	; (800189c <LCD_Display_Measurement+0x394>)
 80016b4:	fba2 2303 	umull	r2, r3, r2, r3
 80016b8:	08db      	lsrs	r3, r3, #3
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	4b77      	ldr	r3, [pc, #476]	; (800189c <LCD_Display_Measurement+0x394>)
 80016be:	fba3 1302 	umull	r1, r3, r3, r2
 80016c2:	08d9      	lsrs	r1, r3, #3
 80016c4:	460b      	mov	r3, r1
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	440b      	add	r3, r1
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	3330      	adds	r3, #48	; 0x30
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			topline[6] = ((MeasurementState.Offset) % 10) + 48;
 80016da:	4b6e      	ldr	r3, [pc, #440]	; (8001894 <LCD_Display_Measurement+0x38c>)
 80016dc:	891a      	ldrh	r2, [r3, #8]
 80016de:	4b6f      	ldr	r3, [pc, #444]	; (800189c <LCD_Display_Measurement+0x394>)
 80016e0:	fba3 1302 	umull	r1, r3, r3, r2
 80016e4:	08d9      	lsrs	r1, r3, #3
 80016e6:	460b      	mov	r3, r1
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	440b      	add	r3, r1
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	3330      	adds	r3, #48	; 0x30
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
			topline[11] = ((MeasurementState.Amplitude/1000) % 10) + 48;
 80016fc:	4b65      	ldr	r3, [pc, #404]	; (8001894 <LCD_Display_Measurement+0x38c>)
 80016fe:	885b      	ldrh	r3, [r3, #2]
 8001700:	4a65      	ldr	r2, [pc, #404]	; (8001898 <LCD_Display_Measurement+0x390>)
 8001702:	fba2 2303 	umull	r2, r3, r2, r3
 8001706:	099b      	lsrs	r3, r3, #6
 8001708:	b29a      	uxth	r2, r3
 800170a:	4b64      	ldr	r3, [pc, #400]	; (800189c <LCD_Display_Measurement+0x394>)
 800170c:	fba3 1302 	umull	r1, r3, r3, r2
 8001710:	08d9      	lsrs	r1, r3, #3
 8001712:	460b      	mov	r3, r1
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	440b      	add	r3, r1
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	b29b      	uxth	r3, r3
 800171e:	b2db      	uxtb	r3, r3
 8001720:	3330      	adds	r3, #48	; 0x30
 8001722:	b2db      	uxtb	r3, r3
 8001724:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			topline[13] = ((MeasurementState.Amplitude/100) % 10) + 48;
 8001728:	4b5a      	ldr	r3, [pc, #360]	; (8001894 <LCD_Display_Measurement+0x38c>)
 800172a:	885b      	ldrh	r3, [r3, #2]
 800172c:	4a5c      	ldr	r2, [pc, #368]	; (80018a0 <LCD_Display_Measurement+0x398>)
 800172e:	fba2 2303 	umull	r2, r3, r2, r3
 8001732:	095b      	lsrs	r3, r3, #5
 8001734:	b29a      	uxth	r2, r3
 8001736:	4b59      	ldr	r3, [pc, #356]	; (800189c <LCD_Display_Measurement+0x394>)
 8001738:	fba3 1302 	umull	r1, r3, r3, r2
 800173c:	08d9      	lsrs	r1, r3, #3
 800173e:	460b      	mov	r3, r1
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	440b      	add	r3, r1
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	b29b      	uxth	r3, r3
 800174a:	b2db      	uxtb	r3, r3
 800174c:	3330      	adds	r3, #48	; 0x30
 800174e:	b2db      	uxtb	r3, r3
 8001750:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
			topline[14] = ((MeasurementState.Amplitude/10) % 10) + 48;
 8001754:	4b4f      	ldr	r3, [pc, #316]	; (8001894 <LCD_Display_Measurement+0x38c>)
 8001756:	885b      	ldrh	r3, [r3, #2]
 8001758:	4a50      	ldr	r2, [pc, #320]	; (800189c <LCD_Display_Measurement+0x394>)
 800175a:	fba2 2303 	umull	r2, r3, r2, r3
 800175e:	08db      	lsrs	r3, r3, #3
 8001760:	b29a      	uxth	r2, r3
 8001762:	4b4e      	ldr	r3, [pc, #312]	; (800189c <LCD_Display_Measurement+0x394>)
 8001764:	fba3 1302 	umull	r1, r3, r3, r2
 8001768:	08d9      	lsrs	r1, r3, #3
 800176a:	460b      	mov	r3, r1
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	440b      	add	r3, r1
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	b29b      	uxth	r3, r3
 8001776:	b2db      	uxtb	r3, r3
 8001778:	3330      	adds	r3, #48	; 0x30
 800177a:	b2db      	uxtb	r3, r3
 800177c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			topline[15] = ((MeasurementState.Amplitude) % 10) + 48;
 8001780:	4b44      	ldr	r3, [pc, #272]	; (8001894 <LCD_Display_Measurement+0x38c>)
 8001782:	885a      	ldrh	r2, [r3, #2]
 8001784:	4b45      	ldr	r3, [pc, #276]	; (800189c <LCD_Display_Measurement+0x394>)
 8001786:	fba3 1302 	umull	r1, r3, r3, r2
 800178a:	08d9      	lsrs	r1, r3, #3
 800178c:	460b      	mov	r3, r1
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	440b      	add	r3, r1
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	b29b      	uxth	r3, r3
 8001798:	b2db      	uxtb	r3, r3
 800179a:	3330      	adds	r3, #48	; 0x30
 800179c:	b2db      	uxtb	r3, r3
 800179e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			topline[20] = ((MeasurementState.Frequency/1000) % 10) + 48;
 80017a2:	4b3c      	ldr	r3, [pc, #240]	; (8001894 <LCD_Display_Measurement+0x38c>)
 80017a4:	889b      	ldrh	r3, [r3, #4]
 80017a6:	4a3c      	ldr	r2, [pc, #240]	; (8001898 <LCD_Display_Measurement+0x390>)
 80017a8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ac:	099b      	lsrs	r3, r3, #6
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	4b3a      	ldr	r3, [pc, #232]	; (800189c <LCD_Display_Measurement+0x394>)
 80017b2:	fba3 1302 	umull	r1, r3, r3, r2
 80017b6:	08d9      	lsrs	r1, r3, #3
 80017b8:	460b      	mov	r3, r1
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	440b      	add	r3, r1
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	3330      	adds	r3, #48	; 0x30
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
			topline[21] = ((MeasurementState.Frequency/100) % 10) + 48;
 80017ce:	4b31      	ldr	r3, [pc, #196]	; (8001894 <LCD_Display_Measurement+0x38c>)
 80017d0:	889b      	ldrh	r3, [r3, #4]
 80017d2:	4a33      	ldr	r2, [pc, #204]	; (80018a0 <LCD_Display_Measurement+0x398>)
 80017d4:	fba2 2303 	umull	r2, r3, r2, r3
 80017d8:	095b      	lsrs	r3, r3, #5
 80017da:	b29a      	uxth	r2, r3
 80017dc:	4b2f      	ldr	r3, [pc, #188]	; (800189c <LCD_Display_Measurement+0x394>)
 80017de:	fba3 1302 	umull	r1, r3, r3, r2
 80017e2:	08d9      	lsrs	r1, r3, #3
 80017e4:	460b      	mov	r3, r1
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	440b      	add	r3, r1
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	3330      	adds	r3, #48	; 0x30
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
			topline[22] = ((MeasurementState.Frequency/10) % 10) + 48;
 80017fa:	4b26      	ldr	r3, [pc, #152]	; (8001894 <LCD_Display_Measurement+0x38c>)
 80017fc:	889b      	ldrh	r3, [r3, #4]
 80017fe:	4a27      	ldr	r2, [pc, #156]	; (800189c <LCD_Display_Measurement+0x394>)
 8001800:	fba2 2303 	umull	r2, r3, r2, r3
 8001804:	08db      	lsrs	r3, r3, #3
 8001806:	b29a      	uxth	r2, r3
 8001808:	4b24      	ldr	r3, [pc, #144]	; (800189c <LCD_Display_Measurement+0x394>)
 800180a:	fba3 1302 	umull	r1, r3, r3, r2
 800180e:	08d9      	lsrs	r1, r3, #3
 8001810:	460b      	mov	r3, r1
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	440b      	add	r3, r1
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	b29b      	uxth	r3, r3
 800181c:	b2db      	uxtb	r3, r3
 800181e:	3330      	adds	r3, #48	; 0x30
 8001820:	b2db      	uxtb	r3, r3
 8001822:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			topline[23] = ((MeasurementState.Frequency) % 10) + 48;
 8001826:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <LCD_Display_Measurement+0x38c>)
 8001828:	889a      	ldrh	r2, [r3, #4]
 800182a:	4b1c      	ldr	r3, [pc, #112]	; (800189c <LCD_Display_Measurement+0x394>)
 800182c:	fba3 1302 	umull	r1, r3, r3, r2
 8001830:	08d9      	lsrs	r1, r3, #3
 8001832:	460b      	mov	r3, r1
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	440b      	add	r3, r1
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	b29b      	uxth	r3, r3
 800183e:	b2db      	uxtb	r3, r3
 8001840:	3330      	adds	r3, #48	; 0x30
 8001842:	b2db      	uxtb	r3, r3
 8001844:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			LCD_Write_String(topline);
 8001848:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff fb8c 	bl	8000f6a <LCD_Write_String>
			break;
 8001852:	bf00      	nop
 8001854:	e02b      	b.n	80018ae <LCD_Display_Measurement+0x3a6>
		}
		case AI:
		{
			uint8_t topline[] = "AC Current";
 8001856:	4a13      	ldr	r2, [pc, #76]	; (80018a4 <LCD_Display_Measurement+0x39c>)
 8001858:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800185c:	ca07      	ldmia	r2, {r0, r1, r2}
 800185e:	c303      	stmia	r3!, {r0, r1}
 8001860:	801a      	strh	r2, [r3, #0]
 8001862:	3302      	adds	r3, #2
 8001864:	0c12      	lsrs	r2, r2, #16
 8001866:	701a      	strb	r2, [r3, #0]
			LCD_Write_String(topline);
 8001868:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fb7c 	bl	8000f6a <LCD_Write_String>
			break;
 8001872:	bf00      	nop
 8001874:	e01b      	b.n	80018ae <LCD_Display_Measurement+0x3a6>
		}
		case TC:
		{
			uint8_t topline[] = "Temperature";
 8001876:	4a0c      	ldr	r2, [pc, #48]	; (80018a8 <LCD_Display_Measurement+0x3a0>)
 8001878:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800187c:	ca07      	ldmia	r2, {r0, r1, r2}
 800187e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			LCD_Write_String(topline);
 8001882:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fb6f 	bl	8000f6a <LCD_Write_String>
			break;
 800188c:	bf00      	nop
 800188e:	e00e      	b.n	80018ae <LCD_Display_Measurement+0x3a6>
 8001890:	0800a804 	.word	0x0800a804
 8001894:	2000081c 	.word	0x2000081c
 8001898:	10624dd3 	.word	0x10624dd3
 800189c:	cccccccd 	.word	0xcccccccd
 80018a0:	51eb851f 	.word	0x51eb851f
 80018a4:	0800a820 	.word	0x0800a820
 80018a8:	0800a82c 	.word	0x0800a82c
		}
		default:
			// Problems
			break;
 80018ac:	bf00      	nop
	}
	LCD_NewLine();
 80018ae:	f7ff fd23 	bl	80012f8 <LCD_NewLine>
	if(OutputState.On){
 80018b2:	4b39      	ldr	r3, [pc, #228]	; (8001998 <LCD_Display_Measurement+0x490>)
 80018b4:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 818d 	beq.w	8001bd8 <LCD_Display_Measurement+0x6d0>
		if(OutputState.Mode == d){
 80018be:	4b36      	ldr	r3, [pc, #216]	; (8001998 <LCD_Display_Measurement+0x490>)
 80018c0:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 80018c4:	2b64      	cmp	r3, #100	; 0x64
 80018c6:	d171      	bne.n	80019ac <LCD_Display_Measurement+0x4a4>
			uint8_t bottomline[] = "x.xxxV";
 80018c8:	4a34      	ldr	r2, [pc, #208]	; (800199c <LCD_Display_Measurement+0x494>)
 80018ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018d2:	6018      	str	r0, [r3, #0]
 80018d4:	3304      	adds	r3, #4
 80018d6:	8019      	strh	r1, [r3, #0]
 80018d8:	3302      	adds	r3, #2
 80018da:	0c0a      	lsrs	r2, r1, #16
 80018dc:	701a      	strb	r2, [r3, #0]
			bottomline[0] = ((OutputState.Offset/1000) % 10) + 48;
 80018de:	4b2e      	ldr	r3, [pc, #184]	; (8001998 <LCD_Display_Measurement+0x490>)
 80018e0:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 80018e4:	4a2e      	ldr	r2, [pc, #184]	; (80019a0 <LCD_Display_Measurement+0x498>)
 80018e6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ea:	099b      	lsrs	r3, r3, #6
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	4b2d      	ldr	r3, [pc, #180]	; (80019a4 <LCD_Display_Measurement+0x49c>)
 80018f0:	fba3 1302 	umull	r1, r3, r3, r2
 80018f4:	08d9      	lsrs	r1, r3, #3
 80018f6:	460b      	mov	r3, r1
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	440b      	add	r3, r1
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	b29b      	uxth	r3, r3
 8001902:	b2db      	uxtb	r3, r3
 8001904:	3330      	adds	r3, #48	; 0x30
 8001906:	b2db      	uxtb	r3, r3
 8001908:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			bottomline[2] = ((OutputState.Offset/100) % 10) + 48;
 800190c:	4b22      	ldr	r3, [pc, #136]	; (8001998 <LCD_Display_Measurement+0x490>)
 800190e:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8001912:	4a25      	ldr	r2, [pc, #148]	; (80019a8 <LCD_Display_Measurement+0x4a0>)
 8001914:	fba2 2303 	umull	r2, r3, r2, r3
 8001918:	095b      	lsrs	r3, r3, #5
 800191a:	b29a      	uxth	r2, r3
 800191c:	4b21      	ldr	r3, [pc, #132]	; (80019a4 <LCD_Display_Measurement+0x49c>)
 800191e:	fba3 1302 	umull	r1, r3, r3, r2
 8001922:	08d9      	lsrs	r1, r3, #3
 8001924:	460b      	mov	r3, r1
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	440b      	add	r3, r1
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	b29b      	uxth	r3, r3
 8001930:	b2db      	uxtb	r3, r3
 8001932:	3330      	adds	r3, #48	; 0x30
 8001934:	b2db      	uxtb	r3, r3
 8001936:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			bottomline[3] = ((OutputState.Offset/10) % 10) + 48;
 800193a:	4b17      	ldr	r3, [pc, #92]	; (8001998 <LCD_Display_Measurement+0x490>)
 800193c:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8001940:	4a18      	ldr	r2, [pc, #96]	; (80019a4 <LCD_Display_Measurement+0x49c>)
 8001942:	fba2 2303 	umull	r2, r3, r2, r3
 8001946:	08db      	lsrs	r3, r3, #3
 8001948:	b29a      	uxth	r2, r3
 800194a:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <LCD_Display_Measurement+0x49c>)
 800194c:	fba3 1302 	umull	r1, r3, r3, r2
 8001950:	08d9      	lsrs	r1, r3, #3
 8001952:	460b      	mov	r3, r1
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	440b      	add	r3, r1
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	b29b      	uxth	r3, r3
 800195e:	b2db      	uxtb	r3, r3
 8001960:	3330      	adds	r3, #48	; 0x30
 8001962:	b2db      	uxtb	r3, r3
 8001964:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			bottomline[4] = ((OutputState.Offset) % 10) + 48;
 8001968:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <LCD_Display_Measurement+0x490>)
 800196a:	f8b3 219c 	ldrh.w	r2, [r3, #412]	; 0x19c
 800196e:	4b0d      	ldr	r3, [pc, #52]	; (80019a4 <LCD_Display_Measurement+0x49c>)
 8001970:	fba3 1302 	umull	r1, r3, r3, r2
 8001974:	08d9      	lsrs	r1, r3, #3
 8001976:	460b      	mov	r3, r1
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	440b      	add	r3, r1
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	b29b      	uxth	r3, r3
 8001982:	b2db      	uxtb	r3, r3
 8001984:	3330      	adds	r3, #48	; 0x30
 8001986:	b2db      	uxtb	r3, r3
 8001988:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			LCD_Write_String(bottomline);
 800198c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff faea 	bl	8000f6a <LCD_Write_String>
		}
	} else {
		uint8_t bottomline[] = "OUTPUT OFF";
		LCD_Write_String(bottomline);
	}
}
 8001996:	e12b      	b.n	8001bf0 <LCD_Display_Measurement+0x6e8>
 8001998:	20000828 	.word	0x20000828
 800199c:	0800a7f0 	.word	0x0800a7f0
 80019a0:	10624dd3 	.word	0x10624dd3
 80019a4:	cccccccd 	.word	0xcccccccd
 80019a8:	51eb851f 	.word	0x51eb851f
		} else if (OutputState.Mode == s){
 80019ac:	4b92      	ldr	r3, [pc, #584]	; (8001bf8 <LCD_Display_Measurement+0x6f0>)
 80019ae:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 80019b2:	2b73      	cmp	r3, #115	; 0x73
 80019b4:	f040 811c 	bne.w	8001bf0 <LCD_Display_Measurement+0x6e8>
			uint8_t bottomline[] = "O:x.xxxV,A:x.xxxV,F:xxxxHz";
 80019b8:	4b90      	ldr	r3, [pc, #576]	; (8001bfc <LCD_Display_Measurement+0x6f4>)
 80019ba:	f107 040c 	add.w	r4, r7, #12
 80019be:	461d      	mov	r5, r3
 80019c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019c8:	c403      	stmia	r4!, {r0, r1}
 80019ca:	8022      	strh	r2, [r4, #0]
 80019cc:	3402      	adds	r4, #2
 80019ce:	0c13      	lsrs	r3, r2, #16
 80019d0:	7023      	strb	r3, [r4, #0]
			bottomline[2] = ((OutputState.Offset/1000) % 10) + 48;
 80019d2:	4b89      	ldr	r3, [pc, #548]	; (8001bf8 <LCD_Display_Measurement+0x6f0>)
 80019d4:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 80019d8:	4a89      	ldr	r2, [pc, #548]	; (8001c00 <LCD_Display_Measurement+0x6f8>)
 80019da:	fba2 2303 	umull	r2, r3, r2, r3
 80019de:	099b      	lsrs	r3, r3, #6
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	4b88      	ldr	r3, [pc, #544]	; (8001c04 <LCD_Display_Measurement+0x6fc>)
 80019e4:	fba3 1302 	umull	r1, r3, r3, r2
 80019e8:	08d9      	lsrs	r1, r3, #3
 80019ea:	460b      	mov	r3, r1
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	440b      	add	r3, r1
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	3330      	adds	r3, #48	; 0x30
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	73bb      	strb	r3, [r7, #14]
			bottomline[4] = ((OutputState.Offset/100) % 10) + 48;
 80019fe:	4b7e      	ldr	r3, [pc, #504]	; (8001bf8 <LCD_Display_Measurement+0x6f0>)
 8001a00:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8001a04:	4a80      	ldr	r2, [pc, #512]	; (8001c08 <LCD_Display_Measurement+0x700>)
 8001a06:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	4b7d      	ldr	r3, [pc, #500]	; (8001c04 <LCD_Display_Measurement+0x6fc>)
 8001a10:	fba3 1302 	umull	r1, r3, r3, r2
 8001a14:	08d9      	lsrs	r1, r3, #3
 8001a16:	460b      	mov	r3, r1
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	3330      	adds	r3, #48	; 0x30
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	743b      	strb	r3, [r7, #16]
			bottomline[5] = ((OutputState.Offset/10) % 10) + 48;
 8001a2a:	4b73      	ldr	r3, [pc, #460]	; (8001bf8 <LCD_Display_Measurement+0x6f0>)
 8001a2c:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8001a30:	4a74      	ldr	r2, [pc, #464]	; (8001c04 <LCD_Display_Measurement+0x6fc>)
 8001a32:	fba2 2303 	umull	r2, r3, r2, r3
 8001a36:	08db      	lsrs	r3, r3, #3
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	4b72      	ldr	r3, [pc, #456]	; (8001c04 <LCD_Display_Measurement+0x6fc>)
 8001a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8001a40:	08d9      	lsrs	r1, r3, #3
 8001a42:	460b      	mov	r3, r1
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	440b      	add	r3, r1
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	3330      	adds	r3, #48	; 0x30
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	747b      	strb	r3, [r7, #17]
			bottomline[6] = ((OutputState.Offset) % 10) + 48;
 8001a56:	4b68      	ldr	r3, [pc, #416]	; (8001bf8 <LCD_Display_Measurement+0x6f0>)
 8001a58:	f8b3 219c 	ldrh.w	r2, [r3, #412]	; 0x19c
 8001a5c:	4b69      	ldr	r3, [pc, #420]	; (8001c04 <LCD_Display_Measurement+0x6fc>)
 8001a5e:	fba3 1302 	umull	r1, r3, r3, r2
 8001a62:	08d9      	lsrs	r1, r3, #3
 8001a64:	460b      	mov	r3, r1
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	3330      	adds	r3, #48	; 0x30
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	74bb      	strb	r3, [r7, #18]
			bottomline[11] = ((OutputState.Amplitude/1000) % 10) + 48;
 8001a78:	4b5f      	ldr	r3, [pc, #380]	; (8001bf8 <LCD_Display_Measurement+0x6f0>)
 8001a7a:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8001a7e:	4a60      	ldr	r2, [pc, #384]	; (8001c00 <LCD_Display_Measurement+0x6f8>)
 8001a80:	fba2 2303 	umull	r2, r3, r2, r3
 8001a84:	099b      	lsrs	r3, r3, #6
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	4b5e      	ldr	r3, [pc, #376]	; (8001c04 <LCD_Display_Measurement+0x6fc>)
 8001a8a:	fba3 1302 	umull	r1, r3, r3, r2
 8001a8e:	08d9      	lsrs	r1, r3, #3
 8001a90:	460b      	mov	r3, r1
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	440b      	add	r3, r1
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	3330      	adds	r3, #48	; 0x30
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	75fb      	strb	r3, [r7, #23]
			bottomline[13] = ((OutputState.Amplitude/100) % 10) + 48;
 8001aa4:	4b54      	ldr	r3, [pc, #336]	; (8001bf8 <LCD_Display_Measurement+0x6f0>)
 8001aa6:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8001aaa:	4a57      	ldr	r2, [pc, #348]	; (8001c08 <LCD_Display_Measurement+0x700>)
 8001aac:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab0:	095b      	lsrs	r3, r3, #5
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	4b53      	ldr	r3, [pc, #332]	; (8001c04 <LCD_Display_Measurement+0x6fc>)
 8001ab6:	fba3 1302 	umull	r1, r3, r3, r2
 8001aba:	08d9      	lsrs	r1, r3, #3
 8001abc:	460b      	mov	r3, r1
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	3330      	adds	r3, #48	; 0x30
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	767b      	strb	r3, [r7, #25]
			bottomline[14] = ((OutputState.Amplitude/10) % 10) + 48;
 8001ad0:	4b49      	ldr	r3, [pc, #292]	; (8001bf8 <LCD_Display_Measurement+0x6f0>)
 8001ad2:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8001ad6:	4a4b      	ldr	r2, [pc, #300]	; (8001c04 <LCD_Display_Measurement+0x6fc>)
 8001ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8001adc:	08db      	lsrs	r3, r3, #3
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	4b48      	ldr	r3, [pc, #288]	; (8001c04 <LCD_Display_Measurement+0x6fc>)
 8001ae2:	fba3 1302 	umull	r1, r3, r3, r2
 8001ae6:	08d9      	lsrs	r1, r3, #3
 8001ae8:	460b      	mov	r3, r1
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	3330      	adds	r3, #48	; 0x30
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	76bb      	strb	r3, [r7, #26]
			bottomline[15] = ((OutputState.Amplitude) % 10) + 48;
 8001afc:	4b3e      	ldr	r3, [pc, #248]	; (8001bf8 <LCD_Display_Measurement+0x6f0>)
 8001afe:	f8b3 2196 	ldrh.w	r2, [r3, #406]	; 0x196
 8001b02:	4b40      	ldr	r3, [pc, #256]	; (8001c04 <LCD_Display_Measurement+0x6fc>)
 8001b04:	fba3 1302 	umull	r1, r3, r3, r2
 8001b08:	08d9      	lsrs	r1, r3, #3
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	440b      	add	r3, r1
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	3330      	adds	r3, #48	; 0x30
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	76fb      	strb	r3, [r7, #27]
			bottomline[20] = ((OutputState.Frequency/1000) % 10) + 48;
 8001b1e:	4b36      	ldr	r3, [pc, #216]	; (8001bf8 <LCD_Display_Measurement+0x6f0>)
 8001b20:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8001b24:	4a36      	ldr	r2, [pc, #216]	; (8001c00 <LCD_Display_Measurement+0x6f8>)
 8001b26:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2a:	099b      	lsrs	r3, r3, #6
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	4b35      	ldr	r3, [pc, #212]	; (8001c04 <LCD_Display_Measurement+0x6fc>)
 8001b30:	fba3 1302 	umull	r1, r3, r3, r2
 8001b34:	08d9      	lsrs	r1, r3, #3
 8001b36:	460b      	mov	r3, r1
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	3330      	adds	r3, #48	; 0x30
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	f887 3020 	strb.w	r3, [r7, #32]
			bottomline[21] = ((OutputState.Frequency/100) % 10) + 48;
 8001b4c:	4b2a      	ldr	r3, [pc, #168]	; (8001bf8 <LCD_Display_Measurement+0x6f0>)
 8001b4e:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8001b52:	4a2d      	ldr	r2, [pc, #180]	; (8001c08 <LCD_Display_Measurement+0x700>)
 8001b54:	fba2 2303 	umull	r2, r3, r2, r3
 8001b58:	095b      	lsrs	r3, r3, #5
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	4b29      	ldr	r3, [pc, #164]	; (8001c04 <LCD_Display_Measurement+0x6fc>)
 8001b5e:	fba3 1302 	umull	r1, r3, r3, r2
 8001b62:	08d9      	lsrs	r1, r3, #3
 8001b64:	460b      	mov	r3, r1
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	440b      	add	r3, r1
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	3330      	adds	r3, #48	; 0x30
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			bottomline[22] = ((OutputState.Frequency/10) % 10) + 48;
 8001b7a:	4b1f      	ldr	r3, [pc, #124]	; (8001bf8 <LCD_Display_Measurement+0x6f0>)
 8001b7c:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8001b80:	4a20      	ldr	r2, [pc, #128]	; (8001c04 <LCD_Display_Measurement+0x6fc>)
 8001b82:	fba2 2303 	umull	r2, r3, r2, r3
 8001b86:	08db      	lsrs	r3, r3, #3
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <LCD_Display_Measurement+0x6fc>)
 8001b8c:	fba3 1302 	umull	r1, r3, r3, r2
 8001b90:	08d9      	lsrs	r1, r3, #3
 8001b92:	460b      	mov	r3, r1
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	440b      	add	r3, r1
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	3330      	adds	r3, #48	; 0x30
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			bottomline[23] = ((OutputState.Frequency) % 10) + 48;
 8001ba8:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <LCD_Display_Measurement+0x6f0>)
 8001baa:	f8b3 2198 	ldrh.w	r2, [r3, #408]	; 0x198
 8001bae:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <LCD_Display_Measurement+0x6fc>)
 8001bb0:	fba3 1302 	umull	r1, r3, r3, r2
 8001bb4:	08d9      	lsrs	r1, r3, #3
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	440b      	add	r3, r1
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	3330      	adds	r3, #48	; 0x30
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			LCD_Write_String(bottomline);
 8001bcc:	f107 030c 	add.w	r3, r7, #12
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff f9ca 	bl	8000f6a <LCD_Write_String>
}
 8001bd6:	e00b      	b.n	8001bf0 <LCD_Display_Measurement+0x6e8>
		uint8_t bottomline[] = "OUTPUT OFF";
 8001bd8:	4a0c      	ldr	r2, [pc, #48]	; (8001c0c <LCD_Display_Measurement+0x704>)
 8001bda:	463b      	mov	r3, r7
 8001bdc:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bde:	c303      	stmia	r3!, {r0, r1}
 8001be0:	801a      	strh	r2, [r3, #0]
 8001be2:	3302      	adds	r3, #2
 8001be4:	0c12      	lsrs	r2, r2, #16
 8001be6:	701a      	strb	r2, [r3, #0]
		LCD_Write_String(bottomline);
 8001be8:	463b      	mov	r3, r7
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff f9bd 	bl	8000f6a <LCD_Write_String>
}
 8001bf0:	bf00      	nop
 8001bf2:	3778      	adds	r7, #120	; 0x78
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bdb0      	pop	{r4, r5, r7, pc}
 8001bf8:	20000828 	.word	0x20000828
 8001bfc:	0800a804 	.word	0x0800a804
 8001c00:	10624dd3 	.word	0x10624dd3
 8001c04:	cccccccd 	.word	0xcccccccd
 8001c08:	51eb851f 	.word	0x51eb851f
 8001c0c:	0800a838 	.word	0x0800a838

08001c10 <HAL_UART_RxCpltCallback>:

// Flag set every 10 us
uint8_t us_10 = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
	if((UartState.rx_bytes_counter == 0 && UartState.rx_byte[0] == '@') || UartState.rx_bytes_counter > 0)
 8001c18:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <HAL_UART_RxCpltCallback+0x6c>)
 8001c1a:	7adb      	ldrb	r3, [r3, #11]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d103      	bne.n	8001c28 <HAL_UART_RxCpltCallback+0x18>
 8001c20:	4b16      	ldr	r3, [pc, #88]	; (8001c7c <HAL_UART_RxCpltCallback+0x6c>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b40      	cmp	r3, #64	; 0x40
 8001c26:	d003      	beq.n	8001c30 <HAL_UART_RxCpltCallback+0x20>
 8001c28:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <HAL_UART_RxCpltCallback+0x6c>)
 8001c2a:	7adb      	ldrb	r3, [r3, #11]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d01b      	beq.n	8001c68 <HAL_UART_RxCpltCallback+0x58>
	{
		UartState.rx_bytes[UartState.rx_bytes_counter] = UartState.rx_byte[0];
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <HAL_UART_RxCpltCallback+0x6c>)
 8001c32:	7adb      	ldrb	r3, [r3, #11]
 8001c34:	4619      	mov	r1, r3
 8001c36:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <HAL_UART_RxCpltCallback+0x6c>)
 8001c38:	781a      	ldrb	r2, [r3, #0]
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <HAL_UART_RxCpltCallback+0x6c>)
 8001c3c:	440b      	add	r3, r1
 8001c3e:	705a      	strb	r2, [r3, #1]
		UartState.rx_bytes_counter += 1;
 8001c40:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <HAL_UART_RxCpltCallback+0x6c>)
 8001c42:	7adb      	ldrb	r3, [r3, #11]
 8001c44:	3301      	adds	r3, #1
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <HAL_UART_RxCpltCallback+0x6c>)
 8001c4a:	72da      	strb	r2, [r3, #11]

		if(UartState.rx_byte[0] == '!')
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <HAL_UART_RxCpltCallback+0x6c>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b21      	cmp	r3, #33	; 0x21
 8001c52:	d109      	bne.n	8001c68 <HAL_UART_RxCpltCallback+0x58>
		{
			UartState.message_received = 1;
 8001c54:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <HAL_UART_RxCpltCallback+0x6c>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	735a      	strb	r2, [r3, #13]
			UartState.rx_bytes_length = UartState.rx_bytes_counter;
 8001c5a:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <HAL_UART_RxCpltCallback+0x6c>)
 8001c5c:	7ada      	ldrb	r2, [r3, #11]
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <HAL_UART_RxCpltCallback+0x6c>)
 8001c60:	731a      	strb	r2, [r3, #12]
			UartState.rx_bytes_counter = 0;
 8001c62:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_UART_RxCpltCallback+0x6c>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	72da      	strb	r2, [r3, #11]
		}
	}
	HAL_UART_Receive_IT(&huart2, UartState.rx_byte, 1);
 8001c68:	2201      	movs	r2, #1
 8001c6a:	4904      	ldr	r1, [pc, #16]	; (8001c7c <HAL_UART_RxCpltCallback+0x6c>)
 8001c6c:	4804      	ldr	r0, [pc, #16]	; (8001c80 <HAL_UART_RxCpltCallback+0x70>)
 8001c6e:	f006 fbe3 	bl	8008438 <HAL_UART_Receive_IT>
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000c80 	.word	0x20000c80
 8001c80:	20000bb0 	.word	0x20000bb0

08001c84 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	80fb      	strh	r3, [r7, #6]
	last_ticks = HAL_GetTick();
 8001c8e:	f001 fc69 	bl	8003564 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	4b15      	ldr	r3, [pc, #84]	; (8001cec <HAL_GPIO_EXTI_Callback+0x68>)
 8001c96:	601a      	str	r2, [r3, #0]
	if(GPIO_Pin == btn_mid_Pin)
 8001c98:	88fb      	ldrh	r3, [r7, #6]
 8001c9a:	2b40      	cmp	r3, #64	; 0x40
 8001c9c:	d103      	bne.n	8001ca6 <HAL_GPIO_EXTI_Callback+0x22>
	{
		btn_mid_flag = 1;
 8001c9e:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	701a      	strb	r2, [r3, #0]
	}
	else if(GPIO_Pin == btn_down_Pin)
	{
		btn_down_flag = 1;
	}
}
 8001ca4:	e01d      	b.n	8001ce2 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_right_Pin)
 8001ca6:	88fb      	ldrh	r3, [r7, #6]
 8001ca8:	2b80      	cmp	r3, #128	; 0x80
 8001caa:	d103      	bne.n	8001cb4 <HAL_GPIO_EXTI_Callback+0x30>
		btn_right_flag = 1;
 8001cac:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <HAL_GPIO_EXTI_Callback+0x70>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	701a      	strb	r2, [r3, #0]
}
 8001cb2:	e016      	b.n	8001ce2 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_up_Pin)
 8001cb4:	88fb      	ldrh	r3, [r7, #6]
 8001cb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cba:	d103      	bne.n	8001cc4 <HAL_GPIO_EXTI_Callback+0x40>
		btn_up_flag = 1;
 8001cbc:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <HAL_GPIO_EXTI_Callback+0x74>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	701a      	strb	r2, [r3, #0]
}
 8001cc2:	e00e      	b.n	8001ce2 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_left_Pin)
 8001cc4:	88fb      	ldrh	r3, [r7, #6]
 8001cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cca:	d103      	bne.n	8001cd4 <HAL_GPIO_EXTI_Callback+0x50>
		btn_left_flag = 1;
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <HAL_GPIO_EXTI_Callback+0x78>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	701a      	strb	r2, [r3, #0]
}
 8001cd2:	e006      	b.n	8001ce2 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_down_Pin)
 8001cd4:	88fb      	ldrh	r3, [r7, #6]
 8001cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cda:	d102      	bne.n	8001ce2 <HAL_GPIO_EXTI_Callback+0x5e>
		btn_down_flag = 1;
 8001cdc:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	701a      	strb	r2, [r3, #0]
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20000040 	.word	0x20000040
 8001cf0:	2000003a 	.word	0x2000003a
 8001cf4:	2000003b 	.word	0x2000003b
 8001cf8:	2000003c 	.word	0x2000003c
 8001cfc:	2000003d 	.word	0x2000003d
 8001d00:	2000003e 	.word	0x2000003e
 8001d04:	00000000 	.word	0x00000000

08001d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d08:	b590      	push	{r4, r7, lr}
 8001d0a:	b08b      	sub	sp, #44	; 0x2c
 8001d0c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	uint8_t Slave_Address = 0x80;
 8001d0e:	2380      	movs	r3, #128	; 0x80
 8001d10:	77fb      	strb	r3, [r7, #31]
//	uint8_t ShuntVoltage_Address = 0x80;
	uint8_t i2cdata[10];

	HAL_StatusTypeDef res;

	OutputState.TIM2_Clock = 72000000;
 8001d12:	4ba7      	ldr	r3, [pc, #668]	; (8001fb0 <main+0x2a8>)
 8001d14:	4aa7      	ldr	r2, [pc, #668]	; (8001fb4 <main+0x2ac>)
 8001d16:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OutputState.On = false;
 8001d1a:	4ba5      	ldr	r3, [pc, #660]	; (8001fb0 <main+0x2a8>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
	OutputState.Mode = d;
 8001d22:	4ba3      	ldr	r3, [pc, #652]	; (8001fb0 <main+0x2a8>)
 8001d24:	2264      	movs	r2, #100	; 0x64
 8001d26:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
	OutputState.Amplitude = 1000;
 8001d2a:	4ba1      	ldr	r3, [pc, #644]	; (8001fb0 <main+0x2a8>)
 8001d2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d30:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196
	OutputState.Offset = 1200;
 8001d34:	4b9e      	ldr	r3, [pc, #632]	; (8001fb0 <main+0x2a8>)
 8001d36:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001d3a:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
	OutputState.Frequency = 1000;
 8001d3e:	4b9c      	ldr	r3, [pc, #624]	; (8001fb0 <main+0x2a8>)
 8001d40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d44:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
	OutputState.DCValue = 1000;
 8001d48:	4b99      	ldr	r3, [pc, #612]	; (8001fb0 <main+0x2a8>)
 8001d4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d4e:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a

	MeasurementState.Mode = DV;
 8001d52:	4b99      	ldr	r3, [pc, #612]	; (8001fb8 <main+0x2b0>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	701a      	strb	r2, [r3, #0]
	MeasurementState.Amplitude = 0;
 8001d58:	4b97      	ldr	r3, [pc, #604]	; (8001fb8 <main+0x2b0>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	805a      	strh	r2, [r3, #2]
	MeasurementState.Frequency = 0;
 8001d5e:	4b96      	ldr	r3, [pc, #600]	; (8001fb8 <main+0x2b0>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	809a      	strh	r2, [r3, #4]
	MeasurementState.Offset = 0;
 8001d64:	4b94      	ldr	r3, [pc, #592]	; (8001fb8 <main+0x2b0>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	811a      	strh	r2, [r3, #8]
	MeasurementState.Period = 0;
 8001d6a:	4b93      	ldr	r3, [pc, #588]	; (8001fb8 <main+0x2b0>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	80da      	strh	r2, [r3, #6]

	DisplayState.PrintFlag = 0;
 8001d70:	4b92      	ldr	r3, [pc, #584]	; (8001fbc <main+0x2b4>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	715a      	strb	r2, [r3, #5]
	DisplayState.RefreshFlag = 0;
 8001d76:	4b91      	ldr	r3, [pc, #580]	; (8001fbc <main+0x2b4>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	71da      	strb	r2, [r3, #7]
	DisplayState.AutoScrollCounter = 0;
 8001d7c:	4b8f      	ldr	r3, [pc, #572]	; (8001fbc <main+0x2b4>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	721a      	strb	r2, [r3, #8]
	DisplayState.DisplayPosition = 0;
 8001d82:	4b8e      	ldr	r3, [pc, #568]	; (8001fbc <main+0x2b4>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	725a      	strb	r2, [r3, #9]
	DisplayState.ToplineCharacters = 0;
 8001d88:	4b8c      	ldr	r3, [pc, #560]	; (8001fbc <main+0x2b4>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	70da      	strb	r2, [r3, #3]
	DisplayState.BottomlineCharacters = 0;
 8001d8e:	4b8b      	ldr	r3, [pc, #556]	; (8001fbc <main+0x2b4>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	711a      	strb	r2, [r3, #4]
	DisplayState.CurrentLine = Topline;
 8001d94:	4b89      	ldr	r3, [pc, #548]	; (8001fbc <main+0x2b4>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	709a      	strb	r2, [r3, #2]
	DisplayState.LastMode = Menu;
 8001d9a:	4b88      	ldr	r3, [pc, #544]	; (8001fbc <main+0x2b4>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	705a      	strb	r2, [r3, #1]

	// Tempory Measurement Values
	MeasurementState.Offset = 1000;
 8001da0:	4b85      	ldr	r3, [pc, #532]	; (8001fb8 <main+0x2b0>)
 8001da2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001da6:	811a      	strh	r2, [r3, #8]
	MeasurementState.Frequency = 5250;
 8001da8:	4b83      	ldr	r3, [pc, #524]	; (8001fb8 <main+0x2b0>)
 8001daa:	f241 4282 	movw	r2, #5250	; 0x1482
 8001dae:	809a      	strh	r2, [r3, #4]
	MeasurementState.Amplitude = 500;
 8001db0:	4b81      	ldr	r3, [pc, #516]	; (8001fb8 <main+0x2b0>)
 8001db2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001db6:	805a      	strh	r2, [r3, #2]

	UartState.rx_bytes_counter = 0;
 8001db8:	4b81      	ldr	r3, [pc, #516]	; (8001fc0 <main+0x2b8>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	72da      	strb	r2, [r3, #11]
	UartState.rx_bytes_length = 0;
 8001dbe:	4b80      	ldr	r3, [pc, #512]	; (8001fc0 <main+0x2b8>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	731a      	strb	r2, [r3, #12]
	UartState.message_received = 0;
 8001dc4:	4b7e      	ldr	r3, [pc, #504]	; (8001fc0 <main+0x2b8>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	735a      	strb	r2, [r3, #13]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dca:	f001 fb71 	bl	80034b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dce:	f000 f9e9 	bl	80021a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dd2:	f000 fc69 	bl	80026a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001dd6:	f000 fc49 	bl	800266c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001dda:	f000 fc17 	bl	800260c <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8001dde:	f000 fbc7 	bl	8002570 <MX_TIM16_Init>
  MX_ADC1_Init();
 8001de2:	f000 fa4d 	bl	8002280 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001de6:	f000 fabb 	bl	8002360 <MX_DAC1_Init>
  MX_TIM2_Init();
 8001dea:	f000 fb23 	bl	8002434 <MX_TIM2_Init>
  MX_TIM17_Init();
 8001dee:	f000 fbe5 	bl	80025bc <MX_TIM17_Init>
  MX_I2C1_Init();
 8001df2:	f000 fadf 	bl	80023b4 <MX_I2C1_Init>
  MX_TIM15_Init();
 8001df6:	f000 fb6b 	bl	80024d0 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  	// Transmit Student Number
	HAL_UART_Transmit(&huart2, std_num, 13, 10);
 8001dfa:	230a      	movs	r3, #10
 8001dfc:	220d      	movs	r2, #13
 8001dfe:	4971      	ldr	r1, [pc, #452]	; (8001fc4 <main+0x2bc>)
 8001e00:	4871      	ldr	r0, [pc, #452]	; (8001fc8 <main+0x2c0>)
 8001e02:	f006 fa85 	bl	8008310 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, UartState.rx_byte, 1);
 8001e06:	2201      	movs	r2, #1
 8001e08:	496d      	ldr	r1, [pc, #436]	; (8001fc0 <main+0x2b8>)
 8001e0a:	486f      	ldr	r0, [pc, #444]	; (8001fc8 <main+0x2c0>)
 8001e0c:	f006 fb14 	bl	8008438 <HAL_UART_Receive_IT>

	// Init ADC Timer
	HAL_TIM_Base_Start_IT(&htim16);
 8001e10:	486e      	ldr	r0, [pc, #440]	; (8001fcc <main+0x2c4>)
 8001e12:	f005 fdd7 	bl	80079c4 <HAL_TIM_Base_Start_IT>

	// Init LCD Refresh Timer
	HAL_TIM_Base_Start_IT(&htim17);
 8001e16:	486e      	ldr	r0, [pc, #440]	; (8001fd0 <main+0x2c8>)
 8001e18:	f005 fdd4 	bl	80079c4 <HAL_TIM_Base_Start_IT>

	// Init 10us Timer
	HAL_TIM_Base_Start_IT(&htim15);
 8001e1c:	486d      	ldr	r0, [pc, #436]	; (8001fd4 <main+0x2cc>)
 8001e1e:	f005 fdd1 	bl	80079c4 <HAL_TIM_Base_Start_IT>

	// Init LCD
	LCD_Init();
 8001e22:	f7ff f86b 	bl	8000efc <LCD_Init>

	// Init Display State
	HAL_Delay(1);
 8001e26:	2001      	movs	r0, #1
 8001e28:	f001 fba8 	bl	800357c <HAL_Delay>
	LCD_changeDisplayMode(Menu);
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f7ff faeb 	bl	8001408 <LCD_changeDisplayMode>

	// Init DAC Timer
	HAL_TIM_Base_Start(&htim2);
 8001e32:	4869      	ldr	r0, [pc, #420]	; (8001fd8 <main+0x2d0>)
 8001e34:	f005 fd5e 	bl	80078f4 <HAL_TIM_Base_Start>

	//Testing
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8001e38:	2201      	movs	r2, #1
 8001e3a:	2110      	movs	r1, #16
 8001e3c:	4867      	ldr	r0, [pc, #412]	; (8001fdc <main+0x2d4>)
 8001e3e:	f003 fc65 	bl	800570c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(DisplayState.RefreshFlag == 1)
 8001e42:	4b5e      	ldr	r3, [pc, #376]	; (8001fbc <main+0x2b4>)
 8001e44:	79db      	ldrb	r3, [r3, #7]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d12a      	bne.n	8001ea0 <main+0x198>
	  {
		  if(DisplayState.Mode == Measurement)
 8001e4a:	4b5c      	ldr	r3, [pc, #368]	; (8001fbc <main+0x2b4>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d123      	bne.n	8001e9a <main+0x192>
		  {
//			  if(MeasurementState.Mode == AV || MeasurementState.Mode == AI)
			  if(MeasurementState.Mode == AV)
 8001e52:	4b59      	ldr	r3, [pc, #356]	; (8001fb8 <main+0x2b0>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d11f      	bne.n	8001e9a <main+0x192>
			  {
				  DisplayState.AutoScrollCounter ++;
 8001e5a:	4b58      	ldr	r3, [pc, #352]	; (8001fbc <main+0x2b4>)
 8001e5c:	7a1b      	ldrb	r3, [r3, #8]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	4b56      	ldr	r3, [pc, #344]	; (8001fbc <main+0x2b4>)
 8001e64:	721a      	strb	r2, [r3, #8]
				  if(DisplayState.AutoScrollCounter > 1)
 8001e66:	4b55      	ldr	r3, [pc, #340]	; (8001fbc <main+0x2b4>)
 8001e68:	7a1b      	ldrb	r3, [r3, #8]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d915      	bls.n	8001e9a <main+0x192>
				  {
					  MeasurementState.Amplitude += 1;
 8001e6e:	4b52      	ldr	r3, [pc, #328]	; (8001fb8 <main+0x2b0>)
 8001e70:	885b      	ldrh	r3, [r3, #2]
 8001e72:	3301      	adds	r3, #1
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	4b50      	ldr	r3, [pc, #320]	; (8001fb8 <main+0x2b0>)
 8001e78:	805a      	strh	r2, [r3, #2]
					  if(MeasurementState.Amplitude > 2000) MeasurementState.Amplitude = 500;
 8001e7a:	4b4f      	ldr	r3, [pc, #316]	; (8001fb8 <main+0x2b0>)
 8001e7c:	885b      	ldrh	r3, [r3, #2]
 8001e7e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001e82:	d903      	bls.n	8001e8c <main+0x184>
 8001e84:	4b4c      	ldr	r3, [pc, #304]	; (8001fb8 <main+0x2b0>)
 8001e86:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001e8a:	805a      	strh	r2, [r3, #2]
					  LCD_Display_Measurement();
 8001e8c:	f7ff fb3c 	bl	8001508 <LCD_Display_Measurement>
					  LCD_AutoScroll();
 8001e90:	f7ff fa42 	bl	8001318 <LCD_AutoScroll>
					  DisplayState.AutoScrollCounter = 0;
 8001e94:	4b49      	ldr	r3, [pc, #292]	; (8001fbc <main+0x2b4>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	721a      	strb	r2, [r3, #8]
				  }
			  }

		  }
		  DisplayState.RefreshFlag = 0;
 8001e9a:	4b48      	ldr	r3, [pc, #288]	; (8001fbc <main+0x2b4>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	71da      	strb	r2, [r3, #7]
	  }

	  // LCD UART OUTPUT JOB
	  if(DisplayState.PrintFlag)
 8001ea0:	4b46      	ldr	r3, [pc, #280]	; (8001fbc <main+0x2b4>)
 8001ea2:	795b      	ldrb	r3, [r3, #5]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d00e      	beq.n	8001ec6 <main+0x1be>
	  {
		  if(DisplayState.Mode != Output)
 8001ea8:	4b44      	ldr	r3, [pc, #272]	; (8001fbc <main+0x2b4>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d002      	beq.n	8001eb6 <main+0x1ae>
		  {
			  LCD_changeDisplayMode(Output);
 8001eb0:	2002      	movs	r0, #2
 8001eb2:	f7ff faa9 	bl	8001408 <LCD_changeDisplayMode>
		  }
		  LCD_Write_Character_Shift(DisplayState.PrintByte);
 8001eb6:	4b41      	ldr	r3, [pc, #260]	; (8001fbc <main+0x2b4>)
 8001eb8:	799b      	ldrb	r3, [r3, #6]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff f870 	bl	8000fa0 <LCD_Write_Character_Shift>
		  DisplayState.PrintFlag = 0;
 8001ec0:	4b3e      	ldr	r3, [pc, #248]	; (8001fbc <main+0x2b4>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	715a      	strb	r2, [r3, #5]
	  }

	  // UART JOB
	  if(UartState.message_received)
 8001ec6:	4b3e      	ldr	r3, [pc, #248]	; (8001fc0 <main+0x2b8>)
 8001ec8:	7b5b      	ldrb	r3, [r3, #13]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d004      	beq.n	8001ed8 <main+0x1d0>
	  {
		  UART_Interpret_Rx_Message();
 8001ece:	f000 ffad 	bl	8002e2c <UART_Interpret_Rx_Message>
		  UartState.message_received = 0;
 8001ed2:	4b3b      	ldr	r3, [pc, #236]	; (8001fc0 <main+0x2b8>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	735a      	strb	r2, [r3, #13]
	  }

	  // BUTTONS JOB
	  if(btn_up_flag)
 8001ed8:	4b41      	ldr	r3, [pc, #260]	; (8001fe0 <main+0x2d8>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 80b9 	beq.w	8002054 <main+0x34c>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 8001ee2:	f001 fb3f 	bl	8003564 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	4b3e      	ldr	r3, [pc, #248]	; (8001fe4 <main+0x2dc>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b36      	cmp	r3, #54	; 0x36
 8001ef0:	f240 8131 	bls.w	8002156 <main+0x44e>
		  {
			  if(HAL_GPIO_ReadPin(btn_up_GPIO_Port, btn_up_Pin))
 8001ef4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ef8:	483b      	ldr	r0, [pc, #236]	; (8001fe8 <main+0x2e0>)
 8001efa:	f003 fbef 	bl	80056dc <HAL_GPIO_ReadPin>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 80a3 	beq.w	800204c <main+0x344>
			  {
				  // HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//				  uint32_t code = HAL_UART_GetError(&huart2);

				  // I2C Transmit
				  i2cdata[0] = 0x00;
 8001f06:	2300      	movs	r3, #0
 8001f08:	723b      	strb	r3, [r7, #8]
				  i2cdata[1] = 0x39;
 8001f0a:	2339      	movs	r3, #57	; 0x39
 8001f0c:	727b      	strb	r3, [r7, #9]
				  i2cdata[2] = 0x9F;
 8001f0e:	239f      	movs	r3, #159	; 0x9f
 8001f10:	72bb      	strb	r3, [r7, #10]
				  res = HAL_I2C_Master_Transmit(&hi2c1, Slave_Address, i2cdata, 3, 10);
 8001f12:	7ffb      	ldrb	r3, [r7, #31]
 8001f14:	b299      	uxth	r1, r3
 8001f16:	f107 0208 	add.w	r2, r7, #8
 8001f1a:	230a      	movs	r3, #10
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	2303      	movs	r3, #3
 8001f20:	4832      	ldr	r0, [pc, #200]	; (8001fec <main+0x2e4>)
 8001f22:	f003 fcb3 	bl	800588c <HAL_I2C_Master_Transmit>
 8001f26:	4603      	mov	r3, r0
 8001f28:	77bb      	strb	r3, [r7, #30]
				  if(res != HAL_OK)
 8001f2a:	7fbb      	ldrb	r3, [r7, #30]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00b      	beq.n	8001f48 <main+0x240>
				  {
					  HAL_UART_Transmit(&huart2, (uint8_t*)"I2C Transmit Error!\n", 20, 10);
 8001f30:	230a      	movs	r3, #10
 8001f32:	2214      	movs	r2, #20
 8001f34:	492e      	ldr	r1, [pc, #184]	; (8001ff0 <main+0x2e8>)
 8001f36:	4824      	ldr	r0, [pc, #144]	; (8001fc8 <main+0x2c0>)
 8001f38:	f006 f9ea 	bl	8008310 <HAL_UART_Transmit>
					  HAL_UART_Receive_IT(&huart2, UartState.rx_byte, 1);
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	4920      	ldr	r1, [pc, #128]	; (8001fc0 <main+0x2b8>)
 8001f40:	4821      	ldr	r0, [pc, #132]	; (8001fc8 <main+0x2c0>)
 8001f42:	f006 fa79 	bl	8008438 <HAL_UART_Receive_IT>
 8001f46:	e081      	b.n	800204c <main+0x344>
				  }
				  else
				  {
					  // I2C Receive
					  i2cdata[0] = 0x01;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	723b      	strb	r3, [r7, #8]
					  // Set Pointer
					  HAL_I2C_Master_Transmit(&hi2c1, Slave_Address, i2cdata, 1, 10);
 8001f4c:	7ffb      	ldrb	r3, [r7, #31]
 8001f4e:	b299      	uxth	r1, r3
 8001f50:	f107 0208 	add.w	r2, r7, #8
 8001f54:	230a      	movs	r3, #10
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	2301      	movs	r3, #1
 8001f5a:	4824      	ldr	r0, [pc, #144]	; (8001fec <main+0x2e4>)
 8001f5c:	f003 fc96 	bl	800588c <HAL_I2C_Master_Transmit>
					  if(res != HAL_OK)
 8001f60:	7fbb      	ldrb	r3, [r7, #30]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00a      	beq.n	8001f7c <main+0x274>
					  {
						  HAL_UART_Transmit(&huart2, (uint8_t*)"I2C Transmit Pointer Change Error!\n", 35, 10);
 8001f66:	230a      	movs	r3, #10
 8001f68:	2223      	movs	r2, #35	; 0x23
 8001f6a:	4922      	ldr	r1, [pc, #136]	; (8001ff4 <main+0x2ec>)
 8001f6c:	4816      	ldr	r0, [pc, #88]	; (8001fc8 <main+0x2c0>)
 8001f6e:	f006 f9cf 	bl	8008310 <HAL_UART_Transmit>
						  HAL_UART_Receive_IT(&huart2, UartState.rx_byte, 1);
 8001f72:	2201      	movs	r2, #1
 8001f74:	4912      	ldr	r1, [pc, #72]	; (8001fc0 <main+0x2b8>)
 8001f76:	4814      	ldr	r0, [pc, #80]	; (8001fc8 <main+0x2c0>)
 8001f78:	f006 fa5e 	bl	8008438 <HAL_UART_Receive_IT>
					  }
					  // Read
					  uint8_t bytes[2] = {0};
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	80bb      	strh	r3, [r7, #4]
					  HAL_I2C_Master_Receive(&hi2c1, Slave_Address, bytes, 2, 10);
 8001f80:	7ffb      	ldrb	r3, [r7, #31]
 8001f82:	b299      	uxth	r1, r3
 8001f84:	1d3a      	adds	r2, r7, #4
 8001f86:	230a      	movs	r3, #10
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	4817      	ldr	r0, [pc, #92]	; (8001fec <main+0x2e4>)
 8001f8e:	f003 fd71 	bl	8005a74 <HAL_I2C_Master_Receive>
					  if(res != HAL_OK)
 8001f92:	7fbb      	ldrb	r3, [r7, #30]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d033      	beq.n	8002000 <main+0x2f8>
					  {
						  HAL_UART_Transmit(&huart2, (uint8_t*)"I2C Receive Error!\n", 19, 10);
 8001f98:	230a      	movs	r3, #10
 8001f9a:	2213      	movs	r2, #19
 8001f9c:	4916      	ldr	r1, [pc, #88]	; (8001ff8 <main+0x2f0>)
 8001f9e:	480a      	ldr	r0, [pc, #40]	; (8001fc8 <main+0x2c0>)
 8001fa0:	f006 f9b6 	bl	8008310 <HAL_UART_Transmit>
						  HAL_UART_Receive_IT(&huart2, UartState.rx_byte, 1);
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	4906      	ldr	r1, [pc, #24]	; (8001fc0 <main+0x2b8>)
 8001fa8:	4807      	ldr	r0, [pc, #28]	; (8001fc8 <main+0x2c0>)
 8001faa:	f006 fa45 	bl	8008438 <HAL_UART_Receive_IT>
 8001fae:	e04d      	b.n	800204c <main+0x344>
 8001fb0:	20000828 	.word	0x20000828
 8001fb4:	044aa200 	.word	0x044aa200
 8001fb8:	2000081c 	.word	0x2000081c
 8001fbc:	200009cc 	.word	0x200009cc
 8001fc0:	20000c80 	.word	0x20000c80
 8001fc4:	20000000 	.word	0x20000000
 8001fc8:	20000bb0 	.word	0x20000bb0
 8001fcc:	20000c34 	.word	0x20000c34
 8001fd0:	20000a84 	.word	0x20000a84
 8001fd4:	20000a38 	.word	0x20000a38
 8001fd8:	20000b64 	.word	0x20000b64
 8001fdc:	48000800 	.word	0x48000800
 8001fe0:	2000003c 	.word	0x2000003c
 8001fe4:	20000040 	.word	0x20000040
 8001fe8:	48000400 	.word	0x48000400
 8001fec:	200009ec 	.word	0x200009ec
 8001ff0:	0800a844 	.word	0x0800a844
 8001ff4:	0800a85c 	.word	0x0800a85c
 8001ff8:	0800a880 	.word	0x0800a880
 8001ffc:	42c80000 	.word	0x42c80000
					  } else
					  {
						  float voltage = (float)bytes[1]/100;
 8002000:	797b      	ldrb	r3, [r7, #5]
 8002002:	ee07 3a90 	vmov	s15, r3
 8002006:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800200a:	ed5f 6a04 	vldr	s13, [pc, #-16]	; 8001ffc <main+0x2f4>
 800200e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002012:	edc7 7a06 	vstr	s15, [r7, #24]
						  float current = voltage/0.1;
 8002016:	69b8      	ldr	r0, [r7, #24]
 8002018:	f7fe fa42 	bl	80004a0 <__aeabi_f2d>
 800201c:	a35f      	add	r3, pc, #380	; (adr r3, 800219c <main+0x494>)
 800201e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002022:	f7fe fbbf 	bl	80007a4 <__aeabi_ddiv>
 8002026:	4603      	mov	r3, r0
 8002028:	460c      	mov	r4, r1
 800202a:	4618      	mov	r0, r3
 800202c:	4621      	mov	r1, r4
 800202e:	f7fe fd51 	bl	8000ad4 <__aeabi_d2f>
 8002032:	4603      	mov	r3, r0
 8002034:	617b      	str	r3, [r7, #20]
						  HAL_UART_Transmit(&huart2, bytes, 2, 10);
 8002036:	1d39      	adds	r1, r7, #4
 8002038:	230a      	movs	r3, #10
 800203a:	2202      	movs	r2, #2
 800203c:	484c      	ldr	r0, [pc, #304]	; (8002170 <main+0x468>)
 800203e:	f006 f967 	bl	8008310 <HAL_UART_Transmit>
						  HAL_UART_Receive_IT(&huart2, UartState.rx_byte, 1);
 8002042:	2201      	movs	r2, #1
 8002044:	494b      	ldr	r1, [pc, #300]	; (8002174 <main+0x46c>)
 8002046:	484a      	ldr	r0, [pc, #296]	; (8002170 <main+0x468>)
 8002048:	f006 f9f6 	bl	8008438 <HAL_UART_Receive_IT>
					  }
				  }

			  }
			  btn_up_flag = 0;
 800204c:	4b4a      	ldr	r3, [pc, #296]	; (8002178 <main+0x470>)
 800204e:	2200      	movs	r2, #0
 8002050:	701a      	strb	r2, [r3, #0]
 8002052:	e080      	b.n	8002156 <main+0x44e>
		  }
	  }
	  else if(btn_left_flag)
 8002054:	4b49      	ldr	r3, [pc, #292]	; (800217c <main+0x474>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d019      	beq.n	8002090 <main+0x388>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 800205c:	f001 fa82 	bl	8003564 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	4b47      	ldr	r3, [pc, #284]	; (8002180 <main+0x478>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b36      	cmp	r3, #54	; 0x36
 800206a:	d974      	bls.n	8002156 <main+0x44e>
		  {
			  if(HAL_GPIO_ReadPin(btn_left_GPIO_Port, btn_left_Pin))
 800206c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002070:	4844      	ldr	r0, [pc, #272]	; (8002184 <main+0x47c>)
 8002072:	f003 fb33 	bl	80056dc <HAL_GPIO_ReadPin>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d005      	beq.n	8002088 <main+0x380>
			  {
				  // HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
				  LCD_Write_Instruction(0b00011100);
 800207c:	201c      	movs	r0, #28
 800207e:	f7fe fff9 	bl	8001074 <LCD_Write_Instruction>
				  Delay_us_10(5);
 8002082:	2005      	movs	r0, #5
 8002084:	f000 fc3a 	bl	80028fc <Delay_us_10>
			  }
			  btn_left_flag = 0;
 8002088:	4b3c      	ldr	r3, [pc, #240]	; (800217c <main+0x474>)
 800208a:	2200      	movs	r2, #0
 800208c:	701a      	strb	r2, [r3, #0]
 800208e:	e062      	b.n	8002156 <main+0x44e>
		  }
	  }
	  else if(btn_down_flag)
 8002090:	4b3d      	ldr	r3, [pc, #244]	; (8002188 <main+0x480>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d010      	beq.n	80020ba <main+0x3b2>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 8002098:	f001 fa64 	bl	8003564 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	4b38      	ldr	r3, [pc, #224]	; (8002180 <main+0x478>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b36      	cmp	r3, #54	; 0x36
 80020a6:	d956      	bls.n	8002156 <main+0x44e>
		  {
			  if(HAL_GPIO_ReadPin(btn_down_GPIO_Port, btn_down_Pin))
 80020a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020ac:	4835      	ldr	r0, [pc, #212]	; (8002184 <main+0x47c>)
 80020ae:	f003 fb15 	bl	80056dc <HAL_GPIO_ReadPin>
			  {
				  // HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
			  }
			  btn_down_flag = 0;
 80020b2:	4b35      	ldr	r3, [pc, #212]	; (8002188 <main+0x480>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	701a      	strb	r2, [r3, #0]
 80020b8:	e04d      	b.n	8002156 <main+0x44e>
		  }
	  }
	  else if(btn_right_flag)
 80020ba:	4b34      	ldr	r3, [pc, #208]	; (800218c <main+0x484>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d019      	beq.n	80020f6 <main+0x3ee>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 80020c2:	f001 fa4f 	bl	8003564 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	4b2d      	ldr	r3, [pc, #180]	; (8002180 <main+0x478>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b36      	cmp	r3, #54	; 0x36
 80020d0:	d941      	bls.n	8002156 <main+0x44e>
		  {
			  if(HAL_GPIO_ReadPin(btn_right_GPIO_Port, btn_right_Pin))
 80020d2:	2180      	movs	r1, #128	; 0x80
 80020d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020d8:	f003 fb00 	bl	80056dc <HAL_GPIO_ReadPin>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d005      	beq.n	80020ee <main+0x3e6>
			  {
				  // HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
				  LCD_Write_Instruction(0b00011000);
 80020e2:	2018      	movs	r0, #24
 80020e4:	f7fe ffc6 	bl	8001074 <LCD_Write_Instruction>
				  Delay_us_10(5);
 80020e8:	2005      	movs	r0, #5
 80020ea:	f000 fc07 	bl	80028fc <Delay_us_10>
			  }
			  btn_right_flag = 0;
 80020ee:	4b27      	ldr	r3, [pc, #156]	; (800218c <main+0x484>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	701a      	strb	r2, [r3, #0]
 80020f4:	e02f      	b.n	8002156 <main+0x44e>
		  }
	  }
	  else if(btn_mid_flag)
 80020f6:	4b26      	ldr	r3, [pc, #152]	; (8002190 <main+0x488>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d02b      	beq.n	8002156 <main+0x44e>
	  {
		  if(HAL_GetTick() - last_ticks >= 20)
 80020fe:	f001 fa31 	bl	8003564 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	4b1e      	ldr	r3, [pc, #120]	; (8002180 <main+0x478>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b13      	cmp	r3, #19
 800210c:	d923      	bls.n	8002156 <main+0x44e>
		  {
			  if(HAL_GPIO_ReadPin(btn_mid_GPIO_Port, btn_mid_Pin))
 800210e:	2140      	movs	r1, #64	; 0x40
 8002110:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002114:	f003 fae2 	bl	80056dc <HAL_GPIO_ReadPin>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d018      	beq.n	8002150 <main+0x448>
			  {
				  // Toggle Menu Display state
				  if(DisplayState.Mode == Menu){
 800211e:	4b1d      	ldr	r3, [pc, #116]	; (8002194 <main+0x48c>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d103      	bne.n	800212e <main+0x426>
					  LCD_changeDisplayMode(Measurement);
 8002126:	2001      	movs	r0, #1
 8002128:	f7ff f96e 	bl	8001408 <LCD_changeDisplayMode>
 800212c:	e010      	b.n	8002150 <main+0x448>
				  } else if(DisplayState.Mode == Measurement){
 800212e:	4b19      	ldr	r3, [pc, #100]	; (8002194 <main+0x48c>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d103      	bne.n	800213e <main+0x436>
					  LCD_changeDisplayMode(Menu);
 8002136:	2000      	movs	r0, #0
 8002138:	f7ff f966 	bl	8001408 <LCD_changeDisplayMode>
 800213c:	e008      	b.n	8002150 <main+0x448>
				  } else if(DisplayState.Mode == Output){
 800213e:	4b15      	ldr	r3, [pc, #84]	; (8002194 <main+0x48c>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	2b02      	cmp	r3, #2
 8002144:	d104      	bne.n	8002150 <main+0x448>
					  LCD_changeDisplayMode(DisplayState.LastMode);
 8002146:	4b13      	ldr	r3, [pc, #76]	; (8002194 <main+0x48c>)
 8002148:	785b      	ldrb	r3, [r3, #1]
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff f95c 	bl	8001408 <LCD_changeDisplayMode>
				  }
			  }
			  btn_mid_flag = 0;
 8002150:	4b0f      	ldr	r3, [pc, #60]	; (8002190 <main+0x488>)
 8002152:	2200      	movs	r2, #0
 8002154:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  // ADC JOB
	  if(adc_timer_flag)
 8002156:	4b10      	ldr	r3, [pc, #64]	; (8002198 <main+0x490>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	f43f ae71 	beq.w	8001e42 <main+0x13a>
	  {
		  ADC_Main_Function();
 8002160:	f7fe fd08 	bl	8000b74 <ADC_Main_Function>
		  adc_timer_flag = 0;
 8002164:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <main+0x490>)
 8002166:	2200      	movs	r2, #0
 8002168:	701a      	strb	r2, [r3, #0]
	  if(DisplayState.RefreshFlag == 1)
 800216a:	e66a      	b.n	8001e42 <main+0x13a>
 800216c:	f3af 8000 	nop.w
 8002170:	20000bb0 	.word	0x20000bb0
 8002174:	20000c80 	.word	0x20000c80
 8002178:	2000003c 	.word	0x2000003c
 800217c:	2000003d 	.word	0x2000003d
 8002180:	20000040 	.word	0x20000040
 8002184:	48000400 	.word	0x48000400
 8002188:	2000003e 	.word	0x2000003e
 800218c:	2000003b 	.word	0x2000003b
 8002190:	2000003a 	.word	0x2000003a
 8002194:	200009cc 	.word	0x200009cc
 8002198:	2000003f 	.word	0x2000003f
 800219c:	9999999a 	.word	0x9999999a
 80021a0:	3fb99999 	.word	0x3fb99999

080021a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b0a6      	sub	sp, #152	; 0x98
 80021a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80021ae:	2228      	movs	r2, #40	; 0x28
 80021b0:	2100      	movs	r1, #0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f007 faec 	bl	8009790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]
 80021c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021c8:	1d3b      	adds	r3, r7, #4
 80021ca:	2258      	movs	r2, #88	; 0x58
 80021cc:	2100      	movs	r1, #0
 80021ce:	4618      	mov	r0, r3
 80021d0:	f007 fade 	bl	8009790 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021d4:	2302      	movs	r3, #2
 80021d6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021d8:	2301      	movs	r3, #1
 80021da:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021dc:	2310      	movs	r3, #16
 80021de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021e2:	2302      	movs	r3, #2
 80021e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80021f0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80021f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80021f8:	2300      	movs	r3, #0
 80021fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002202:	4618      	mov	r0, r3
 8002204:	f003 ffb4 	bl	8006170 <HAL_RCC_OscConfig>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800220e:	f000 fb93 	bl	8002938 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002212:	230f      	movs	r3, #15
 8002214:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002216:	2302      	movs	r3, #2
 8002218:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800221a:	2300      	movs	r3, #0
 800221c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800221e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002222:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002224:	2300      	movs	r3, #0
 8002226:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002228:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800222c:	2102      	movs	r1, #2
 800222e:	4618      	mov	r0, r3
 8002230:	f004 feb4 	bl	8006f9c <HAL_RCC_ClockConfig>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800223a:	f000 fb7d 	bl	8002938 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 800223e:	4b0f      	ldr	r3, [pc, #60]	; (800227c <SystemClock_Config+0xd8>)
 8002240:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM15|RCC_PERIPHCLK_TIM16
                              |RCC_PERIPHCLK_TIM17|RCC_PERIPHCLK_ADC12
                              |RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002242:	2300      	movs	r3, #0
 8002244:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8002246:	f44f 7380 	mov.w	r3, #256	; 0x100
 800224a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800224c:	2300      	movs	r3, #0
 800224e:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8002250:	2300      	movs	r3, #0
 8002252:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8002254:	2300      	movs	r3, #0
 8002256:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 8002258:	2300      	movs	r3, #0
 800225a:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 800225c:	2300      	movs	r3, #0
 800225e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002260:	1d3b      	adds	r3, r7, #4
 8002262:	4618      	mov	r0, r3
 8002264:	f005 f8d0 	bl	8007408 <HAL_RCCEx_PeriphCLKConfig>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <SystemClock_Config+0xce>
  {
    Error_Handler();
 800226e:	f000 fb63 	bl	8002938 <Error_Handler>
  }
}
 8002272:	bf00      	nop
 8002274:	3798      	adds	r7, #152	; 0x98
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	01d000a2 	.word	0x01d000a2

08002280 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08a      	sub	sp, #40	; 0x28
 8002284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002286:	f107 031c 	add.w	r3, r7, #28
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	605a      	str	r2, [r3, #4]
 8002290:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002292:	1d3b      	adds	r3, r7, #4
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	611a      	str	r2, [r3, #16]
 80022a0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80022a2:	4b2e      	ldr	r3, [pc, #184]	; (800235c <MX_ADC1_Init+0xdc>)
 80022a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80022a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80022aa:	4b2c      	ldr	r3, [pc, #176]	; (800235c <MX_ADC1_Init+0xdc>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022b0:	4b2a      	ldr	r3, [pc, #168]	; (800235c <MX_ADC1_Init+0xdc>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80022b6:	4b29      	ldr	r3, [pc, #164]	; (800235c <MX_ADC1_Init+0xdc>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80022bc:	4b27      	ldr	r3, [pc, #156]	; (800235c <MX_ADC1_Init+0xdc>)
 80022be:	2200      	movs	r2, #0
 80022c0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022c2:	4b26      	ldr	r3, [pc, #152]	; (800235c <MX_ADC1_Init+0xdc>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022ca:	4b24      	ldr	r3, [pc, #144]	; (800235c <MX_ADC1_Init+0xdc>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022d0:	4b22      	ldr	r3, [pc, #136]	; (800235c <MX_ADC1_Init+0xdc>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022d6:	4b21      	ldr	r3, [pc, #132]	; (800235c <MX_ADC1_Init+0xdc>)
 80022d8:	2200      	movs	r2, #0
 80022da:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80022dc:	4b1f      	ldr	r3, [pc, #124]	; (800235c <MX_ADC1_Init+0xdc>)
 80022de:	2201      	movs	r2, #1
 80022e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80022e2:	4b1e      	ldr	r3, [pc, #120]	; (800235c <MX_ADC1_Init+0xdc>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022ea:	4b1c      	ldr	r3, [pc, #112]	; (800235c <MX_ADC1_Init+0xdc>)
 80022ec:	2204      	movs	r2, #4
 80022ee:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80022f0:	4b1a      	ldr	r3, [pc, #104]	; (800235c <MX_ADC1_Init+0xdc>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80022f6:	4b19      	ldr	r3, [pc, #100]	; (800235c <MX_ADC1_Init+0xdc>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022fc:	4817      	ldr	r0, [pc, #92]	; (800235c <MX_ADC1_Init+0xdc>)
 80022fe:	f001 f95f 	bl	80035c0 <HAL_ADC_Init>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8002308:	f000 fb16 	bl	8002938 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800230c:	2300      	movs	r3, #0
 800230e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002310:	f107 031c 	add.w	r3, r7, #28
 8002314:	4619      	mov	r1, r3
 8002316:	4811      	ldr	r0, [pc, #68]	; (800235c <MX_ADC1_Init+0xdc>)
 8002318:	f002 f894 	bl	8004444 <HAL_ADCEx_MultiModeConfigChannel>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8002322:	f000 fb09 	bl	8002938 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002326:	2301      	movs	r3, #1
 8002328:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800232a:	2301      	movs	r3, #1
 800232c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800232e:	2300      	movs	r3, #0
 8002330:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800233a:	2300      	movs	r3, #0
 800233c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800233e:	1d3b      	adds	r3, r7, #4
 8002340:	4619      	mov	r1, r3
 8002342:	4806      	ldr	r0, [pc, #24]	; (800235c <MX_ADC1_Init+0xdc>)
 8002344:	f001 fd92 	bl	8003e6c <HAL_ADC_ConfigChannel>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800234e:	f000 faf3 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002352:	bf00      	nop
 8002354:	3728      	adds	r7, #40	; 0x28
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20000b14 	.word	0x20000b14

08002360 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002366:	1d3b      	adds	r3, r7, #4
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8002370:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <MX_DAC1_Init+0x4c>)
 8002372:	4a0f      	ldr	r2, [pc, #60]	; (80023b0 <MX_DAC1_Init+0x50>)
 8002374:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002376:	480d      	ldr	r0, [pc, #52]	; (80023ac <MX_DAC1_Init+0x4c>)
 8002378:	f002 fbe5 	bl	8004b46 <HAL_DAC_Init>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8002382:	f000 fad9 	bl	8002938 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002386:	2324      	movs	r3, #36	; 0x24
 8002388:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800238a:	2300      	movs	r3, #0
 800238c:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800238e:	1d3b      	adds	r3, r7, #4
 8002390:	2200      	movs	r2, #0
 8002392:	4619      	mov	r1, r3
 8002394:	4805      	ldr	r0, [pc, #20]	; (80023ac <MX_DAC1_Init+0x4c>)
 8002396:	f002 fd15 	bl	8004dc4 <HAL_DAC_ConfigChannel>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 80023a0:	f000 faca 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80023a4:	bf00      	nop
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	200009d8 	.word	0x200009d8
 80023b0:	40007400 	.word	0x40007400

080023b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023b8:	4b1b      	ldr	r3, [pc, #108]	; (8002428 <MX_I2C1_Init+0x74>)
 80023ba:	4a1c      	ldr	r2, [pc, #112]	; (800242c <MX_I2C1_Init+0x78>)
 80023bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80023be:	4b1a      	ldr	r3, [pc, #104]	; (8002428 <MX_I2C1_Init+0x74>)
 80023c0:	4a1b      	ldr	r2, [pc, #108]	; (8002430 <MX_I2C1_Init+0x7c>)
 80023c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80023c4:	4b18      	ldr	r3, [pc, #96]	; (8002428 <MX_I2C1_Init+0x74>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023ca:	4b17      	ldr	r3, [pc, #92]	; (8002428 <MX_I2C1_Init+0x74>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023d0:	4b15      	ldr	r3, [pc, #84]	; (8002428 <MX_I2C1_Init+0x74>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80023d6:	4b14      	ldr	r3, [pc, #80]	; (8002428 <MX_I2C1_Init+0x74>)
 80023d8:	2200      	movs	r2, #0
 80023da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80023dc:	4b12      	ldr	r3, [pc, #72]	; (8002428 <MX_I2C1_Init+0x74>)
 80023de:	2200      	movs	r2, #0
 80023e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023e2:	4b11      	ldr	r3, [pc, #68]	; (8002428 <MX_I2C1_Init+0x74>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023e8:	4b0f      	ldr	r3, [pc, #60]	; (8002428 <MX_I2C1_Init+0x74>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023ee:	480e      	ldr	r0, [pc, #56]	; (8002428 <MX_I2C1_Init+0x74>)
 80023f0:	f003 f9bc 	bl	800576c <HAL_I2C_Init>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80023fa:	f000 fa9d 	bl	8002938 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80023fe:	2100      	movs	r1, #0
 8002400:	4809      	ldr	r0, [pc, #36]	; (8002428 <MX_I2C1_Init+0x74>)
 8002402:	f003 fe1d 	bl	8006040 <HAL_I2CEx_ConfigAnalogFilter>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800240c:	f000 fa94 	bl	8002938 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002410:	2100      	movs	r1, #0
 8002412:	4805      	ldr	r0, [pc, #20]	; (8002428 <MX_I2C1_Init+0x74>)
 8002414:	f003 fe5f 	bl	80060d6 <HAL_I2CEx_ConfigDigitalFilter>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800241e:	f000 fa8b 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	200009ec 	.word	0x200009ec
 800242c:	40005400 	.word	0x40005400
 8002430:	2000090e 	.word	0x2000090e

08002434 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b088      	sub	sp, #32
 8002438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800243a:	f107 0310 	add.w	r3, r7, #16
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	605a      	str	r2, [r3, #4]
 8002444:	609a      	str	r2, [r3, #8]
 8002446:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002448:	1d3b      	adds	r3, r7, #4
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	605a      	str	r2, [r3, #4]
 8002450:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002452:	4b1e      	ldr	r3, [pc, #120]	; (80024cc <MX_TIM2_Init+0x98>)
 8002454:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002458:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800245a:	4b1c      	ldr	r3, [pc, #112]	; (80024cc <MX_TIM2_Init+0x98>)
 800245c:	2200      	movs	r2, #0
 800245e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002460:	4b1a      	ldr	r3, [pc, #104]	; (80024cc <MX_TIM2_Init+0x98>)
 8002462:	2200      	movs	r2, #0
 8002464:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002466:	4b19      	ldr	r3, [pc, #100]	; (80024cc <MX_TIM2_Init+0x98>)
 8002468:	f240 32e7 	movw	r2, #999	; 0x3e7
 800246c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800246e:	4b17      	ldr	r3, [pc, #92]	; (80024cc <MX_TIM2_Init+0x98>)
 8002470:	2200      	movs	r2, #0
 8002472:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002474:	4b15      	ldr	r3, [pc, #84]	; (80024cc <MX_TIM2_Init+0x98>)
 8002476:	2200      	movs	r2, #0
 8002478:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800247a:	4814      	ldr	r0, [pc, #80]	; (80024cc <MX_TIM2_Init+0x98>)
 800247c:	f005 f9e2 	bl	8007844 <HAL_TIM_Base_Init>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002486:	f000 fa57 	bl	8002938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800248a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800248e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002490:	f107 0310 	add.w	r3, r7, #16
 8002494:	4619      	mov	r1, r3
 8002496:	480d      	ldr	r0, [pc, #52]	; (80024cc <MX_TIM2_Init+0x98>)
 8002498:	f005 fc23 	bl	8007ce2 <HAL_TIM_ConfigClockSource>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80024a2:	f000 fa49 	bl	8002938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80024a6:	2320      	movs	r3, #32
 80024a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024aa:	2300      	movs	r3, #0
 80024ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024ae:	1d3b      	adds	r3, r7, #4
 80024b0:	4619      	mov	r1, r3
 80024b2:	4806      	ldr	r0, [pc, #24]	; (80024cc <MX_TIM2_Init+0x98>)
 80024b4:	f005 fe34 	bl	8008120 <HAL_TIMEx_MasterConfigSynchronization>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80024be:	f000 fa3b 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80024c2:	bf00      	nop
 80024c4:	3720      	adds	r7, #32
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000b64 	.word	0x20000b64

080024d0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b088      	sub	sp, #32
 80024d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024d6:	f107 0310 	add.w	r3, r7, #16
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	605a      	str	r2, [r3, #4]
 80024e0:	609a      	str	r2, [r3, #8]
 80024e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024e4:	1d3b      	adds	r3, r7, #4
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	605a      	str	r2, [r3, #4]
 80024ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80024ee:	4b1e      	ldr	r3, [pc, #120]	; (8002568 <MX_TIM15_Init+0x98>)
 80024f0:	4a1e      	ldr	r2, [pc, #120]	; (800256c <MX_TIM15_Init+0x9c>)
 80024f2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 72-1;
 80024f4:	4b1c      	ldr	r3, [pc, #112]	; (8002568 <MX_TIM15_Init+0x98>)
 80024f6:	2247      	movs	r2, #71	; 0x47
 80024f8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024fa:	4b1b      	ldr	r3, [pc, #108]	; (8002568 <MX_TIM15_Init+0x98>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 10-1;
 8002500:	4b19      	ldr	r3, [pc, #100]	; (8002568 <MX_TIM15_Init+0x98>)
 8002502:	2209      	movs	r2, #9
 8002504:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002506:	4b18      	ldr	r3, [pc, #96]	; (8002568 <MX_TIM15_Init+0x98>)
 8002508:	2200      	movs	r2, #0
 800250a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800250c:	4b16      	ldr	r3, [pc, #88]	; (8002568 <MX_TIM15_Init+0x98>)
 800250e:	2200      	movs	r2, #0
 8002510:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002512:	4b15      	ldr	r3, [pc, #84]	; (8002568 <MX_TIM15_Init+0x98>)
 8002514:	2200      	movs	r2, #0
 8002516:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002518:	4813      	ldr	r0, [pc, #76]	; (8002568 <MX_TIM15_Init+0x98>)
 800251a:	f005 f993 	bl	8007844 <HAL_TIM_Base_Init>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8002524:	f000 fa08 	bl	8002938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800252c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800252e:	f107 0310 	add.w	r3, r7, #16
 8002532:	4619      	mov	r1, r3
 8002534:	480c      	ldr	r0, [pc, #48]	; (8002568 <MX_TIM15_Init+0x98>)
 8002536:	f005 fbd4 	bl	8007ce2 <HAL_TIM_ConfigClockSource>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8002540:	f000 f9fa 	bl	8002938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002544:	2300      	movs	r3, #0
 8002546:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002548:	2300      	movs	r3, #0
 800254a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800254c:	1d3b      	adds	r3, r7, #4
 800254e:	4619      	mov	r1, r3
 8002550:	4805      	ldr	r0, [pc, #20]	; (8002568 <MX_TIM15_Init+0x98>)
 8002552:	f005 fde5 	bl	8008120 <HAL_TIMEx_MasterConfigSynchronization>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 800255c:	f000 f9ec 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002560:	bf00      	nop
 8002562:	3720      	adds	r7, #32
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20000a38 	.word	0x20000a38
 800256c:	40014000 	.word	0x40014000

08002570 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002574:	4b0f      	ldr	r3, [pc, #60]	; (80025b4 <MX_TIM16_Init+0x44>)
 8002576:	4a10      	ldr	r2, [pc, #64]	; (80025b8 <MX_TIM16_Init+0x48>)
 8002578:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 72-1;
 800257a:	4b0e      	ldr	r3, [pc, #56]	; (80025b4 <MX_TIM16_Init+0x44>)
 800257c:	2247      	movs	r2, #71	; 0x47
 800257e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002580:	4b0c      	ldr	r3, [pc, #48]	; (80025b4 <MX_TIM16_Init+0x44>)
 8002582:	2200      	movs	r2, #0
 8002584:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 50 - 1;
 8002586:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <MX_TIM16_Init+0x44>)
 8002588:	2231      	movs	r2, #49	; 0x31
 800258a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800258c:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <MX_TIM16_Init+0x44>)
 800258e:	2200      	movs	r2, #0
 8002590:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002592:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <MX_TIM16_Init+0x44>)
 8002594:	2200      	movs	r2, #0
 8002596:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002598:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <MX_TIM16_Init+0x44>)
 800259a:	2200      	movs	r2, #0
 800259c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800259e:	4805      	ldr	r0, [pc, #20]	; (80025b4 <MX_TIM16_Init+0x44>)
 80025a0:	f005 f950 	bl	8007844 <HAL_TIM_Base_Init>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80025aa:	f000 f9c5 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20000c34 	.word	0x20000c34
 80025b8:	40014400 	.word	0x40014400

080025bc <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80025c0:	4b10      	ldr	r3, [pc, #64]	; (8002604 <MX_TIM17_Init+0x48>)
 80025c2:	4a11      	ldr	r2, [pc, #68]	; (8002608 <MX_TIM17_Init+0x4c>)
 80025c4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 7200-1;
 80025c6:	4b0f      	ldr	r3, [pc, #60]	; (8002604 <MX_TIM17_Init+0x48>)
 80025c8:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80025cc:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ce:	4b0d      	ldr	r3, [pc, #52]	; (8002604 <MX_TIM17_Init+0x48>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 5000-1;
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <MX_TIM17_Init+0x48>)
 80025d6:	f241 3287 	movw	r2, #4999	; 0x1387
 80025da:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025dc:	4b09      	ldr	r3, [pc, #36]	; (8002604 <MX_TIM17_Init+0x48>)
 80025de:	2200      	movs	r2, #0
 80025e0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80025e2:	4b08      	ldr	r3, [pc, #32]	; (8002604 <MX_TIM17_Init+0x48>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e8:	4b06      	ldr	r3, [pc, #24]	; (8002604 <MX_TIM17_Init+0x48>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80025ee:	4805      	ldr	r0, [pc, #20]	; (8002604 <MX_TIM17_Init+0x48>)
 80025f0:	f005 f928 	bl	8007844 <HAL_TIM_Base_Init>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 80025fa:	f000 f99d 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000a84 	.word	0x20000a84
 8002608:	40014800 	.word	0x40014800

0800260c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002610:	4b14      	ldr	r3, [pc, #80]	; (8002664 <MX_USART2_UART_Init+0x58>)
 8002612:	4a15      	ldr	r2, [pc, #84]	; (8002668 <MX_USART2_UART_Init+0x5c>)
 8002614:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002616:	4b13      	ldr	r3, [pc, #76]	; (8002664 <MX_USART2_UART_Init+0x58>)
 8002618:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800261c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800261e:	4b11      	ldr	r3, [pc, #68]	; (8002664 <MX_USART2_UART_Init+0x58>)
 8002620:	2200      	movs	r2, #0
 8002622:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002624:	4b0f      	ldr	r3, [pc, #60]	; (8002664 <MX_USART2_UART_Init+0x58>)
 8002626:	2200      	movs	r2, #0
 8002628:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800262a:	4b0e      	ldr	r3, [pc, #56]	; (8002664 <MX_USART2_UART_Init+0x58>)
 800262c:	2200      	movs	r2, #0
 800262e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002630:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <MX_USART2_UART_Init+0x58>)
 8002632:	220c      	movs	r2, #12
 8002634:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002636:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <MX_USART2_UART_Init+0x58>)
 8002638:	2200      	movs	r2, #0
 800263a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800263c:	4b09      	ldr	r3, [pc, #36]	; (8002664 <MX_USART2_UART_Init+0x58>)
 800263e:	2200      	movs	r2, #0
 8002640:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002642:	4b08      	ldr	r3, [pc, #32]	; (8002664 <MX_USART2_UART_Init+0x58>)
 8002644:	2200      	movs	r2, #0
 8002646:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002648:	4b06      	ldr	r3, [pc, #24]	; (8002664 <MX_USART2_UART_Init+0x58>)
 800264a:	2200      	movs	r2, #0
 800264c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800264e:	4805      	ldr	r0, [pc, #20]	; (8002664 <MX_USART2_UART_Init+0x58>)
 8002650:	f005 fe10 	bl	8008274 <HAL_UART_Init>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800265a:	f000 f96d 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20000bb0 	.word	0x20000bb0
 8002668:	40004400 	.word	0x40004400

0800266c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002672:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <MX_DMA_Init+0x38>)
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	4a0b      	ldr	r2, [pc, #44]	; (80026a4 <MX_DMA_Init+0x38>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	6153      	str	r3, [r2, #20]
 800267e:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <MX_DMA_Init+0x38>)
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	607b      	str	r3, [r7, #4]
 8002688:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800268a:	2200      	movs	r2, #0
 800268c:	2100      	movs	r1, #0
 800268e:	200d      	movs	r0, #13
 8002690:	f002 fa23 	bl	8004ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002694:	200d      	movs	r0, #13
 8002696:	f002 fa3c 	bl	8004b12 <HAL_NVIC_EnableIRQ>

}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40021000 	.word	0x40021000

080026a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08a      	sub	sp, #40	; 0x28
 80026ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ae:	f107 0314 	add.w	r3, r7, #20
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	605a      	str	r2, [r3, #4]
 80026b8:	609a      	str	r2, [r3, #8]
 80026ba:	60da      	str	r2, [r3, #12]
 80026bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026be:	4b75      	ldr	r3, [pc, #468]	; (8002894 <MX_GPIO_Init+0x1ec>)
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	4a74      	ldr	r2, [pc, #464]	; (8002894 <MX_GPIO_Init+0x1ec>)
 80026c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80026c8:	6153      	str	r3, [r2, #20]
 80026ca:	4b72      	ldr	r3, [pc, #456]	; (8002894 <MX_GPIO_Init+0x1ec>)
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026d2:	613b      	str	r3, [r7, #16]
 80026d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026d6:	4b6f      	ldr	r3, [pc, #444]	; (8002894 <MX_GPIO_Init+0x1ec>)
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	4a6e      	ldr	r2, [pc, #440]	; (8002894 <MX_GPIO_Init+0x1ec>)
 80026dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026e0:	6153      	str	r3, [r2, #20]
 80026e2:	4b6c      	ldr	r3, [pc, #432]	; (8002894 <MX_GPIO_Init+0x1ec>)
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ee:	4b69      	ldr	r3, [pc, #420]	; (8002894 <MX_GPIO_Init+0x1ec>)
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	4a68      	ldr	r2, [pc, #416]	; (8002894 <MX_GPIO_Init+0x1ec>)
 80026f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f8:	6153      	str	r3, [r2, #20]
 80026fa:	4b66      	ldr	r3, [pc, #408]	; (8002894 <MX_GPIO_Init+0x1ec>)
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002702:	60bb      	str	r3, [r7, #8]
 8002704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002706:	4b63      	ldr	r3, [pc, #396]	; (8002894 <MX_GPIO_Init+0x1ec>)
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	4a62      	ldr	r2, [pc, #392]	; (8002894 <MX_GPIO_Init+0x1ec>)
 800270c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002710:	6153      	str	r3, [r2, #20]
 8002712:	4b60      	ldr	r3, [pc, #384]	; (8002894 <MX_GPIO_Init+0x1ec>)
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800271a:	607b      	str	r3, [r7, #4]
 800271c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD5_Pin|LD4_Pin|lcd_D6_Pin 
 800271e:	2200      	movs	r2, #0
 8002720:	f44f 51f1 	mov.w	r1, #7712	; 0x1e20
 8002724:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002728:	f002 fff0 	bl	800570c <HAL_GPIO_WritePin>
                          |lcd_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|lcd_D4_Pin|LD3_Pin|lcd_D5_Pin, GPIO_PIN_RESET);
 800272c:	2200      	movs	r2, #0
 800272e:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8002732:	4859      	ldr	r0, [pc, #356]	; (8002898 <MX_GPIO_Init+0x1f0>)
 8002734:	f002 ffea 	bl	800570c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, lcd_blown_Pin|lcd_RS_Pin|lcd_E_Pin, GPIO_PIN_RESET);
 8002738:	2200      	movs	r2, #0
 800273a:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 800273e:	4857      	ldr	r0, [pc, #348]	; (800289c <MX_GPIO_Init+0x1f4>)
 8002740:	f002 ffe4 	bl	800570c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002744:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800274a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800274e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002750:	2300      	movs	r3, #0
 8002752:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002754:	f107 0314 	add.w	r3, r7, #20
 8002758:	4619      	mov	r1, r3
 800275a:	484f      	ldr	r0, [pc, #316]	; (8002898 <MX_GPIO_Init+0x1f0>)
 800275c:	f002 fe34 	bl	80053c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD5_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD5_Pin|LD4_Pin;
 8002760:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 8002764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002766:	2301      	movs	r3, #1
 8002768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276e:	2300      	movs	r3, #0
 8002770:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002772:	f107 0314 	add.w	r3, r7, #20
 8002776:	4619      	mov	r1, r3
 8002778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800277c:	f002 fe24 	bl	80053c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_mid_Pin */
  GPIO_InitStruct.Pin = btn_mid_Pin;
 8002780:	2340      	movs	r3, #64	; 0x40
 8002782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002784:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800278a:	2301      	movs	r3, #1
 800278c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn_mid_GPIO_Port, &GPIO_InitStruct);
 800278e:	f107 0314 	add.w	r3, r7, #20
 8002792:	4619      	mov	r1, r3
 8002794:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002798:	f002 fe16 	bl	80053c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_right_Pin */
  GPIO_InitStruct.Pin = btn_right_Pin;
 800279c:	2380      	movs	r3, #128	; 0x80
 800279e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027a0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80027a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027a6:	2301      	movs	r3, #1
 80027a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn_right_GPIO_Port, &GPIO_InitStruct);
 80027aa:	f107 0314 	add.w	r3, r7, #20
 80027ae:	4619      	mov	r1, r3
 80027b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027b4:	f002 fe08 	bl	80053c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD3_Pin;
 80027b8:	2390      	movs	r3, #144	; 0x90
 80027ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027bc:	2301      	movs	r3, #1
 80027be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c4:	2300      	movs	r3, #0
 80027c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027c8:	f107 0314 	add.w	r3, r7, #20
 80027cc:	4619      	mov	r1, r3
 80027ce:	4832      	ldr	r0, [pc, #200]	; (8002898 <MX_GPIO_Init+0x1f0>)
 80027d0:	f002 fdfa 	bl	80053c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : btn_down_Pin btn_left_Pin btn_up_Pin */
  GPIO_InitStruct.Pin = btn_down_Pin|btn_left_Pin|btn_up_Pin;
 80027d4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80027d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80027de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027e0:	2301      	movs	r3, #1
 80027e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e4:	f107 0314 	add.w	r3, r7, #20
 80027e8:	4619      	mov	r1, r3
 80027ea:	482c      	ldr	r0, [pc, #176]	; (800289c <MX_GPIO_Init+0x1f4>)
 80027ec:	f002 fdec 	bl	80053c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : lcd_blown_Pin */
  GPIO_InitStruct.Pin = lcd_blown_Pin;
 80027f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80027f6:	2311      	movs	r3, #17
 80027f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fe:	2300      	movs	r3, #0
 8002800:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(lcd_blown_GPIO_Port, &GPIO_InitStruct);
 8002802:	f107 0314 	add.w	r3, r7, #20
 8002806:	4619      	mov	r1, r3
 8002808:	4824      	ldr	r0, [pc, #144]	; (800289c <MX_GPIO_Init+0x1f4>)
 800280a:	f002 fddd 	bl	80053c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : lcd_RS_Pin lcd_E_Pin */
  GPIO_InitStruct.Pin = lcd_RS_Pin|lcd_E_Pin;
 800280e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002814:	2301      	movs	r3, #1
 8002816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002818:	2300      	movs	r3, #0
 800281a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281c:	2300      	movs	r3, #0
 800281e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002820:	f107 0314 	add.w	r3, r7, #20
 8002824:	4619      	mov	r1, r3
 8002826:	481d      	ldr	r0, [pc, #116]	; (800289c <MX_GPIO_Init+0x1f4>)
 8002828:	f002 fdce 	bl	80053c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : lcd_D4_Pin lcd_D5_Pin */
  GPIO_InitStruct.Pin = lcd_D4_Pin|lcd_D5_Pin;
 800282c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002832:	2311      	movs	r3, #17
 8002834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002836:	2300      	movs	r3, #0
 8002838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283a:	2300      	movs	r3, #0
 800283c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800283e:	f107 0314 	add.w	r3, r7, #20
 8002842:	4619      	mov	r1, r3
 8002844:	4814      	ldr	r0, [pc, #80]	; (8002898 <MX_GPIO_Init+0x1f0>)
 8002846:	f002 fdbf 	bl	80053c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : lcd_D6_Pin lcd_D7_Pin */
  GPIO_InitStruct.Pin = lcd_D6_Pin|lcd_D7_Pin;
 800284a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800284e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002850:	2311      	movs	r3, #17
 8002852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002858:	2300      	movs	r3, #0
 800285a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800285c:	f107 0314 	add.w	r3, r7, #20
 8002860:	4619      	mov	r1, r3
 8002862:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002866:	f002 fdaf 	bl	80053c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800286a:	2200      	movs	r2, #0
 800286c:	2100      	movs	r1, #0
 800286e:	2017      	movs	r0, #23
 8002870:	f002 f933 	bl	8004ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002874:	2017      	movs	r0, #23
 8002876:	f002 f94c 	bl	8004b12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800287a:	2200      	movs	r2, #0
 800287c:	2100      	movs	r1, #0
 800287e:	2028      	movs	r0, #40	; 0x28
 8002880:	f002 f92b 	bl	8004ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002884:	2028      	movs	r0, #40	; 0x28
 8002886:	f002 f944 	bl	8004b12 <HAL_NVIC_EnableIRQ>

}
 800288a:	bf00      	nop
 800288c:	3728      	adds	r7, #40	; 0x28
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40021000 	.word	0x40021000
 8002898:	48000800 	.word	0x48000800
 800289c:	48000400 	.word	0x48000400

080028a0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this interrupt
	if(htim == &htim16){
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a0e      	ldr	r2, [pc, #56]	; (80028e4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d103      	bne.n	80028b8 <HAL_TIM_PeriodElapsedCallback+0x18>
		adc_timer_flag = 1;
 80028b0:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	701a      	strb	r2, [r3, #0]
	} else if (htim == &htim17){
		DisplayState.RefreshFlag = 1;
	} else if (htim == &htim15){
		us_10 = 1;
	}
}
 80028b6:	e00e      	b.n	80028d6 <HAL_TIM_PeriodElapsedCallback+0x36>
	} else if (htim == &htim17){
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a0c      	ldr	r2, [pc, #48]	; (80028ec <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d103      	bne.n	80028c8 <HAL_TIM_PeriodElapsedCallback+0x28>
		DisplayState.RefreshFlag = 1;
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	71da      	strb	r2, [r3, #7]
}
 80028c6:	e006      	b.n	80028d6 <HAL_TIM_PeriodElapsedCallback+0x36>
	} else if (htim == &htim15){
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a0a      	ldr	r2, [pc, #40]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d102      	bne.n	80028d6 <HAL_TIM_PeriodElapsedCallback+0x36>
		us_10 = 1;
 80028d0:	4b09      	ldr	r3, [pc, #36]	; (80028f8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80028d2:	2201      	movs	r2, #1
 80028d4:	701a      	strb	r2, [r3, #0]
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	20000c34 	.word	0x20000c34
 80028e8:	2000003f 	.word	0x2000003f
 80028ec:	20000a84 	.word	0x20000a84
 80028f0:	200009cc 	.word	0x200009cc
 80028f4:	20000a38 	.word	0x20000a38
 80028f8:	20000044 	.word	0x20000044

080028fc <Delay_us_10>:

void Delay_us_10(uint8_t tens)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	71fb      	strb	r3, [r7, #7]
	uint8_t us_10_counter = 0;
 8002906:	2300      	movs	r3, #0
 8002908:	73fb      	strb	r3, [r7, #15]
	while(us_10_counter < tens)
 800290a:	e009      	b.n	8002920 <Delay_us_10+0x24>
	{
		if(us_10){
 800290c:	4b09      	ldr	r3, [pc, #36]	; (8002934 <Delay_us_10+0x38>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d005      	beq.n	8002920 <Delay_us_10+0x24>
			us_10_counter ++;
 8002914:	7bfb      	ldrb	r3, [r7, #15]
 8002916:	3301      	adds	r3, #1
 8002918:	73fb      	strb	r3, [r7, #15]
			us_10 = 0;
 800291a:	4b06      	ldr	r3, [pc, #24]	; (8002934 <Delay_us_10+0x38>)
 800291c:	2200      	movs	r2, #0
 800291e:	701a      	strb	r2, [r3, #0]
	while(us_10_counter < tens)
 8002920:	7bfa      	ldrb	r2, [r7, #15]
 8002922:	79fb      	ldrb	r3, [r7, #7]
 8002924:	429a      	cmp	r2, r3
 8002926:	d3f1      	bcc.n	800290c <Delay_us_10+0x10>
		}
	}
}
 8002928:	bf00      	nop
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	20000044 	.word	0x20000044

08002938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800293c:	bf00      	nop
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
	...

08002948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800294e:	4b0f      	ldr	r3, [pc, #60]	; (800298c <HAL_MspInit+0x44>)
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	4a0e      	ldr	r2, [pc, #56]	; (800298c <HAL_MspInit+0x44>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	6193      	str	r3, [r2, #24]
 800295a:	4b0c      	ldr	r3, [pc, #48]	; (800298c <HAL_MspInit+0x44>)
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	607b      	str	r3, [r7, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002966:	4b09      	ldr	r3, [pc, #36]	; (800298c <HAL_MspInit+0x44>)
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	4a08      	ldr	r2, [pc, #32]	; (800298c <HAL_MspInit+0x44>)
 800296c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002970:	61d3      	str	r3, [r2, #28]
 8002972:	4b06      	ldr	r3, [pc, #24]	; (800298c <HAL_MspInit+0x44>)
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297a:	603b      	str	r3, [r7, #0]
 800297c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800297e:	2007      	movs	r0, #7
 8002980:	f002 f8a0 	bl	8004ac4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002984:	bf00      	nop
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40021000 	.word	0x40021000

08002990 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08a      	sub	sp, #40	; 0x28
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002998:	f107 0314 	add.w	r3, r7, #20
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	60da      	str	r2, [r3, #12]
 80029a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029b0:	d124      	bne.n	80029fc <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80029b2:	4b14      	ldr	r3, [pc, #80]	; (8002a04 <HAL_ADC_MspInit+0x74>)
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	4a13      	ldr	r2, [pc, #76]	; (8002a04 <HAL_ADC_MspInit+0x74>)
 80029b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029bc:	6153      	str	r3, [r2, #20]
 80029be:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <HAL_ADC_MspInit+0x74>)
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ca:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <HAL_ADC_MspInit+0x74>)
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	4a0d      	ldr	r2, [pc, #52]	; (8002a04 <HAL_ADC_MspInit+0x74>)
 80029d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d4:	6153      	str	r3, [r2, #20]
 80029d6:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <HAL_ADC_MspInit+0x74>)
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80029e2:	2301      	movs	r3, #1
 80029e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029e6:	2303      	movs	r3, #3
 80029e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ee:	f107 0314 	add.w	r3, r7, #20
 80029f2:	4619      	mov	r1, r3
 80029f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029f8:	f002 fce6 	bl	80053c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80029fc:	bf00      	nop
 80029fe:	3728      	adds	r7, #40	; 0x28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40021000 	.word	0x40021000

08002a08 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08a      	sub	sp, #40	; 0x28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a10:	f107 0314 	add.w	r3, r7, #20
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	609a      	str	r2, [r3, #8]
 8002a1c:	60da      	str	r2, [r3, #12]
 8002a1e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a2c      	ldr	r2, [pc, #176]	; (8002ad8 <HAL_DAC_MspInit+0xd0>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d152      	bne.n	8002ad0 <HAL_DAC_MspInit+0xc8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002a2a:	4b2c      	ldr	r3, [pc, #176]	; (8002adc <HAL_DAC_MspInit+0xd4>)
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	4a2b      	ldr	r2, [pc, #172]	; (8002adc <HAL_DAC_MspInit+0xd4>)
 8002a30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002a34:	61d3      	str	r3, [r2, #28]
 8002a36:	4b29      	ldr	r3, [pc, #164]	; (8002adc <HAL_DAC_MspInit+0xd4>)
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a3e:	613b      	str	r3, [r7, #16]
 8002a40:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a42:	4b26      	ldr	r3, [pc, #152]	; (8002adc <HAL_DAC_MspInit+0xd4>)
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	4a25      	ldr	r2, [pc, #148]	; (8002adc <HAL_DAC_MspInit+0xd4>)
 8002a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a4c:	6153      	str	r3, [r2, #20]
 8002a4e:	4b23      	ldr	r3, [pc, #140]	; (8002adc <HAL_DAC_MspInit+0xd4>)
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a5a:	2310      	movs	r3, #16
 8002a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a66:	f107 0314 	add.w	r3, r7, #20
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a70:	f002 fcaa 	bl	80053c8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8002a74:	4b1a      	ldr	r3, [pc, #104]	; (8002ae0 <HAL_DAC_MspInit+0xd8>)
 8002a76:	4a1b      	ldr	r2, [pc, #108]	; (8002ae4 <HAL_DAC_MspInit+0xdc>)
 8002a78:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a7a:	4b19      	ldr	r3, [pc, #100]	; (8002ae0 <HAL_DAC_MspInit+0xd8>)
 8002a7c:	2210      	movs	r2, #16
 8002a7e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a80:	4b17      	ldr	r3, [pc, #92]	; (8002ae0 <HAL_DAC_MspInit+0xd8>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002a86:	4b16      	ldr	r3, [pc, #88]	; (8002ae0 <HAL_DAC_MspInit+0xd8>)
 8002a88:	2280      	movs	r2, #128	; 0x80
 8002a8a:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a8c:	4b14      	ldr	r3, [pc, #80]	; (8002ae0 <HAL_DAC_MspInit+0xd8>)
 8002a8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a92:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a94:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <HAL_DAC_MspInit+0xd8>)
 8002a96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a9a:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002a9c:	4b10      	ldr	r3, [pc, #64]	; (8002ae0 <HAL_DAC_MspInit+0xd8>)
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002aa2:	4b0f      	ldr	r3, [pc, #60]	; (8002ae0 <HAL_DAC_MspInit+0xd8>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002aa8:	480d      	ldr	r0, [pc, #52]	; (8002ae0 <HAL_DAC_MspInit+0xd8>)
 8002aaa:	f002 fa62 	bl	8004f72 <HAL_DMA_Init>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 8002ab4:	f7ff ff40 	bl	8002938 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <HAL_DAC_MspInit+0xe0>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a0a      	ldr	r2, [pc, #40]	; (8002ae8 <HAL_DAC_MspInit+0xe0>)
 8002abe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ac2:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a06      	ldr	r2, [pc, #24]	; (8002ae0 <HAL_DAC_MspInit+0xd8>)
 8002ac8:	609a      	str	r2, [r3, #8]
 8002aca:	4a05      	ldr	r2, [pc, #20]	; (8002ae0 <HAL_DAC_MspInit+0xd8>)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002ad0:	bf00      	nop
 8002ad2:	3728      	adds	r7, #40	; 0x28
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40007400 	.word	0x40007400
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	20000ad0 	.word	0x20000ad0
 8002ae4:	40020030 	.word	0x40020030
 8002ae8:	40010000 	.word	0x40010000

08002aec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08a      	sub	sp, #40	; 0x28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af4:	f107 0314 	add.w	r3, r7, #20
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	60da      	str	r2, [r3, #12]
 8002b02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a17      	ldr	r2, [pc, #92]	; (8002b68 <HAL_I2C_MspInit+0x7c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d127      	bne.n	8002b5e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b0e:	4b17      	ldr	r3, [pc, #92]	; (8002b6c <HAL_I2C_MspInit+0x80>)
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	4a16      	ldr	r2, [pc, #88]	; (8002b6c <HAL_I2C_MspInit+0x80>)
 8002b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b18:	6153      	str	r3, [r2, #20]
 8002b1a:	4b14      	ldr	r3, [pc, #80]	; (8002b6c <HAL_I2C_MspInit+0x80>)
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b22:	613b      	str	r3, [r7, #16]
 8002b24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b26:	23c0      	movs	r3, #192	; 0xc0
 8002b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b2a:	2312      	movs	r3, #18
 8002b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b32:	2303      	movs	r3, #3
 8002b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b36:	2304      	movs	r3, #4
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b3a:	f107 0314 	add.w	r3, r7, #20
 8002b3e:	4619      	mov	r1, r3
 8002b40:	480b      	ldr	r0, [pc, #44]	; (8002b70 <HAL_I2C_MspInit+0x84>)
 8002b42:	f002 fc41 	bl	80053c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b46:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <HAL_I2C_MspInit+0x80>)
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	4a08      	ldr	r2, [pc, #32]	; (8002b6c <HAL_I2C_MspInit+0x80>)
 8002b4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b50:	61d3      	str	r3, [r2, #28]
 8002b52:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <HAL_I2C_MspInit+0x80>)
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b5e:	bf00      	nop
 8002b60:	3728      	adds	r7, #40	; 0x28
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40005400 	.word	0x40005400
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	48000400 	.word	0x48000400

08002b74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b84:	d114      	bne.n	8002bb0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b86:	4b33      	ldr	r3, [pc, #204]	; (8002c54 <HAL_TIM_Base_MspInit+0xe0>)
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	4a32      	ldr	r2, [pc, #200]	; (8002c54 <HAL_TIM_Base_MspInit+0xe0>)
 8002b8c:	f043 0301 	orr.w	r3, r3, #1
 8002b90:	61d3      	str	r3, [r2, #28]
 8002b92:	4b30      	ldr	r3, [pc, #192]	; (8002c54 <HAL_TIM_Base_MspInit+0xe0>)
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	617b      	str	r3, [r7, #20]
 8002b9c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	201c      	movs	r0, #28
 8002ba4:	f001 ff99 	bl	8004ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ba8:	201c      	movs	r0, #28
 8002baa:	f001 ffb2 	bl	8004b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002bae:	e04c      	b.n	8002c4a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM15)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a28      	ldr	r2, [pc, #160]	; (8002c58 <HAL_TIM_Base_MspInit+0xe4>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d114      	bne.n	8002be4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002bba:	4b26      	ldr	r3, [pc, #152]	; (8002c54 <HAL_TIM_Base_MspInit+0xe0>)
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	4a25      	ldr	r2, [pc, #148]	; (8002c54 <HAL_TIM_Base_MspInit+0xe0>)
 8002bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc4:	6193      	str	r3, [r2, #24]
 8002bc6:	4b23      	ldr	r3, [pc, #140]	; (8002c54 <HAL_TIM_Base_MspInit+0xe0>)
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bce:	613b      	str	r3, [r7, #16]
 8002bd0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	2018      	movs	r0, #24
 8002bd8:	f001 ff7f 	bl	8004ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002bdc:	2018      	movs	r0, #24
 8002bde:	f001 ff98 	bl	8004b12 <HAL_NVIC_EnableIRQ>
}
 8002be2:	e032      	b.n	8002c4a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM16)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a1c      	ldr	r2, [pc, #112]	; (8002c5c <HAL_TIM_Base_MspInit+0xe8>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d114      	bne.n	8002c18 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002bee:	4b19      	ldr	r3, [pc, #100]	; (8002c54 <HAL_TIM_Base_MspInit+0xe0>)
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	4a18      	ldr	r2, [pc, #96]	; (8002c54 <HAL_TIM_Base_MspInit+0xe0>)
 8002bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bf8:	6193      	str	r3, [r2, #24]
 8002bfa:	4b16      	ldr	r3, [pc, #88]	; (8002c54 <HAL_TIM_Base_MspInit+0xe0>)
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002c06:	2200      	movs	r2, #0
 8002c08:	2100      	movs	r1, #0
 8002c0a:	2019      	movs	r0, #25
 8002c0c:	f001 ff65 	bl	8004ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002c10:	2019      	movs	r0, #25
 8002c12:	f001 ff7e 	bl	8004b12 <HAL_NVIC_EnableIRQ>
}
 8002c16:	e018      	b.n	8002c4a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM17)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a10      	ldr	r2, [pc, #64]	; (8002c60 <HAL_TIM_Base_MspInit+0xec>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d113      	bne.n	8002c4a <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002c22:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <HAL_TIM_Base_MspInit+0xe0>)
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	4a0b      	ldr	r2, [pc, #44]	; (8002c54 <HAL_TIM_Base_MspInit+0xe0>)
 8002c28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c2c:	6193      	str	r3, [r2, #24]
 8002c2e:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <HAL_TIM_Base_MspInit+0xe0>)
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c36:	60bb      	str	r3, [r7, #8]
 8002c38:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	201a      	movs	r0, #26
 8002c40:	f001 ff4b 	bl	8004ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002c44:	201a      	movs	r0, #26
 8002c46:	f001 ff64 	bl	8004b12 <HAL_NVIC_EnableIRQ>
}
 8002c4a:	bf00      	nop
 8002c4c:	3718      	adds	r7, #24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40021000 	.word	0x40021000
 8002c58:	40014000 	.word	0x40014000
 8002c5c:	40014400 	.word	0x40014400
 8002c60:	40014800 	.word	0x40014800

08002c64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08a      	sub	sp, #40	; 0x28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c6c:	f107 0314 	add.w	r3, r7, #20
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	605a      	str	r2, [r3, #4]
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	60da      	str	r2, [r3, #12]
 8002c7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a1b      	ldr	r2, [pc, #108]	; (8002cf0 <HAL_UART_MspInit+0x8c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d130      	bne.n	8002ce8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c86:	4b1b      	ldr	r3, [pc, #108]	; (8002cf4 <HAL_UART_MspInit+0x90>)
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	4a1a      	ldr	r2, [pc, #104]	; (8002cf4 <HAL_UART_MspInit+0x90>)
 8002c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c90:	61d3      	str	r3, [r2, #28]
 8002c92:	4b18      	ldr	r3, [pc, #96]	; (8002cf4 <HAL_UART_MspInit+0x90>)
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	613b      	str	r3, [r7, #16]
 8002c9c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c9e:	4b15      	ldr	r3, [pc, #84]	; (8002cf4 <HAL_UART_MspInit+0x90>)
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	4a14      	ldr	r2, [pc, #80]	; (8002cf4 <HAL_UART_MspInit+0x90>)
 8002ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ca8:	6153      	str	r3, [r2, #20]
 8002caa:	4b12      	ldr	r3, [pc, #72]	; (8002cf4 <HAL_UART_MspInit+0x90>)
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002cb6:	230c      	movs	r3, #12
 8002cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002cc6:	2307      	movs	r3, #7
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cca:	f107 0314 	add.w	r3, r7, #20
 8002cce:	4619      	mov	r1, r3
 8002cd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cd4:	f002 fb78 	bl	80053c8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2100      	movs	r1, #0
 8002cdc:	2026      	movs	r0, #38	; 0x26
 8002cde:	f001 fefc 	bl	8004ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002ce2:	2026      	movs	r0, #38	; 0x26
 8002ce4:	f001 ff15 	bl	8004b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ce8:	bf00      	nop
 8002cea:	3728      	adds	r7, #40	; 0x28
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40004400 	.word	0x40004400
 8002cf4:	40021000 	.word	0x40021000

08002cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002cfc:	bf00      	nop
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d06:	b480      	push	{r7}
 8002d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d0a:	e7fe      	b.n	8002d0a <HardFault_Handler+0x4>

08002d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d10:	e7fe      	b.n	8002d10 <MemManage_Handler+0x4>

08002d12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d12:	b480      	push	{r7}
 8002d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d16:	e7fe      	b.n	8002d16 <BusFault_Handler+0x4>

08002d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d1c:	e7fe      	b.n	8002d1c <UsageFault_Handler+0x4>

08002d1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d22:	bf00      	nop
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d30:	bf00      	nop
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d3e:	bf00      	nop
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d4c:	f000 fbf6 	bl	800353c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d50:	bf00      	nop
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002d58:	4802      	ldr	r0, [pc, #8]	; (8002d64 <DMA1_Channel3_IRQHandler+0x10>)
 8002d5a:	f002 fa27 	bl	80051ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002d5e:	bf00      	nop
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	20000ad0 	.word	0x20000ad0

08002d68 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002d6c:	2040      	movs	r0, #64	; 0x40
 8002d6e:	f002 fce5 	bl	800573c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002d72:	2080      	movs	r0, #128	; 0x80
 8002d74:	f002 fce2 	bl	800573c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002d78:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002d7c:	f002 fcde 	bl	800573c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002d80:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002d84:	f002 fcda 	bl	800573c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002d88:	bf00      	nop
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002d90:	4802      	ldr	r0, [pc, #8]	; (8002d9c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8002d92:	f004 fe87 	bl	8007aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002d96:	bf00      	nop
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20000a38 	.word	0x20000a38

08002da0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002da4:	4802      	ldr	r0, [pc, #8]	; (8002db0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002da6:	f004 fe7d 	bl	8007aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20000c34 	.word	0x20000c34

08002db4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002db8:	4802      	ldr	r0, [pc, #8]	; (8002dc4 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8002dba:	f004 fe73 	bl	8007aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	20000a84 	.word	0x20000a84

08002dc8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002dcc:	4802      	ldr	r0, [pc, #8]	; (8002dd8 <TIM2_IRQHandler+0x10>)
 8002dce:	f004 fe69 	bl	8007aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002dd2:	bf00      	nop
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	20000b64 	.word	0x20000b64

08002ddc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002de0:	4802      	ldr	r0, [pc, #8]	; (8002dec <USART2_IRQHandler+0x10>)
 8002de2:	f005 fb77 	bl	80084d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002de6:	bf00      	nop
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000bb0 	.word	0x20000bb0

08002df0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002df4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002df8:	f002 fca0 	bl	800573c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002dfc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002e00:	f002 fc9c 	bl	800573c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e04:	bf00      	nop
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e0c:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <SystemInit+0x20>)
 8002e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e12:	4a05      	ldr	r2, [pc, #20]	; (8002e28 <SystemInit+0x20>)
 8002e14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e1c:	bf00      	nop
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	e000ed00 	.word	0xe000ed00

08002e2c <UART_Interpret_Rx_Message>:
extern UART_HandleTypeDef huart2;

UartStructType UartState;

void UART_Interpret_Rx_Message()
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
	if(UartState.rx_bytes_length > 7)
 8002e30:	4b2d      	ldr	r3, [pc, #180]	; (8002ee8 <UART_Interpret_Rx_Message+0xbc>)
 8002e32:	7b1b      	ldrb	r3, [r3, #12]
 8002e34:	2b07      	cmp	r3, #7
 8002e36:	d955      	bls.n	8002ee4 <UART_Interpret_Rx_Message+0xb8>
	{
		if(UartState.rx_bytes[2] == '*')
 8002e38:	4b2b      	ldr	r3, [pc, #172]	; (8002ee8 <UART_Interpret_Rx_Message+0xbc>)
 8002e3a:	78db      	ldrb	r3, [r3, #3]
 8002e3c:	2b2a      	cmp	r3, #42	; 0x2a
 8002e3e:	d12c      	bne.n	8002e9a <UART_Interpret_Rx_Message+0x6e>
		{
			// Requests
			switch(UartState.rx_bytes[4])
 8002e40:	4b29      	ldr	r3, [pc, #164]	; (8002ee8 <UART_Interpret_Rx_Message+0xbc>)
 8002e42:	795b      	ldrb	r3, [r3, #5]
 8002e44:	2b6d      	cmp	r3, #109	; 0x6d
 8002e46:	d002      	beq.n	8002e4e <UART_Interpret_Rx_Message+0x22>
 8002e48:	2b73      	cmp	r3, #115	; 0x73
 8002e4a:	d006      	beq.n	8002e5a <UART_Interpret_Rx_Message+0x2e>
					UART_Request_Status();
					LCD_changeDisplayMode(Measurement);
					break;
				default:
					// Problems
					break;
 8002e4c:	e04a      	b.n	8002ee4 <UART_Interpret_Rx_Message+0xb8>
					UART_Request_Measurement(UartState.rx_bytes[6]);
 8002e4e:	4b26      	ldr	r3, [pc, #152]	; (8002ee8 <UART_Interpret_Rx_Message+0xbc>)
 8002e50:	79db      	ldrb	r3, [r3, #7]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 f870 	bl	8002f38 <UART_Request_Measurement>
					break;
 8002e58:	e044      	b.n	8002ee4 <UART_Interpret_Rx_Message+0xb8>
					if(UartState.rx_bytes[6] == '1'){
 8002e5a:	4b23      	ldr	r3, [pc, #140]	; (8002ee8 <UART_Interpret_Rx_Message+0xbc>)
 8002e5c:	79db      	ldrb	r3, [r3, #7]
 8002e5e:	2b31      	cmp	r3, #49	; 0x31
 8002e60:	d10a      	bne.n	8002e78 <UART_Interpret_Rx_Message+0x4c>
						if(!OutputState.On) DAC_Start();
 8002e62:	4b22      	ldr	r3, [pc, #136]	; (8002eec <UART_Interpret_Rx_Message+0xc0>)
 8002e64:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8002e68:	f083 0301 	eor.w	r3, r3, #1
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00d      	beq.n	8002e8e <UART_Interpret_Rx_Message+0x62>
 8002e72:	f7fd fffd 	bl	8000e70 <DAC_Start>
 8002e76:	e00a      	b.n	8002e8e <UART_Interpret_Rx_Message+0x62>
					else if(UartState.rx_bytes[6] == '0'){
 8002e78:	4b1b      	ldr	r3, [pc, #108]	; (8002ee8 <UART_Interpret_Rx_Message+0xbc>)
 8002e7a:	79db      	ldrb	r3, [r3, #7]
 8002e7c:	2b30      	cmp	r3, #48	; 0x30
 8002e7e:	d106      	bne.n	8002e8e <UART_Interpret_Rx_Message+0x62>
						if(OutputState.On) DAC_Stop();
 8002e80:	4b1a      	ldr	r3, [pc, #104]	; (8002eec <UART_Interpret_Rx_Message+0xc0>)
 8002e82:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <UART_Interpret_Rx_Message+0x62>
 8002e8a:	f7fe f817 	bl	8000ebc <DAC_Stop>
					UART_Request_Status();
 8002e8e:	f000 f9a5 	bl	80031dc <UART_Request_Status>
					LCD_changeDisplayMode(Measurement);
 8002e92:	2001      	movs	r0, #1
 8002e94:	f7fe fab8 	bl	8001408 <LCD_changeDisplayMode>
					break;
 8002e98:	e024      	b.n	8002ee4 <UART_Interpret_Rx_Message+0xb8>
			}
		}
		else if(UartState.rx_bytes[2] == '$'){
 8002e9a:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <UART_Interpret_Rx_Message+0xbc>)
 8002e9c:	78db      	ldrb	r3, [r3, #3]
 8002e9e:	2b24      	cmp	r3, #36	; 0x24
 8002ea0:	d108      	bne.n	8002eb4 <UART_Interpret_Rx_Message+0x88>
			// Set Measurement Mode
			UART_Set_Measurement_Mode(UartState.rx_bytes[4], UartState.rx_bytes[5]);
 8002ea2:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <UART_Interpret_Rx_Message+0xbc>)
 8002ea4:	795a      	ldrb	r2, [r3, #5]
 8002ea6:	4b10      	ldr	r3, [pc, #64]	; (8002ee8 <UART_Interpret_Rx_Message+0xbc>)
 8002ea8:	799b      	ldrb	r3, [r3, #6]
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4610      	mov	r0, r2
 8002eae:	f000 f9f3 	bl	8003298 <UART_Set_Measurement_Mode>
		}else if(UartState.rx_bytes[2] == '#'){
			// Display on LCD
			UART_Display_On_LCD(UartState.rx_bytes[4], UartState.rx_bytes[6]);
		}
	}
}
 8002eb2:	e017      	b.n	8002ee4 <UART_Interpret_Rx_Message+0xb8>
		}else if(UartState.rx_bytes[2] == '^'){
 8002eb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <UART_Interpret_Rx_Message+0xbc>)
 8002eb6:	78db      	ldrb	r3, [r3, #3]
 8002eb8:	2b5e      	cmp	r3, #94	; 0x5e
 8002eba:	d106      	bne.n	8002eca <UART_Interpret_Rx_Message+0x9e>
			UART_Set_Output_Parameter(UartState.rx_bytes, UartState.rx_bytes_length);
 8002ebc:	4b0a      	ldr	r3, [pc, #40]	; (8002ee8 <UART_Interpret_Rx_Message+0xbc>)
 8002ebe:	7b1b      	ldrb	r3, [r3, #12]
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	480b      	ldr	r0, [pc, #44]	; (8002ef0 <UART_Interpret_Rx_Message+0xc4>)
 8002ec4:	f000 fa2a 	bl	800331c <UART_Set_Output_Parameter>
}
 8002ec8:	e00c      	b.n	8002ee4 <UART_Interpret_Rx_Message+0xb8>
		}else if(UartState.rx_bytes[2] == '#'){
 8002eca:	4b07      	ldr	r3, [pc, #28]	; (8002ee8 <UART_Interpret_Rx_Message+0xbc>)
 8002ecc:	78db      	ldrb	r3, [r3, #3]
 8002ece:	2b23      	cmp	r3, #35	; 0x23
 8002ed0:	d108      	bne.n	8002ee4 <UART_Interpret_Rx_Message+0xb8>
			UART_Display_On_LCD(UartState.rx_bytes[4], UartState.rx_bytes[6]);
 8002ed2:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <UART_Interpret_Rx_Message+0xbc>)
 8002ed4:	795a      	ldrb	r2, [r3, #5]
 8002ed6:	4b04      	ldr	r3, [pc, #16]	; (8002ee8 <UART_Interpret_Rx_Message+0xbc>)
 8002ed8:	79db      	ldrb	r3, [r3, #7]
 8002eda:	4619      	mov	r1, r3
 8002edc:	4610      	mov	r0, r2
 8002ede:	f000 f809 	bl	8002ef4 <UART_Display_On_LCD>
}
 8002ee2:	e7ff      	b.n	8002ee4 <UART_Interpret_Rx_Message+0xb8>
 8002ee4:	bf00      	nop
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	20000c80 	.word	0x20000c80
 8002eec:	20000828 	.word	0x20000828
 8002ef0:	20000c81 	.word	0x20000c81

08002ef4 <UART_Display_On_LCD>:

void UART_Display_On_LCD(uint8_t rs, uint8_t byte)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4603      	mov	r3, r0
 8002efc:	460a      	mov	r2, r1
 8002efe:	71fb      	strb	r3, [r7, #7]
 8002f00:	4613      	mov	r3, r2
 8002f02:	71bb      	strb	r3, [r7, #6]
	if(rs == '1'){
 8002f04:	79fb      	ldrb	r3, [r7, #7]
 8002f06:	2b31      	cmp	r3, #49	; 0x31
 8002f08:	d106      	bne.n	8002f18 <UART_Display_On_LCD+0x24>
		// Set print flag; store rs and byte
		DisplayState.PrintFlag = 1;
 8002f0a:	4b0a      	ldr	r3, [pc, #40]	; (8002f34 <UART_Display_On_LCD+0x40>)
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	715a      	strb	r2, [r3, #5]
		DisplayState.PrintByte = byte;
 8002f10:	4a08      	ldr	r2, [pc, #32]	; (8002f34 <UART_Display_On_LCD+0x40>)
 8002f12:	79bb      	ldrb	r3, [r7, #6]
 8002f14:	7193      	strb	r3, [r2, #6]
	}else if(rs == '0'){
		// Instruction
		LCD_Write_Instruction(byte);
		Delay_us_10(200); // 2ms
	}
}
 8002f16:	e009      	b.n	8002f2c <UART_Display_On_LCD+0x38>
	}else if(rs == '0'){
 8002f18:	79fb      	ldrb	r3, [r7, #7]
 8002f1a:	2b30      	cmp	r3, #48	; 0x30
 8002f1c:	d106      	bne.n	8002f2c <UART_Display_On_LCD+0x38>
		LCD_Write_Instruction(byte);
 8002f1e:	79bb      	ldrb	r3, [r7, #6]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fe f8a7 	bl	8001074 <LCD_Write_Instruction>
		Delay_us_10(200); // 2ms
 8002f26:	20c8      	movs	r0, #200	; 0xc8
 8002f28:	f7ff fce8 	bl	80028fc <Delay_us_10>
}
 8002f2c:	bf00      	nop
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	200009cc 	.word	0x200009cc

08002f38 <UART_Request_Measurement>:

void UART_Request_Measurement(uint8_t parameter)
{
 8002f38:	b590      	push	{r4, r7, lr}
 8002f3a:	b087      	sub	sp, #28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	4603      	mov	r3, r0
 8002f40:	71fb      	strb	r3, [r7, #7]
	uint8_t msg[13] = "@,m,x,xxxx,!\n";
 8002f42:	4b9f      	ldr	r3, [pc, #636]	; (80031c0 <UART_Request_Measurement+0x288>)
 8002f44:	f107 0408 	add.w	r4, r7, #8
 8002f48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f4a:	c407      	stmia	r4!, {r0, r1, r2}
 8002f4c:	7023      	strb	r3, [r4, #0]
	switch(parameter){
 8002f4e:	79fb      	ldrb	r3, [r7, #7]
 8002f50:	3b61      	subs	r3, #97	; 0x61
 8002f52:	2b13      	cmp	r3, #19
 8002f54:	f200 8122 	bhi.w	800319c <UART_Request_Measurement+0x264>
 8002f58:	a201      	add	r2, pc, #4	; (adr r2, 8002f60 <UART_Request_Measurement+0x28>)
 8002f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5e:	bf00      	nop
 8002f60:	08002fb1 	.word	0x08002fb1
 8002f64:	0800319d 	.word	0x0800319d
 8002f68:	0800319d 	.word	0x0800319d
 8002f6c:	0800319d 	.word	0x0800319d
 8002f70:	0800319d 	.word	0x0800319d
 8002f74:	080030f9 	.word	0x080030f9
 8002f78:	0800319d 	.word	0x0800319d
 8002f7c:	0800319d 	.word	0x0800319d
 8002f80:	0800319d 	.word	0x0800319d
 8002f84:	0800319d 	.word	0x0800319d
 8002f88:	0800319d 	.word	0x0800319d
 8002f8c:	0800319d 	.word	0x0800319d
 8002f90:	0800319d 	.word	0x0800319d
 8002f94:	0800319d 	.word	0x0800319d
 8002f98:	08003055 	.word	0x08003055
 8002f9c:	0800319d 	.word	0x0800319d
 8002fa0:	0800319d 	.word	0x0800319d
 8002fa4:	0800319d 	.word	0x0800319d
 8002fa8:	0800319d 	.word	0x0800319d
 8002fac:	0800319d 	.word	0x0800319d
		case 't':
			// Type
			break;
		case 'a':
			// Amplitude (peak-to-peak)
			msg[4] = 'a';
 8002fb0:	2361      	movs	r3, #97	; 0x61
 8002fb2:	733b      	strb	r3, [r7, #12]
			msg[6] = ((MeasurementState.Amplitude/1000) % 10) + 48;
 8002fb4:	4b83      	ldr	r3, [pc, #524]	; (80031c4 <UART_Request_Measurement+0x28c>)
 8002fb6:	885b      	ldrh	r3, [r3, #2]
 8002fb8:	4a83      	ldr	r2, [pc, #524]	; (80031c8 <UART_Request_Measurement+0x290>)
 8002fba:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbe:	099b      	lsrs	r3, r3, #6
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	4b82      	ldr	r3, [pc, #520]	; (80031cc <UART_Request_Measurement+0x294>)
 8002fc4:	fba3 1302 	umull	r1, r3, r3, r2
 8002fc8:	08d9      	lsrs	r1, r3, #3
 8002fca:	460b      	mov	r3, r1
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	3330      	adds	r3, #48	; 0x30
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	73bb      	strb	r3, [r7, #14]
			msg[7] = ((MeasurementState.Amplitude/100) % 10) + 48;
 8002fde:	4b79      	ldr	r3, [pc, #484]	; (80031c4 <UART_Request_Measurement+0x28c>)
 8002fe0:	885b      	ldrh	r3, [r3, #2]
 8002fe2:	4a7b      	ldr	r2, [pc, #492]	; (80031d0 <UART_Request_Measurement+0x298>)
 8002fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe8:	095b      	lsrs	r3, r3, #5
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	4b77      	ldr	r3, [pc, #476]	; (80031cc <UART_Request_Measurement+0x294>)
 8002fee:	fba3 1302 	umull	r1, r3, r3, r2
 8002ff2:	08d9      	lsrs	r1, r3, #3
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	b2db      	uxtb	r3, r3
 8003002:	3330      	adds	r3, #48	; 0x30
 8003004:	b2db      	uxtb	r3, r3
 8003006:	73fb      	strb	r3, [r7, #15]
			msg[8] = ((MeasurementState.Amplitude/10) % 10) + 48;
 8003008:	4b6e      	ldr	r3, [pc, #440]	; (80031c4 <UART_Request_Measurement+0x28c>)
 800300a:	885b      	ldrh	r3, [r3, #2]
 800300c:	4a6f      	ldr	r2, [pc, #444]	; (80031cc <UART_Request_Measurement+0x294>)
 800300e:	fba2 2303 	umull	r2, r3, r2, r3
 8003012:	08db      	lsrs	r3, r3, #3
 8003014:	b29a      	uxth	r2, r3
 8003016:	4b6d      	ldr	r3, [pc, #436]	; (80031cc <UART_Request_Measurement+0x294>)
 8003018:	fba3 1302 	umull	r1, r3, r3, r2
 800301c:	08d9      	lsrs	r1, r3, #3
 800301e:	460b      	mov	r3, r1
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	b29b      	uxth	r3, r3
 800302a:	b2db      	uxtb	r3, r3
 800302c:	3330      	adds	r3, #48	; 0x30
 800302e:	b2db      	uxtb	r3, r3
 8003030:	743b      	strb	r3, [r7, #16]
			msg[9] = (MeasurementState.Amplitude % 10) + 48;
 8003032:	4b64      	ldr	r3, [pc, #400]	; (80031c4 <UART_Request_Measurement+0x28c>)
 8003034:	885a      	ldrh	r2, [r3, #2]
 8003036:	4b65      	ldr	r3, [pc, #404]	; (80031cc <UART_Request_Measurement+0x294>)
 8003038:	fba3 1302 	umull	r1, r3, r3, r2
 800303c:	08d9      	lsrs	r1, r3, #3
 800303e:	460b      	mov	r3, r1
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	b29b      	uxth	r3, r3
 800304a:	b2db      	uxtb	r3, r3
 800304c:	3330      	adds	r3, #48	; 0x30
 800304e:	b2db      	uxtb	r3, r3
 8003050:	747b      	strb	r3, [r7, #17]
			break;
 8003052:	e0a4      	b.n	800319e <UART_Request_Measurement+0x266>
		case 'o':
			// Offset
			msg[4] = 'o';
 8003054:	236f      	movs	r3, #111	; 0x6f
 8003056:	733b      	strb	r3, [r7, #12]
			msg[6] = ((MeasurementState.Offset/1000) % 10) + 48;
 8003058:	4b5a      	ldr	r3, [pc, #360]	; (80031c4 <UART_Request_Measurement+0x28c>)
 800305a:	891b      	ldrh	r3, [r3, #8]
 800305c:	4a5a      	ldr	r2, [pc, #360]	; (80031c8 <UART_Request_Measurement+0x290>)
 800305e:	fba2 2303 	umull	r2, r3, r2, r3
 8003062:	099b      	lsrs	r3, r3, #6
 8003064:	b29a      	uxth	r2, r3
 8003066:	4b59      	ldr	r3, [pc, #356]	; (80031cc <UART_Request_Measurement+0x294>)
 8003068:	fba3 1302 	umull	r1, r3, r3, r2
 800306c:	08d9      	lsrs	r1, r3, #3
 800306e:	460b      	mov	r3, r1
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	440b      	add	r3, r1
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	b29b      	uxth	r3, r3
 800307a:	b2db      	uxtb	r3, r3
 800307c:	3330      	adds	r3, #48	; 0x30
 800307e:	b2db      	uxtb	r3, r3
 8003080:	73bb      	strb	r3, [r7, #14]
			msg[7] = ((MeasurementState.Offset/100) % 10) + 48;
 8003082:	4b50      	ldr	r3, [pc, #320]	; (80031c4 <UART_Request_Measurement+0x28c>)
 8003084:	891b      	ldrh	r3, [r3, #8]
 8003086:	4a52      	ldr	r2, [pc, #328]	; (80031d0 <UART_Request_Measurement+0x298>)
 8003088:	fba2 2303 	umull	r2, r3, r2, r3
 800308c:	095b      	lsrs	r3, r3, #5
 800308e:	b29a      	uxth	r2, r3
 8003090:	4b4e      	ldr	r3, [pc, #312]	; (80031cc <UART_Request_Measurement+0x294>)
 8003092:	fba3 1302 	umull	r1, r3, r3, r2
 8003096:	08d9      	lsrs	r1, r3, #3
 8003098:	460b      	mov	r3, r1
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	3330      	adds	r3, #48	; 0x30
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	73fb      	strb	r3, [r7, #15]
			msg[8] = ((MeasurementState.Offset/10) % 10) + 48;
 80030ac:	4b45      	ldr	r3, [pc, #276]	; (80031c4 <UART_Request_Measurement+0x28c>)
 80030ae:	891b      	ldrh	r3, [r3, #8]
 80030b0:	4a46      	ldr	r2, [pc, #280]	; (80031cc <UART_Request_Measurement+0x294>)
 80030b2:	fba2 2303 	umull	r2, r3, r2, r3
 80030b6:	08db      	lsrs	r3, r3, #3
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	4b44      	ldr	r3, [pc, #272]	; (80031cc <UART_Request_Measurement+0x294>)
 80030bc:	fba3 1302 	umull	r1, r3, r3, r2
 80030c0:	08d9      	lsrs	r1, r3, #3
 80030c2:	460b      	mov	r3, r1
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	440b      	add	r3, r1
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	3330      	adds	r3, #48	; 0x30
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	743b      	strb	r3, [r7, #16]
			msg[9] = (MeasurementState.Offset % 10) + 48;
 80030d6:	4b3b      	ldr	r3, [pc, #236]	; (80031c4 <UART_Request_Measurement+0x28c>)
 80030d8:	891a      	ldrh	r2, [r3, #8]
 80030da:	4b3c      	ldr	r3, [pc, #240]	; (80031cc <UART_Request_Measurement+0x294>)
 80030dc:	fba3 1302 	umull	r1, r3, r3, r2
 80030e0:	08d9      	lsrs	r1, r3, #3
 80030e2:	460b      	mov	r3, r1
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	3330      	adds	r3, #48	; 0x30
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	747b      	strb	r3, [r7, #17]
			break;
 80030f6:	e052      	b.n	800319e <UART_Request_Measurement+0x266>
		case 'f':
			// Frequency
			msg[4] = 'f';
 80030f8:	2366      	movs	r3, #102	; 0x66
 80030fa:	733b      	strb	r3, [r7, #12]
			msg[6] = ((MeasurementState.Frequency/1000) % 10) + 48;
 80030fc:	4b31      	ldr	r3, [pc, #196]	; (80031c4 <UART_Request_Measurement+0x28c>)
 80030fe:	889b      	ldrh	r3, [r3, #4]
 8003100:	4a31      	ldr	r2, [pc, #196]	; (80031c8 <UART_Request_Measurement+0x290>)
 8003102:	fba2 2303 	umull	r2, r3, r2, r3
 8003106:	099b      	lsrs	r3, r3, #6
 8003108:	b29a      	uxth	r2, r3
 800310a:	4b30      	ldr	r3, [pc, #192]	; (80031cc <UART_Request_Measurement+0x294>)
 800310c:	fba3 1302 	umull	r1, r3, r3, r2
 8003110:	08d9      	lsrs	r1, r3, #3
 8003112:	460b      	mov	r3, r1
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	b29b      	uxth	r3, r3
 800311e:	b2db      	uxtb	r3, r3
 8003120:	3330      	adds	r3, #48	; 0x30
 8003122:	b2db      	uxtb	r3, r3
 8003124:	73bb      	strb	r3, [r7, #14]
			msg[7] = ((MeasurementState.Frequency/100) % 10) + 48;
 8003126:	4b27      	ldr	r3, [pc, #156]	; (80031c4 <UART_Request_Measurement+0x28c>)
 8003128:	889b      	ldrh	r3, [r3, #4]
 800312a:	4a29      	ldr	r2, [pc, #164]	; (80031d0 <UART_Request_Measurement+0x298>)
 800312c:	fba2 2303 	umull	r2, r3, r2, r3
 8003130:	095b      	lsrs	r3, r3, #5
 8003132:	b29a      	uxth	r2, r3
 8003134:	4b25      	ldr	r3, [pc, #148]	; (80031cc <UART_Request_Measurement+0x294>)
 8003136:	fba3 1302 	umull	r1, r3, r3, r2
 800313a:	08d9      	lsrs	r1, r3, #3
 800313c:	460b      	mov	r3, r1
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	b29b      	uxth	r3, r3
 8003148:	b2db      	uxtb	r3, r3
 800314a:	3330      	adds	r3, #48	; 0x30
 800314c:	b2db      	uxtb	r3, r3
 800314e:	73fb      	strb	r3, [r7, #15]
			msg[8] = ((MeasurementState.Frequency/10) % 10) + 48;
 8003150:	4b1c      	ldr	r3, [pc, #112]	; (80031c4 <UART_Request_Measurement+0x28c>)
 8003152:	889b      	ldrh	r3, [r3, #4]
 8003154:	4a1d      	ldr	r2, [pc, #116]	; (80031cc <UART_Request_Measurement+0x294>)
 8003156:	fba2 2303 	umull	r2, r3, r2, r3
 800315a:	08db      	lsrs	r3, r3, #3
 800315c:	b29a      	uxth	r2, r3
 800315e:	4b1b      	ldr	r3, [pc, #108]	; (80031cc <UART_Request_Measurement+0x294>)
 8003160:	fba3 1302 	umull	r1, r3, r3, r2
 8003164:	08d9      	lsrs	r1, r3, #3
 8003166:	460b      	mov	r3, r1
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	440b      	add	r3, r1
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	b29b      	uxth	r3, r3
 8003172:	b2db      	uxtb	r3, r3
 8003174:	3330      	adds	r3, #48	; 0x30
 8003176:	b2db      	uxtb	r3, r3
 8003178:	743b      	strb	r3, [r7, #16]
			msg[9] = (MeasurementState.Frequency % 10) + 48;
 800317a:	4b12      	ldr	r3, [pc, #72]	; (80031c4 <UART_Request_Measurement+0x28c>)
 800317c:	889a      	ldrh	r2, [r3, #4]
 800317e:	4b13      	ldr	r3, [pc, #76]	; (80031cc <UART_Request_Measurement+0x294>)
 8003180:	fba3 1302 	umull	r1, r3, r3, r2
 8003184:	08d9      	lsrs	r1, r3, #3
 8003186:	460b      	mov	r3, r1
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	440b      	add	r3, r1
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	b29b      	uxth	r3, r3
 8003192:	b2db      	uxtb	r3, r3
 8003194:	3330      	adds	r3, #48	; 0x30
 8003196:	b2db      	uxtb	r3, r3
 8003198:	747b      	strb	r3, [r7, #17]
			break;
 800319a:	e000      	b.n	800319e <UART_Request_Measurement+0x266>
		case 'c':
			// Temperature
			break;
		default:
			// Problems
			break;
 800319c:	bf00      	nop
	}
	HAL_UART_Transmit(&huart2, msg, 13, 10);
 800319e:	f107 0108 	add.w	r1, r7, #8
 80031a2:	230a      	movs	r3, #10
 80031a4:	220d      	movs	r2, #13
 80031a6:	480b      	ldr	r0, [pc, #44]	; (80031d4 <UART_Request_Measurement+0x29c>)
 80031a8:	f005 f8b2 	bl	8008310 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, UartState.rx_byte, 1);
 80031ac:	2201      	movs	r2, #1
 80031ae:	490a      	ldr	r1, [pc, #40]	; (80031d8 <UART_Request_Measurement+0x2a0>)
 80031b0:	4808      	ldr	r0, [pc, #32]	; (80031d4 <UART_Request_Measurement+0x29c>)
 80031b2:	f005 f941 	bl	8008438 <HAL_UART_Receive_IT>
}
 80031b6:	bf00      	nop
 80031b8:	371c      	adds	r7, #28
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd90      	pop	{r4, r7, pc}
 80031be:	bf00      	nop
 80031c0:	0800a894 	.word	0x0800a894
 80031c4:	2000081c 	.word	0x2000081c
 80031c8:	10624dd3 	.word	0x10624dd3
 80031cc:	cccccccd 	.word	0xcccccccd
 80031d0:	51eb851f 	.word	0x51eb851f
 80031d4:	20000bb0 	.word	0x20000bb0
 80031d8:	20000c80 	.word	0x20000c80

080031dc <UART_Request_Status>:

void UART_Request_Status()
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
	uint8_t msg[11] = "@,xx,x,x,!\n";
 80031e2:	4a28      	ldr	r2, [pc, #160]	; (8003284 <UART_Request_Status+0xa8>)
 80031e4:	1d3b      	adds	r3, r7, #4
 80031e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80031e8:	c303      	stmia	r3!, {r0, r1}
 80031ea:	801a      	strh	r2, [r3, #0]
 80031ec:	3302      	adds	r3, #2
 80031ee:	0c12      	lsrs	r2, r2, #16
 80031f0:	701a      	strb	r2, [r3, #0]
	switch(MeasurementState.Mode){
 80031f2:	4b25      	ldr	r3, [pc, #148]	; (8003288 <UART_Request_Status+0xac>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d825      	bhi.n	8003246 <UART_Request_Status+0x6a>
 80031fa:	a201      	add	r2, pc, #4	; (adr r2, 8003200 <UART_Request_Status+0x24>)
 80031fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003200:	08003215 	.word	0x08003215
 8003204:	08003229 	.word	0x08003229
 8003208:	0800321f 	.word	0x0800321f
 800320c:	08003233 	.word	0x08003233
 8003210:	0800323d 	.word	0x0800323d
		case DV:
			// DV
			msg[2] = 'D';
 8003214:	2344      	movs	r3, #68	; 0x44
 8003216:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'V';
 8003218:	2356      	movs	r3, #86	; 0x56
 800321a:	71fb      	strb	r3, [r7, #7]
			break;
 800321c:	e014      	b.n	8003248 <UART_Request_Status+0x6c>
		case AV:
			// AV
			msg[2] = 'A';
 800321e:	2341      	movs	r3, #65	; 0x41
 8003220:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'V';
 8003222:	2356      	movs	r3, #86	; 0x56
 8003224:	71fb      	strb	r3, [r7, #7]
			break;
 8003226:	e00f      	b.n	8003248 <UART_Request_Status+0x6c>
		case DI:
			// DI
			msg[2] = 'D';
 8003228:	2344      	movs	r3, #68	; 0x44
 800322a:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'I';
 800322c:	2349      	movs	r3, #73	; 0x49
 800322e:	71fb      	strb	r3, [r7, #7]
			break;
 8003230:	e00a      	b.n	8003248 <UART_Request_Status+0x6c>
		case AI:
			// AI
			msg[2] = 'A';
 8003232:	2341      	movs	r3, #65	; 0x41
 8003234:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'I';
 8003236:	2349      	movs	r3, #73	; 0x49
 8003238:	71fb      	strb	r3, [r7, #7]
			break;
 800323a:	e005      	b.n	8003248 <UART_Request_Status+0x6c>
		case TC:
			// TC
			msg[2] = 'T';
 800323c:	2354      	movs	r3, #84	; 0x54
 800323e:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'C';
 8003240:	2343      	movs	r3, #67	; 0x43
 8003242:	71fb      	strb	r3, [r7, #7]
			break;
 8003244:	e000      	b.n	8003248 <UART_Request_Status+0x6c>
		default:
			// Problems
			break;
 8003246:	bf00      	nop
	}
	msg[5] = OutputState.Mode;
 8003248:	4b10      	ldr	r3, [pc, #64]	; (800328c <UART_Request_Status+0xb0>)
 800324a:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 800324e:	727b      	strb	r3, [r7, #9]
	if(OutputState.On){
 8003250:	4b0e      	ldr	r3, [pc, #56]	; (800328c <UART_Request_Status+0xb0>)
 8003252:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8003256:	2b00      	cmp	r3, #0
 8003258:	d002      	beq.n	8003260 <UART_Request_Status+0x84>
		msg[7] = '1';
 800325a:	2331      	movs	r3, #49	; 0x31
 800325c:	72fb      	strb	r3, [r7, #11]
 800325e:	e001      	b.n	8003264 <UART_Request_Status+0x88>
	} else {
		msg[7] = '0';
 8003260:	2330      	movs	r3, #48	; 0x30
 8003262:	72fb      	strb	r3, [r7, #11]
	}
	HAL_UART_Transmit(&huart2, msg, 11, 10);
 8003264:	1d39      	adds	r1, r7, #4
 8003266:	230a      	movs	r3, #10
 8003268:	220b      	movs	r2, #11
 800326a:	4809      	ldr	r0, [pc, #36]	; (8003290 <UART_Request_Status+0xb4>)
 800326c:	f005 f850 	bl	8008310 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, UartState.rx_byte, 1);
 8003270:	2201      	movs	r2, #1
 8003272:	4908      	ldr	r1, [pc, #32]	; (8003294 <UART_Request_Status+0xb8>)
 8003274:	4806      	ldr	r0, [pc, #24]	; (8003290 <UART_Request_Status+0xb4>)
 8003276:	f005 f8df 	bl	8008438 <HAL_UART_Receive_IT>

}
 800327a:	bf00      	nop
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	0800a8a4 	.word	0x0800a8a4
 8003288:	2000081c 	.word	0x2000081c
 800328c:	20000828 	.word	0x20000828
 8003290:	20000bb0 	.word	0x20000bb0
 8003294:	20000c80 	.word	0x20000c80

08003298 <UART_Set_Measurement_Mode>:

void UART_Set_Measurement_Mode(uint8_t key1, uint8_t key2){
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	4603      	mov	r3, r0
 80032a0:	460a      	mov	r2, r1
 80032a2:	71fb      	strb	r3, [r7, #7]
 80032a4:	4613      	mov	r3, r2
 80032a6:	71bb      	strb	r3, [r7, #6]
	if(key1 == 'D' && key2 == 'V'){
 80032a8:	79fb      	ldrb	r3, [r7, #7]
 80032aa:	2b44      	cmp	r3, #68	; 0x44
 80032ac:	d106      	bne.n	80032bc <UART_Set_Measurement_Mode+0x24>
 80032ae:	79bb      	ldrb	r3, [r7, #6]
 80032b0:	2b56      	cmp	r3, #86	; 0x56
 80032b2:	d103      	bne.n	80032bc <UART_Set_Measurement_Mode+0x24>
		// DC Voltage
		MeasurementState.Mode = DV;
 80032b4:	4b18      	ldr	r3, [pc, #96]	; (8003318 <UART_Set_Measurement_Mode+0x80>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	701a      	strb	r2, [r3, #0]
 80032ba:	e026      	b.n	800330a <UART_Set_Measurement_Mode+0x72>
	} else if (key1 == 'A' && key2 == 'V'){
 80032bc:	79fb      	ldrb	r3, [r7, #7]
 80032be:	2b41      	cmp	r3, #65	; 0x41
 80032c0:	d106      	bne.n	80032d0 <UART_Set_Measurement_Mode+0x38>
 80032c2:	79bb      	ldrb	r3, [r7, #6]
 80032c4:	2b56      	cmp	r3, #86	; 0x56
 80032c6:	d103      	bne.n	80032d0 <UART_Set_Measurement_Mode+0x38>
		// AC Voltage
		MeasurementState.Mode = AV;
 80032c8:	4b13      	ldr	r3, [pc, #76]	; (8003318 <UART_Set_Measurement_Mode+0x80>)
 80032ca:	2202      	movs	r2, #2
 80032cc:	701a      	strb	r2, [r3, #0]
 80032ce:	e01c      	b.n	800330a <UART_Set_Measurement_Mode+0x72>
	} else if (key1 == 'D' && key2 == 'I'){
 80032d0:	79fb      	ldrb	r3, [r7, #7]
 80032d2:	2b44      	cmp	r3, #68	; 0x44
 80032d4:	d106      	bne.n	80032e4 <UART_Set_Measurement_Mode+0x4c>
 80032d6:	79bb      	ldrb	r3, [r7, #6]
 80032d8:	2b49      	cmp	r3, #73	; 0x49
 80032da:	d103      	bne.n	80032e4 <UART_Set_Measurement_Mode+0x4c>
		// DC Current
		MeasurementState.Mode = DI;
 80032dc:	4b0e      	ldr	r3, [pc, #56]	; (8003318 <UART_Set_Measurement_Mode+0x80>)
 80032de:	2201      	movs	r2, #1
 80032e0:	701a      	strb	r2, [r3, #0]
 80032e2:	e012      	b.n	800330a <UART_Set_Measurement_Mode+0x72>
	} else if (key1 == 'A' && key2 == 'I'){
 80032e4:	79fb      	ldrb	r3, [r7, #7]
 80032e6:	2b41      	cmp	r3, #65	; 0x41
 80032e8:	d106      	bne.n	80032f8 <UART_Set_Measurement_Mode+0x60>
 80032ea:	79bb      	ldrb	r3, [r7, #6]
 80032ec:	2b49      	cmp	r3, #73	; 0x49
 80032ee:	d103      	bne.n	80032f8 <UART_Set_Measurement_Mode+0x60>
		// AC Current
		MeasurementState.Mode = AI;
 80032f0:	4b09      	ldr	r3, [pc, #36]	; (8003318 <UART_Set_Measurement_Mode+0x80>)
 80032f2:	2203      	movs	r2, #3
 80032f4:	701a      	strb	r2, [r3, #0]
 80032f6:	e008      	b.n	800330a <UART_Set_Measurement_Mode+0x72>
	} else if (key1 == 'T' && key2 == 'C'){
 80032f8:	79fb      	ldrb	r3, [r7, #7]
 80032fa:	2b54      	cmp	r3, #84	; 0x54
 80032fc:	d105      	bne.n	800330a <UART_Set_Measurement_Mode+0x72>
 80032fe:	79bb      	ldrb	r3, [r7, #6]
 8003300:	2b43      	cmp	r3, #67	; 0x43
 8003302:	d102      	bne.n	800330a <UART_Set_Measurement_Mode+0x72>
		// Temperature
		MeasurementState.Mode = TC;
 8003304:	4b04      	ldr	r3, [pc, #16]	; (8003318 <UART_Set_Measurement_Mode+0x80>)
 8003306:	2204      	movs	r2, #4
 8003308:	701a      	strb	r2, [r3, #0]
	}
//	DisplayState.DisplayMeasurementsFlag = true;
	LCD_changeDisplayMode(Measurement);
 800330a:	2001      	movs	r0, #1
 800330c:	f7fe f87c 	bl	8001408 <LCD_changeDisplayMode>
}
 8003310:	bf00      	nop
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	2000081c 	.word	0x2000081c

0800331c <UART_Set_Output_Parameter>:

void UART_Set_Output_Parameter(uint8_t *rx_array, uint8_t length)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	70fb      	strb	r3, [r7, #3]
	uint8_t param = rx_array[4];
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	791b      	ldrb	r3, [r3, #4]
 800332c:	72fb      	strb	r3, [r7, #11]
	uint8_t val0 = rx_array[6];
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	799b      	ldrb	r3, [r3, #6]
 8003332:	73fb      	strb	r3, [r7, #15]
	uint16_t received_value = 0;
 8003334:	2300      	movs	r3, #0
 8003336:	81bb      	strh	r3, [r7, #12]
	if(rx_array[7] != ','){
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3307      	adds	r3, #7
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b2c      	cmp	r3, #44	; 0x2c
 8003340:	d03d      	beq.n	80033be <UART_Set_Output_Parameter+0xa2>
		val0 = rx_array[6] - 48;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	3306      	adds	r3, #6
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	3b30      	subs	r3, #48	; 0x30
 800334a:	73fb      	strb	r3, [r7, #15]
		uint8_t val1 = rx_array[7] - 48;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3307      	adds	r3, #7
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	3b30      	subs	r3, #48	; 0x30
 8003354:	72bb      	strb	r3, [r7, #10]
		uint8_t val2 = rx_array[8] - 48;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3308      	adds	r3, #8
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	3b30      	subs	r3, #48	; 0x30
 800335e:	727b      	strb	r3, [r7, #9]
		uint8_t val3 = rx_array[9] - 48;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3309      	adds	r3, #9
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	3b30      	subs	r3, #48	; 0x30
 8003368:	723b      	strb	r3, [r7, #8]
		received_value += val0*1000;
 800336a:	7bfb      	ldrb	r3, [r7, #15]
 800336c:	b29b      	uxth	r3, r3
 800336e:	461a      	mov	r2, r3
 8003370:	0152      	lsls	r2, r2, #5
 8003372:	1ad2      	subs	r2, r2, r3
 8003374:	0092      	lsls	r2, r2, #2
 8003376:	4413      	add	r3, r2
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	b29a      	uxth	r2, r3
 800337c:	89bb      	ldrh	r3, [r7, #12]
 800337e:	4413      	add	r3, r2
 8003380:	81bb      	strh	r3, [r7, #12]
		received_value += val1*100;
 8003382:	7abb      	ldrb	r3, [r7, #10]
 8003384:	b29b      	uxth	r3, r3
 8003386:	461a      	mov	r2, r3
 8003388:	0092      	lsls	r2, r2, #2
 800338a:	4413      	add	r3, r2
 800338c:	461a      	mov	r2, r3
 800338e:	0091      	lsls	r1, r2, #2
 8003390:	461a      	mov	r2, r3
 8003392:	460b      	mov	r3, r1
 8003394:	4413      	add	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	b29a      	uxth	r2, r3
 800339a:	89bb      	ldrh	r3, [r7, #12]
 800339c:	4413      	add	r3, r2
 800339e:	81bb      	strh	r3, [r7, #12]
		received_value += val2*10;
 80033a0:	7a7b      	ldrb	r3, [r7, #9]
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	461a      	mov	r2, r3
 80033a6:	0092      	lsls	r2, r2, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	89bb      	ldrh	r3, [r7, #12]
 80033b0:	4413      	add	r3, r2
 80033b2:	81bb      	strh	r3, [r7, #12]
		received_value += val3;
 80033b4:	7a3b      	ldrb	r3, [r7, #8]
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	89bb      	ldrh	r3, [r7, #12]
 80033ba:	4413      	add	r3, r2
 80033bc:	81bb      	strh	r3, [r7, #12]
	}
	switch(param){
 80033be:	7afb      	ldrb	r3, [r7, #11]
 80033c0:	3b61      	subs	r3, #97	; 0x61
 80033c2:	2b13      	cmp	r3, #19
 80033c4:	d83e      	bhi.n	8003444 <UART_Set_Output_Parameter+0x128>
 80033c6:	a201      	add	r2, pc, #4	; (adr r2, 80033cc <UART_Set_Output_Parameter+0xb0>)
 80033c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033cc:	08003427 	.word	0x08003427
 80033d0:	08003445 	.word	0x08003445
 80033d4:	08003445 	.word	0x08003445
 80033d8:	08003445 	.word	0x08003445
 80033dc:	08003445 	.word	0x08003445
 80033e0:	0800343b 	.word	0x0800343b
 80033e4:	08003445 	.word	0x08003445
 80033e8:	08003445 	.word	0x08003445
 80033ec:	08003445 	.word	0x08003445
 80033f0:	08003445 	.word	0x08003445
 80033f4:	08003445 	.word	0x08003445
 80033f8:	08003445 	.word	0x08003445
 80033fc:	08003445 	.word	0x08003445
 8003400:	08003445 	.word	0x08003445
 8003404:	08003431 	.word	0x08003431
 8003408:	08003445 	.word	0x08003445
 800340c:	08003445 	.word	0x08003445
 8003410:	08003445 	.word	0x08003445
 8003414:	08003445 	.word	0x08003445
 8003418:	0800341d 	.word	0x0800341d
		case 't':
			// Type
			OutputState.Mode = val0;
 800341c:	4a0e      	ldr	r2, [pc, #56]	; (8003458 <UART_Set_Output_Parameter+0x13c>)
 800341e:	7bfb      	ldrb	r3, [r7, #15]
 8003420:	f882 3195 	strb.w	r3, [r2, #405]	; 0x195
			break;
 8003424:	e00f      	b.n	8003446 <UART_Set_Output_Parameter+0x12a>
		case 'a':
			// Amplitude
			OutputState.Amplitude = received_value;
 8003426:	4a0c      	ldr	r2, [pc, #48]	; (8003458 <UART_Set_Output_Parameter+0x13c>)
 8003428:	89bb      	ldrh	r3, [r7, #12]
 800342a:	f8a2 3196 	strh.w	r3, [r2, #406]	; 0x196
			break;
 800342e:	e00a      	b.n	8003446 <UART_Set_Output_Parameter+0x12a>
		case 'o':
			// Offset
			OutputState.Offset = received_value;
 8003430:	4a09      	ldr	r2, [pc, #36]	; (8003458 <UART_Set_Output_Parameter+0x13c>)
 8003432:	89bb      	ldrh	r3, [r7, #12]
 8003434:	f8a2 319c 	strh.w	r3, [r2, #412]	; 0x19c
			break;
 8003438:	e005      	b.n	8003446 <UART_Set_Output_Parameter+0x12a>
		case 'f':
			// Frequency
			OutputState.Frequency = received_value;
 800343a:	4a07      	ldr	r2, [pc, #28]	; (8003458 <UART_Set_Output_Parameter+0x13c>)
 800343c:	89bb      	ldrh	r3, [r7, #12]
 800343e:	f8a2 3198 	strh.w	r3, [r2, #408]	; 0x198
			break;
 8003442:	e000      	b.n	8003446 <UART_Set_Output_Parameter+0x12a>
		case 'c':
			// Temperature
			break;
		default:
			// Problems
			break;
 8003444:	bf00      	nop
	}
	LCD_changeDisplayMode(Measurement);
 8003446:	2001      	movs	r0, #1
 8003448:	f7fd ffde 	bl	8001408 <LCD_changeDisplayMode>
	DAC_Update_Output();
 800344c:	f7fd fd4e 	bl	8000eec <DAC_Update_Output>
}
 8003450:	bf00      	nop
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	20000828 	.word	0x20000828

0800345c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800345c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003494 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003460:	480d      	ldr	r0, [pc, #52]	; (8003498 <LoopForever+0x6>)
  ldr r1, =_edata
 8003462:	490e      	ldr	r1, [pc, #56]	; (800349c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003464:	4a0e      	ldr	r2, [pc, #56]	; (80034a0 <LoopForever+0xe>)
  movs r3, #0
 8003466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003468:	e002      	b.n	8003470 <LoopCopyDataInit>

0800346a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800346a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800346c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800346e:	3304      	adds	r3, #4

08003470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003474:	d3f9      	bcc.n	800346a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003476:	4a0b      	ldr	r2, [pc, #44]	; (80034a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003478:	4c0b      	ldr	r4, [pc, #44]	; (80034a8 <LoopForever+0x16>)
  movs r3, #0
 800347a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800347c:	e001      	b.n	8003482 <LoopFillZerobss>

0800347e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800347e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003480:	3204      	adds	r2, #4

08003482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003484:	d3fb      	bcc.n	800347e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003486:	f7ff fcbf 	bl	8002e08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800348a:	f006 f95d 	bl	8009748 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800348e:	f7fe fc3b 	bl	8001d08 <main>

08003492 <LoopForever>:

LoopForever:
    b LoopForever
 8003492:	e7fe      	b.n	8003492 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003494:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800349c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80034a0:	0800aac8 	.word	0x0800aac8
  ldr r2, =_sbss
 80034a4:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80034a8:	20000c94 	.word	0x20000c94

080034ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80034ac:	e7fe      	b.n	80034ac <ADC1_2_IRQHandler>
	...

080034b0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034b4:	4b08      	ldr	r3, [pc, #32]	; (80034d8 <HAL_Init+0x28>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a07      	ldr	r2, [pc, #28]	; (80034d8 <HAL_Init+0x28>)
 80034ba:	f043 0310 	orr.w	r3, r3, #16
 80034be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034c0:	2003      	movs	r0, #3
 80034c2:	f001 faff 	bl	8004ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034c6:	2000      	movs	r0, #0
 80034c8:	f000 f808 	bl	80034dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034cc:	f7ff fa3c 	bl	8002948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40022000 	.word	0x40022000

080034dc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034e4:	4b12      	ldr	r3, [pc, #72]	; (8003530 <HAL_InitTick+0x54>)
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	4b12      	ldr	r3, [pc, #72]	; (8003534 <HAL_InitTick+0x58>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	4619      	mov	r1, r3
 80034ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80034f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fa:	4618      	mov	r0, r3
 80034fc:	f001 fb17 	bl	8004b2e <HAL_SYSTICK_Config>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e00e      	b.n	8003528 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b0f      	cmp	r3, #15
 800350e:	d80a      	bhi.n	8003526 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003510:	2200      	movs	r2, #0
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	f04f 30ff 	mov.w	r0, #4294967295
 8003518:	f001 fadf 	bl	8004ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800351c:	4a06      	ldr	r2, [pc, #24]	; (8003538 <HAL_InitTick+0x5c>)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003522:	2300      	movs	r3, #0
 8003524:	e000      	b.n	8003528 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
}
 8003528:	4618      	mov	r0, r3
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	20000010 	.word	0x20000010
 8003534:	20000018 	.word	0x20000018
 8003538:	20000014 	.word	0x20000014

0800353c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003540:	4b06      	ldr	r3, [pc, #24]	; (800355c <HAL_IncTick+0x20>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	461a      	mov	r2, r3
 8003546:	4b06      	ldr	r3, [pc, #24]	; (8003560 <HAL_IncTick+0x24>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4413      	add	r3, r2
 800354c:	4a04      	ldr	r2, [pc, #16]	; (8003560 <HAL_IncTick+0x24>)
 800354e:	6013      	str	r3, [r2, #0]
}
 8003550:	bf00      	nop
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	20000018 	.word	0x20000018
 8003560:	20000c90 	.word	0x20000c90

08003564 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  return uwTick;  
 8003568:	4b03      	ldr	r3, [pc, #12]	; (8003578 <HAL_GetTick+0x14>)
 800356a:	681b      	ldr	r3, [r3, #0]
}
 800356c:	4618      	mov	r0, r3
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	20000c90 	.word	0x20000c90

0800357c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003584:	f7ff ffee 	bl	8003564 <HAL_GetTick>
 8003588:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003594:	d005      	beq.n	80035a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003596:	4b09      	ldr	r3, [pc, #36]	; (80035bc <HAL_Delay+0x40>)
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	461a      	mov	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4413      	add	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80035a2:	bf00      	nop
 80035a4:	f7ff ffde 	bl	8003564 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d8f7      	bhi.n	80035a4 <HAL_Delay+0x28>
  {
  }
}
 80035b4:	bf00      	nop
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	20000018 	.word	0x20000018

080035c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b09a      	sub	sp, #104	; 0x68
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035c8:	2300      	movs	r3, #0
 80035ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80035d2:	2300      	movs	r3, #0
 80035d4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e1e3      	b.n	80039a8 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	f003 0310 	and.w	r3, r3, #16
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d176      	bne.n	80036e0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d152      	bne.n	80036a0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f7ff f9bb 	bl	8002990 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d13b      	bne.n	80036a0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f001 f861 	bl	80046f0 <ADC_Disable>
 800362e:	4603      	mov	r3, r0
 8003630:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	f003 0310 	and.w	r3, r3, #16
 800363c:	2b00      	cmp	r3, #0
 800363e:	d12f      	bne.n	80036a0 <HAL_ADC_Init+0xe0>
 8003640:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003644:	2b00      	cmp	r3, #0
 8003646:	d12b      	bne.n	80036a0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003650:	f023 0302 	bic.w	r3, r3, #2
 8003654:	f043 0202 	orr.w	r2, r3, #2
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689a      	ldr	r2, [r3, #8]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800366a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689a      	ldr	r2, [r3, #8]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800367a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800367c:	4b92      	ldr	r3, [pc, #584]	; (80038c8 <HAL_ADC_Init+0x308>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a92      	ldr	r2, [pc, #584]	; (80038cc <HAL_ADC_Init+0x30c>)
 8003682:	fba2 2303 	umull	r2, r3, r2, r3
 8003686:	0c9a      	lsrs	r2, r3, #18
 8003688:	4613      	mov	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003692:	e002      	b.n	800369a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	3b01      	subs	r3, #1
 8003698:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1f9      	bne.n	8003694 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d007      	beq.n	80036be <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80036b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036bc:	d110      	bne.n	80036e0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	f023 0312 	bic.w	r3, r3, #18
 80036c6:	f043 0210 	orr.w	r2, r3, #16
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d2:	f043 0201 	orr.w	r2, r3, #1
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e4:	f003 0310 	and.w	r3, r3, #16
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f040 8150 	bne.w	800398e <HAL_ADC_Init+0x3ce>
 80036ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f040 814b 	bne.w	800398e <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8003702:	2b00      	cmp	r3, #0
 8003704:	f040 8143 	bne.w	800398e <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003710:	f043 0202 	orr.w	r2, r3, #2
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003720:	d004      	beq.n	800372c <HAL_ADC_Init+0x16c>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a6a      	ldr	r2, [pc, #424]	; (80038d0 <HAL_ADC_Init+0x310>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d101      	bne.n	8003730 <HAL_ADC_Init+0x170>
 800372c:	4b69      	ldr	r3, [pc, #420]	; (80038d4 <HAL_ADC_Init+0x314>)
 800372e:	e000      	b.n	8003732 <HAL_ADC_Init+0x172>
 8003730:	4b69      	ldr	r3, [pc, #420]	; (80038d8 <HAL_ADC_Init+0x318>)
 8003732:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800373c:	d102      	bne.n	8003744 <HAL_ADC_Init+0x184>
 800373e:	4b64      	ldr	r3, [pc, #400]	; (80038d0 <HAL_ADC_Init+0x310>)
 8003740:	60fb      	str	r3, [r7, #12]
 8003742:	e01a      	b.n	800377a <HAL_ADC_Init+0x1ba>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a61      	ldr	r2, [pc, #388]	; (80038d0 <HAL_ADC_Init+0x310>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d103      	bne.n	8003756 <HAL_ADC_Init+0x196>
 800374e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	e011      	b.n	800377a <HAL_ADC_Init+0x1ba>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a60      	ldr	r2, [pc, #384]	; (80038dc <HAL_ADC_Init+0x31c>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d102      	bne.n	8003766 <HAL_ADC_Init+0x1a6>
 8003760:	4b5f      	ldr	r3, [pc, #380]	; (80038e0 <HAL_ADC_Init+0x320>)
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	e009      	b.n	800377a <HAL_ADC_Init+0x1ba>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a5d      	ldr	r2, [pc, #372]	; (80038e0 <HAL_ADC_Init+0x320>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d102      	bne.n	8003776 <HAL_ADC_Init+0x1b6>
 8003770:	4b5a      	ldr	r3, [pc, #360]	; (80038dc <HAL_ADC_Init+0x31c>)
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	e001      	b.n	800377a <HAL_ADC_Init+0x1ba>
 8003776:	2300      	movs	r3, #0
 8003778:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 0303 	and.w	r3, r3, #3
 8003784:	2b01      	cmp	r3, #1
 8003786:	d108      	bne.n	800379a <HAL_ADC_Init+0x1da>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b01      	cmp	r3, #1
 8003794:	d101      	bne.n	800379a <HAL_ADC_Init+0x1da>
 8003796:	2301      	movs	r3, #1
 8003798:	e000      	b.n	800379c <HAL_ADC_Init+0x1dc>
 800379a:	2300      	movs	r3, #0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d11c      	bne.n	80037da <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80037a0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d010      	beq.n	80037c8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d107      	bne.n	80037c2 <HAL_ADC_Init+0x202>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d101      	bne.n	80037c2 <HAL_ADC_Init+0x202>
 80037be:	2301      	movs	r3, #1
 80037c0:	e000      	b.n	80037c4 <HAL_ADC_Init+0x204>
 80037c2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d108      	bne.n	80037da <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80037c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	431a      	orrs	r2, r3
 80037d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037d8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	7e5b      	ldrb	r3, [r3, #25]
 80037de:	035b      	lsls	r3, r3, #13
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037e4:	2a01      	cmp	r2, #1
 80037e6:	d002      	beq.n	80037ee <HAL_ADC_Init+0x22e>
 80037e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037ec:	e000      	b.n	80037f0 <HAL_ADC_Init+0x230>
 80037ee:	2200      	movs	r2, #0
 80037f0:	431a      	orrs	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003800:	4313      	orrs	r3, r2
 8003802:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 3020 	ldrb.w	r3, [r3, #32]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d11b      	bne.n	8003846 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	7e5b      	ldrb	r3, [r3, #25]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d109      	bne.n	800382a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	3b01      	subs	r3, #1
 800381c:	045a      	lsls	r2, r3, #17
 800381e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003820:	4313      	orrs	r3, r2
 8003822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003826:	663b      	str	r3, [r7, #96]	; 0x60
 8003828:	e00d      	b.n	8003846 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003832:	f043 0220 	orr.w	r2, r3, #32
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383e:	f043 0201 	orr.w	r2, r3, #1
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384a:	2b01      	cmp	r3, #1
 800384c:	d054      	beq.n	80038f8 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a22      	ldr	r2, [pc, #136]	; (80038dc <HAL_ADC_Init+0x31c>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d004      	beq.n	8003862 <HAL_ADC_Init+0x2a2>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a20      	ldr	r2, [pc, #128]	; (80038e0 <HAL_ADC_Init+0x320>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d140      	bne.n	80038e4 <HAL_ADC_Init+0x324>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003866:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800386a:	d02a      	beq.n	80038c2 <HAL_ADC_Init+0x302>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003870:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003874:	d022      	beq.n	80038bc <HAL_ADC_Init+0x2fc>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800387e:	d01a      	beq.n	80038b6 <HAL_ADC_Init+0x2f6>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003884:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8003888:	d012      	beq.n	80038b0 <HAL_ADC_Init+0x2f0>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388e:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8003892:	d00a      	beq.n	80038aa <HAL_ADC_Init+0x2ea>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003898:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 800389c:	d002      	beq.n	80038a4 <HAL_ADC_Init+0x2e4>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a2:	e023      	b.n	80038ec <HAL_ADC_Init+0x32c>
 80038a4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80038a8:	e020      	b.n	80038ec <HAL_ADC_Init+0x32c>
 80038aa:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80038ae:	e01d      	b.n	80038ec <HAL_ADC_Init+0x32c>
 80038b0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80038b4:	e01a      	b.n	80038ec <HAL_ADC_Init+0x32c>
 80038b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038ba:	e017      	b.n	80038ec <HAL_ADC_Init+0x32c>
 80038bc:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80038c0:	e014      	b.n	80038ec <HAL_ADC_Init+0x32c>
 80038c2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80038c6:	e011      	b.n	80038ec <HAL_ADC_Init+0x32c>
 80038c8:	20000010 	.word	0x20000010
 80038cc:	431bde83 	.word	0x431bde83
 80038d0:	50000100 	.word	0x50000100
 80038d4:	50000300 	.word	0x50000300
 80038d8:	50000700 	.word	0x50000700
 80038dc:	50000400 	.word	0x50000400
 80038e0:	50000500 	.word	0x50000500
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80038f0:	4313      	orrs	r3, r2
 80038f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038f4:	4313      	orrs	r3, r2
 80038f6:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 030c 	and.w	r3, r3, #12
 8003902:	2b00      	cmp	r3, #0
 8003904:	d114      	bne.n	8003930 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003914:	f023 0302 	bic.w	r3, r3, #2
 8003918:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	7e1b      	ldrb	r3, [r3, #24]
 800391e:	039a      	lsls	r2, r3, #14
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	4313      	orrs	r3, r2
 800392a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800392c:	4313      	orrs	r3, r2
 800392e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	4b1e      	ldr	r3, [pc, #120]	; (80039b0 <HAL_ADC_Init+0x3f0>)
 8003938:	4013      	ands	r3, r2
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6812      	ldr	r2, [r2, #0]
 800393e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003940:	430b      	orrs	r3, r1
 8003942:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d10c      	bne.n	8003966 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	f023 010f 	bic.w	r1, r3, #15
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	1e5a      	subs	r2, r3, #1
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	631a      	str	r2, [r3, #48]	; 0x30
 8003964:	e007      	b.n	8003976 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 020f 	bic.w	r2, r2, #15
 8003974:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003980:	f023 0303 	bic.w	r3, r3, #3
 8003984:	f043 0201 	orr.w	r2, r3, #1
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	641a      	str	r2, [r3, #64]	; 0x40
 800398c:	e00a      	b.n	80039a4 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	f023 0312 	bic.w	r3, r3, #18
 8003996:	f043 0210 	orr.w	r2, r3, #16
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800399e:	2301      	movs	r3, #1
 80039a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80039a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3768      	adds	r7, #104	; 0x68
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	fff0c007 	.word	0xfff0c007

080039b4 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039bc:	2300      	movs	r3, #0
 80039be:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 0304 	and.w	r3, r3, #4
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f040 80f9 	bne.w	8003bc2 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d101      	bne.n	80039de <HAL_ADC_Start+0x2a>
 80039da:	2302      	movs	r3, #2
 80039dc:	e0f4      	b.n	8003bc8 <HAL_ADC_Start+0x214>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 fe1e 	bl	8004628 <ADC_Enable>
 80039ec:	4603      	mov	r3, r0
 80039ee:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f040 80e0 	bne.w	8003bb8 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a00:	f023 0301 	bic.w	r3, r3, #1
 8003a04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a14:	d004      	beq.n	8003a20 <HAL_ADC_Start+0x6c>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a6d      	ldr	r2, [pc, #436]	; (8003bd0 <HAL_ADC_Start+0x21c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d106      	bne.n	8003a2e <HAL_ADC_Start+0x7a>
 8003a20:	4b6c      	ldr	r3, [pc, #432]	; (8003bd4 <HAL_ADC_Start+0x220>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f003 031f 	and.w	r3, r3, #31
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d010      	beq.n	8003a4e <HAL_ADC_Start+0x9a>
 8003a2c:	e005      	b.n	8003a3a <HAL_ADC_Start+0x86>
 8003a2e:	4b6a      	ldr	r3, [pc, #424]	; (8003bd8 <HAL_ADC_Start+0x224>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 031f 	and.w	r3, r3, #31
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d009      	beq.n	8003a4e <HAL_ADC_Start+0x9a>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a42:	d004      	beq.n	8003a4e <HAL_ADC_Start+0x9a>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a64      	ldr	r2, [pc, #400]	; (8003bdc <HAL_ADC_Start+0x228>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d115      	bne.n	8003a7a <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d036      	beq.n	8003ad6 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003a70:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003a78:	e02d      	b.n	8003ad6 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a8e:	d004      	beq.n	8003a9a <HAL_ADC_Start+0xe6>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a4e      	ldr	r2, [pc, #312]	; (8003bd0 <HAL_ADC_Start+0x21c>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d10a      	bne.n	8003ab0 <HAL_ADC_Start+0xfc>
 8003a9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	bf14      	ite	ne
 8003aa8:	2301      	movne	r3, #1
 8003aaa:	2300      	moveq	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	e008      	b.n	8003ac2 <HAL_ADC_Start+0x10e>
 8003ab0:	4b4a      	ldr	r3, [pc, #296]	; (8003bdc <HAL_ADC_Start+0x228>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	bf14      	ite	ne
 8003abc:	2301      	movne	r3, #1
 8003abe:	2300      	moveq	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d007      	beq.n	8003ad6 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ace:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ae2:	d106      	bne.n	8003af2 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae8:	f023 0206 	bic.w	r2, r3, #6
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	645a      	str	r2, [r3, #68]	; 0x44
 8003af0:	e002      	b.n	8003af8 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	221c      	movs	r2, #28
 8003b06:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b10:	d004      	beq.n	8003b1c <HAL_ADC_Start+0x168>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a2e      	ldr	r2, [pc, #184]	; (8003bd0 <HAL_ADC_Start+0x21c>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d106      	bne.n	8003b2a <HAL_ADC_Start+0x176>
 8003b1c:	4b2d      	ldr	r3, [pc, #180]	; (8003bd4 <HAL_ADC_Start+0x220>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 031f 	and.w	r3, r3, #31
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d03e      	beq.n	8003ba6 <HAL_ADC_Start+0x1f2>
 8003b28:	e005      	b.n	8003b36 <HAL_ADC_Start+0x182>
 8003b2a:	4b2b      	ldr	r3, [pc, #172]	; (8003bd8 <HAL_ADC_Start+0x224>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 031f 	and.w	r3, r3, #31
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d037      	beq.n	8003ba6 <HAL_ADC_Start+0x1f2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b3e:	d004      	beq.n	8003b4a <HAL_ADC_Start+0x196>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a22      	ldr	r2, [pc, #136]	; (8003bd0 <HAL_ADC_Start+0x21c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d106      	bne.n	8003b58 <HAL_ADC_Start+0x1a4>
 8003b4a:	4b22      	ldr	r3, [pc, #136]	; (8003bd4 <HAL_ADC_Start+0x220>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 031f 	and.w	r3, r3, #31
 8003b52:	2b05      	cmp	r3, #5
 8003b54:	d027      	beq.n	8003ba6 <HAL_ADC_Start+0x1f2>
 8003b56:	e005      	b.n	8003b64 <HAL_ADC_Start+0x1b0>
 8003b58:	4b1f      	ldr	r3, [pc, #124]	; (8003bd8 <HAL_ADC_Start+0x224>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f003 031f 	and.w	r3, r3, #31
 8003b60:	2b05      	cmp	r3, #5
 8003b62:	d020      	beq.n	8003ba6 <HAL_ADC_Start+0x1f2>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b6c:	d004      	beq.n	8003b78 <HAL_ADC_Start+0x1c4>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a17      	ldr	r2, [pc, #92]	; (8003bd0 <HAL_ADC_Start+0x21c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d106      	bne.n	8003b86 <HAL_ADC_Start+0x1d2>
 8003b78:	4b16      	ldr	r3, [pc, #88]	; (8003bd4 <HAL_ADC_Start+0x220>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 031f 	and.w	r3, r3, #31
 8003b80:	2b09      	cmp	r3, #9
 8003b82:	d010      	beq.n	8003ba6 <HAL_ADC_Start+0x1f2>
 8003b84:	e005      	b.n	8003b92 <HAL_ADC_Start+0x1de>
 8003b86:	4b14      	ldr	r3, [pc, #80]	; (8003bd8 <HAL_ADC_Start+0x224>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 031f 	and.w	r3, r3, #31
 8003b8e:	2b09      	cmp	r3, #9
 8003b90:	d009      	beq.n	8003ba6 <HAL_ADC_Start+0x1f2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b9a:	d004      	beq.n	8003ba6 <HAL_ADC_Start+0x1f2>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a0e      	ldr	r2, [pc, #56]	; (8003bdc <HAL_ADC_Start+0x228>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d10f      	bne.n	8003bc6 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f042 0204 	orr.w	r2, r2, #4
 8003bb4:	609a      	str	r2, [r3, #8]
 8003bb6:	e006      	b.n	8003bc6 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003bc0:	e001      	b.n	8003bc6 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	50000100 	.word	0x50000100
 8003bd4:	50000300 	.word	0x50000300
 8003bd8:	50000700 	.word	0x50000700
 8003bdc:	50000400 	.word	0x50000400

08003be0 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003be8:	2300      	movs	r3, #0
 8003bea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d101      	bne.n	8003bfa <HAL_ADC_Stop+0x1a>
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	e023      	b.n	8003c42 <HAL_ADC_Stop+0x62>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003c02:	216c      	movs	r1, #108	; 0x6c
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 fdd9 	bl	80047bc <ADC_ConversionStop>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d111      	bne.n	8003c38 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 fd6b 	bl	80046f0 <ADC_Disable>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d109      	bne.n	8003c38 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c2c:	f023 0301 	bic.w	r3, r3, #1
 8003c30:	f043 0201 	orr.w	r2, r3, #1
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
	...

08003c4c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8003c56:	2300      	movs	r3, #0
 8003c58:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	2b08      	cmp	r3, #8
 8003c60:	d102      	bne.n	8003c68 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8003c62:	2308      	movs	r3, #8
 8003c64:	617b      	str	r3, [r7, #20]
 8003c66:	e03a      	b.n	8003cde <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c70:	d004      	beq.n	8003c7c <HAL_ADC_PollForConversion+0x30>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a72      	ldr	r2, [pc, #456]	; (8003e40 <HAL_ADC_PollForConversion+0x1f4>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d101      	bne.n	8003c80 <HAL_ADC_PollForConversion+0x34>
 8003c7c:	4b71      	ldr	r3, [pc, #452]	; (8003e44 <HAL_ADC_PollForConversion+0x1f8>)
 8003c7e:	e000      	b.n	8003c82 <HAL_ADC_PollForConversion+0x36>
 8003c80:	4b71      	ldr	r3, [pc, #452]	; (8003e48 <HAL_ADC_PollForConversion+0x1fc>)
 8003c82:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f003 031f 	and.w	r3, r3, #31
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d112      	bne.n	8003cb6 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d11d      	bne.n	8003cda <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	f043 0220 	orr.w	r2, r3, #32
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e0bf      	b.n	8003e36 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00b      	beq.n	8003cda <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	f043 0220 	orr.w	r2, r3, #32
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e0ad      	b.n	8003e36 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8003cda:	230c      	movs	r3, #12
 8003cdc:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ce6:	d004      	beq.n	8003cf2 <HAL_ADC_PollForConversion+0xa6>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a54      	ldr	r2, [pc, #336]	; (8003e40 <HAL_ADC_PollForConversion+0x1f4>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d106      	bne.n	8003d00 <HAL_ADC_PollForConversion+0xb4>
 8003cf2:	4b54      	ldr	r3, [pc, #336]	; (8003e44 <HAL_ADC_PollForConversion+0x1f8>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 031f 	and.w	r3, r3, #31
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d010      	beq.n	8003d20 <HAL_ADC_PollForConversion+0xd4>
 8003cfe:	e005      	b.n	8003d0c <HAL_ADC_PollForConversion+0xc0>
 8003d00:	4b51      	ldr	r3, [pc, #324]	; (8003e48 <HAL_ADC_PollForConversion+0x1fc>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f003 031f 	and.w	r3, r3, #31
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d009      	beq.n	8003d20 <HAL_ADC_PollForConversion+0xd4>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d14:	d004      	beq.n	8003d20 <HAL_ADC_PollForConversion+0xd4>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a4c      	ldr	r2, [pc, #304]	; (8003e4c <HAL_ADC_PollForConversion+0x200>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d104      	bne.n	8003d2a <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	613b      	str	r3, [r7, #16]
 8003d28:	e00f      	b.n	8003d4a <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d32:	d004      	beq.n	8003d3e <HAL_ADC_PollForConversion+0xf2>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a41      	ldr	r2, [pc, #260]	; (8003e40 <HAL_ADC_PollForConversion+0x1f4>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d102      	bne.n	8003d44 <HAL_ADC_PollForConversion+0xf8>
 8003d3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003d42:	e000      	b.n	8003d46 <HAL_ADC_PollForConversion+0xfa>
 8003d44:	4b41      	ldr	r3, [pc, #260]	; (8003e4c <HAL_ADC_PollForConversion+0x200>)
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8003d4a:	f7ff fc0b 	bl	8003564 <HAL_GetTick>
 8003d4e:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003d50:	e021      	b.n	8003d96 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d58:	d01d      	beq.n	8003d96 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d007      	beq.n	8003d70 <HAL_ADC_PollForConversion+0x124>
 8003d60:	f7ff fc00 	bl	8003564 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d212      	bcs.n	8003d96 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10b      	bne.n	8003d96 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	f043 0204 	orr.w	r2, r3, #4
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e04f      	b.n	8003e36 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0d6      	beq.n	8003d52 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d131      	bne.n	8003e22 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d12c      	bne.n	8003e22 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0308 	and.w	r3, r3, #8
 8003dd2:	2b08      	cmp	r3, #8
 8003dd4:	d125      	bne.n	8003e22 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d112      	bne.n	8003e0a <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d112      	bne.n	8003e22 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e00:	f043 0201 	orr.w	r2, r3, #1
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	641a      	str	r2, [r3, #64]	; 0x40
 8003e08:	e00b      	b.n	8003e22 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	f043 0220 	orr.w	r2, r3, #32
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1a:	f043 0201 	orr.w	r2, r3, #1
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d103      	bne.n	8003e34 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	50000100 	.word	0x50000100
 8003e44:	50000300 	.word	0x50000300
 8003e48:	50000700 	.word	0x50000700
 8003e4c:	50000400 	.word	0x50000400

08003e50 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
	...

08003e6c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b09b      	sub	sp, #108	; 0x6c
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e76:	2300      	movs	r3, #0
 8003e78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d101      	bne.n	8003e8e <HAL_ADC_ConfigChannel+0x22>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	e2cb      	b.n	8004426 <HAL_ADC_ConfigChannel+0x5ba>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f040 82af 	bne.w	8004404 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	d81c      	bhi.n	8003ee8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	4413      	add	r3, r2
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	231f      	movs	r3, #31
 8003ec4:	4093      	lsls	r3, r2
 8003ec6:	43db      	mvns	r3, r3
 8003ec8:	4019      	ands	r1, r3
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	6818      	ldr	r0, [r3, #0]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	4413      	add	r3, r2
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	fa00 f203 	lsl.w	r2, r0, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	631a      	str	r2, [r3, #48]	; 0x30
 8003ee6:	e063      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	2b09      	cmp	r3, #9
 8003eee:	d81e      	bhi.n	8003f2e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	4613      	mov	r3, r2
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	4413      	add	r3, r2
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	3b1e      	subs	r3, #30
 8003f04:	221f      	movs	r2, #31
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	4019      	ands	r1, r3
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	6818      	ldr	r0, [r3, #0]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	4613      	mov	r3, r2
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	4413      	add	r3, r2
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	3b1e      	subs	r3, #30
 8003f20:	fa00 f203 	lsl.w	r2, r0, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	635a      	str	r2, [r3, #52]	; 0x34
 8003f2c:	e040      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	2b0e      	cmp	r3, #14
 8003f34:	d81e      	bhi.n	8003f74 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	4613      	mov	r3, r2
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	4413      	add	r3, r2
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	3b3c      	subs	r3, #60	; 0x3c
 8003f4a:	221f      	movs	r2, #31
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	43db      	mvns	r3, r3
 8003f52:	4019      	ands	r1, r3
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	6818      	ldr	r0, [r3, #0]
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	4413      	add	r3, r2
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	3b3c      	subs	r3, #60	; 0x3c
 8003f66:	fa00 f203 	lsl.w	r2, r0, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	639a      	str	r2, [r3, #56]	; 0x38
 8003f72:	e01d      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	4413      	add	r3, r2
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	3b5a      	subs	r3, #90	; 0x5a
 8003f88:	221f      	movs	r2, #31
 8003f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8e:	43db      	mvns	r3, r3
 8003f90:	4019      	ands	r1, r3
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	6818      	ldr	r0, [r3, #0]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	4413      	add	r3, r2
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	3b5a      	subs	r3, #90	; 0x5a
 8003fa4:	fa00 f203 	lsl.w	r2, r0, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 030c 	and.w	r3, r3, #12
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f040 80e5 	bne.w	800418a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2b09      	cmp	r3, #9
 8003fc6:	d91c      	bls.n	8004002 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6999      	ldr	r1, [r3, #24]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	4413      	add	r3, r2
 8003fd8:	3b1e      	subs	r3, #30
 8003fda:	2207      	movs	r2, #7
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	4019      	ands	r1, r3
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	6898      	ldr	r0, [r3, #8]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	4613      	mov	r3, r2
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	4413      	add	r3, r2
 8003ff2:	3b1e      	subs	r3, #30
 8003ff4:	fa00 f203 	lsl.w	r2, r0, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	619a      	str	r2, [r3, #24]
 8004000:	e019      	b.n	8004036 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6959      	ldr	r1, [r3, #20]
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	4613      	mov	r3, r2
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	4413      	add	r3, r2
 8004012:	2207      	movs	r2, #7
 8004014:	fa02 f303 	lsl.w	r3, r2, r3
 8004018:	43db      	mvns	r3, r3
 800401a:	4019      	ands	r1, r3
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	6898      	ldr	r0, [r3, #8]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	4613      	mov	r3, r2
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	4413      	add	r3, r2
 800402a:	fa00 f203 	lsl.w	r2, r0, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	695a      	ldr	r2, [r3, #20]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	08db      	lsrs	r3, r3, #3
 8004042:	f003 0303 	and.w	r3, r3, #3
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	3b01      	subs	r3, #1
 8004054:	2b03      	cmp	r3, #3
 8004056:	d84f      	bhi.n	80040f8 <HAL_ADC_ConfigChannel+0x28c>
 8004058:	a201      	add	r2, pc, #4	; (adr r2, 8004060 <HAL_ADC_ConfigChannel+0x1f4>)
 800405a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405e:	bf00      	nop
 8004060:	08004071 	.word	0x08004071
 8004064:	08004093 	.word	0x08004093
 8004068:	080040b5 	.word	0x080040b5
 800406c:	080040d7 	.word	0x080040d7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004076:	4b9f      	ldr	r3, [pc, #636]	; (80042f4 <HAL_ADC_ConfigChannel+0x488>)
 8004078:	4013      	ands	r3, r2
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	6812      	ldr	r2, [r2, #0]
 800407e:	0691      	lsls	r1, r2, #26
 8004080:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004082:	430a      	orrs	r2, r1
 8004084:	431a      	orrs	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800408e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004090:	e07e      	b.n	8004190 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004098:	4b96      	ldr	r3, [pc, #600]	; (80042f4 <HAL_ADC_ConfigChannel+0x488>)
 800409a:	4013      	ands	r3, r2
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	6812      	ldr	r2, [r2, #0]
 80040a0:	0691      	lsls	r1, r2, #26
 80040a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80040a4:	430a      	orrs	r2, r1
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80040b0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80040b2:	e06d      	b.n	8004190 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80040ba:	4b8e      	ldr	r3, [pc, #568]	; (80042f4 <HAL_ADC_ConfigChannel+0x488>)
 80040bc:	4013      	ands	r3, r2
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	6812      	ldr	r2, [r2, #0]
 80040c2:	0691      	lsls	r1, r2, #26
 80040c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80040c6:	430a      	orrs	r2, r1
 80040c8:	431a      	orrs	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80040d2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80040d4:	e05c      	b.n	8004190 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80040dc:	4b85      	ldr	r3, [pc, #532]	; (80042f4 <HAL_ADC_ConfigChannel+0x488>)
 80040de:	4013      	ands	r3, r2
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	6812      	ldr	r2, [r2, #0]
 80040e4:	0691      	lsls	r1, r2, #26
 80040e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80040e8:	430a      	orrs	r2, r1
 80040ea:	431a      	orrs	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80040f4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80040f6:	e04b      	b.n	8004190 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	069b      	lsls	r3, r3, #26
 8004108:	429a      	cmp	r2, r3
 800410a:	d107      	bne.n	800411c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800411a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004122:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	069b      	lsls	r3, r3, #26
 800412c:	429a      	cmp	r2, r3
 800412e:	d107      	bne.n	8004140 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800413e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004146:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	069b      	lsls	r3, r3, #26
 8004150:	429a      	cmp	r2, r3
 8004152:	d107      	bne.n	8004164 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004162:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800416a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	069b      	lsls	r3, r3, #26
 8004174:	429a      	cmp	r2, r3
 8004176:	d10a      	bne.n	800418e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004186:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8004188:	e001      	b.n	800418e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800418a:	bf00      	nop
 800418c:	e000      	b.n	8004190 <HAL_ADC_ConfigChannel+0x324>
      break;
 800418e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	2b01      	cmp	r3, #1
 800419c:	d108      	bne.n	80041b0 <HAL_ADC_ConfigChannel+0x344>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d101      	bne.n	80041b0 <HAL_ADC_ConfigChannel+0x344>
 80041ac:	2301      	movs	r3, #1
 80041ae:	e000      	b.n	80041b2 <HAL_ADC_ConfigChannel+0x346>
 80041b0:	2300      	movs	r3, #0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f040 8131 	bne.w	800441a <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d00f      	beq.n	80041e0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2201      	movs	r2, #1
 80041ce:	fa02 f303 	lsl.w	r3, r2, r3
 80041d2:	43da      	mvns	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	400a      	ands	r2, r1
 80041da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80041de:	e049      	b.n	8004274 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2201      	movs	r2, #1
 80041ee:	409a      	lsls	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2b09      	cmp	r3, #9
 8004200:	d91c      	bls.n	800423c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6999      	ldr	r1, [r3, #24]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	4613      	mov	r3, r2
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	4413      	add	r3, r2
 8004212:	3b1b      	subs	r3, #27
 8004214:	2207      	movs	r2, #7
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	43db      	mvns	r3, r3
 800421c:	4019      	ands	r1, r3
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	6898      	ldr	r0, [r3, #8]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	4613      	mov	r3, r2
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	4413      	add	r3, r2
 800422c:	3b1b      	subs	r3, #27
 800422e:	fa00 f203 	lsl.w	r2, r0, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	619a      	str	r2, [r3, #24]
 800423a:	e01b      	b.n	8004274 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6959      	ldr	r1, [r3, #20]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	1c5a      	adds	r2, r3, #1
 8004248:	4613      	mov	r3, r2
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	4413      	add	r3, r2
 800424e:	2207      	movs	r2, #7
 8004250:	fa02 f303 	lsl.w	r3, r2, r3
 8004254:	43db      	mvns	r3, r3
 8004256:	4019      	ands	r1, r3
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	6898      	ldr	r0, [r3, #8]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	1c5a      	adds	r2, r3, #1
 8004262:	4613      	mov	r3, r2
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	4413      	add	r3, r2
 8004268:	fa00 f203 	lsl.w	r2, r0, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800427c:	d004      	beq.n	8004288 <HAL_ADC_ConfigChannel+0x41c>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a1d      	ldr	r2, [pc, #116]	; (80042f8 <HAL_ADC_ConfigChannel+0x48c>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d101      	bne.n	800428c <HAL_ADC_ConfigChannel+0x420>
 8004288:	4b1c      	ldr	r3, [pc, #112]	; (80042fc <HAL_ADC_ConfigChannel+0x490>)
 800428a:	e000      	b.n	800428e <HAL_ADC_ConfigChannel+0x422>
 800428c:	4b1c      	ldr	r3, [pc, #112]	; (8004300 <HAL_ADC_ConfigChannel+0x494>)
 800428e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2b10      	cmp	r3, #16
 8004296:	d105      	bne.n	80042a4 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004298:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d015      	beq.n	80042d0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80042a8:	2b11      	cmp	r3, #17
 80042aa:	d105      	bne.n	80042b8 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80042ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00b      	beq.n	80042d0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80042bc:	2b12      	cmp	r3, #18
 80042be:	f040 80ac 	bne.w	800441a <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80042c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f040 80a5 	bne.w	800441a <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042d8:	d102      	bne.n	80042e0 <HAL_ADC_ConfigChannel+0x474>
 80042da:	4b07      	ldr	r3, [pc, #28]	; (80042f8 <HAL_ADC_ConfigChannel+0x48c>)
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	e023      	b.n	8004328 <HAL_ADC_ConfigChannel+0x4bc>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a04      	ldr	r2, [pc, #16]	; (80042f8 <HAL_ADC_ConfigChannel+0x48c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d10c      	bne.n	8004304 <HAL_ADC_ConfigChannel+0x498>
 80042ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	e01a      	b.n	8004328 <HAL_ADC_ConfigChannel+0x4bc>
 80042f2:	bf00      	nop
 80042f4:	83fff000 	.word	0x83fff000
 80042f8:	50000100 	.word	0x50000100
 80042fc:	50000300 	.word	0x50000300
 8004300:	50000700 	.word	0x50000700
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a4a      	ldr	r2, [pc, #296]	; (8004434 <HAL_ADC_ConfigChannel+0x5c8>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d102      	bne.n	8004314 <HAL_ADC_ConfigChannel+0x4a8>
 800430e:	4b4a      	ldr	r3, [pc, #296]	; (8004438 <HAL_ADC_ConfigChannel+0x5cc>)
 8004310:	60fb      	str	r3, [r7, #12]
 8004312:	e009      	b.n	8004328 <HAL_ADC_ConfigChannel+0x4bc>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a47      	ldr	r2, [pc, #284]	; (8004438 <HAL_ADC_ConfigChannel+0x5cc>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d102      	bne.n	8004324 <HAL_ADC_ConfigChannel+0x4b8>
 800431e:	4b45      	ldr	r3, [pc, #276]	; (8004434 <HAL_ADC_ConfigChannel+0x5c8>)
 8004320:	60fb      	str	r3, [r7, #12]
 8004322:	e001      	b.n	8004328 <HAL_ADC_ConfigChannel+0x4bc>
 8004324:	2300      	movs	r3, #0
 8004326:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f003 0303 	and.w	r3, r3, #3
 8004332:	2b01      	cmp	r3, #1
 8004334:	d108      	bne.n	8004348 <HAL_ADC_ConfigChannel+0x4dc>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b01      	cmp	r3, #1
 8004342:	d101      	bne.n	8004348 <HAL_ADC_ConfigChannel+0x4dc>
 8004344:	2301      	movs	r3, #1
 8004346:	e000      	b.n	800434a <HAL_ADC_ConfigChannel+0x4de>
 8004348:	2300      	movs	r3, #0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d150      	bne.n	80043f0 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800434e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004350:	2b00      	cmp	r3, #0
 8004352:	d010      	beq.n	8004376 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f003 0303 	and.w	r3, r3, #3
 800435c:	2b01      	cmp	r3, #1
 800435e:	d107      	bne.n	8004370 <HAL_ADC_ConfigChannel+0x504>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b01      	cmp	r3, #1
 800436a:	d101      	bne.n	8004370 <HAL_ADC_ConfigChannel+0x504>
 800436c:	2301      	movs	r3, #1
 800436e:	e000      	b.n	8004372 <HAL_ADC_ConfigChannel+0x506>
 8004370:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004372:	2b00      	cmp	r3, #0
 8004374:	d13c      	bne.n	80043f0 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b10      	cmp	r3, #16
 800437c:	d11d      	bne.n	80043ba <HAL_ADC_ConfigChannel+0x54e>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004386:	d118      	bne.n	80043ba <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004388:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004390:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004392:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004394:	4b29      	ldr	r3, [pc, #164]	; (800443c <HAL_ADC_ConfigChannel+0x5d0>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a29      	ldr	r2, [pc, #164]	; (8004440 <HAL_ADC_ConfigChannel+0x5d4>)
 800439a:	fba2 2303 	umull	r2, r3, r2, r3
 800439e:	0c9a      	lsrs	r2, r3, #18
 80043a0:	4613      	mov	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	005b      	lsls	r3, r3, #1
 80043a8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80043aa:	e002      	b.n	80043b2 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	3b01      	subs	r3, #1
 80043b0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1f9      	bne.n	80043ac <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80043b8:	e02e      	b.n	8004418 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b11      	cmp	r3, #17
 80043c0:	d10b      	bne.n	80043da <HAL_ADC_ConfigChannel+0x56e>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043ca:	d106      	bne.n	80043da <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80043cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80043d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043d6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80043d8:	e01e      	b.n	8004418 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b12      	cmp	r3, #18
 80043e0:	d11a      	bne.n	8004418 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80043e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80043ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043ec:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80043ee:	e013      	b.n	8004418 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f4:	f043 0220 	orr.w	r2, r3, #32
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004402:	e00a      	b.n	800441a <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	f043 0220 	orr.w	r2, r3, #32
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004416:	e000      	b.n	800441a <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004418:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004422:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004426:	4618      	mov	r0, r3
 8004428:	376c      	adds	r7, #108	; 0x6c
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	50000400 	.word	0x50000400
 8004438:	50000500 	.word	0x50000500
 800443c:	20000010 	.word	0x20000010
 8004440:	431bde83 	.word	0x431bde83

08004444 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8004444:	b480      	push	{r7}
 8004446:	b099      	sub	sp, #100	; 0x64
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800444e:	2300      	movs	r3, #0
 8004450:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800445c:	d102      	bne.n	8004464 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800445e:	4b6d      	ldr	r3, [pc, #436]	; (8004614 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004460:	60bb      	str	r3, [r7, #8]
 8004462:	e01a      	b.n	800449a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a6a      	ldr	r2, [pc, #424]	; (8004614 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d103      	bne.n	8004476 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800446e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004472:	60bb      	str	r3, [r7, #8]
 8004474:	e011      	b.n	800449a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a67      	ldr	r2, [pc, #412]	; (8004618 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d102      	bne.n	8004486 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004480:	4b66      	ldr	r3, [pc, #408]	; (800461c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004482:	60bb      	str	r3, [r7, #8]
 8004484:	e009      	b.n	800449a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a64      	ldr	r2, [pc, #400]	; (800461c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d102      	bne.n	8004496 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004490:	4b61      	ldr	r3, [pc, #388]	; (8004618 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004492:	60bb      	str	r3, [r7, #8]
 8004494:	e001      	b.n	800449a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004496:	2300      	movs	r3, #0
 8004498:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e0b0      	b.n	8004606 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d101      	bne.n	80044b2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80044ae:	2302      	movs	r3, #2
 80044b0:	e0a9      	b.n	8004606 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f040 808d 	bne.w	80045e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 0304 	and.w	r3, r3, #4
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f040 8086 	bne.w	80045e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044e0:	d004      	beq.n	80044ec <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a4b      	ldr	r2, [pc, #300]	; (8004614 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d101      	bne.n	80044f0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80044ec:	4b4c      	ldr	r3, [pc, #304]	; (8004620 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80044ee:	e000      	b.n	80044f2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80044f0:	4b4c      	ldr	r3, [pc, #304]	; (8004624 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80044f2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d040      	beq.n	800457e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80044fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	6859      	ldr	r1, [r3, #4]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800450e:	035b      	lsls	r3, r3, #13
 8004510:	430b      	orrs	r3, r1
 8004512:	431a      	orrs	r2, r3
 8004514:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004516:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f003 0303 	and.w	r3, r3, #3
 8004522:	2b01      	cmp	r3, #1
 8004524:	d108      	bne.n	8004538 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b01      	cmp	r3, #1
 8004532:	d101      	bne.n	8004538 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004534:	2301      	movs	r3, #1
 8004536:	e000      	b.n	800453a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8004538:	2300      	movs	r3, #0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d15c      	bne.n	80045f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 0303 	and.w	r3, r3, #3
 8004546:	2b01      	cmp	r3, #1
 8004548:	d107      	bne.n	800455a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b01      	cmp	r3, #1
 8004554:	d101      	bne.n	800455a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004556:	2301      	movs	r3, #1
 8004558:	e000      	b.n	800455c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800455a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800455c:	2b00      	cmp	r3, #0
 800455e:	d14b      	bne.n	80045f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004560:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004568:	f023 030f 	bic.w	r3, r3, #15
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	6811      	ldr	r1, [r2, #0]
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	6892      	ldr	r2, [r2, #8]
 8004574:	430a      	orrs	r2, r1
 8004576:	431a      	orrs	r2, r3
 8004578:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800457a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800457c:	e03c      	b.n	80045f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800457e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004586:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004588:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f003 0303 	and.w	r3, r3, #3
 8004594:	2b01      	cmp	r3, #1
 8004596:	d108      	bne.n	80045aa <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d101      	bne.n	80045aa <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80045a6:	2301      	movs	r3, #1
 80045a8:	e000      	b.n	80045ac <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80045aa:	2300      	movs	r3, #0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d123      	bne.n	80045f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f003 0303 	and.w	r3, r3, #3
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d107      	bne.n	80045cc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d101      	bne.n	80045cc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80045c8:	2301      	movs	r3, #1
 80045ca:	e000      	b.n	80045ce <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80045cc:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d112      	bne.n	80045f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80045d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80045da:	f023 030f 	bic.w	r3, r3, #15
 80045de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045e0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80045e2:	e009      	b.n	80045f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e8:	f043 0220 	orr.w	r2, r3, #32
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80045f6:	e000      	b.n	80045fa <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80045f8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004602:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8004606:	4618      	mov	r0, r3
 8004608:	3764      	adds	r7, #100	; 0x64
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	50000100 	.word	0x50000100
 8004618:	50000400 	.word	0x50000400
 800461c:	50000500 	.word	0x50000500
 8004620:	50000300 	.word	0x50000300
 8004624:	50000700 	.word	0x50000700

08004628 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004630:	2300      	movs	r3, #0
 8004632:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f003 0303 	and.w	r3, r3, #3
 800463e:	2b01      	cmp	r3, #1
 8004640:	d108      	bne.n	8004654 <ADC_Enable+0x2c>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b01      	cmp	r3, #1
 800464e:	d101      	bne.n	8004654 <ADC_Enable+0x2c>
 8004650:	2301      	movs	r3, #1
 8004652:	e000      	b.n	8004656 <ADC_Enable+0x2e>
 8004654:	2300      	movs	r3, #0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d143      	bne.n	80046e2 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	4b22      	ldr	r3, [pc, #136]	; (80046ec <ADC_Enable+0xc4>)
 8004662:	4013      	ands	r3, r2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00d      	beq.n	8004684 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466c:	f043 0210 	orr.w	r2, r3, #16
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004678:	f043 0201 	orr.w	r2, r3, #1
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e02f      	b.n	80046e4 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689a      	ldr	r2, [r3, #8]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0201 	orr.w	r2, r2, #1
 8004692:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8004694:	f7fe ff66 	bl	8003564 <HAL_GetTick>
 8004698:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800469a:	e01b      	b.n	80046d4 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800469c:	f7fe ff62 	bl	8003564 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d914      	bls.n	80046d4 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d00d      	beq.n	80046d4 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046bc:	f043 0210 	orr.w	r2, r3, #16
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c8:	f043 0201 	orr.w	r2, r3, #1
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e007      	b.n	80046e4 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d1dc      	bne.n	800469c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	8000003f 	.word	0x8000003f

080046f0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046f8:	2300      	movs	r3, #0
 80046fa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 0303 	and.w	r3, r3, #3
 8004706:	2b01      	cmp	r3, #1
 8004708:	d108      	bne.n	800471c <ADC_Disable+0x2c>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b01      	cmp	r3, #1
 8004716:	d101      	bne.n	800471c <ADC_Disable+0x2c>
 8004718:	2301      	movs	r3, #1
 800471a:	e000      	b.n	800471e <ADC_Disable+0x2e>
 800471c:	2300      	movs	r3, #0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d047      	beq.n	80047b2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f003 030d 	and.w	r3, r3, #13
 800472c:	2b01      	cmp	r3, #1
 800472e:	d10f      	bne.n	8004750 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689a      	ldr	r2, [r3, #8]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f042 0202 	orr.w	r2, r2, #2
 800473e:	609a      	str	r2, [r3, #8]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2203      	movs	r2, #3
 8004746:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004748:	f7fe ff0c 	bl	8003564 <HAL_GetTick>
 800474c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800474e:	e029      	b.n	80047a4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004754:	f043 0210 	orr.w	r2, r3, #16
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004760:	f043 0201 	orr.w	r2, r3, #1
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e023      	b.n	80047b4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800476c:	f7fe fefa 	bl	8003564 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d914      	bls.n	80047a4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	2b01      	cmp	r3, #1
 8004786:	d10d      	bne.n	80047a4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478c:	f043 0210 	orr.w	r2, r3, #16
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004798:	f043 0201 	orr.w	r2, r3, #1
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e007      	b.n	80047b4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d0dc      	beq.n	800476c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80047c6:	2300      	movs	r3, #0
 80047c8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f003 030c 	and.w	r3, r3, #12
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 809a 	beq.w	8004916 <ADC_ConversionStop+0x15a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047f0:	d12a      	bne.n	8004848 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d126      	bne.n	8004848 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d122      	bne.n	8004848 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8004802:	230c      	movs	r3, #12
 8004804:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8004806:	e014      	b.n	8004832 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	4a45      	ldr	r2, [pc, #276]	; (8004920 <ADC_ConversionStop+0x164>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d90d      	bls.n	800482c <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004814:	f043 0210 	orr.w	r2, r3, #16
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004820:	f043 0201 	orr.w	r2, r3, #1
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e075      	b.n	8004918 <ADC_ConversionStop+0x15c>
        }
        Conversion_Timeout_CPU_cycles ++;
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	3301      	adds	r3, #1
 8004830:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483c:	2b40      	cmp	r3, #64	; 0x40
 800483e:	d1e3      	bne.n	8004808 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2240      	movs	r2, #64	; 0x40
 8004846:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	2b60      	cmp	r3, #96	; 0x60
 800484c:	d015      	beq.n	800487a <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f003 0304 	and.w	r3, r3, #4
 8004858:	2b04      	cmp	r3, #4
 800485a:	d10e      	bne.n	800487a <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004866:	2b00      	cmp	r3, #0
 8004868:	d107      	bne.n	800487a <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f042 0210 	orr.w	r2, r2, #16
 8004878:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b0c      	cmp	r3, #12
 800487e:	d015      	beq.n	80048ac <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f003 0308 	and.w	r3, r3, #8
 800488a:	2b08      	cmp	r3, #8
 800488c:	d10e      	bne.n	80048ac <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8004898:	2b00      	cmp	r3, #0
 800489a:	d107      	bne.n	80048ac <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689a      	ldr	r2, [r3, #8]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0220 	orr.w	r2, r2, #32
 80048aa:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	2b60      	cmp	r3, #96	; 0x60
 80048b0:	d004      	beq.n	80048bc <ADC_ConversionStop+0x100>
 80048b2:	2b6c      	cmp	r3, #108	; 0x6c
 80048b4:	d105      	bne.n	80048c2 <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80048b6:	230c      	movs	r3, #12
 80048b8:	617b      	str	r3, [r7, #20]
        break;
 80048ba:	e005      	b.n	80048c8 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80048bc:	2308      	movs	r3, #8
 80048be:	617b      	str	r3, [r7, #20]
        break;
 80048c0:	e002      	b.n	80048c8 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80048c2:	2304      	movs	r3, #4
 80048c4:	617b      	str	r3, [r7, #20]
        break;
 80048c6:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80048c8:	f7fe fe4c 	bl	8003564 <HAL_GetTick>
 80048cc:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80048ce:	e01b      	b.n	8004908 <ADC_ConversionStop+0x14c>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80048d0:	f7fe fe48 	bl	8003564 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b0b      	cmp	r3, #11
 80048dc:	d914      	bls.n	8004908 <ADC_ConversionStop+0x14c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	4013      	ands	r3, r2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00d      	beq.n	8004908 <ADC_ConversionStop+0x14c>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f0:	f043 0210 	orr.w	r2, r3, #16
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fc:	f043 0201 	orr.w	r2, r3, #1
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e007      	b.n	8004918 <ADC_ConversionStop+0x15c>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689a      	ldr	r2, [r3, #8]
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	4013      	ands	r3, r2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1dc      	bne.n	80048d0 <ADC_ConversionStop+0x114>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3718      	adds	r7, #24
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	000993ff 	.word	0x000993ff

08004924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f003 0307 	and.w	r3, r3, #7
 8004932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004934:	4b0c      	ldr	r3, [pc, #48]	; (8004968 <__NVIC_SetPriorityGrouping+0x44>)
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004940:	4013      	ands	r3, r2
 8004942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800494c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004956:	4a04      	ldr	r2, [pc, #16]	; (8004968 <__NVIC_SetPriorityGrouping+0x44>)
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	60d3      	str	r3, [r2, #12]
}
 800495c:	bf00      	nop
 800495e:	3714      	adds	r7, #20
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	e000ed00 	.word	0xe000ed00

0800496c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004970:	4b04      	ldr	r3, [pc, #16]	; (8004984 <__NVIC_GetPriorityGrouping+0x18>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	0a1b      	lsrs	r3, r3, #8
 8004976:	f003 0307 	and.w	r3, r3, #7
}
 800497a:	4618      	mov	r0, r3
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	e000ed00 	.word	0xe000ed00

08004988 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	4603      	mov	r3, r0
 8004990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004996:	2b00      	cmp	r3, #0
 8004998:	db0b      	blt.n	80049b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800499a:	79fb      	ldrb	r3, [r7, #7]
 800499c:	f003 021f 	and.w	r2, r3, #31
 80049a0:	4907      	ldr	r1, [pc, #28]	; (80049c0 <__NVIC_EnableIRQ+0x38>)
 80049a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049a6:	095b      	lsrs	r3, r3, #5
 80049a8:	2001      	movs	r0, #1
 80049aa:	fa00 f202 	lsl.w	r2, r0, r2
 80049ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	e000e100 	.word	0xe000e100

080049c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	4603      	mov	r3, r0
 80049cc:	6039      	str	r1, [r7, #0]
 80049ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	db0a      	blt.n	80049ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	490c      	ldr	r1, [pc, #48]	; (8004a10 <__NVIC_SetPriority+0x4c>)
 80049de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049e2:	0112      	lsls	r2, r2, #4
 80049e4:	b2d2      	uxtb	r2, r2
 80049e6:	440b      	add	r3, r1
 80049e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049ec:	e00a      	b.n	8004a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	4908      	ldr	r1, [pc, #32]	; (8004a14 <__NVIC_SetPriority+0x50>)
 80049f4:	79fb      	ldrb	r3, [r7, #7]
 80049f6:	f003 030f 	and.w	r3, r3, #15
 80049fa:	3b04      	subs	r3, #4
 80049fc:	0112      	lsls	r2, r2, #4
 80049fe:	b2d2      	uxtb	r2, r2
 8004a00:	440b      	add	r3, r1
 8004a02:	761a      	strb	r2, [r3, #24]
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	e000e100 	.word	0xe000e100
 8004a14:	e000ed00 	.word	0xe000ed00

08004a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b089      	sub	sp, #36	; 0x24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	f1c3 0307 	rsb	r3, r3, #7
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	bf28      	it	cs
 8004a36:	2304      	movcs	r3, #4
 8004a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	3304      	adds	r3, #4
 8004a3e:	2b06      	cmp	r3, #6
 8004a40:	d902      	bls.n	8004a48 <NVIC_EncodePriority+0x30>
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	3b03      	subs	r3, #3
 8004a46:	e000      	b.n	8004a4a <NVIC_EncodePriority+0x32>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	fa02 f303 	lsl.w	r3, r2, r3
 8004a56:	43da      	mvns	r2, r3
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	401a      	ands	r2, r3
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a60:	f04f 31ff 	mov.w	r1, #4294967295
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	fa01 f303 	lsl.w	r3, r1, r3
 8004a6a:	43d9      	mvns	r1, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a70:	4313      	orrs	r3, r2
         );
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3724      	adds	r7, #36	; 0x24
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
	...

08004a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a90:	d301      	bcc.n	8004a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a92:	2301      	movs	r3, #1
 8004a94:	e00f      	b.n	8004ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a96:	4a0a      	ldr	r2, [pc, #40]	; (8004ac0 <SysTick_Config+0x40>)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a9e:	210f      	movs	r1, #15
 8004aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa4:	f7ff ff8e 	bl	80049c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004aa8:	4b05      	ldr	r3, [pc, #20]	; (8004ac0 <SysTick_Config+0x40>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004aae:	4b04      	ldr	r3, [pc, #16]	; (8004ac0 <SysTick_Config+0x40>)
 8004ab0:	2207      	movs	r2, #7
 8004ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3708      	adds	r7, #8
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	e000e010 	.word	0xe000e010

08004ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f7ff ff29 	bl	8004924 <__NVIC_SetPriorityGrouping>
}
 8004ad2:	bf00      	nop
 8004ad4:	3708      	adds	r7, #8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b086      	sub	sp, #24
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	60b9      	str	r1, [r7, #8]
 8004ae4:	607a      	str	r2, [r7, #4]
 8004ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004aec:	f7ff ff3e 	bl	800496c <__NVIC_GetPriorityGrouping>
 8004af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	68b9      	ldr	r1, [r7, #8]
 8004af6:	6978      	ldr	r0, [r7, #20]
 8004af8:	f7ff ff8e 	bl	8004a18 <NVIC_EncodePriority>
 8004afc:	4602      	mov	r2, r0
 8004afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b02:	4611      	mov	r1, r2
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7ff ff5d 	bl	80049c4 <__NVIC_SetPriority>
}
 8004b0a:	bf00      	nop
 8004b0c:	3718      	adds	r7, #24
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b082      	sub	sp, #8
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	4603      	mov	r3, r0
 8004b1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7ff ff31 	bl	8004988 <__NVIC_EnableIRQ>
}
 8004b26:	bf00      	nop
 8004b28:	3708      	adds	r7, #8
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b082      	sub	sp, #8
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7ff ffa2 	bl	8004a80 <SysTick_Config>
 8004b3c:	4603      	mov	r3, r0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b082      	sub	sp, #8
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d101      	bne.n	8004b58 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e014      	b.n	8004b82 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	791b      	ldrb	r3, [r3, #4]
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d105      	bne.n	8004b6e <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f7fd ff4d 	bl	8002a08 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2202      	movs	r2, #2
 8004b72:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected  
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b084      	sub	sp, #16
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
 8004b92:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b94:	2300      	movs	r3, #0
 8004b96:	73fb      	strb	r3, [r7, #15]
    
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Disable the selected DAC channel DMA request */
    hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6819      	ldr	r1, [r3, #0]
 8004b9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba8:	43da      	mvns	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	400a      	ands	r2, r1
 8004bb0:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	6819      	ldr	r1, [r3, #0]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc0:	43da      	mvns	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	400a      	ands	r2, r1
 8004bc8:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA channel */
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10f      	bne.n	8004bf0 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);   
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f000 fa72 	bl	80050be <HAL_DMA_Abort>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	e00e      	b.n	8004c0e <HAL_DAC_Stop_DMA+0x84>
  /* For all products including channel 2U */
  /* DAC channel 2 is available on top of DAC channel 1U */
  else /* Channel2 is used */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);   
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 fa62 	bl	80050be <HAL_DMA_Abort>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004c0c:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */
    
  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8004c0e:	7bfb      	ldrb	r3, [r7, #15]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d003      	beq.n	8004c1c <HAL_DAC_Stop_DMA+0x92>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2204      	movs	r2, #4
 8004c18:	711a      	strb	r2, [r3, #4]
 8004c1a:	e002      	b.n	8004c22 <HAL_DAC_Stop_DMA+0x98>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	711a      	strb	r2, [r3, #4]
  }
  
  /* Return function status */
  return status;
 8004c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
 8004c74:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	795b      	ldrb	r3, [r3, #5]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d101      	bne.n	8004c86 <HAL_DAC_Start_DMA+0x1e>
 8004c82:	2302      	movs	r3, #2
 8004c84:	e08e      	b.n	8004da4 <HAL_DAC_Start_DMA+0x13c>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2202      	movs	r2, #2
 8004c90:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d12a      	bne.n	8004cee <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	4a43      	ldr	r2, [pc, #268]	; (8004dac <HAL_DAC_Start_DMA+0x144>)
 8004c9e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	4a42      	ldr	r2, [pc, #264]	; (8004db0 <HAL_DAC_Start_DMA+0x148>)
 8004ca6:	62da      	str	r2, [r3, #44]	; 0x2c
      
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	4a41      	ldr	r2, [pc, #260]	; (8004db4 <HAL_DAC_Start_DMA+0x14c>)
 8004cae:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004cbe:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1U */
    switch(Alignment)
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	d009      	beq.n	8004cda <HAL_DAC_Start_DMA+0x72>
 8004cc6:	2b08      	cmp	r3, #8
 8004cc8:	d00c      	beq.n	8004ce4 <HAL_DAC_Start_DMA+0x7c>
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d000      	beq.n	8004cd0 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8004cce:	e039      	b.n	8004d44 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	3308      	adds	r3, #8
 8004cd6:	617b      	str	r3, [r7, #20]
        break;
 8004cd8:	e034      	b.n	8004d44 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	330c      	adds	r3, #12
 8004ce0:	617b      	str	r3, [r7, #20]
        break;
 8004ce2:	e02f      	b.n	8004d44 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	3310      	adds	r3, #16
 8004cea:	617b      	str	r3, [r7, #20]
        break;
 8004cec:	e02a      	b.n	8004d44 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	4a31      	ldr	r2, [pc, #196]	; (8004db8 <HAL_DAC_Start_DMA+0x150>)
 8004cf4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	4a30      	ldr	r2, [pc, #192]	; (8004dbc <HAL_DAC_Start_DMA+0x154>)
 8004cfc:	62da      	str	r2, [r3, #44]	; 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	4a2f      	ldr	r2, [pc, #188]	; (8004dc0 <HAL_DAC_Start_DMA+0x158>)
 8004d04:	631a      	str	r2, [r3, #48]	; 0x30
 
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004d14:	601a      	str	r2, [r3, #0]
   
    /* Case of use of channel 2U */
    switch(Alignment)
 8004d16:	6a3b      	ldr	r3, [r7, #32]
 8004d18:	2b04      	cmp	r3, #4
 8004d1a:	d009      	beq.n	8004d30 <HAL_DAC_Start_DMA+0xc8>
 8004d1c:	2b08      	cmp	r3, #8
 8004d1e:	d00c      	beq.n	8004d3a <HAL_DAC_Start_DMA+0xd2>
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d000      	beq.n	8004d26 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8004d24:	e00e      	b.n	8004d44 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	3314      	adds	r3, #20
 8004d2c:	617b      	str	r3, [r7, #20]
        break;
 8004d2e:	e009      	b.n	8004d44 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	3318      	adds	r3, #24
 8004d36:	617b      	str	r3, [r7, #20]
        break;
 8004d38:	e004      	b.n	8004d44 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	331c      	adds	r3, #28
 8004d40:	617b      	str	r3, [r7, #20]
        break;
 8004d42:	bf00      	nop
    }
  }
 
  /* Enable the DMA Channel */
  if(Channel == DAC_CHANNEL_1)
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10f      	bne.n	8004d6a <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d58:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6898      	ldr	r0, [r3, #8]
 8004d5e:	6879      	ldr	r1, [r7, #4]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	f000 f94c 	bl	8005000 <HAL_DMA_Start_IT>
 8004d68:	e00e      	b.n	8004d88 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004d78:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	68d8      	ldr	r0, [r3, #12]
 8004d7e:	6879      	ldr	r1, [r7, #4]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	f000 f93c 	bl	8005000 <HAL_DMA_Start_IT>
  }
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6819      	ldr	r1, [r3, #0]
 8004d94:	2201      	movs	r2, #1
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	409a      	lsls	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3718      	adds	r7, #24
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	08004e9b 	.word	0x08004e9b
 8004db0:	08004ebd 	.word	0x08004ebd
 8004db4:	08004ed9 	.word	0x08004ed9
 8004db8:	08004f07 	.word	0x08004f07
 8004dbc:	08004f29 	.word	0x08004f29
 8004dc0:	08004f45 	.word	0x08004f45

08004dc4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b087      	sub	sp, #28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	795b      	ldrb	r3, [r3, #5]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d101      	bne.n	8004de4 <HAL_DAC_ConfigChannel+0x20>
 8004de0:	2302      	movs	r3, #2
 8004de2:	e036      	b.n	8004e52 <HAL_DAC_ConfigChannel+0x8e>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2201      	movs	r2, #1
 8004de8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2202      	movs	r2, #2
 8004dee:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004df8:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004e02:	43db      	mvns	r3, r3
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	4013      	ands	r3, r2
 8004e08:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6819      	ldr	r1, [r3, #0]
 8004e32:	22c0      	movs	r2, #192	; 0xc0
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3a:	43da      	mvns	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	400a      	ands	r2, r1
 8004e42:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2201      	movs	r2, #1
 8004e48:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	371c      	adds	r7, #28
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr

08004e5e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8004e5e:	b480      	push	{r7}
 8004e60:	b083      	sub	sp, #12
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004e66:	bf00      	nop
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b083      	sub	sp, #12
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004e7a:	bf00      	nop
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr

08004e86 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004e86:	b480      	push	{r7}
 8004e88:	b083      	sub	sp, #12
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004e8e:	bf00      	nop
 8004e90:	370c      	adds	r7, #12
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b084      	sub	sp, #16
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f7ff febf 	bl	8004c2c <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	711a      	strb	r2, [r3, #4]
}
 8004eb4:	bf00      	nop
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f7ff feb8 	bl	8004c40 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 8004ed0:	bf00      	nop
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee4:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f043 0204 	orr.w	r2, r3, #4
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f7ff feae 	bl	8004c54 <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2201      	movs	r2, #1
 8004efc:	711a      	strb	r2, [r3, #4]
}
 8004efe:	bf00      	nop
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b084      	sub	sp, #16
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f12:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f7ff ffa2 	bl	8004e5e <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	711a      	strb	r2, [r3, #4]
}
 8004f20:	bf00      	nop
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f34:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f7ff ff9b 	bl	8004e72 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 8004f3c:	bf00      	nop
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	f043 0204 	orr.w	r2, r3, #4
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f7ff ff91 	bl	8004e86 <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2201      	movs	r2, #1
 8004f68:	711a      	strb	r2, [r3, #4]
}
 8004f6a:	bf00      	nop
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b084      	sub	sp, #16
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e037      	b.n	8004ff8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004f9e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004fa2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004fac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f9b8 	bl	8005350 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}  
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
 800500c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800500e:	2300      	movs	r3, #0
 8005010:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d101      	bne.n	8005020 <HAL_DMA_Start_IT+0x20>
 800501c:	2302      	movs	r3, #2
 800501e:	e04a      	b.n	80050b6 <HAL_DMA_Start_IT+0xb6>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800502e:	2b01      	cmp	r3, #1
 8005030:	d13a      	bne.n	80050a8 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2202      	movs	r2, #2
 8005036:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 0201 	bic.w	r2, r2, #1
 800504e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	68b9      	ldr	r1, [r7, #8]
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f000 f94b 	bl	80052f2 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005060:	2b00      	cmp	r3, #0
 8005062:	d008      	beq.n	8005076 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f042 020e 	orr.w	r2, r2, #14
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	e00f      	b.n	8005096 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f042 020a 	orr.w	r2, r2, #10
 8005084:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f022 0204 	bic.w	r2, r2, #4
 8005094:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f042 0201 	orr.w	r2, r2, #1
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	e005      	b.n	80050b4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80050b0:	2302      	movs	r3, #2
 80050b2:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80050b4:	7dfb      	ldrb	r3, [r7, #23]
} 
 80050b6:	4618      	mov	r0, r3
 80050b8:	3718      	adds	r7, #24
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80050be:	b480      	push	{r7}
 80050c0:	b083      	sub	sp, #12
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d008      	beq.n	80050e2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2204      	movs	r2, #4
 80050d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e020      	b.n	8005124 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 020e 	bic.w	r2, r2, #14
 80050f0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 0201 	bic.w	r2, r2, #1
 8005100:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800510a:	2101      	movs	r1, #1
 800510c:	fa01 f202 	lsl.w	r2, r1, r2
 8005110:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005138:	2300      	movs	r3, #0
 800513a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005142:	2b02      	cmp	r3, #2
 8005144:	d005      	beq.n	8005152 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2204      	movs	r2, #4
 800514a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	73fb      	strb	r3, [r7, #15]
 8005150:	e027      	b.n	80051a2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 020e 	bic.w	r2, r2, #14
 8005160:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 0201 	bic.w	r2, r2, #1
 8005170:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800517a:	2101      	movs	r1, #1
 800517c:	fa01 f202 	lsl.w	r2, r1, r2
 8005180:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005196:	2b00      	cmp	r3, #0
 8005198:	d003      	beq.n	80051a2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	4798      	blx	r3
    } 
  }
  return status;
 80051a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c8:	2204      	movs	r2, #4
 80051ca:	409a      	lsls	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4013      	ands	r3, r2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d024      	beq.n	800521e <HAL_DMA_IRQHandler+0x72>
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	f003 0304 	and.w	r3, r3, #4
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d01f      	beq.n	800521e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0320 	and.w	r3, r3, #32
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d107      	bne.n	80051fc <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 0204 	bic.w	r2, r2, #4
 80051fa:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005204:	2104      	movs	r1, #4
 8005206:	fa01 f202 	lsl.w	r2, r1, r2
 800520a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005210:	2b00      	cmp	r3, #0
 8005212:	d06a      	beq.n	80052ea <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800521c:	e065      	b.n	80052ea <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005222:	2202      	movs	r2, #2
 8005224:	409a      	lsls	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	4013      	ands	r3, r2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d02c      	beq.n	8005288 <HAL_DMA_IRQHandler+0xdc>
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	f003 0302 	and.w	r3, r3, #2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d027      	beq.n	8005288 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0320 	and.w	r3, r3, #32
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10b      	bne.n	800525e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f022 020a 	bic.w	r2, r2, #10
 8005254:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005266:	2102      	movs	r1, #2
 8005268:	fa01 f202 	lsl.w	r2, r1, r2
 800526c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527a:	2b00      	cmp	r3, #0
 800527c:	d035      	beq.n	80052ea <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8005286:	e030      	b.n	80052ea <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528c:	2208      	movs	r2, #8
 800528e:	409a      	lsls	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	4013      	ands	r3, r2
 8005294:	2b00      	cmp	r3, #0
 8005296:	d028      	beq.n	80052ea <HAL_DMA_IRQHandler+0x13e>
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f003 0308 	and.w	r3, r3, #8
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d023      	beq.n	80052ea <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f022 020e 	bic.w	r2, r2, #14
 80052b0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ba:	2101      	movs	r1, #1
 80052bc:	fa01 f202 	lsl.w	r2, r1, r2
 80052c0:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d004      	beq.n	80052ea <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	4798      	blx	r3
    }
  }
}  
 80052e8:	e7ff      	b.n	80052ea <HAL_DMA_IRQHandler+0x13e>
 80052ea:	bf00      	nop
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052f2:	b480      	push	{r7}
 80052f4:	b085      	sub	sp, #20
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	60f8      	str	r0, [r7, #12]
 80052fa:	60b9      	str	r1, [r7, #8]
 80052fc:	607a      	str	r2, [r7, #4]
 80052fe:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005308:	2101      	movs	r1, #1
 800530a:	fa01 f202 	lsl.w	r2, r1, r2
 800530e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	683a      	ldr	r2, [r7, #0]
 8005316:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	2b10      	cmp	r3, #16
 800531e:	d108      	bne.n	8005332 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005330:	e007      	b.n	8005342 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	60da      	str	r2, [r3, #12]
}
 8005342:	bf00      	nop
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
	...

08005350 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	461a      	mov	r2, r3
 800535e:	4b14      	ldr	r3, [pc, #80]	; (80053b0 <DMA_CalcBaseAndBitshift+0x60>)
 8005360:	429a      	cmp	r2, r3
 8005362:	d80f      	bhi.n	8005384 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	461a      	mov	r2, r3
 800536a:	4b12      	ldr	r3, [pc, #72]	; (80053b4 <DMA_CalcBaseAndBitshift+0x64>)
 800536c:	4413      	add	r3, r2
 800536e:	4a12      	ldr	r2, [pc, #72]	; (80053b8 <DMA_CalcBaseAndBitshift+0x68>)
 8005370:	fba2 2303 	umull	r2, r3, r2, r3
 8005374:	091b      	lsrs	r3, r3, #4
 8005376:	009a      	lsls	r2, r3, #2
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a0f      	ldr	r2, [pc, #60]	; (80053bc <DMA_CalcBaseAndBitshift+0x6c>)
 8005380:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8005382:	e00e      	b.n	80053a2 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	461a      	mov	r2, r3
 800538a:	4b0d      	ldr	r3, [pc, #52]	; (80053c0 <DMA_CalcBaseAndBitshift+0x70>)
 800538c:	4413      	add	r3, r2
 800538e:	4a0a      	ldr	r2, [pc, #40]	; (80053b8 <DMA_CalcBaseAndBitshift+0x68>)
 8005390:	fba2 2303 	umull	r2, r3, r2, r3
 8005394:	091b      	lsrs	r3, r3, #4
 8005396:	009a      	lsls	r2, r3, #2
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a09      	ldr	r2, [pc, #36]	; (80053c4 <DMA_CalcBaseAndBitshift+0x74>)
 80053a0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80053a2:	bf00      	nop
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	40020407 	.word	0x40020407
 80053b4:	bffdfff8 	.word	0xbffdfff8
 80053b8:	cccccccd 	.word	0xcccccccd
 80053bc:	40020000 	.word	0x40020000
 80053c0:	bffdfbf8 	.word	0xbffdfbf8
 80053c4:	40020400 	.word	0x40020400

080053c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b087      	sub	sp, #28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80053d2:	2300      	movs	r3, #0
 80053d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80053d6:	e160      	b.n	800569a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	2101      	movs	r1, #1
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	fa01 f303 	lsl.w	r3, r1, r3
 80053e4:	4013      	ands	r3, r2
 80053e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f000 8152 	beq.w	8005694 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f003 0303 	and.w	r3, r3, #3
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d005      	beq.n	8005408 <HAL_GPIO_Init+0x40>
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f003 0303 	and.w	r3, r3, #3
 8005404:	2b02      	cmp	r3, #2
 8005406:	d130      	bne.n	800546a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	005b      	lsls	r3, r3, #1
 8005412:	2203      	movs	r2, #3
 8005414:	fa02 f303 	lsl.w	r3, r2, r3
 8005418:	43db      	mvns	r3, r3
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	4013      	ands	r3, r2
 800541e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	68da      	ldr	r2, [r3, #12]
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	fa02 f303 	lsl.w	r3, r2, r3
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	4313      	orrs	r3, r2
 8005430:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800543e:	2201      	movs	r2, #1
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	fa02 f303 	lsl.w	r3, r2, r3
 8005446:	43db      	mvns	r3, r3
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	4013      	ands	r3, r2
 800544c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	091b      	lsrs	r3, r3, #4
 8005454:	f003 0201 	and.w	r2, r3, #1
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	fa02 f303 	lsl.w	r3, r2, r3
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	4313      	orrs	r3, r2
 8005462:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	2b03      	cmp	r3, #3
 8005474:	d017      	beq.n	80054a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	005b      	lsls	r3, r3, #1
 8005480:	2203      	movs	r2, #3
 8005482:	fa02 f303 	lsl.w	r3, r2, r3
 8005486:	43db      	mvns	r3, r3
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	4013      	ands	r3, r2
 800548c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	689a      	ldr	r2, [r3, #8]
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	fa02 f303 	lsl.w	r3, r2, r3
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	4313      	orrs	r3, r2
 800549e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f003 0303 	and.w	r3, r3, #3
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d123      	bne.n	80054fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	08da      	lsrs	r2, r3, #3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	3208      	adds	r2, #8
 80054ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f003 0307 	and.w	r3, r3, #7
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	220f      	movs	r2, #15
 80054ca:	fa02 f303 	lsl.w	r3, r2, r3
 80054ce:	43db      	mvns	r3, r3
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	4013      	ands	r3, r2
 80054d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	691a      	ldr	r2, [r3, #16]
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f003 0307 	and.w	r3, r3, #7
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	fa02 f303 	lsl.w	r3, r2, r3
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	08da      	lsrs	r2, r3, #3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	3208      	adds	r2, #8
 80054f4:	6939      	ldr	r1, [r7, #16]
 80054f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	2203      	movs	r2, #3
 8005506:	fa02 f303 	lsl.w	r3, r2, r3
 800550a:	43db      	mvns	r3, r3
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	4013      	ands	r3, r2
 8005510:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f003 0203 	and.w	r2, r3, #3
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	005b      	lsls	r3, r3, #1
 800551e:	fa02 f303 	lsl.w	r3, r2, r3
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	4313      	orrs	r3, r2
 8005526:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005536:	2b00      	cmp	r3, #0
 8005538:	f000 80ac 	beq.w	8005694 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800553c:	4b5e      	ldr	r3, [pc, #376]	; (80056b8 <HAL_GPIO_Init+0x2f0>)
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	4a5d      	ldr	r2, [pc, #372]	; (80056b8 <HAL_GPIO_Init+0x2f0>)
 8005542:	f043 0301 	orr.w	r3, r3, #1
 8005546:	6193      	str	r3, [r2, #24]
 8005548:	4b5b      	ldr	r3, [pc, #364]	; (80056b8 <HAL_GPIO_Init+0x2f0>)
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	60bb      	str	r3, [r7, #8]
 8005552:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005554:	4a59      	ldr	r2, [pc, #356]	; (80056bc <HAL_GPIO_Init+0x2f4>)
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	089b      	lsrs	r3, r3, #2
 800555a:	3302      	adds	r3, #2
 800555c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005560:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f003 0303 	and.w	r3, r3, #3
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	220f      	movs	r2, #15
 800556c:	fa02 f303 	lsl.w	r3, r2, r3
 8005570:	43db      	mvns	r3, r3
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	4013      	ands	r3, r2
 8005576:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800557e:	d025      	beq.n	80055cc <HAL_GPIO_Init+0x204>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a4f      	ldr	r2, [pc, #316]	; (80056c0 <HAL_GPIO_Init+0x2f8>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d01f      	beq.n	80055c8 <HAL_GPIO_Init+0x200>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a4e      	ldr	r2, [pc, #312]	; (80056c4 <HAL_GPIO_Init+0x2fc>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d019      	beq.n	80055c4 <HAL_GPIO_Init+0x1fc>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a4d      	ldr	r2, [pc, #308]	; (80056c8 <HAL_GPIO_Init+0x300>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d013      	beq.n	80055c0 <HAL_GPIO_Init+0x1f8>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a4c      	ldr	r2, [pc, #304]	; (80056cc <HAL_GPIO_Init+0x304>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d00d      	beq.n	80055bc <HAL_GPIO_Init+0x1f4>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a4b      	ldr	r2, [pc, #300]	; (80056d0 <HAL_GPIO_Init+0x308>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d007      	beq.n	80055b8 <HAL_GPIO_Init+0x1f0>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a4a      	ldr	r2, [pc, #296]	; (80056d4 <HAL_GPIO_Init+0x30c>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d101      	bne.n	80055b4 <HAL_GPIO_Init+0x1ec>
 80055b0:	2306      	movs	r3, #6
 80055b2:	e00c      	b.n	80055ce <HAL_GPIO_Init+0x206>
 80055b4:	2307      	movs	r3, #7
 80055b6:	e00a      	b.n	80055ce <HAL_GPIO_Init+0x206>
 80055b8:	2305      	movs	r3, #5
 80055ba:	e008      	b.n	80055ce <HAL_GPIO_Init+0x206>
 80055bc:	2304      	movs	r3, #4
 80055be:	e006      	b.n	80055ce <HAL_GPIO_Init+0x206>
 80055c0:	2303      	movs	r3, #3
 80055c2:	e004      	b.n	80055ce <HAL_GPIO_Init+0x206>
 80055c4:	2302      	movs	r3, #2
 80055c6:	e002      	b.n	80055ce <HAL_GPIO_Init+0x206>
 80055c8:	2301      	movs	r3, #1
 80055ca:	e000      	b.n	80055ce <HAL_GPIO_Init+0x206>
 80055cc:	2300      	movs	r3, #0
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	f002 0203 	and.w	r2, r2, #3
 80055d4:	0092      	lsls	r2, r2, #2
 80055d6:	4093      	lsls	r3, r2
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	4313      	orrs	r3, r2
 80055dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80055de:	4937      	ldr	r1, [pc, #220]	; (80056bc <HAL_GPIO_Init+0x2f4>)
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	089b      	lsrs	r3, r3, #2
 80055e4:	3302      	adds	r3, #2
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80055ec:	4b3a      	ldr	r3, [pc, #232]	; (80056d8 <HAL_GPIO_Init+0x310>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	43db      	mvns	r3, r3
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	4013      	ands	r3, r2
 80055fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d003      	beq.n	8005610 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	4313      	orrs	r3, r2
 800560e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005610:	4a31      	ldr	r2, [pc, #196]	; (80056d8 <HAL_GPIO_Init+0x310>)
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005616:	4b30      	ldr	r3, [pc, #192]	; (80056d8 <HAL_GPIO_Init+0x310>)
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	43db      	mvns	r3, r3
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	4013      	ands	r3, r2
 8005624:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4313      	orrs	r3, r2
 8005638:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800563a:	4a27      	ldr	r2, [pc, #156]	; (80056d8 <HAL_GPIO_Init+0x310>)
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005640:	4b25      	ldr	r3, [pc, #148]	; (80056d8 <HAL_GPIO_Init+0x310>)
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	43db      	mvns	r3, r3
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	4013      	ands	r3, r2
 800564e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d003      	beq.n	8005664 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	4313      	orrs	r3, r2
 8005662:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005664:	4a1c      	ldr	r2, [pc, #112]	; (80056d8 <HAL_GPIO_Init+0x310>)
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800566a:	4b1b      	ldr	r3, [pc, #108]	; (80056d8 <HAL_GPIO_Init+0x310>)
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	43db      	mvns	r3, r3
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	4013      	ands	r3, r2
 8005678:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4313      	orrs	r3, r2
 800568c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800568e:	4a12      	ldr	r2, [pc, #72]	; (80056d8 <HAL_GPIO_Init+0x310>)
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	3301      	adds	r3, #1
 8005698:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	fa22 f303 	lsr.w	r3, r2, r3
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f47f ae97 	bne.w	80053d8 <HAL_GPIO_Init+0x10>
  }
}
 80056aa:	bf00      	nop
 80056ac:	371c      	adds	r7, #28
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	40021000 	.word	0x40021000
 80056bc:	40010000 	.word	0x40010000
 80056c0:	48000400 	.word	0x48000400
 80056c4:	48000800 	.word	0x48000800
 80056c8:	48000c00 	.word	0x48000c00
 80056cc:	48001000 	.word	0x48001000
 80056d0:	48001400 	.word	0x48001400
 80056d4:	48001800 	.word	0x48001800
 80056d8:	40010400 	.word	0x40010400

080056dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	460b      	mov	r3, r1
 80056e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	691a      	ldr	r2, [r3, #16]
 80056ec:	887b      	ldrh	r3, [r7, #2]
 80056ee:	4013      	ands	r3, r2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80056f4:	2301      	movs	r3, #1
 80056f6:	73fb      	strb	r3, [r7, #15]
 80056f8:	e001      	b.n	80056fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80056fa:	2300      	movs	r3, #0
 80056fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80056fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005700:	4618      	mov	r0, r3
 8005702:	3714      	adds	r7, #20
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	460b      	mov	r3, r1
 8005716:	807b      	strh	r3, [r7, #2]
 8005718:	4613      	mov	r3, r2
 800571a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800571c:	787b      	ldrb	r3, [r7, #1]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d003      	beq.n	800572a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005722:	887a      	ldrh	r2, [r7, #2]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005728:	e002      	b.n	8005730 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800572a:	887a      	ldrh	r2, [r7, #2]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	4603      	mov	r3, r0
 8005744:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005746:	4b08      	ldr	r3, [pc, #32]	; (8005768 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005748:	695a      	ldr	r2, [r3, #20]
 800574a:	88fb      	ldrh	r3, [r7, #6]
 800574c:	4013      	ands	r3, r2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d006      	beq.n	8005760 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005752:	4a05      	ldr	r2, [pc, #20]	; (8005768 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005754:	88fb      	ldrh	r3, [r7, #6]
 8005756:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005758:	88fb      	ldrh	r3, [r7, #6]
 800575a:	4618      	mov	r0, r3
 800575c:	f7fc fa92 	bl	8001c84 <HAL_GPIO_EXTI_Callback>
  }
}
 8005760:	bf00      	nop
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	40010400 	.word	0x40010400

0800576c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e081      	b.n	8005882 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d106      	bne.n	8005798 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7fd f9aa 	bl	8002aec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2224      	movs	r2, #36	; 0x24
 800579c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f022 0201 	bic.w	r2, r2, #1
 80057ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80057bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	689a      	ldr	r2, [r3, #8]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80057cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d107      	bne.n	80057e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	689a      	ldr	r2, [r3, #8]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057e2:	609a      	str	r2, [r3, #8]
 80057e4:	e006      	b.n	80057f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	689a      	ldr	r2, [r3, #8]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80057f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d104      	bne.n	8005806 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005804:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	6812      	ldr	r2, [r2, #0]
 8005810:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005814:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005818:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68da      	ldr	r2, [r3, #12]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005828:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	691a      	ldr	r2, [r3, #16]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	430a      	orrs	r2, r1
 8005842:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	69d9      	ldr	r1, [r3, #28]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a1a      	ldr	r2, [r3, #32]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	430a      	orrs	r2, r1
 8005852:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f042 0201 	orr.w	r2, r2, #1
 8005862:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2220      	movs	r2, #32
 800586e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3708      	adds	r7, #8
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
	...

0800588c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b088      	sub	sp, #32
 8005890:	af02      	add	r7, sp, #8
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	607a      	str	r2, [r7, #4]
 8005896:	461a      	mov	r2, r3
 8005898:	460b      	mov	r3, r1
 800589a:	817b      	strh	r3, [r7, #10]
 800589c:	4613      	mov	r3, r2
 800589e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b20      	cmp	r3, #32
 80058aa:	f040 80da 	bne.w	8005a62 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d101      	bne.n	80058bc <HAL_I2C_Master_Transmit+0x30>
 80058b8:	2302      	movs	r3, #2
 80058ba:	e0d3      	b.n	8005a64 <HAL_I2C_Master_Transmit+0x1d8>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80058c4:	f7fd fe4e 	bl	8003564 <HAL_GetTick>
 80058c8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	9300      	str	r3, [sp, #0]
 80058ce:	2319      	movs	r3, #25
 80058d0:	2201      	movs	r2, #1
 80058d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	f000 f9e6 	bl	8005ca8 <I2C_WaitOnFlagUntilTimeout>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d001      	beq.n	80058e6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e0be      	b.n	8005a64 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2221      	movs	r2, #33	; 0x21
 80058ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2210      	movs	r2, #16
 80058f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	893a      	ldrh	r2, [r7, #8]
 8005906:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005912:	b29b      	uxth	r3, r3
 8005914:	2bff      	cmp	r3, #255	; 0xff
 8005916:	d90e      	bls.n	8005936 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	22ff      	movs	r2, #255	; 0xff
 800591c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005922:	b2da      	uxtb	r2, r3
 8005924:	8979      	ldrh	r1, [r7, #10]
 8005926:	4b51      	ldr	r3, [pc, #324]	; (8005a6c <HAL_I2C_Master_Transmit+0x1e0>)
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f000 fb58 	bl	8005fe4 <I2C_TransferConfig>
 8005934:	e06c      	b.n	8005a10 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800593a:	b29a      	uxth	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005944:	b2da      	uxtb	r2, r3
 8005946:	8979      	ldrh	r1, [r7, #10]
 8005948:	4b48      	ldr	r3, [pc, #288]	; (8005a6c <HAL_I2C_Master_Transmit+0x1e0>)
 800594a:	9300      	str	r3, [sp, #0]
 800594c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f000 fb47 	bl	8005fe4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005956:	e05b      	b.n	8005a10 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	6a39      	ldr	r1, [r7, #32]
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f000 f9e3 	bl	8005d28 <I2C_WaitOnTXISFlagUntilTimeout>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e07b      	b.n	8005a64 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005970:	781a      	ldrb	r2, [r3, #0]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597c:	1c5a      	adds	r2, r3, #1
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005986:	b29b      	uxth	r3, r3
 8005988:	3b01      	subs	r3, #1
 800598a:	b29a      	uxth	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005994:	3b01      	subs	r3, #1
 8005996:	b29a      	uxth	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d034      	beq.n	8005a10 <HAL_I2C_Master_Transmit+0x184>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d130      	bne.n	8005a10 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	9300      	str	r3, [sp, #0]
 80059b2:	6a3b      	ldr	r3, [r7, #32]
 80059b4:	2200      	movs	r2, #0
 80059b6:	2180      	movs	r1, #128	; 0x80
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f000 f975 	bl	8005ca8 <I2C_WaitOnFlagUntilTimeout>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d001      	beq.n	80059c8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e04d      	b.n	8005a64 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	2bff      	cmp	r3, #255	; 0xff
 80059d0:	d90e      	bls.n	80059f0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	22ff      	movs	r2, #255	; 0xff
 80059d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059dc:	b2da      	uxtb	r2, r3
 80059de:	8979      	ldrh	r1, [r7, #10]
 80059e0:	2300      	movs	r3, #0
 80059e2:	9300      	str	r3, [sp, #0]
 80059e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f000 fafb 	bl	8005fe4 <I2C_TransferConfig>
 80059ee:	e00f      	b.n	8005a10 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	8979      	ldrh	r1, [r7, #10]
 8005a02:	2300      	movs	r3, #0
 8005a04:	9300      	str	r3, [sp, #0]
 8005a06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f000 faea 	bl	8005fe4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d19e      	bne.n	8005958 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	6a39      	ldr	r1, [r7, #32]
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f000 f9c2 	bl	8005da8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e01a      	b.n	8005a64 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2220      	movs	r2, #32
 8005a34:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	6859      	ldr	r1, [r3, #4]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	4b0b      	ldr	r3, [pc, #44]	; (8005a70 <HAL_I2C_Master_Transmit+0x1e4>)
 8005a42:	400b      	ands	r3, r1
 8005a44:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	e000      	b.n	8005a64 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005a62:	2302      	movs	r3, #2
  }
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3718      	adds	r7, #24
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	80002000 	.word	0x80002000
 8005a70:	fe00e800 	.word	0xfe00e800

08005a74 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b088      	sub	sp, #32
 8005a78:	af02      	add	r7, sp, #8
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	607a      	str	r2, [r7, #4]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	460b      	mov	r3, r1
 8005a82:	817b      	strh	r3, [r7, #10]
 8005a84:	4613      	mov	r3, r2
 8005a86:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b20      	cmp	r3, #32
 8005a92:	f040 80db 	bne.w	8005c4c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d101      	bne.n	8005aa4 <HAL_I2C_Master_Receive+0x30>
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	e0d4      	b.n	8005c4e <HAL_I2C_Master_Receive+0x1da>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005aac:	f7fd fd5a 	bl	8003564 <HAL_GetTick>
 8005ab0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	2319      	movs	r3, #25
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	f000 f8f2 	bl	8005ca8 <I2C_WaitOnFlagUntilTimeout>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d001      	beq.n	8005ace <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e0bf      	b.n	8005c4e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2222      	movs	r2, #34	; 0x22
 8005ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2210      	movs	r2, #16
 8005ada:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	893a      	ldrh	r2, [r7, #8]
 8005aee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	2bff      	cmp	r3, #255	; 0xff
 8005afe:	d90e      	bls.n	8005b1e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	22ff      	movs	r2, #255	; 0xff
 8005b04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b0a:	b2da      	uxtb	r2, r3
 8005b0c:	8979      	ldrh	r1, [r7, #10]
 8005b0e:	4b52      	ldr	r3, [pc, #328]	; (8005c58 <HAL_I2C_Master_Receive+0x1e4>)
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f000 fa64 	bl	8005fe4 <I2C_TransferConfig>
 8005b1c:	e06d      	b.n	8005bfa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	8979      	ldrh	r1, [r7, #10]
 8005b30:	4b49      	ldr	r3, [pc, #292]	; (8005c58 <HAL_I2C_Master_Receive+0x1e4>)
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 fa53 	bl	8005fe4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005b3e:	e05c      	b.n	8005bfa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	6a39      	ldr	r1, [r7, #32]
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f000 f96b 	bl	8005e20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d001      	beq.n	8005b54 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e07c      	b.n	8005c4e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5e:	b2d2      	uxtb	r2, r2
 8005b60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b66:	1c5a      	adds	r2, r3, #1
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b70:	3b01      	subs	r3, #1
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d034      	beq.n	8005bfa <HAL_I2C_Master_Receive+0x186>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d130      	bne.n	8005bfa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	6a3b      	ldr	r3, [r7, #32]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	2180      	movs	r1, #128	; 0x80
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f000 f880 	bl	8005ca8 <I2C_WaitOnFlagUntilTimeout>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e04d      	b.n	8005c4e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	2bff      	cmp	r3, #255	; 0xff
 8005bba:	d90e      	bls.n	8005bda <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	22ff      	movs	r2, #255	; 0xff
 8005bc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bc6:	b2da      	uxtb	r2, r3
 8005bc8:	8979      	ldrh	r1, [r7, #10]
 8005bca:	2300      	movs	r3, #0
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f000 fa06 	bl	8005fe4 <I2C_TransferConfig>
 8005bd8:	e00f      	b.n	8005bfa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be8:	b2da      	uxtb	r2, r3
 8005bea:	8979      	ldrh	r1, [r7, #10]
 8005bec:	2300      	movs	r3, #0
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f000 f9f5 	bl	8005fe4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d19d      	bne.n	8005b40 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	6a39      	ldr	r1, [r7, #32]
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f000 f8cd 	bl	8005da8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d001      	beq.n	8005c18 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e01a      	b.n	8005c4e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6859      	ldr	r1, [r3, #4]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	4b0c      	ldr	r3, [pc, #48]	; (8005c5c <HAL_I2C_Master_Receive+0x1e8>)
 8005c2c:	400b      	ands	r3, r1
 8005c2e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2220      	movs	r2, #32
 8005c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	e000      	b.n	8005c4e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005c4c:	2302      	movs	r3, #2
  }
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	80002400 	.word	0x80002400
 8005c5c:	fe00e800 	.word	0xfe00e800

08005c60 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d103      	bne.n	8005c7e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d007      	beq.n	8005c9c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	699a      	ldr	r2, [r3, #24]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f042 0201 	orr.w	r2, r2, #1
 8005c9a:	619a      	str	r2, [r3, #24]
  }
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	603b      	str	r3, [r7, #0]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cb8:	e022      	b.n	8005d00 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc0:	d01e      	beq.n	8005d00 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cc2:	f7fd fc4f 	bl	8003564 <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	683a      	ldr	r2, [r7, #0]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d302      	bcc.n	8005cd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d113      	bne.n	8005d00 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cdc:	f043 0220 	orr.w	r2, r3, #32
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e00f      	b.n	8005d20 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	699a      	ldr	r2, [r3, #24]
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	4013      	ands	r3, r2
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	bf0c      	ite	eq
 8005d10:	2301      	moveq	r3, #1
 8005d12:	2300      	movne	r3, #0
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	461a      	mov	r2, r3
 8005d18:	79fb      	ldrb	r3, [r7, #7]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d0cd      	beq.n	8005cba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d34:	e02c      	b.n	8005d90 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	68b9      	ldr	r1, [r7, #8]
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f000 f8dc 	bl	8005ef8 <I2C_IsAcknowledgeFailed>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d001      	beq.n	8005d4a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e02a      	b.n	8005da0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d50:	d01e      	beq.n	8005d90 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d52:	f7fd fc07 	bl	8003564 <HAL_GetTick>
 8005d56:	4602      	mov	r2, r0
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d302      	bcc.n	8005d68 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d113      	bne.n	8005d90 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d6c:	f043 0220 	orr.w	r2, r3, #32
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2220      	movs	r2, #32
 8005d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e007      	b.n	8005da0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d1cb      	bne.n	8005d36 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005db4:	e028      	b.n	8005e08 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	68b9      	ldr	r1, [r7, #8]
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f000 f89c 	bl	8005ef8 <I2C_IsAcknowledgeFailed>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d001      	beq.n	8005dca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e026      	b.n	8005e18 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dca:	f7fd fbcb 	bl	8003564 <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d302      	bcc.n	8005de0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d113      	bne.n	8005e08 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de4:	f043 0220 	orr.w	r2, r3, #32
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2220      	movs	r2, #32
 8005df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e007      	b.n	8005e18 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	f003 0320 	and.w	r3, r3, #32
 8005e12:	2b20      	cmp	r3, #32
 8005e14:	d1cf      	bne.n	8005db6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e2c:	e055      	b.n	8005eda <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	68b9      	ldr	r1, [r7, #8]
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f000 f860 	bl	8005ef8 <I2C_IsAcknowledgeFailed>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e053      	b.n	8005eea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	f003 0320 	and.w	r3, r3, #32
 8005e4c:	2b20      	cmp	r3, #32
 8005e4e:	d129      	bne.n	8005ea4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	f003 0304 	and.w	r3, r3, #4
 8005e5a:	2b04      	cmp	r3, #4
 8005e5c:	d105      	bne.n	8005e6a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d001      	beq.n	8005e6a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005e66:	2300      	movs	r3, #0
 8005e68:	e03f      	b.n	8005eea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	6859      	ldr	r1, [r3, #4]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	4b1d      	ldr	r3, [pc, #116]	; (8005ef4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8005e7e:	400b      	ands	r3, r1
 8005e80:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e022      	b.n	8005eea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ea4:	f7fd fb5e 	bl	8003564 <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d302      	bcc.n	8005eba <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10f      	bne.n	8005eda <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ebe:	f043 0220 	orr.w	r2, r3, #32
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e007      	b.n	8005eea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	f003 0304 	and.w	r3, r3, #4
 8005ee4:	2b04      	cmp	r3, #4
 8005ee6:	d1a2      	bne.n	8005e2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	fe00e800 	.word	0xfe00e800

08005ef8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	f003 0310 	and.w	r3, r3, #16
 8005f0e:	2b10      	cmp	r3, #16
 8005f10:	d161      	bne.n	8005fd6 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f20:	d02b      	beq.n	8005f7a <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f30:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f32:	e022      	b.n	8005f7a <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3a:	d01e      	beq.n	8005f7a <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f3c:	f7fd fb12 	bl	8003564 <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d302      	bcc.n	8005f52 <I2C_IsAcknowledgeFailed+0x5a>
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d113      	bne.n	8005f7a <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f56:	f043 0220 	orr.w	r2, r3, #32
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2220      	movs	r2, #32
 8005f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e02e      	b.n	8005fd8 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	f003 0320 	and.w	r3, r3, #32
 8005f84:	2b20      	cmp	r3, #32
 8005f86:	d1d5      	bne.n	8005f34 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2210      	movs	r2, #16
 8005f8e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2220      	movs	r2, #32
 8005f96:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f7ff fe61 	bl	8005c60 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	6859      	ldr	r1, [r3, #4]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	4b0d      	ldr	r3, [pc, #52]	; (8005fe0 <I2C_IsAcknowledgeFailed+0xe8>)
 8005faa:	400b      	ands	r3, r1
 8005fac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb2:	f043 0204 	orr.w	r2, r3, #4
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e000      	b.n	8005fd8 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	fe00e800 	.word	0xfe00e800

08005fe4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	607b      	str	r3, [r7, #4]
 8005fee:	460b      	mov	r3, r1
 8005ff0:	817b      	strh	r3, [r7, #10]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	685a      	ldr	r2, [r3, #4]
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	0d5b      	lsrs	r3, r3, #21
 8006000:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006004:	4b0d      	ldr	r3, [pc, #52]	; (800603c <I2C_TransferConfig+0x58>)
 8006006:	430b      	orrs	r3, r1
 8006008:	43db      	mvns	r3, r3
 800600a:	ea02 0103 	and.w	r1, r2, r3
 800600e:	897b      	ldrh	r3, [r7, #10]
 8006010:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006014:	7a7b      	ldrb	r3, [r7, #9]
 8006016:	041b      	lsls	r3, r3, #16
 8006018:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800601c:	431a      	orrs	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	431a      	orrs	r2, r3
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	431a      	orrs	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	430a      	orrs	r2, r1
 800602c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800602e:	bf00      	nop
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	03ff63ff 	.word	0x03ff63ff

08006040 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b20      	cmp	r3, #32
 8006054:	d138      	bne.n	80060c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800605c:	2b01      	cmp	r3, #1
 800605e:	d101      	bne.n	8006064 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006060:	2302      	movs	r3, #2
 8006062:	e032      	b.n	80060ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2224      	movs	r2, #36	; 0x24
 8006070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f022 0201 	bic.w	r2, r2, #1
 8006082:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006092:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6819      	ldr	r1, [r3, #0]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	683a      	ldr	r2, [r7, #0]
 80060a0:	430a      	orrs	r2, r1
 80060a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f042 0201 	orr.w	r2, r2, #1
 80060b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2220      	movs	r2, #32
 80060b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80060c4:	2300      	movs	r3, #0
 80060c6:	e000      	b.n	80060ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80060c8:	2302      	movs	r3, #2
  }
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr

080060d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b085      	sub	sp, #20
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
 80060de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b20      	cmp	r3, #32
 80060ea:	d139      	bne.n	8006160 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d101      	bne.n	80060fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80060f6:	2302      	movs	r3, #2
 80060f8:	e033      	b.n	8006162 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2224      	movs	r2, #36	; 0x24
 8006106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f022 0201 	bic.w	r2, r2, #1
 8006118:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006128:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	021b      	lsls	r3, r3, #8
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	4313      	orrs	r3, r2
 8006132:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f042 0201 	orr.w	r2, r2, #1
 800614a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2220      	movs	r2, #32
 8006150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800615c:	2300      	movs	r3, #0
 800615e:	e000      	b.n	8006162 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006160:	2302      	movs	r3, #2
  }
}
 8006162:	4618      	mov	r0, r3
 8006164:	3714      	adds	r7, #20
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
	...

08006170 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8006176:	af00      	add	r7, sp, #0
 8006178:	1d3b      	adds	r3, r7, #4
 800617a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800617c:	1d3b      	adds	r3, r7, #4
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d102      	bne.n	800618a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	f000 bf01 	b.w	8006f8c <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800618a:	1d3b      	adds	r3, r7, #4
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0301 	and.w	r3, r3, #1
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 8160 	beq.w	800645a <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800619a:	4bae      	ldr	r3, [pc, #696]	; (8006454 <HAL_RCC_OscConfig+0x2e4>)
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f003 030c 	and.w	r3, r3, #12
 80061a2:	2b04      	cmp	r3, #4
 80061a4:	d00c      	beq.n	80061c0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80061a6:	4bab      	ldr	r3, [pc, #684]	; (8006454 <HAL_RCC_OscConfig+0x2e4>)
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	f003 030c 	and.w	r3, r3, #12
 80061ae:	2b08      	cmp	r3, #8
 80061b0:	d159      	bne.n	8006266 <HAL_RCC_OscConfig+0xf6>
 80061b2:	4ba8      	ldr	r3, [pc, #672]	; (8006454 <HAL_RCC_OscConfig+0x2e4>)
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80061ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061be:	d152      	bne.n	8006266 <HAL_RCC_OscConfig+0xf6>
 80061c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061c4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061c8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80061cc:	fa93 f3a3 	rbit	r3, r3
 80061d0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80061d4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061d8:	fab3 f383 	clz	r3, r3
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	095b      	lsrs	r3, r3, #5
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	f043 0301 	orr.w	r3, r3, #1
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d102      	bne.n	80061f2 <HAL_RCC_OscConfig+0x82>
 80061ec:	4b99      	ldr	r3, [pc, #612]	; (8006454 <HAL_RCC_OscConfig+0x2e4>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	e015      	b.n	800621e <HAL_RCC_OscConfig+0xae>
 80061f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061f6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061fa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80061fe:	fa93 f3a3 	rbit	r3, r3
 8006202:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8006206:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800620a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800620e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006212:	fa93 f3a3 	rbit	r3, r3
 8006216:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800621a:	4b8e      	ldr	r3, [pc, #568]	; (8006454 <HAL_RCC_OscConfig+0x2e4>)
 800621c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006222:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8006226:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800622a:	fa92 f2a2 	rbit	r2, r2
 800622e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8006232:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8006236:	fab2 f282 	clz	r2, r2
 800623a:	b2d2      	uxtb	r2, r2
 800623c:	f042 0220 	orr.w	r2, r2, #32
 8006240:	b2d2      	uxtb	r2, r2
 8006242:	f002 021f 	and.w	r2, r2, #31
 8006246:	2101      	movs	r1, #1
 8006248:	fa01 f202 	lsl.w	r2, r1, r2
 800624c:	4013      	ands	r3, r2
 800624e:	2b00      	cmp	r3, #0
 8006250:	f000 8102 	beq.w	8006458 <HAL_RCC_OscConfig+0x2e8>
 8006254:	1d3b      	adds	r3, r7, #4
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	f040 80fc 	bne.w	8006458 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	f000 be93 	b.w	8006f8c <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006266:	1d3b      	adds	r3, r7, #4
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006270:	d106      	bne.n	8006280 <HAL_RCC_OscConfig+0x110>
 8006272:	4b78      	ldr	r3, [pc, #480]	; (8006454 <HAL_RCC_OscConfig+0x2e4>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a77      	ldr	r2, [pc, #476]	; (8006454 <HAL_RCC_OscConfig+0x2e4>)
 8006278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800627c:	6013      	str	r3, [r2, #0]
 800627e:	e030      	b.n	80062e2 <HAL_RCC_OscConfig+0x172>
 8006280:	1d3b      	adds	r3, r7, #4
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10c      	bne.n	80062a4 <HAL_RCC_OscConfig+0x134>
 800628a:	4b72      	ldr	r3, [pc, #456]	; (8006454 <HAL_RCC_OscConfig+0x2e4>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a71      	ldr	r2, [pc, #452]	; (8006454 <HAL_RCC_OscConfig+0x2e4>)
 8006290:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006294:	6013      	str	r3, [r2, #0]
 8006296:	4b6f      	ldr	r3, [pc, #444]	; (8006454 <HAL_RCC_OscConfig+0x2e4>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a6e      	ldr	r2, [pc, #440]	; (8006454 <HAL_RCC_OscConfig+0x2e4>)
 800629c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062a0:	6013      	str	r3, [r2, #0]
 80062a2:	e01e      	b.n	80062e2 <HAL_RCC_OscConfig+0x172>
 80062a4:	1d3b      	adds	r3, r7, #4
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062ae:	d10c      	bne.n	80062ca <HAL_RCC_OscConfig+0x15a>
 80062b0:	4b68      	ldr	r3, [pc, #416]	; (8006454 <HAL_RCC_OscConfig+0x2e4>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a67      	ldr	r2, [pc, #412]	; (8006454 <HAL_RCC_OscConfig+0x2e4>)
 80062b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062ba:	6013      	str	r3, [r2, #0]
 80062bc:	4b65      	ldr	r3, [pc, #404]	; (8006454 <HAL_RCC_OscConfig+0x2e4>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a64      	ldr	r2, [pc, #400]	; (8006454 <HAL_RCC_OscConfig+0x2e4>)
 80062c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062c6:	6013      	str	r3, [r2, #0]
 80062c8:	e00b      	b.n	80062e2 <HAL_RCC_OscConfig+0x172>
 80062ca:	4b62      	ldr	r3, [pc, #392]	; (8006454 <HAL_RCC_OscConfig+0x2e4>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a61      	ldr	r2, [pc, #388]	; (8006454 <HAL_RCC_OscConfig+0x2e4>)
 80062d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062d4:	6013      	str	r3, [r2, #0]
 80062d6:	4b5f      	ldr	r3, [pc, #380]	; (8006454 <HAL_RCC_OscConfig+0x2e4>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a5e      	ldr	r2, [pc, #376]	; (8006454 <HAL_RCC_OscConfig+0x2e4>)
 80062dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062e0:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062e2:	1d3b      	adds	r3, r7, #4
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d059      	beq.n	80063a0 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062ec:	f7fd f93a 	bl	8003564 <HAL_GetTick>
 80062f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062f4:	e00a      	b.n	800630c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062f6:	f7fd f935 	bl	8003564 <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	2b64      	cmp	r3, #100	; 0x64
 8006304:	d902      	bls.n	800630c <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	f000 be40 	b.w	8006f8c <HAL_RCC_OscConfig+0xe1c>
 800630c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006310:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006314:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8006318:	fa93 f3a3 	rbit	r3, r3
 800631c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8006320:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006324:	fab3 f383 	clz	r3, r3
 8006328:	b2db      	uxtb	r3, r3
 800632a:	095b      	lsrs	r3, r3, #5
 800632c:	b2db      	uxtb	r3, r3
 800632e:	f043 0301 	orr.w	r3, r3, #1
 8006332:	b2db      	uxtb	r3, r3
 8006334:	2b01      	cmp	r3, #1
 8006336:	d102      	bne.n	800633e <HAL_RCC_OscConfig+0x1ce>
 8006338:	4b46      	ldr	r3, [pc, #280]	; (8006454 <HAL_RCC_OscConfig+0x2e4>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	e015      	b.n	800636a <HAL_RCC_OscConfig+0x1fa>
 800633e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006342:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006346:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800634a:	fa93 f3a3 	rbit	r3, r3
 800634e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8006352:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006356:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800635a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800635e:	fa93 f3a3 	rbit	r3, r3
 8006362:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006366:	4b3b      	ldr	r3, [pc, #236]	; (8006454 <HAL_RCC_OscConfig+0x2e4>)
 8006368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800636e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8006372:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8006376:	fa92 f2a2 	rbit	r2, r2
 800637a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800637e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8006382:	fab2 f282 	clz	r2, r2
 8006386:	b2d2      	uxtb	r2, r2
 8006388:	f042 0220 	orr.w	r2, r2, #32
 800638c:	b2d2      	uxtb	r2, r2
 800638e:	f002 021f 	and.w	r2, r2, #31
 8006392:	2101      	movs	r1, #1
 8006394:	fa01 f202 	lsl.w	r2, r1, r2
 8006398:	4013      	ands	r3, r2
 800639a:	2b00      	cmp	r3, #0
 800639c:	d0ab      	beq.n	80062f6 <HAL_RCC_OscConfig+0x186>
 800639e:	e05c      	b.n	800645a <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063a0:	f7fd f8e0 	bl	8003564 <HAL_GetTick>
 80063a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063a8:	e00a      	b.n	80063c0 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063aa:	f7fd f8db 	bl	8003564 <HAL_GetTick>
 80063ae:	4602      	mov	r2, r0
 80063b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	2b64      	cmp	r3, #100	; 0x64
 80063b8:	d902      	bls.n	80063c0 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	f000 bde6 	b.w	8006f8c <HAL_RCC_OscConfig+0xe1c>
 80063c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80063c4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80063cc:	fa93 f3a3 	rbit	r3, r3
 80063d0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80063d4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063d8:	fab3 f383 	clz	r3, r3
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	095b      	lsrs	r3, r3, #5
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	f043 0301 	orr.w	r3, r3, #1
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d102      	bne.n	80063f2 <HAL_RCC_OscConfig+0x282>
 80063ec:	4b19      	ldr	r3, [pc, #100]	; (8006454 <HAL_RCC_OscConfig+0x2e4>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	e015      	b.n	800641e <HAL_RCC_OscConfig+0x2ae>
 80063f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80063f6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063fa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80063fe:	fa93 f3a3 	rbit	r3, r3
 8006402:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8006406:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800640a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800640e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8006412:	fa93 f3a3 	rbit	r3, r3
 8006416:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800641a:	4b0e      	ldr	r3, [pc, #56]	; (8006454 <HAL_RCC_OscConfig+0x2e4>)
 800641c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006422:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8006426:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800642a:	fa92 f2a2 	rbit	r2, r2
 800642e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8006432:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006436:	fab2 f282 	clz	r2, r2
 800643a:	b2d2      	uxtb	r2, r2
 800643c:	f042 0220 	orr.w	r2, r2, #32
 8006440:	b2d2      	uxtb	r2, r2
 8006442:	f002 021f 	and.w	r2, r2, #31
 8006446:	2101      	movs	r1, #1
 8006448:	fa01 f202 	lsl.w	r2, r1, r2
 800644c:	4013      	ands	r3, r2
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1ab      	bne.n	80063aa <HAL_RCC_OscConfig+0x23a>
 8006452:	e002      	b.n	800645a <HAL_RCC_OscConfig+0x2ea>
 8006454:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800645a:	1d3b      	adds	r3, r7, #4
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0302 	and.w	r3, r3, #2
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 8170 	beq.w	800674a <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800646a:	4bd0      	ldr	r3, [pc, #832]	; (80067ac <HAL_RCC_OscConfig+0x63c>)
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f003 030c 	and.w	r3, r3, #12
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00c      	beq.n	8006490 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006476:	4bcd      	ldr	r3, [pc, #820]	; (80067ac <HAL_RCC_OscConfig+0x63c>)
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f003 030c 	and.w	r3, r3, #12
 800647e:	2b08      	cmp	r3, #8
 8006480:	d16d      	bne.n	800655e <HAL_RCC_OscConfig+0x3ee>
 8006482:	4bca      	ldr	r3, [pc, #808]	; (80067ac <HAL_RCC_OscConfig+0x63c>)
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800648a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800648e:	d166      	bne.n	800655e <HAL_RCC_OscConfig+0x3ee>
 8006490:	2302      	movs	r3, #2
 8006492:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006496:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800649a:	fa93 f3a3 	rbit	r3, r3
 800649e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80064a2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064a6:	fab3 f383 	clz	r3, r3
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	095b      	lsrs	r3, r3, #5
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	f043 0301 	orr.w	r3, r3, #1
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d102      	bne.n	80064c0 <HAL_RCC_OscConfig+0x350>
 80064ba:	4bbc      	ldr	r3, [pc, #752]	; (80067ac <HAL_RCC_OscConfig+0x63c>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	e013      	b.n	80064e8 <HAL_RCC_OscConfig+0x378>
 80064c0:	2302      	movs	r3, #2
 80064c2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064c6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80064ca:	fa93 f3a3 	rbit	r3, r3
 80064ce:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80064d2:	2302      	movs	r3, #2
 80064d4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80064d8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80064dc:	fa93 f3a3 	rbit	r3, r3
 80064e0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80064e4:	4bb1      	ldr	r3, [pc, #708]	; (80067ac <HAL_RCC_OscConfig+0x63c>)
 80064e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e8:	2202      	movs	r2, #2
 80064ea:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80064ee:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80064f2:	fa92 f2a2 	rbit	r2, r2
 80064f6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80064fa:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80064fe:	fab2 f282 	clz	r2, r2
 8006502:	b2d2      	uxtb	r2, r2
 8006504:	f042 0220 	orr.w	r2, r2, #32
 8006508:	b2d2      	uxtb	r2, r2
 800650a:	f002 021f 	and.w	r2, r2, #31
 800650e:	2101      	movs	r1, #1
 8006510:	fa01 f202 	lsl.w	r2, r1, r2
 8006514:	4013      	ands	r3, r2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d007      	beq.n	800652a <HAL_RCC_OscConfig+0x3ba>
 800651a:	1d3b      	adds	r3, r7, #4
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d002      	beq.n	800652a <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	f000 bd31 	b.w	8006f8c <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800652a:	4ba0      	ldr	r3, [pc, #640]	; (80067ac <HAL_RCC_OscConfig+0x63c>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006532:	1d3b      	adds	r3, r7, #4
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	21f8      	movs	r1, #248	; 0xf8
 800653a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800653e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8006542:	fa91 f1a1 	rbit	r1, r1
 8006546:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800654a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800654e:	fab1 f181 	clz	r1, r1
 8006552:	b2c9      	uxtb	r1, r1
 8006554:	408b      	lsls	r3, r1
 8006556:	4995      	ldr	r1, [pc, #596]	; (80067ac <HAL_RCC_OscConfig+0x63c>)
 8006558:	4313      	orrs	r3, r2
 800655a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800655c:	e0f5      	b.n	800674a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800655e:	1d3b      	adds	r3, r7, #4
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 8085 	beq.w	8006674 <HAL_RCC_OscConfig+0x504>
 800656a:	2301      	movs	r3, #1
 800656c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006570:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8006574:	fa93 f3a3 	rbit	r3, r3
 8006578:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800657c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006580:	fab3 f383 	clz	r3, r3
 8006584:	b2db      	uxtb	r3, r3
 8006586:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800658a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	461a      	mov	r2, r3
 8006592:	2301      	movs	r3, #1
 8006594:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006596:	f7fc ffe5 	bl	8003564 <HAL_GetTick>
 800659a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800659e:	e00a      	b.n	80065b6 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065a0:	f7fc ffe0 	bl	8003564 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d902      	bls.n	80065b6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80065b0:	2303      	movs	r3, #3
 80065b2:	f000 bceb 	b.w	8006f8c <HAL_RCC_OscConfig+0xe1c>
 80065b6:	2302      	movs	r3, #2
 80065b8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065bc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80065c0:	fa93 f3a3 	rbit	r3, r3
 80065c4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80065c8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065cc:	fab3 f383 	clz	r3, r3
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	095b      	lsrs	r3, r3, #5
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	f043 0301 	orr.w	r3, r3, #1
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d102      	bne.n	80065e6 <HAL_RCC_OscConfig+0x476>
 80065e0:	4b72      	ldr	r3, [pc, #456]	; (80067ac <HAL_RCC_OscConfig+0x63c>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	e013      	b.n	800660e <HAL_RCC_OscConfig+0x49e>
 80065e6:	2302      	movs	r3, #2
 80065e8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065ec:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80065f0:	fa93 f3a3 	rbit	r3, r3
 80065f4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80065f8:	2302      	movs	r3, #2
 80065fa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80065fe:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8006602:	fa93 f3a3 	rbit	r3, r3
 8006606:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800660a:	4b68      	ldr	r3, [pc, #416]	; (80067ac <HAL_RCC_OscConfig+0x63c>)
 800660c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660e:	2202      	movs	r2, #2
 8006610:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8006614:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8006618:	fa92 f2a2 	rbit	r2, r2
 800661c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8006620:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006624:	fab2 f282 	clz	r2, r2
 8006628:	b2d2      	uxtb	r2, r2
 800662a:	f042 0220 	orr.w	r2, r2, #32
 800662e:	b2d2      	uxtb	r2, r2
 8006630:	f002 021f 	and.w	r2, r2, #31
 8006634:	2101      	movs	r1, #1
 8006636:	fa01 f202 	lsl.w	r2, r1, r2
 800663a:	4013      	ands	r3, r2
 800663c:	2b00      	cmp	r3, #0
 800663e:	d0af      	beq.n	80065a0 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006640:	4b5a      	ldr	r3, [pc, #360]	; (80067ac <HAL_RCC_OscConfig+0x63c>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006648:	1d3b      	adds	r3, r7, #4
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	21f8      	movs	r1, #248	; 0xf8
 8006650:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006654:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8006658:	fa91 f1a1 	rbit	r1, r1
 800665c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8006660:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006664:	fab1 f181 	clz	r1, r1
 8006668:	b2c9      	uxtb	r1, r1
 800666a:	408b      	lsls	r3, r1
 800666c:	494f      	ldr	r1, [pc, #316]	; (80067ac <HAL_RCC_OscConfig+0x63c>)
 800666e:	4313      	orrs	r3, r2
 8006670:	600b      	str	r3, [r1, #0]
 8006672:	e06a      	b.n	800674a <HAL_RCC_OscConfig+0x5da>
 8006674:	2301      	movs	r3, #1
 8006676:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800667a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800667e:	fa93 f3a3 	rbit	r3, r3
 8006682:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8006686:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800668a:	fab3 f383 	clz	r3, r3
 800668e:	b2db      	uxtb	r3, r3
 8006690:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006694:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	461a      	mov	r2, r3
 800669c:	2300      	movs	r3, #0
 800669e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066a0:	f7fc ff60 	bl	8003564 <HAL_GetTick>
 80066a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066a8:	e00a      	b.n	80066c0 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066aa:	f7fc ff5b 	bl	8003564 <HAL_GetTick>
 80066ae:	4602      	mov	r2, r0
 80066b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d902      	bls.n	80066c0 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	f000 bc66 	b.w	8006f8c <HAL_RCC_OscConfig+0xe1c>
 80066c0:	2302      	movs	r3, #2
 80066c2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80066ca:	fa93 f3a3 	rbit	r3, r3
 80066ce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80066d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066d6:	fab3 f383 	clz	r3, r3
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	095b      	lsrs	r3, r3, #5
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	f043 0301 	orr.w	r3, r3, #1
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d102      	bne.n	80066f0 <HAL_RCC_OscConfig+0x580>
 80066ea:	4b30      	ldr	r3, [pc, #192]	; (80067ac <HAL_RCC_OscConfig+0x63c>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	e013      	b.n	8006718 <HAL_RCC_OscConfig+0x5a8>
 80066f0:	2302      	movs	r3, #2
 80066f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066fa:	fa93 f3a3 	rbit	r3, r3
 80066fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006702:	2302      	movs	r3, #2
 8006704:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006708:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800670c:	fa93 f3a3 	rbit	r3, r3
 8006710:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006714:	4b25      	ldr	r3, [pc, #148]	; (80067ac <HAL_RCC_OscConfig+0x63c>)
 8006716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006718:	2202      	movs	r2, #2
 800671a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800671e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8006722:	fa92 f2a2 	rbit	r2, r2
 8006726:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800672a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800672e:	fab2 f282 	clz	r2, r2
 8006732:	b2d2      	uxtb	r2, r2
 8006734:	f042 0220 	orr.w	r2, r2, #32
 8006738:	b2d2      	uxtb	r2, r2
 800673a:	f002 021f 	and.w	r2, r2, #31
 800673e:	2101      	movs	r1, #1
 8006740:	fa01 f202 	lsl.w	r2, r1, r2
 8006744:	4013      	ands	r3, r2
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1af      	bne.n	80066aa <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800674a:	1d3b      	adds	r3, r7, #4
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0308 	and.w	r3, r3, #8
 8006754:	2b00      	cmp	r3, #0
 8006756:	f000 80da 	beq.w	800690e <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800675a:	1d3b      	adds	r3, r7, #4
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d069      	beq.n	8006838 <HAL_RCC_OscConfig+0x6c8>
 8006764:	2301      	movs	r3, #1
 8006766:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800676a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800676e:	fa93 f3a3 	rbit	r3, r3
 8006772:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8006776:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800677a:	fab3 f383 	clz	r3, r3
 800677e:	b2db      	uxtb	r3, r3
 8006780:	461a      	mov	r2, r3
 8006782:	4b0b      	ldr	r3, [pc, #44]	; (80067b0 <HAL_RCC_OscConfig+0x640>)
 8006784:	4413      	add	r3, r2
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	461a      	mov	r2, r3
 800678a:	2301      	movs	r3, #1
 800678c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800678e:	f7fc fee9 	bl	8003564 <HAL_GetTick>
 8006792:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006796:	e00d      	b.n	80067b4 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006798:	f7fc fee4 	bl	8003564 <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d905      	bls.n	80067b4 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e3ef      	b.n	8006f8c <HAL_RCC_OscConfig+0xe1c>
 80067ac:	40021000 	.word	0x40021000
 80067b0:	10908120 	.word	0x10908120
 80067b4:	2302      	movs	r3, #2
 80067b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067be:	fa93 f2a3 	rbit	r2, r3
 80067c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067c6:	601a      	str	r2, [r3, #0]
 80067c8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80067cc:	2202      	movs	r2, #2
 80067ce:	601a      	str	r2, [r3, #0]
 80067d0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	fa93 f2a3 	rbit	r2, r3
 80067da:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80067de:	601a      	str	r2, [r3, #0]
 80067e0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80067e4:	2202      	movs	r2, #2
 80067e6:	601a      	str	r2, [r3, #0]
 80067e8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	fa93 f2a3 	rbit	r2, r3
 80067f2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80067f6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067f8:	4ba4      	ldr	r3, [pc, #656]	; (8006a8c <HAL_RCC_OscConfig+0x91c>)
 80067fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067fc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8006800:	2102      	movs	r1, #2
 8006802:	6019      	str	r1, [r3, #0]
 8006804:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	fa93 f1a3 	rbit	r1, r3
 800680e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8006812:	6019      	str	r1, [r3, #0]
  return result;
 8006814:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	fab3 f383 	clz	r3, r3
 800681e:	b2db      	uxtb	r3, r3
 8006820:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006824:	b2db      	uxtb	r3, r3
 8006826:	f003 031f 	and.w	r3, r3, #31
 800682a:	2101      	movs	r1, #1
 800682c:	fa01 f303 	lsl.w	r3, r1, r3
 8006830:	4013      	ands	r3, r2
 8006832:	2b00      	cmp	r3, #0
 8006834:	d0b0      	beq.n	8006798 <HAL_RCC_OscConfig+0x628>
 8006836:	e06a      	b.n	800690e <HAL_RCC_OscConfig+0x79e>
 8006838:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800683c:	2201      	movs	r2, #1
 800683e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006840:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	fa93 f2a3 	rbit	r2, r3
 800684a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800684e:	601a      	str	r2, [r3, #0]
  return result;
 8006850:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006854:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006856:	fab3 f383 	clz	r3, r3
 800685a:	b2db      	uxtb	r3, r3
 800685c:	461a      	mov	r2, r3
 800685e:	4b8c      	ldr	r3, [pc, #560]	; (8006a90 <HAL_RCC_OscConfig+0x920>)
 8006860:	4413      	add	r3, r2
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	461a      	mov	r2, r3
 8006866:	2300      	movs	r3, #0
 8006868:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800686a:	f7fc fe7b 	bl	8003564 <HAL_GetTick>
 800686e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006872:	e009      	b.n	8006888 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006874:	f7fc fe76 	bl	8003564 <HAL_GetTick>
 8006878:	4602      	mov	r2, r0
 800687a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	2b02      	cmp	r3, #2
 8006882:	d901      	bls.n	8006888 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e381      	b.n	8006f8c <HAL_RCC_OscConfig+0xe1c>
 8006888:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800688c:	2202      	movs	r2, #2
 800688e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006890:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	fa93 f2a3 	rbit	r2, r3
 800689a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800689e:	601a      	str	r2, [r3, #0]
 80068a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80068a4:	2202      	movs	r2, #2
 80068a6:	601a      	str	r2, [r3, #0]
 80068a8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	fa93 f2a3 	rbit	r2, r3
 80068b2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80068b6:	601a      	str	r2, [r3, #0]
 80068b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80068bc:	2202      	movs	r2, #2
 80068be:	601a      	str	r2, [r3, #0]
 80068c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	fa93 f2a3 	rbit	r2, r3
 80068ca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80068ce:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068d0:	4b6e      	ldr	r3, [pc, #440]	; (8006a8c <HAL_RCC_OscConfig+0x91c>)
 80068d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80068d8:	2102      	movs	r1, #2
 80068da:	6019      	str	r1, [r3, #0]
 80068dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	fa93 f1a3 	rbit	r1, r3
 80068e6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80068ea:	6019      	str	r1, [r3, #0]
  return result;
 80068ec:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	fab3 f383 	clz	r3, r3
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	f003 031f 	and.w	r3, r3, #31
 8006902:	2101      	movs	r1, #1
 8006904:	fa01 f303 	lsl.w	r3, r1, r3
 8006908:	4013      	ands	r3, r2
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1b2      	bne.n	8006874 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800690e:	1d3b      	adds	r3, r7, #4
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0304 	and.w	r3, r3, #4
 8006918:	2b00      	cmp	r3, #0
 800691a:	f000 8157 	beq.w	8006bcc <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800691e:	2300      	movs	r3, #0
 8006920:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006924:	4b59      	ldr	r3, [pc, #356]	; (8006a8c <HAL_RCC_OscConfig+0x91c>)
 8006926:	69db      	ldr	r3, [r3, #28]
 8006928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800692c:	2b00      	cmp	r3, #0
 800692e:	d112      	bne.n	8006956 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006930:	4b56      	ldr	r3, [pc, #344]	; (8006a8c <HAL_RCC_OscConfig+0x91c>)
 8006932:	69db      	ldr	r3, [r3, #28]
 8006934:	4a55      	ldr	r2, [pc, #340]	; (8006a8c <HAL_RCC_OscConfig+0x91c>)
 8006936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800693a:	61d3      	str	r3, [r2, #28]
 800693c:	4b53      	ldr	r3, [pc, #332]	; (8006a8c <HAL_RCC_OscConfig+0x91c>)
 800693e:	69db      	ldr	r3, [r3, #28]
 8006940:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8006944:	f107 030c 	add.w	r3, r7, #12
 8006948:	601a      	str	r2, [r3, #0]
 800694a:	f107 030c 	add.w	r3, r7, #12
 800694e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006950:	2301      	movs	r3, #1
 8006952:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006956:	4b4f      	ldr	r3, [pc, #316]	; (8006a94 <HAL_RCC_OscConfig+0x924>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800695e:	2b00      	cmp	r3, #0
 8006960:	d11a      	bne.n	8006998 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006962:	4b4c      	ldr	r3, [pc, #304]	; (8006a94 <HAL_RCC_OscConfig+0x924>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a4b      	ldr	r2, [pc, #300]	; (8006a94 <HAL_RCC_OscConfig+0x924>)
 8006968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800696c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800696e:	f7fc fdf9 	bl	8003564 <HAL_GetTick>
 8006972:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006976:	e009      	b.n	800698c <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006978:	f7fc fdf4 	bl	8003564 <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	2b64      	cmp	r3, #100	; 0x64
 8006986:	d901      	bls.n	800698c <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	e2ff      	b.n	8006f8c <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800698c:	4b41      	ldr	r3, [pc, #260]	; (8006a94 <HAL_RCC_OscConfig+0x924>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006994:	2b00      	cmp	r3, #0
 8006996:	d0ef      	beq.n	8006978 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006998:	1d3b      	adds	r3, r7, #4
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d106      	bne.n	80069b0 <HAL_RCC_OscConfig+0x840>
 80069a2:	4b3a      	ldr	r3, [pc, #232]	; (8006a8c <HAL_RCC_OscConfig+0x91c>)
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	4a39      	ldr	r2, [pc, #228]	; (8006a8c <HAL_RCC_OscConfig+0x91c>)
 80069a8:	f043 0301 	orr.w	r3, r3, #1
 80069ac:	6213      	str	r3, [r2, #32]
 80069ae:	e02f      	b.n	8006a10 <HAL_RCC_OscConfig+0x8a0>
 80069b0:	1d3b      	adds	r3, r7, #4
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10c      	bne.n	80069d4 <HAL_RCC_OscConfig+0x864>
 80069ba:	4b34      	ldr	r3, [pc, #208]	; (8006a8c <HAL_RCC_OscConfig+0x91c>)
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	4a33      	ldr	r2, [pc, #204]	; (8006a8c <HAL_RCC_OscConfig+0x91c>)
 80069c0:	f023 0301 	bic.w	r3, r3, #1
 80069c4:	6213      	str	r3, [r2, #32]
 80069c6:	4b31      	ldr	r3, [pc, #196]	; (8006a8c <HAL_RCC_OscConfig+0x91c>)
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	4a30      	ldr	r2, [pc, #192]	; (8006a8c <HAL_RCC_OscConfig+0x91c>)
 80069cc:	f023 0304 	bic.w	r3, r3, #4
 80069d0:	6213      	str	r3, [r2, #32]
 80069d2:	e01d      	b.n	8006a10 <HAL_RCC_OscConfig+0x8a0>
 80069d4:	1d3b      	adds	r3, r7, #4
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	2b05      	cmp	r3, #5
 80069dc:	d10c      	bne.n	80069f8 <HAL_RCC_OscConfig+0x888>
 80069de:	4b2b      	ldr	r3, [pc, #172]	; (8006a8c <HAL_RCC_OscConfig+0x91c>)
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	4a2a      	ldr	r2, [pc, #168]	; (8006a8c <HAL_RCC_OscConfig+0x91c>)
 80069e4:	f043 0304 	orr.w	r3, r3, #4
 80069e8:	6213      	str	r3, [r2, #32]
 80069ea:	4b28      	ldr	r3, [pc, #160]	; (8006a8c <HAL_RCC_OscConfig+0x91c>)
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	4a27      	ldr	r2, [pc, #156]	; (8006a8c <HAL_RCC_OscConfig+0x91c>)
 80069f0:	f043 0301 	orr.w	r3, r3, #1
 80069f4:	6213      	str	r3, [r2, #32]
 80069f6:	e00b      	b.n	8006a10 <HAL_RCC_OscConfig+0x8a0>
 80069f8:	4b24      	ldr	r3, [pc, #144]	; (8006a8c <HAL_RCC_OscConfig+0x91c>)
 80069fa:	6a1b      	ldr	r3, [r3, #32]
 80069fc:	4a23      	ldr	r2, [pc, #140]	; (8006a8c <HAL_RCC_OscConfig+0x91c>)
 80069fe:	f023 0301 	bic.w	r3, r3, #1
 8006a02:	6213      	str	r3, [r2, #32]
 8006a04:	4b21      	ldr	r3, [pc, #132]	; (8006a8c <HAL_RCC_OscConfig+0x91c>)
 8006a06:	6a1b      	ldr	r3, [r3, #32]
 8006a08:	4a20      	ldr	r2, [pc, #128]	; (8006a8c <HAL_RCC_OscConfig+0x91c>)
 8006a0a:	f023 0304 	bic.w	r3, r3, #4
 8006a0e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a10:	1d3b      	adds	r3, r7, #4
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d06a      	beq.n	8006af0 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a1a:	f7fc fda3 	bl	8003564 <HAL_GetTick>
 8006a1e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a22:	e00b      	b.n	8006a3c <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a24:	f7fc fd9e 	bl	8003564 <HAL_GetTick>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d901      	bls.n	8006a3c <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e2a7      	b.n	8006f8c <HAL_RCC_OscConfig+0xe1c>
 8006a3c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006a40:	2202      	movs	r2, #2
 8006a42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a44:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	fa93 f2a3 	rbit	r2, r3
 8006a4e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006a52:	601a      	str	r2, [r3, #0]
 8006a54:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8006a58:	2202      	movs	r2, #2
 8006a5a:	601a      	str	r2, [r3, #0]
 8006a5c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	fa93 f2a3 	rbit	r2, r3
 8006a66:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006a6a:	601a      	str	r2, [r3, #0]
  return result;
 8006a6c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006a70:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a72:	fab3 f383 	clz	r3, r3
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	095b      	lsrs	r3, r3, #5
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	f043 0302 	orr.w	r3, r3, #2
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d108      	bne.n	8006a98 <HAL_RCC_OscConfig+0x928>
 8006a86:	4b01      	ldr	r3, [pc, #4]	; (8006a8c <HAL_RCC_OscConfig+0x91c>)
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	e013      	b.n	8006ab4 <HAL_RCC_OscConfig+0x944>
 8006a8c:	40021000 	.word	0x40021000
 8006a90:	10908120 	.word	0x10908120
 8006a94:	40007000 	.word	0x40007000
 8006a98:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006a9c:	2202      	movs	r2, #2
 8006a9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aa0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	fa93 f2a3 	rbit	r2, r3
 8006aaa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006aae:	601a      	str	r2, [r3, #0]
 8006ab0:	4bc0      	ldr	r3, [pc, #768]	; (8006db4 <HAL_RCC_OscConfig+0xc44>)
 8006ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8006ab8:	2102      	movs	r1, #2
 8006aba:	6011      	str	r1, [r2, #0]
 8006abc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8006ac0:	6812      	ldr	r2, [r2, #0]
 8006ac2:	fa92 f1a2 	rbit	r1, r2
 8006ac6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006aca:	6011      	str	r1, [r2, #0]
  return result;
 8006acc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006ad0:	6812      	ldr	r2, [r2, #0]
 8006ad2:	fab2 f282 	clz	r2, r2
 8006ad6:	b2d2      	uxtb	r2, r2
 8006ad8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006adc:	b2d2      	uxtb	r2, r2
 8006ade:	f002 021f 	and.w	r2, r2, #31
 8006ae2:	2101      	movs	r1, #1
 8006ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8006ae8:	4013      	ands	r3, r2
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d09a      	beq.n	8006a24 <HAL_RCC_OscConfig+0x8b4>
 8006aee:	e063      	b.n	8006bb8 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006af0:	f7fc fd38 	bl	8003564 <HAL_GetTick>
 8006af4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006af8:	e00b      	b.n	8006b12 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006afa:	f7fc fd33 	bl	8003564 <HAL_GetTick>
 8006afe:	4602      	mov	r2, r0
 8006b00:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d901      	bls.n	8006b12 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	e23c      	b.n	8006f8c <HAL_RCC_OscConfig+0xe1c>
 8006b12:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006b16:	2202      	movs	r2, #2
 8006b18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b1a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	fa93 f2a3 	rbit	r2, r3
 8006b24:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006b28:	601a      	str	r2, [r3, #0]
 8006b2a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006b2e:	2202      	movs	r2, #2
 8006b30:	601a      	str	r2, [r3, #0]
 8006b32:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	fa93 f2a3 	rbit	r2, r3
 8006b3c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006b40:	601a      	str	r2, [r3, #0]
  return result;
 8006b42:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006b46:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b48:	fab3 f383 	clz	r3, r3
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	095b      	lsrs	r3, r3, #5
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	f043 0302 	orr.w	r3, r3, #2
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d102      	bne.n	8006b62 <HAL_RCC_OscConfig+0x9f2>
 8006b5c:	4b95      	ldr	r3, [pc, #596]	; (8006db4 <HAL_RCC_OscConfig+0xc44>)
 8006b5e:	6a1b      	ldr	r3, [r3, #32]
 8006b60:	e00d      	b.n	8006b7e <HAL_RCC_OscConfig+0xa0e>
 8006b62:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006b66:	2202      	movs	r2, #2
 8006b68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b6a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	fa93 f2a3 	rbit	r2, r3
 8006b74:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006b78:	601a      	str	r2, [r3, #0]
 8006b7a:	4b8e      	ldr	r3, [pc, #568]	; (8006db4 <HAL_RCC_OscConfig+0xc44>)
 8006b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8006b82:	2102      	movs	r1, #2
 8006b84:	6011      	str	r1, [r2, #0]
 8006b86:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8006b8a:	6812      	ldr	r2, [r2, #0]
 8006b8c:	fa92 f1a2 	rbit	r1, r2
 8006b90:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006b94:	6011      	str	r1, [r2, #0]
  return result;
 8006b96:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006b9a:	6812      	ldr	r2, [r2, #0]
 8006b9c:	fab2 f282 	clz	r2, r2
 8006ba0:	b2d2      	uxtb	r2, r2
 8006ba2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ba6:	b2d2      	uxtb	r2, r2
 8006ba8:	f002 021f 	and.w	r2, r2, #31
 8006bac:	2101      	movs	r1, #1
 8006bae:	fa01 f202 	lsl.w	r2, r1, r2
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1a0      	bne.n	8006afa <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006bb8:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d105      	bne.n	8006bcc <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bc0:	4b7c      	ldr	r3, [pc, #496]	; (8006db4 <HAL_RCC_OscConfig+0xc44>)
 8006bc2:	69db      	ldr	r3, [r3, #28]
 8006bc4:	4a7b      	ldr	r2, [pc, #492]	; (8006db4 <HAL_RCC_OscConfig+0xc44>)
 8006bc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bca:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006bcc:	1d3b      	adds	r3, r7, #4
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f000 81d9 	beq.w	8006f8a <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006bd8:	4b76      	ldr	r3, [pc, #472]	; (8006db4 <HAL_RCC_OscConfig+0xc44>)
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	f003 030c 	and.w	r3, r3, #12
 8006be0:	2b08      	cmp	r3, #8
 8006be2:	f000 81a6 	beq.w	8006f32 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006be6:	1d3b      	adds	r3, r7, #4
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	699b      	ldr	r3, [r3, #24]
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	f040 811e 	bne.w	8006e2e <HAL_RCC_OscConfig+0xcbe>
 8006bf2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006bf6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006bfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bfc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	fa93 f2a3 	rbit	r2, r3
 8006c06:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006c0a:	601a      	str	r2, [r3, #0]
  return result;
 8006c0c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006c10:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c12:	fab3 f383 	clz	r3, r3
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006c1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	461a      	mov	r2, r3
 8006c24:	2300      	movs	r3, #0
 8006c26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c28:	f7fc fc9c 	bl	8003564 <HAL_GetTick>
 8006c2c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c30:	e009      	b.n	8006c46 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c32:	f7fc fc97 	bl	8003564 <HAL_GetTick>
 8006c36:	4602      	mov	r2, r0
 8006c38:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d901      	bls.n	8006c46 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e1a2      	b.n	8006f8c <HAL_RCC_OscConfig+0xe1c>
 8006c46:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006c4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c50:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	fa93 f2a3 	rbit	r2, r3
 8006c5a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006c5e:	601a      	str	r2, [r3, #0]
  return result;
 8006c60:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006c64:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c66:	fab3 f383 	clz	r3, r3
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	095b      	lsrs	r3, r3, #5
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	f043 0301 	orr.w	r3, r3, #1
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d102      	bne.n	8006c80 <HAL_RCC_OscConfig+0xb10>
 8006c7a:	4b4e      	ldr	r3, [pc, #312]	; (8006db4 <HAL_RCC_OscConfig+0xc44>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	e01b      	b.n	8006cb8 <HAL_RCC_OscConfig+0xb48>
 8006c80:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006c84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c8a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	fa93 f2a3 	rbit	r2, r3
 8006c94:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006c98:	601a      	str	r2, [r3, #0]
 8006c9a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006c9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006ca2:	601a      	str	r2, [r3, #0]
 8006ca4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	fa93 f2a3 	rbit	r2, r3
 8006cae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006cb2:	601a      	str	r2, [r3, #0]
 8006cb4:	4b3f      	ldr	r3, [pc, #252]	; (8006db4 <HAL_RCC_OscConfig+0xc44>)
 8006cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8006cbc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006cc0:	6011      	str	r1, [r2, #0]
 8006cc2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8006cc6:	6812      	ldr	r2, [r2, #0]
 8006cc8:	fa92 f1a2 	rbit	r1, r2
 8006ccc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006cd0:	6011      	str	r1, [r2, #0]
  return result;
 8006cd2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006cd6:	6812      	ldr	r2, [r2, #0]
 8006cd8:	fab2 f282 	clz	r2, r2
 8006cdc:	b2d2      	uxtb	r2, r2
 8006cde:	f042 0220 	orr.w	r2, r2, #32
 8006ce2:	b2d2      	uxtb	r2, r2
 8006ce4:	f002 021f 	and.w	r2, r2, #31
 8006ce8:	2101      	movs	r1, #1
 8006cea:	fa01 f202 	lsl.w	r2, r1, r2
 8006cee:	4013      	ands	r3, r2
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d19e      	bne.n	8006c32 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006cf4:	4b2f      	ldr	r3, [pc, #188]	; (8006db4 <HAL_RCC_OscConfig+0xc44>)
 8006cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf8:	f023 020f 	bic.w	r2, r3, #15
 8006cfc:	1d3b      	adds	r3, r7, #4
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d02:	492c      	ldr	r1, [pc, #176]	; (8006db4 <HAL_RCC_OscConfig+0xc44>)
 8006d04:	4313      	orrs	r3, r2
 8006d06:	62cb      	str	r3, [r1, #44]	; 0x2c
 8006d08:	4b2a      	ldr	r3, [pc, #168]	; (8006db4 <HAL_RCC_OscConfig+0xc44>)
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8006d10:	1d3b      	adds	r3, r7, #4
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	6a19      	ldr	r1, [r3, #32]
 8006d16:	1d3b      	adds	r3, r7, #4
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	69db      	ldr	r3, [r3, #28]
 8006d1c:	430b      	orrs	r3, r1
 8006d1e:	4925      	ldr	r1, [pc, #148]	; (8006db4 <HAL_RCC_OscConfig+0xc44>)
 8006d20:	4313      	orrs	r3, r2
 8006d22:	604b      	str	r3, [r1, #4]
 8006d24:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006d28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006d2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d2e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	fa93 f2a3 	rbit	r2, r3
 8006d38:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006d3c:	601a      	str	r2, [r3, #0]
  return result;
 8006d3e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006d42:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d44:	fab3 f383 	clz	r3, r3
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006d4e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	461a      	mov	r2, r3
 8006d56:	2301      	movs	r3, #1
 8006d58:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d5a:	f7fc fc03 	bl	8003564 <HAL_GetTick>
 8006d5e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006d62:	e009      	b.n	8006d78 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d64:	f7fc fbfe 	bl	8003564 <HAL_GetTick>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d901      	bls.n	8006d78 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e109      	b.n	8006f8c <HAL_RCC_OscConfig+0xe1c>
 8006d78:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006d7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006d80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d82:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	fa93 f2a3 	rbit	r2, r3
 8006d8c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006d90:	601a      	str	r2, [r3, #0]
  return result;
 8006d92:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006d96:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006d98:	fab3 f383 	clz	r3, r3
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	095b      	lsrs	r3, r3, #5
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	f043 0301 	orr.w	r3, r3, #1
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d105      	bne.n	8006db8 <HAL_RCC_OscConfig+0xc48>
 8006dac:	4b01      	ldr	r3, [pc, #4]	; (8006db4 <HAL_RCC_OscConfig+0xc44>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	e01e      	b.n	8006df0 <HAL_RCC_OscConfig+0xc80>
 8006db2:	bf00      	nop
 8006db4:	40021000 	.word	0x40021000
 8006db8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006dbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006dc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dc2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	fa93 f2a3 	rbit	r2, r3
 8006dcc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006dd0:	601a      	str	r2, [r3, #0]
 8006dd2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006dd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006dda:	601a      	str	r2, [r3, #0]
 8006ddc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	fa93 f2a3 	rbit	r2, r3
 8006de6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006dea:	601a      	str	r2, [r3, #0]
 8006dec:	4b6a      	ldr	r3, [pc, #424]	; (8006f98 <HAL_RCC_OscConfig+0xe28>)
 8006dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8006df4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006df8:	6011      	str	r1, [r2, #0]
 8006dfa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8006dfe:	6812      	ldr	r2, [r2, #0]
 8006e00:	fa92 f1a2 	rbit	r1, r2
 8006e04:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006e08:	6011      	str	r1, [r2, #0]
  return result;
 8006e0a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006e0e:	6812      	ldr	r2, [r2, #0]
 8006e10:	fab2 f282 	clz	r2, r2
 8006e14:	b2d2      	uxtb	r2, r2
 8006e16:	f042 0220 	orr.w	r2, r2, #32
 8006e1a:	b2d2      	uxtb	r2, r2
 8006e1c:	f002 021f 	and.w	r2, r2, #31
 8006e20:	2101      	movs	r1, #1
 8006e22:	fa01 f202 	lsl.w	r2, r1, r2
 8006e26:	4013      	ands	r3, r2
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d09b      	beq.n	8006d64 <HAL_RCC_OscConfig+0xbf4>
 8006e2c:	e0ad      	b.n	8006f8a <HAL_RCC_OscConfig+0xe1a>
 8006e2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006e32:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006e36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	fa93 f2a3 	rbit	r2, r3
 8006e42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006e46:	601a      	str	r2, [r3, #0]
  return result;
 8006e48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006e4c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e4e:	fab3 f383 	clz	r3, r3
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006e58:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	461a      	mov	r2, r3
 8006e60:	2300      	movs	r3, #0
 8006e62:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e64:	f7fc fb7e 	bl	8003564 <HAL_GetTick>
 8006e68:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e6c:	e009      	b.n	8006e82 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e6e:	f7fc fb79 	bl	8003564 <HAL_GetTick>
 8006e72:	4602      	mov	r2, r0
 8006e74:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d901      	bls.n	8006e82 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e084      	b.n	8006f8c <HAL_RCC_OscConfig+0xe1c>
 8006e82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006e86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006e8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	fa93 f2a3 	rbit	r2, r3
 8006e96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006e9a:	601a      	str	r2, [r3, #0]
  return result;
 8006e9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ea0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ea2:	fab3 f383 	clz	r3, r3
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	095b      	lsrs	r3, r3, #5
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	f043 0301 	orr.w	r3, r3, #1
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d102      	bne.n	8006ebc <HAL_RCC_OscConfig+0xd4c>
 8006eb6:	4b38      	ldr	r3, [pc, #224]	; (8006f98 <HAL_RCC_OscConfig+0xe28>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	e01b      	b.n	8006ef4 <HAL_RCC_OscConfig+0xd84>
 8006ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ec0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006ec4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	fa93 f2a3 	rbit	r2, r3
 8006ed0:	f107 0320 	add.w	r3, r7, #32
 8006ed4:	601a      	str	r2, [r3, #0]
 8006ed6:	f107 031c 	add.w	r3, r7, #28
 8006eda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006ede:	601a      	str	r2, [r3, #0]
 8006ee0:	f107 031c 	add.w	r3, r7, #28
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	fa93 f2a3 	rbit	r2, r3
 8006eea:	f107 0318 	add.w	r3, r7, #24
 8006eee:	601a      	str	r2, [r3, #0]
 8006ef0:	4b29      	ldr	r3, [pc, #164]	; (8006f98 <HAL_RCC_OscConfig+0xe28>)
 8006ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef4:	f107 0214 	add.w	r2, r7, #20
 8006ef8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006efc:	6011      	str	r1, [r2, #0]
 8006efe:	f107 0214 	add.w	r2, r7, #20
 8006f02:	6812      	ldr	r2, [r2, #0]
 8006f04:	fa92 f1a2 	rbit	r1, r2
 8006f08:	f107 0210 	add.w	r2, r7, #16
 8006f0c:	6011      	str	r1, [r2, #0]
  return result;
 8006f0e:	f107 0210 	add.w	r2, r7, #16
 8006f12:	6812      	ldr	r2, [r2, #0]
 8006f14:	fab2 f282 	clz	r2, r2
 8006f18:	b2d2      	uxtb	r2, r2
 8006f1a:	f042 0220 	orr.w	r2, r2, #32
 8006f1e:	b2d2      	uxtb	r2, r2
 8006f20:	f002 021f 	and.w	r2, r2, #31
 8006f24:	2101      	movs	r1, #1
 8006f26:	fa01 f202 	lsl.w	r2, r1, r2
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d19e      	bne.n	8006e6e <HAL_RCC_OscConfig+0xcfe>
 8006f30:	e02b      	b.n	8006f8a <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f32:	1d3b      	adds	r3, r7, #4
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d101      	bne.n	8006f40 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e025      	b.n	8006f8c <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006f40:	4b15      	ldr	r3, [pc, #84]	; (8006f98 <HAL_RCC_OscConfig+0xe28>)
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8006f48:	4b13      	ldr	r3, [pc, #76]	; (8006f98 <HAL_RCC_OscConfig+0xe28>)
 8006f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006f50:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006f54:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8006f58:	1d3b      	adds	r3, r7, #4
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	69db      	ldr	r3, [r3, #28]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d111      	bne.n	8006f86 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8006f62:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006f66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006f6a:	1d3b      	adds	r3, r7, #4
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d108      	bne.n	8006f86 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8006f74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006f78:	f003 020f 	and.w	r2, r3, #15
 8006f7c:	1d3b      	adds	r3, r7, #4
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d001      	beq.n	8006f8a <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e000      	b.n	8006f8c <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	40021000 	.word	0x40021000

08006f9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b09e      	sub	sp, #120	; 0x78
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d101      	bne.n	8006fb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e162      	b.n	800727a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fb4:	4b90      	ldr	r3, [pc, #576]	; (80071f8 <HAL_RCC_ClockConfig+0x25c>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 0307 	and.w	r3, r3, #7
 8006fbc:	683a      	ldr	r2, [r7, #0]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d910      	bls.n	8006fe4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fc2:	4b8d      	ldr	r3, [pc, #564]	; (80071f8 <HAL_RCC_ClockConfig+0x25c>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f023 0207 	bic.w	r2, r3, #7
 8006fca:	498b      	ldr	r1, [pc, #556]	; (80071f8 <HAL_RCC_ClockConfig+0x25c>)
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fd2:	4b89      	ldr	r3, [pc, #548]	; (80071f8 <HAL_RCC_ClockConfig+0x25c>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f003 0307 	and.w	r3, r3, #7
 8006fda:	683a      	ldr	r2, [r7, #0]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d001      	beq.n	8006fe4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e14a      	b.n	800727a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 0302 	and.w	r3, r3, #2
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d008      	beq.n	8007002 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ff0:	4b82      	ldr	r3, [pc, #520]	; (80071fc <HAL_RCC_ClockConfig+0x260>)
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	497f      	ldr	r1, [pc, #508]	; (80071fc <HAL_RCC_ClockConfig+0x260>)
 8006ffe:	4313      	orrs	r3, r2
 8007000:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 0301 	and.w	r3, r3, #1
 800700a:	2b00      	cmp	r3, #0
 800700c:	f000 80dc 	beq.w	80071c8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	2b01      	cmp	r3, #1
 8007016:	d13c      	bne.n	8007092 <HAL_RCC_ClockConfig+0xf6>
 8007018:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800701c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800701e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007020:	fa93 f3a3 	rbit	r3, r3
 8007024:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8007026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007028:	fab3 f383 	clz	r3, r3
 800702c:	b2db      	uxtb	r3, r3
 800702e:	095b      	lsrs	r3, r3, #5
 8007030:	b2db      	uxtb	r3, r3
 8007032:	f043 0301 	orr.w	r3, r3, #1
 8007036:	b2db      	uxtb	r3, r3
 8007038:	2b01      	cmp	r3, #1
 800703a:	d102      	bne.n	8007042 <HAL_RCC_ClockConfig+0xa6>
 800703c:	4b6f      	ldr	r3, [pc, #444]	; (80071fc <HAL_RCC_ClockConfig+0x260>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	e00f      	b.n	8007062 <HAL_RCC_ClockConfig+0xc6>
 8007042:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007046:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007048:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800704a:	fa93 f3a3 	rbit	r3, r3
 800704e:	667b      	str	r3, [r7, #100]	; 0x64
 8007050:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007054:	663b      	str	r3, [r7, #96]	; 0x60
 8007056:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007058:	fa93 f3a3 	rbit	r3, r3
 800705c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800705e:	4b67      	ldr	r3, [pc, #412]	; (80071fc <HAL_RCC_ClockConfig+0x260>)
 8007060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007062:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007066:	65ba      	str	r2, [r7, #88]	; 0x58
 8007068:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800706a:	fa92 f2a2 	rbit	r2, r2
 800706e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8007070:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007072:	fab2 f282 	clz	r2, r2
 8007076:	b2d2      	uxtb	r2, r2
 8007078:	f042 0220 	orr.w	r2, r2, #32
 800707c:	b2d2      	uxtb	r2, r2
 800707e:	f002 021f 	and.w	r2, r2, #31
 8007082:	2101      	movs	r1, #1
 8007084:	fa01 f202 	lsl.w	r2, r1, r2
 8007088:	4013      	ands	r3, r2
 800708a:	2b00      	cmp	r3, #0
 800708c:	d17b      	bne.n	8007186 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e0f3      	b.n	800727a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	2b02      	cmp	r3, #2
 8007098:	d13c      	bne.n	8007114 <HAL_RCC_ClockConfig+0x178>
 800709a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800709e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070a2:	fa93 f3a3 	rbit	r3, r3
 80070a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80070a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070aa:	fab3 f383 	clz	r3, r3
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	095b      	lsrs	r3, r3, #5
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	f043 0301 	orr.w	r3, r3, #1
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d102      	bne.n	80070c4 <HAL_RCC_ClockConfig+0x128>
 80070be:	4b4f      	ldr	r3, [pc, #316]	; (80071fc <HAL_RCC_ClockConfig+0x260>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	e00f      	b.n	80070e4 <HAL_RCC_ClockConfig+0x148>
 80070c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070cc:	fa93 f3a3 	rbit	r3, r3
 80070d0:	647b      	str	r3, [r7, #68]	; 0x44
 80070d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070d6:	643b      	str	r3, [r7, #64]	; 0x40
 80070d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070da:	fa93 f3a3 	rbit	r3, r3
 80070de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070e0:	4b46      	ldr	r3, [pc, #280]	; (80071fc <HAL_RCC_ClockConfig+0x260>)
 80070e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80070e8:	63ba      	str	r2, [r7, #56]	; 0x38
 80070ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070ec:	fa92 f2a2 	rbit	r2, r2
 80070f0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80070f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070f4:	fab2 f282 	clz	r2, r2
 80070f8:	b2d2      	uxtb	r2, r2
 80070fa:	f042 0220 	orr.w	r2, r2, #32
 80070fe:	b2d2      	uxtb	r2, r2
 8007100:	f002 021f 	and.w	r2, r2, #31
 8007104:	2101      	movs	r1, #1
 8007106:	fa01 f202 	lsl.w	r2, r1, r2
 800710a:	4013      	ands	r3, r2
 800710c:	2b00      	cmp	r3, #0
 800710e:	d13a      	bne.n	8007186 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	e0b2      	b.n	800727a <HAL_RCC_ClockConfig+0x2de>
 8007114:	2302      	movs	r3, #2
 8007116:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711a:	fa93 f3a3 	rbit	r3, r3
 800711e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007122:	fab3 f383 	clz	r3, r3
 8007126:	b2db      	uxtb	r3, r3
 8007128:	095b      	lsrs	r3, r3, #5
 800712a:	b2db      	uxtb	r3, r3
 800712c:	f043 0301 	orr.w	r3, r3, #1
 8007130:	b2db      	uxtb	r3, r3
 8007132:	2b01      	cmp	r3, #1
 8007134:	d102      	bne.n	800713c <HAL_RCC_ClockConfig+0x1a0>
 8007136:	4b31      	ldr	r3, [pc, #196]	; (80071fc <HAL_RCC_ClockConfig+0x260>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	e00d      	b.n	8007158 <HAL_RCC_ClockConfig+0x1bc>
 800713c:	2302      	movs	r3, #2
 800713e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007142:	fa93 f3a3 	rbit	r3, r3
 8007146:	627b      	str	r3, [r7, #36]	; 0x24
 8007148:	2302      	movs	r3, #2
 800714a:	623b      	str	r3, [r7, #32]
 800714c:	6a3b      	ldr	r3, [r7, #32]
 800714e:	fa93 f3a3 	rbit	r3, r3
 8007152:	61fb      	str	r3, [r7, #28]
 8007154:	4b29      	ldr	r3, [pc, #164]	; (80071fc <HAL_RCC_ClockConfig+0x260>)
 8007156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007158:	2202      	movs	r2, #2
 800715a:	61ba      	str	r2, [r7, #24]
 800715c:	69ba      	ldr	r2, [r7, #24]
 800715e:	fa92 f2a2 	rbit	r2, r2
 8007162:	617a      	str	r2, [r7, #20]
  return result;
 8007164:	697a      	ldr	r2, [r7, #20]
 8007166:	fab2 f282 	clz	r2, r2
 800716a:	b2d2      	uxtb	r2, r2
 800716c:	f042 0220 	orr.w	r2, r2, #32
 8007170:	b2d2      	uxtb	r2, r2
 8007172:	f002 021f 	and.w	r2, r2, #31
 8007176:	2101      	movs	r1, #1
 8007178:	fa01 f202 	lsl.w	r2, r1, r2
 800717c:	4013      	ands	r3, r2
 800717e:	2b00      	cmp	r3, #0
 8007180:	d101      	bne.n	8007186 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e079      	b.n	800727a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007186:	4b1d      	ldr	r3, [pc, #116]	; (80071fc <HAL_RCC_ClockConfig+0x260>)
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	f023 0203 	bic.w	r2, r3, #3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	491a      	ldr	r1, [pc, #104]	; (80071fc <HAL_RCC_ClockConfig+0x260>)
 8007194:	4313      	orrs	r3, r2
 8007196:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007198:	f7fc f9e4 	bl	8003564 <HAL_GetTick>
 800719c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800719e:	e00a      	b.n	80071b6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071a0:	f7fc f9e0 	bl	8003564 <HAL_GetTick>
 80071a4:	4602      	mov	r2, r0
 80071a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d901      	bls.n	80071b6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80071b2:	2303      	movs	r3, #3
 80071b4:	e061      	b.n	800727a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071b6:	4b11      	ldr	r3, [pc, #68]	; (80071fc <HAL_RCC_ClockConfig+0x260>)
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	f003 020c 	and.w	r2, r3, #12
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d1eb      	bne.n	80071a0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80071c8:	4b0b      	ldr	r3, [pc, #44]	; (80071f8 <HAL_RCC_ClockConfig+0x25c>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0307 	and.w	r3, r3, #7
 80071d0:	683a      	ldr	r2, [r7, #0]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d214      	bcs.n	8007200 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071d6:	4b08      	ldr	r3, [pc, #32]	; (80071f8 <HAL_RCC_ClockConfig+0x25c>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f023 0207 	bic.w	r2, r3, #7
 80071de:	4906      	ldr	r1, [pc, #24]	; (80071f8 <HAL_RCC_ClockConfig+0x25c>)
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071e6:	4b04      	ldr	r3, [pc, #16]	; (80071f8 <HAL_RCC_ClockConfig+0x25c>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 0307 	and.w	r3, r3, #7
 80071ee:	683a      	ldr	r2, [r7, #0]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d005      	beq.n	8007200 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	e040      	b.n	800727a <HAL_RCC_ClockConfig+0x2de>
 80071f8:	40022000 	.word	0x40022000
 80071fc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f003 0304 	and.w	r3, r3, #4
 8007208:	2b00      	cmp	r3, #0
 800720a:	d008      	beq.n	800721e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800720c:	4b1d      	ldr	r3, [pc, #116]	; (8007284 <HAL_RCC_ClockConfig+0x2e8>)
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	491a      	ldr	r1, [pc, #104]	; (8007284 <HAL_RCC_ClockConfig+0x2e8>)
 800721a:	4313      	orrs	r3, r2
 800721c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0308 	and.w	r3, r3, #8
 8007226:	2b00      	cmp	r3, #0
 8007228:	d009      	beq.n	800723e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800722a:	4b16      	ldr	r3, [pc, #88]	; (8007284 <HAL_RCC_ClockConfig+0x2e8>)
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	00db      	lsls	r3, r3, #3
 8007238:	4912      	ldr	r1, [pc, #72]	; (8007284 <HAL_RCC_ClockConfig+0x2e8>)
 800723a:	4313      	orrs	r3, r2
 800723c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800723e:	f000 f829 	bl	8007294 <HAL_RCC_GetSysClockFreq>
 8007242:	4601      	mov	r1, r0
 8007244:	4b0f      	ldr	r3, [pc, #60]	; (8007284 <HAL_RCC_ClockConfig+0x2e8>)
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800724c:	22f0      	movs	r2, #240	; 0xf0
 800724e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	fa92 f2a2 	rbit	r2, r2
 8007256:	60fa      	str	r2, [r7, #12]
  return result;
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	fab2 f282 	clz	r2, r2
 800725e:	b2d2      	uxtb	r2, r2
 8007260:	40d3      	lsrs	r3, r2
 8007262:	4a09      	ldr	r2, [pc, #36]	; (8007288 <HAL_RCC_ClockConfig+0x2ec>)
 8007264:	5cd3      	ldrb	r3, [r2, r3]
 8007266:	fa21 f303 	lsr.w	r3, r1, r3
 800726a:	4a08      	ldr	r2, [pc, #32]	; (800728c <HAL_RCC_ClockConfig+0x2f0>)
 800726c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800726e:	4b08      	ldr	r3, [pc, #32]	; (8007290 <HAL_RCC_ClockConfig+0x2f4>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4618      	mov	r0, r3
 8007274:	f7fc f932 	bl	80034dc <HAL_InitTick>
  
  return HAL_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3778      	adds	r7, #120	; 0x78
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	40021000 	.word	0x40021000
 8007288:	0800a8b0 	.word	0x0800a8b0
 800728c:	20000010 	.word	0x20000010
 8007290:	20000014 	.word	0x20000014

08007294 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007294:	b480      	push	{r7}
 8007296:	b08b      	sub	sp, #44	; 0x2c
 8007298:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800729a:	2300      	movs	r3, #0
 800729c:	61fb      	str	r3, [r7, #28]
 800729e:	2300      	movs	r3, #0
 80072a0:	61bb      	str	r3, [r7, #24]
 80072a2:	2300      	movs	r3, #0
 80072a4:	627b      	str	r3, [r7, #36]	; 0x24
 80072a6:	2300      	movs	r3, #0
 80072a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80072aa:	2300      	movs	r3, #0
 80072ac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80072ae:	4b2a      	ldr	r3, [pc, #168]	; (8007358 <HAL_RCC_GetSysClockFreq+0xc4>)
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	f003 030c 	and.w	r3, r3, #12
 80072ba:	2b04      	cmp	r3, #4
 80072bc:	d002      	beq.n	80072c4 <HAL_RCC_GetSysClockFreq+0x30>
 80072be:	2b08      	cmp	r3, #8
 80072c0:	d003      	beq.n	80072ca <HAL_RCC_GetSysClockFreq+0x36>
 80072c2:	e03f      	b.n	8007344 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80072c4:	4b25      	ldr	r3, [pc, #148]	; (800735c <HAL_RCC_GetSysClockFreq+0xc8>)
 80072c6:	623b      	str	r3, [r7, #32]
      break;
 80072c8:	e03f      	b.n	800734a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80072d0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80072d4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072d6:	68ba      	ldr	r2, [r7, #8]
 80072d8:	fa92 f2a2 	rbit	r2, r2
 80072dc:	607a      	str	r2, [r7, #4]
  return result;
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	fab2 f282 	clz	r2, r2
 80072e4:	b2d2      	uxtb	r2, r2
 80072e6:	40d3      	lsrs	r3, r2
 80072e8:	4a1d      	ldr	r2, [pc, #116]	; (8007360 <HAL_RCC_GetSysClockFreq+0xcc>)
 80072ea:	5cd3      	ldrb	r3, [r2, r3]
 80072ec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80072ee:	4b1a      	ldr	r3, [pc, #104]	; (8007358 <HAL_RCC_GetSysClockFreq+0xc4>)
 80072f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f2:	f003 030f 	and.w	r3, r3, #15
 80072f6:	220f      	movs	r2, #15
 80072f8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072fa:	693a      	ldr	r2, [r7, #16]
 80072fc:	fa92 f2a2 	rbit	r2, r2
 8007300:	60fa      	str	r2, [r7, #12]
  return result;
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	fab2 f282 	clz	r2, r2
 8007308:	b2d2      	uxtb	r2, r2
 800730a:	40d3      	lsrs	r3, r2
 800730c:	4a15      	ldr	r2, [pc, #84]	; (8007364 <HAL_RCC_GetSysClockFreq+0xd0>)
 800730e:	5cd3      	ldrb	r3, [r2, r3]
 8007310:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007318:	2b00      	cmp	r3, #0
 800731a:	d008      	beq.n	800732e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800731c:	4a0f      	ldr	r2, [pc, #60]	; (800735c <HAL_RCC_GetSysClockFreq+0xc8>)
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	fbb2 f2f3 	udiv	r2, r2, r3
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	fb02 f303 	mul.w	r3, r2, r3
 800732a:	627b      	str	r3, [r7, #36]	; 0x24
 800732c:	e007      	b.n	800733e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800732e:	4a0b      	ldr	r2, [pc, #44]	; (800735c <HAL_RCC_GetSysClockFreq+0xc8>)
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	fbb2 f2f3 	udiv	r2, r2, r3
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	fb02 f303 	mul.w	r3, r2, r3
 800733c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800733e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007340:	623b      	str	r3, [r7, #32]
      break;
 8007342:	e002      	b.n	800734a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007344:	4b05      	ldr	r3, [pc, #20]	; (800735c <HAL_RCC_GetSysClockFreq+0xc8>)
 8007346:	623b      	str	r3, [r7, #32]
      break;
 8007348:	bf00      	nop
    }
  }
  return sysclockfreq;
 800734a:	6a3b      	ldr	r3, [r7, #32]
}
 800734c:	4618      	mov	r0, r3
 800734e:	372c      	adds	r7, #44	; 0x2c
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr
 8007358:	40021000 	.word	0x40021000
 800735c:	007a1200 	.word	0x007a1200
 8007360:	0800a8c8 	.word	0x0800a8c8
 8007364:	0800a8d8 	.word	0x0800a8d8

08007368 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007368:	b480      	push	{r7}
 800736a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800736c:	4b03      	ldr	r3, [pc, #12]	; (800737c <HAL_RCC_GetHCLKFreq+0x14>)
 800736e:	681b      	ldr	r3, [r3, #0]
}
 8007370:	4618      	mov	r0, r3
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	20000010 	.word	0x20000010

08007380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8007386:	f7ff ffef 	bl	8007368 <HAL_RCC_GetHCLKFreq>
 800738a:	4601      	mov	r1, r0
 800738c:	4b0b      	ldr	r3, [pc, #44]	; (80073bc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007394:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007398:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	fa92 f2a2 	rbit	r2, r2
 80073a0:	603a      	str	r2, [r7, #0]
  return result;
 80073a2:	683a      	ldr	r2, [r7, #0]
 80073a4:	fab2 f282 	clz	r2, r2
 80073a8:	b2d2      	uxtb	r2, r2
 80073aa:	40d3      	lsrs	r3, r2
 80073ac:	4a04      	ldr	r2, [pc, #16]	; (80073c0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80073ae:	5cd3      	ldrb	r3, [r2, r3]
 80073b0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80073b4:	4618      	mov	r0, r3
 80073b6:	3708      	adds	r7, #8
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	40021000 	.word	0x40021000
 80073c0:	0800a8c0 	.word	0x0800a8c0

080073c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80073ca:	f7ff ffcd 	bl	8007368 <HAL_RCC_GetHCLKFreq>
 80073ce:	4601      	mov	r1, r0
 80073d0:	4b0b      	ldr	r3, [pc, #44]	; (8007400 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80073d8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80073dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	fa92 f2a2 	rbit	r2, r2
 80073e4:	603a      	str	r2, [r7, #0]
  return result;
 80073e6:	683a      	ldr	r2, [r7, #0]
 80073e8:	fab2 f282 	clz	r2, r2
 80073ec:	b2d2      	uxtb	r2, r2
 80073ee:	40d3      	lsrs	r3, r2
 80073f0:	4a04      	ldr	r2, [pc, #16]	; (8007404 <HAL_RCC_GetPCLK2Freq+0x40>)
 80073f2:	5cd3      	ldrb	r3, [r2, r3]
 80073f4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80073f8:	4618      	mov	r0, r3
 80073fa:	3708      	adds	r7, #8
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	40021000 	.word	0x40021000
 8007404:	0800a8c0 	.word	0x0800a8c0

08007408 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b092      	sub	sp, #72	; 0x48
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007410:	2300      	movs	r3, #0
 8007412:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8007414:	2300      	movs	r3, #0
 8007416:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007418:	2300      	movs	r3, #0
 800741a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007426:	2b00      	cmp	r3, #0
 8007428:	f000 80d4 	beq.w	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800742c:	4b4e      	ldr	r3, [pc, #312]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800742e:	69db      	ldr	r3, [r3, #28]
 8007430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10e      	bne.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007438:	4b4b      	ldr	r3, [pc, #300]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800743a:	69db      	ldr	r3, [r3, #28]
 800743c:	4a4a      	ldr	r2, [pc, #296]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800743e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007442:	61d3      	str	r3, [r2, #28]
 8007444:	4b48      	ldr	r3, [pc, #288]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007446:	69db      	ldr	r3, [r3, #28]
 8007448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800744c:	60bb      	str	r3, [r7, #8]
 800744e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007450:	2301      	movs	r3, #1
 8007452:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007456:	4b45      	ldr	r3, [pc, #276]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800745e:	2b00      	cmp	r3, #0
 8007460:	d118      	bne.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007462:	4b42      	ldr	r3, [pc, #264]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a41      	ldr	r2, [pc, #260]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800746c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800746e:	f7fc f879 	bl	8003564 <HAL_GetTick>
 8007472:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007474:	e008      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007476:	f7fc f875 	bl	8003564 <HAL_GetTick>
 800747a:	4602      	mov	r2, r0
 800747c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800747e:	1ad3      	subs	r3, r2, r3
 8007480:	2b64      	cmp	r3, #100	; 0x64
 8007482:	d901      	bls.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e1d6      	b.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007488:	4b38      	ldr	r3, [pc, #224]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007490:	2b00      	cmp	r3, #0
 8007492:	d0f0      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007494:	4b34      	ldr	r3, [pc, #208]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007496:	6a1b      	ldr	r3, [r3, #32]
 8007498:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800749c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800749e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f000 8084 	beq.w	80075ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d07c      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80074b4:	4b2c      	ldr	r3, [pc, #176]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074b6:	6a1b      	ldr	r3, [r3, #32]
 80074b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80074c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c6:	fa93 f3a3 	rbit	r3, r3
 80074ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80074cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80074ce:	fab3 f383 	clz	r3, r3
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	461a      	mov	r2, r3
 80074d6:	4b26      	ldr	r3, [pc, #152]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80074d8:	4413      	add	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	461a      	mov	r2, r3
 80074de:	2301      	movs	r3, #1
 80074e0:	6013      	str	r3, [r2, #0]
 80074e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80074e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ea:	fa93 f3a3 	rbit	r3, r3
 80074ee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80074f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80074f2:	fab3 f383 	clz	r3, r3
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	461a      	mov	r2, r3
 80074fa:	4b1d      	ldr	r3, [pc, #116]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80074fc:	4413      	add	r3, r2
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	461a      	mov	r2, r3
 8007502:	2300      	movs	r3, #0
 8007504:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007506:	4a18      	ldr	r2, [pc, #96]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800750a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800750c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800750e:	f003 0301 	and.w	r3, r3, #1
 8007512:	2b00      	cmp	r3, #0
 8007514:	d04b      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007516:	f7fc f825 	bl	8003564 <HAL_GetTick>
 800751a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800751c:	e00a      	b.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800751e:	f7fc f821 	bl	8003564 <HAL_GetTick>
 8007522:	4602      	mov	r2, r0
 8007524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	f241 3288 	movw	r2, #5000	; 0x1388
 800752c:	4293      	cmp	r3, r2
 800752e:	d901      	bls.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007530:	2303      	movs	r3, #3
 8007532:	e180      	b.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007534:	2302      	movs	r3, #2
 8007536:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753a:	fa93 f3a3 	rbit	r3, r3
 800753e:	627b      	str	r3, [r7, #36]	; 0x24
 8007540:	2302      	movs	r3, #2
 8007542:	623b      	str	r3, [r7, #32]
 8007544:	6a3b      	ldr	r3, [r7, #32]
 8007546:	fa93 f3a3 	rbit	r3, r3
 800754a:	61fb      	str	r3, [r7, #28]
  return result;
 800754c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800754e:	fab3 f383 	clz	r3, r3
 8007552:	b2db      	uxtb	r3, r3
 8007554:	095b      	lsrs	r3, r3, #5
 8007556:	b2db      	uxtb	r3, r3
 8007558:	f043 0302 	orr.w	r3, r3, #2
 800755c:	b2db      	uxtb	r3, r3
 800755e:	2b02      	cmp	r3, #2
 8007560:	d108      	bne.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8007562:	4b01      	ldr	r3, [pc, #4]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007564:	6a1b      	ldr	r3, [r3, #32]
 8007566:	e00d      	b.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8007568:	40021000 	.word	0x40021000
 800756c:	40007000 	.word	0x40007000
 8007570:	10908100 	.word	0x10908100
 8007574:	2302      	movs	r3, #2
 8007576:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	fa93 f3a3 	rbit	r3, r3
 800757e:	617b      	str	r3, [r7, #20]
 8007580:	4ba0      	ldr	r3, [pc, #640]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007584:	2202      	movs	r2, #2
 8007586:	613a      	str	r2, [r7, #16]
 8007588:	693a      	ldr	r2, [r7, #16]
 800758a:	fa92 f2a2 	rbit	r2, r2
 800758e:	60fa      	str	r2, [r7, #12]
  return result;
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	fab2 f282 	clz	r2, r2
 8007596:	b2d2      	uxtb	r2, r2
 8007598:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800759c:	b2d2      	uxtb	r2, r2
 800759e:	f002 021f 	and.w	r2, r2, #31
 80075a2:	2101      	movs	r1, #1
 80075a4:	fa01 f202 	lsl.w	r2, r1, r2
 80075a8:	4013      	ands	r3, r2
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d0b7      	beq.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80075ae:	4b95      	ldr	r3, [pc, #596]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80075b0:	6a1b      	ldr	r3, [r3, #32]
 80075b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	4992      	ldr	r1, [pc, #584]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80075bc:	4313      	orrs	r3, r2
 80075be:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80075c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d105      	bne.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075c8:	4b8e      	ldr	r3, [pc, #568]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80075ca:	69db      	ldr	r3, [r3, #28]
 80075cc:	4a8d      	ldr	r2, [pc, #564]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80075ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 0301 	and.w	r3, r3, #1
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d008      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80075e0:	4b88      	ldr	r3, [pc, #544]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80075e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e4:	f023 0203 	bic.w	r2, r3, #3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	4985      	ldr	r1, [pc, #532]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80075ee:	4313      	orrs	r3, r2
 80075f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 0302 	and.w	r3, r3, #2
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d008      	beq.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80075fe:	4b81      	ldr	r3, [pc, #516]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007602:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	497e      	ldr	r1, [pc, #504]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800760c:	4313      	orrs	r3, r2
 800760e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0304 	and.w	r3, r3, #4
 8007618:	2b00      	cmp	r3, #0
 800761a:	d008      	beq.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800761c:	4b79      	ldr	r3, [pc, #484]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800761e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007620:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	4976      	ldr	r1, [pc, #472]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800762a:	4313      	orrs	r3, r2
 800762c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 0320 	and.w	r3, r3, #32
 8007636:	2b00      	cmp	r3, #0
 8007638:	d008      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800763a:	4b72      	ldr	r3, [pc, #456]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800763c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800763e:	f023 0210 	bic.w	r2, r3, #16
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	69db      	ldr	r3, [r3, #28]
 8007646:	496f      	ldr	r1, [pc, #444]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007648:	4313      	orrs	r3, r2
 800764a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007654:	2b00      	cmp	r3, #0
 8007656:	d008      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007658:	4b6a      	ldr	r3, [pc, #424]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007664:	4967      	ldr	r1, [pc, #412]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007666:	4313      	orrs	r3, r2
 8007668:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007672:	2b00      	cmp	r3, #0
 8007674:	d008      	beq.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007676:	4b63      	ldr	r3, [pc, #396]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800767a:	f023 0220 	bic.w	r2, r3, #32
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a1b      	ldr	r3, [r3, #32]
 8007682:	4960      	ldr	r1, [pc, #384]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007684:	4313      	orrs	r3, r2
 8007686:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d008      	beq.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007694:	4b5b      	ldr	r3, [pc, #364]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007698:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a0:	4958      	ldr	r1, [pc, #352]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80076a2:	4313      	orrs	r3, r2
 80076a4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 0308 	and.w	r3, r3, #8
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d008      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80076b2:	4b54      	ldr	r3, [pc, #336]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80076b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	695b      	ldr	r3, [r3, #20]
 80076be:	4951      	ldr	r1, [pc, #324]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80076c0:	4313      	orrs	r3, r2
 80076c2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 0310 	and.w	r3, r3, #16
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d008      	beq.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80076d0:	4b4c      	ldr	r3, [pc, #304]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80076d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	4949      	ldr	r1, [pc, #292]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80076de:	4313      	orrs	r3, r2
 80076e0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d008      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80076ee:	4b45      	ldr	r3, [pc, #276]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fa:	4942      	ldr	r1, [pc, #264]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80076fc:	4313      	orrs	r3, r2
 80076fe:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007708:	2b00      	cmp	r3, #0
 800770a:	d008      	beq.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800770c:	4b3d      	ldr	r3, [pc, #244]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800770e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007710:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007718:	493a      	ldr	r1, [pc, #232]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800771a:	4313      	orrs	r3, r2
 800771c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007726:	2b00      	cmp	r3, #0
 8007728:	d008      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800772a:	4b36      	ldr	r3, [pc, #216]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800772c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007736:	4933      	ldr	r1, [pc, #204]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007738:	4313      	orrs	r3, r2
 800773a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007744:	2b00      	cmp	r3, #0
 8007746:	d008      	beq.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007748:	4b2e      	ldr	r3, [pc, #184]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800774a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007754:	492b      	ldr	r1, [pc, #172]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007756:	4313      	orrs	r3, r2
 8007758:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007762:	2b00      	cmp	r3, #0
 8007764:	d008      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8007766:	4b27      	ldr	r3, [pc, #156]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800776a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007772:	4924      	ldr	r1, [pc, #144]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007774:	4313      	orrs	r3, r2
 8007776:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007780:	2b00      	cmp	r3, #0
 8007782:	d008      	beq.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8007784:	4b1f      	ldr	r3, [pc, #124]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007788:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007790:	491c      	ldr	r1, [pc, #112]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007792:	4313      	orrs	r3, r2
 8007794:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d008      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80077a2:	4b18      	ldr	r3, [pc, #96]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80077a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ae:	4915      	ldr	r1, [pc, #84]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80077b0:	4313      	orrs	r3, r2
 80077b2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d008      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80077c0:	4b10      	ldr	r3, [pc, #64]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80077c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077cc:	490d      	ldr	r1, [pc, #52]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80077ce:	4313      	orrs	r3, r2
 80077d0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d008      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80077de:	4b09      	ldr	r3, [pc, #36]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80077e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077ea:	4906      	ldr	r1, [pc, #24]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80077ec:	4313      	orrs	r3, r2
 80077ee:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00c      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80077fc:	4b01      	ldr	r3, [pc, #4]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80077fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007800:	e002      	b.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8007802:	bf00      	nop
 8007804:	40021000 	.word	0x40021000
 8007808:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007810:	490b      	ldr	r1, [pc, #44]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007812:	4313      	orrs	r3, r2
 8007814:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800781e:	2b00      	cmp	r3, #0
 8007820:	d008      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8007822:	4b07      	ldr	r3, [pc, #28]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007826:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800782e:	4904      	ldr	r1, [pc, #16]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007830:	4313      	orrs	r3, r2
 8007832:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3748      	adds	r7, #72	; 0x48
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	40021000 	.word	0x40021000

08007844 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d101      	bne.n	8007856 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e049      	b.n	80078ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800785c:	b2db      	uxtb	r3, r3
 800785e:	2b00      	cmp	r3, #0
 8007860:	d106      	bne.n	8007870 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f7fb f982 	bl	8002b74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2202      	movs	r2, #2
 8007874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	3304      	adds	r3, #4
 8007880:	4619      	mov	r1, r3
 8007882:	4610      	mov	r0, r2
 8007884:	f000 fb14 	bl	8007eb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3708      	adds	r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
	...

080078f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b085      	sub	sp, #20
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007902:	b2db      	uxtb	r3, r3
 8007904:	2b01      	cmp	r3, #1
 8007906:	d001      	beq.n	800790c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	e047      	b.n	800799c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2202      	movs	r2, #2
 8007910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a23      	ldr	r2, [pc, #140]	; (80079a8 <HAL_TIM_Base_Start+0xb4>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d01d      	beq.n	800795a <HAL_TIM_Base_Start+0x66>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007926:	d018      	beq.n	800795a <HAL_TIM_Base_Start+0x66>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a1f      	ldr	r2, [pc, #124]	; (80079ac <HAL_TIM_Base_Start+0xb8>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d013      	beq.n	800795a <HAL_TIM_Base_Start+0x66>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a1e      	ldr	r2, [pc, #120]	; (80079b0 <HAL_TIM_Base_Start+0xbc>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d00e      	beq.n	800795a <HAL_TIM_Base_Start+0x66>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a1c      	ldr	r2, [pc, #112]	; (80079b4 <HAL_TIM_Base_Start+0xc0>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d009      	beq.n	800795a <HAL_TIM_Base_Start+0x66>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a1b      	ldr	r2, [pc, #108]	; (80079b8 <HAL_TIM_Base_Start+0xc4>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d004      	beq.n	800795a <HAL_TIM_Base_Start+0x66>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a19      	ldr	r2, [pc, #100]	; (80079bc <HAL_TIM_Base_Start+0xc8>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d115      	bne.n	8007986 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	689a      	ldr	r2, [r3, #8]
 8007960:	4b17      	ldr	r3, [pc, #92]	; (80079c0 <HAL_TIM_Base_Start+0xcc>)
 8007962:	4013      	ands	r3, r2
 8007964:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2b06      	cmp	r3, #6
 800796a:	d015      	beq.n	8007998 <HAL_TIM_Base_Start+0xa4>
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007972:	d011      	beq.n	8007998 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f042 0201 	orr.w	r2, r2, #1
 8007982:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007984:	e008      	b.n	8007998 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f042 0201 	orr.w	r2, r2, #1
 8007994:	601a      	str	r2, [r3, #0]
 8007996:	e000      	b.n	800799a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007998:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3714      	adds	r7, #20
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr
 80079a8:	40012c00 	.word	0x40012c00
 80079ac:	40000400 	.word	0x40000400
 80079b0:	40000800 	.word	0x40000800
 80079b4:	40013400 	.word	0x40013400
 80079b8:	40014000 	.word	0x40014000
 80079bc:	40015000 	.word	0x40015000
 80079c0:	00010007 	.word	0x00010007

080079c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b085      	sub	sp, #20
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d001      	beq.n	80079dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	e04f      	b.n	8007a7c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2202      	movs	r2, #2
 80079e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68da      	ldr	r2, [r3, #12]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f042 0201 	orr.w	r2, r2, #1
 80079f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a23      	ldr	r2, [pc, #140]	; (8007a88 <HAL_TIM_Base_Start_IT+0xc4>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d01d      	beq.n	8007a3a <HAL_TIM_Base_Start_IT+0x76>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a06:	d018      	beq.n	8007a3a <HAL_TIM_Base_Start_IT+0x76>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a1f      	ldr	r2, [pc, #124]	; (8007a8c <HAL_TIM_Base_Start_IT+0xc8>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d013      	beq.n	8007a3a <HAL_TIM_Base_Start_IT+0x76>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a1e      	ldr	r2, [pc, #120]	; (8007a90 <HAL_TIM_Base_Start_IT+0xcc>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d00e      	beq.n	8007a3a <HAL_TIM_Base_Start_IT+0x76>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a1c      	ldr	r2, [pc, #112]	; (8007a94 <HAL_TIM_Base_Start_IT+0xd0>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d009      	beq.n	8007a3a <HAL_TIM_Base_Start_IT+0x76>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a1b      	ldr	r2, [pc, #108]	; (8007a98 <HAL_TIM_Base_Start_IT+0xd4>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d004      	beq.n	8007a3a <HAL_TIM_Base_Start_IT+0x76>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a19      	ldr	r2, [pc, #100]	; (8007a9c <HAL_TIM_Base_Start_IT+0xd8>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d115      	bne.n	8007a66 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	689a      	ldr	r2, [r3, #8]
 8007a40:	4b17      	ldr	r3, [pc, #92]	; (8007aa0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007a42:	4013      	ands	r3, r2
 8007a44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2b06      	cmp	r3, #6
 8007a4a:	d015      	beq.n	8007a78 <HAL_TIM_Base_Start_IT+0xb4>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a52:	d011      	beq.n	8007a78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f042 0201 	orr.w	r2, r2, #1
 8007a62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a64:	e008      	b.n	8007a78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f042 0201 	orr.w	r2, r2, #1
 8007a74:	601a      	str	r2, [r3, #0]
 8007a76:	e000      	b.n	8007a7a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a78:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3714      	adds	r7, #20
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr
 8007a88:	40012c00 	.word	0x40012c00
 8007a8c:	40000400 	.word	0x40000400
 8007a90:	40000800 	.word	0x40000800
 8007a94:	40013400 	.word	0x40013400
 8007a98:	40014000 	.word	0x40014000
 8007a9c:	40015000 	.word	0x40015000
 8007aa0:	00010007 	.word	0x00010007

08007aa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	691b      	ldr	r3, [r3, #16]
 8007ab2:	f003 0302 	and.w	r3, r3, #2
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d122      	bne.n	8007b00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	f003 0302 	and.w	r3, r3, #2
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d11b      	bne.n	8007b00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f06f 0202 	mvn.w	r2, #2
 8007ad0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	f003 0303 	and.w	r3, r3, #3
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d003      	beq.n	8007aee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f9c3 	bl	8007e72 <HAL_TIM_IC_CaptureCallback>
 8007aec:	e005      	b.n	8007afa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 f9b5 	bl	8007e5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 f9c6 	bl	8007e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	f003 0304 	and.w	r3, r3, #4
 8007b0a:	2b04      	cmp	r3, #4
 8007b0c:	d122      	bne.n	8007b54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	f003 0304 	and.w	r3, r3, #4
 8007b18:	2b04      	cmp	r3, #4
 8007b1a:	d11b      	bne.n	8007b54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f06f 0204 	mvn.w	r2, #4
 8007b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2202      	movs	r2, #2
 8007b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	699b      	ldr	r3, [r3, #24]
 8007b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d003      	beq.n	8007b42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 f999 	bl	8007e72 <HAL_TIM_IC_CaptureCallback>
 8007b40:	e005      	b.n	8007b4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f98b 	bl	8007e5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 f99c 	bl	8007e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	f003 0308 	and.w	r3, r3, #8
 8007b5e:	2b08      	cmp	r3, #8
 8007b60:	d122      	bne.n	8007ba8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	f003 0308 	and.w	r3, r3, #8
 8007b6c:	2b08      	cmp	r3, #8
 8007b6e:	d11b      	bne.n	8007ba8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f06f 0208 	mvn.w	r2, #8
 8007b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2204      	movs	r2, #4
 8007b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	69db      	ldr	r3, [r3, #28]
 8007b86:	f003 0303 	and.w	r3, r3, #3
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d003      	beq.n	8007b96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 f96f 	bl	8007e72 <HAL_TIM_IC_CaptureCallback>
 8007b94:	e005      	b.n	8007ba2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f961 	bl	8007e5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 f972 	bl	8007e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	f003 0310 	and.w	r3, r3, #16
 8007bb2:	2b10      	cmp	r3, #16
 8007bb4:	d122      	bne.n	8007bfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	f003 0310 	and.w	r3, r3, #16
 8007bc0:	2b10      	cmp	r3, #16
 8007bc2:	d11b      	bne.n	8007bfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f06f 0210 	mvn.w	r2, #16
 8007bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2208      	movs	r2, #8
 8007bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	69db      	ldr	r3, [r3, #28]
 8007bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d003      	beq.n	8007bea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 f945 	bl	8007e72 <HAL_TIM_IC_CaptureCallback>
 8007be8:	e005      	b.n	8007bf6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f937 	bl	8007e5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 f948 	bl	8007e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	f003 0301 	and.w	r3, r3, #1
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d10e      	bne.n	8007c28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	f003 0301 	and.w	r3, r3, #1
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d107      	bne.n	8007c28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f06f 0201 	mvn.w	r2, #1
 8007c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f7fa fe3c 	bl	80028a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c32:	2b80      	cmp	r3, #128	; 0x80
 8007c34:	d10e      	bne.n	8007c54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c40:	2b80      	cmp	r3, #128	; 0x80
 8007c42:	d107      	bne.n	8007c54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 fafc 	bl	800824c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c62:	d10e      	bne.n	8007c82 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c6e:	2b80      	cmp	r3, #128	; 0x80
 8007c70:	d107      	bne.n	8007c82 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 faef 	bl	8008260 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	691b      	ldr	r3, [r3, #16]
 8007c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c8c:	2b40      	cmp	r3, #64	; 0x40
 8007c8e:	d10e      	bne.n	8007cae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c9a:	2b40      	cmp	r3, #64	; 0x40
 8007c9c:	d107      	bne.n	8007cae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 f8f6 	bl	8007e9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	f003 0320 	and.w	r3, r3, #32
 8007cb8:	2b20      	cmp	r3, #32
 8007cba:	d10e      	bne.n	8007cda <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	68db      	ldr	r3, [r3, #12]
 8007cc2:	f003 0320 	and.w	r3, r3, #32
 8007cc6:	2b20      	cmp	r3, #32
 8007cc8:	d107      	bne.n	8007cda <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f06f 0220 	mvn.w	r2, #32
 8007cd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 faaf 	bl	8008238 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007cda:	bf00      	nop
 8007cdc:	3708      	adds	r7, #8
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b084      	sub	sp, #16
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
 8007cea:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cec:	2300      	movs	r3, #0
 8007cee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d101      	bne.n	8007cfe <HAL_TIM_ConfigClockSource+0x1c>
 8007cfa:	2302      	movs	r3, #2
 8007cfc:	e0ab      	b.n	8007e56 <HAL_TIM_ConfigClockSource+0x174>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2201      	movs	r2, #1
 8007d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2202      	movs	r2, #2
 8007d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d1c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d20:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d28:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2b40      	cmp	r3, #64	; 0x40
 8007d38:	d067      	beq.n	8007e0a <HAL_TIM_ConfigClockSource+0x128>
 8007d3a:	2b40      	cmp	r3, #64	; 0x40
 8007d3c:	d80b      	bhi.n	8007d56 <HAL_TIM_ConfigClockSource+0x74>
 8007d3e:	2b10      	cmp	r3, #16
 8007d40:	d073      	beq.n	8007e2a <HAL_TIM_ConfigClockSource+0x148>
 8007d42:	2b10      	cmp	r3, #16
 8007d44:	d802      	bhi.n	8007d4c <HAL_TIM_ConfigClockSource+0x6a>
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d06f      	beq.n	8007e2a <HAL_TIM_ConfigClockSource+0x148>
 8007d4a:	e077      	b.n	8007e3c <HAL_TIM_ConfigClockSource+0x15a>
 8007d4c:	2b20      	cmp	r3, #32
 8007d4e:	d06c      	beq.n	8007e2a <HAL_TIM_ConfigClockSource+0x148>
 8007d50:	2b30      	cmp	r3, #48	; 0x30
 8007d52:	d06a      	beq.n	8007e2a <HAL_TIM_ConfigClockSource+0x148>
 8007d54:	e072      	b.n	8007e3c <HAL_TIM_ConfigClockSource+0x15a>
 8007d56:	2b70      	cmp	r3, #112	; 0x70
 8007d58:	d00d      	beq.n	8007d76 <HAL_TIM_ConfigClockSource+0x94>
 8007d5a:	2b70      	cmp	r3, #112	; 0x70
 8007d5c:	d804      	bhi.n	8007d68 <HAL_TIM_ConfigClockSource+0x86>
 8007d5e:	2b50      	cmp	r3, #80	; 0x50
 8007d60:	d033      	beq.n	8007dca <HAL_TIM_ConfigClockSource+0xe8>
 8007d62:	2b60      	cmp	r3, #96	; 0x60
 8007d64:	d041      	beq.n	8007dea <HAL_TIM_ConfigClockSource+0x108>
 8007d66:	e069      	b.n	8007e3c <HAL_TIM_ConfigClockSource+0x15a>
 8007d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d6c:	d069      	beq.n	8007e42 <HAL_TIM_ConfigClockSource+0x160>
 8007d6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d72:	d017      	beq.n	8007da4 <HAL_TIM_ConfigClockSource+0xc2>
 8007d74:	e062      	b.n	8007e3c <HAL_TIM_ConfigClockSource+0x15a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6818      	ldr	r0, [r3, #0]
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	6899      	ldr	r1, [r3, #8]
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	685a      	ldr	r2, [r3, #4]
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	f000 f9ab 	bl	80080e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68ba      	ldr	r2, [r7, #8]
 8007da0:	609a      	str	r2, [r3, #8]
      break;
 8007da2:	e04f      	b.n	8007e44 <HAL_TIM_ConfigClockSource+0x162>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6818      	ldr	r0, [r3, #0]
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	6899      	ldr	r1, [r3, #8]
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	685a      	ldr	r2, [r3, #4]
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	f000 f994 	bl	80080e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	689a      	ldr	r2, [r3, #8]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007dc6:	609a      	str	r2, [r3, #8]
      break;
 8007dc8:	e03c      	b.n	8007e44 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6818      	ldr	r0, [r3, #0]
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	6859      	ldr	r1, [r3, #4]
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	f000 f908 	bl	8007fec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2150      	movs	r1, #80	; 0x50
 8007de2:	4618      	mov	r0, r3
 8007de4:	f000 f961 	bl	80080aa <TIM_ITRx_SetConfig>
      break;
 8007de8:	e02c      	b.n	8007e44 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6818      	ldr	r0, [r3, #0]
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	6859      	ldr	r1, [r3, #4]
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	461a      	mov	r2, r3
 8007df8:	f000 f927 	bl	800804a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2160      	movs	r1, #96	; 0x60
 8007e02:	4618      	mov	r0, r3
 8007e04:	f000 f951 	bl	80080aa <TIM_ITRx_SetConfig>
      break;
 8007e08:	e01c      	b.n	8007e44 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6818      	ldr	r0, [r3, #0]
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	6859      	ldr	r1, [r3, #4]
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	461a      	mov	r2, r3
 8007e18:	f000 f8e8 	bl	8007fec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2140      	movs	r1, #64	; 0x40
 8007e22:	4618      	mov	r0, r3
 8007e24:	f000 f941 	bl	80080aa <TIM_ITRx_SetConfig>
      break;
 8007e28:	e00c      	b.n	8007e44 <HAL_TIM_ConfigClockSource+0x162>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4619      	mov	r1, r3
 8007e34:	4610      	mov	r0, r2
 8007e36:	f000 f938 	bl	80080aa <TIM_ITRx_SetConfig>
      break;
 8007e3a:	e003      	b.n	8007e44 <HAL_TIM_ConfigClockSource+0x162>
    }

    default:
      status = HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e40:	e000      	b.n	8007e44 <HAL_TIM_ConfigClockSource+0x162>
      break;
 8007e42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e5e:	b480      	push	{r7}
 8007e60:	b083      	sub	sp, #12
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e66:	bf00      	nop
 8007e68:	370c      	adds	r7, #12
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr

08007e72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e72:	b480      	push	{r7}
 8007e74:	b083      	sub	sp, #12
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e7a:	bf00      	nop
 8007e7c:	370c      	adds	r7, #12
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr

08007e86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e86:	b480      	push	{r7}
 8007e88:	b083      	sub	sp, #12
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e8e:	bf00      	nop
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b083      	sub	sp, #12
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ea2:	bf00      	nop
 8007ea4:	370c      	adds	r7, #12
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr
	...

08007eb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4a42      	ldr	r2, [pc, #264]	; (8007fcc <TIM_Base_SetConfig+0x11c>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d013      	beq.n	8007ef0 <TIM_Base_SetConfig+0x40>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ece:	d00f      	beq.n	8007ef0 <TIM_Base_SetConfig+0x40>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4a3f      	ldr	r2, [pc, #252]	; (8007fd0 <TIM_Base_SetConfig+0x120>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d00b      	beq.n	8007ef0 <TIM_Base_SetConfig+0x40>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4a3e      	ldr	r2, [pc, #248]	; (8007fd4 <TIM_Base_SetConfig+0x124>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d007      	beq.n	8007ef0 <TIM_Base_SetConfig+0x40>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a3d      	ldr	r2, [pc, #244]	; (8007fd8 <TIM_Base_SetConfig+0x128>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d003      	beq.n	8007ef0 <TIM_Base_SetConfig+0x40>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4a3c      	ldr	r2, [pc, #240]	; (8007fdc <TIM_Base_SetConfig+0x12c>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d108      	bne.n	8007f02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ef6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4a31      	ldr	r2, [pc, #196]	; (8007fcc <TIM_Base_SetConfig+0x11c>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d01f      	beq.n	8007f4a <TIM_Base_SetConfig+0x9a>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f10:	d01b      	beq.n	8007f4a <TIM_Base_SetConfig+0x9a>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	4a2e      	ldr	r2, [pc, #184]	; (8007fd0 <TIM_Base_SetConfig+0x120>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d017      	beq.n	8007f4a <TIM_Base_SetConfig+0x9a>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	4a2d      	ldr	r2, [pc, #180]	; (8007fd4 <TIM_Base_SetConfig+0x124>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d013      	beq.n	8007f4a <TIM_Base_SetConfig+0x9a>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4a2c      	ldr	r2, [pc, #176]	; (8007fd8 <TIM_Base_SetConfig+0x128>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d00f      	beq.n	8007f4a <TIM_Base_SetConfig+0x9a>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4a2c      	ldr	r2, [pc, #176]	; (8007fe0 <TIM_Base_SetConfig+0x130>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d00b      	beq.n	8007f4a <TIM_Base_SetConfig+0x9a>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	4a2b      	ldr	r2, [pc, #172]	; (8007fe4 <TIM_Base_SetConfig+0x134>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d007      	beq.n	8007f4a <TIM_Base_SetConfig+0x9a>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4a2a      	ldr	r2, [pc, #168]	; (8007fe8 <TIM_Base_SetConfig+0x138>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d003      	beq.n	8007f4a <TIM_Base_SetConfig+0x9a>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4a25      	ldr	r2, [pc, #148]	; (8007fdc <TIM_Base_SetConfig+0x12c>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d108      	bne.n	8007f5c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	695b      	ldr	r3, [r3, #20]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	689a      	ldr	r2, [r3, #8]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a12      	ldr	r2, [pc, #72]	; (8007fcc <TIM_Base_SetConfig+0x11c>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d013      	beq.n	8007fb0 <TIM_Base_SetConfig+0x100>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4a13      	ldr	r2, [pc, #76]	; (8007fd8 <TIM_Base_SetConfig+0x128>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d00f      	beq.n	8007fb0 <TIM_Base_SetConfig+0x100>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4a13      	ldr	r2, [pc, #76]	; (8007fe0 <TIM_Base_SetConfig+0x130>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d00b      	beq.n	8007fb0 <TIM_Base_SetConfig+0x100>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4a12      	ldr	r2, [pc, #72]	; (8007fe4 <TIM_Base_SetConfig+0x134>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d007      	beq.n	8007fb0 <TIM_Base_SetConfig+0x100>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a11      	ldr	r2, [pc, #68]	; (8007fe8 <TIM_Base_SetConfig+0x138>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d003      	beq.n	8007fb0 <TIM_Base_SetConfig+0x100>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4a0c      	ldr	r2, [pc, #48]	; (8007fdc <TIM_Base_SetConfig+0x12c>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d103      	bne.n	8007fb8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	691a      	ldr	r2, [r3, #16]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	615a      	str	r2, [r3, #20]
}
 8007fbe:	bf00      	nop
 8007fc0:	3714      	adds	r7, #20
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop
 8007fcc:	40012c00 	.word	0x40012c00
 8007fd0:	40000400 	.word	0x40000400
 8007fd4:	40000800 	.word	0x40000800
 8007fd8:	40013400 	.word	0x40013400
 8007fdc:	40015000 	.word	0x40015000
 8007fe0:	40014000 	.word	0x40014000
 8007fe4:	40014400 	.word	0x40014400
 8007fe8:	40014800 	.word	0x40014800

08007fec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b087      	sub	sp, #28
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6a1b      	ldr	r3, [r3, #32]
 8007ffc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6a1b      	ldr	r3, [r3, #32]
 8008002:	f023 0201 	bic.w	r2, r3, #1
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	699b      	ldr	r3, [r3, #24]
 800800e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008016:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	011b      	lsls	r3, r3, #4
 800801c:	693a      	ldr	r2, [r7, #16]
 800801e:	4313      	orrs	r3, r2
 8008020:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	f023 030a 	bic.w	r3, r3, #10
 8008028:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	4313      	orrs	r3, r2
 8008030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	693a      	ldr	r2, [r7, #16]
 8008036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	697a      	ldr	r2, [r7, #20]
 800803c:	621a      	str	r2, [r3, #32]
}
 800803e:	bf00      	nop
 8008040:	371c      	adds	r7, #28
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr

0800804a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800804a:	b480      	push	{r7}
 800804c:	b087      	sub	sp, #28
 800804e:	af00      	add	r7, sp, #0
 8008050:	60f8      	str	r0, [r7, #12]
 8008052:	60b9      	str	r1, [r7, #8]
 8008054:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6a1b      	ldr	r3, [r3, #32]
 800805a:	f023 0210 	bic.w	r2, r3, #16
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	699b      	ldr	r3, [r3, #24]
 8008066:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6a1b      	ldr	r3, [r3, #32]
 800806c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008074:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	031b      	lsls	r3, r3, #12
 800807a:	697a      	ldr	r2, [r7, #20]
 800807c:	4313      	orrs	r3, r2
 800807e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008086:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	011b      	lsls	r3, r3, #4
 800808c:	693a      	ldr	r2, [r7, #16]
 800808e:	4313      	orrs	r3, r2
 8008090:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	697a      	ldr	r2, [r7, #20]
 8008096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	693a      	ldr	r2, [r7, #16]
 800809c:	621a      	str	r2, [r3, #32]
}
 800809e:	bf00      	nop
 80080a0:	371c      	adds	r7, #28
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr

080080aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80080aa:	b480      	push	{r7}
 80080ac:	b085      	sub	sp, #20
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
 80080b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80080c2:	683a      	ldr	r2, [r7, #0]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	f043 0307 	orr.w	r3, r3, #7
 80080cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	609a      	str	r2, [r3, #8]
}
 80080d4:	bf00      	nop
 80080d6:	3714      	adds	r7, #20
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b087      	sub	sp, #28
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
 80080ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	021a      	lsls	r2, r3, #8
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	431a      	orrs	r2, r3
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	4313      	orrs	r3, r2
 8008108:	697a      	ldr	r2, [r7, #20]
 800810a:	4313      	orrs	r3, r2
 800810c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	697a      	ldr	r2, [r7, #20]
 8008112:	609a      	str	r2, [r3, #8]
}
 8008114:	bf00      	nop
 8008116:	371c      	adds	r7, #28
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008130:	2b01      	cmp	r3, #1
 8008132:	d101      	bne.n	8008138 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008134:	2302      	movs	r3, #2
 8008136:	e06d      	b.n	8008214 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2202      	movs	r2, #2
 8008144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a30      	ldr	r2, [pc, #192]	; (8008220 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d009      	beq.n	8008176 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a2f      	ldr	r2, [pc, #188]	; (8008224 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d004      	beq.n	8008176 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a2d      	ldr	r2, [pc, #180]	; (8008228 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d108      	bne.n	8008188 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800817c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	4313      	orrs	r3, r2
 8008186:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800818e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	4313      	orrs	r3, r2
 8008198:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	68fa      	ldr	r2, [r7, #12]
 80081a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a1e      	ldr	r2, [pc, #120]	; (8008220 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d01d      	beq.n	80081e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081b4:	d018      	beq.n	80081e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a1c      	ldr	r2, [pc, #112]	; (800822c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d013      	beq.n	80081e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a1a      	ldr	r2, [pc, #104]	; (8008230 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d00e      	beq.n	80081e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a15      	ldr	r2, [pc, #84]	; (8008224 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d009      	beq.n	80081e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a16      	ldr	r2, [pc, #88]	; (8008234 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d004      	beq.n	80081e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a11      	ldr	r2, [pc, #68]	; (8008228 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d10c      	bne.n	8008202 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	68ba      	ldr	r2, [r7, #8]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68ba      	ldr	r2, [r7, #8]
 8008200:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2201      	movs	r2, #1
 8008206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3714      	adds	r7, #20
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr
 8008220:	40012c00 	.word	0x40012c00
 8008224:	40013400 	.word	0x40013400
 8008228:	40015000 	.word	0x40015000
 800822c:	40000400 	.word	0x40000400
 8008230:	40000800 	.word	0x40000800
 8008234:	40014000 	.word	0x40014000

08008238 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008240:	bf00      	nop
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008268:	bf00      	nop
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d101      	bne.n	8008286 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	e040      	b.n	8008308 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800828a:	2b00      	cmp	r3, #0
 800828c:	d106      	bne.n	800829c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f7fa fce4 	bl	8002c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2224      	movs	r2, #36	; 0x24
 80082a0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f022 0201 	bic.w	r2, r2, #1
 80082b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fc0e 	bl	8008ad4 <UART_SetConfig>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d101      	bne.n	80082c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	e022      	b.n	8008308 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d002      	beq.n	80082d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fdd6 	bl	8008e7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	685a      	ldr	r2, [r3, #4]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	689a      	ldr	r2, [r3, #8]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f042 0201 	orr.w	r2, r2, #1
 80082fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 fe5d 	bl	8008fc0 <UART_CheckIdleState>
 8008306:	4603      	mov	r3, r0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3708      	adds	r7, #8
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b08a      	sub	sp, #40	; 0x28
 8008314:	af02      	add	r7, sp, #8
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	603b      	str	r3, [r7, #0]
 800831c:	4613      	mov	r3, r2
 800831e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008324:	2b20      	cmp	r3, #32
 8008326:	f040 8082 	bne.w	800842e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d002      	beq.n	8008336 <HAL_UART_Transmit+0x26>
 8008330:	88fb      	ldrh	r3, [r7, #6]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d101      	bne.n	800833a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	e07a      	b.n	8008430 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008340:	2b01      	cmp	r3, #1
 8008342:	d101      	bne.n	8008348 <HAL_UART_Transmit+0x38>
 8008344:	2302      	movs	r3, #2
 8008346:	e073      	b.n	8008430 <HAL_UART_Transmit+0x120>
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2200      	movs	r2, #0
 8008354:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2221      	movs	r2, #33	; 0x21
 800835c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800835e:	f7fb f901 	bl	8003564 <HAL_GetTick>
 8008362:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	88fa      	ldrh	r2, [r7, #6]
 8008368:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	88fa      	ldrh	r2, [r7, #6]
 8008370:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800837c:	d108      	bne.n	8008390 <HAL_UART_Transmit+0x80>
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	691b      	ldr	r3, [r3, #16]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d104      	bne.n	8008390 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008386:	2300      	movs	r3, #0
 8008388:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	61bb      	str	r3, [r7, #24]
 800838e:	e003      	b.n	8008398 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008394:	2300      	movs	r3, #0
 8008396:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80083a0:	e02d      	b.n	80083fe <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	9300      	str	r3, [sp, #0]
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	2200      	movs	r2, #0
 80083aa:	2180      	movs	r1, #128	; 0x80
 80083ac:	68f8      	ldr	r0, [r7, #12]
 80083ae:	f000 fe50 	bl	8009052 <UART_WaitOnFlagUntilTimeout>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d001      	beq.n	80083bc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80083b8:	2303      	movs	r3, #3
 80083ba:	e039      	b.n	8008430 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d10b      	bne.n	80083da <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	881a      	ldrh	r2, [r3, #0]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083ce:	b292      	uxth	r2, r2
 80083d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80083d2:	69bb      	ldr	r3, [r7, #24]
 80083d4:	3302      	adds	r3, #2
 80083d6:	61bb      	str	r3, [r7, #24]
 80083d8:	e008      	b.n	80083ec <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	781a      	ldrb	r2, [r3, #0]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	b292      	uxth	r2, r2
 80083e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80083e6:	69fb      	ldr	r3, [r7, #28]
 80083e8:	3301      	adds	r3, #1
 80083ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	3b01      	subs	r3, #1
 80083f6:	b29a      	uxth	r2, r3
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008404:	b29b      	uxth	r3, r3
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1cb      	bne.n	80083a2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	9300      	str	r3, [sp, #0]
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	2200      	movs	r2, #0
 8008412:	2140      	movs	r1, #64	; 0x40
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f000 fe1c 	bl	8009052 <UART_WaitOnFlagUntilTimeout>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d001      	beq.n	8008424 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008420:	2303      	movs	r3, #3
 8008422:	e005      	b.n	8008430 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2220      	movs	r2, #32
 8008428:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800842a:	2300      	movs	r3, #0
 800842c:	e000      	b.n	8008430 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800842e:	2302      	movs	r3, #2
  }
}
 8008430:	4618      	mov	r0, r3
 8008432:	3720      	adds	r7, #32
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b08a      	sub	sp, #40	; 0x28
 800843c:	af00      	add	r7, sp, #0
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	60b9      	str	r1, [r7, #8]
 8008442:	4613      	mov	r3, r2
 8008444:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800844a:	2b20      	cmp	r3, #32
 800844c:	d13d      	bne.n	80084ca <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d002      	beq.n	800845a <HAL_UART_Receive_IT+0x22>
 8008454:	88fb      	ldrh	r3, [r7, #6]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d101      	bne.n	800845e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	e036      	b.n	80084cc <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008464:	2b01      	cmp	r3, #1
 8008466:	d101      	bne.n	800846c <HAL_UART_Receive_IT+0x34>
 8008468:	2302      	movs	r3, #2
 800846a:	e02f      	b.n	80084cc <HAL_UART_Receive_IT+0x94>
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2201      	movs	r2, #1
 8008470:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2200      	movs	r2, #0
 8008478:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008484:	2b00      	cmp	r3, #0
 8008486:	d018      	beq.n	80084ba <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	e853 3f00 	ldrex	r3, [r3]
 8008494:	613b      	str	r3, [r7, #16]
   return(result);
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800849c:	627b      	str	r3, [r7, #36]	; 0x24
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	461a      	mov	r2, r3
 80084a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a6:	623b      	str	r3, [r7, #32]
 80084a8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084aa:	69f9      	ldr	r1, [r7, #28]
 80084ac:	6a3a      	ldr	r2, [r7, #32]
 80084ae:	e841 2300 	strex	r3, r2, [r1]
 80084b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d1e6      	bne.n	8008488 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80084ba:	88fb      	ldrh	r3, [r7, #6]
 80084bc:	461a      	mov	r2, r3
 80084be:	68b9      	ldr	r1, [r7, #8]
 80084c0:	68f8      	ldr	r0, [r7, #12]
 80084c2:	f000 fe8b 	bl	80091dc <UART_Start_Receive_IT>
 80084c6:	4603      	mov	r3, r0
 80084c8:	e000      	b.n	80084cc <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80084ca:	2302      	movs	r3, #2
  }
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3728      	adds	r7, #40	; 0x28
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b0ba      	sub	sp, #232	; 0xe8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	69db      	ldr	r3, [r3, #28]
 80084e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80084fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80084fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8008502:	4013      	ands	r3, r2
 8008504:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008508:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800850c:	2b00      	cmp	r3, #0
 800850e:	d115      	bne.n	800853c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008514:	f003 0320 	and.w	r3, r3, #32
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00f      	beq.n	800853c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800851c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008520:	f003 0320 	and.w	r3, r3, #32
 8008524:	2b00      	cmp	r3, #0
 8008526:	d009      	beq.n	800853c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800852c:	2b00      	cmp	r3, #0
 800852e:	f000 82a4 	beq.w	8008a7a <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	4798      	blx	r3
      }
      return;
 800853a:	e29e      	b.n	8008a7a <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800853c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008540:	2b00      	cmp	r3, #0
 8008542:	f000 8117 	beq.w	8008774 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800854a:	f003 0301 	and.w	r3, r3, #1
 800854e:	2b00      	cmp	r3, #0
 8008550:	d106      	bne.n	8008560 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008552:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008556:	4b85      	ldr	r3, [pc, #532]	; (800876c <HAL_UART_IRQHandler+0x298>)
 8008558:	4013      	ands	r3, r2
 800855a:	2b00      	cmp	r3, #0
 800855c:	f000 810a 	beq.w	8008774 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008564:	f003 0301 	and.w	r3, r3, #1
 8008568:	2b00      	cmp	r3, #0
 800856a:	d011      	beq.n	8008590 <HAL_UART_IRQHandler+0xbc>
 800856c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00b      	beq.n	8008590 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2201      	movs	r2, #1
 800857e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008586:	f043 0201 	orr.w	r2, r3, #1
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008594:	f003 0302 	and.w	r3, r3, #2
 8008598:	2b00      	cmp	r3, #0
 800859a:	d011      	beq.n	80085c0 <HAL_UART_IRQHandler+0xec>
 800859c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085a0:	f003 0301 	and.w	r3, r3, #1
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d00b      	beq.n	80085c0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2202      	movs	r2, #2
 80085ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085b6:	f043 0204 	orr.w	r2, r3, #4
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085c4:	f003 0304 	and.w	r3, r3, #4
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d011      	beq.n	80085f0 <HAL_UART_IRQHandler+0x11c>
 80085cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085d0:	f003 0301 	and.w	r3, r3, #1
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d00b      	beq.n	80085f0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2204      	movs	r2, #4
 80085de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085e6:	f043 0202 	orr.w	r2, r3, #2
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80085f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085f4:	f003 0308 	and.w	r3, r3, #8
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d017      	beq.n	800862c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80085fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008600:	f003 0320 	and.w	r3, r3, #32
 8008604:	2b00      	cmp	r3, #0
 8008606:	d105      	bne.n	8008614 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008608:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800860c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00b      	beq.n	800862c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2208      	movs	r2, #8
 800861a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008622:	f043 0208 	orr.w	r2, r3, #8
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800862c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008634:	2b00      	cmp	r3, #0
 8008636:	d012      	beq.n	800865e <HAL_UART_IRQHandler+0x18a>
 8008638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800863c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008640:	2b00      	cmp	r3, #0
 8008642:	d00c      	beq.n	800865e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800864c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008654:	f043 0220 	orr.w	r2, r3, #32
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008664:	2b00      	cmp	r3, #0
 8008666:	f000 820a 	beq.w	8008a7e <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800866a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800866e:	f003 0320 	and.w	r3, r3, #32
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00d      	beq.n	8008692 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800867a:	f003 0320 	and.w	r3, r3, #32
 800867e:	2b00      	cmp	r3, #0
 8008680:	d007      	beq.n	8008692 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008686:	2b00      	cmp	r3, #0
 8008688:	d003      	beq.n	8008692 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008698:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086a6:	2b40      	cmp	r3, #64	; 0x40
 80086a8:	d005      	beq.n	80086b6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80086aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80086ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d04f      	beq.n	8008756 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 fe3c 	bl	8009334 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c6:	2b40      	cmp	r3, #64	; 0x40
 80086c8:	d141      	bne.n	800874e <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	3308      	adds	r3, #8
 80086d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80086d8:	e853 3f00 	ldrex	r3, [r3]
 80086dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80086e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80086e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	3308      	adds	r3, #8
 80086f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80086f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80086fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008702:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008706:	e841 2300 	strex	r3, r2, [r1]
 800870a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800870e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1d9      	bne.n	80086ca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800871a:	2b00      	cmp	r3, #0
 800871c:	d013      	beq.n	8008746 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008722:	4a13      	ldr	r2, [pc, #76]	; (8008770 <HAL_UART_IRQHandler+0x29c>)
 8008724:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800872a:	4618      	mov	r0, r3
 800872c:	f7fc fd00 	bl	8005130 <HAL_DMA_Abort_IT>
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d017      	beq.n	8008766 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800873a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008740:	4610      	mov	r0, r2
 8008742:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008744:	e00f      	b.n	8008766 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 f9ae 	bl	8008aa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800874c:	e00b      	b.n	8008766 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 f9aa 	bl	8008aa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008754:	e007      	b.n	8008766 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 f9a6 	bl	8008aa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008764:	e18b      	b.n	8008a7e <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008766:	bf00      	nop
    return;
 8008768:	e189      	b.n	8008a7e <HAL_UART_IRQHandler+0x5aa>
 800876a:	bf00      	nop
 800876c:	04000120 	.word	0x04000120
 8008770:	080093fb 	.word	0x080093fb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008778:	2b01      	cmp	r3, #1
 800877a:	f040 8143 	bne.w	8008a04 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800877e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008782:	f003 0310 	and.w	r3, r3, #16
 8008786:	2b00      	cmp	r3, #0
 8008788:	f000 813c 	beq.w	8008a04 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800878c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008790:	f003 0310 	and.w	r3, r3, #16
 8008794:	2b00      	cmp	r3, #0
 8008796:	f000 8135 	beq.w	8008a04 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2210      	movs	r2, #16
 80087a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ac:	2b40      	cmp	r3, #64	; 0x40
 80087ae:	f040 80b1 	bne.w	8008914 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80087be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	f000 815d 	beq.w	8008a82 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80087ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80087d2:	429a      	cmp	r2, r3
 80087d4:	f080 8155 	bcs.w	8008a82 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80087de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087e6:	699b      	ldr	r3, [r3, #24]
 80087e8:	2b20      	cmp	r3, #32
 80087ea:	f000 8085 	beq.w	80088f8 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80087fa:	e853 3f00 	ldrex	r3, [r3]
 80087fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008802:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008806:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800880a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	461a      	mov	r2, r3
 8008814:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008818:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800881c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008820:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008824:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008828:	e841 2300 	strex	r3, r2, [r1]
 800882c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008830:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008834:	2b00      	cmp	r3, #0
 8008836:	d1da      	bne.n	80087ee <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	3308      	adds	r3, #8
 800883e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008840:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008842:	e853 3f00 	ldrex	r3, [r3]
 8008846:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008848:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800884a:	f023 0301 	bic.w	r3, r3, #1
 800884e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	3308      	adds	r3, #8
 8008858:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800885c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008860:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008862:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008864:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008868:	e841 2300 	strex	r3, r2, [r1]
 800886c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800886e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008870:	2b00      	cmp	r3, #0
 8008872:	d1e1      	bne.n	8008838 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	3308      	adds	r3, #8
 800887a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800887e:	e853 3f00 	ldrex	r3, [r3]
 8008882:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008884:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008886:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800888a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	3308      	adds	r3, #8
 8008894:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008898:	66fa      	str	r2, [r7, #108]	; 0x6c
 800889a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800889c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800889e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80088a0:	e841 2300 	strex	r3, r2, [r1]
 80088a4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80088a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d1e3      	bne.n	8008874 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2220      	movs	r2, #32
 80088b0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088c0:	e853 3f00 	ldrex	r3, [r3]
 80088c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80088c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088c8:	f023 0310 	bic.w	r3, r3, #16
 80088cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	461a      	mov	r2, r3
 80088d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088da:	65bb      	str	r3, [r7, #88]	; 0x58
 80088dc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80088e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80088e2:	e841 2300 	strex	r3, r2, [r1]
 80088e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80088e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d1e4      	bne.n	80088b8 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7fc fbe3 	bl	80050be <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008904:	b29b      	uxth	r3, r3
 8008906:	1ad3      	subs	r3, r2, r3
 8008908:	b29b      	uxth	r3, r3
 800890a:	4619      	mov	r1, r3
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 f8d5 	bl	8008abc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008912:	e0b6      	b.n	8008a82 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008920:	b29b      	uxth	r3, r3
 8008922:	1ad3      	subs	r3, r2, r3
 8008924:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800892e:	b29b      	uxth	r3, r3
 8008930:	2b00      	cmp	r3, #0
 8008932:	f000 80a8 	beq.w	8008a86 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8008936:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800893a:	2b00      	cmp	r3, #0
 800893c:	f000 80a3 	beq.w	8008a86 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008948:	e853 3f00 	ldrex	r3, [r3]
 800894c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800894e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008950:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008954:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	461a      	mov	r2, r3
 800895e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008962:	647b      	str	r3, [r7, #68]	; 0x44
 8008964:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008966:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008968:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800896a:	e841 2300 	strex	r3, r2, [r1]
 800896e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008972:	2b00      	cmp	r3, #0
 8008974:	d1e4      	bne.n	8008940 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	3308      	adds	r3, #8
 800897c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800897e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008980:	e853 3f00 	ldrex	r3, [r3]
 8008984:	623b      	str	r3, [r7, #32]
   return(result);
 8008986:	6a3b      	ldr	r3, [r7, #32]
 8008988:	f023 0301 	bic.w	r3, r3, #1
 800898c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	3308      	adds	r3, #8
 8008996:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800899a:	633a      	str	r2, [r7, #48]	; 0x30
 800899c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800899e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80089a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089a2:	e841 2300 	strex	r3, r2, [r1]
 80089a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80089a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d1e3      	bne.n	8008976 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2220      	movs	r2, #32
 80089b2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	e853 3f00 	ldrex	r3, [r3]
 80089cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f023 0310 	bic.w	r3, r3, #16
 80089d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	461a      	mov	r2, r3
 80089de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80089e2:	61fb      	str	r3, [r7, #28]
 80089e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e6:	69b9      	ldr	r1, [r7, #24]
 80089e8:	69fa      	ldr	r2, [r7, #28]
 80089ea:	e841 2300 	strex	r3, r2, [r1]
 80089ee:	617b      	str	r3, [r7, #20]
   return(result);
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d1e4      	bne.n	80089c0 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80089f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80089fa:	4619      	mov	r1, r3
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 f85d 	bl	8008abc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008a02:	e040      	b.n	8008a86 <HAL_UART_IRQHandler+0x5b2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00e      	beq.n	8008a2e <HAL_UART_IRQHandler+0x55a>
 8008a10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d008      	beq.n	8008a2e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008a24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 fe83 	bl	8009732 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a2c:	e02e      	b.n	8008a8c <HAL_UART_IRQHandler+0x5b8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d00e      	beq.n	8008a58 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008a3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d008      	beq.n	8008a58 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d01d      	beq.n	8008a8a <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	4798      	blx	r3
    }
    return;
 8008a56:	e018      	b.n	8008a8a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d013      	beq.n	8008a8c <HAL_UART_IRQHandler+0x5b8>
 8008a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d00d      	beq.n	8008a8c <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 fcd8 	bl	8009426 <UART_EndTransmit_IT>
    return;
 8008a76:	bf00      	nop
 8008a78:	e008      	b.n	8008a8c <HAL_UART_IRQHandler+0x5b8>
      return;
 8008a7a:	bf00      	nop
 8008a7c:	e006      	b.n	8008a8c <HAL_UART_IRQHandler+0x5b8>
    return;
 8008a7e:	bf00      	nop
 8008a80:	e004      	b.n	8008a8c <HAL_UART_IRQHandler+0x5b8>
      return;
 8008a82:	bf00      	nop
 8008a84:	e002      	b.n	8008a8c <HAL_UART_IRQHandler+0x5b8>
      return;
 8008a86:	bf00      	nop
 8008a88:	e000      	b.n	8008a8c <HAL_UART_IRQHandler+0x5b8>
    return;
 8008a8a:	bf00      	nop
  }

}
 8008a8c:	37e8      	adds	r7, #232	; 0xe8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop

08008a94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008a9c:	bf00      	nop
 8008a9e:	370c      	adds	r7, #12
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr

08008aa8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008ab0:	bf00      	nop
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ac8:	bf00      	nop
 8008aca:	370c      	adds	r7, #12
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b088      	sub	sp, #32
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008adc:	2300      	movs	r3, #0
 8008ade:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	689a      	ldr	r2, [r3, #8]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	431a      	orrs	r2, r3
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	695b      	ldr	r3, [r3, #20]
 8008aee:	431a      	orrs	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	69db      	ldr	r3, [r3, #28]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	4baa      	ldr	r3, [pc, #680]	; (8008da8 <UART_SetConfig+0x2d4>)
 8008b00:	4013      	ands	r3, r2
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	6812      	ldr	r2, [r2, #0]
 8008b06:	6979      	ldr	r1, [r7, #20]
 8008b08:	430b      	orrs	r3, r1
 8008b0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	68da      	ldr	r2, [r3, #12]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	430a      	orrs	r2, r1
 8008b20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	699b      	ldr	r3, [r3, #24]
 8008b26:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6a1b      	ldr	r3, [r3, #32]
 8008b2c:	697a      	ldr	r2, [r7, #20]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	697a      	ldr	r2, [r7, #20]
 8008b42:	430a      	orrs	r2, r1
 8008b44:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a98      	ldr	r2, [pc, #608]	; (8008dac <UART_SetConfig+0x2d8>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d121      	bne.n	8008b94 <UART_SetConfig+0xc0>
 8008b50:	4b97      	ldr	r3, [pc, #604]	; (8008db0 <UART_SetConfig+0x2dc>)
 8008b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b54:	f003 0303 	and.w	r3, r3, #3
 8008b58:	2b03      	cmp	r3, #3
 8008b5a:	d817      	bhi.n	8008b8c <UART_SetConfig+0xb8>
 8008b5c:	a201      	add	r2, pc, #4	; (adr r2, 8008b64 <UART_SetConfig+0x90>)
 8008b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b62:	bf00      	nop
 8008b64:	08008b75 	.word	0x08008b75
 8008b68:	08008b81 	.word	0x08008b81
 8008b6c:	08008b87 	.word	0x08008b87
 8008b70:	08008b7b 	.word	0x08008b7b
 8008b74:	2301      	movs	r3, #1
 8008b76:	77fb      	strb	r3, [r7, #31]
 8008b78:	e0b2      	b.n	8008ce0 <UART_SetConfig+0x20c>
 8008b7a:	2302      	movs	r3, #2
 8008b7c:	77fb      	strb	r3, [r7, #31]
 8008b7e:	e0af      	b.n	8008ce0 <UART_SetConfig+0x20c>
 8008b80:	2304      	movs	r3, #4
 8008b82:	77fb      	strb	r3, [r7, #31]
 8008b84:	e0ac      	b.n	8008ce0 <UART_SetConfig+0x20c>
 8008b86:	2308      	movs	r3, #8
 8008b88:	77fb      	strb	r3, [r7, #31]
 8008b8a:	e0a9      	b.n	8008ce0 <UART_SetConfig+0x20c>
 8008b8c:	2310      	movs	r3, #16
 8008b8e:	77fb      	strb	r3, [r7, #31]
 8008b90:	bf00      	nop
 8008b92:	e0a5      	b.n	8008ce0 <UART_SetConfig+0x20c>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a86      	ldr	r2, [pc, #536]	; (8008db4 <UART_SetConfig+0x2e0>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d123      	bne.n	8008be6 <UART_SetConfig+0x112>
 8008b9e:	4b84      	ldr	r3, [pc, #528]	; (8008db0 <UART_SetConfig+0x2dc>)
 8008ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008baa:	d012      	beq.n	8008bd2 <UART_SetConfig+0xfe>
 8008bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bb0:	d802      	bhi.n	8008bb8 <UART_SetConfig+0xe4>
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d007      	beq.n	8008bc6 <UART_SetConfig+0xf2>
 8008bb6:	e012      	b.n	8008bde <UART_SetConfig+0x10a>
 8008bb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008bbc:	d00c      	beq.n	8008bd8 <UART_SetConfig+0x104>
 8008bbe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008bc2:	d003      	beq.n	8008bcc <UART_SetConfig+0xf8>
 8008bc4:	e00b      	b.n	8008bde <UART_SetConfig+0x10a>
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	77fb      	strb	r3, [r7, #31]
 8008bca:	e089      	b.n	8008ce0 <UART_SetConfig+0x20c>
 8008bcc:	2302      	movs	r3, #2
 8008bce:	77fb      	strb	r3, [r7, #31]
 8008bd0:	e086      	b.n	8008ce0 <UART_SetConfig+0x20c>
 8008bd2:	2304      	movs	r3, #4
 8008bd4:	77fb      	strb	r3, [r7, #31]
 8008bd6:	e083      	b.n	8008ce0 <UART_SetConfig+0x20c>
 8008bd8:	2308      	movs	r3, #8
 8008bda:	77fb      	strb	r3, [r7, #31]
 8008bdc:	e080      	b.n	8008ce0 <UART_SetConfig+0x20c>
 8008bde:	2310      	movs	r3, #16
 8008be0:	77fb      	strb	r3, [r7, #31]
 8008be2:	bf00      	nop
 8008be4:	e07c      	b.n	8008ce0 <UART_SetConfig+0x20c>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a73      	ldr	r2, [pc, #460]	; (8008db8 <UART_SetConfig+0x2e4>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d123      	bne.n	8008c38 <UART_SetConfig+0x164>
 8008bf0:	4b6f      	ldr	r3, [pc, #444]	; (8008db0 <UART_SetConfig+0x2dc>)
 8008bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008bf8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008bfc:	d012      	beq.n	8008c24 <UART_SetConfig+0x150>
 8008bfe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008c02:	d802      	bhi.n	8008c0a <UART_SetConfig+0x136>
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d007      	beq.n	8008c18 <UART_SetConfig+0x144>
 8008c08:	e012      	b.n	8008c30 <UART_SetConfig+0x15c>
 8008c0a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008c0e:	d00c      	beq.n	8008c2a <UART_SetConfig+0x156>
 8008c10:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008c14:	d003      	beq.n	8008c1e <UART_SetConfig+0x14a>
 8008c16:	e00b      	b.n	8008c30 <UART_SetConfig+0x15c>
 8008c18:	2300      	movs	r3, #0
 8008c1a:	77fb      	strb	r3, [r7, #31]
 8008c1c:	e060      	b.n	8008ce0 <UART_SetConfig+0x20c>
 8008c1e:	2302      	movs	r3, #2
 8008c20:	77fb      	strb	r3, [r7, #31]
 8008c22:	e05d      	b.n	8008ce0 <UART_SetConfig+0x20c>
 8008c24:	2304      	movs	r3, #4
 8008c26:	77fb      	strb	r3, [r7, #31]
 8008c28:	e05a      	b.n	8008ce0 <UART_SetConfig+0x20c>
 8008c2a:	2308      	movs	r3, #8
 8008c2c:	77fb      	strb	r3, [r7, #31]
 8008c2e:	e057      	b.n	8008ce0 <UART_SetConfig+0x20c>
 8008c30:	2310      	movs	r3, #16
 8008c32:	77fb      	strb	r3, [r7, #31]
 8008c34:	bf00      	nop
 8008c36:	e053      	b.n	8008ce0 <UART_SetConfig+0x20c>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a5f      	ldr	r2, [pc, #380]	; (8008dbc <UART_SetConfig+0x2e8>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d123      	bne.n	8008c8a <UART_SetConfig+0x1b6>
 8008c42:	4b5b      	ldr	r3, [pc, #364]	; (8008db0 <UART_SetConfig+0x2dc>)
 8008c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c46:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008c4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c4e:	d012      	beq.n	8008c76 <UART_SetConfig+0x1a2>
 8008c50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c54:	d802      	bhi.n	8008c5c <UART_SetConfig+0x188>
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d007      	beq.n	8008c6a <UART_SetConfig+0x196>
 8008c5a:	e012      	b.n	8008c82 <UART_SetConfig+0x1ae>
 8008c5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c60:	d00c      	beq.n	8008c7c <UART_SetConfig+0x1a8>
 8008c62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008c66:	d003      	beq.n	8008c70 <UART_SetConfig+0x19c>
 8008c68:	e00b      	b.n	8008c82 <UART_SetConfig+0x1ae>
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	77fb      	strb	r3, [r7, #31]
 8008c6e:	e037      	b.n	8008ce0 <UART_SetConfig+0x20c>
 8008c70:	2302      	movs	r3, #2
 8008c72:	77fb      	strb	r3, [r7, #31]
 8008c74:	e034      	b.n	8008ce0 <UART_SetConfig+0x20c>
 8008c76:	2304      	movs	r3, #4
 8008c78:	77fb      	strb	r3, [r7, #31]
 8008c7a:	e031      	b.n	8008ce0 <UART_SetConfig+0x20c>
 8008c7c:	2308      	movs	r3, #8
 8008c7e:	77fb      	strb	r3, [r7, #31]
 8008c80:	e02e      	b.n	8008ce0 <UART_SetConfig+0x20c>
 8008c82:	2310      	movs	r3, #16
 8008c84:	77fb      	strb	r3, [r7, #31]
 8008c86:	bf00      	nop
 8008c88:	e02a      	b.n	8008ce0 <UART_SetConfig+0x20c>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a4c      	ldr	r2, [pc, #304]	; (8008dc0 <UART_SetConfig+0x2ec>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d123      	bne.n	8008cdc <UART_SetConfig+0x208>
 8008c94:	4b46      	ldr	r3, [pc, #280]	; (8008db0 <UART_SetConfig+0x2dc>)
 8008c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c98:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008c9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ca0:	d012      	beq.n	8008cc8 <UART_SetConfig+0x1f4>
 8008ca2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ca6:	d802      	bhi.n	8008cae <UART_SetConfig+0x1da>
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d007      	beq.n	8008cbc <UART_SetConfig+0x1e8>
 8008cac:	e012      	b.n	8008cd4 <UART_SetConfig+0x200>
 8008cae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008cb2:	d00c      	beq.n	8008cce <UART_SetConfig+0x1fa>
 8008cb4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008cb8:	d003      	beq.n	8008cc2 <UART_SetConfig+0x1ee>
 8008cba:	e00b      	b.n	8008cd4 <UART_SetConfig+0x200>
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	77fb      	strb	r3, [r7, #31]
 8008cc0:	e00e      	b.n	8008ce0 <UART_SetConfig+0x20c>
 8008cc2:	2302      	movs	r3, #2
 8008cc4:	77fb      	strb	r3, [r7, #31]
 8008cc6:	e00b      	b.n	8008ce0 <UART_SetConfig+0x20c>
 8008cc8:	2304      	movs	r3, #4
 8008cca:	77fb      	strb	r3, [r7, #31]
 8008ccc:	e008      	b.n	8008ce0 <UART_SetConfig+0x20c>
 8008cce:	2308      	movs	r3, #8
 8008cd0:	77fb      	strb	r3, [r7, #31]
 8008cd2:	e005      	b.n	8008ce0 <UART_SetConfig+0x20c>
 8008cd4:	2310      	movs	r3, #16
 8008cd6:	77fb      	strb	r3, [r7, #31]
 8008cd8:	bf00      	nop
 8008cda:	e001      	b.n	8008ce0 <UART_SetConfig+0x20c>
 8008cdc:	2310      	movs	r3, #16
 8008cde:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	69db      	ldr	r3, [r3, #28]
 8008ce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ce8:	d16e      	bne.n	8008dc8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8008cea:	7ffb      	ldrb	r3, [r7, #31]
 8008cec:	2b08      	cmp	r3, #8
 8008cee:	d828      	bhi.n	8008d42 <UART_SetConfig+0x26e>
 8008cf0:	a201      	add	r2, pc, #4	; (adr r2, 8008cf8 <UART_SetConfig+0x224>)
 8008cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf6:	bf00      	nop
 8008cf8:	08008d1d 	.word	0x08008d1d
 8008cfc:	08008d25 	.word	0x08008d25
 8008d00:	08008d2d 	.word	0x08008d2d
 8008d04:	08008d43 	.word	0x08008d43
 8008d08:	08008d33 	.word	0x08008d33
 8008d0c:	08008d43 	.word	0x08008d43
 8008d10:	08008d43 	.word	0x08008d43
 8008d14:	08008d43 	.word	0x08008d43
 8008d18:	08008d3b 	.word	0x08008d3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d1c:	f7fe fb30 	bl	8007380 <HAL_RCC_GetPCLK1Freq>
 8008d20:	61b8      	str	r0, [r7, #24]
        break;
 8008d22:	e013      	b.n	8008d4c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d24:	f7fe fb4e 	bl	80073c4 <HAL_RCC_GetPCLK2Freq>
 8008d28:	61b8      	str	r0, [r7, #24]
        break;
 8008d2a:	e00f      	b.n	8008d4c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d2c:	4b25      	ldr	r3, [pc, #148]	; (8008dc4 <UART_SetConfig+0x2f0>)
 8008d2e:	61bb      	str	r3, [r7, #24]
        break;
 8008d30:	e00c      	b.n	8008d4c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d32:	f7fe faaf 	bl	8007294 <HAL_RCC_GetSysClockFreq>
 8008d36:	61b8      	str	r0, [r7, #24]
        break;
 8008d38:	e008      	b.n	8008d4c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d3e:	61bb      	str	r3, [r7, #24]
        break;
 8008d40:	e004      	b.n	8008d4c <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8008d42:	2300      	movs	r3, #0
 8008d44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	77bb      	strb	r3, [r7, #30]
        break;
 8008d4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008d4c:	69bb      	ldr	r3, [r7, #24]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	f000 8086 	beq.w	8008e60 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	005a      	lsls	r2, r3, #1
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	085b      	lsrs	r3, r3, #1
 8008d5e:	441a      	add	r2, r3
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	2b0f      	cmp	r3, #15
 8008d70:	d916      	bls.n	8008da0 <UART_SetConfig+0x2cc>
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d78:	d212      	bcs.n	8008da0 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	f023 030f 	bic.w	r3, r3, #15
 8008d82:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	085b      	lsrs	r3, r3, #1
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	f003 0307 	and.w	r3, r3, #7
 8008d8e:	b29a      	uxth	r2, r3
 8008d90:	89fb      	ldrh	r3, [r7, #14]
 8008d92:	4313      	orrs	r3, r2
 8008d94:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	89fa      	ldrh	r2, [r7, #14]
 8008d9c:	60da      	str	r2, [r3, #12]
 8008d9e:	e05f      	b.n	8008e60 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008da0:	2301      	movs	r3, #1
 8008da2:	77bb      	strb	r3, [r7, #30]
 8008da4:	e05c      	b.n	8008e60 <UART_SetConfig+0x38c>
 8008da6:	bf00      	nop
 8008da8:	efff69f3 	.word	0xefff69f3
 8008dac:	40013800 	.word	0x40013800
 8008db0:	40021000 	.word	0x40021000
 8008db4:	40004400 	.word	0x40004400
 8008db8:	40004800 	.word	0x40004800
 8008dbc:	40004c00 	.word	0x40004c00
 8008dc0:	40005000 	.word	0x40005000
 8008dc4:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8008dc8:	7ffb      	ldrb	r3, [r7, #31]
 8008dca:	2b08      	cmp	r3, #8
 8008dcc:	d827      	bhi.n	8008e1e <UART_SetConfig+0x34a>
 8008dce:	a201      	add	r2, pc, #4	; (adr r2, 8008dd4 <UART_SetConfig+0x300>)
 8008dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd4:	08008df9 	.word	0x08008df9
 8008dd8:	08008e01 	.word	0x08008e01
 8008ddc:	08008e09 	.word	0x08008e09
 8008de0:	08008e1f 	.word	0x08008e1f
 8008de4:	08008e0f 	.word	0x08008e0f
 8008de8:	08008e1f 	.word	0x08008e1f
 8008dec:	08008e1f 	.word	0x08008e1f
 8008df0:	08008e1f 	.word	0x08008e1f
 8008df4:	08008e17 	.word	0x08008e17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008df8:	f7fe fac2 	bl	8007380 <HAL_RCC_GetPCLK1Freq>
 8008dfc:	61b8      	str	r0, [r7, #24]
        break;
 8008dfe:	e013      	b.n	8008e28 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e00:	f7fe fae0 	bl	80073c4 <HAL_RCC_GetPCLK2Freq>
 8008e04:	61b8      	str	r0, [r7, #24]
        break;
 8008e06:	e00f      	b.n	8008e28 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e08:	4b1b      	ldr	r3, [pc, #108]	; (8008e78 <UART_SetConfig+0x3a4>)
 8008e0a:	61bb      	str	r3, [r7, #24]
        break;
 8008e0c:	e00c      	b.n	8008e28 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e0e:	f7fe fa41 	bl	8007294 <HAL_RCC_GetSysClockFreq>
 8008e12:	61b8      	str	r0, [r7, #24]
        break;
 8008e14:	e008      	b.n	8008e28 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e1a:	61bb      	str	r3, [r7, #24]
        break;
 8008e1c:	e004      	b.n	8008e28 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008e22:	2301      	movs	r3, #1
 8008e24:	77bb      	strb	r3, [r7, #30]
        break;
 8008e26:	bf00      	nop
    }

    if (pclk != 0U)
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d018      	beq.n	8008e60 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	085a      	lsrs	r2, r3, #1
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	441a      	add	r2, r3
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	2b0f      	cmp	r3, #15
 8008e48:	d908      	bls.n	8008e5c <UART_SetConfig+0x388>
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e50:	d204      	bcs.n	8008e5c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	693a      	ldr	r2, [r7, #16]
 8008e58:	60da      	str	r2, [r3, #12]
 8008e5a:	e001      	b.n	8008e60 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008e6c:	7fbb      	ldrb	r3, [r7, #30]
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3720      	adds	r7, #32
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	007a1200 	.word	0x007a1200

08008e7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e88:	f003 0301 	and.w	r3, r3, #1
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00a      	beq.n	8008ea6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	430a      	orrs	r2, r1
 8008ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eaa:	f003 0302 	and.w	r3, r3, #2
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00a      	beq.n	8008ec8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	430a      	orrs	r2, r1
 8008ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ecc:	f003 0304 	and.w	r3, r3, #4
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00a      	beq.n	8008eea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	430a      	orrs	r2, r1
 8008ee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eee:	f003 0308 	and.w	r3, r3, #8
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00a      	beq.n	8008f0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	430a      	orrs	r2, r1
 8008f0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f10:	f003 0310 	and.w	r3, r3, #16
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d00a      	beq.n	8008f2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	430a      	orrs	r2, r1
 8008f2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f32:	f003 0320 	and.w	r3, r3, #32
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d00a      	beq.n	8008f50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	430a      	orrs	r2, r1
 8008f4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d01a      	beq.n	8008f92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	430a      	orrs	r2, r1
 8008f70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f7a:	d10a      	bne.n	8008f92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	430a      	orrs	r2, r1
 8008f90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d00a      	beq.n	8008fb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	430a      	orrs	r2, r1
 8008fb2:	605a      	str	r2, [r3, #4]
  }
}
 8008fb4:	bf00      	nop
 8008fb6:	370c      	adds	r7, #12
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr

08008fc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b086      	sub	sp, #24
 8008fc4:	af02      	add	r7, sp, #8
 8008fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008fd0:	f7fa fac8 	bl	8003564 <HAL_GetTick>
 8008fd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f003 0308 	and.w	r3, r3, #8
 8008fe0:	2b08      	cmp	r3, #8
 8008fe2:	d10e      	bne.n	8009002 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fe4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008fe8:	9300      	str	r3, [sp, #0]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2200      	movs	r2, #0
 8008fee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 f82d 	bl	8009052 <UART_WaitOnFlagUntilTimeout>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d001      	beq.n	8009002 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ffe:	2303      	movs	r3, #3
 8009000:	e023      	b.n	800904a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f003 0304 	and.w	r3, r3, #4
 800900c:	2b04      	cmp	r3, #4
 800900e:	d10e      	bne.n	800902e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009010:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009014:	9300      	str	r3, [sp, #0]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2200      	movs	r2, #0
 800901a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 f817 	bl	8009052 <UART_WaitOnFlagUntilTimeout>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d001      	beq.n	800902e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800902a:	2303      	movs	r3, #3
 800902c:	e00d      	b.n	800904a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2220      	movs	r2, #32
 8009032:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2220      	movs	r2, #32
 8009038:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009048:	2300      	movs	r3, #0
}
 800904a:	4618      	mov	r0, r3
 800904c:	3710      	adds	r7, #16
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009052:	b580      	push	{r7, lr}
 8009054:	b09c      	sub	sp, #112	; 0x70
 8009056:	af00      	add	r7, sp, #0
 8009058:	60f8      	str	r0, [r7, #12]
 800905a:	60b9      	str	r1, [r7, #8]
 800905c:	603b      	str	r3, [r7, #0]
 800905e:	4613      	mov	r3, r2
 8009060:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009062:	e0a5      	b.n	80091b0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009064:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800906a:	f000 80a1 	beq.w	80091b0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800906e:	f7fa fa79 	bl	8003564 <HAL_GetTick>
 8009072:	4602      	mov	r2, r0
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	1ad3      	subs	r3, r2, r3
 8009078:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800907a:	429a      	cmp	r2, r3
 800907c:	d302      	bcc.n	8009084 <UART_WaitOnFlagUntilTimeout+0x32>
 800907e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009080:	2b00      	cmp	r3, #0
 8009082:	d13e      	bne.n	8009102 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800908a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800908c:	e853 3f00 	ldrex	r3, [r3]
 8009090:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009094:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009098:	667b      	str	r3, [r7, #100]	; 0x64
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	461a      	mov	r2, r3
 80090a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090a4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80090a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80090aa:	e841 2300 	strex	r3, r2, [r1]
 80090ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80090b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1e6      	bne.n	8009084 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	3308      	adds	r3, #8
 80090bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090c0:	e853 3f00 	ldrex	r3, [r3]
 80090c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80090c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c8:	f023 0301 	bic.w	r3, r3, #1
 80090cc:	663b      	str	r3, [r7, #96]	; 0x60
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	3308      	adds	r3, #8
 80090d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80090d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80090d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80090dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090de:	e841 2300 	strex	r3, r2, [r1]
 80090e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80090e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1e5      	bne.n	80090b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2220      	movs	r2, #32
 80090ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2220      	movs	r2, #32
 80090f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2200      	movs	r2, #0
 80090fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80090fe:	2303      	movs	r3, #3
 8009100:	e067      	b.n	80091d2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f003 0304 	and.w	r3, r3, #4
 800910c:	2b00      	cmp	r3, #0
 800910e:	d04f      	beq.n	80091b0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	69db      	ldr	r3, [r3, #28]
 8009116:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800911a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800911e:	d147      	bne.n	80091b0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009128:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009132:	e853 3f00 	ldrex	r3, [r3]
 8009136:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800913e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	461a      	mov	r2, r3
 8009146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009148:	637b      	str	r3, [r7, #52]	; 0x34
 800914a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800914e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009150:	e841 2300 	strex	r3, r2, [r1]
 8009154:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009158:	2b00      	cmp	r3, #0
 800915a:	d1e6      	bne.n	800912a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	3308      	adds	r3, #8
 8009162:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	e853 3f00 	ldrex	r3, [r3]
 800916a:	613b      	str	r3, [r7, #16]
   return(result);
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	f023 0301 	bic.w	r3, r3, #1
 8009172:	66bb      	str	r3, [r7, #104]	; 0x68
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	3308      	adds	r3, #8
 800917a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800917c:	623a      	str	r2, [r7, #32]
 800917e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009180:	69f9      	ldr	r1, [r7, #28]
 8009182:	6a3a      	ldr	r2, [r7, #32]
 8009184:	e841 2300 	strex	r3, r2, [r1]
 8009188:	61bb      	str	r3, [r7, #24]
   return(result);
 800918a:	69bb      	ldr	r3, [r7, #24]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d1e5      	bne.n	800915c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2220      	movs	r2, #32
 8009194:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2220      	movs	r2, #32
 800919a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2220      	movs	r2, #32
 80091a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80091ac:	2303      	movs	r3, #3
 80091ae:	e010      	b.n	80091d2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	69da      	ldr	r2, [r3, #28]
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	4013      	ands	r3, r2
 80091ba:	68ba      	ldr	r2, [r7, #8]
 80091bc:	429a      	cmp	r2, r3
 80091be:	bf0c      	ite	eq
 80091c0:	2301      	moveq	r3, #1
 80091c2:	2300      	movne	r3, #0
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	461a      	mov	r2, r3
 80091c8:	79fb      	ldrb	r3, [r7, #7]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	f43f af4a 	beq.w	8009064 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3770      	adds	r7, #112	; 0x70
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
	...

080091dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091dc:	b480      	push	{r7}
 80091de:	b091      	sub	sp, #68	; 0x44
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	4613      	mov	r3, r2
 80091e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	68ba      	ldr	r2, [r7, #8]
 80091ee:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	88fa      	ldrh	r2, [r7, #6]
 80091f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	88fa      	ldrh	r2, [r7, #6]
 80091fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2200      	movs	r2, #0
 8009204:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800920e:	d10e      	bne.n	800922e <UART_Start_Receive_IT+0x52>
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	691b      	ldr	r3, [r3, #16]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d105      	bne.n	8009224 <UART_Start_Receive_IT+0x48>
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800921e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009222:	e02d      	b.n	8009280 <UART_Start_Receive_IT+0xa4>
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	22ff      	movs	r2, #255	; 0xff
 8009228:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800922c:	e028      	b.n	8009280 <UART_Start_Receive_IT+0xa4>
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d10d      	bne.n	8009252 <UART_Start_Receive_IT+0x76>
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	691b      	ldr	r3, [r3, #16]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d104      	bne.n	8009248 <UART_Start_Receive_IT+0x6c>
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	22ff      	movs	r2, #255	; 0xff
 8009242:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009246:	e01b      	b.n	8009280 <UART_Start_Receive_IT+0xa4>
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	227f      	movs	r2, #127	; 0x7f
 800924c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009250:	e016      	b.n	8009280 <UART_Start_Receive_IT+0xa4>
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	689b      	ldr	r3, [r3, #8]
 8009256:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800925a:	d10d      	bne.n	8009278 <UART_Start_Receive_IT+0x9c>
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	691b      	ldr	r3, [r3, #16]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d104      	bne.n	800926e <UART_Start_Receive_IT+0x92>
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	227f      	movs	r2, #127	; 0x7f
 8009268:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800926c:	e008      	b.n	8009280 <UART_Start_Receive_IT+0xa4>
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	223f      	movs	r2, #63	; 0x3f
 8009272:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009276:	e003      	b.n	8009280 <UART_Start_Receive_IT+0xa4>
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2200      	movs	r2, #0
 800927c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2200      	movs	r2, #0
 8009284:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2222      	movs	r2, #34	; 0x22
 800928c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	3308      	adds	r3, #8
 8009294:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009298:	e853 3f00 	ldrex	r3, [r3]
 800929c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800929e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a0:	f043 0301 	orr.w	r3, r3, #1
 80092a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	3308      	adds	r3, #8
 80092ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80092ae:	637a      	str	r2, [r7, #52]	; 0x34
 80092b0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80092b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092b6:	e841 2300 	strex	r3, r2, [r1]
 80092ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80092bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d1e5      	bne.n	800928e <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092ca:	d107      	bne.n	80092dc <UART_Start_Receive_IT+0x100>
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d103      	bne.n	80092dc <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	4a15      	ldr	r2, [pc, #84]	; (800932c <UART_Start_Receive_IT+0x150>)
 80092d8:	665a      	str	r2, [r3, #100]	; 0x64
 80092da:	e002      	b.n	80092e2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	4a14      	ldr	r2, [pc, #80]	; (8009330 <UART_Start_Receive_IT+0x154>)
 80092e0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2200      	movs	r2, #0
 80092e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	e853 3f00 	ldrex	r3, [r3]
 80092f6:	613b      	str	r3, [r7, #16]
   return(result);
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80092fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	461a      	mov	r2, r3
 8009306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009308:	623b      	str	r3, [r7, #32]
 800930a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930c:	69f9      	ldr	r1, [r7, #28]
 800930e:	6a3a      	ldr	r2, [r7, #32]
 8009310:	e841 2300 	strex	r3, r2, [r1]
 8009314:	61bb      	str	r3, [r7, #24]
   return(result);
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d1e6      	bne.n	80092ea <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 800931c:	2300      	movs	r3, #0
}
 800931e:	4618      	mov	r0, r3
 8009320:	3744      	adds	r7, #68	; 0x44
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr
 800932a:	bf00      	nop
 800932c:	080095d7 	.word	0x080095d7
 8009330:	0800947b 	.word	0x0800947b

08009334 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009334:	b480      	push	{r7}
 8009336:	b095      	sub	sp, #84	; 0x54
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009344:	e853 3f00 	ldrex	r3, [r3]
 8009348:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800934a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009350:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	461a      	mov	r2, r3
 8009358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800935a:	643b      	str	r3, [r7, #64]	; 0x40
 800935c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800935e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009360:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009362:	e841 2300 	strex	r3, r2, [r1]
 8009366:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936a:	2b00      	cmp	r3, #0
 800936c:	d1e6      	bne.n	800933c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	3308      	adds	r3, #8
 8009374:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009376:	6a3b      	ldr	r3, [r7, #32]
 8009378:	e853 3f00 	ldrex	r3, [r3]
 800937c:	61fb      	str	r3, [r7, #28]
   return(result);
 800937e:	69fb      	ldr	r3, [r7, #28]
 8009380:	f023 0301 	bic.w	r3, r3, #1
 8009384:	64bb      	str	r3, [r7, #72]	; 0x48
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	3308      	adds	r3, #8
 800938c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800938e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009390:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009392:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009394:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009396:	e841 2300 	strex	r3, r2, [r1]
 800939a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800939c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d1e5      	bne.n	800936e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d118      	bne.n	80093dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	e853 3f00 	ldrex	r3, [r3]
 80093b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	f023 0310 	bic.w	r3, r3, #16
 80093be:	647b      	str	r3, [r7, #68]	; 0x44
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	461a      	mov	r2, r3
 80093c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093c8:	61bb      	str	r3, [r7, #24]
 80093ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093cc:	6979      	ldr	r1, [r7, #20]
 80093ce:	69ba      	ldr	r2, [r7, #24]
 80093d0:	e841 2300 	strex	r3, r2, [r1]
 80093d4:	613b      	str	r3, [r7, #16]
   return(result);
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d1e6      	bne.n	80093aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2220      	movs	r2, #32
 80093e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2200      	movs	r2, #0
 80093ec:	665a      	str	r2, [r3, #100]	; 0x64
}
 80093ee:	bf00      	nop
 80093f0:	3754      	adds	r7, #84	; 0x54
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr

080093fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b084      	sub	sp, #16
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009406:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2200      	movs	r2, #0
 800940c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2200      	movs	r2, #0
 8009414:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009418:	68f8      	ldr	r0, [r7, #12]
 800941a:	f7ff fb45 	bl	8008aa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800941e:	bf00      	nop
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}

08009426 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009426:	b580      	push	{r7, lr}
 8009428:	b088      	sub	sp, #32
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	e853 3f00 	ldrex	r3, [r3]
 800943a:	60bb      	str	r3, [r7, #8]
   return(result);
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009442:	61fb      	str	r3, [r7, #28]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	461a      	mov	r2, r3
 800944a:	69fb      	ldr	r3, [r7, #28]
 800944c:	61bb      	str	r3, [r7, #24]
 800944e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009450:	6979      	ldr	r1, [r7, #20]
 8009452:	69ba      	ldr	r2, [r7, #24]
 8009454:	e841 2300 	strex	r3, r2, [r1]
 8009458:	613b      	str	r3, [r7, #16]
   return(result);
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d1e6      	bne.n	800942e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2220      	movs	r2, #32
 8009464:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f7ff fb11 	bl	8008a94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009472:	bf00      	nop
 8009474:	3720      	adds	r7, #32
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800947a:	b580      	push	{r7, lr}
 800947c:	b096      	sub	sp, #88	; 0x58
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009488:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009490:	2b22      	cmp	r3, #34	; 0x22
 8009492:	f040 8094 	bne.w	80095be <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800949c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80094a0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80094a4:	b2d9      	uxtb	r1, r3
 80094a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80094aa:	b2da      	uxtb	r2, r3
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094b0:	400a      	ands	r2, r1
 80094b2:	b2d2      	uxtb	r2, r2
 80094b4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094ba:	1c5a      	adds	r2, r3, #1
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	3b01      	subs	r3, #1
 80094ca:	b29a      	uxth	r2, r3
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80094d8:	b29b      	uxth	r3, r3
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d177      	bne.n	80095ce <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e6:	e853 3f00 	ldrex	r3, [r3]
 80094ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80094ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80094f2:	653b      	str	r3, [r7, #80]	; 0x50
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	461a      	mov	r2, r3
 80094fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094fc:	647b      	str	r3, [r7, #68]	; 0x44
 80094fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009500:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009502:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009504:	e841 2300 	strex	r3, r2, [r1]
 8009508:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800950a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800950c:	2b00      	cmp	r3, #0
 800950e:	d1e6      	bne.n	80094de <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	3308      	adds	r3, #8
 8009516:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951a:	e853 3f00 	ldrex	r3, [r3]
 800951e:	623b      	str	r3, [r7, #32]
   return(result);
 8009520:	6a3b      	ldr	r3, [r7, #32]
 8009522:	f023 0301 	bic.w	r3, r3, #1
 8009526:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	3308      	adds	r3, #8
 800952e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009530:	633a      	str	r2, [r7, #48]	; 0x30
 8009532:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009534:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009538:	e841 2300 	strex	r3, r2, [r1]
 800953c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800953e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009540:	2b00      	cmp	r3, #0
 8009542:	d1e5      	bne.n	8009510 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2220      	movs	r2, #32
 8009548:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2200      	movs	r2, #0
 800954e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009554:	2b01      	cmp	r3, #1
 8009556:	d12e      	bne.n	80095b6 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	e853 3f00 	ldrex	r3, [r3]
 800956a:	60fb      	str	r3, [r7, #12]
   return(result);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	f023 0310 	bic.w	r3, r3, #16
 8009572:	64bb      	str	r3, [r7, #72]	; 0x48
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	461a      	mov	r2, r3
 800957a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800957c:	61fb      	str	r3, [r7, #28]
 800957e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009580:	69b9      	ldr	r1, [r7, #24]
 8009582:	69fa      	ldr	r2, [r7, #28]
 8009584:	e841 2300 	strex	r3, r2, [r1]
 8009588:	617b      	str	r3, [r7, #20]
   return(result);
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d1e6      	bne.n	800955e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	69db      	ldr	r3, [r3, #28]
 8009596:	f003 0310 	and.w	r3, r3, #16
 800959a:	2b10      	cmp	r3, #16
 800959c:	d103      	bne.n	80095a6 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2210      	movs	r2, #16
 80095a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80095ac:	4619      	mov	r1, r3
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f7ff fa84 	bl	8008abc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80095b4:	e00b      	b.n	80095ce <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f7f8 fb2a 	bl	8001c10 <HAL_UART_RxCpltCallback>
}
 80095bc:	e007      	b.n	80095ce <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	699a      	ldr	r2, [r3, #24]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f042 0208 	orr.w	r2, r2, #8
 80095cc:	619a      	str	r2, [r3, #24]
}
 80095ce:	bf00      	nop
 80095d0:	3758      	adds	r7, #88	; 0x58
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b096      	sub	sp, #88	; 0x58
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80095e4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095ec:	2b22      	cmp	r3, #34	; 0x22
 80095ee:	f040 8094 	bne.w	800971a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80095f8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009600:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009602:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009606:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800960a:	4013      	ands	r3, r2
 800960c:	b29a      	uxth	r2, r3
 800960e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009610:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009616:	1c9a      	adds	r2, r3, #2
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009622:	b29b      	uxth	r3, r3
 8009624:	3b01      	subs	r3, #1
 8009626:	b29a      	uxth	r2, r3
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009634:	b29b      	uxth	r3, r3
 8009636:	2b00      	cmp	r3, #0
 8009638:	d177      	bne.n	800972a <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009642:	e853 3f00 	ldrex	r3, [r3]
 8009646:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800964e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	461a      	mov	r2, r3
 8009656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009658:	643b      	str	r3, [r7, #64]	; 0x40
 800965a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800965e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009660:	e841 2300 	strex	r3, r2, [r1]
 8009664:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009668:	2b00      	cmp	r3, #0
 800966a:	d1e6      	bne.n	800963a <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	3308      	adds	r3, #8
 8009672:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009674:	6a3b      	ldr	r3, [r7, #32]
 8009676:	e853 3f00 	ldrex	r3, [r3]
 800967a:	61fb      	str	r3, [r7, #28]
   return(result);
 800967c:	69fb      	ldr	r3, [r7, #28]
 800967e:	f023 0301 	bic.w	r3, r3, #1
 8009682:	64bb      	str	r3, [r7, #72]	; 0x48
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	3308      	adds	r3, #8
 800968a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800968c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800968e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009690:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009694:	e841 2300 	strex	r3, r2, [r1]
 8009698:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800969a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969c:	2b00      	cmp	r3, #0
 800969e:	d1e5      	bne.n	800966c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2220      	movs	r2, #32
 80096a4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d12e      	bne.n	8009712 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2200      	movs	r2, #0
 80096b8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	e853 3f00 	ldrex	r3, [r3]
 80096c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	f023 0310 	bic.w	r3, r3, #16
 80096ce:	647b      	str	r3, [r7, #68]	; 0x44
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	461a      	mov	r2, r3
 80096d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096d8:	61bb      	str	r3, [r7, #24]
 80096da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096dc:	6979      	ldr	r1, [r7, #20]
 80096de:	69ba      	ldr	r2, [r7, #24]
 80096e0:	e841 2300 	strex	r3, r2, [r1]
 80096e4:	613b      	str	r3, [r7, #16]
   return(result);
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d1e6      	bne.n	80096ba <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	69db      	ldr	r3, [r3, #28]
 80096f2:	f003 0310 	and.w	r3, r3, #16
 80096f6:	2b10      	cmp	r3, #16
 80096f8:	d103      	bne.n	8009702 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2210      	movs	r2, #16
 8009700:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009708:	4619      	mov	r1, r3
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f7ff f9d6 	bl	8008abc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009710:	e00b      	b.n	800972a <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f7f8 fa7c 	bl	8001c10 <HAL_UART_RxCpltCallback>
}
 8009718:	e007      	b.n	800972a <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	699a      	ldr	r2, [r3, #24]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f042 0208 	orr.w	r2, r2, #8
 8009728:	619a      	str	r2, [r3, #24]
}
 800972a:	bf00      	nop
 800972c:	3758      	adds	r7, #88	; 0x58
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009732:	b480      	push	{r7}
 8009734:	b083      	sub	sp, #12
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800973a:	bf00      	nop
 800973c:	370c      	adds	r7, #12
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr
	...

08009748 <__libc_init_array>:
 8009748:	b570      	push	{r4, r5, r6, lr}
 800974a:	4e0d      	ldr	r6, [pc, #52]	; (8009780 <__libc_init_array+0x38>)
 800974c:	4c0d      	ldr	r4, [pc, #52]	; (8009784 <__libc_init_array+0x3c>)
 800974e:	1ba4      	subs	r4, r4, r6
 8009750:	10a4      	asrs	r4, r4, #2
 8009752:	2500      	movs	r5, #0
 8009754:	42a5      	cmp	r5, r4
 8009756:	d109      	bne.n	800976c <__libc_init_array+0x24>
 8009758:	4e0b      	ldr	r6, [pc, #44]	; (8009788 <__libc_init_array+0x40>)
 800975a:	4c0c      	ldr	r4, [pc, #48]	; (800978c <__libc_init_array+0x44>)
 800975c:	f001 f832 	bl	800a7c4 <_init>
 8009760:	1ba4      	subs	r4, r4, r6
 8009762:	10a4      	asrs	r4, r4, #2
 8009764:	2500      	movs	r5, #0
 8009766:	42a5      	cmp	r5, r4
 8009768:	d105      	bne.n	8009776 <__libc_init_array+0x2e>
 800976a:	bd70      	pop	{r4, r5, r6, pc}
 800976c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009770:	4798      	blx	r3
 8009772:	3501      	adds	r5, #1
 8009774:	e7ee      	b.n	8009754 <__libc_init_array+0xc>
 8009776:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800977a:	4798      	blx	r3
 800977c:	3501      	adds	r5, #1
 800977e:	e7f2      	b.n	8009766 <__libc_init_array+0x1e>
 8009780:	0800aac0 	.word	0x0800aac0
 8009784:	0800aac0 	.word	0x0800aac0
 8009788:	0800aac0 	.word	0x0800aac0
 800978c:	0800aac4 	.word	0x0800aac4

08009790 <memset>:
 8009790:	4402      	add	r2, r0
 8009792:	4603      	mov	r3, r0
 8009794:	4293      	cmp	r3, r2
 8009796:	d100      	bne.n	800979a <memset+0xa>
 8009798:	4770      	bx	lr
 800979a:	f803 1b01 	strb.w	r1, [r3], #1
 800979e:	e7f9      	b.n	8009794 <memset+0x4>

080097a0 <sin>:
 80097a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80097a2:	ec51 0b10 	vmov	r0, r1, d0
 80097a6:	4a20      	ldr	r2, [pc, #128]	; (8009828 <sin+0x88>)
 80097a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80097ac:	4293      	cmp	r3, r2
 80097ae:	dc07      	bgt.n	80097c0 <sin+0x20>
 80097b0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8009820 <sin+0x80>
 80097b4:	2000      	movs	r0, #0
 80097b6:	f000 fe37 	bl	800a428 <__kernel_sin>
 80097ba:	ec51 0b10 	vmov	r0, r1, d0
 80097be:	e007      	b.n	80097d0 <sin+0x30>
 80097c0:	4a1a      	ldr	r2, [pc, #104]	; (800982c <sin+0x8c>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	dd09      	ble.n	80097da <sin+0x3a>
 80097c6:	ee10 2a10 	vmov	r2, s0
 80097ca:	460b      	mov	r3, r1
 80097cc:	f7f6 fd08 	bl	80001e0 <__aeabi_dsub>
 80097d0:	ec41 0b10 	vmov	d0, r0, r1
 80097d4:	b005      	add	sp, #20
 80097d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80097da:	4668      	mov	r0, sp
 80097dc:	f000 f828 	bl	8009830 <__ieee754_rem_pio2>
 80097e0:	f000 0003 	and.w	r0, r0, #3
 80097e4:	2801      	cmp	r0, #1
 80097e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80097ea:	ed9d 0b00 	vldr	d0, [sp]
 80097ee:	d004      	beq.n	80097fa <sin+0x5a>
 80097f0:	2802      	cmp	r0, #2
 80097f2:	d005      	beq.n	8009800 <sin+0x60>
 80097f4:	b970      	cbnz	r0, 8009814 <sin+0x74>
 80097f6:	2001      	movs	r0, #1
 80097f8:	e7dd      	b.n	80097b6 <sin+0x16>
 80097fa:	f000 fa0d 	bl	8009c18 <__kernel_cos>
 80097fe:	e7dc      	b.n	80097ba <sin+0x1a>
 8009800:	2001      	movs	r0, #1
 8009802:	f000 fe11 	bl	800a428 <__kernel_sin>
 8009806:	ec53 2b10 	vmov	r2, r3, d0
 800980a:	ee10 0a10 	vmov	r0, s0
 800980e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009812:	e7dd      	b.n	80097d0 <sin+0x30>
 8009814:	f000 fa00 	bl	8009c18 <__kernel_cos>
 8009818:	e7f5      	b.n	8009806 <sin+0x66>
 800981a:	bf00      	nop
 800981c:	f3af 8000 	nop.w
	...
 8009828:	3fe921fb 	.word	0x3fe921fb
 800982c:	7fefffff 	.word	0x7fefffff

08009830 <__ieee754_rem_pio2>:
 8009830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009834:	ec57 6b10 	vmov	r6, r7, d0
 8009838:	4bc3      	ldr	r3, [pc, #780]	; (8009b48 <__ieee754_rem_pio2+0x318>)
 800983a:	b08d      	sub	sp, #52	; 0x34
 800983c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009840:	4598      	cmp	r8, r3
 8009842:	4604      	mov	r4, r0
 8009844:	9704      	str	r7, [sp, #16]
 8009846:	dc07      	bgt.n	8009858 <__ieee754_rem_pio2+0x28>
 8009848:	2200      	movs	r2, #0
 800984a:	2300      	movs	r3, #0
 800984c:	ed84 0b00 	vstr	d0, [r4]
 8009850:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009854:	2500      	movs	r5, #0
 8009856:	e027      	b.n	80098a8 <__ieee754_rem_pio2+0x78>
 8009858:	4bbc      	ldr	r3, [pc, #752]	; (8009b4c <__ieee754_rem_pio2+0x31c>)
 800985a:	4598      	cmp	r8, r3
 800985c:	dc75      	bgt.n	800994a <__ieee754_rem_pio2+0x11a>
 800985e:	9b04      	ldr	r3, [sp, #16]
 8009860:	4dbb      	ldr	r5, [pc, #748]	; (8009b50 <__ieee754_rem_pio2+0x320>)
 8009862:	2b00      	cmp	r3, #0
 8009864:	ee10 0a10 	vmov	r0, s0
 8009868:	a3a9      	add	r3, pc, #676	; (adr r3, 8009b10 <__ieee754_rem_pio2+0x2e0>)
 800986a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986e:	4639      	mov	r1, r7
 8009870:	dd36      	ble.n	80098e0 <__ieee754_rem_pio2+0xb0>
 8009872:	f7f6 fcb5 	bl	80001e0 <__aeabi_dsub>
 8009876:	45a8      	cmp	r8, r5
 8009878:	4606      	mov	r6, r0
 800987a:	460f      	mov	r7, r1
 800987c:	d018      	beq.n	80098b0 <__ieee754_rem_pio2+0x80>
 800987e:	a3a6      	add	r3, pc, #664	; (adr r3, 8009b18 <__ieee754_rem_pio2+0x2e8>)
 8009880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009884:	f7f6 fcac 	bl	80001e0 <__aeabi_dsub>
 8009888:	4602      	mov	r2, r0
 800988a:	460b      	mov	r3, r1
 800988c:	e9c4 2300 	strd	r2, r3, [r4]
 8009890:	4630      	mov	r0, r6
 8009892:	4639      	mov	r1, r7
 8009894:	f7f6 fca4 	bl	80001e0 <__aeabi_dsub>
 8009898:	a39f      	add	r3, pc, #636	; (adr r3, 8009b18 <__ieee754_rem_pio2+0x2e8>)
 800989a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989e:	f7f6 fc9f 	bl	80001e0 <__aeabi_dsub>
 80098a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80098a6:	2501      	movs	r5, #1
 80098a8:	4628      	mov	r0, r5
 80098aa:	b00d      	add	sp, #52	; 0x34
 80098ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b0:	a39b      	add	r3, pc, #620	; (adr r3, 8009b20 <__ieee754_rem_pio2+0x2f0>)
 80098b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b6:	f7f6 fc93 	bl	80001e0 <__aeabi_dsub>
 80098ba:	a39b      	add	r3, pc, #620	; (adr r3, 8009b28 <__ieee754_rem_pio2+0x2f8>)
 80098bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c0:	4606      	mov	r6, r0
 80098c2:	460f      	mov	r7, r1
 80098c4:	f7f6 fc8c 	bl	80001e0 <__aeabi_dsub>
 80098c8:	4602      	mov	r2, r0
 80098ca:	460b      	mov	r3, r1
 80098cc:	e9c4 2300 	strd	r2, r3, [r4]
 80098d0:	4630      	mov	r0, r6
 80098d2:	4639      	mov	r1, r7
 80098d4:	f7f6 fc84 	bl	80001e0 <__aeabi_dsub>
 80098d8:	a393      	add	r3, pc, #588	; (adr r3, 8009b28 <__ieee754_rem_pio2+0x2f8>)
 80098da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098de:	e7de      	b.n	800989e <__ieee754_rem_pio2+0x6e>
 80098e0:	f7f6 fc80 	bl	80001e4 <__adddf3>
 80098e4:	45a8      	cmp	r8, r5
 80098e6:	4606      	mov	r6, r0
 80098e8:	460f      	mov	r7, r1
 80098ea:	d016      	beq.n	800991a <__ieee754_rem_pio2+0xea>
 80098ec:	a38a      	add	r3, pc, #552	; (adr r3, 8009b18 <__ieee754_rem_pio2+0x2e8>)
 80098ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f2:	f7f6 fc77 	bl	80001e4 <__adddf3>
 80098f6:	4602      	mov	r2, r0
 80098f8:	460b      	mov	r3, r1
 80098fa:	e9c4 2300 	strd	r2, r3, [r4]
 80098fe:	4630      	mov	r0, r6
 8009900:	4639      	mov	r1, r7
 8009902:	f7f6 fc6d 	bl	80001e0 <__aeabi_dsub>
 8009906:	a384      	add	r3, pc, #528	; (adr r3, 8009b18 <__ieee754_rem_pio2+0x2e8>)
 8009908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990c:	f7f6 fc6a 	bl	80001e4 <__adddf3>
 8009910:	f04f 35ff 	mov.w	r5, #4294967295
 8009914:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009918:	e7c6      	b.n	80098a8 <__ieee754_rem_pio2+0x78>
 800991a:	a381      	add	r3, pc, #516	; (adr r3, 8009b20 <__ieee754_rem_pio2+0x2f0>)
 800991c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009920:	f7f6 fc60 	bl	80001e4 <__adddf3>
 8009924:	a380      	add	r3, pc, #512	; (adr r3, 8009b28 <__ieee754_rem_pio2+0x2f8>)
 8009926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992a:	4606      	mov	r6, r0
 800992c:	460f      	mov	r7, r1
 800992e:	f7f6 fc59 	bl	80001e4 <__adddf3>
 8009932:	4602      	mov	r2, r0
 8009934:	460b      	mov	r3, r1
 8009936:	e9c4 2300 	strd	r2, r3, [r4]
 800993a:	4630      	mov	r0, r6
 800993c:	4639      	mov	r1, r7
 800993e:	f7f6 fc4f 	bl	80001e0 <__aeabi_dsub>
 8009942:	a379      	add	r3, pc, #484	; (adr r3, 8009b28 <__ieee754_rem_pio2+0x2f8>)
 8009944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009948:	e7e0      	b.n	800990c <__ieee754_rem_pio2+0xdc>
 800994a:	4b82      	ldr	r3, [pc, #520]	; (8009b54 <__ieee754_rem_pio2+0x324>)
 800994c:	4598      	cmp	r8, r3
 800994e:	f300 80d0 	bgt.w	8009af2 <__ieee754_rem_pio2+0x2c2>
 8009952:	f000 fe23 	bl	800a59c <fabs>
 8009956:	ec57 6b10 	vmov	r6, r7, d0
 800995a:	ee10 0a10 	vmov	r0, s0
 800995e:	a374      	add	r3, pc, #464	; (adr r3, 8009b30 <__ieee754_rem_pio2+0x300>)
 8009960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009964:	4639      	mov	r1, r7
 8009966:	f7f6 fdf3 	bl	8000550 <__aeabi_dmul>
 800996a:	2200      	movs	r2, #0
 800996c:	4b7a      	ldr	r3, [pc, #488]	; (8009b58 <__ieee754_rem_pio2+0x328>)
 800996e:	f7f6 fc39 	bl	80001e4 <__adddf3>
 8009972:	f7f7 f887 	bl	8000a84 <__aeabi_d2iz>
 8009976:	4605      	mov	r5, r0
 8009978:	f7f6 fd80 	bl	800047c <__aeabi_i2d>
 800997c:	a364      	add	r3, pc, #400	; (adr r3, 8009b10 <__ieee754_rem_pio2+0x2e0>)
 800997e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009982:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009986:	f7f6 fde3 	bl	8000550 <__aeabi_dmul>
 800998a:	4602      	mov	r2, r0
 800998c:	460b      	mov	r3, r1
 800998e:	4630      	mov	r0, r6
 8009990:	4639      	mov	r1, r7
 8009992:	f7f6 fc25 	bl	80001e0 <__aeabi_dsub>
 8009996:	a360      	add	r3, pc, #384	; (adr r3, 8009b18 <__ieee754_rem_pio2+0x2e8>)
 8009998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999c:	4682      	mov	sl, r0
 800999e:	468b      	mov	fp, r1
 80099a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099a4:	f7f6 fdd4 	bl	8000550 <__aeabi_dmul>
 80099a8:	2d1f      	cmp	r5, #31
 80099aa:	4606      	mov	r6, r0
 80099ac:	460f      	mov	r7, r1
 80099ae:	dc0c      	bgt.n	80099ca <__ieee754_rem_pio2+0x19a>
 80099b0:	1e6a      	subs	r2, r5, #1
 80099b2:	4b6a      	ldr	r3, [pc, #424]	; (8009b5c <__ieee754_rem_pio2+0x32c>)
 80099b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099b8:	4543      	cmp	r3, r8
 80099ba:	d006      	beq.n	80099ca <__ieee754_rem_pio2+0x19a>
 80099bc:	4632      	mov	r2, r6
 80099be:	463b      	mov	r3, r7
 80099c0:	4650      	mov	r0, sl
 80099c2:	4659      	mov	r1, fp
 80099c4:	f7f6 fc0c 	bl	80001e0 <__aeabi_dsub>
 80099c8:	e00e      	b.n	80099e8 <__ieee754_rem_pio2+0x1b8>
 80099ca:	4632      	mov	r2, r6
 80099cc:	463b      	mov	r3, r7
 80099ce:	4650      	mov	r0, sl
 80099d0:	4659      	mov	r1, fp
 80099d2:	f7f6 fc05 	bl	80001e0 <__aeabi_dsub>
 80099d6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80099da:	9305      	str	r3, [sp, #20]
 80099dc:	9a05      	ldr	r2, [sp, #20]
 80099de:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80099e2:	1ad3      	subs	r3, r2, r3
 80099e4:	2b10      	cmp	r3, #16
 80099e6:	dc02      	bgt.n	80099ee <__ieee754_rem_pio2+0x1be>
 80099e8:	e9c4 0100 	strd	r0, r1, [r4]
 80099ec:	e039      	b.n	8009a62 <__ieee754_rem_pio2+0x232>
 80099ee:	a34c      	add	r3, pc, #304	; (adr r3, 8009b20 <__ieee754_rem_pio2+0x2f0>)
 80099f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099f8:	f7f6 fdaa 	bl	8000550 <__aeabi_dmul>
 80099fc:	4606      	mov	r6, r0
 80099fe:	460f      	mov	r7, r1
 8009a00:	4602      	mov	r2, r0
 8009a02:	460b      	mov	r3, r1
 8009a04:	4650      	mov	r0, sl
 8009a06:	4659      	mov	r1, fp
 8009a08:	f7f6 fbea 	bl	80001e0 <__aeabi_dsub>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	460b      	mov	r3, r1
 8009a10:	4680      	mov	r8, r0
 8009a12:	4689      	mov	r9, r1
 8009a14:	4650      	mov	r0, sl
 8009a16:	4659      	mov	r1, fp
 8009a18:	f7f6 fbe2 	bl	80001e0 <__aeabi_dsub>
 8009a1c:	4632      	mov	r2, r6
 8009a1e:	463b      	mov	r3, r7
 8009a20:	f7f6 fbde 	bl	80001e0 <__aeabi_dsub>
 8009a24:	a340      	add	r3, pc, #256	; (adr r3, 8009b28 <__ieee754_rem_pio2+0x2f8>)
 8009a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2a:	4606      	mov	r6, r0
 8009a2c:	460f      	mov	r7, r1
 8009a2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a32:	f7f6 fd8d 	bl	8000550 <__aeabi_dmul>
 8009a36:	4632      	mov	r2, r6
 8009a38:	463b      	mov	r3, r7
 8009a3a:	f7f6 fbd1 	bl	80001e0 <__aeabi_dsub>
 8009a3e:	4602      	mov	r2, r0
 8009a40:	460b      	mov	r3, r1
 8009a42:	4606      	mov	r6, r0
 8009a44:	460f      	mov	r7, r1
 8009a46:	4640      	mov	r0, r8
 8009a48:	4649      	mov	r1, r9
 8009a4a:	f7f6 fbc9 	bl	80001e0 <__aeabi_dsub>
 8009a4e:	9a05      	ldr	r2, [sp, #20]
 8009a50:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009a54:	1ad3      	subs	r3, r2, r3
 8009a56:	2b31      	cmp	r3, #49	; 0x31
 8009a58:	dc20      	bgt.n	8009a9c <__ieee754_rem_pio2+0x26c>
 8009a5a:	e9c4 0100 	strd	r0, r1, [r4]
 8009a5e:	46c2      	mov	sl, r8
 8009a60:	46cb      	mov	fp, r9
 8009a62:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009a66:	4650      	mov	r0, sl
 8009a68:	4642      	mov	r2, r8
 8009a6a:	464b      	mov	r3, r9
 8009a6c:	4659      	mov	r1, fp
 8009a6e:	f7f6 fbb7 	bl	80001e0 <__aeabi_dsub>
 8009a72:	463b      	mov	r3, r7
 8009a74:	4632      	mov	r2, r6
 8009a76:	f7f6 fbb3 	bl	80001e0 <__aeabi_dsub>
 8009a7a:	9b04      	ldr	r3, [sp, #16]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009a82:	f6bf af11 	bge.w	80098a8 <__ieee754_rem_pio2+0x78>
 8009a86:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009a8a:	6063      	str	r3, [r4, #4]
 8009a8c:	f8c4 8000 	str.w	r8, [r4]
 8009a90:	60a0      	str	r0, [r4, #8]
 8009a92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a96:	60e3      	str	r3, [r4, #12]
 8009a98:	426d      	negs	r5, r5
 8009a9a:	e705      	b.n	80098a8 <__ieee754_rem_pio2+0x78>
 8009a9c:	a326      	add	r3, pc, #152	; (adr r3, 8009b38 <__ieee754_rem_pio2+0x308>)
 8009a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009aa6:	f7f6 fd53 	bl	8000550 <__aeabi_dmul>
 8009aaa:	4606      	mov	r6, r0
 8009aac:	460f      	mov	r7, r1
 8009aae:	4602      	mov	r2, r0
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	4640      	mov	r0, r8
 8009ab4:	4649      	mov	r1, r9
 8009ab6:	f7f6 fb93 	bl	80001e0 <__aeabi_dsub>
 8009aba:	4602      	mov	r2, r0
 8009abc:	460b      	mov	r3, r1
 8009abe:	4682      	mov	sl, r0
 8009ac0:	468b      	mov	fp, r1
 8009ac2:	4640      	mov	r0, r8
 8009ac4:	4649      	mov	r1, r9
 8009ac6:	f7f6 fb8b 	bl	80001e0 <__aeabi_dsub>
 8009aca:	4632      	mov	r2, r6
 8009acc:	463b      	mov	r3, r7
 8009ace:	f7f6 fb87 	bl	80001e0 <__aeabi_dsub>
 8009ad2:	a31b      	add	r3, pc, #108	; (adr r3, 8009b40 <__ieee754_rem_pio2+0x310>)
 8009ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad8:	4606      	mov	r6, r0
 8009ada:	460f      	mov	r7, r1
 8009adc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ae0:	f7f6 fd36 	bl	8000550 <__aeabi_dmul>
 8009ae4:	4632      	mov	r2, r6
 8009ae6:	463b      	mov	r3, r7
 8009ae8:	f7f6 fb7a 	bl	80001e0 <__aeabi_dsub>
 8009aec:	4606      	mov	r6, r0
 8009aee:	460f      	mov	r7, r1
 8009af0:	e764      	b.n	80099bc <__ieee754_rem_pio2+0x18c>
 8009af2:	4b1b      	ldr	r3, [pc, #108]	; (8009b60 <__ieee754_rem_pio2+0x330>)
 8009af4:	4598      	cmp	r8, r3
 8009af6:	dd35      	ble.n	8009b64 <__ieee754_rem_pio2+0x334>
 8009af8:	ee10 2a10 	vmov	r2, s0
 8009afc:	463b      	mov	r3, r7
 8009afe:	4630      	mov	r0, r6
 8009b00:	4639      	mov	r1, r7
 8009b02:	f7f6 fb6d 	bl	80001e0 <__aeabi_dsub>
 8009b06:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009b0a:	e9c4 0100 	strd	r0, r1, [r4]
 8009b0e:	e6a1      	b.n	8009854 <__ieee754_rem_pio2+0x24>
 8009b10:	54400000 	.word	0x54400000
 8009b14:	3ff921fb 	.word	0x3ff921fb
 8009b18:	1a626331 	.word	0x1a626331
 8009b1c:	3dd0b461 	.word	0x3dd0b461
 8009b20:	1a600000 	.word	0x1a600000
 8009b24:	3dd0b461 	.word	0x3dd0b461
 8009b28:	2e037073 	.word	0x2e037073
 8009b2c:	3ba3198a 	.word	0x3ba3198a
 8009b30:	6dc9c883 	.word	0x6dc9c883
 8009b34:	3fe45f30 	.word	0x3fe45f30
 8009b38:	2e000000 	.word	0x2e000000
 8009b3c:	3ba3198a 	.word	0x3ba3198a
 8009b40:	252049c1 	.word	0x252049c1
 8009b44:	397b839a 	.word	0x397b839a
 8009b48:	3fe921fb 	.word	0x3fe921fb
 8009b4c:	4002d97b 	.word	0x4002d97b
 8009b50:	3ff921fb 	.word	0x3ff921fb
 8009b54:	413921fb 	.word	0x413921fb
 8009b58:	3fe00000 	.word	0x3fe00000
 8009b5c:	0800a8e8 	.word	0x0800a8e8
 8009b60:	7fefffff 	.word	0x7fefffff
 8009b64:	ea4f 5528 	mov.w	r5, r8, asr #20
 8009b68:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8009b6c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009b70:	4630      	mov	r0, r6
 8009b72:	460f      	mov	r7, r1
 8009b74:	f7f6 ff86 	bl	8000a84 <__aeabi_d2iz>
 8009b78:	f7f6 fc80 	bl	800047c <__aeabi_i2d>
 8009b7c:	4602      	mov	r2, r0
 8009b7e:	460b      	mov	r3, r1
 8009b80:	4630      	mov	r0, r6
 8009b82:	4639      	mov	r1, r7
 8009b84:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009b88:	f7f6 fb2a 	bl	80001e0 <__aeabi_dsub>
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	4b1f      	ldr	r3, [pc, #124]	; (8009c0c <__ieee754_rem_pio2+0x3dc>)
 8009b90:	f7f6 fcde 	bl	8000550 <__aeabi_dmul>
 8009b94:	460f      	mov	r7, r1
 8009b96:	4606      	mov	r6, r0
 8009b98:	f7f6 ff74 	bl	8000a84 <__aeabi_d2iz>
 8009b9c:	f7f6 fc6e 	bl	800047c <__aeabi_i2d>
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	4639      	mov	r1, r7
 8009ba8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009bac:	f7f6 fb18 	bl	80001e0 <__aeabi_dsub>
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	4b16      	ldr	r3, [pc, #88]	; (8009c0c <__ieee754_rem_pio2+0x3dc>)
 8009bb4:	f7f6 fccc 	bl	8000550 <__aeabi_dmul>
 8009bb8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009bbc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8009bc0:	f04f 0803 	mov.w	r8, #3
 8009bc4:	2600      	movs	r6, #0
 8009bc6:	2700      	movs	r7, #0
 8009bc8:	4632      	mov	r2, r6
 8009bca:	463b      	mov	r3, r7
 8009bcc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8009bd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8009bd4:	f7f6 ff24 	bl	8000a20 <__aeabi_dcmpeq>
 8009bd8:	b9b0      	cbnz	r0, 8009c08 <__ieee754_rem_pio2+0x3d8>
 8009bda:	4b0d      	ldr	r3, [pc, #52]	; (8009c10 <__ieee754_rem_pio2+0x3e0>)
 8009bdc:	9301      	str	r3, [sp, #4]
 8009bde:	2302      	movs	r3, #2
 8009be0:	9300      	str	r3, [sp, #0]
 8009be2:	462a      	mov	r2, r5
 8009be4:	4643      	mov	r3, r8
 8009be6:	4621      	mov	r1, r4
 8009be8:	a806      	add	r0, sp, #24
 8009bea:	f000 f8dd 	bl	8009da8 <__kernel_rem_pio2>
 8009bee:	9b04      	ldr	r3, [sp, #16]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	4605      	mov	r5, r0
 8009bf4:	f6bf ae58 	bge.w	80098a8 <__ieee754_rem_pio2+0x78>
 8009bf8:	6863      	ldr	r3, [r4, #4]
 8009bfa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009bfe:	6063      	str	r3, [r4, #4]
 8009c00:	68e3      	ldr	r3, [r4, #12]
 8009c02:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009c06:	e746      	b.n	8009a96 <__ieee754_rem_pio2+0x266>
 8009c08:	46d0      	mov	r8, sl
 8009c0a:	e7dd      	b.n	8009bc8 <__ieee754_rem_pio2+0x398>
 8009c0c:	41700000 	.word	0x41700000
 8009c10:	0800a968 	.word	0x0800a968
 8009c14:	00000000 	.word	0x00000000

08009c18 <__kernel_cos>:
 8009c18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c1c:	ec59 8b10 	vmov	r8, r9, d0
 8009c20:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8009c24:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8009c28:	ed2d 8b02 	vpush	{d8}
 8009c2c:	eeb0 8a41 	vmov.f32	s16, s2
 8009c30:	eef0 8a61 	vmov.f32	s17, s3
 8009c34:	da07      	bge.n	8009c46 <__kernel_cos+0x2e>
 8009c36:	ee10 0a10 	vmov	r0, s0
 8009c3a:	4649      	mov	r1, r9
 8009c3c:	f7f6 ff22 	bl	8000a84 <__aeabi_d2iz>
 8009c40:	2800      	cmp	r0, #0
 8009c42:	f000 8089 	beq.w	8009d58 <__kernel_cos+0x140>
 8009c46:	4642      	mov	r2, r8
 8009c48:	464b      	mov	r3, r9
 8009c4a:	4640      	mov	r0, r8
 8009c4c:	4649      	mov	r1, r9
 8009c4e:	f7f6 fc7f 	bl	8000550 <__aeabi_dmul>
 8009c52:	2200      	movs	r2, #0
 8009c54:	4b4e      	ldr	r3, [pc, #312]	; (8009d90 <__kernel_cos+0x178>)
 8009c56:	4604      	mov	r4, r0
 8009c58:	460d      	mov	r5, r1
 8009c5a:	f7f6 fc79 	bl	8000550 <__aeabi_dmul>
 8009c5e:	a340      	add	r3, pc, #256	; (adr r3, 8009d60 <__kernel_cos+0x148>)
 8009c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c64:	4682      	mov	sl, r0
 8009c66:	468b      	mov	fp, r1
 8009c68:	4620      	mov	r0, r4
 8009c6a:	4629      	mov	r1, r5
 8009c6c:	f7f6 fc70 	bl	8000550 <__aeabi_dmul>
 8009c70:	a33d      	add	r3, pc, #244	; (adr r3, 8009d68 <__kernel_cos+0x150>)
 8009c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c76:	f7f6 fab5 	bl	80001e4 <__adddf3>
 8009c7a:	4622      	mov	r2, r4
 8009c7c:	462b      	mov	r3, r5
 8009c7e:	f7f6 fc67 	bl	8000550 <__aeabi_dmul>
 8009c82:	a33b      	add	r3, pc, #236	; (adr r3, 8009d70 <__kernel_cos+0x158>)
 8009c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c88:	f7f6 faaa 	bl	80001e0 <__aeabi_dsub>
 8009c8c:	4622      	mov	r2, r4
 8009c8e:	462b      	mov	r3, r5
 8009c90:	f7f6 fc5e 	bl	8000550 <__aeabi_dmul>
 8009c94:	a338      	add	r3, pc, #224	; (adr r3, 8009d78 <__kernel_cos+0x160>)
 8009c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9a:	f7f6 faa3 	bl	80001e4 <__adddf3>
 8009c9e:	4622      	mov	r2, r4
 8009ca0:	462b      	mov	r3, r5
 8009ca2:	f7f6 fc55 	bl	8000550 <__aeabi_dmul>
 8009ca6:	a336      	add	r3, pc, #216	; (adr r3, 8009d80 <__kernel_cos+0x168>)
 8009ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cac:	f7f6 fa98 	bl	80001e0 <__aeabi_dsub>
 8009cb0:	4622      	mov	r2, r4
 8009cb2:	462b      	mov	r3, r5
 8009cb4:	f7f6 fc4c 	bl	8000550 <__aeabi_dmul>
 8009cb8:	a333      	add	r3, pc, #204	; (adr r3, 8009d88 <__kernel_cos+0x170>)
 8009cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cbe:	f7f6 fa91 	bl	80001e4 <__adddf3>
 8009cc2:	4622      	mov	r2, r4
 8009cc4:	462b      	mov	r3, r5
 8009cc6:	f7f6 fc43 	bl	8000550 <__aeabi_dmul>
 8009cca:	4622      	mov	r2, r4
 8009ccc:	462b      	mov	r3, r5
 8009cce:	f7f6 fc3f 	bl	8000550 <__aeabi_dmul>
 8009cd2:	ec53 2b18 	vmov	r2, r3, d8
 8009cd6:	4604      	mov	r4, r0
 8009cd8:	460d      	mov	r5, r1
 8009cda:	4640      	mov	r0, r8
 8009cdc:	4649      	mov	r1, r9
 8009cde:	f7f6 fc37 	bl	8000550 <__aeabi_dmul>
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	4629      	mov	r1, r5
 8009ce8:	4620      	mov	r0, r4
 8009cea:	f7f6 fa79 	bl	80001e0 <__aeabi_dsub>
 8009cee:	4b29      	ldr	r3, [pc, #164]	; (8009d94 <__kernel_cos+0x17c>)
 8009cf0:	429e      	cmp	r6, r3
 8009cf2:	4680      	mov	r8, r0
 8009cf4:	4689      	mov	r9, r1
 8009cf6:	dc11      	bgt.n	8009d1c <__kernel_cos+0x104>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	460b      	mov	r3, r1
 8009cfc:	4650      	mov	r0, sl
 8009cfe:	4659      	mov	r1, fp
 8009d00:	f7f6 fa6e 	bl	80001e0 <__aeabi_dsub>
 8009d04:	460b      	mov	r3, r1
 8009d06:	4924      	ldr	r1, [pc, #144]	; (8009d98 <__kernel_cos+0x180>)
 8009d08:	4602      	mov	r2, r0
 8009d0a:	2000      	movs	r0, #0
 8009d0c:	f7f6 fa68 	bl	80001e0 <__aeabi_dsub>
 8009d10:	ecbd 8b02 	vpop	{d8}
 8009d14:	ec41 0b10 	vmov	d0, r0, r1
 8009d18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d1c:	4b1f      	ldr	r3, [pc, #124]	; (8009d9c <__kernel_cos+0x184>)
 8009d1e:	491e      	ldr	r1, [pc, #120]	; (8009d98 <__kernel_cos+0x180>)
 8009d20:	429e      	cmp	r6, r3
 8009d22:	bfcc      	ite	gt
 8009d24:	4d1e      	ldrgt	r5, [pc, #120]	; (8009da0 <__kernel_cos+0x188>)
 8009d26:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8009d2a:	2400      	movs	r4, #0
 8009d2c:	4622      	mov	r2, r4
 8009d2e:	462b      	mov	r3, r5
 8009d30:	2000      	movs	r0, #0
 8009d32:	f7f6 fa55 	bl	80001e0 <__aeabi_dsub>
 8009d36:	4622      	mov	r2, r4
 8009d38:	4606      	mov	r6, r0
 8009d3a:	460f      	mov	r7, r1
 8009d3c:	462b      	mov	r3, r5
 8009d3e:	4650      	mov	r0, sl
 8009d40:	4659      	mov	r1, fp
 8009d42:	f7f6 fa4d 	bl	80001e0 <__aeabi_dsub>
 8009d46:	4642      	mov	r2, r8
 8009d48:	464b      	mov	r3, r9
 8009d4a:	f7f6 fa49 	bl	80001e0 <__aeabi_dsub>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	460b      	mov	r3, r1
 8009d52:	4630      	mov	r0, r6
 8009d54:	4639      	mov	r1, r7
 8009d56:	e7d9      	b.n	8009d0c <__kernel_cos+0xf4>
 8009d58:	2000      	movs	r0, #0
 8009d5a:	490f      	ldr	r1, [pc, #60]	; (8009d98 <__kernel_cos+0x180>)
 8009d5c:	e7d8      	b.n	8009d10 <__kernel_cos+0xf8>
 8009d5e:	bf00      	nop
 8009d60:	be8838d4 	.word	0xbe8838d4
 8009d64:	bda8fae9 	.word	0xbda8fae9
 8009d68:	bdb4b1c4 	.word	0xbdb4b1c4
 8009d6c:	3e21ee9e 	.word	0x3e21ee9e
 8009d70:	809c52ad 	.word	0x809c52ad
 8009d74:	3e927e4f 	.word	0x3e927e4f
 8009d78:	19cb1590 	.word	0x19cb1590
 8009d7c:	3efa01a0 	.word	0x3efa01a0
 8009d80:	16c15177 	.word	0x16c15177
 8009d84:	3f56c16c 	.word	0x3f56c16c
 8009d88:	5555554c 	.word	0x5555554c
 8009d8c:	3fa55555 	.word	0x3fa55555
 8009d90:	3fe00000 	.word	0x3fe00000
 8009d94:	3fd33332 	.word	0x3fd33332
 8009d98:	3ff00000 	.word	0x3ff00000
 8009d9c:	3fe90000 	.word	0x3fe90000
 8009da0:	3fd20000 	.word	0x3fd20000
 8009da4:	00000000 	.word	0x00000000

08009da8 <__kernel_rem_pio2>:
 8009da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dac:	ed2d 8b02 	vpush	{d8}
 8009db0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8009db4:	1ed4      	subs	r4, r2, #3
 8009db6:	9308      	str	r3, [sp, #32]
 8009db8:	9101      	str	r1, [sp, #4]
 8009dba:	4bc5      	ldr	r3, [pc, #788]	; (800a0d0 <__kernel_rem_pio2+0x328>)
 8009dbc:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8009dbe:	9009      	str	r0, [sp, #36]	; 0x24
 8009dc0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009dc4:	9304      	str	r3, [sp, #16]
 8009dc6:	9b08      	ldr	r3, [sp, #32]
 8009dc8:	3b01      	subs	r3, #1
 8009dca:	9307      	str	r3, [sp, #28]
 8009dcc:	2318      	movs	r3, #24
 8009dce:	fb94 f4f3 	sdiv	r4, r4, r3
 8009dd2:	f06f 0317 	mvn.w	r3, #23
 8009dd6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8009dda:	fb04 3303 	mla	r3, r4, r3, r3
 8009dde:	eb03 0a02 	add.w	sl, r3, r2
 8009de2:	9b04      	ldr	r3, [sp, #16]
 8009de4:	9a07      	ldr	r2, [sp, #28]
 8009de6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800a0c0 <__kernel_rem_pio2+0x318>
 8009dea:	eb03 0802 	add.w	r8, r3, r2
 8009dee:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009df0:	1aa7      	subs	r7, r4, r2
 8009df2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009df6:	ae22      	add	r6, sp, #136	; 0x88
 8009df8:	2500      	movs	r5, #0
 8009dfa:	4545      	cmp	r5, r8
 8009dfc:	dd13      	ble.n	8009e26 <__kernel_rem_pio2+0x7e>
 8009dfe:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800a0c0 <__kernel_rem_pio2+0x318>
 8009e02:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8009e06:	2600      	movs	r6, #0
 8009e08:	9b04      	ldr	r3, [sp, #16]
 8009e0a:	429e      	cmp	r6, r3
 8009e0c:	dc32      	bgt.n	8009e74 <__kernel_rem_pio2+0xcc>
 8009e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e10:	9302      	str	r3, [sp, #8]
 8009e12:	9b08      	ldr	r3, [sp, #32]
 8009e14:	199d      	adds	r5, r3, r6
 8009e16:	ab22      	add	r3, sp, #136	; 0x88
 8009e18:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009e1c:	9306      	str	r3, [sp, #24]
 8009e1e:	ec59 8b18 	vmov	r8, r9, d8
 8009e22:	2700      	movs	r7, #0
 8009e24:	e01f      	b.n	8009e66 <__kernel_rem_pio2+0xbe>
 8009e26:	42ef      	cmn	r7, r5
 8009e28:	d407      	bmi.n	8009e3a <__kernel_rem_pio2+0x92>
 8009e2a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009e2e:	f7f6 fb25 	bl	800047c <__aeabi_i2d>
 8009e32:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009e36:	3501      	adds	r5, #1
 8009e38:	e7df      	b.n	8009dfa <__kernel_rem_pio2+0x52>
 8009e3a:	ec51 0b18 	vmov	r0, r1, d8
 8009e3e:	e7f8      	b.n	8009e32 <__kernel_rem_pio2+0x8a>
 8009e40:	9906      	ldr	r1, [sp, #24]
 8009e42:	9d02      	ldr	r5, [sp, #8]
 8009e44:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8009e48:	9106      	str	r1, [sp, #24]
 8009e4a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8009e4e:	9502      	str	r5, [sp, #8]
 8009e50:	f7f6 fb7e 	bl	8000550 <__aeabi_dmul>
 8009e54:	4602      	mov	r2, r0
 8009e56:	460b      	mov	r3, r1
 8009e58:	4640      	mov	r0, r8
 8009e5a:	4649      	mov	r1, r9
 8009e5c:	f7f6 f9c2 	bl	80001e4 <__adddf3>
 8009e60:	3701      	adds	r7, #1
 8009e62:	4680      	mov	r8, r0
 8009e64:	4689      	mov	r9, r1
 8009e66:	9b07      	ldr	r3, [sp, #28]
 8009e68:	429f      	cmp	r7, r3
 8009e6a:	dde9      	ble.n	8009e40 <__kernel_rem_pio2+0x98>
 8009e6c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8009e70:	3601      	adds	r6, #1
 8009e72:	e7c9      	b.n	8009e08 <__kernel_rem_pio2+0x60>
 8009e74:	9b04      	ldr	r3, [sp, #16]
 8009e76:	aa0e      	add	r2, sp, #56	; 0x38
 8009e78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009e7c:	930c      	str	r3, [sp, #48]	; 0x30
 8009e7e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009e80:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009e84:	9c04      	ldr	r4, [sp, #16]
 8009e86:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e88:	ab9a      	add	r3, sp, #616	; 0x268
 8009e8a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8009e8e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e92:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009e96:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8009e9a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8009e9e:	ab9a      	add	r3, sp, #616	; 0x268
 8009ea0:	445b      	add	r3, fp
 8009ea2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8009ea6:	2500      	movs	r5, #0
 8009ea8:	1b63      	subs	r3, r4, r5
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	dc78      	bgt.n	8009fa0 <__kernel_rem_pio2+0x1f8>
 8009eae:	4650      	mov	r0, sl
 8009eb0:	ec49 8b10 	vmov	d0, r8, r9
 8009eb4:	f000 fc00 	bl	800a6b8 <scalbn>
 8009eb8:	ec57 6b10 	vmov	r6, r7, d0
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009ec2:	ee10 0a10 	vmov	r0, s0
 8009ec6:	4639      	mov	r1, r7
 8009ec8:	f7f6 fb42 	bl	8000550 <__aeabi_dmul>
 8009ecc:	ec41 0b10 	vmov	d0, r0, r1
 8009ed0:	f000 fb6e 	bl	800a5b0 <floor>
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	ec51 0b10 	vmov	r0, r1, d0
 8009eda:	4b7e      	ldr	r3, [pc, #504]	; (800a0d4 <__kernel_rem_pio2+0x32c>)
 8009edc:	f7f6 fb38 	bl	8000550 <__aeabi_dmul>
 8009ee0:	4602      	mov	r2, r0
 8009ee2:	460b      	mov	r3, r1
 8009ee4:	4630      	mov	r0, r6
 8009ee6:	4639      	mov	r1, r7
 8009ee8:	f7f6 f97a 	bl	80001e0 <__aeabi_dsub>
 8009eec:	460f      	mov	r7, r1
 8009eee:	4606      	mov	r6, r0
 8009ef0:	f7f6 fdc8 	bl	8000a84 <__aeabi_d2iz>
 8009ef4:	9006      	str	r0, [sp, #24]
 8009ef6:	f7f6 fac1 	bl	800047c <__aeabi_i2d>
 8009efa:	4602      	mov	r2, r0
 8009efc:	460b      	mov	r3, r1
 8009efe:	4630      	mov	r0, r6
 8009f00:	4639      	mov	r1, r7
 8009f02:	f7f6 f96d 	bl	80001e0 <__aeabi_dsub>
 8009f06:	f1ba 0f00 	cmp.w	sl, #0
 8009f0a:	4606      	mov	r6, r0
 8009f0c:	460f      	mov	r7, r1
 8009f0e:	dd6c      	ble.n	8009fea <__kernel_rem_pio2+0x242>
 8009f10:	1e62      	subs	r2, r4, #1
 8009f12:	ab0e      	add	r3, sp, #56	; 0x38
 8009f14:	f1ca 0118 	rsb	r1, sl, #24
 8009f18:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009f1c:	9d06      	ldr	r5, [sp, #24]
 8009f1e:	fa40 f301 	asr.w	r3, r0, r1
 8009f22:	441d      	add	r5, r3
 8009f24:	408b      	lsls	r3, r1
 8009f26:	1ac0      	subs	r0, r0, r3
 8009f28:	ab0e      	add	r3, sp, #56	; 0x38
 8009f2a:	9506      	str	r5, [sp, #24]
 8009f2c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009f30:	f1ca 0317 	rsb	r3, sl, #23
 8009f34:	fa40 f303 	asr.w	r3, r0, r3
 8009f38:	9302      	str	r3, [sp, #8]
 8009f3a:	9b02      	ldr	r3, [sp, #8]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	dd62      	ble.n	800a006 <__kernel_rem_pio2+0x25e>
 8009f40:	9b06      	ldr	r3, [sp, #24]
 8009f42:	2200      	movs	r2, #0
 8009f44:	3301      	adds	r3, #1
 8009f46:	9306      	str	r3, [sp, #24]
 8009f48:	4615      	mov	r5, r2
 8009f4a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009f4e:	4294      	cmp	r4, r2
 8009f50:	f300 8095 	bgt.w	800a07e <__kernel_rem_pio2+0x2d6>
 8009f54:	f1ba 0f00 	cmp.w	sl, #0
 8009f58:	dd07      	ble.n	8009f6a <__kernel_rem_pio2+0x1c2>
 8009f5a:	f1ba 0f01 	cmp.w	sl, #1
 8009f5e:	f000 80a2 	beq.w	800a0a6 <__kernel_rem_pio2+0x2fe>
 8009f62:	f1ba 0f02 	cmp.w	sl, #2
 8009f66:	f000 80c1 	beq.w	800a0ec <__kernel_rem_pio2+0x344>
 8009f6a:	9b02      	ldr	r3, [sp, #8]
 8009f6c:	2b02      	cmp	r3, #2
 8009f6e:	d14a      	bne.n	800a006 <__kernel_rem_pio2+0x25e>
 8009f70:	4632      	mov	r2, r6
 8009f72:	463b      	mov	r3, r7
 8009f74:	2000      	movs	r0, #0
 8009f76:	4958      	ldr	r1, [pc, #352]	; (800a0d8 <__kernel_rem_pio2+0x330>)
 8009f78:	f7f6 f932 	bl	80001e0 <__aeabi_dsub>
 8009f7c:	4606      	mov	r6, r0
 8009f7e:	460f      	mov	r7, r1
 8009f80:	2d00      	cmp	r5, #0
 8009f82:	d040      	beq.n	800a006 <__kernel_rem_pio2+0x25e>
 8009f84:	4650      	mov	r0, sl
 8009f86:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800a0c8 <__kernel_rem_pio2+0x320>
 8009f8a:	f000 fb95 	bl	800a6b8 <scalbn>
 8009f8e:	4630      	mov	r0, r6
 8009f90:	4639      	mov	r1, r7
 8009f92:	ec53 2b10 	vmov	r2, r3, d0
 8009f96:	f7f6 f923 	bl	80001e0 <__aeabi_dsub>
 8009f9a:	4606      	mov	r6, r0
 8009f9c:	460f      	mov	r7, r1
 8009f9e:	e032      	b.n	800a006 <__kernel_rem_pio2+0x25e>
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	4b4e      	ldr	r3, [pc, #312]	; (800a0dc <__kernel_rem_pio2+0x334>)
 8009fa4:	4640      	mov	r0, r8
 8009fa6:	4649      	mov	r1, r9
 8009fa8:	f7f6 fad2 	bl	8000550 <__aeabi_dmul>
 8009fac:	f7f6 fd6a 	bl	8000a84 <__aeabi_d2iz>
 8009fb0:	f7f6 fa64 	bl	800047c <__aeabi_i2d>
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	4b4a      	ldr	r3, [pc, #296]	; (800a0e0 <__kernel_rem_pio2+0x338>)
 8009fb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fbc:	f7f6 fac8 	bl	8000550 <__aeabi_dmul>
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	460b      	mov	r3, r1
 8009fc4:	4640      	mov	r0, r8
 8009fc6:	4649      	mov	r1, r9
 8009fc8:	f7f6 f90a 	bl	80001e0 <__aeabi_dsub>
 8009fcc:	f7f6 fd5a 	bl	8000a84 <__aeabi_d2iz>
 8009fd0:	ab0e      	add	r3, sp, #56	; 0x38
 8009fd2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8009fd6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8009fda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fde:	f7f6 f901 	bl	80001e4 <__adddf3>
 8009fe2:	3501      	adds	r5, #1
 8009fe4:	4680      	mov	r8, r0
 8009fe6:	4689      	mov	r9, r1
 8009fe8:	e75e      	b.n	8009ea8 <__kernel_rem_pio2+0x100>
 8009fea:	d105      	bne.n	8009ff8 <__kernel_rem_pio2+0x250>
 8009fec:	1e63      	subs	r3, r4, #1
 8009fee:	aa0e      	add	r2, sp, #56	; 0x38
 8009ff0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009ff4:	15c3      	asrs	r3, r0, #23
 8009ff6:	e79f      	b.n	8009f38 <__kernel_rem_pio2+0x190>
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	4b3a      	ldr	r3, [pc, #232]	; (800a0e4 <__kernel_rem_pio2+0x33c>)
 8009ffc:	f7f6 fd2e 	bl	8000a5c <__aeabi_dcmpge>
 800a000:	2800      	cmp	r0, #0
 800a002:	d139      	bne.n	800a078 <__kernel_rem_pio2+0x2d0>
 800a004:	9002      	str	r0, [sp, #8]
 800a006:	2200      	movs	r2, #0
 800a008:	2300      	movs	r3, #0
 800a00a:	4630      	mov	r0, r6
 800a00c:	4639      	mov	r1, r7
 800a00e:	f7f6 fd07 	bl	8000a20 <__aeabi_dcmpeq>
 800a012:	2800      	cmp	r0, #0
 800a014:	f000 80c7 	beq.w	800a1a6 <__kernel_rem_pio2+0x3fe>
 800a018:	1e65      	subs	r5, r4, #1
 800a01a:	462b      	mov	r3, r5
 800a01c:	2200      	movs	r2, #0
 800a01e:	9904      	ldr	r1, [sp, #16]
 800a020:	428b      	cmp	r3, r1
 800a022:	da6a      	bge.n	800a0fa <__kernel_rem_pio2+0x352>
 800a024:	2a00      	cmp	r2, #0
 800a026:	f000 8088 	beq.w	800a13a <__kernel_rem_pio2+0x392>
 800a02a:	ab0e      	add	r3, sp, #56	; 0x38
 800a02c:	f1aa 0a18 	sub.w	sl, sl, #24
 800a030:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a034:	2b00      	cmp	r3, #0
 800a036:	f000 80b4 	beq.w	800a1a2 <__kernel_rem_pio2+0x3fa>
 800a03a:	4650      	mov	r0, sl
 800a03c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800a0c8 <__kernel_rem_pio2+0x320>
 800a040:	f000 fb3a 	bl	800a6b8 <scalbn>
 800a044:	00ec      	lsls	r4, r5, #3
 800a046:	ab72      	add	r3, sp, #456	; 0x1c8
 800a048:	191e      	adds	r6, r3, r4
 800a04a:	ec59 8b10 	vmov	r8, r9, d0
 800a04e:	f106 0a08 	add.w	sl, r6, #8
 800a052:	462f      	mov	r7, r5
 800a054:	2f00      	cmp	r7, #0
 800a056:	f280 80df 	bge.w	800a218 <__kernel_rem_pio2+0x470>
 800a05a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800a0c0 <__kernel_rem_pio2+0x318>
 800a05e:	f04f 0a00 	mov.w	sl, #0
 800a062:	eba5 030a 	sub.w	r3, r5, sl
 800a066:	2b00      	cmp	r3, #0
 800a068:	f2c0 810a 	blt.w	800a280 <__kernel_rem_pio2+0x4d8>
 800a06c:	f8df b078 	ldr.w	fp, [pc, #120]	; 800a0e8 <__kernel_rem_pio2+0x340>
 800a070:	ec59 8b18 	vmov	r8, r9, d8
 800a074:	2700      	movs	r7, #0
 800a076:	e0f5      	b.n	800a264 <__kernel_rem_pio2+0x4bc>
 800a078:	2302      	movs	r3, #2
 800a07a:	9302      	str	r3, [sp, #8]
 800a07c:	e760      	b.n	8009f40 <__kernel_rem_pio2+0x198>
 800a07e:	ab0e      	add	r3, sp, #56	; 0x38
 800a080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a084:	b94d      	cbnz	r5, 800a09a <__kernel_rem_pio2+0x2f2>
 800a086:	b12b      	cbz	r3, 800a094 <__kernel_rem_pio2+0x2ec>
 800a088:	a80e      	add	r0, sp, #56	; 0x38
 800a08a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a08e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800a092:	2301      	movs	r3, #1
 800a094:	3201      	adds	r2, #1
 800a096:	461d      	mov	r5, r3
 800a098:	e759      	b.n	8009f4e <__kernel_rem_pio2+0x1a6>
 800a09a:	a80e      	add	r0, sp, #56	; 0x38
 800a09c:	1acb      	subs	r3, r1, r3
 800a09e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800a0a2:	462b      	mov	r3, r5
 800a0a4:	e7f6      	b.n	800a094 <__kernel_rem_pio2+0x2ec>
 800a0a6:	1e62      	subs	r2, r4, #1
 800a0a8:	ab0e      	add	r3, sp, #56	; 0x38
 800a0aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0ae:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a0b2:	a90e      	add	r1, sp, #56	; 0x38
 800a0b4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a0b8:	e757      	b.n	8009f6a <__kernel_rem_pio2+0x1c2>
 800a0ba:	bf00      	nop
 800a0bc:	f3af 8000 	nop.w
	...
 800a0cc:	3ff00000 	.word	0x3ff00000
 800a0d0:	0800aab0 	.word	0x0800aab0
 800a0d4:	40200000 	.word	0x40200000
 800a0d8:	3ff00000 	.word	0x3ff00000
 800a0dc:	3e700000 	.word	0x3e700000
 800a0e0:	41700000 	.word	0x41700000
 800a0e4:	3fe00000 	.word	0x3fe00000
 800a0e8:	0800aa70 	.word	0x0800aa70
 800a0ec:	1e62      	subs	r2, r4, #1
 800a0ee:	ab0e      	add	r3, sp, #56	; 0x38
 800a0f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0f4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a0f8:	e7db      	b.n	800a0b2 <__kernel_rem_pio2+0x30a>
 800a0fa:	a90e      	add	r1, sp, #56	; 0x38
 800a0fc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a100:	3b01      	subs	r3, #1
 800a102:	430a      	orrs	r2, r1
 800a104:	e78b      	b.n	800a01e <__kernel_rem_pio2+0x276>
 800a106:	3301      	adds	r3, #1
 800a108:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a10c:	2900      	cmp	r1, #0
 800a10e:	d0fa      	beq.n	800a106 <__kernel_rem_pio2+0x35e>
 800a110:	9a08      	ldr	r2, [sp, #32]
 800a112:	4422      	add	r2, r4
 800a114:	00d2      	lsls	r2, r2, #3
 800a116:	a922      	add	r1, sp, #136	; 0x88
 800a118:	18e3      	adds	r3, r4, r3
 800a11a:	9206      	str	r2, [sp, #24]
 800a11c:	440a      	add	r2, r1
 800a11e:	9302      	str	r3, [sp, #8]
 800a120:	f10b 0108 	add.w	r1, fp, #8
 800a124:	f102 0308 	add.w	r3, r2, #8
 800a128:	1c66      	adds	r6, r4, #1
 800a12a:	910a      	str	r1, [sp, #40]	; 0x28
 800a12c:	2500      	movs	r5, #0
 800a12e:	930d      	str	r3, [sp, #52]	; 0x34
 800a130:	9b02      	ldr	r3, [sp, #8]
 800a132:	42b3      	cmp	r3, r6
 800a134:	da04      	bge.n	800a140 <__kernel_rem_pio2+0x398>
 800a136:	461c      	mov	r4, r3
 800a138:	e6a6      	b.n	8009e88 <__kernel_rem_pio2+0xe0>
 800a13a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a13c:	2301      	movs	r3, #1
 800a13e:	e7e3      	b.n	800a108 <__kernel_rem_pio2+0x360>
 800a140:	9b06      	ldr	r3, [sp, #24]
 800a142:	18ef      	adds	r7, r5, r3
 800a144:	ab22      	add	r3, sp, #136	; 0x88
 800a146:	441f      	add	r7, r3
 800a148:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a14a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a14e:	f7f6 f995 	bl	800047c <__aeabi_i2d>
 800a152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a154:	461c      	mov	r4, r3
 800a156:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a158:	e9c7 0100 	strd	r0, r1, [r7]
 800a15c:	eb03 0b05 	add.w	fp, r3, r5
 800a160:	2700      	movs	r7, #0
 800a162:	f04f 0800 	mov.w	r8, #0
 800a166:	f04f 0900 	mov.w	r9, #0
 800a16a:	9b07      	ldr	r3, [sp, #28]
 800a16c:	429f      	cmp	r7, r3
 800a16e:	dd08      	ble.n	800a182 <__kernel_rem_pio2+0x3da>
 800a170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a172:	aa72      	add	r2, sp, #456	; 0x1c8
 800a174:	18eb      	adds	r3, r5, r3
 800a176:	4413      	add	r3, r2
 800a178:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800a17c:	3601      	adds	r6, #1
 800a17e:	3508      	adds	r5, #8
 800a180:	e7d6      	b.n	800a130 <__kernel_rem_pio2+0x388>
 800a182:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a186:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a18a:	f7f6 f9e1 	bl	8000550 <__aeabi_dmul>
 800a18e:	4602      	mov	r2, r0
 800a190:	460b      	mov	r3, r1
 800a192:	4640      	mov	r0, r8
 800a194:	4649      	mov	r1, r9
 800a196:	f7f6 f825 	bl	80001e4 <__adddf3>
 800a19a:	3701      	adds	r7, #1
 800a19c:	4680      	mov	r8, r0
 800a19e:	4689      	mov	r9, r1
 800a1a0:	e7e3      	b.n	800a16a <__kernel_rem_pio2+0x3c2>
 800a1a2:	3d01      	subs	r5, #1
 800a1a4:	e741      	b.n	800a02a <__kernel_rem_pio2+0x282>
 800a1a6:	f1ca 0000 	rsb	r0, sl, #0
 800a1aa:	ec47 6b10 	vmov	d0, r6, r7
 800a1ae:	f000 fa83 	bl	800a6b8 <scalbn>
 800a1b2:	ec57 6b10 	vmov	r6, r7, d0
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	4b99      	ldr	r3, [pc, #612]	; (800a420 <__kernel_rem_pio2+0x678>)
 800a1ba:	ee10 0a10 	vmov	r0, s0
 800a1be:	4639      	mov	r1, r7
 800a1c0:	f7f6 fc4c 	bl	8000a5c <__aeabi_dcmpge>
 800a1c4:	b1f8      	cbz	r0, 800a206 <__kernel_rem_pio2+0x45e>
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	4b96      	ldr	r3, [pc, #600]	; (800a424 <__kernel_rem_pio2+0x67c>)
 800a1ca:	4630      	mov	r0, r6
 800a1cc:	4639      	mov	r1, r7
 800a1ce:	f7f6 f9bf 	bl	8000550 <__aeabi_dmul>
 800a1d2:	f7f6 fc57 	bl	8000a84 <__aeabi_d2iz>
 800a1d6:	4680      	mov	r8, r0
 800a1d8:	f7f6 f950 	bl	800047c <__aeabi_i2d>
 800a1dc:	2200      	movs	r2, #0
 800a1de:	4b90      	ldr	r3, [pc, #576]	; (800a420 <__kernel_rem_pio2+0x678>)
 800a1e0:	f7f6 f9b6 	bl	8000550 <__aeabi_dmul>
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	4639      	mov	r1, r7
 800a1ea:	4630      	mov	r0, r6
 800a1ec:	f7f5 fff8 	bl	80001e0 <__aeabi_dsub>
 800a1f0:	f7f6 fc48 	bl	8000a84 <__aeabi_d2iz>
 800a1f4:	1c65      	adds	r5, r4, #1
 800a1f6:	ab0e      	add	r3, sp, #56	; 0x38
 800a1f8:	f10a 0a18 	add.w	sl, sl, #24
 800a1fc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a200:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a204:	e719      	b.n	800a03a <__kernel_rem_pio2+0x292>
 800a206:	4630      	mov	r0, r6
 800a208:	4639      	mov	r1, r7
 800a20a:	f7f6 fc3b 	bl	8000a84 <__aeabi_d2iz>
 800a20e:	ab0e      	add	r3, sp, #56	; 0x38
 800a210:	4625      	mov	r5, r4
 800a212:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a216:	e710      	b.n	800a03a <__kernel_rem_pio2+0x292>
 800a218:	ab0e      	add	r3, sp, #56	; 0x38
 800a21a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800a21e:	f7f6 f92d 	bl	800047c <__aeabi_i2d>
 800a222:	4642      	mov	r2, r8
 800a224:	464b      	mov	r3, r9
 800a226:	f7f6 f993 	bl	8000550 <__aeabi_dmul>
 800a22a:	2200      	movs	r2, #0
 800a22c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800a230:	4b7c      	ldr	r3, [pc, #496]	; (800a424 <__kernel_rem_pio2+0x67c>)
 800a232:	4640      	mov	r0, r8
 800a234:	4649      	mov	r1, r9
 800a236:	f7f6 f98b 	bl	8000550 <__aeabi_dmul>
 800a23a:	3f01      	subs	r7, #1
 800a23c:	4680      	mov	r8, r0
 800a23e:	4689      	mov	r9, r1
 800a240:	e708      	b.n	800a054 <__kernel_rem_pio2+0x2ac>
 800a242:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800a246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800a24e:	f7f6 f97f 	bl	8000550 <__aeabi_dmul>
 800a252:	4602      	mov	r2, r0
 800a254:	460b      	mov	r3, r1
 800a256:	4640      	mov	r0, r8
 800a258:	4649      	mov	r1, r9
 800a25a:	f7f5 ffc3 	bl	80001e4 <__adddf3>
 800a25e:	3701      	adds	r7, #1
 800a260:	4680      	mov	r8, r0
 800a262:	4689      	mov	r9, r1
 800a264:	9b04      	ldr	r3, [sp, #16]
 800a266:	429f      	cmp	r7, r3
 800a268:	dc01      	bgt.n	800a26e <__kernel_rem_pio2+0x4c6>
 800a26a:	45ba      	cmp	sl, r7
 800a26c:	dae9      	bge.n	800a242 <__kernel_rem_pio2+0x49a>
 800a26e:	ab4a      	add	r3, sp, #296	; 0x128
 800a270:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a274:	e9c3 8900 	strd	r8, r9, [r3]
 800a278:	f10a 0a01 	add.w	sl, sl, #1
 800a27c:	3e08      	subs	r6, #8
 800a27e:	e6f0      	b.n	800a062 <__kernel_rem_pio2+0x2ba>
 800a280:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a282:	2b03      	cmp	r3, #3
 800a284:	d85b      	bhi.n	800a33e <__kernel_rem_pio2+0x596>
 800a286:	e8df f003 	tbb	[pc, r3]
 800a28a:	264a      	.short	0x264a
 800a28c:	0226      	.short	0x0226
 800a28e:	ab9a      	add	r3, sp, #616	; 0x268
 800a290:	441c      	add	r4, r3
 800a292:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a296:	46a2      	mov	sl, r4
 800a298:	46ab      	mov	fp, r5
 800a29a:	f1bb 0f00 	cmp.w	fp, #0
 800a29e:	dc6c      	bgt.n	800a37a <__kernel_rem_pio2+0x5d2>
 800a2a0:	46a2      	mov	sl, r4
 800a2a2:	46ab      	mov	fp, r5
 800a2a4:	f1bb 0f01 	cmp.w	fp, #1
 800a2a8:	f300 8086 	bgt.w	800a3b8 <__kernel_rem_pio2+0x610>
 800a2ac:	2000      	movs	r0, #0
 800a2ae:	2100      	movs	r1, #0
 800a2b0:	2d01      	cmp	r5, #1
 800a2b2:	f300 80a0 	bgt.w	800a3f6 <__kernel_rem_pio2+0x64e>
 800a2b6:	9b02      	ldr	r3, [sp, #8]
 800a2b8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800a2bc:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	f040 809e 	bne.w	800a402 <__kernel_rem_pio2+0x65a>
 800a2c6:	9b01      	ldr	r3, [sp, #4]
 800a2c8:	e9c3 7800 	strd	r7, r8, [r3]
 800a2cc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800a2d0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a2d4:	e033      	b.n	800a33e <__kernel_rem_pio2+0x596>
 800a2d6:	3408      	adds	r4, #8
 800a2d8:	ab4a      	add	r3, sp, #296	; 0x128
 800a2da:	441c      	add	r4, r3
 800a2dc:	462e      	mov	r6, r5
 800a2de:	2000      	movs	r0, #0
 800a2e0:	2100      	movs	r1, #0
 800a2e2:	2e00      	cmp	r6, #0
 800a2e4:	da3a      	bge.n	800a35c <__kernel_rem_pio2+0x5b4>
 800a2e6:	9b02      	ldr	r3, [sp, #8]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d03d      	beq.n	800a368 <__kernel_rem_pio2+0x5c0>
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2f2:	9c01      	ldr	r4, [sp, #4]
 800a2f4:	e9c4 2300 	strd	r2, r3, [r4]
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	460b      	mov	r3, r1
 800a2fc:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800a300:	f7f5 ff6e 	bl	80001e0 <__aeabi_dsub>
 800a304:	ae4c      	add	r6, sp, #304	; 0x130
 800a306:	2401      	movs	r4, #1
 800a308:	42a5      	cmp	r5, r4
 800a30a:	da30      	bge.n	800a36e <__kernel_rem_pio2+0x5c6>
 800a30c:	9b02      	ldr	r3, [sp, #8]
 800a30e:	b113      	cbz	r3, 800a316 <__kernel_rem_pio2+0x56e>
 800a310:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a314:	4619      	mov	r1, r3
 800a316:	9b01      	ldr	r3, [sp, #4]
 800a318:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a31c:	e00f      	b.n	800a33e <__kernel_rem_pio2+0x596>
 800a31e:	ab9a      	add	r3, sp, #616	; 0x268
 800a320:	441c      	add	r4, r3
 800a322:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a326:	2000      	movs	r0, #0
 800a328:	2100      	movs	r1, #0
 800a32a:	2d00      	cmp	r5, #0
 800a32c:	da10      	bge.n	800a350 <__kernel_rem_pio2+0x5a8>
 800a32e:	9b02      	ldr	r3, [sp, #8]
 800a330:	b113      	cbz	r3, 800a338 <__kernel_rem_pio2+0x590>
 800a332:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a336:	4619      	mov	r1, r3
 800a338:	9b01      	ldr	r3, [sp, #4]
 800a33a:	e9c3 0100 	strd	r0, r1, [r3]
 800a33e:	9b06      	ldr	r3, [sp, #24]
 800a340:	f003 0007 	and.w	r0, r3, #7
 800a344:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800a348:	ecbd 8b02 	vpop	{d8}
 800a34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a350:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a354:	f7f5 ff46 	bl	80001e4 <__adddf3>
 800a358:	3d01      	subs	r5, #1
 800a35a:	e7e6      	b.n	800a32a <__kernel_rem_pio2+0x582>
 800a35c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a360:	f7f5 ff40 	bl	80001e4 <__adddf3>
 800a364:	3e01      	subs	r6, #1
 800a366:	e7bc      	b.n	800a2e2 <__kernel_rem_pio2+0x53a>
 800a368:	4602      	mov	r2, r0
 800a36a:	460b      	mov	r3, r1
 800a36c:	e7c1      	b.n	800a2f2 <__kernel_rem_pio2+0x54a>
 800a36e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800a372:	f7f5 ff37 	bl	80001e4 <__adddf3>
 800a376:	3401      	adds	r4, #1
 800a378:	e7c6      	b.n	800a308 <__kernel_rem_pio2+0x560>
 800a37a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800a37e:	ed3a 7b02 	vldmdb	sl!, {d7}
 800a382:	4640      	mov	r0, r8
 800a384:	ec53 2b17 	vmov	r2, r3, d7
 800a388:	4649      	mov	r1, r9
 800a38a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a38e:	f7f5 ff29 	bl	80001e4 <__adddf3>
 800a392:	4602      	mov	r2, r0
 800a394:	460b      	mov	r3, r1
 800a396:	4606      	mov	r6, r0
 800a398:	460f      	mov	r7, r1
 800a39a:	4640      	mov	r0, r8
 800a39c:	4649      	mov	r1, r9
 800a39e:	f7f5 ff1f 	bl	80001e0 <__aeabi_dsub>
 800a3a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3a6:	f7f5 ff1d 	bl	80001e4 <__adddf3>
 800a3aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a3ae:	e9ca 0100 	strd	r0, r1, [sl]
 800a3b2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800a3b6:	e770      	b.n	800a29a <__kernel_rem_pio2+0x4f2>
 800a3b8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800a3bc:	ed3a 7b02 	vldmdb	sl!, {d7}
 800a3c0:	4630      	mov	r0, r6
 800a3c2:	ec53 2b17 	vmov	r2, r3, d7
 800a3c6:	4639      	mov	r1, r7
 800a3c8:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a3cc:	f7f5 ff0a 	bl	80001e4 <__adddf3>
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	4680      	mov	r8, r0
 800a3d6:	4689      	mov	r9, r1
 800a3d8:	4630      	mov	r0, r6
 800a3da:	4639      	mov	r1, r7
 800a3dc:	f7f5 ff00 	bl	80001e0 <__aeabi_dsub>
 800a3e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3e4:	f7f5 fefe 	bl	80001e4 <__adddf3>
 800a3e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a3ec:	e9ca 0100 	strd	r0, r1, [sl]
 800a3f0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800a3f4:	e756      	b.n	800a2a4 <__kernel_rem_pio2+0x4fc>
 800a3f6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a3fa:	f7f5 fef3 	bl	80001e4 <__adddf3>
 800a3fe:	3d01      	subs	r5, #1
 800a400:	e756      	b.n	800a2b0 <__kernel_rem_pio2+0x508>
 800a402:	9b01      	ldr	r3, [sp, #4]
 800a404:	9a01      	ldr	r2, [sp, #4]
 800a406:	601f      	str	r7, [r3, #0]
 800a408:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800a40c:	605c      	str	r4, [r3, #4]
 800a40e:	609d      	str	r5, [r3, #8]
 800a410:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a414:	60d3      	str	r3, [r2, #12]
 800a416:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a41a:	6110      	str	r0, [r2, #16]
 800a41c:	6153      	str	r3, [r2, #20]
 800a41e:	e78e      	b.n	800a33e <__kernel_rem_pio2+0x596>
 800a420:	41700000 	.word	0x41700000
 800a424:	3e700000 	.word	0x3e700000

0800a428 <__kernel_sin>:
 800a428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a42c:	ec55 4b10 	vmov	r4, r5, d0
 800a430:	b085      	sub	sp, #20
 800a432:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a436:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a43a:	ed8d 1b00 	vstr	d1, [sp]
 800a43e:	9002      	str	r0, [sp, #8]
 800a440:	da06      	bge.n	800a450 <__kernel_sin+0x28>
 800a442:	ee10 0a10 	vmov	r0, s0
 800a446:	4629      	mov	r1, r5
 800a448:	f7f6 fb1c 	bl	8000a84 <__aeabi_d2iz>
 800a44c:	2800      	cmp	r0, #0
 800a44e:	d051      	beq.n	800a4f4 <__kernel_sin+0xcc>
 800a450:	4622      	mov	r2, r4
 800a452:	462b      	mov	r3, r5
 800a454:	4620      	mov	r0, r4
 800a456:	4629      	mov	r1, r5
 800a458:	f7f6 f87a 	bl	8000550 <__aeabi_dmul>
 800a45c:	4682      	mov	sl, r0
 800a45e:	468b      	mov	fp, r1
 800a460:	4602      	mov	r2, r0
 800a462:	460b      	mov	r3, r1
 800a464:	4620      	mov	r0, r4
 800a466:	4629      	mov	r1, r5
 800a468:	f7f6 f872 	bl	8000550 <__aeabi_dmul>
 800a46c:	a341      	add	r3, pc, #260	; (adr r3, 800a574 <__kernel_sin+0x14c>)
 800a46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a472:	4680      	mov	r8, r0
 800a474:	4689      	mov	r9, r1
 800a476:	4650      	mov	r0, sl
 800a478:	4659      	mov	r1, fp
 800a47a:	f7f6 f869 	bl	8000550 <__aeabi_dmul>
 800a47e:	a33f      	add	r3, pc, #252	; (adr r3, 800a57c <__kernel_sin+0x154>)
 800a480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a484:	f7f5 feac 	bl	80001e0 <__aeabi_dsub>
 800a488:	4652      	mov	r2, sl
 800a48a:	465b      	mov	r3, fp
 800a48c:	f7f6 f860 	bl	8000550 <__aeabi_dmul>
 800a490:	a33c      	add	r3, pc, #240	; (adr r3, 800a584 <__kernel_sin+0x15c>)
 800a492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a496:	f7f5 fea5 	bl	80001e4 <__adddf3>
 800a49a:	4652      	mov	r2, sl
 800a49c:	465b      	mov	r3, fp
 800a49e:	f7f6 f857 	bl	8000550 <__aeabi_dmul>
 800a4a2:	a33a      	add	r3, pc, #232	; (adr r3, 800a58c <__kernel_sin+0x164>)
 800a4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a8:	f7f5 fe9a 	bl	80001e0 <__aeabi_dsub>
 800a4ac:	4652      	mov	r2, sl
 800a4ae:	465b      	mov	r3, fp
 800a4b0:	f7f6 f84e 	bl	8000550 <__aeabi_dmul>
 800a4b4:	a337      	add	r3, pc, #220	; (adr r3, 800a594 <__kernel_sin+0x16c>)
 800a4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ba:	f7f5 fe93 	bl	80001e4 <__adddf3>
 800a4be:	9b02      	ldr	r3, [sp, #8]
 800a4c0:	4606      	mov	r6, r0
 800a4c2:	460f      	mov	r7, r1
 800a4c4:	b9db      	cbnz	r3, 800a4fe <__kernel_sin+0xd6>
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	4650      	mov	r0, sl
 800a4cc:	4659      	mov	r1, fp
 800a4ce:	f7f6 f83f 	bl	8000550 <__aeabi_dmul>
 800a4d2:	a325      	add	r3, pc, #148	; (adr r3, 800a568 <__kernel_sin+0x140>)
 800a4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d8:	f7f5 fe82 	bl	80001e0 <__aeabi_dsub>
 800a4dc:	4642      	mov	r2, r8
 800a4de:	464b      	mov	r3, r9
 800a4e0:	f7f6 f836 	bl	8000550 <__aeabi_dmul>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	460b      	mov	r3, r1
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	4629      	mov	r1, r5
 800a4ec:	f7f5 fe7a 	bl	80001e4 <__adddf3>
 800a4f0:	4604      	mov	r4, r0
 800a4f2:	460d      	mov	r5, r1
 800a4f4:	ec45 4b10 	vmov	d0, r4, r5
 800a4f8:	b005      	add	sp, #20
 800a4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4fe:	2200      	movs	r2, #0
 800a500:	4b1b      	ldr	r3, [pc, #108]	; (800a570 <__kernel_sin+0x148>)
 800a502:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a506:	f7f6 f823 	bl	8000550 <__aeabi_dmul>
 800a50a:	4632      	mov	r2, r6
 800a50c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a510:	463b      	mov	r3, r7
 800a512:	4640      	mov	r0, r8
 800a514:	4649      	mov	r1, r9
 800a516:	f7f6 f81b 	bl	8000550 <__aeabi_dmul>
 800a51a:	4602      	mov	r2, r0
 800a51c:	460b      	mov	r3, r1
 800a51e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a522:	f7f5 fe5d 	bl	80001e0 <__aeabi_dsub>
 800a526:	4652      	mov	r2, sl
 800a528:	465b      	mov	r3, fp
 800a52a:	f7f6 f811 	bl	8000550 <__aeabi_dmul>
 800a52e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a532:	f7f5 fe55 	bl	80001e0 <__aeabi_dsub>
 800a536:	a30c      	add	r3, pc, #48	; (adr r3, 800a568 <__kernel_sin+0x140>)
 800a538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53c:	4606      	mov	r6, r0
 800a53e:	460f      	mov	r7, r1
 800a540:	4640      	mov	r0, r8
 800a542:	4649      	mov	r1, r9
 800a544:	f7f6 f804 	bl	8000550 <__aeabi_dmul>
 800a548:	4602      	mov	r2, r0
 800a54a:	460b      	mov	r3, r1
 800a54c:	4630      	mov	r0, r6
 800a54e:	4639      	mov	r1, r7
 800a550:	f7f5 fe48 	bl	80001e4 <__adddf3>
 800a554:	4602      	mov	r2, r0
 800a556:	460b      	mov	r3, r1
 800a558:	4620      	mov	r0, r4
 800a55a:	4629      	mov	r1, r5
 800a55c:	f7f5 fe40 	bl	80001e0 <__aeabi_dsub>
 800a560:	e7c6      	b.n	800a4f0 <__kernel_sin+0xc8>
 800a562:	bf00      	nop
 800a564:	f3af 8000 	nop.w
 800a568:	55555549 	.word	0x55555549
 800a56c:	3fc55555 	.word	0x3fc55555
 800a570:	3fe00000 	.word	0x3fe00000
 800a574:	5acfd57c 	.word	0x5acfd57c
 800a578:	3de5d93a 	.word	0x3de5d93a
 800a57c:	8a2b9ceb 	.word	0x8a2b9ceb
 800a580:	3e5ae5e6 	.word	0x3e5ae5e6
 800a584:	57b1fe7d 	.word	0x57b1fe7d
 800a588:	3ec71de3 	.word	0x3ec71de3
 800a58c:	19c161d5 	.word	0x19c161d5
 800a590:	3f2a01a0 	.word	0x3f2a01a0
 800a594:	1110f8a6 	.word	0x1110f8a6
 800a598:	3f811111 	.word	0x3f811111

0800a59c <fabs>:
 800a59c:	ec51 0b10 	vmov	r0, r1, d0
 800a5a0:	ee10 2a10 	vmov	r2, s0
 800a5a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a5a8:	ec43 2b10 	vmov	d0, r2, r3
 800a5ac:	4770      	bx	lr
	...

0800a5b0 <floor>:
 800a5b0:	ec51 0b10 	vmov	r0, r1, d0
 800a5b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5b8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a5bc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a5c0:	2e13      	cmp	r6, #19
 800a5c2:	460c      	mov	r4, r1
 800a5c4:	ee10 5a10 	vmov	r5, s0
 800a5c8:	4680      	mov	r8, r0
 800a5ca:	dc34      	bgt.n	800a636 <floor+0x86>
 800a5cc:	2e00      	cmp	r6, #0
 800a5ce:	da16      	bge.n	800a5fe <floor+0x4e>
 800a5d0:	a335      	add	r3, pc, #212	; (adr r3, 800a6a8 <floor+0xf8>)
 800a5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d6:	f7f5 fe05 	bl	80001e4 <__adddf3>
 800a5da:	2200      	movs	r2, #0
 800a5dc:	2300      	movs	r3, #0
 800a5de:	f7f6 fa47 	bl	8000a70 <__aeabi_dcmpgt>
 800a5e2:	b148      	cbz	r0, 800a5f8 <floor+0x48>
 800a5e4:	2c00      	cmp	r4, #0
 800a5e6:	da59      	bge.n	800a69c <floor+0xec>
 800a5e8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a5ec:	4a30      	ldr	r2, [pc, #192]	; (800a6b0 <floor+0x100>)
 800a5ee:	432b      	orrs	r3, r5
 800a5f0:	2500      	movs	r5, #0
 800a5f2:	42ab      	cmp	r3, r5
 800a5f4:	bf18      	it	ne
 800a5f6:	4614      	movne	r4, r2
 800a5f8:	4621      	mov	r1, r4
 800a5fa:	4628      	mov	r0, r5
 800a5fc:	e025      	b.n	800a64a <floor+0x9a>
 800a5fe:	4f2d      	ldr	r7, [pc, #180]	; (800a6b4 <floor+0x104>)
 800a600:	4137      	asrs	r7, r6
 800a602:	ea01 0307 	and.w	r3, r1, r7
 800a606:	4303      	orrs	r3, r0
 800a608:	d01f      	beq.n	800a64a <floor+0x9a>
 800a60a:	a327      	add	r3, pc, #156	; (adr r3, 800a6a8 <floor+0xf8>)
 800a60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a610:	f7f5 fde8 	bl	80001e4 <__adddf3>
 800a614:	2200      	movs	r2, #0
 800a616:	2300      	movs	r3, #0
 800a618:	f7f6 fa2a 	bl	8000a70 <__aeabi_dcmpgt>
 800a61c:	2800      	cmp	r0, #0
 800a61e:	d0eb      	beq.n	800a5f8 <floor+0x48>
 800a620:	2c00      	cmp	r4, #0
 800a622:	bfbe      	ittt	lt
 800a624:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a628:	fa43 f606 	asrlt.w	r6, r3, r6
 800a62c:	19a4      	addlt	r4, r4, r6
 800a62e:	ea24 0407 	bic.w	r4, r4, r7
 800a632:	2500      	movs	r5, #0
 800a634:	e7e0      	b.n	800a5f8 <floor+0x48>
 800a636:	2e33      	cmp	r6, #51	; 0x33
 800a638:	dd0b      	ble.n	800a652 <floor+0xa2>
 800a63a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a63e:	d104      	bne.n	800a64a <floor+0x9a>
 800a640:	ee10 2a10 	vmov	r2, s0
 800a644:	460b      	mov	r3, r1
 800a646:	f7f5 fdcd 	bl	80001e4 <__adddf3>
 800a64a:	ec41 0b10 	vmov	d0, r0, r1
 800a64e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a652:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a656:	f04f 33ff 	mov.w	r3, #4294967295
 800a65a:	fa23 f707 	lsr.w	r7, r3, r7
 800a65e:	4207      	tst	r7, r0
 800a660:	d0f3      	beq.n	800a64a <floor+0x9a>
 800a662:	a311      	add	r3, pc, #68	; (adr r3, 800a6a8 <floor+0xf8>)
 800a664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a668:	f7f5 fdbc 	bl	80001e4 <__adddf3>
 800a66c:	2200      	movs	r2, #0
 800a66e:	2300      	movs	r3, #0
 800a670:	f7f6 f9fe 	bl	8000a70 <__aeabi_dcmpgt>
 800a674:	2800      	cmp	r0, #0
 800a676:	d0bf      	beq.n	800a5f8 <floor+0x48>
 800a678:	2c00      	cmp	r4, #0
 800a67a:	da02      	bge.n	800a682 <floor+0xd2>
 800a67c:	2e14      	cmp	r6, #20
 800a67e:	d103      	bne.n	800a688 <floor+0xd8>
 800a680:	3401      	adds	r4, #1
 800a682:	ea25 0507 	bic.w	r5, r5, r7
 800a686:	e7b7      	b.n	800a5f8 <floor+0x48>
 800a688:	2301      	movs	r3, #1
 800a68a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a68e:	fa03 f606 	lsl.w	r6, r3, r6
 800a692:	4435      	add	r5, r6
 800a694:	4545      	cmp	r5, r8
 800a696:	bf38      	it	cc
 800a698:	18e4      	addcc	r4, r4, r3
 800a69a:	e7f2      	b.n	800a682 <floor+0xd2>
 800a69c:	2500      	movs	r5, #0
 800a69e:	462c      	mov	r4, r5
 800a6a0:	e7aa      	b.n	800a5f8 <floor+0x48>
 800a6a2:	bf00      	nop
 800a6a4:	f3af 8000 	nop.w
 800a6a8:	8800759c 	.word	0x8800759c
 800a6ac:	7e37e43c 	.word	0x7e37e43c
 800a6b0:	bff00000 	.word	0xbff00000
 800a6b4:	000fffff 	.word	0x000fffff

0800a6b8 <scalbn>:
 800a6b8:	b570      	push	{r4, r5, r6, lr}
 800a6ba:	ec55 4b10 	vmov	r4, r5, d0
 800a6be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a6c2:	4606      	mov	r6, r0
 800a6c4:	462b      	mov	r3, r5
 800a6c6:	b9aa      	cbnz	r2, 800a6f4 <scalbn+0x3c>
 800a6c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a6cc:	4323      	orrs	r3, r4
 800a6ce:	d03b      	beq.n	800a748 <scalbn+0x90>
 800a6d0:	4b31      	ldr	r3, [pc, #196]	; (800a798 <scalbn+0xe0>)
 800a6d2:	4629      	mov	r1, r5
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	ee10 0a10 	vmov	r0, s0
 800a6da:	f7f5 ff39 	bl	8000550 <__aeabi_dmul>
 800a6de:	4b2f      	ldr	r3, [pc, #188]	; (800a79c <scalbn+0xe4>)
 800a6e0:	429e      	cmp	r6, r3
 800a6e2:	4604      	mov	r4, r0
 800a6e4:	460d      	mov	r5, r1
 800a6e6:	da12      	bge.n	800a70e <scalbn+0x56>
 800a6e8:	a327      	add	r3, pc, #156	; (adr r3, 800a788 <scalbn+0xd0>)
 800a6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ee:	f7f5 ff2f 	bl	8000550 <__aeabi_dmul>
 800a6f2:	e009      	b.n	800a708 <scalbn+0x50>
 800a6f4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a6f8:	428a      	cmp	r2, r1
 800a6fa:	d10c      	bne.n	800a716 <scalbn+0x5e>
 800a6fc:	ee10 2a10 	vmov	r2, s0
 800a700:	4620      	mov	r0, r4
 800a702:	4629      	mov	r1, r5
 800a704:	f7f5 fd6e 	bl	80001e4 <__adddf3>
 800a708:	4604      	mov	r4, r0
 800a70a:	460d      	mov	r5, r1
 800a70c:	e01c      	b.n	800a748 <scalbn+0x90>
 800a70e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a712:	460b      	mov	r3, r1
 800a714:	3a36      	subs	r2, #54	; 0x36
 800a716:	4432      	add	r2, r6
 800a718:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a71c:	428a      	cmp	r2, r1
 800a71e:	dd0b      	ble.n	800a738 <scalbn+0x80>
 800a720:	ec45 4b11 	vmov	d1, r4, r5
 800a724:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800a790 <scalbn+0xd8>
 800a728:	f000 f83c 	bl	800a7a4 <copysign>
 800a72c:	a318      	add	r3, pc, #96	; (adr r3, 800a790 <scalbn+0xd8>)
 800a72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a732:	ec51 0b10 	vmov	r0, r1, d0
 800a736:	e7da      	b.n	800a6ee <scalbn+0x36>
 800a738:	2a00      	cmp	r2, #0
 800a73a:	dd08      	ble.n	800a74e <scalbn+0x96>
 800a73c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a740:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a744:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a748:	ec45 4b10 	vmov	d0, r4, r5
 800a74c:	bd70      	pop	{r4, r5, r6, pc}
 800a74e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a752:	da0d      	bge.n	800a770 <scalbn+0xb8>
 800a754:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a758:	429e      	cmp	r6, r3
 800a75a:	ec45 4b11 	vmov	d1, r4, r5
 800a75e:	dce1      	bgt.n	800a724 <scalbn+0x6c>
 800a760:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800a788 <scalbn+0xd0>
 800a764:	f000 f81e 	bl	800a7a4 <copysign>
 800a768:	a307      	add	r3, pc, #28	; (adr r3, 800a788 <scalbn+0xd0>)
 800a76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a76e:	e7e0      	b.n	800a732 <scalbn+0x7a>
 800a770:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a774:	3236      	adds	r2, #54	; 0x36
 800a776:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a77a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a77e:	4620      	mov	r0, r4
 800a780:	4629      	mov	r1, r5
 800a782:	2200      	movs	r2, #0
 800a784:	4b06      	ldr	r3, [pc, #24]	; (800a7a0 <scalbn+0xe8>)
 800a786:	e7b2      	b.n	800a6ee <scalbn+0x36>
 800a788:	c2f8f359 	.word	0xc2f8f359
 800a78c:	01a56e1f 	.word	0x01a56e1f
 800a790:	8800759c 	.word	0x8800759c
 800a794:	7e37e43c 	.word	0x7e37e43c
 800a798:	43500000 	.word	0x43500000
 800a79c:	ffff3cb0 	.word	0xffff3cb0
 800a7a0:	3c900000 	.word	0x3c900000

0800a7a4 <copysign>:
 800a7a4:	ec51 0b10 	vmov	r0, r1, d0
 800a7a8:	ee11 0a90 	vmov	r0, s3
 800a7ac:	ee10 2a10 	vmov	r2, s0
 800a7b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a7b4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800a7b8:	ea41 0300 	orr.w	r3, r1, r0
 800a7bc:	ec43 2b10 	vmov	d0, r2, r3
 800a7c0:	4770      	bx	lr
	...

0800a7c4 <_init>:
 800a7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7c6:	bf00      	nop
 800a7c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7ca:	bc08      	pop	{r3}
 800a7cc:	469e      	mov	lr, r3
 800a7ce:	4770      	bx	lr

0800a7d0 <_fini>:
 800a7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7d2:	bf00      	nop
 800a7d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7d6:	bc08      	pop	{r3}
 800a7d8:	469e      	mov	lr, r3
 800a7da:	4770      	bx	lr
