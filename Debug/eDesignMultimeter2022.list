
eDesignMultimeter2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c5c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08008df8  08008df8  00018df8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009078  08009078  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08009078  08009078  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009078  08009078  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009078  08009078  00019078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800907c  0800907c  0001907c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08009080  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  2000001c  0800909c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  0800909c  000203c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ba8  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027c9  00000000  00000000  00035bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010b8  00000000  00000000  000383c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fb0  00000000  00000000  00039478  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022344  00000000  00000000  0003a428  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010a69  00000000  00000000  0005c76c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4e68  00000000  00000000  0006d1d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014203d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a14  00000000  00000000  001420b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000001c 	.word	0x2000001c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008ddc 	.word	0x08008ddc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000020 	.word	0x20000020
 80001d4:	08008ddc 	.word	0x08008ddc

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr
 8000b14:	0000      	movs	r0, r0
	...

08000b18 <DAC_Calculate_Sine_Buffer>:
extern UART_HandleTypeDef huart2;

OutputStateType OutputState;

void DAC_Calculate_Sine_Buffer()
{
 8000b18:	b5b0      	push	{r4, r5, r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
	for(int i=0; i<100; i++)
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	e04a      	b.n	8000bba <DAC_Calculate_Sine_Buffer+0xa2>
	{
		OutputState.SineBuffer[i] = ((OutputState.Amplitude/2)*sin(i*2*PI/100) + OutputState.Offset)*(4096/3300);
 8000b24:	4b2a      	ldr	r3, [pc, #168]	; (8000bd0 <DAC_Calculate_Sine_Buffer+0xb8>)
 8000b26:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8000b2a:	085b      	lsrs	r3, r3, #1
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff fca4 	bl	800047c <__aeabi_i2d>
 8000b34:	4604      	mov	r4, r0
 8000b36:	460d      	mov	r5, r1
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fc9d 	bl	800047c <__aeabi_i2d>
 8000b42:	a321      	add	r3, pc, #132	; (adr r3, 8000bc8 <DAC_Calculate_Sine_Buffer+0xb0>)
 8000b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b48:	f7ff fd02 	bl	8000550 <__aeabi_dmul>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	460b      	mov	r3, r1
 8000b50:	4610      	mov	r0, r2
 8000b52:	4619      	mov	r1, r3
 8000b54:	f04f 0200 	mov.w	r2, #0
 8000b58:	4b1e      	ldr	r3, [pc, #120]	; (8000bd4 <DAC_Calculate_Sine_Buffer+0xbc>)
 8000b5a:	f7ff fe23 	bl	80007a4 <__aeabi_ddiv>
 8000b5e:	4602      	mov	r2, r0
 8000b60:	460b      	mov	r3, r1
 8000b62:	ec43 2b17 	vmov	d7, r2, r3
 8000b66:	eeb0 0a47 	vmov.f32	s0, s14
 8000b6a:	eef0 0a67 	vmov.f32	s1, s15
 8000b6e:	f007 f923 	bl	8007db8 <sin>
 8000b72:	ec53 2b10 	vmov	r2, r3, d0
 8000b76:	4620      	mov	r0, r4
 8000b78:	4629      	mov	r1, r5
 8000b7a:	f7ff fce9 	bl	8000550 <__aeabi_dmul>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	460c      	mov	r4, r1
 8000b82:	4625      	mov	r5, r4
 8000b84:	461c      	mov	r4, r3
 8000b86:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <DAC_Calculate_Sine_Buffer+0xb8>)
 8000b88:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fc75 	bl	800047c <__aeabi_i2d>
 8000b92:	4602      	mov	r2, r0
 8000b94:	460b      	mov	r3, r1
 8000b96:	4620      	mov	r0, r4
 8000b98:	4629      	mov	r1, r5
 8000b9a:	f7ff fb23 	bl	80001e4 <__adddf3>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	460c      	mov	r4, r1
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	4621      	mov	r1, r4
 8000ba6:	f7ff ff95 	bl	8000ad4 <__aeabi_d2uiz>
 8000baa:	4601      	mov	r1, r0
 8000bac:	4a08      	ldr	r2, [pc, #32]	; (8000bd0 <DAC_Calculate_Sine_Buffer+0xb8>)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0; i<100; i++)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2b63      	cmp	r3, #99	; 0x63
 8000bbe:	ddb1      	ble.n	8000b24 <DAC_Calculate_Sine_Buffer+0xc>
	}
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bdb0      	pop	{r4, r5, r7, pc}
 8000bc8:	4d12d84a 	.word	0x4d12d84a
 8000bcc:	400921fb 	.word	0x400921fb
 8000bd0:	20000050 	.word	0x20000050
 8000bd4:	40590000 	.word	0x40590000

08000bd8 <DAC_Set_Output_Frequency>:

void DAC_Set_Output_Frequency()
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
	OutputState.ARR_Val = OutputState.TIM2_Clock / (OutputState.Frequency*100);
 8000bdc:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <DAC_Set_Output_Frequency+0x5c>)
 8000bde:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8000be2:	4a14      	ldr	r2, [pc, #80]	; (8000c34 <DAC_Set_Output_Frequency+0x5c>)
 8000be4:	f8b2 2198 	ldrh.w	r2, [r2, #408]	; 0x198
 8000be8:	4611      	mov	r1, r2
 8000bea:	2264      	movs	r2, #100	; 0x64
 8000bec:	fb02 f201 	mul.w	r2, r2, r1
 8000bf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8000bf4:	4a0f      	ldr	r2, [pc, #60]	; (8000c34 <DAC_Set_Output_Frequency+0x5c>)
 8000bf6:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
	__HAL_TIM_SET_AUTORELOAD(&htim2, OutputState.ARR_Val);
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <DAC_Set_Output_Frequency+0x60>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a0d      	ldr	r2, [pc, #52]	; (8000c34 <DAC_Set_Output_Frequency+0x5c>)
 8000c00:	f8d2 21a0 	ldr.w	r2, [r2, #416]	; 0x1a0
 8000c04:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <DAC_Set_Output_Frequency+0x5c>)
 8000c08:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000c0c:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <DAC_Set_Output_Frequency+0x60>)
 8000c0e:	60d3      	str	r3, [r2, #12]
	TIM2->CR1 = 0;				// 	Disable Timer
 8000c10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
	TIM2->EGR = TIM_EGR_UG;		//	Init registers
 8000c18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	615a      	str	r2, [r3, #20]
	TIM2->CR1 = 1;				// 	Start
 8000c20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c24:	2201      	movs	r2, #1
 8000c26:	601a      	str	r2, [r3, #0]
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20000050 	.word	0x20000050
 8000c38:	200002a4 	.word	0x200002a4

08000c3c <LCD_Init>:
#define lcd_D5_bit			8
#define lcd_D6_bit			11
#define lcd_D7_bit			12

void LCD_Init()
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0

	HAL_UART_Transmit(&huart2, (uint8_t*)"\nStart of Init Function:\n", 25, 10);
 8000c40:	230a      	movs	r3, #10
 8000c42:	2219      	movs	r2, #25
 8000c44:	491f      	ldr	r1, [pc, #124]	; (8000cc4 <LCD_Init+0x88>)
 8000c46:	4820      	ldr	r0, [pc, #128]	; (8000cc8 <LCD_Init+0x8c>)
 8000c48:	f005 fe6c 	bl	8006924 <HAL_UART_Transmit>

	HAL_Delay(20);
 8000c4c:	2014      	movs	r0, #20
 8000c4e:	f001 fcd7 	bl	8002600 <HAL_Delay>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionReset);
 8000c52:	2030      	movs	r0, #48	; 0x30
 8000c54:	f000 f914 	bl	8000e80 <LCD_Write_8bitInstruction>
	HAL_Delay(10);
 8000c58:	200a      	movs	r0, #10
 8000c5a:	f001 fcd1 	bl	8002600 <HAL_Delay>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionReset);
 8000c5e:	2030      	movs	r0, #48	; 0x30
 8000c60:	f000 f90e 	bl	8000e80 <LCD_Write_8bitInstruction>
	HAL_Delay(1);
 8000c64:	2001      	movs	r0, #1
 8000c66:	f001 fccb 	bl	8002600 <HAL_Delay>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionReset);
 8000c6a:	2030      	movs	r0, #48	; 0x30
 8000c6c:	f000 f908 	bl	8000e80 <LCD_Write_8bitInstruction>
	HAL_Delay(10);
 8000c70:	200a      	movs	r0, #10
 8000c72:	f001 fcc5 	bl	8002600 <HAL_Delay>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionSet4bit);
 8000c76:	2028      	movs	r0, #40	; 0x28
 8000c78:	f000 f902 	bl	8000e80 <LCD_Write_8bitInstruction>
	HAL_Delay(1);
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f001 fcbf 	bl	8002600 <HAL_Delay>

	LCD_Write_Instruction(lcd_instruction_FunctionSet4bit);
 8000c82:	2028      	movs	r0, #40	; 0x28
 8000c84:	f000 f858 	bl	8000d38 <LCD_Write_Instruction>
	HAL_Delay(1);
 8000c88:	2001      	movs	r0, #1
 8000c8a:	f001 fcb9 	bl	8002600 <HAL_Delay>

	LCD_Write_Instruction(lcd_instruction_DisplayOn);
 8000c8e:	200f      	movs	r0, #15
 8000c90:	f000 f852 	bl	8000d38 <LCD_Write_Instruction>
	HAL_Delay(1);
 8000c94:	2001      	movs	r0, #1
 8000c96:	f001 fcb3 	bl	8002600 <HAL_Delay>

	LCD_Write_Instruction(lcd_instruction_ClearDisplay);
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f000 f84c 	bl	8000d38 <LCD_Write_Instruction>
	HAL_Delay(3);
 8000ca0:	2003      	movs	r0, #3
 8000ca2:	f001 fcad 	bl	8002600 <HAL_Delay>

	LCD_Write_Instruction(lcd_instruction_EntryMode);
 8000ca6:	2006      	movs	r0, #6
 8000ca8:	f000 f846 	bl	8000d38 <LCD_Write_Instruction>
	HAL_Delay(1);
 8000cac:	2001      	movs	r0, #1
 8000cae:	f001 fca7 	bl	8002600 <HAL_Delay>

	HAL_UART_Transmit(&huart2, (uint8_t*)"\nEnd of Init Function:\n", 23, 10);
 8000cb2:	230a      	movs	r3, #10
 8000cb4:	2217      	movs	r2, #23
 8000cb6:	4905      	ldr	r1, [pc, #20]	; (8000ccc <LCD_Init+0x90>)
 8000cb8:	4803      	ldr	r0, [pc, #12]	; (8000cc8 <LCD_Init+0x8c>)
 8000cba:	f005 fe33 	bl	8006924 <HAL_UART_Transmit>

}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	08008df8 	.word	0x08008df8
 8000cc8:	200002f0 	.word	0x200002f0
 8000ccc:	08008e14 	.word	0x08008e14

08000cd0 <LCD_Write_String>:

void LCD_Write_String(uint8_t string[])
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]
	while (string[i] != 0)
 8000cdc:	e00c      	b.n	8000cf8 <LCD_Write_String+0x28>
	{
		LCD_Write_Character(string[i]);
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 f810 	bl	8000d0c <LCD_Write_Character>
		i++;
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1);
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	f001 fc84 	bl	8002600 <HAL_Delay>
	while (string[i] != 0)
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d1ec      	bne.n	8000cde <LCD_Write_String+0xe>
	}
}
 8000d04:	bf00      	nop
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <LCD_Write_Character>:

void LCD_Write_Character(uint8_t character)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
	lcd_RS_GPIO_Port->ODR |= (1<<lcd_RS_bit);			// select data register (RS High)
 8000d16:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <LCD_Write_Character+0x28>)
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	4a06      	ldr	r2, [pc, #24]	; (8000d34 <LCD_Write_Character+0x28>)
 8000d1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d20:	6153      	str	r3, [r2, #20]
	LCD_Write_Nibbles(character);
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 f81d 	bl	8000d64 <LCD_Write_Nibbles>
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	48000400 	.word	0x48000400

08000d38 <LCD_Write_Instruction>:

void LCD_Write_Instruction(uint8_t instruction)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
	lcd_RS_GPIO_Port->ODR &= ~(1<<lcd_RS_bit);			// select the Instruction Register (RS low)
 8000d42:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <LCD_Write_Instruction+0x28>)
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	4a06      	ldr	r2, [pc, #24]	; (8000d60 <LCD_Write_Instruction+0x28>)
 8000d48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000d4c:	6153      	str	r3, [r2, #20]
	LCD_Write_Nibbles(instruction);
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 f807 	bl	8000d64 <LCD_Write_Nibbles>
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	48000400 	.word	0x48000400

08000d64 <LCD_Write_Nibbles>:

void LCD_Write_Nibbles(uint8_t byte)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
	lcd_E_GPIO_Port->ODR |= (1<<lcd_E_bit);			// set E high
 8000d6e:	4b42      	ldr	r3, [pc, #264]	; (8000e78 <LCD_Write_Nibbles+0x114>)
 8000d70:	695b      	ldr	r3, [r3, #20]
 8000d72:	4a41      	ldr	r2, [pc, #260]	; (8000e78 <LCD_Write_Nibbles+0x114>)
 8000d74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d78:	6153      	str	r3, [r2, #20]
	LCD_ZeroPins();
 8000d7a:	f000 f8d5 	bl	8000f28 <LCD_ZeroPins>

	// Write first (most significant) nibble
	if(byte & 1<<7)	lcd_D7_GPIO_Port->ODR |= (1<<lcd_D7_bit);
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	da07      	bge.n	8000d96 <LCD_Write_Nibbles+0x32>
 8000d86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d8a:	695b      	ldr	r3, [r3, #20]
 8000d8c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d94:	6153      	str	r3, [r2, #20]
	if(byte & 1<<6)	lcd_D6_GPIO_Port->ODR |= (1<<lcd_D6_bit);
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d007      	beq.n	8000db0 <LCD_Write_Nibbles+0x4c>
 8000da0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000daa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dae:	6153      	str	r3, [r2, #20]
	if(byte & 1<<5)	lcd_D5_GPIO_Port->ODR |= (1<<lcd_D5_bit);
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	f003 0320 	and.w	r3, r3, #32
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d005      	beq.n	8000dc6 <LCD_Write_Nibbles+0x62>
 8000dba:	4b30      	ldr	r3, [pc, #192]	; (8000e7c <LCD_Write_Nibbles+0x118>)
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	4a2f      	ldr	r2, [pc, #188]	; (8000e7c <LCD_Write_Nibbles+0x118>)
 8000dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc4:	6153      	str	r3, [r2, #20]
	if(byte & 1<<4)	lcd_D4_GPIO_Port->ODR |= (1<<lcd_D4_bit);
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	f003 0310 	and.w	r3, r3, #16
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d005      	beq.n	8000ddc <LCD_Write_Nibbles+0x78>
 8000dd0:	4b2a      	ldr	r3, [pc, #168]	; (8000e7c <LCD_Write_Nibbles+0x118>)
 8000dd2:	695b      	ldr	r3, [r3, #20]
 8000dd4:	4a29      	ldr	r2, [pc, #164]	; (8000e7c <LCD_Write_Nibbles+0x118>)
 8000dd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dda:	6153      	str	r3, [r2, #20]


	// Pulse Enable
	HAL_Delay(1);
 8000ddc:	2001      	movs	r0, #1
 8000dde:	f001 fc0f 	bl	8002600 <HAL_Delay>
	lcd_E_GPIO_Port->ODR &= ~(1<<lcd_E_bit);			// Set to 0
 8000de2:	4b25      	ldr	r3, [pc, #148]	; (8000e78 <LCD_Write_Nibbles+0x114>)
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	4a24      	ldr	r2, [pc, #144]	; (8000e78 <LCD_Write_Nibbles+0x114>)
 8000de8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000dec:	6153      	str	r3, [r2, #20]
	lcd_E_GPIO_Port->ODR |= (1<<lcd_E_bit);				// Set to 1
 8000dee:	4b22      	ldr	r3, [pc, #136]	; (8000e78 <LCD_Write_Nibbles+0x114>)
 8000df0:	695b      	ldr	r3, [r3, #20]
 8000df2:	4a21      	ldr	r2, [pc, #132]	; (8000e78 <LCD_Write_Nibbles+0x114>)
 8000df4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000df8:	6153      	str	r3, [r2, #20]

	LCD_ZeroPins();
 8000dfa:	f000 f895 	bl	8000f28 <LCD_ZeroPins>
	if(byte & 1<<3)	lcd_D7_GPIO_Port->ODR |= (1<<lcd_D7_bit);
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	f003 0308 	and.w	r3, r3, #8
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d007      	beq.n	8000e18 <LCD_Write_Nibbles+0xb4>
 8000e08:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e16:	6153      	str	r3, [r2, #20]
	if(byte & 1<<2)	lcd_D6_GPIO_Port->ODR |= (1<<lcd_D6_bit);
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	f003 0304 	and.w	r3, r3, #4
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d007      	beq.n	8000e32 <LCD_Write_Nibbles+0xce>
 8000e22:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e26:	695b      	ldr	r3, [r3, #20]
 8000e28:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e30:	6153      	str	r3, [r2, #20]
	if(byte & 1<<1)	lcd_D5_GPIO_Port->ODR |= (1<<lcd_D5_bit);
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	f003 0302 	and.w	r3, r3, #2
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d005      	beq.n	8000e48 <LCD_Write_Nibbles+0xe4>
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <LCD_Write_Nibbles+0x118>)
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	4a0e      	ldr	r2, [pc, #56]	; (8000e7c <LCD_Write_Nibbles+0x118>)
 8000e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e46:	6153      	str	r3, [r2, #20]
	if(byte & 1<<0)	lcd_D4_GPIO_Port->ODR |= (1<<lcd_D4_bit);
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d005      	beq.n	8000e5e <LCD_Write_Nibbles+0xfa>
 8000e52:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <LCD_Write_Nibbles+0x118>)
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	4a09      	ldr	r2, [pc, #36]	; (8000e7c <LCD_Write_Nibbles+0x118>)
 8000e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e5c:	6153      	str	r3, [r2, #20]

	// Drop Enable
	HAL_Delay(1);
 8000e5e:	2001      	movs	r0, #1
 8000e60:	f001 fbce 	bl	8002600 <HAL_Delay>
	lcd_E_GPIO_Port->ODR &= ~(1<<lcd_E_bit);		// Set to 0
 8000e64:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <LCD_Write_Nibbles+0x114>)
 8000e66:	695b      	ldr	r3, [r3, #20]
 8000e68:	4a03      	ldr	r2, [pc, #12]	; (8000e78 <LCD_Write_Nibbles+0x114>)
 8000e6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e6e:	6153      	str	r3, [r2, #20]
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	48000400 	.word	0x48000400
 8000e7c:	48000800 	.word	0x48000800

08000e80 <LCD_Write_8bitInstruction>:

void LCD_Write_8bitInstruction(uint8_t byte)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
	lcd_RS_GPIO_Port->ODR &= ~(1<<lcd_RS_bit);			// Set RS to 0
 8000e8a:	4b25      	ldr	r3, [pc, #148]	; (8000f20 <LCD_Write_8bitInstruction+0xa0>)
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	4a24      	ldr	r2, [pc, #144]	; (8000f20 <LCD_Write_8bitInstruction+0xa0>)
 8000e90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000e94:	6153      	str	r3, [r2, #20]
	lcd_E_GPIO_Port->ODR |= (1<<lcd_E_bit);				// Set E to 1
 8000e96:	4b22      	ldr	r3, [pc, #136]	; (8000f20 <LCD_Write_8bitInstruction+0xa0>)
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	4a21      	ldr	r2, [pc, #132]	; (8000f20 <LCD_Write_8bitInstruction+0xa0>)
 8000e9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ea0:	6153      	str	r3, [r2, #20]
	LCD_ZeroPins();
 8000ea2:	f000 f841 	bl	8000f28 <LCD_ZeroPins>

	 // Set to zero first
	if(byte & 1<<7)	lcd_D7_GPIO_Port->ODR |= (1<<lcd_D7_bit);
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	da07      	bge.n	8000ebe <LCD_Write_8bitInstruction+0x3e>
 8000eae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000eb2:	695b      	ldr	r3, [r3, #20]
 8000eb4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000eb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ebc:	6153      	str	r3, [r2, #20]
	if(byte & 1<<6)	lcd_D6_GPIO_Port->ODR |= (1<<lcd_D6_bit);
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d007      	beq.n	8000ed8 <LCD_Write_8bitInstruction+0x58>
 8000ec8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ed2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ed6:	6153      	str	r3, [r2, #20]
	if(byte & 1<<5)	lcd_D5_GPIO_Port->ODR |= (1<<lcd_D5_bit);
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	f003 0320 	and.w	r3, r3, #32
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d005      	beq.n	8000eee <LCD_Write_8bitInstruction+0x6e>
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <LCD_Write_8bitInstruction+0xa4>)
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	4a0f      	ldr	r2, [pc, #60]	; (8000f24 <LCD_Write_8bitInstruction+0xa4>)
 8000ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eec:	6153      	str	r3, [r2, #20]
	if(byte & 1<<4)	lcd_D4_GPIO_Port->ODR |= (1<<lcd_D4_bit);
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	f003 0310 	and.w	r3, r3, #16
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d005      	beq.n	8000f04 <LCD_Write_8bitInstruction+0x84>
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <LCD_Write_8bitInstruction+0xa4>)
 8000efa:	695b      	ldr	r3, [r3, #20]
 8000efc:	4a09      	ldr	r2, [pc, #36]	; (8000f24 <LCD_Write_8bitInstruction+0xa4>)
 8000efe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f02:	6153      	str	r3, [r2, #20]

	HAL_Delay(1);
 8000f04:	2001      	movs	r0, #1
 8000f06:	f001 fb7b 	bl	8002600 <HAL_Delay>
	lcd_E_GPIO_Port->ODR &= ~(1<<lcd_E_bit);		// Set E to 0
 8000f0a:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <LCD_Write_8bitInstruction+0xa0>)
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <LCD_Write_8bitInstruction+0xa0>)
 8000f10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000f14:	6153      	str	r3, [r2, #20]
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	48000400 	.word	0x48000400
 8000f24:	48000800 	.word	0x48000800

08000f28 <LCD_ZeroPins>:

void LCD_ZeroPins()
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
	lcd_D7_GPIO_Port->ODR &= ~(1<<lcd_D7_bit);
 8000f2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f30:	695b      	ldr	r3, [r3, #20]
 8000f32:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f3a:	6153      	str	r3, [r2, #20]
	lcd_D6_GPIO_Port->ODR &= ~(1<<lcd_D6_bit);
 8000f3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f4a:	6153      	str	r3, [r2, #20]
	lcd_D5_GPIO_Port->ODR &= ~(1<<lcd_D5_bit);
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <LCD_ZeroPins+0x48>)
 8000f4e:	695b      	ldr	r3, [r3, #20]
 8000f50:	4a07      	ldr	r2, [pc, #28]	; (8000f70 <LCD_ZeroPins+0x48>)
 8000f52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f56:	6153      	str	r3, [r2, #20]
	lcd_D4_GPIO_Port->ODR &= ~(1<<lcd_D4_bit);
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <LCD_ZeroPins+0x48>)
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <LCD_ZeroPins+0x48>)
 8000f5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f62:	6153      	str	r3, [r2, #20]
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	48000800 	.word	0x48000800

08000f74 <LCD_Clear_Display>:

void LCD_Clear_Display()
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
	LCD_Write_Instruction(lcd_instruction_ClearDisplay);
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f7ff fedd 	bl	8000d38 <LCD_Write_Instruction>
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <HAL_UART_RxCpltCallback>:
uint8_t measurement_mode = 0;

enum DisplayStates CurrentDisplayMode;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	message_received = 1;
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <HAL_UART_RxCpltCallback+0x1c>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	701a      	strb	r2, [r3, #0]
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	20000038 	.word	0x20000038

08000fa4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	80fb      	strh	r3, [r7, #6]
	last_ticks = HAL_GetTick();
 8000fae:	f001 fb1b 	bl	80025e8 <HAL_GetTick>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_GPIO_EXTI_Callback+0x68>)
 8000fb6:	601a      	str	r2, [r3, #0]
	if(GPIO_Pin == btn_mid_Pin)
 8000fb8:	88fb      	ldrh	r3, [r7, #6]
 8000fba:	2b40      	cmp	r3, #64	; 0x40
 8000fbc:	d103      	bne.n	8000fc6 <HAL_GPIO_EXTI_Callback+0x22>
	{
		btn_mid_flag = 1;
 8000fbe:	4b14      	ldr	r3, [pc, #80]	; (8001010 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	701a      	strb	r2, [r3, #0]
	}
	else if(GPIO_Pin == btn_down_Pin)
	{
		btn_down_flag = 1;
	}
}
 8000fc4:	e01d      	b.n	8001002 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_right_Pin)
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	2b80      	cmp	r3, #128	; 0x80
 8000fca:	d103      	bne.n	8000fd4 <HAL_GPIO_EXTI_Callback+0x30>
		btn_right_flag = 1;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <HAL_GPIO_EXTI_Callback+0x70>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	701a      	strb	r2, [r3, #0]
}
 8000fd2:	e016      	b.n	8001002 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_up_Pin)
 8000fd4:	88fb      	ldrh	r3, [r7, #6]
 8000fd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fda:	d103      	bne.n	8000fe4 <HAL_GPIO_EXTI_Callback+0x40>
		btn_up_flag = 1;
 8000fdc:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <HAL_GPIO_EXTI_Callback+0x74>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	701a      	strb	r2, [r3, #0]
}
 8000fe2:	e00e      	b.n	8001002 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_left_Pin)
 8000fe4:	88fb      	ldrh	r3, [r7, #6]
 8000fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fea:	d103      	bne.n	8000ff4 <HAL_GPIO_EXTI_Callback+0x50>
		btn_left_flag = 1;
 8000fec:	4b0b      	ldr	r3, [pc, #44]	; (800101c <HAL_GPIO_EXTI_Callback+0x78>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	701a      	strb	r2, [r3, #0]
}
 8000ff2:	e006      	b.n	8001002 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_down_Pin)
 8000ff4:	88fb      	ldrh	r3, [r7, #6]
 8000ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ffa:	d102      	bne.n	8001002 <HAL_GPIO_EXTI_Callback+0x5e>
		btn_down_flag = 1;
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	701a      	strb	r2, [r3, #0]
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000040 	.word	0x20000040
 8001010:	20000039 	.word	0x20000039
 8001014:	2000003a 	.word	0x2000003a
 8001018:	2000003b 	.word	0x2000003b
 800101c:	2000003c 	.word	0x2000003c
 8001020:	2000003d 	.word	0x2000003d

08001024 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	f6ad 0d08 	subw	sp, sp, #2056	; 0x808
 800102a:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint16_t raw;
	uint16_t millivolts;
	uint16_t adc_array[1000];
	uint16_t adc_count = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	f8a7 37fe 	strh.w	r3, [r7, #2046]	; 0x7fe
	uint8_t rx_bytes[10] = {0};
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	811a      	strh	r2, [r3, #8]
	uint8_t rx_bytes_counter = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	f887 37fd 	strb.w	r3, [r7, #2045]	; 0x7fd

	OutputState.TIM2_Clock = 72000000;
 8001042:	4bbb      	ldr	r3, [pc, #748]	; (8001330 <main+0x30c>)
 8001044:	4abb      	ldr	r2, [pc, #748]	; (8001334 <main+0x310>)
 8001046:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OutputState.On = false;
 800104a:	4bb9      	ldr	r3, [pc, #740]	; (8001330 <main+0x30c>)
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
	OutputState.Mode = d;
 8001052:	4bb7      	ldr	r3, [pc, #732]	; (8001330 <main+0x30c>)
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
	OutputState.Amplitude = 1000;
 800105a:	4bb5      	ldr	r3, [pc, #724]	; (8001330 <main+0x30c>)
 800105c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001060:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196
	OutputState.Offset = 1200;
 8001064:	4bb2      	ldr	r3, [pc, #712]	; (8001330 <main+0x30c>)
 8001066:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800106a:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
	OutputState.Frequency = 1000;
 800106e:	4bb0      	ldr	r3, [pc, #704]	; (8001330 <main+0x30c>)
 8001070:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001074:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
	OutputState.DCValue = 1000;
 8001078:	4bad      	ldr	r3, [pc, #692]	; (8001330 <main+0x30c>)
 800107a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800107e:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001082:	f001 fa57 	bl	8002534 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001086:	f000 fa0b 	bl	80014a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108a:	f000 fbcd 	bl	8001828 <MX_GPIO_Init>
  MX_DMA_Init();
 800108e:	f000 fbad 	bl	80017ec <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001092:	f000 fb7b 	bl	800178c <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8001096:	f000 fb53 	bl	8001740 <MX_TIM16_Init>
  MX_ADC1_Init();
 800109a:	f000 fa69 	bl	8001570 <MX_ADC1_Init>
  MX_DAC1_Init();
 800109e:	f000 fad7 	bl	8001650 <MX_DAC1_Init>
  MX_TIM2_Init();
 80010a2:	f000 faff 	bl	80016a4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	// Init
	HAL_UART_Transmit(&huart2, std_num, 13, 10);
 80010a6:	230a      	movs	r3, #10
 80010a8:	220d      	movs	r2, #13
 80010aa:	49a3      	ldr	r1, [pc, #652]	; (8001338 <main+0x314>)
 80010ac:	48a3      	ldr	r0, [pc, #652]	; (800133c <main+0x318>)
 80010ae:	f005 fc39 	bl	8006924 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 80010b2:	2201      	movs	r2, #1
 80010b4:	49a2      	ldr	r1, [pc, #648]	; (8001340 <main+0x31c>)
 80010b6:	48a1      	ldr	r0, [pc, #644]	; (800133c <main+0x318>)
 80010b8:	f005 fcc8 	bl	8006a4c <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim16);
 80010bc:	48a1      	ldr	r0, [pc, #644]	; (8001344 <main+0x320>)
 80010be:	f004 ff8b 	bl	8005fd8 <HAL_TIM_Base_Start_IT>

	LCD_Init();
 80010c2:	f7ff fdbb 	bl	8000c3c <LCD_Init>

	// Init Display State
	changeDisplayState(Menu);
 80010c6:	2000      	movs	r0, #0
 80010c8:	f000 fcc0 	bl	8001a4c <changeDisplayState>

	DAC_Calculate_Sine_Buffer();
 80010cc:	f7ff fd24 	bl	8000b18 <DAC_Calculate_Sine_Buffer>
	DAC_Set_Output_Frequency();
 80010d0:	f7ff fd82 	bl	8000bd8 <DAC_Set_Output_Frequency>
	HAL_TIM_Base_Start(&htim2);
 80010d4:	489c      	ldr	r0, [pc, #624]	; (8001348 <main+0x324>)
 80010d6:	f004 ff17 	bl	8005f08 <HAL_TIM_Base_Start>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, OutputState.SineBuffer, 100, DAC_ALIGN_12B_R);
 80010da:	2300      	movs	r3, #0
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2364      	movs	r3, #100	; 0x64
 80010e0:	4a93      	ldr	r2, [pc, #588]	; (8001330 <main+0x30c>)
 80010e2:	2100      	movs	r1, #0
 80010e4:	4899      	ldr	r0, [pc, #612]	; (800134c <main+0x328>)
 80010e6:	f002 fdb1 	bl	8003c4c <HAL_DAC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(message_received && rx_byte[0] != '\n')
 80010ea:	4b99      	ldr	r3, [pc, #612]	; (8001350 <main+0x32c>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d03a      	beq.n	8001168 <main+0x144>
 80010f2:	4b93      	ldr	r3, [pc, #588]	; (8001340 <main+0x31c>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b0a      	cmp	r3, #10
 80010f8:	d036      	beq.n	8001168 <main+0x144>
	  {
		  rx_bytes[rx_bytes_counter] = rx_byte[0];
 80010fa:	f897 37fd 	ldrb.w	r3, [r7, #2045]	; 0x7fd
 80010fe:	4a90      	ldr	r2, [pc, #576]	; (8001340 <main+0x31c>)
 8001100:	7811      	ldrb	r1, [r2, #0]
 8001102:	1d3a      	adds	r2, r7, #4
 8001104:	54d1      	strb	r1, [r2, r3]
		  if(rx_bytes_counter == 0 && rx_byte[0] == '@'){
 8001106:	f897 37fd 	ldrb.w	r3, [r7, #2045]	; 0x7fd
 800110a:	2b00      	cmp	r3, #0
 800110c:	d109      	bne.n	8001122 <main+0xfe>
 800110e:	4b8c      	ldr	r3, [pc, #560]	; (8001340 <main+0x31c>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b40      	cmp	r3, #64	; 0x40
 8001114:	d105      	bne.n	8001122 <main+0xfe>
			  rx_bytes_counter++;
 8001116:	f897 37fd 	ldrb.w	r3, [r7, #2045]	; 0x7fd
 800111a:	3301      	adds	r3, #1
 800111c:	f887 37fd 	strb.w	r3, [r7, #2045]	; 0x7fd
 8001120:	e01a      	b.n	8001158 <main+0x134>
		  } else if(rx_bytes_counter > 0){
 8001122:	f897 37fd 	ldrb.w	r3, [r7, #2045]	; 0x7fd
 8001126:	2b00      	cmp	r3, #0
 8001128:	d016      	beq.n	8001158 <main+0x134>
			  rx_bytes_counter++;
 800112a:	f897 37fd 	ldrb.w	r3, [r7, #2045]	; 0x7fd
 800112e:	3301      	adds	r3, #1
 8001130:	f887 37fd 	strb.w	r3, [r7, #2045]	; 0x7fd
			  if(uartRxComplete(rx_byte[0]))
 8001134:	4b82      	ldr	r3, [pc, #520]	; (8001340 <main+0x31c>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f000 fd0f 	bl	8001b5c <uartRxComplete>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d009      	beq.n	8001158 <main+0x134>
			  {
				  interpret_rx_message(rx_bytes, rx_bytes_counter);
 8001144:	f897 27fd 	ldrb.w	r2, [r7, #2045]	; 0x7fd
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f000 fd17 	bl	8001b80 <interpret_rx_message>
				  rx_bytes_counter = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	f887 37fd 	strb.w	r3, [r7, #2045]	; 0x7fd
			  }
		  }
		  HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 8001158:	2201      	movs	r2, #1
 800115a:	4979      	ldr	r1, [pc, #484]	; (8001340 <main+0x31c>)
 800115c:	4877      	ldr	r0, [pc, #476]	; (800133c <main+0x318>)
 800115e:	f005 fc75 	bl	8006a4c <HAL_UART_Receive_IT>
		  message_received = 0;
 8001162:	4b7b      	ldr	r3, [pc, #492]	; (8001350 <main+0x32c>)
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
	  }
	  if(btn_up_flag)
 8001168:	4b7a      	ldr	r3, [pc, #488]	; (8001354 <main+0x330>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d010      	beq.n	8001192 <main+0x16e>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 8001170:	f001 fa3a 	bl	80025e8 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	4b78      	ldr	r3, [pc, #480]	; (8001358 <main+0x334>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b36      	cmp	r3, #54	; 0x36
 800117e:	d96d      	bls.n	800125c <main+0x238>
		  {
			  if(HAL_GPIO_ReadPin(btn_up_GPIO_Port, btn_up_Pin))
 8001180:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001184:	4875      	ldr	r0, [pc, #468]	; (800135c <main+0x338>)
 8001186:	f003 fa9b 	bl	80046c0 <HAL_GPIO_ReadPin>
			  {
//				  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
			  }
			  btn_up_flag = 0;
 800118a:	4b72      	ldr	r3, [pc, #456]	; (8001354 <main+0x330>)
 800118c:	2200      	movs	r2, #0
 800118e:	701a      	strb	r2, [r3, #0]
 8001190:	e064      	b.n	800125c <main+0x238>
		  }
	  }
	  else if(btn_left_flag)
 8001192:	4b73      	ldr	r3, [pc, #460]	; (8001360 <main+0x33c>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d010      	beq.n	80011bc <main+0x198>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 800119a:	f001 fa25 	bl	80025e8 <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	4b6d      	ldr	r3, [pc, #436]	; (8001358 <main+0x334>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b36      	cmp	r3, #54	; 0x36
 80011a8:	d958      	bls.n	800125c <main+0x238>
		  {
			  if(HAL_GPIO_ReadPin(btn_left_GPIO_Port, btn_left_Pin))
 80011aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ae:	486b      	ldr	r0, [pc, #428]	; (800135c <main+0x338>)
 80011b0:	f003 fa86 	bl	80046c0 <HAL_GPIO_ReadPin>
			  {
//				  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
			  }
			  btn_left_flag = 0;
 80011b4:	4b6a      	ldr	r3, [pc, #424]	; (8001360 <main+0x33c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
 80011ba:	e04f      	b.n	800125c <main+0x238>
		  }
	  }
	  else if(btn_down_flag)
 80011bc:	4b69      	ldr	r3, [pc, #420]	; (8001364 <main+0x340>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d010      	beq.n	80011e6 <main+0x1c2>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 80011c4:	f001 fa10 	bl	80025e8 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	4b63      	ldr	r3, [pc, #396]	; (8001358 <main+0x334>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b36      	cmp	r3, #54	; 0x36
 80011d2:	d943      	bls.n	800125c <main+0x238>
		  {
			  if(HAL_GPIO_ReadPin(btn_down_GPIO_Port, btn_down_Pin))
 80011d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011d8:	4860      	ldr	r0, [pc, #384]	; (800135c <main+0x338>)
 80011da:	f003 fa71 	bl	80046c0 <HAL_GPIO_ReadPin>
			  {
//				  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
			  }
			  btn_down_flag = 0;
 80011de:	4b61      	ldr	r3, [pc, #388]	; (8001364 <main+0x340>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
 80011e4:	e03a      	b.n	800125c <main+0x238>
		  }
	  }
	  else if(btn_right_flag)
 80011e6:	4b60      	ldr	r3, [pc, #384]	; (8001368 <main+0x344>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d010      	beq.n	8001210 <main+0x1ec>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 80011ee:	f001 f9fb 	bl	80025e8 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	4b58      	ldr	r3, [pc, #352]	; (8001358 <main+0x334>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b36      	cmp	r3, #54	; 0x36
 80011fc:	d92e      	bls.n	800125c <main+0x238>
		  {
			  if(HAL_GPIO_ReadPin(btn_right_GPIO_Port, btn_right_Pin))
 80011fe:	2180      	movs	r1, #128	; 0x80
 8001200:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001204:	f003 fa5c 	bl	80046c0 <HAL_GPIO_ReadPin>
			  {
//				  HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
			  }
			  btn_right_flag = 0;
 8001208:	4b57      	ldr	r3, [pc, #348]	; (8001368 <main+0x344>)
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]
 800120e:	e025      	b.n	800125c <main+0x238>
		  }
	  }
	  else if(btn_mid_flag)
 8001210:	4b56      	ldr	r3, [pc, #344]	; (800136c <main+0x348>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d021      	beq.n	800125c <main+0x238>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 8001218:	f001 f9e6 	bl	80025e8 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	4b4e      	ldr	r3, [pc, #312]	; (8001358 <main+0x334>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b36      	cmp	r3, #54	; 0x36
 8001226:	d919      	bls.n	800125c <main+0x238>
		  {
			  if(HAL_GPIO_ReadPin(btn_mid_GPIO_Port, btn_mid_Pin))
 8001228:	2140      	movs	r1, #64	; 0x40
 800122a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122e:	f003 fa47 	bl	80046c0 <HAL_GPIO_ReadPin>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d00e      	beq.n	8001256 <main+0x232>
			  {
				  // Toggle Menu Display state
				  if(CurrentDisplayMode == Menu){
 8001238:	4b4d      	ldr	r3, [pc, #308]	; (8001370 <main+0x34c>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d103      	bne.n	8001248 <main+0x224>
//					  DisplayMode = Measurement;
					  changeDisplayState(Measurement);
 8001240:	2001      	movs	r0, #1
 8001242:	f000 fc03 	bl	8001a4c <changeDisplayState>
 8001246:	e006      	b.n	8001256 <main+0x232>
				  } else if(CurrentDisplayMode == Measurement){
 8001248:	4b49      	ldr	r3, [pc, #292]	; (8001370 <main+0x34c>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d102      	bne.n	8001256 <main+0x232>
//					  DisplayMode = Menu;
					  changeDisplayState(Menu);
 8001250:	2000      	movs	r0, #0
 8001252:	f000 fbfb 	bl	8001a4c <changeDisplayState>
				  }
			  }
			  btn_mid_flag = 0;
 8001256:	4b45      	ldr	r3, [pc, #276]	; (800136c <main+0x348>)
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  // ADC TIM16 interrupt
	  if(adc_timer_flag)
 800125c:	4b45      	ldr	r3, [pc, #276]	; (8001374 <main+0x350>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	f43f af42 	beq.w	80010ea <main+0xc6>
	  {
		  if(adc_count > 999)
 8001266:	f8b7 37fe 	ldrh.w	r3, [r7, #2046]	; 0x7fe
 800126a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800126e:	f0c0 80be 	bcc.w	80013ee <main+0x3ca>
		  {
			  // Do calculations every 1000 readings
			  adc_count = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	f8a7 37fe 	strh.w	r3, [r7, #2046]	; 0x7fe
			  uint32_t total = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	f8c7 37f8 	str.w	r3, [r7, #2040]	; 0x7f8
			  uint16_t max = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	f8a7 37f6 	strh.w	r3, [r7, #2038]	; 0x7f6
			  uint16_t min = adc_array[99]; // arbitrary value
 8001284:	f107 0310 	add.w	r3, r7, #16
 8001288:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 800128c:	f8a7 37f4 	strh.w	r3, [r7, #2036]	; 0x7f4
			  int16_t diff = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	f8a7 37e2 	strh.w	r3, [r7, #2018]	; 0x7e2
			  int16_t prev_diff = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	f8a7 37f2 	strh.w	r3, [r7, #2034]	; 0x7f2
			  uint16_t mid_passes = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	f8a7 37f0 	strh.w	r3, [r7, #2032]	; 0x7f0
			  // 1000 measurements at 5kHz take 200ms
			  for(int x = 0; x < 1000; x++)
 80012a2:	2300      	movs	r3, #0
 80012a4:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
 80012a8:	e035      	b.n	8001316 <main+0x2f2>
			  {
				  total += adc_array[x];
 80012aa:	f107 0310 	add.w	r3, r7, #16
 80012ae:	f8d7 27ec 	ldr.w	r2, [r7, #2028]	; 0x7ec
 80012b2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80012b6:	461a      	mov	r2, r3
 80012b8:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	; 0x7f8
 80012bc:	4413      	add	r3, r2
 80012be:	f8c7 37f8 	str.w	r3, [r7, #2040]	; 0x7f8
				  if(adc_array[x] > max)
 80012c2:	f107 0310 	add.w	r3, r7, #16
 80012c6:	f8d7 27ec 	ldr.w	r2, [r7, #2028]	; 0x7ec
 80012ca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80012ce:	f8b7 27f6 	ldrh.w	r2, [r7, #2038]	; 0x7f6
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d208      	bcs.n	80012e8 <main+0x2c4>
				  {
					  max = adc_array[x];
 80012d6:	f107 0310 	add.w	r3, r7, #16
 80012da:	f8d7 27ec 	ldr.w	r2, [r7, #2028]	; 0x7ec
 80012de:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80012e2:	f8a7 37f6 	strh.w	r3, [r7, #2038]	; 0x7f6
 80012e6:	e011      	b.n	800130c <main+0x2e8>
				  }
				  else if(adc_array[x] < min)
 80012e8:	f107 0310 	add.w	r3, r7, #16
 80012ec:	f8d7 27ec 	ldr.w	r2, [r7, #2028]	; 0x7ec
 80012f0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80012f4:	f8b7 27f4 	ldrh.w	r2, [r7, #2036]	; 0x7f4
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d907      	bls.n	800130c <main+0x2e8>
				  {
					  min = adc_array[x];
 80012fc:	f107 0310 	add.w	r3, r7, #16
 8001300:	f8d7 27ec 	ldr.w	r2, [r7, #2028]	; 0x7ec
 8001304:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001308:	f8a7 37f4 	strh.w	r3, [r7, #2036]	; 0x7f4
			  for(int x = 0; x < 1000; x++)
 800130c:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 8001310:	3301      	adds	r3, #1
 8001312:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
 8001316:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 800131a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800131e:	dbc4      	blt.n	80012aa <main+0x286>
				  }
			  }
//			  measured_offset = total/1000;
			  measured_offset = 1000;
 8001320:	4b15      	ldr	r3, [pc, #84]	; (8001378 <main+0x354>)
 8001322:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001326:	801a      	strh	r2, [r3, #0]
			  for(int x = 0; x < 1000; x++)
 8001328:	2300      	movs	r3, #0
 800132a:	f8c7 37e8 	str.w	r3, [r7, #2024]	; 0x7e8
 800132e:	e047      	b.n	80013c0 <main+0x39c>
 8001330:	20000050 	.word	0x20000050
 8001334:	044aa200 	.word	0x044aa200
 8001338:	20000000 	.word	0x20000000
 800133c:	200002f0 	.word	0x200002f0
 8001340:	200002a0 	.word	0x200002a0
 8001344:	20000374 	.word	0x20000374
 8001348:	200002a4 	.word	0x200002a4
 800134c:	200001f4 	.word	0x200001f4
 8001350:	20000038 	.word	0x20000038
 8001354:	2000003b 	.word	0x2000003b
 8001358:	20000040 	.word	0x20000040
 800135c:	48000400 	.word	0x48000400
 8001360:	2000003c 	.word	0x2000003c
 8001364:	2000003d 	.word	0x2000003d
 8001368:	2000003a 	.word	0x2000003a
 800136c:	20000039 	.word	0x20000039
 8001370:	20000208 	.word	0x20000208
 8001374:	2000003e 	.word	0x2000003e
 8001378:	2000004a 	.word	0x2000004a
			  {
				  // Calculate frequency
				  diff = adc_array[x] - measured_offset;
 800137c:	f107 0310 	add.w	r3, r7, #16
 8001380:	f8d7 27e8 	ldr.w	r2, [r7, #2024]	; 0x7e8
 8001384:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001388:	4b3c      	ldr	r3, [pc, #240]	; (800147c <main+0x458>)
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	b29b      	uxth	r3, r3
 8001390:	f8a7 37e2 	strh.w	r3, [r7, #2018]	; 0x7e2
				  if(diff > 0 && prev_diff < 0)
 8001394:	f9b7 37e2 	ldrsh.w	r3, [r7, #2018]	; 0x7e2
 8001398:	2b00      	cmp	r3, #0
 800139a:	dd08      	ble.n	80013ae <main+0x38a>
 800139c:	f9b7 37f2 	ldrsh.w	r3, [r7, #2034]	; 0x7f2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	da04      	bge.n	80013ae <main+0x38a>
				  {
					  mid_passes++;
 80013a4:	f8b7 37f0 	ldrh.w	r3, [r7, #2032]	; 0x7f0
 80013a8:	3301      	adds	r3, #1
 80013aa:	f8a7 37f0 	strh.w	r3, [r7, #2032]	; 0x7f0
				  }
				  prev_diff = diff;
 80013ae:	f8b7 37e2 	ldrh.w	r3, [r7, #2018]	; 0x7e2
 80013b2:	f8a7 37f2 	strh.w	r3, [r7, #2034]	; 0x7f2
			  for(int x = 0; x < 1000; x++)
 80013b6:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 80013ba:	3301      	adds	r3, #1
 80013bc:	f8c7 37e8 	str.w	r3, [r7, #2024]	; 0x7e8
 80013c0:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 80013c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013c8:	dbd8      	blt.n	800137c <main+0x358>
			  }
			  measured_period = 50000/(mid_passes);
 80013ca:	f8b7 37f0 	ldrh.w	r3, [r7, #2032]	; 0x7f0
 80013ce:	f24c 3250 	movw	r2, #50000	; 0xc350
 80013d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	4b29      	ldr	r3, [pc, #164]	; (8001480 <main+0x45c>)
 80013da:	801a      	strh	r2, [r3, #0]
//			  measured_frequency = 1000000/measured_period;
			  measured_frequency = 5250;
 80013dc:	4b29      	ldr	r3, [pc, #164]	; (8001484 <main+0x460>)
 80013de:	f241 4282 	movw	r2, #5250	; 0x1482
 80013e2:	801a      	strh	r2, [r3, #0]
//			  measured_amplitude = max - min;
			  measured_amplitude = 500;
 80013e4:	4b28      	ldr	r3, [pc, #160]	; (8001488 <main+0x464>)
 80013e6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80013ea:	801a      	strh	r2, [r3, #0]
 80013ec:	e03d      	b.n	800146a <main+0x446>
//			  sprintf(msg, "Max: %u\nMin: %u\nOffset: %u\nFrequency: %u\nAmplitude: %u\n\n", max, min, offset, frequency, amplitude);
//			  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 10);
		  }
		  else
		  {
			  HAL_ADC_Start(&hadc1);
 80013ee:	4827      	ldr	r0, [pc, #156]	; (800148c <main+0x468>)
 80013f0:	f001 fb22 	bl	8002a38 <HAL_ADC_Start>
			  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80013f4:	f04f 31ff 	mov.w	r1, #4294967295
 80013f8:	4824      	ldr	r0, [pc, #144]	; (800148c <main+0x468>)
 80013fa:	f001 fc69 	bl	8002cd0 <HAL_ADC_PollForConversion>
			  raw = HAL_ADC_GetValue(&hadc1);
 80013fe:	4823      	ldr	r0, [pc, #140]	; (800148c <main+0x468>)
 8001400:	f001 fd68 	bl	8002ed4 <HAL_ADC_GetValue>
 8001404:	4603      	mov	r3, r0
 8001406:	f8a7 37e6 	strh.w	r3, [r7, #2022]	; 0x7e6
			  HAL_ADC_Stop(&hadc1);
 800140a:	4820      	ldr	r0, [pc, #128]	; (800148c <main+0x468>)
 800140c:	f001 fc2a 	bl	8002c64 <HAL_ADC_Stop>
			  millivolts = raw*3300/4095;
 8001410:	f8b7 37e6 	ldrh.w	r3, [r7, #2022]	; 0x7e6
 8001414:	f640 42e4 	movw	r2, #3300	; 0xce4
 8001418:	fb02 f303 	mul.w	r3, r2, r3
 800141c:	4a1c      	ldr	r2, [pc, #112]	; (8001490 <main+0x46c>)
 800141e:	fb82 1203 	smull	r1, r2, r2, r3
 8001422:	441a      	add	r2, r3
 8001424:	12d2      	asrs	r2, r2, #11
 8001426:	17db      	asrs	r3, r3, #31
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	f8a7 37e4 	strh.w	r3, [r7, #2020]	; 0x7e4
			  millivolts += 100*millivolts/1000; // Calibration
 800142e:	f8b7 37e4 	ldrh.w	r3, [r7, #2020]	; 0x7e4
 8001432:	2264      	movs	r2, #100	; 0x64
 8001434:	fb02 f303 	mul.w	r3, r2, r3
 8001438:	4a16      	ldr	r2, [pc, #88]	; (8001494 <main+0x470>)
 800143a:	fb82 1203 	smull	r1, r2, r2, r3
 800143e:	1192      	asrs	r2, r2, #6
 8001440:	17db      	asrs	r3, r3, #31
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	b29a      	uxth	r2, r3
 8001446:	f8b7 37e4 	ldrh.w	r3, [r7, #2020]	; 0x7e4
 800144a:	4413      	add	r3, r2
 800144c:	f8a7 37e4 	strh.w	r3, [r7, #2020]	; 0x7e4
			  adc_array[adc_count] = millivolts;
 8001450:	f8b7 27fe 	ldrh.w	r2, [r7, #2046]	; 0x7fe
 8001454:	f107 0310 	add.w	r3, r7, #16
 8001458:	f8b7 17e4 	ldrh.w	r1, [r7, #2020]	; 0x7e4
 800145c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			  adc_count++;
 8001460:	f8b7 37fe 	ldrh.w	r3, [r7, #2046]	; 0x7fe
 8001464:	3301      	adds	r3, #1
 8001466:	f8a7 37fe 	strh.w	r3, [r7, #2046]	; 0x7fe
		  }

		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 800146a:	2110      	movs	r1, #16
 800146c:	480a      	ldr	r0, [pc, #40]	; (8001498 <main+0x474>)
 800146e:	f003 f957 	bl	8004720 <HAL_GPIO_TogglePin>
		  adc_timer_flag = 0;
 8001472:	4b0a      	ldr	r3, [pc, #40]	; (800149c <main+0x478>)
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
	  if(message_received && rx_byte[0] != '\n')
 8001478:	e637      	b.n	80010ea <main+0xc6>
 800147a:	bf00      	nop
 800147c:	2000004a 	.word	0x2000004a
 8001480:	20000048 	.word	0x20000048
 8001484:	20000046 	.word	0x20000046
 8001488:	20000044 	.word	0x20000044
 800148c:	20000250 	.word	0x20000250
 8001490:	80080081 	.word	0x80080081
 8001494:	10624dd3 	.word	0x10624dd3
 8001498:	48000800 	.word	0x48000800
 800149c:	2000003e 	.word	0x2000003e

080014a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b0a6      	sub	sp, #152	; 0x98
 80014a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80014aa:	2228      	movs	r2, #40	; 0x28
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f006 fc78 	bl	8007da4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	2258      	movs	r2, #88	; 0x58
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f006 fc6a 	bl	8007da4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014d0:	2302      	movs	r3, #2
 80014d2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014d4:	2301      	movs	r3, #1
 80014d6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014d8:	2310      	movs	r3, #16
 80014da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014de:	2302      	movs	r3, #2
 80014e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014ec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80014f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80014fe:	4618      	mov	r0, r3
 8001500:	f003 f940 	bl	8004784 <HAL_RCC_OscConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800150a:	f000 fdff 	bl	800210c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800150e:	230f      	movs	r3, #15
 8001510:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001512:	2302      	movs	r3, #2
 8001514:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001516:	2300      	movs	r3, #0
 8001518:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800151a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800151e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001520:	2300      	movs	r3, #0
 8001522:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001524:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001528:	2102      	movs	r1, #2
 800152a:	4618      	mov	r0, r3
 800152c:	f004 f840 	bl	80055b0 <HAL_RCC_ClockConfig>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001536:	f000 fde9 	bl	800210c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM16
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <SystemClock_Config+0xcc>)
 800153c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001542:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8001548:	2300      	movs	r3, #0
 800154a:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 800154c:	2300      	movs	r3, #0
 800154e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	4618      	mov	r0, r3
 8001554:	f004 fa62 	bl	8005a1c <HAL_RCCEx_PeriphCLKConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800155e:	f000 fdd5 	bl	800210c <Error_Handler>
  }
}
 8001562:	bf00      	nop
 8001564:	3798      	adds	r7, #152	; 0x98
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	00900082 	.word	0x00900082

08001570 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	; 0x28
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001576:	f107 031c 	add.w	r3, r7, #28
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
 8001590:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001592:	4b2e      	ldr	r3, [pc, #184]	; (800164c <MX_ADC1_Init+0xdc>)
 8001594:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001598:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800159a:	4b2c      	ldr	r3, [pc, #176]	; (800164c <MX_ADC1_Init+0xdc>)
 800159c:	2200      	movs	r2, #0
 800159e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015a0:	4b2a      	ldr	r3, [pc, #168]	; (800164c <MX_ADC1_Init+0xdc>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015a6:	4b29      	ldr	r3, [pc, #164]	; (800164c <MX_ADC1_Init+0xdc>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015ac:	4b27      	ldr	r3, [pc, #156]	; (800164c <MX_ADC1_Init+0xdc>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015b2:	4b26      	ldr	r3, [pc, #152]	; (800164c <MX_ADC1_Init+0xdc>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015ba:	4b24      	ldr	r3, [pc, #144]	; (800164c <MX_ADC1_Init+0xdc>)
 80015bc:	2200      	movs	r2, #0
 80015be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015c0:	4b22      	ldr	r3, [pc, #136]	; (800164c <MX_ADC1_Init+0xdc>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015c6:	4b21      	ldr	r3, [pc, #132]	; (800164c <MX_ADC1_Init+0xdc>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015cc:	4b1f      	ldr	r3, [pc, #124]	; (800164c <MX_ADC1_Init+0xdc>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015d2:	4b1e      	ldr	r3, [pc, #120]	; (800164c <MX_ADC1_Init+0xdc>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015da:	4b1c      	ldr	r3, [pc, #112]	; (800164c <MX_ADC1_Init+0xdc>)
 80015dc:	2204      	movs	r2, #4
 80015de:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80015e0:	4b1a      	ldr	r3, [pc, #104]	; (800164c <MX_ADC1_Init+0xdc>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80015e6:	4b19      	ldr	r3, [pc, #100]	; (800164c <MX_ADC1_Init+0xdc>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015ec:	4817      	ldr	r0, [pc, #92]	; (800164c <MX_ADC1_Init+0xdc>)
 80015ee:	f001 f829 	bl	8002644 <HAL_ADC_Init>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80015f8:	f000 fd88 	bl	800210c <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001600:	f107 031c 	add.w	r3, r7, #28
 8001604:	4619      	mov	r1, r3
 8001606:	4811      	ldr	r0, [pc, #68]	; (800164c <MX_ADC1_Init+0xdc>)
 8001608:	f001 ff5e 	bl	80034c8 <HAL_ADCEx_MultiModeConfigChannel>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001612:	f000 fd7b 	bl	800210c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001616:	2301      	movs	r3, #1
 8001618:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800161a:	2301      	movs	r3, #1
 800161c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	4619      	mov	r1, r3
 8001632:	4806      	ldr	r0, [pc, #24]	; (800164c <MX_ADC1_Init+0xdc>)
 8001634:	f001 fc5c 	bl	8002ef0 <HAL_ADC_ConfigChannel>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800163e:	f000 fd65 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001642:	bf00      	nop
 8001644:	3728      	adds	r7, #40	; 0x28
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000250 	.word	0x20000250

08001650 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8001660:	4b0e      	ldr	r3, [pc, #56]	; (800169c <MX_DAC1_Init+0x4c>)
 8001662:	4a0f      	ldr	r2, [pc, #60]	; (80016a0 <MX_DAC1_Init+0x50>)
 8001664:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001666:	480d      	ldr	r0, [pc, #52]	; (800169c <MX_DAC1_Init+0x4c>)
 8001668:	f002 faaf 	bl	8003bca <HAL_DAC_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8001672:	f000 fd4b 	bl	800210c <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001676:	2324      	movs	r3, #36	; 0x24
 8001678:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	2200      	movs	r2, #0
 8001682:	4619      	mov	r1, r3
 8001684:	4805      	ldr	r0, [pc, #20]	; (800169c <MX_DAC1_Init+0x4c>)
 8001686:	f002 fb8f 	bl	8003da8 <HAL_DAC_ConfigChannel>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8001690:	f000 fd3c 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001694:	bf00      	nop
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	200001f4 	.word	0x200001f4
 80016a0:	40007400 	.word	0x40007400

080016a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016aa:	f107 0310 	add.w	r3, r7, #16
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016c2:	4b1e      	ldr	r3, [pc, #120]	; (800173c <MX_TIM2_Init+0x98>)
 80016c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016ca:	4b1c      	ldr	r3, [pc, #112]	; (800173c <MX_TIM2_Init+0x98>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d0:	4b1a      	ldr	r3, [pc, #104]	; (800173c <MX_TIM2_Init+0x98>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80016d6:	4b19      	ldr	r3, [pc, #100]	; (800173c <MX_TIM2_Init+0x98>)
 80016d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016de:	4b17      	ldr	r3, [pc, #92]	; (800173c <MX_TIM2_Init+0x98>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e4:	4b15      	ldr	r3, [pc, #84]	; (800173c <MX_TIM2_Init+0x98>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016ea:	4814      	ldr	r0, [pc, #80]	; (800173c <MX_TIM2_Init+0x98>)
 80016ec:	f004 fbb4 	bl	8005e58 <HAL_TIM_Base_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80016f6:	f000 fd09 	bl	800210c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001700:	f107 0310 	add.w	r3, r7, #16
 8001704:	4619      	mov	r1, r3
 8001706:	480d      	ldr	r0, [pc, #52]	; (800173c <MX_TIM2_Init+0x98>)
 8001708:	f004 fdf5 	bl	80062f6 <HAL_TIM_ConfigClockSource>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001712:	f000 fcfb 	bl	800210c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001716:	2320      	movs	r3, #32
 8001718:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	4619      	mov	r1, r3
 8001722:	4806      	ldr	r0, [pc, #24]	; (800173c <MX_TIM2_Init+0x98>)
 8001724:	f005 f806 	bl	8006734 <HAL_TIMEx_MasterConfigSynchronization>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800172e:	f000 fced 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001732:	bf00      	nop
 8001734:	3720      	adds	r7, #32
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	200002a4 	.word	0x200002a4

08001740 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001744:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <MX_TIM16_Init+0x44>)
 8001746:	4a10      	ldr	r2, [pc, #64]	; (8001788 <MX_TIM16_Init+0x48>)
 8001748:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 72-1;
 800174a:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <MX_TIM16_Init+0x44>)
 800174c:	2247      	movs	r2, #71	; 0x47
 800174e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <MX_TIM16_Init+0x44>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 50 - 1;
 8001756:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <MX_TIM16_Init+0x44>)
 8001758:	2231      	movs	r2, #49	; 0x31
 800175a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800175c:	4b09      	ldr	r3, [pc, #36]	; (8001784 <MX_TIM16_Init+0x44>)
 800175e:	2200      	movs	r2, #0
 8001760:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001762:	4b08      	ldr	r3, [pc, #32]	; (8001784 <MX_TIM16_Init+0x44>)
 8001764:	2200      	movs	r2, #0
 8001766:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <MX_TIM16_Init+0x44>)
 800176a:	2200      	movs	r2, #0
 800176c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800176e:	4805      	ldr	r0, [pc, #20]	; (8001784 <MX_TIM16_Init+0x44>)
 8001770:	f004 fb72 	bl	8005e58 <HAL_TIM_Base_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800177a:	f000 fcc7 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000374 	.word	0x20000374
 8001788:	40014400 	.word	0x40014400

0800178c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001790:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <MX_USART2_UART_Init+0x58>)
 8001792:	4a15      	ldr	r2, [pc, #84]	; (80017e8 <MX_USART2_UART_Init+0x5c>)
 8001794:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001796:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <MX_USART2_UART_Init+0x58>)
 8001798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800179c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800179e:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <MX_USART2_UART_Init+0x58>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017a4:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <MX_USART2_UART_Init+0x58>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017aa:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <MX_USART2_UART_Init+0x58>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017b0:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <MX_USART2_UART_Init+0x58>)
 80017b2:	220c      	movs	r2, #12
 80017b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017b6:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <MX_USART2_UART_Init+0x58>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017bc:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <MX_USART2_UART_Init+0x58>)
 80017be:	2200      	movs	r2, #0
 80017c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017c2:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <MX_USART2_UART_Init+0x58>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <MX_USART2_UART_Init+0x58>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017ce:	4805      	ldr	r0, [pc, #20]	; (80017e4 <MX_USART2_UART_Init+0x58>)
 80017d0:	f005 f85a 	bl	8006888 <HAL_UART_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017da:	f000 fc97 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200002f0 	.word	0x200002f0
 80017e8:	40004400 	.word	0x40004400

080017ec <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017f2:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <MX_DMA_Init+0x38>)
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	4a0b      	ldr	r2, [pc, #44]	; (8001824 <MX_DMA_Init+0x38>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6153      	str	r3, [r2, #20]
 80017fe:	4b09      	ldr	r3, [pc, #36]	; (8001824 <MX_DMA_Init+0x38>)
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2100      	movs	r1, #0
 800180e:	200d      	movs	r0, #13
 8001810:	f002 f9a5 	bl	8003b5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001814:	200d      	movs	r0, #13
 8001816:	f002 f9be 	bl	8003b96 <HAL_NVIC_EnableIRQ>

}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40021000 	.word	0x40021000

08001828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	; 0x28
 800182c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
 800183c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800183e:	4b75      	ldr	r3, [pc, #468]	; (8001a14 <MX_GPIO_Init+0x1ec>)
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	4a74      	ldr	r2, [pc, #464]	; (8001a14 <MX_GPIO_Init+0x1ec>)
 8001844:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001848:	6153      	str	r3, [r2, #20]
 800184a:	4b72      	ldr	r3, [pc, #456]	; (8001a14 <MX_GPIO_Init+0x1ec>)
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001856:	4b6f      	ldr	r3, [pc, #444]	; (8001a14 <MX_GPIO_Init+0x1ec>)
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	4a6e      	ldr	r2, [pc, #440]	; (8001a14 <MX_GPIO_Init+0x1ec>)
 800185c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001860:	6153      	str	r3, [r2, #20]
 8001862:	4b6c      	ldr	r3, [pc, #432]	; (8001a14 <MX_GPIO_Init+0x1ec>)
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	4b69      	ldr	r3, [pc, #420]	; (8001a14 <MX_GPIO_Init+0x1ec>)
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	4a68      	ldr	r2, [pc, #416]	; (8001a14 <MX_GPIO_Init+0x1ec>)
 8001874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001878:	6153      	str	r3, [r2, #20]
 800187a:	4b66      	ldr	r3, [pc, #408]	; (8001a14 <MX_GPIO_Init+0x1ec>)
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001886:	4b63      	ldr	r3, [pc, #396]	; (8001a14 <MX_GPIO_Init+0x1ec>)
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	4a62      	ldr	r2, [pc, #392]	; (8001a14 <MX_GPIO_Init+0x1ec>)
 800188c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001890:	6153      	str	r3, [r2, #20]
 8001892:	4b60      	ldr	r3, [pc, #384]	; (8001a14 <MX_GPIO_Init+0x1ec>)
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD5_Pin|LD4_Pin|lcd_D6_Pin 
 800189e:	2200      	movs	r2, #0
 80018a0:	f44f 51f1 	mov.w	r1, #7712	; 0x1e20
 80018a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a8:	f002 ff22 	bl	80046f0 <HAL_GPIO_WritePin>
                          |lcd_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|lcd_D4_Pin|LD3_Pin|lcd_D5_Pin, GPIO_PIN_RESET);
 80018ac:	2200      	movs	r2, #0
 80018ae:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80018b2:	4859      	ldr	r0, [pc, #356]	; (8001a18 <MX_GPIO_Init+0x1f0>)
 80018b4:	f002 ff1c 	bl	80046f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, lcd_blown_Pin|lcd_RS_Pin|lcd_E_Pin, GPIO_PIN_RESET);
 80018b8:	2200      	movs	r2, #0
 80018ba:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 80018be:	4857      	ldr	r0, [pc, #348]	; (8001a1c <MX_GPIO_Init+0x1f4>)
 80018c0:	f002 ff16 	bl	80046f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018ca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80018ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	4619      	mov	r1, r3
 80018da:	484f      	ldr	r0, [pc, #316]	; (8001a18 <MX_GPIO_Init+0x1f0>)
 80018dc:	f002 fd66 	bl	80043ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD5_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD5_Pin|LD4_Pin;
 80018e0:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 80018e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e6:	2301      	movs	r3, #1
 80018e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	4619      	mov	r1, r3
 80018f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018fc:	f002 fd56 	bl	80043ac <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_mid_Pin */
  GPIO_InitStruct.Pin = btn_mid_Pin;
 8001900:	2340      	movs	r3, #64	; 0x40
 8001902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001904:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800190a:	2301      	movs	r3, #1
 800190c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn_mid_GPIO_Port, &GPIO_InitStruct);
 800190e:	f107 0314 	add.w	r3, r7, #20
 8001912:	4619      	mov	r1, r3
 8001914:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001918:	f002 fd48 	bl	80043ac <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_right_Pin */
  GPIO_InitStruct.Pin = btn_right_Pin;
 800191c:	2380      	movs	r3, #128	; 0x80
 800191e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001920:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001924:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001926:	2301      	movs	r3, #1
 8001928:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn_right_GPIO_Port, &GPIO_InitStruct);
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	4619      	mov	r1, r3
 8001930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001934:	f002 fd3a 	bl	80043ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD3_Pin;
 8001938:	2390      	movs	r3, #144	; 0x90
 800193a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193c:	2301      	movs	r3, #1
 800193e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	2300      	movs	r3, #0
 8001946:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	4619      	mov	r1, r3
 800194e:	4832      	ldr	r0, [pc, #200]	; (8001a18 <MX_GPIO_Init+0x1f0>)
 8001950:	f002 fd2c 	bl	80043ac <HAL_GPIO_Init>

  /*Configure GPIO pins : btn_down_Pin btn_left_Pin btn_up_Pin */
  GPIO_InitStruct.Pin = btn_down_Pin|btn_left_Pin|btn_up_Pin;
 8001954:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800195a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800195e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001960:	2301      	movs	r3, #1
 8001962:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	4619      	mov	r1, r3
 800196a:	482c      	ldr	r0, [pc, #176]	; (8001a1c <MX_GPIO_Init+0x1f4>)
 800196c:	f002 fd1e 	bl	80043ac <HAL_GPIO_Init>

  /*Configure GPIO pin : lcd_blown_Pin */
  GPIO_InitStruct.Pin = lcd_blown_Pin;
 8001970:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001976:	2311      	movs	r3, #17
 8001978:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197e:	2300      	movs	r3, #0
 8001980:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(lcd_blown_GPIO_Port, &GPIO_InitStruct);
 8001982:	f107 0314 	add.w	r3, r7, #20
 8001986:	4619      	mov	r1, r3
 8001988:	4824      	ldr	r0, [pc, #144]	; (8001a1c <MX_GPIO_Init+0x1f4>)
 800198a:	f002 fd0f 	bl	80043ac <HAL_GPIO_Init>

  /*Configure GPIO pins : lcd_RS_Pin lcd_E_Pin */
  GPIO_InitStruct.Pin = lcd_RS_Pin|lcd_E_Pin;
 800198e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001994:	2301      	movs	r3, #1
 8001996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199c:	2300      	movs	r3, #0
 800199e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	4619      	mov	r1, r3
 80019a6:	481d      	ldr	r0, [pc, #116]	; (8001a1c <MX_GPIO_Init+0x1f4>)
 80019a8:	f002 fd00 	bl	80043ac <HAL_GPIO_Init>

  /*Configure GPIO pins : lcd_D4_Pin lcd_D5_Pin */
  GPIO_InitStruct.Pin = lcd_D4_Pin|lcd_D5_Pin;
 80019ac:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80019b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80019b2:	2311      	movs	r3, #17
 80019b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ba:	2300      	movs	r3, #0
 80019bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019be:	f107 0314 	add.w	r3, r7, #20
 80019c2:	4619      	mov	r1, r3
 80019c4:	4814      	ldr	r0, [pc, #80]	; (8001a18 <MX_GPIO_Init+0x1f0>)
 80019c6:	f002 fcf1 	bl	80043ac <HAL_GPIO_Init>

  /*Configure GPIO pins : lcd_D6_Pin lcd_D7_Pin */
  GPIO_InitStruct.Pin = lcd_D6_Pin|lcd_D7_Pin;
 80019ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80019ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80019d0:	2311      	movs	r3, #17
 80019d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d8:	2300      	movs	r3, #0
 80019da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	4619      	mov	r1, r3
 80019e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019e6:	f002 fce1 	bl	80043ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2100      	movs	r1, #0
 80019ee:	2017      	movs	r0, #23
 80019f0:	f002 f8b5 	bl	8003b5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019f4:	2017      	movs	r0, #23
 80019f6:	f002 f8ce 	bl	8003b96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2100      	movs	r1, #0
 80019fe:	2028      	movs	r0, #40	; 0x28
 8001a00:	f002 f8ad 	bl	8003b5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a04:	2028      	movs	r0, #40	; 0x28
 8001a06:	f002 f8c6 	bl	8003b96 <HAL_NVIC_EnableIRQ>

}
 8001a0a:	bf00      	nop
 8001a0c:	3728      	adds	r7, #40	; 0x28
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40021000 	.word	0x40021000
 8001a18:	48000800 	.word	0x48000800
 8001a1c:	48000400 	.word	0x48000400

08001a20 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this interrupt
	if(htim == &htim16)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a06      	ldr	r2, [pc, #24]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d102      	bne.n	8001a36 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		adc_timer_flag = 1;
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	701a      	strb	r2, [r3, #0]
	}
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20000374 	.word	0x20000374
 8001a48:	2000003e 	.word	0x2000003e

08001a4c <changeDisplayState>:

void changeDisplayState(DisplayState newDisplay)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08a      	sub	sp, #40	; 0x28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	71fb      	strb	r3, [r7, #7]
	LCD_Clear_Display();
 8001a56:	f7ff fa8d 	bl	8000f74 <LCD_Clear_Display>
	if (newDisplay == Menu)
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d122      	bne.n	8001aa6 <changeDisplayState+0x5a>
	{
		// Change to Menu Display State
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001a60:	2201      	movs	r2, #1
 8001a62:	2120      	movs	r1, #32
 8001a64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a68:	f002 fe42 	bl	80046f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	2180      	movs	r1, #128	; 0x80
 8001a70:	4835      	ldr	r0, [pc, #212]	; (8001b48 <changeDisplayState+0xfc>)
 8001a72:	f002 fe3d 	bl	80046f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001a76:	2200      	movs	r2, #0
 8001a78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a80:	f002 fe36 	bl	80046f0 <HAL_GPIO_WritePin>
		uint8_t lcd_string[] = "Menu";
 8001a84:	4a31      	ldr	r2, [pc, #196]	; (8001b4c <changeDisplayState+0x100>)
 8001a86:	f107 0320 	add.w	r3, r7, #32
 8001a8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a8e:	6018      	str	r0, [r3, #0]
 8001a90:	3304      	adds	r3, #4
 8001a92:	7019      	strb	r1, [r3, #0]
		LCD_Write_String(lcd_string);
 8001a94:	f107 0320 	add.w	r3, r7, #32
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff f919 	bl	8000cd0 <LCD_Write_String>
		CurrentDisplayMode = Menu;
 8001a9e:	4b2c      	ldr	r3, [pc, #176]	; (8001b50 <changeDisplayState+0x104>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
		uint8_t lcd_string[] = "Output";
		LCD_Write_String(lcd_string);
		CurrentDisplayMode = Output;
	}
}
 8001aa4:	e04b      	b.n	8001b3e <changeDisplayState+0xf2>
	else if (newDisplay == Measurement)
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d120      	bne.n	8001aee <changeDisplayState+0xa2>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001aac:	2200      	movs	r2, #0
 8001aae:	2120      	movs	r1, #32
 8001ab0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ab4:	f002 fe1c 	bl	80046f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001ab8:	2201      	movs	r2, #1
 8001aba:	2180      	movs	r1, #128	; 0x80
 8001abc:	4822      	ldr	r0, [pc, #136]	; (8001b48 <changeDisplayState+0xfc>)
 8001abe:	f002 fe17 	bl	80046f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ac8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001acc:	f002 fe10 	bl	80046f0 <HAL_GPIO_WritePin>
		uint8_t lcd_string[] = "Measurement";
 8001ad0:	4a20      	ldr	r2, [pc, #128]	; (8001b54 <changeDisplayState+0x108>)
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ad8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		LCD_Write_String(lcd_string);
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff f8f5 	bl	8000cd0 <LCD_Write_String>
		CurrentDisplayMode = Measurement;
 8001ae6:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <changeDisplayState+0x104>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	701a      	strb	r2, [r3, #0]
}
 8001aec:	e027      	b.n	8001b3e <changeDisplayState+0xf2>
	else if (newDisplay == Output)
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d124      	bne.n	8001b3e <changeDisplayState+0xf2>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001af4:	2200      	movs	r2, #0
 8001af6:	2120      	movs	r1, #32
 8001af8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001afc:	f002 fdf8 	bl	80046f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001b00:	2200      	movs	r2, #0
 8001b02:	2180      	movs	r1, #128	; 0x80
 8001b04:	4810      	ldr	r0, [pc, #64]	; (8001b48 <changeDisplayState+0xfc>)
 8001b06:	f002 fdf3 	bl	80046f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b14:	f002 fdec 	bl	80046f0 <HAL_GPIO_WritePin>
		uint8_t lcd_string[] = "Output";
 8001b18:	4a0f      	ldr	r2, [pc, #60]	; (8001b58 <changeDisplayState+0x10c>)
 8001b1a:	f107 030c 	add.w	r3, r7, #12
 8001b1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b22:	6018      	str	r0, [r3, #0]
 8001b24:	3304      	adds	r3, #4
 8001b26:	8019      	strh	r1, [r3, #0]
 8001b28:	3302      	adds	r3, #2
 8001b2a:	0c0a      	lsrs	r2, r1, #16
 8001b2c:	701a      	strb	r2, [r3, #0]
		LCD_Write_String(lcd_string);
 8001b2e:	f107 030c 	add.w	r3, r7, #12
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff f8cc 	bl	8000cd0 <LCD_Write_String>
		CurrentDisplayMode = Output;
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <changeDisplayState+0x104>)
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	701a      	strb	r2, [r3, #0]
}
 8001b3e:	bf00      	nop
 8001b40:	3728      	adds	r7, #40	; 0x28
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	48000800 	.word	0x48000800
 8001b4c:	08008e2c 	.word	0x08008e2c
 8001b50:	20000208 	.word	0x20000208
 8001b54:	08008e34 	.word	0x08008e34
 8001b58:	08008e40 	.word	0x08008e40

08001b5c <uartRxComplete>:

bool uartRxComplete(uint8_t last_byte)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
	if(last_byte == '!')
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	2b21      	cmp	r3, #33	; 0x21
 8001b6a:	d101      	bne.n	8001b70 <uartRxComplete+0x14>
	{
		return true;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <uartRxComplete+0x16>
	}
	else
	{
		return false;
 8001b70:	2300      	movs	r3, #0
	}
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
	...

08001b80 <interpret_rx_message>:

void interpret_rx_message(uint8_t *rx_array, uint8_t length)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	70fb      	strb	r3, [r7, #3]

//	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);

	if(length > 7)
 8001b8c:	78fb      	ldrb	r3, [r7, #3]
 8001b8e:	2b07      	cmp	r3, #7
 8001b90:	d971      	bls.n	8001c76 <interpret_rx_message+0xf6>
	{
		if(rx_array[2] == '*')
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3302      	adds	r3, #2
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b2a      	cmp	r3, #42	; 0x2a
 8001b9a:	d124      	bne.n	8001be6 <interpret_rx_message+0x66>
		{
			// Requests
//			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
			switch(rx_array[4])
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3304      	adds	r3, #4
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b6d      	cmp	r3, #109	; 0x6d
 8001ba4:	d002      	beq.n	8001bac <interpret_rx_message+0x2c>
 8001ba6:	2b73      	cmp	r3, #115	; 0x73
 8001ba8:	d007      	beq.n	8001bba <interpret_rx_message+0x3a>
					request_status();
					break;

				default:
					// Problems
					break;
 8001baa:	e064      	b.n	8001c76 <interpret_rx_message+0xf6>
					request_measurement(rx_array[6]);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3306      	adds	r3, #6
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 f868 	bl	8001c88 <request_measurement>
					break;
 8001bb8:	e05d      	b.n	8001c76 <interpret_rx_message+0xf6>
					if(rx_array[6] == '0'){
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3306      	adds	r3, #6
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b30      	cmp	r3, #48	; 0x30
 8001bc2:	d104      	bne.n	8001bce <interpret_rx_message+0x4e>
						OutputState.On = false;
 8001bc4:	4b2e      	ldr	r3, [pc, #184]	; (8001c80 <interpret_rx_message+0x100>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 8001bcc:	e008      	b.n	8001be0 <interpret_rx_message+0x60>
					} else if(rx_array[6] == '1'){
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3306      	adds	r3, #6
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b31      	cmp	r3, #49	; 0x31
 8001bd6:	d103      	bne.n	8001be0 <interpret_rx_message+0x60>
						OutputState.On = true;
 8001bd8:	4b29      	ldr	r3, [pc, #164]	; (8001c80 <interpret_rx_message+0x100>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
					request_status();
 8001be0:	f000 f9a8 	bl	8001f34 <request_status>
					break;
 8001be4:	e047      	b.n	8001c76 <interpret_rx_message+0xf6>
			}
		}
		else if(rx_array[2] == '$')
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	3302      	adds	r3, #2
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b24      	cmp	r3, #36	; 0x24
 8001bee:	d137      	bne.n	8001c60 <interpret_rx_message+0xe0>
		{
			// Set
			uint8_t key1 = rx_array[4];
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	791b      	ldrb	r3, [r3, #4]
 8001bf4:	73fb      	strb	r3, [r7, #15]
			uint8_t key2 = rx_array[5];
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	795b      	ldrb	r3, [r3, #5]
 8001bfa:	73bb      	strb	r3, [r7, #14]
			if(key1 == 'D' && key2 == 'V'){
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
 8001bfe:	2b44      	cmp	r3, #68	; 0x44
 8001c00:	d106      	bne.n	8001c10 <interpret_rx_message+0x90>
 8001c02:	7bbb      	ldrb	r3, [r7, #14]
 8001c04:	2b56      	cmp	r3, #86	; 0x56
 8001c06:	d103      	bne.n	8001c10 <interpret_rx_message+0x90>
				// DC Voltage
				measurement_mode = 0;
 8001c08:	4b1e      	ldr	r3, [pc, #120]	; (8001c84 <interpret_rx_message+0x104>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	701a      	strb	r2, [r3, #0]
 8001c0e:	e032      	b.n	8001c76 <interpret_rx_message+0xf6>
			} else if (key1 == 'A' && key2 == 'V'){
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
 8001c12:	2b41      	cmp	r3, #65	; 0x41
 8001c14:	d106      	bne.n	8001c24 <interpret_rx_message+0xa4>
 8001c16:	7bbb      	ldrb	r3, [r7, #14]
 8001c18:	2b56      	cmp	r3, #86	; 0x56
 8001c1a:	d103      	bne.n	8001c24 <interpret_rx_message+0xa4>
				// AC Voltage
				measurement_mode = 1;
 8001c1c:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <interpret_rx_message+0x104>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	701a      	strb	r2, [r3, #0]
 8001c22:	e028      	b.n	8001c76 <interpret_rx_message+0xf6>
			} else if (key1 == 'D' && key2 == 'I'){
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	2b44      	cmp	r3, #68	; 0x44
 8001c28:	d106      	bne.n	8001c38 <interpret_rx_message+0xb8>
 8001c2a:	7bbb      	ldrb	r3, [r7, #14]
 8001c2c:	2b49      	cmp	r3, #73	; 0x49
 8001c2e:	d103      	bne.n	8001c38 <interpret_rx_message+0xb8>
				// DC Current
				measurement_mode = 2;
 8001c30:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <interpret_rx_message+0x104>)
 8001c32:	2202      	movs	r2, #2
 8001c34:	701a      	strb	r2, [r3, #0]
 8001c36:	e01e      	b.n	8001c76 <interpret_rx_message+0xf6>
			} else if (key1 == 'A' && key2 == 'I'){
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	2b41      	cmp	r3, #65	; 0x41
 8001c3c:	d106      	bne.n	8001c4c <interpret_rx_message+0xcc>
 8001c3e:	7bbb      	ldrb	r3, [r7, #14]
 8001c40:	2b49      	cmp	r3, #73	; 0x49
 8001c42:	d103      	bne.n	8001c4c <interpret_rx_message+0xcc>
				// AC Current
				measurement_mode = 3;
 8001c44:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <interpret_rx_message+0x104>)
 8001c46:	2203      	movs	r2, #3
 8001c48:	701a      	strb	r2, [r3, #0]
 8001c4a:	e014      	b.n	8001c76 <interpret_rx_message+0xf6>
			} else if (key1 == 'T' && key2 == 'C'){
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
 8001c4e:	2b54      	cmp	r3, #84	; 0x54
 8001c50:	d111      	bne.n	8001c76 <interpret_rx_message+0xf6>
 8001c52:	7bbb      	ldrb	r3, [r7, #14]
 8001c54:	2b43      	cmp	r3, #67	; 0x43
 8001c56:	d10e      	bne.n	8001c76 <interpret_rx_message+0xf6>
				// Temperature
				measurement_mode = 4;
 8001c58:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <interpret_rx_message+0x104>)
 8001c5a:	2204      	movs	r2, #4
 8001c5c:	701a      	strb	r2, [r3, #0]
		else
		{
//			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
		}
	}
}
 8001c5e:	e00a      	b.n	8001c76 <interpret_rx_message+0xf6>
		}else if(rx_array[2] == '^'){
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3302      	adds	r3, #2
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b5e      	cmp	r3, #94	; 0x5e
 8001c68:	d105      	bne.n	8001c76 <interpret_rx_message+0xf6>
			set_output_parameter(rx_array, length);
 8001c6a:	78fb      	ldrb	r3, [r7, #3]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f9be 	bl	8001ff0 <set_output_parameter>
}
 8001c74:	e7ff      	b.n	8001c76 <interpret_rx_message+0xf6>
 8001c76:	bf00      	nop
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000050 	.word	0x20000050
 8001c84:	2000004c 	.word	0x2000004c

08001c88 <request_measurement>:

void request_measurement(uint8_t parameter)
{
 8001c88:	b590      	push	{r4, r7, lr}
 8001c8a:	b087      	sub	sp, #28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	71fb      	strb	r3, [r7, #7]
	uint8_t msg[13] = "@,m,x,xxxx,!\n";
 8001c92:	4b9f      	ldr	r3, [pc, #636]	; (8001f10 <request_measurement+0x288>)
 8001c94:	f107 0408 	add.w	r4, r7, #8
 8001c98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c9a:	c407      	stmia	r4!, {r0, r1, r2}
 8001c9c:	7023      	strb	r3, [r4, #0]
	switch(parameter){
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	3b61      	subs	r3, #97	; 0x61
 8001ca2:	2b13      	cmp	r3, #19
 8001ca4:	f200 8122 	bhi.w	8001eec <request_measurement+0x264>
 8001ca8:	a201      	add	r2, pc, #4	; (adr r2, 8001cb0 <request_measurement+0x28>)
 8001caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cae:	bf00      	nop
 8001cb0:	08001d01 	.word	0x08001d01
 8001cb4:	08001eed 	.word	0x08001eed
 8001cb8:	08001eed 	.word	0x08001eed
 8001cbc:	08001eed 	.word	0x08001eed
 8001cc0:	08001eed 	.word	0x08001eed
 8001cc4:	08001e49 	.word	0x08001e49
 8001cc8:	08001eed 	.word	0x08001eed
 8001ccc:	08001eed 	.word	0x08001eed
 8001cd0:	08001eed 	.word	0x08001eed
 8001cd4:	08001eed 	.word	0x08001eed
 8001cd8:	08001eed 	.word	0x08001eed
 8001cdc:	08001eed 	.word	0x08001eed
 8001ce0:	08001eed 	.word	0x08001eed
 8001ce4:	08001eed 	.word	0x08001eed
 8001ce8:	08001da5 	.word	0x08001da5
 8001cec:	08001eed 	.word	0x08001eed
 8001cf0:	08001eed 	.word	0x08001eed
 8001cf4:	08001eed 	.word	0x08001eed
 8001cf8:	08001eed 	.word	0x08001eed
 8001cfc:	08001eed 	.word	0x08001eed
		case 't':
			// Type
			break;
		case 'a':
			// Amplitude (peak-to-peak)
			msg[4] = 'a';
 8001d00:	2361      	movs	r3, #97	; 0x61
 8001d02:	733b      	strb	r3, [r7, #12]
			msg[6] = ((measured_amplitude/1000) % 10) + 48;
 8001d04:	4b83      	ldr	r3, [pc, #524]	; (8001f14 <request_measurement+0x28c>)
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	4a83      	ldr	r2, [pc, #524]	; (8001f18 <request_measurement+0x290>)
 8001d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0e:	099b      	lsrs	r3, r3, #6
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	4b82      	ldr	r3, [pc, #520]	; (8001f1c <request_measurement+0x294>)
 8001d14:	fba3 1302 	umull	r1, r3, r3, r2
 8001d18:	08d9      	lsrs	r1, r3, #3
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	440b      	add	r3, r1
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	3330      	adds	r3, #48	; 0x30
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	73bb      	strb	r3, [r7, #14]
			msg[7] = ((measured_amplitude/100) % 10) + 48;
 8001d2e:	4b79      	ldr	r3, [pc, #484]	; (8001f14 <request_measurement+0x28c>)
 8001d30:	881b      	ldrh	r3, [r3, #0]
 8001d32:	4a7b      	ldr	r2, [pc, #492]	; (8001f20 <request_measurement+0x298>)
 8001d34:	fba2 2303 	umull	r2, r3, r2, r3
 8001d38:	095b      	lsrs	r3, r3, #5
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	4b77      	ldr	r3, [pc, #476]	; (8001f1c <request_measurement+0x294>)
 8001d3e:	fba3 1302 	umull	r1, r3, r3, r2
 8001d42:	08d9      	lsrs	r1, r3, #3
 8001d44:	460b      	mov	r3, r1
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	3330      	adds	r3, #48	; 0x30
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	73fb      	strb	r3, [r7, #15]
			msg[8] = ((measured_amplitude/10) % 10) + 48;
 8001d58:	4b6e      	ldr	r3, [pc, #440]	; (8001f14 <request_measurement+0x28c>)
 8001d5a:	881b      	ldrh	r3, [r3, #0]
 8001d5c:	4a6f      	ldr	r2, [pc, #444]	; (8001f1c <request_measurement+0x294>)
 8001d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d62:	08db      	lsrs	r3, r3, #3
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	4b6d      	ldr	r3, [pc, #436]	; (8001f1c <request_measurement+0x294>)
 8001d68:	fba3 1302 	umull	r1, r3, r3, r2
 8001d6c:	08d9      	lsrs	r1, r3, #3
 8001d6e:	460b      	mov	r3, r1
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	3330      	adds	r3, #48	; 0x30
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	743b      	strb	r3, [r7, #16]
			msg[9] = (measured_amplitude % 10) + 48;
 8001d82:	4b64      	ldr	r3, [pc, #400]	; (8001f14 <request_measurement+0x28c>)
 8001d84:	881a      	ldrh	r2, [r3, #0]
 8001d86:	4b65      	ldr	r3, [pc, #404]	; (8001f1c <request_measurement+0x294>)
 8001d88:	fba3 1302 	umull	r1, r3, r3, r2
 8001d8c:	08d9      	lsrs	r1, r3, #3
 8001d8e:	460b      	mov	r3, r1
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	440b      	add	r3, r1
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	3330      	adds	r3, #48	; 0x30
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	747b      	strb	r3, [r7, #17]
			break;
 8001da2:	e0a4      	b.n	8001eee <request_measurement+0x266>
		case 'o':
			// Offset
			msg[4] = 'o';
 8001da4:	236f      	movs	r3, #111	; 0x6f
 8001da6:	733b      	strb	r3, [r7, #12]
			msg[6] = ((measured_offset/1000) % 10) + 48;
 8001da8:	4b5e      	ldr	r3, [pc, #376]	; (8001f24 <request_measurement+0x29c>)
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	4a5a      	ldr	r2, [pc, #360]	; (8001f18 <request_measurement+0x290>)
 8001dae:	fba2 2303 	umull	r2, r3, r2, r3
 8001db2:	099b      	lsrs	r3, r3, #6
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	4b59      	ldr	r3, [pc, #356]	; (8001f1c <request_measurement+0x294>)
 8001db8:	fba3 1302 	umull	r1, r3, r3, r2
 8001dbc:	08d9      	lsrs	r1, r3, #3
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	3330      	adds	r3, #48	; 0x30
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	73bb      	strb	r3, [r7, #14]
			msg[7] = ((measured_offset/100) % 10) + 48;
 8001dd2:	4b54      	ldr	r3, [pc, #336]	; (8001f24 <request_measurement+0x29c>)
 8001dd4:	881b      	ldrh	r3, [r3, #0]
 8001dd6:	4a52      	ldr	r2, [pc, #328]	; (8001f20 <request_measurement+0x298>)
 8001dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ddc:	095b      	lsrs	r3, r3, #5
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	4b4e      	ldr	r3, [pc, #312]	; (8001f1c <request_measurement+0x294>)
 8001de2:	fba3 1302 	umull	r1, r3, r3, r2
 8001de6:	08d9      	lsrs	r1, r3, #3
 8001de8:	460b      	mov	r3, r1
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	3330      	adds	r3, #48	; 0x30
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	73fb      	strb	r3, [r7, #15]
			msg[8] = ((measured_offset/10) % 10) + 48;
 8001dfc:	4b49      	ldr	r3, [pc, #292]	; (8001f24 <request_measurement+0x29c>)
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	4a46      	ldr	r2, [pc, #280]	; (8001f1c <request_measurement+0x294>)
 8001e02:	fba2 2303 	umull	r2, r3, r2, r3
 8001e06:	08db      	lsrs	r3, r3, #3
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	4b44      	ldr	r3, [pc, #272]	; (8001f1c <request_measurement+0x294>)
 8001e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8001e10:	08d9      	lsrs	r1, r3, #3
 8001e12:	460b      	mov	r3, r1
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	440b      	add	r3, r1
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	3330      	adds	r3, #48	; 0x30
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	743b      	strb	r3, [r7, #16]
			msg[9] = (measured_offset % 10) + 48;
 8001e26:	4b3f      	ldr	r3, [pc, #252]	; (8001f24 <request_measurement+0x29c>)
 8001e28:	881a      	ldrh	r2, [r3, #0]
 8001e2a:	4b3c      	ldr	r3, [pc, #240]	; (8001f1c <request_measurement+0x294>)
 8001e2c:	fba3 1302 	umull	r1, r3, r3, r2
 8001e30:	08d9      	lsrs	r1, r3, #3
 8001e32:	460b      	mov	r3, r1
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	440b      	add	r3, r1
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	3330      	adds	r3, #48	; 0x30
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	747b      	strb	r3, [r7, #17]
			break;
 8001e46:	e052      	b.n	8001eee <request_measurement+0x266>
		case 'f':
			// Frequency
			msg[4] = 'f';
 8001e48:	2366      	movs	r3, #102	; 0x66
 8001e4a:	733b      	strb	r3, [r7, #12]
			msg[6] = ((measured_frequency/1000) % 10) + 48;
 8001e4c:	4b36      	ldr	r3, [pc, #216]	; (8001f28 <request_measurement+0x2a0>)
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	4a31      	ldr	r2, [pc, #196]	; (8001f18 <request_measurement+0x290>)
 8001e52:	fba2 2303 	umull	r2, r3, r2, r3
 8001e56:	099b      	lsrs	r3, r3, #6
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	4b30      	ldr	r3, [pc, #192]	; (8001f1c <request_measurement+0x294>)
 8001e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8001e60:	08d9      	lsrs	r1, r3, #3
 8001e62:	460b      	mov	r3, r1
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	440b      	add	r3, r1
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	3330      	adds	r3, #48	; 0x30
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	73bb      	strb	r3, [r7, #14]
			msg[7] = ((measured_frequency/100) % 10) + 48;
 8001e76:	4b2c      	ldr	r3, [pc, #176]	; (8001f28 <request_measurement+0x2a0>)
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	4a29      	ldr	r2, [pc, #164]	; (8001f20 <request_measurement+0x298>)
 8001e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e80:	095b      	lsrs	r3, r3, #5
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	4b25      	ldr	r3, [pc, #148]	; (8001f1c <request_measurement+0x294>)
 8001e86:	fba3 1302 	umull	r1, r3, r3, r2
 8001e8a:	08d9      	lsrs	r1, r3, #3
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	440b      	add	r3, r1
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	3330      	adds	r3, #48	; 0x30
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	73fb      	strb	r3, [r7, #15]
			msg[8] = ((measured_frequency/10) % 10) + 48;
 8001ea0:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <request_measurement+0x2a0>)
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	4a1d      	ldr	r2, [pc, #116]	; (8001f1c <request_measurement+0x294>)
 8001ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eaa:	08db      	lsrs	r3, r3, #3
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	4b1b      	ldr	r3, [pc, #108]	; (8001f1c <request_measurement+0x294>)
 8001eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8001eb4:	08d9      	lsrs	r1, r3, #3
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	440b      	add	r3, r1
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	3330      	adds	r3, #48	; 0x30
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	743b      	strb	r3, [r7, #16]
			msg[9] = (measured_frequency % 10) + 48;
 8001eca:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <request_measurement+0x2a0>)
 8001ecc:	881a      	ldrh	r2, [r3, #0]
 8001ece:	4b13      	ldr	r3, [pc, #76]	; (8001f1c <request_measurement+0x294>)
 8001ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8001ed4:	08d9      	lsrs	r1, r3, #3
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	440b      	add	r3, r1
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	3330      	adds	r3, #48	; 0x30
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	747b      	strb	r3, [r7, #17]
			break;
 8001eea:	e000      	b.n	8001eee <request_measurement+0x266>
		case 'c':
			// Temperature
			break;
		default:
			// Problems
			break;
 8001eec:	bf00      	nop
	}
	HAL_UART_Transmit(&huart2, msg, 13, 10);
 8001eee:	f107 0108 	add.w	r1, r7, #8
 8001ef2:	230a      	movs	r3, #10
 8001ef4:	220d      	movs	r2, #13
 8001ef6:	480d      	ldr	r0, [pc, #52]	; (8001f2c <request_measurement+0x2a4>)
 8001ef8:	f004 fd14 	bl	8006924 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 8001efc:	2201      	movs	r2, #1
 8001efe:	490c      	ldr	r1, [pc, #48]	; (8001f30 <request_measurement+0x2a8>)
 8001f00:	480a      	ldr	r0, [pc, #40]	; (8001f2c <request_measurement+0x2a4>)
 8001f02:	f004 fda3 	bl	8006a4c <HAL_UART_Receive_IT>
}
 8001f06:	bf00      	nop
 8001f08:	371c      	adds	r7, #28
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd90      	pop	{r4, r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	08008e48 	.word	0x08008e48
 8001f14:	20000044 	.word	0x20000044
 8001f18:	10624dd3 	.word	0x10624dd3
 8001f1c:	cccccccd 	.word	0xcccccccd
 8001f20:	51eb851f 	.word	0x51eb851f
 8001f24:	2000004a 	.word	0x2000004a
 8001f28:	20000046 	.word	0x20000046
 8001f2c:	200002f0 	.word	0x200002f0
 8001f30:	200002a0 	.word	0x200002a0

08001f34 <request_status>:

void request_status()
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
	uint8_t msg[11] = "@,xx,x,x,!\n";
 8001f3a:	4a28      	ldr	r2, [pc, #160]	; (8001fdc <request_status+0xa8>)
 8001f3c:	1d3b      	adds	r3, r7, #4
 8001f3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f40:	c303      	stmia	r3!, {r0, r1}
 8001f42:	801a      	strh	r2, [r3, #0]
 8001f44:	3302      	adds	r3, #2
 8001f46:	0c12      	lsrs	r2, r2, #16
 8001f48:	701a      	strb	r2, [r3, #0]
	switch(measurement_mode){
 8001f4a:	4b25      	ldr	r3, [pc, #148]	; (8001fe0 <request_status+0xac>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d825      	bhi.n	8001f9e <request_status+0x6a>
 8001f52:	a201      	add	r2, pc, #4	; (adr r2, 8001f58 <request_status+0x24>)
 8001f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f58:	08001f6d 	.word	0x08001f6d
 8001f5c:	08001f77 	.word	0x08001f77
 8001f60:	08001f81 	.word	0x08001f81
 8001f64:	08001f8b 	.word	0x08001f8b
 8001f68:	08001f95 	.word	0x08001f95
		case 0:
			// DV
			msg[2] = 'D';
 8001f6c:	2344      	movs	r3, #68	; 0x44
 8001f6e:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'V';
 8001f70:	2356      	movs	r3, #86	; 0x56
 8001f72:	71fb      	strb	r3, [r7, #7]
			break;
 8001f74:	e014      	b.n	8001fa0 <request_status+0x6c>
		case 1:
			// AV
			msg[2] = 'A';
 8001f76:	2341      	movs	r3, #65	; 0x41
 8001f78:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'V';
 8001f7a:	2356      	movs	r3, #86	; 0x56
 8001f7c:	71fb      	strb	r3, [r7, #7]
			break;
 8001f7e:	e00f      	b.n	8001fa0 <request_status+0x6c>
		case 2:
			// DI
			msg[2] = 'D';
 8001f80:	2344      	movs	r3, #68	; 0x44
 8001f82:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'I';
 8001f84:	2349      	movs	r3, #73	; 0x49
 8001f86:	71fb      	strb	r3, [r7, #7]
			break;
 8001f88:	e00a      	b.n	8001fa0 <request_status+0x6c>
		case 3:
			// AI
			msg[2] = 'A';
 8001f8a:	2341      	movs	r3, #65	; 0x41
 8001f8c:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'I';
 8001f8e:	2349      	movs	r3, #73	; 0x49
 8001f90:	71fb      	strb	r3, [r7, #7]
			break;
 8001f92:	e005      	b.n	8001fa0 <request_status+0x6c>
		case 4:
			// TC
			msg[2] = 'T';
 8001f94:	2354      	movs	r3, #84	; 0x54
 8001f96:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'C';
 8001f98:	2343      	movs	r3, #67	; 0x43
 8001f9a:	71fb      	strb	r3, [r7, #7]
			break;
 8001f9c:	e000      	b.n	8001fa0 <request_status+0x6c>
		default:
			// Problems
			break;
 8001f9e:	bf00      	nop
	}
	msg[5] = OutputState.Mode;
 8001fa0:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <request_status+0xb0>)
 8001fa2:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 8001fa6:	727b      	strb	r3, [r7, #9]
	if(OutputState.On){
 8001fa8:	4b0e      	ldr	r3, [pc, #56]	; (8001fe4 <request_status+0xb0>)
 8001faa:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d002      	beq.n	8001fb8 <request_status+0x84>
		msg[7] = '1';
 8001fb2:	2331      	movs	r3, #49	; 0x31
 8001fb4:	72fb      	strb	r3, [r7, #11]
 8001fb6:	e001      	b.n	8001fbc <request_status+0x88>
	} else {
		msg[7] = '0';
 8001fb8:	2330      	movs	r3, #48	; 0x30
 8001fba:	72fb      	strb	r3, [r7, #11]
	}
	HAL_UART_Transmit(&huart2, msg, 11, 10);
 8001fbc:	1d39      	adds	r1, r7, #4
 8001fbe:	230a      	movs	r3, #10
 8001fc0:	220b      	movs	r2, #11
 8001fc2:	4809      	ldr	r0, [pc, #36]	; (8001fe8 <request_status+0xb4>)
 8001fc4:	f004 fcae 	bl	8006924 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 8001fc8:	2201      	movs	r2, #1
 8001fca:	4908      	ldr	r1, [pc, #32]	; (8001fec <request_status+0xb8>)
 8001fcc:	4806      	ldr	r0, [pc, #24]	; (8001fe8 <request_status+0xb4>)
 8001fce:	f004 fd3d 	bl	8006a4c <HAL_UART_Receive_IT>

}
 8001fd2:	bf00      	nop
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	08008e58 	.word	0x08008e58
 8001fe0:	2000004c 	.word	0x2000004c
 8001fe4:	20000050 	.word	0x20000050
 8001fe8:	200002f0 	.word	0x200002f0
 8001fec:	200002a0 	.word	0x200002a0

08001ff0 <set_output_parameter>:

void set_output_parameter(uint8_t *rx_array, uint8_t length)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	70fb      	strb	r3, [r7, #3]
	uint8_t param = rx_array[4];
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	791b      	ldrb	r3, [r3, #4]
 8002000:	73bb      	strb	r3, [r7, #14]
	uint8_t val0 = rx_array[6];
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	799b      	ldrb	r3, [r3, #6]
 8002006:	737b      	strb	r3, [r7, #13]
	uint8_t received_value = 0;
 8002008:	2300      	movs	r3, #0
 800200a:	73fb      	strb	r3, [r7, #15]
	if(length > 9){
 800200c:	78fb      	ldrb	r3, [r7, #3]
 800200e:	2b09      	cmp	r3, #9
 8002010:	d92c      	bls.n	800206c <set_output_parameter+0x7c>
		uint8_t val1 = rx_array[7];
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	79db      	ldrb	r3, [r3, #7]
 8002016:	733b      	strb	r3, [r7, #12]
		uint8_t val2 = rx_array[8];
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	7a1b      	ldrb	r3, [r3, #8]
 800201c:	72fb      	strb	r3, [r7, #11]
		uint8_t val3 = rx_array[9];
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	7a5b      	ldrb	r3, [r3, #9]
 8002022:	72bb      	strb	r3, [r7, #10]
		received_value += val0*1000;
 8002024:	7b7b      	ldrb	r3, [r7, #13]
 8002026:	461a      	mov	r2, r3
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	b2da      	uxtb	r2, r3
 8002030:	7bfb      	ldrb	r3, [r7, #15]
 8002032:	4413      	add	r3, r2
 8002034:	73fb      	strb	r3, [r7, #15]
		received_value += val1*100;
 8002036:	7b3b      	ldrb	r3, [r7, #12]
 8002038:	461a      	mov	r2, r3
 800203a:	0092      	lsls	r2, r2, #2
 800203c:	4413      	add	r3, r2
 800203e:	461a      	mov	r2, r3
 8002040:	0091      	lsls	r1, r2, #2
 8002042:	461a      	mov	r2, r3
 8002044:	460b      	mov	r3, r1
 8002046:	4413      	add	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	b2da      	uxtb	r2, r3
 800204c:	7bfb      	ldrb	r3, [r7, #15]
 800204e:	4413      	add	r3, r2
 8002050:	73fb      	strb	r3, [r7, #15]
		received_value += val2*10;
 8002052:	7afb      	ldrb	r3, [r7, #11]
 8002054:	461a      	mov	r2, r3
 8002056:	0092      	lsls	r2, r2, #2
 8002058:	4413      	add	r3, r2
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	b2da      	uxtb	r2, r3
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	4413      	add	r3, r2
 8002062:	73fb      	strb	r3, [r7, #15]
		received_value += val3;
 8002064:	7bfa      	ldrb	r2, [r7, #15]
 8002066:	7abb      	ldrb	r3, [r7, #10]
 8002068:	4413      	add	r3, r2
 800206a:	73fb      	strb	r3, [r7, #15]
	}
	switch(param){
 800206c:	7bbb      	ldrb	r3, [r7, #14]
 800206e:	3b61      	subs	r3, #97	; 0x61
 8002070:	2b13      	cmp	r3, #19
 8002072:	d842      	bhi.n	80020fa <set_output_parameter+0x10a>
 8002074:	a201      	add	r2, pc, #4	; (adr r2, 800207c <set_output_parameter+0x8c>)
 8002076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800207a:	bf00      	nop
 800207c:	080020d7 	.word	0x080020d7
 8002080:	080020fb 	.word	0x080020fb
 8002084:	080020fb 	.word	0x080020fb
 8002088:	080020fb 	.word	0x080020fb
 800208c:	080020fb 	.word	0x080020fb
 8002090:	080020ef 	.word	0x080020ef
 8002094:	080020fb 	.word	0x080020fb
 8002098:	080020fb 	.word	0x080020fb
 800209c:	080020fb 	.word	0x080020fb
 80020a0:	080020fb 	.word	0x080020fb
 80020a4:	080020fb 	.word	0x080020fb
 80020a8:	080020fb 	.word	0x080020fb
 80020ac:	080020fb 	.word	0x080020fb
 80020b0:	080020fb 	.word	0x080020fb
 80020b4:	080020e3 	.word	0x080020e3
 80020b8:	080020fb 	.word	0x080020fb
 80020bc:	080020fb 	.word	0x080020fb
 80020c0:	080020fb 	.word	0x080020fb
 80020c4:	080020fb 	.word	0x080020fb
 80020c8:	080020cd 	.word	0x080020cd
		case 't':
			// Type
			OutputState.Mode = (OutputMode)val0; // TODO: This might break! Need to test and try casting to OutputMode type
 80020cc:	4a0e      	ldr	r2, [pc, #56]	; (8002108 <set_output_parameter+0x118>)
 80020ce:	7b7b      	ldrb	r3, [r7, #13]
 80020d0:	f882 3195 	strb.w	r3, [r2, #405]	; 0x195
			break;
 80020d4:	e012      	b.n	80020fc <set_output_parameter+0x10c>
		case 'a':
			// Amplitude
			OutputState.Amplitude = received_value;
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
 80020d8:	b29a      	uxth	r2, r3
 80020da:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <set_output_parameter+0x118>)
 80020dc:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196
			break;
 80020e0:	e00c      	b.n	80020fc <set_output_parameter+0x10c>
		case 'o':
			// Offset
			OutputState.Offset = received_value;
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	4b08      	ldr	r3, [pc, #32]	; (8002108 <set_output_parameter+0x118>)
 80020e8:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
			break;
 80020ec:	e006      	b.n	80020fc <set_output_parameter+0x10c>
		case 'f':
			// Frequency
			OutputState.Frequency = received_value;
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	4b05      	ldr	r3, [pc, #20]	; (8002108 <set_output_parameter+0x118>)
 80020f4:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
			break;
 80020f8:	e000      	b.n	80020fc <set_output_parameter+0x10c>
		case 'c':
			// Temperature
			break;
		default:
			// Problems
			break;
 80020fa:	bf00      	nop
	}
}
 80020fc:	bf00      	nop
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	20000050 	.word	0x20000050

0800210c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
	...

0800211c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002122:	4b0f      	ldr	r3, [pc, #60]	; (8002160 <HAL_MspInit+0x44>)
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	4a0e      	ldr	r2, [pc, #56]	; (8002160 <HAL_MspInit+0x44>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	6193      	str	r3, [r2, #24]
 800212e:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <HAL_MspInit+0x44>)
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	607b      	str	r3, [r7, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800213a:	4b09      	ldr	r3, [pc, #36]	; (8002160 <HAL_MspInit+0x44>)
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	4a08      	ldr	r2, [pc, #32]	; (8002160 <HAL_MspInit+0x44>)
 8002140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002144:	61d3      	str	r3, [r2, #28]
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_MspInit+0x44>)
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214e:	603b      	str	r3, [r7, #0]
 8002150:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002152:	2007      	movs	r0, #7
 8002154:	f001 fcf8 	bl	8003b48 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40021000 	.word	0x40021000

08002164 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08a      	sub	sp, #40	; 0x28
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002184:	d124      	bne.n	80021d0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002186:	4b14      	ldr	r3, [pc, #80]	; (80021d8 <HAL_ADC_MspInit+0x74>)
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	4a13      	ldr	r2, [pc, #76]	; (80021d8 <HAL_ADC_MspInit+0x74>)
 800218c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002190:	6153      	str	r3, [r2, #20]
 8002192:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <HAL_ADC_MspInit+0x74>)
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219e:	4b0e      	ldr	r3, [pc, #56]	; (80021d8 <HAL_ADC_MspInit+0x74>)
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	4a0d      	ldr	r2, [pc, #52]	; (80021d8 <HAL_ADC_MspInit+0x74>)
 80021a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021a8:	6153      	str	r3, [r2, #20]
 80021aa:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <HAL_ADC_MspInit+0x74>)
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021b6:	2301      	movs	r3, #1
 80021b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021ba:	2303      	movs	r3, #3
 80021bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c2:	f107 0314 	add.w	r3, r7, #20
 80021c6:	4619      	mov	r1, r3
 80021c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021cc:	f002 f8ee 	bl	80043ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80021d0:	bf00      	nop
 80021d2:	3728      	adds	r7, #40	; 0x28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40021000 	.word	0x40021000

080021dc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08a      	sub	sp, #40	; 0x28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e4:	f107 0314 	add.w	r3, r7, #20
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]
 80021f2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a2c      	ldr	r2, [pc, #176]	; (80022ac <HAL_DAC_MspInit+0xd0>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d152      	bne.n	80022a4 <HAL_DAC_MspInit+0xc8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80021fe:	4b2c      	ldr	r3, [pc, #176]	; (80022b0 <HAL_DAC_MspInit+0xd4>)
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	4a2b      	ldr	r2, [pc, #172]	; (80022b0 <HAL_DAC_MspInit+0xd4>)
 8002204:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002208:	61d3      	str	r3, [r2, #28]
 800220a:	4b29      	ldr	r3, [pc, #164]	; (80022b0 <HAL_DAC_MspInit+0xd4>)
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002216:	4b26      	ldr	r3, [pc, #152]	; (80022b0 <HAL_DAC_MspInit+0xd4>)
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	4a25      	ldr	r2, [pc, #148]	; (80022b0 <HAL_DAC_MspInit+0xd4>)
 800221c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002220:	6153      	str	r3, [r2, #20]
 8002222:	4b23      	ldr	r3, [pc, #140]	; (80022b0 <HAL_DAC_MspInit+0xd4>)
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800222e:	2310      	movs	r3, #16
 8002230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002232:	2303      	movs	r3, #3
 8002234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223a:	f107 0314 	add.w	r3, r7, #20
 800223e:	4619      	mov	r1, r3
 8002240:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002244:	f002 f8b2 	bl	80043ac <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8002248:	4b1a      	ldr	r3, [pc, #104]	; (80022b4 <HAL_DAC_MspInit+0xd8>)
 800224a:	4a1b      	ldr	r2, [pc, #108]	; (80022b8 <HAL_DAC_MspInit+0xdc>)
 800224c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800224e:	4b19      	ldr	r3, [pc, #100]	; (80022b4 <HAL_DAC_MspInit+0xd8>)
 8002250:	2210      	movs	r2, #16
 8002252:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002254:	4b17      	ldr	r3, [pc, #92]	; (80022b4 <HAL_DAC_MspInit+0xd8>)
 8002256:	2200      	movs	r2, #0
 8002258:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800225a:	4b16      	ldr	r3, [pc, #88]	; (80022b4 <HAL_DAC_MspInit+0xd8>)
 800225c:	2280      	movs	r2, #128	; 0x80
 800225e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002260:	4b14      	ldr	r3, [pc, #80]	; (80022b4 <HAL_DAC_MspInit+0xd8>)
 8002262:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002266:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002268:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <HAL_DAC_MspInit+0xd8>)
 800226a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800226e:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002270:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <HAL_DAC_MspInit+0xd8>)
 8002272:	2220      	movs	r2, #32
 8002274:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002276:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <HAL_DAC_MspInit+0xd8>)
 8002278:	2200      	movs	r2, #0
 800227a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800227c:	480d      	ldr	r0, [pc, #52]	; (80022b4 <HAL_DAC_MspInit+0xd8>)
 800227e:	f001 fe6a 	bl	8003f56 <HAL_DMA_Init>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 8002288:	f7ff ff40 	bl	800210c <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 800228c:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <HAL_DAC_MspInit+0xe0>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a0a      	ldr	r2, [pc, #40]	; (80022bc <HAL_DAC_MspInit+0xe0>)
 8002292:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002296:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a06      	ldr	r2, [pc, #24]	; (80022b4 <HAL_DAC_MspInit+0xd8>)
 800229c:	609a      	str	r2, [r3, #8]
 800229e:	4a05      	ldr	r2, [pc, #20]	; (80022b4 <HAL_DAC_MspInit+0xd8>)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80022a4:	bf00      	nop
 80022a6:	3728      	adds	r7, #40	; 0x28
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40007400 	.word	0x40007400
 80022b0:	40021000 	.word	0x40021000
 80022b4:	2000020c 	.word	0x2000020c
 80022b8:	40020030 	.word	0x40020030
 80022bc:	40010000 	.word	0x40010000

080022c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d0:	d114      	bne.n	80022fc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022d2:	4b19      	ldr	r3, [pc, #100]	; (8002338 <HAL_TIM_Base_MspInit+0x78>)
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	4a18      	ldr	r2, [pc, #96]	; (8002338 <HAL_TIM_Base_MspInit+0x78>)
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	61d3      	str	r3, [r2, #28]
 80022de:	4b16      	ldr	r3, [pc, #88]	; (8002338 <HAL_TIM_Base_MspInit+0x78>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80022ea:	2200      	movs	r2, #0
 80022ec:	2100      	movs	r1, #0
 80022ee:	201c      	movs	r0, #28
 80022f0:	f001 fc35 	bl	8003b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022f4:	201c      	movs	r0, #28
 80022f6:	f001 fc4e 	bl	8003b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80022fa:	e018      	b.n	800232e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM16)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a0e      	ldr	r2, [pc, #56]	; (800233c <HAL_TIM_Base_MspInit+0x7c>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d113      	bne.n	800232e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002306:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <HAL_TIM_Base_MspInit+0x78>)
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	4a0b      	ldr	r2, [pc, #44]	; (8002338 <HAL_TIM_Base_MspInit+0x78>)
 800230c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002310:	6193      	str	r3, [r2, #24]
 8002312:	4b09      	ldr	r3, [pc, #36]	; (8002338 <HAL_TIM_Base_MspInit+0x78>)
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800231e:	2200      	movs	r2, #0
 8002320:	2100      	movs	r1, #0
 8002322:	2019      	movs	r0, #25
 8002324:	f001 fc1b 	bl	8003b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002328:	2019      	movs	r0, #25
 800232a:	f001 fc34 	bl	8003b96 <HAL_NVIC_EnableIRQ>
}
 800232e:	bf00      	nop
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40021000 	.word	0x40021000
 800233c:	40014400 	.word	0x40014400

08002340 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b08a      	sub	sp, #40	; 0x28
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a1b      	ldr	r2, [pc, #108]	; (80023cc <HAL_UART_MspInit+0x8c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d130      	bne.n	80023c4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002362:	4b1b      	ldr	r3, [pc, #108]	; (80023d0 <HAL_UART_MspInit+0x90>)
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	4a1a      	ldr	r2, [pc, #104]	; (80023d0 <HAL_UART_MspInit+0x90>)
 8002368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800236c:	61d3      	str	r3, [r2, #28]
 800236e:	4b18      	ldr	r3, [pc, #96]	; (80023d0 <HAL_UART_MspInit+0x90>)
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002376:	613b      	str	r3, [r7, #16]
 8002378:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237a:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <HAL_UART_MspInit+0x90>)
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	4a14      	ldr	r2, [pc, #80]	; (80023d0 <HAL_UART_MspInit+0x90>)
 8002380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002384:	6153      	str	r3, [r2, #20]
 8002386:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <HAL_UART_MspInit+0x90>)
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002392:	230c      	movs	r3, #12
 8002394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002396:	2302      	movs	r3, #2
 8002398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239e:	2300      	movs	r3, #0
 80023a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023a2:	2307      	movs	r3, #7
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a6:	f107 0314 	add.w	r3, r7, #20
 80023aa:	4619      	mov	r1, r3
 80023ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023b0:	f001 fffc 	bl	80043ac <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80023b4:	2200      	movs	r2, #0
 80023b6:	2100      	movs	r1, #0
 80023b8:	2026      	movs	r0, #38	; 0x26
 80023ba:	f001 fbd0 	bl	8003b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023be:	2026      	movs	r0, #38	; 0x26
 80023c0:	f001 fbe9 	bl	8003b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80023c4:	bf00      	nop
 80023c6:	3728      	adds	r7, #40	; 0x28
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40004400 	.word	0x40004400
 80023d0:	40021000 	.word	0x40021000

080023d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80023d8:	bf00      	nop
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023e2:	b480      	push	{r7}
 80023e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023e6:	e7fe      	b.n	80023e6 <HardFault_Handler+0x4>

080023e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023ec:	e7fe      	b.n	80023ec <MemManage_Handler+0x4>

080023ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ee:	b480      	push	{r7}
 80023f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023f2:	e7fe      	b.n	80023f2 <BusFault_Handler+0x4>

080023f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023f8:	e7fe      	b.n	80023f8 <UsageFault_Handler+0x4>

080023fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023fa:	b480      	push	{r7}
 80023fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002416:	b480      	push	{r7}
 8002418:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002428:	f000 f8ca 	bl	80025c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800242c:	bf00      	nop
 800242e:	bd80      	pop	{r7, pc}

08002430 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002434:	4802      	ldr	r0, [pc, #8]	; (8002440 <DMA1_Channel3_IRQHandler+0x10>)
 8002436:	f001 feab 	bl	8004190 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	2000020c 	.word	0x2000020c

08002444 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002448:	2040      	movs	r0, #64	; 0x40
 800244a:	f002 f983 	bl	8004754 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800244e:	2080      	movs	r0, #128	; 0x80
 8002450:	f002 f980 	bl	8004754 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002454:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002458:	f002 f97c 	bl	8004754 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800245c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002460:	f002 f978 	bl	8004754 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002464:	bf00      	nop
 8002466:	bd80      	pop	{r7, pc}

08002468 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800246c:	4802      	ldr	r0, [pc, #8]	; (8002478 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800246e:	f003 fe23 	bl	80060b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000374 	.word	0x20000374

0800247c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002480:	4802      	ldr	r0, [pc, #8]	; (800248c <TIM2_IRQHandler+0x10>)
 8002482:	f003 fe19 	bl	80060b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	200002a4 	.word	0x200002a4

08002490 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002494:	4802      	ldr	r0, [pc, #8]	; (80024a0 <USART2_IRQHandler+0x10>)
 8002496:	f004 fb27 	bl	8006ae8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	200002f0 	.word	0x200002f0

080024a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80024a8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80024ac:	f002 f952 	bl	8004754 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80024b0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80024b4:	f002 f94e 	bl	8004754 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024b8:	bf00      	nop
 80024ba:	bd80      	pop	{r7, pc}

080024bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024c0:	4b06      	ldr	r3, [pc, #24]	; (80024dc <SystemInit+0x20>)
 80024c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c6:	4a05      	ldr	r2, [pc, #20]	; (80024dc <SystemInit+0x20>)
 80024c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80024e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002518 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024e4:	480d      	ldr	r0, [pc, #52]	; (800251c <LoopForever+0x6>)
  ldr r1, =_edata
 80024e6:	490e      	ldr	r1, [pc, #56]	; (8002520 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024e8:	4a0e      	ldr	r2, [pc, #56]	; (8002524 <LoopForever+0xe>)
  movs r3, #0
 80024ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024ec:	e002      	b.n	80024f4 <LoopCopyDataInit>

080024ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024f2:	3304      	adds	r3, #4

080024f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024f8:	d3f9      	bcc.n	80024ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024fa:	4a0b      	ldr	r2, [pc, #44]	; (8002528 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024fc:	4c0b      	ldr	r4, [pc, #44]	; (800252c <LoopForever+0x16>)
  movs r3, #0
 80024fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002500:	e001      	b.n	8002506 <LoopFillZerobss>

08002502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002504:	3204      	adds	r2, #4

08002506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002508:	d3fb      	bcc.n	8002502 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800250a:	f7ff ffd7 	bl	80024bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800250e:	f005 fc25 	bl	8007d5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002512:	f7fe fd87 	bl	8001024 <main>

08002516 <LoopForever>:

LoopForever:
    b LoopForever
 8002516:	e7fe      	b.n	8002516 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002518:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800251c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002520:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8002524:	08009080 	.word	0x08009080
  ldr r2, =_sbss
 8002528:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 800252c:	200003c4 	.word	0x200003c4

08002530 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002530:	e7fe      	b.n	8002530 <ADC1_2_IRQHandler>
	...

08002534 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002538:	4b08      	ldr	r3, [pc, #32]	; (800255c <HAL_Init+0x28>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a07      	ldr	r2, [pc, #28]	; (800255c <HAL_Init+0x28>)
 800253e:	f043 0310 	orr.w	r3, r3, #16
 8002542:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002544:	2003      	movs	r0, #3
 8002546:	f001 faff 	bl	8003b48 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800254a:	2000      	movs	r0, #0
 800254c:	f000 f808 	bl	8002560 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002550:	f7ff fde4 	bl	800211c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40022000 	.word	0x40022000

08002560 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002568:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <HAL_InitTick+0x54>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <HAL_InitTick+0x58>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	4619      	mov	r1, r3
 8002572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002576:	fbb3 f3f1 	udiv	r3, r3, r1
 800257a:	fbb2 f3f3 	udiv	r3, r2, r3
 800257e:	4618      	mov	r0, r3
 8002580:	f001 fb17 	bl	8003bb2 <HAL_SYSTICK_Config>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e00e      	b.n	80025ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b0f      	cmp	r3, #15
 8002592:	d80a      	bhi.n	80025aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002594:	2200      	movs	r2, #0
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	f04f 30ff 	mov.w	r0, #4294967295
 800259c:	f001 fadf 	bl	8003b5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025a0:	4a06      	ldr	r2, [pc, #24]	; (80025bc <HAL_InitTick+0x5c>)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	e000      	b.n	80025ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20000010 	.word	0x20000010
 80025b8:	20000018 	.word	0x20000018
 80025bc:	20000014 	.word	0x20000014

080025c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025c4:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <HAL_IncTick+0x20>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	461a      	mov	r2, r3
 80025ca:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <HAL_IncTick+0x24>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4413      	add	r3, r2
 80025d0:	4a04      	ldr	r2, [pc, #16]	; (80025e4 <HAL_IncTick+0x24>)
 80025d2:	6013      	str	r3, [r2, #0]
}
 80025d4:	bf00      	nop
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	20000018 	.word	0x20000018
 80025e4:	200003c0 	.word	0x200003c0

080025e8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  return uwTick;  
 80025ec:	4b03      	ldr	r3, [pc, #12]	; (80025fc <HAL_GetTick+0x14>)
 80025ee:	681b      	ldr	r3, [r3, #0]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	200003c0 	.word	0x200003c0

08002600 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002608:	f7ff ffee 	bl	80025e8 <HAL_GetTick>
 800260c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002618:	d005      	beq.n	8002626 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800261a:	4b09      	ldr	r3, [pc, #36]	; (8002640 <HAL_Delay+0x40>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	461a      	mov	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4413      	add	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002626:	bf00      	nop
 8002628:	f7ff ffde 	bl	80025e8 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	429a      	cmp	r2, r3
 8002636:	d8f7      	bhi.n	8002628 <HAL_Delay+0x28>
  {
  }
}
 8002638:	bf00      	nop
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	20000018 	.word	0x20000018

08002644 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b09a      	sub	sp, #104	; 0x68
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800264c:	2300      	movs	r3, #0
 800264e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002652:	2300      	movs	r3, #0
 8002654:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002656:	2300      	movs	r3, #0
 8002658:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e1e3      	b.n	8002a2c <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f003 0310 	and.w	r3, r3, #16
 8002672:	2b00      	cmp	r3, #0
 8002674:	d176      	bne.n	8002764 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	2b00      	cmp	r3, #0
 800267c:	d152      	bne.n	8002724 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7ff fd63 	bl	8002164 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d13b      	bne.n	8002724 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f001 f861 	bl	8003774 <ADC_Disable>
 80026b2:	4603      	mov	r3, r0
 80026b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	f003 0310 	and.w	r3, r3, #16
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d12f      	bne.n	8002724 <HAL_ADC_Init+0xe0>
 80026c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d12b      	bne.n	8002724 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026d4:	f023 0302 	bic.w	r3, r3, #2
 80026d8:	f043 0202 	orr.w	r2, r3, #2
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026ee:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80026fe:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002700:	4b92      	ldr	r3, [pc, #584]	; (800294c <HAL_ADC_Init+0x308>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a92      	ldr	r2, [pc, #584]	; (8002950 <HAL_ADC_Init+0x30c>)
 8002706:	fba2 2303 	umull	r2, r3, r2, r3
 800270a:	0c9a      	lsrs	r2, r3, #18
 800270c:	4613      	mov	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002716:	e002      	b.n	800271e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	3b01      	subs	r3, #1
 800271c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1f9      	bne.n	8002718 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d007      	beq.n	8002742 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800273c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002740:	d110      	bne.n	8002764 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	f023 0312 	bic.w	r3, r3, #18
 800274a:	f043 0210 	orr.w	r2, r3, #16
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	f043 0201 	orr.w	r2, r3, #1
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	f003 0310 	and.w	r3, r3, #16
 800276c:	2b00      	cmp	r3, #0
 800276e:	f040 8150 	bne.w	8002a12 <HAL_ADC_Init+0x3ce>
 8002772:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002776:	2b00      	cmp	r3, #0
 8002778:	f040 814b 	bne.w	8002a12 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002786:	2b00      	cmp	r3, #0
 8002788:	f040 8143 	bne.w	8002a12 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002794:	f043 0202 	orr.w	r2, r3, #2
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027a4:	d004      	beq.n	80027b0 <HAL_ADC_Init+0x16c>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a6a      	ldr	r2, [pc, #424]	; (8002954 <HAL_ADC_Init+0x310>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d101      	bne.n	80027b4 <HAL_ADC_Init+0x170>
 80027b0:	4b69      	ldr	r3, [pc, #420]	; (8002958 <HAL_ADC_Init+0x314>)
 80027b2:	e000      	b.n	80027b6 <HAL_ADC_Init+0x172>
 80027b4:	4b69      	ldr	r3, [pc, #420]	; (800295c <HAL_ADC_Init+0x318>)
 80027b6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027c0:	d102      	bne.n	80027c8 <HAL_ADC_Init+0x184>
 80027c2:	4b64      	ldr	r3, [pc, #400]	; (8002954 <HAL_ADC_Init+0x310>)
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	e01a      	b.n	80027fe <HAL_ADC_Init+0x1ba>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a61      	ldr	r2, [pc, #388]	; (8002954 <HAL_ADC_Init+0x310>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d103      	bne.n	80027da <HAL_ADC_Init+0x196>
 80027d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	e011      	b.n	80027fe <HAL_ADC_Init+0x1ba>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a60      	ldr	r2, [pc, #384]	; (8002960 <HAL_ADC_Init+0x31c>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d102      	bne.n	80027ea <HAL_ADC_Init+0x1a6>
 80027e4:	4b5f      	ldr	r3, [pc, #380]	; (8002964 <HAL_ADC_Init+0x320>)
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	e009      	b.n	80027fe <HAL_ADC_Init+0x1ba>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a5d      	ldr	r2, [pc, #372]	; (8002964 <HAL_ADC_Init+0x320>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d102      	bne.n	80027fa <HAL_ADC_Init+0x1b6>
 80027f4:	4b5a      	ldr	r3, [pc, #360]	; (8002960 <HAL_ADC_Init+0x31c>)
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	e001      	b.n	80027fe <HAL_ADC_Init+0x1ba>
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 0303 	and.w	r3, r3, #3
 8002808:	2b01      	cmp	r3, #1
 800280a:	d108      	bne.n	800281e <HAL_ADC_Init+0x1da>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b01      	cmp	r3, #1
 8002818:	d101      	bne.n	800281e <HAL_ADC_Init+0x1da>
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <HAL_ADC_Init+0x1dc>
 800281e:	2300      	movs	r3, #0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d11c      	bne.n	800285e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002824:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002826:	2b00      	cmp	r3, #0
 8002828:	d010      	beq.n	800284c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	2b01      	cmp	r3, #1
 8002834:	d107      	bne.n	8002846 <HAL_ADC_Init+0x202>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b01      	cmp	r3, #1
 8002840:	d101      	bne.n	8002846 <HAL_ADC_Init+0x202>
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <HAL_ADC_Init+0x204>
 8002846:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002848:	2b00      	cmp	r3, #0
 800284a:	d108      	bne.n	800285e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800284c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	431a      	orrs	r2, r3
 800285a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800285c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	7e5b      	ldrb	r3, [r3, #25]
 8002862:	035b      	lsls	r3, r3, #13
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002868:	2a01      	cmp	r2, #1
 800286a:	d002      	beq.n	8002872 <HAL_ADC_Init+0x22e>
 800286c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002870:	e000      	b.n	8002874 <HAL_ADC_Init+0x230>
 8002872:	2200      	movs	r2, #0
 8002874:	431a      	orrs	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	4313      	orrs	r3, r2
 8002882:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002884:	4313      	orrs	r3, r2
 8002886:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d11b      	bne.n	80028ca <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	7e5b      	ldrb	r3, [r3, #25]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d109      	bne.n	80028ae <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	3b01      	subs	r3, #1
 80028a0:	045a      	lsls	r2, r3, #17
 80028a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028aa:	663b      	str	r3, [r7, #96]	; 0x60
 80028ac:	e00d      	b.n	80028ca <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80028b6:	f043 0220 	orr.w	r2, r3, #32
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	f043 0201 	orr.w	r2, r3, #1
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d054      	beq.n	800297c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a22      	ldr	r2, [pc, #136]	; (8002960 <HAL_ADC_Init+0x31c>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d004      	beq.n	80028e6 <HAL_ADC_Init+0x2a2>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a20      	ldr	r2, [pc, #128]	; (8002964 <HAL_ADC_Init+0x320>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d140      	bne.n	8002968 <HAL_ADC_Init+0x324>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ea:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80028ee:	d02a      	beq.n	8002946 <HAL_ADC_Init+0x302>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028f8:	d022      	beq.n	8002940 <HAL_ADC_Init+0x2fc>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fe:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002902:	d01a      	beq.n	800293a <HAL_ADC_Init+0x2f6>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002908:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 800290c:	d012      	beq.n	8002934 <HAL_ADC_Init+0x2f0>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002912:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8002916:	d00a      	beq.n	800292e <HAL_ADC_Init+0x2ea>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291c:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8002920:	d002      	beq.n	8002928 <HAL_ADC_Init+0x2e4>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002926:	e023      	b.n	8002970 <HAL_ADC_Init+0x32c>
 8002928:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800292c:	e020      	b.n	8002970 <HAL_ADC_Init+0x32c>
 800292e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002932:	e01d      	b.n	8002970 <HAL_ADC_Init+0x32c>
 8002934:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002938:	e01a      	b.n	8002970 <HAL_ADC_Init+0x32c>
 800293a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800293e:	e017      	b.n	8002970 <HAL_ADC_Init+0x32c>
 8002940:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002944:	e014      	b.n	8002970 <HAL_ADC_Init+0x32c>
 8002946:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800294a:	e011      	b.n	8002970 <HAL_ADC_Init+0x32c>
 800294c:	20000010 	.word	0x20000010
 8002950:	431bde83 	.word	0x431bde83
 8002954:	50000100 	.word	0x50000100
 8002958:	50000300 	.word	0x50000300
 800295c:	50000700 	.word	0x50000700
 8002960:	50000400 	.word	0x50000400
 8002964:	50000500 	.word	0x50000500
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002974:	4313      	orrs	r3, r2
 8002976:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002978:	4313      	orrs	r3, r2
 800297a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	2b00      	cmp	r3, #0
 8002988:	d114      	bne.n	80029b4 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6812      	ldr	r2, [r2, #0]
 8002994:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002998:	f023 0302 	bic.w	r3, r3, #2
 800299c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	7e1b      	ldrb	r3, [r3, #24]
 80029a2:	039a      	lsls	r2, r3, #14
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	4313      	orrs	r3, r2
 80029ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80029b0:	4313      	orrs	r3, r2
 80029b2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	4b1e      	ldr	r3, [pc, #120]	; (8002a34 <HAL_ADC_Init+0x3f0>)
 80029bc:	4013      	ands	r3, r2
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6812      	ldr	r2, [r2, #0]
 80029c2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80029c4:	430b      	orrs	r3, r1
 80029c6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d10c      	bne.n	80029ea <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	f023 010f 	bic.w	r1, r3, #15
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	1e5a      	subs	r2, r3, #1
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	631a      	str	r2, [r3, #48]	; 0x30
 80029e8:	e007      	b.n	80029fa <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 020f 	bic.w	r2, r2, #15
 80029f8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	f023 0303 	bic.w	r3, r3, #3
 8002a08:	f043 0201 	orr.w	r2, r3, #1
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	641a      	str	r2, [r3, #64]	; 0x40
 8002a10:	e00a      	b.n	8002a28 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	f023 0312 	bic.w	r3, r3, #18
 8002a1a:	f043 0210 	orr.w	r2, r3, #16
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002a22:	2301      	movs	r3, #1
 8002a24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002a28:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3768      	adds	r7, #104	; 0x68
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	fff0c007 	.word	0xfff0c007

08002a38 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a40:	2300      	movs	r3, #0
 8002a42:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 0304 	and.w	r3, r3, #4
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f040 80f9 	bne.w	8002c46 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d101      	bne.n	8002a62 <HAL_ADC_Start+0x2a>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	e0f4      	b.n	8002c4c <HAL_ADC_Start+0x214>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 fe1e 	bl	80036ac <ADC_Enable>
 8002a70:	4603      	mov	r3, r0
 8002a72:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f040 80e0 	bne.w	8002c3c <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a84:	f023 0301 	bic.w	r3, r3, #1
 8002a88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a98:	d004      	beq.n	8002aa4 <HAL_ADC_Start+0x6c>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a6d      	ldr	r2, [pc, #436]	; (8002c54 <HAL_ADC_Start+0x21c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d106      	bne.n	8002ab2 <HAL_ADC_Start+0x7a>
 8002aa4:	4b6c      	ldr	r3, [pc, #432]	; (8002c58 <HAL_ADC_Start+0x220>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 031f 	and.w	r3, r3, #31
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d010      	beq.n	8002ad2 <HAL_ADC_Start+0x9a>
 8002ab0:	e005      	b.n	8002abe <HAL_ADC_Start+0x86>
 8002ab2:	4b6a      	ldr	r3, [pc, #424]	; (8002c5c <HAL_ADC_Start+0x224>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 031f 	and.w	r3, r3, #31
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d009      	beq.n	8002ad2 <HAL_ADC_Start+0x9a>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ac6:	d004      	beq.n	8002ad2 <HAL_ADC_Start+0x9a>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a64      	ldr	r2, [pc, #400]	; (8002c60 <HAL_ADC_Start+0x228>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d115      	bne.n	8002afe <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d036      	beq.n	8002b5a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002af4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002afc:	e02d      	b.n	8002b5a <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b12:	d004      	beq.n	8002b1e <HAL_ADC_Start+0xe6>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a4e      	ldr	r2, [pc, #312]	; (8002c54 <HAL_ADC_Start+0x21c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d10a      	bne.n	8002b34 <HAL_ADC_Start+0xfc>
 8002b1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	bf14      	ite	ne
 8002b2c:	2301      	movne	r3, #1
 8002b2e:	2300      	moveq	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	e008      	b.n	8002b46 <HAL_ADC_Start+0x10e>
 8002b34:	4b4a      	ldr	r3, [pc, #296]	; (8002c60 <HAL_ADC_Start+0x228>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	bf14      	ite	ne
 8002b40:	2301      	movne	r3, #1
 8002b42:	2300      	moveq	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d007      	beq.n	8002b5a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b52:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b66:	d106      	bne.n	8002b76 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6c:	f023 0206 	bic.w	r2, r3, #6
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	645a      	str	r2, [r3, #68]	; 0x44
 8002b74:	e002      	b.n	8002b7c <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	221c      	movs	r2, #28
 8002b8a:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b94:	d004      	beq.n	8002ba0 <HAL_ADC_Start+0x168>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a2e      	ldr	r2, [pc, #184]	; (8002c54 <HAL_ADC_Start+0x21c>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d106      	bne.n	8002bae <HAL_ADC_Start+0x176>
 8002ba0:	4b2d      	ldr	r3, [pc, #180]	; (8002c58 <HAL_ADC_Start+0x220>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 031f 	and.w	r3, r3, #31
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d03e      	beq.n	8002c2a <HAL_ADC_Start+0x1f2>
 8002bac:	e005      	b.n	8002bba <HAL_ADC_Start+0x182>
 8002bae:	4b2b      	ldr	r3, [pc, #172]	; (8002c5c <HAL_ADC_Start+0x224>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 031f 	and.w	r3, r3, #31
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d037      	beq.n	8002c2a <HAL_ADC_Start+0x1f2>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bc2:	d004      	beq.n	8002bce <HAL_ADC_Start+0x196>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a22      	ldr	r2, [pc, #136]	; (8002c54 <HAL_ADC_Start+0x21c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d106      	bne.n	8002bdc <HAL_ADC_Start+0x1a4>
 8002bce:	4b22      	ldr	r3, [pc, #136]	; (8002c58 <HAL_ADC_Start+0x220>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 031f 	and.w	r3, r3, #31
 8002bd6:	2b05      	cmp	r3, #5
 8002bd8:	d027      	beq.n	8002c2a <HAL_ADC_Start+0x1f2>
 8002bda:	e005      	b.n	8002be8 <HAL_ADC_Start+0x1b0>
 8002bdc:	4b1f      	ldr	r3, [pc, #124]	; (8002c5c <HAL_ADC_Start+0x224>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 031f 	and.w	r3, r3, #31
 8002be4:	2b05      	cmp	r3, #5
 8002be6:	d020      	beq.n	8002c2a <HAL_ADC_Start+0x1f2>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bf0:	d004      	beq.n	8002bfc <HAL_ADC_Start+0x1c4>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a17      	ldr	r2, [pc, #92]	; (8002c54 <HAL_ADC_Start+0x21c>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d106      	bne.n	8002c0a <HAL_ADC_Start+0x1d2>
 8002bfc:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <HAL_ADC_Start+0x220>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 031f 	and.w	r3, r3, #31
 8002c04:	2b09      	cmp	r3, #9
 8002c06:	d010      	beq.n	8002c2a <HAL_ADC_Start+0x1f2>
 8002c08:	e005      	b.n	8002c16 <HAL_ADC_Start+0x1de>
 8002c0a:	4b14      	ldr	r3, [pc, #80]	; (8002c5c <HAL_ADC_Start+0x224>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 031f 	and.w	r3, r3, #31
 8002c12:	2b09      	cmp	r3, #9
 8002c14:	d009      	beq.n	8002c2a <HAL_ADC_Start+0x1f2>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c1e:	d004      	beq.n	8002c2a <HAL_ADC_Start+0x1f2>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a0e      	ldr	r2, [pc, #56]	; (8002c60 <HAL_ADC_Start+0x228>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d10f      	bne.n	8002c4a <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f042 0204 	orr.w	r2, r2, #4
 8002c38:	609a      	str	r2, [r3, #8]
 8002c3a:	e006      	b.n	8002c4a <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002c44:	e001      	b.n	8002c4a <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c46:	2302      	movs	r3, #2
 8002c48:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	50000100 	.word	0x50000100
 8002c58:	50000300 	.word	0x50000300
 8002c5c:	50000700 	.word	0x50000700
 8002c60:	50000400 	.word	0x50000400

08002c64 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d101      	bne.n	8002c7e <HAL_ADC_Stop+0x1a>
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	e023      	b.n	8002cc6 <HAL_ADC_Stop+0x62>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002c86:	216c      	movs	r1, #108	; 0x6c
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 fdd9 	bl	8003840 <ADC_ConversionStop>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d111      	bne.n	8002cbc <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 fd6b 	bl	8003774 <ADC_Disable>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d109      	bne.n	8002cbc <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002cb0:	f023 0301 	bic.w	r3, r3, #1
 8002cb4:	f043 0201 	orr.w	r2, r3, #1
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
	...

08002cd0 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	2b08      	cmp	r3, #8
 8002ce4:	d102      	bne.n	8002cec <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002ce6:	2308      	movs	r3, #8
 8002ce8:	617b      	str	r3, [r7, #20]
 8002cea:	e03a      	b.n	8002d62 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cf4:	d004      	beq.n	8002d00 <HAL_ADC_PollForConversion+0x30>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a72      	ldr	r2, [pc, #456]	; (8002ec4 <HAL_ADC_PollForConversion+0x1f4>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d101      	bne.n	8002d04 <HAL_ADC_PollForConversion+0x34>
 8002d00:	4b71      	ldr	r3, [pc, #452]	; (8002ec8 <HAL_ADC_PollForConversion+0x1f8>)
 8002d02:	e000      	b.n	8002d06 <HAL_ADC_PollForConversion+0x36>
 8002d04:	4b71      	ldr	r3, [pc, #452]	; (8002ecc <HAL_ADC_PollForConversion+0x1fc>)
 8002d06:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 031f 	and.w	r3, r3, #31
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d112      	bne.n	8002d3a <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d11d      	bne.n	8002d5e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	f043 0220 	orr.w	r2, r3, #32
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e0bf      	b.n	8002eba <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00b      	beq.n	8002d5e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f043 0220 	orr.w	r2, r3, #32
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e0ad      	b.n	8002eba <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002d5e:	230c      	movs	r3, #12
 8002d60:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d6a:	d004      	beq.n	8002d76 <HAL_ADC_PollForConversion+0xa6>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a54      	ldr	r2, [pc, #336]	; (8002ec4 <HAL_ADC_PollForConversion+0x1f4>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d106      	bne.n	8002d84 <HAL_ADC_PollForConversion+0xb4>
 8002d76:	4b54      	ldr	r3, [pc, #336]	; (8002ec8 <HAL_ADC_PollForConversion+0x1f8>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 031f 	and.w	r3, r3, #31
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d010      	beq.n	8002da4 <HAL_ADC_PollForConversion+0xd4>
 8002d82:	e005      	b.n	8002d90 <HAL_ADC_PollForConversion+0xc0>
 8002d84:	4b51      	ldr	r3, [pc, #324]	; (8002ecc <HAL_ADC_PollForConversion+0x1fc>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 031f 	and.w	r3, r3, #31
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d009      	beq.n	8002da4 <HAL_ADC_PollForConversion+0xd4>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d98:	d004      	beq.n	8002da4 <HAL_ADC_PollForConversion+0xd4>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a4c      	ldr	r2, [pc, #304]	; (8002ed0 <HAL_ADC_PollForConversion+0x200>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d104      	bne.n	8002dae <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	613b      	str	r3, [r7, #16]
 8002dac:	e00f      	b.n	8002dce <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002db6:	d004      	beq.n	8002dc2 <HAL_ADC_PollForConversion+0xf2>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a41      	ldr	r2, [pc, #260]	; (8002ec4 <HAL_ADC_PollForConversion+0x1f4>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d102      	bne.n	8002dc8 <HAL_ADC_PollForConversion+0xf8>
 8002dc2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002dc6:	e000      	b.n	8002dca <HAL_ADC_PollForConversion+0xfa>
 8002dc8:	4b41      	ldr	r3, [pc, #260]	; (8002ed0 <HAL_ADC_PollForConversion+0x200>)
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002dce:	f7ff fc0b 	bl	80025e8 <HAL_GetTick>
 8002dd2:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002dd4:	e021      	b.n	8002e1a <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ddc:	d01d      	beq.n	8002e1a <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d007      	beq.n	8002df4 <HAL_ADC_PollForConversion+0x124>
 8002de4:	f7ff fc00 	bl	80025e8 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d212      	bcs.n	8002e1a <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10b      	bne.n	8002e1a <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	f043 0204 	orr.w	r2, r3, #4
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e04f      	b.n	8002eba <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	4013      	ands	r3, r2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0d6      	beq.n	8002dd6 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d131      	bne.n	8002ea6 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d12c      	bne.n	8002ea6 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d125      	bne.n	8002ea6 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d112      	bne.n	8002e8e <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d112      	bne.n	8002ea6 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	f043 0201 	orr.w	r2, r3, #1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	641a      	str	r2, [r3, #64]	; 0x40
 8002e8c:	e00b      	b.n	8002ea6 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	f043 0220 	orr.w	r2, r3, #32
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9e:	f043 0201 	orr.w	r2, r3, #1
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d103      	bne.n	8002eb8 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	50000100 	.word	0x50000100
 8002ec8:	50000300 	.word	0x50000300
 8002ecc:	50000700 	.word	0x50000700
 8002ed0:	50000400 	.word	0x50000400

08002ed4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
	...

08002ef0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b09b      	sub	sp, #108	; 0x6c
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002efa:	2300      	movs	r3, #0
 8002efc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x22>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e2cb      	b.n	80034aa <HAL_ADC_ConfigChannel+0x5ba>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f040 82af 	bne.w	8003488 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d81c      	bhi.n	8002f6c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	4413      	add	r3, r2
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	461a      	mov	r2, r3
 8002f46:	231f      	movs	r3, #31
 8002f48:	4093      	lsls	r3, r2
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	4019      	ands	r1, r3
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	6818      	ldr	r0, [r3, #0]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	4613      	mov	r3, r2
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	4413      	add	r3, r2
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	fa00 f203 	lsl.w	r2, r0, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	631a      	str	r2, [r3, #48]	; 0x30
 8002f6a:	e063      	b.n	8003034 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2b09      	cmp	r3, #9
 8002f72:	d81e      	bhi.n	8002fb2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	4413      	add	r3, r2
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	3b1e      	subs	r3, #30
 8002f88:	221f      	movs	r2, #31
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	4019      	ands	r1, r3
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	6818      	ldr	r0, [r3, #0]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	4413      	add	r3, r2
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	3b1e      	subs	r3, #30
 8002fa4:	fa00 f203 	lsl.w	r2, r0, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	635a      	str	r2, [r3, #52]	; 0x34
 8002fb0:	e040      	b.n	8003034 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b0e      	cmp	r3, #14
 8002fb8:	d81e      	bhi.n	8002ff8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	4413      	add	r3, r2
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	3b3c      	subs	r3, #60	; 0x3c
 8002fce:	221f      	movs	r2, #31
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	4019      	ands	r1, r3
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	6818      	ldr	r0, [r3, #0]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	4413      	add	r3, r2
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	3b3c      	subs	r3, #60	; 0x3c
 8002fea:	fa00 f203 	lsl.w	r2, r0, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	639a      	str	r2, [r3, #56]	; 0x38
 8002ff6:	e01d      	b.n	8003034 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	4613      	mov	r3, r2
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	4413      	add	r3, r2
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	3b5a      	subs	r3, #90	; 0x5a
 800300c:	221f      	movs	r2, #31
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43db      	mvns	r3, r3
 8003014:	4019      	ands	r1, r3
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	6818      	ldr	r0, [r3, #0]
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	4613      	mov	r3, r2
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	4413      	add	r3, r2
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	3b5a      	subs	r3, #90	; 0x5a
 8003028:	fa00 f203 	lsl.w	r2, r0, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	430a      	orrs	r2, r1
 8003032:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	2b00      	cmp	r3, #0
 8003040:	f040 80e5 	bne.w	800320e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b09      	cmp	r3, #9
 800304a:	d91c      	bls.n	8003086 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6999      	ldr	r1, [r3, #24]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	4613      	mov	r3, r2
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	4413      	add	r3, r2
 800305c:	3b1e      	subs	r3, #30
 800305e:	2207      	movs	r2, #7
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	43db      	mvns	r3, r3
 8003066:	4019      	ands	r1, r3
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	6898      	ldr	r0, [r3, #8]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	4613      	mov	r3, r2
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	4413      	add	r3, r2
 8003076:	3b1e      	subs	r3, #30
 8003078:	fa00 f203 	lsl.w	r2, r0, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	619a      	str	r2, [r3, #24]
 8003084:	e019      	b.n	80030ba <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6959      	ldr	r1, [r3, #20]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	4613      	mov	r3, r2
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	4413      	add	r3, r2
 8003096:	2207      	movs	r2, #7
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	43db      	mvns	r3, r3
 800309e:	4019      	ands	r1, r3
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	6898      	ldr	r0, [r3, #8]
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	4613      	mov	r3, r2
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	4413      	add	r3, r2
 80030ae:	fa00 f203 	lsl.w	r2, r0, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	695a      	ldr	r2, [r3, #20]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	08db      	lsrs	r3, r3, #3
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	2b03      	cmp	r3, #3
 80030da:	d84f      	bhi.n	800317c <HAL_ADC_ConfigChannel+0x28c>
 80030dc:	a201      	add	r2, pc, #4	; (adr r2, 80030e4 <HAL_ADC_ConfigChannel+0x1f4>)
 80030de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e2:	bf00      	nop
 80030e4:	080030f5 	.word	0x080030f5
 80030e8:	08003117 	.word	0x08003117
 80030ec:	08003139 	.word	0x08003139
 80030f0:	0800315b 	.word	0x0800315b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030fa:	4b9f      	ldr	r3, [pc, #636]	; (8003378 <HAL_ADC_ConfigChannel+0x488>)
 80030fc:	4013      	ands	r3, r2
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	6812      	ldr	r2, [r2, #0]
 8003102:	0691      	lsls	r1, r2, #26
 8003104:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003106:	430a      	orrs	r2, r1
 8003108:	431a      	orrs	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003112:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003114:	e07e      	b.n	8003214 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800311c:	4b96      	ldr	r3, [pc, #600]	; (8003378 <HAL_ADC_ConfigChannel+0x488>)
 800311e:	4013      	ands	r3, r2
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	0691      	lsls	r1, r2, #26
 8003126:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003128:	430a      	orrs	r2, r1
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003134:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003136:	e06d      	b.n	8003214 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800313e:	4b8e      	ldr	r3, [pc, #568]	; (8003378 <HAL_ADC_ConfigChannel+0x488>)
 8003140:	4013      	ands	r3, r2
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	6812      	ldr	r2, [r2, #0]
 8003146:	0691      	lsls	r1, r2, #26
 8003148:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800314a:	430a      	orrs	r2, r1
 800314c:	431a      	orrs	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003156:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003158:	e05c      	b.n	8003214 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003160:	4b85      	ldr	r3, [pc, #532]	; (8003378 <HAL_ADC_ConfigChannel+0x488>)
 8003162:	4013      	ands	r3, r2
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	6812      	ldr	r2, [r2, #0]
 8003168:	0691      	lsls	r1, r2, #26
 800316a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800316c:	430a      	orrs	r2, r1
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003178:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800317a:	e04b      	b.n	8003214 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003182:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	069b      	lsls	r3, r3, #26
 800318c:	429a      	cmp	r2, r3
 800318e:	d107      	bne.n	80031a0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800319e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	069b      	lsls	r3, r3, #26
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d107      	bne.n	80031c4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031c2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	069b      	lsls	r3, r3, #26
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d107      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031e6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	069b      	lsls	r3, r3, #26
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d10a      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800320a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800320c:	e001      	b.n	8003212 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800320e:	bf00      	nop
 8003210:	e000      	b.n	8003214 <HAL_ADC_ConfigChannel+0x324>
      break;
 8003212:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 0303 	and.w	r3, r3, #3
 800321e:	2b01      	cmp	r3, #1
 8003220:	d108      	bne.n	8003234 <HAL_ADC_ConfigChannel+0x344>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b01      	cmp	r3, #1
 800322e:	d101      	bne.n	8003234 <HAL_ADC_ConfigChannel+0x344>
 8003230:	2301      	movs	r3, #1
 8003232:	e000      	b.n	8003236 <HAL_ADC_ConfigChannel+0x346>
 8003234:	2300      	movs	r3, #0
 8003236:	2b00      	cmp	r3, #0
 8003238:	f040 8131 	bne.w	800349e <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d00f      	beq.n	8003264 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2201      	movs	r2, #1
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	43da      	mvns	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	400a      	ands	r2, r1
 800325e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003262:	e049      	b.n	80032f8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2201      	movs	r2, #1
 8003272:	409a      	lsls	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b09      	cmp	r3, #9
 8003284:	d91c      	bls.n	80032c0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6999      	ldr	r1, [r3, #24]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	4613      	mov	r3, r2
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	4413      	add	r3, r2
 8003296:	3b1b      	subs	r3, #27
 8003298:	2207      	movs	r2, #7
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	43db      	mvns	r3, r3
 80032a0:	4019      	ands	r1, r3
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	6898      	ldr	r0, [r3, #8]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	4613      	mov	r3, r2
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	4413      	add	r3, r2
 80032b0:	3b1b      	subs	r3, #27
 80032b2:	fa00 f203 	lsl.w	r2, r0, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	619a      	str	r2, [r3, #24]
 80032be:	e01b      	b.n	80032f8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6959      	ldr	r1, [r3, #20]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	1c5a      	adds	r2, r3, #1
 80032cc:	4613      	mov	r3, r2
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	4413      	add	r3, r2
 80032d2:	2207      	movs	r2, #7
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	43db      	mvns	r3, r3
 80032da:	4019      	ands	r1, r3
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	6898      	ldr	r0, [r3, #8]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	1c5a      	adds	r2, r3, #1
 80032e6:	4613      	mov	r3, r2
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	4413      	add	r3, r2
 80032ec:	fa00 f203 	lsl.w	r2, r0, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003300:	d004      	beq.n	800330c <HAL_ADC_ConfigChannel+0x41c>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a1d      	ldr	r2, [pc, #116]	; (800337c <HAL_ADC_ConfigChannel+0x48c>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d101      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x420>
 800330c:	4b1c      	ldr	r3, [pc, #112]	; (8003380 <HAL_ADC_ConfigChannel+0x490>)
 800330e:	e000      	b.n	8003312 <HAL_ADC_ConfigChannel+0x422>
 8003310:	4b1c      	ldr	r3, [pc, #112]	; (8003384 <HAL_ADC_ConfigChannel+0x494>)
 8003312:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2b10      	cmp	r3, #16
 800331a:	d105      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800331c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003324:	2b00      	cmp	r3, #0
 8003326:	d015      	beq.n	8003354 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800332c:	2b11      	cmp	r3, #17
 800332e:	d105      	bne.n	800333c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003330:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00b      	beq.n	8003354 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003340:	2b12      	cmp	r3, #18
 8003342:	f040 80ac 	bne.w	800349e <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003346:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800334e:	2b00      	cmp	r3, #0
 8003350:	f040 80a5 	bne.w	800349e <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800335c:	d102      	bne.n	8003364 <HAL_ADC_ConfigChannel+0x474>
 800335e:	4b07      	ldr	r3, [pc, #28]	; (800337c <HAL_ADC_ConfigChannel+0x48c>)
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	e023      	b.n	80033ac <HAL_ADC_ConfigChannel+0x4bc>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a04      	ldr	r2, [pc, #16]	; (800337c <HAL_ADC_ConfigChannel+0x48c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d10c      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x498>
 800336e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	e01a      	b.n	80033ac <HAL_ADC_ConfigChannel+0x4bc>
 8003376:	bf00      	nop
 8003378:	83fff000 	.word	0x83fff000
 800337c:	50000100 	.word	0x50000100
 8003380:	50000300 	.word	0x50000300
 8003384:	50000700 	.word	0x50000700
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a4a      	ldr	r2, [pc, #296]	; (80034b8 <HAL_ADC_ConfigChannel+0x5c8>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d102      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x4a8>
 8003392:	4b4a      	ldr	r3, [pc, #296]	; (80034bc <HAL_ADC_ConfigChannel+0x5cc>)
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	e009      	b.n	80033ac <HAL_ADC_ConfigChannel+0x4bc>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a47      	ldr	r2, [pc, #284]	; (80034bc <HAL_ADC_ConfigChannel+0x5cc>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d102      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x4b8>
 80033a2:	4b45      	ldr	r3, [pc, #276]	; (80034b8 <HAL_ADC_ConfigChannel+0x5c8>)
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	e001      	b.n	80033ac <HAL_ADC_ConfigChannel+0x4bc>
 80033a8:	2300      	movs	r3, #0
 80033aa:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 0303 	and.w	r3, r3, #3
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d108      	bne.n	80033cc <HAL_ADC_ConfigChannel+0x4dc>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d101      	bne.n	80033cc <HAL_ADC_ConfigChannel+0x4dc>
 80033c8:	2301      	movs	r3, #1
 80033ca:	e000      	b.n	80033ce <HAL_ADC_ConfigChannel+0x4de>
 80033cc:	2300      	movs	r3, #0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d150      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80033d2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d010      	beq.n	80033fa <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 0303 	and.w	r3, r3, #3
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d107      	bne.n	80033f4 <HAL_ADC_ConfigChannel+0x504>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d101      	bne.n	80033f4 <HAL_ADC_ConfigChannel+0x504>
 80033f0:	2301      	movs	r3, #1
 80033f2:	e000      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x506>
 80033f4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d13c      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2b10      	cmp	r3, #16
 8003400:	d11d      	bne.n	800343e <HAL_ADC_ConfigChannel+0x54e>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800340a:	d118      	bne.n	800343e <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800340c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003414:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003416:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003418:	4b29      	ldr	r3, [pc, #164]	; (80034c0 <HAL_ADC_ConfigChannel+0x5d0>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a29      	ldr	r2, [pc, #164]	; (80034c4 <HAL_ADC_ConfigChannel+0x5d4>)
 800341e:	fba2 2303 	umull	r2, r3, r2, r3
 8003422:	0c9a      	lsrs	r2, r3, #18
 8003424:	4613      	mov	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800342e:	e002      	b.n	8003436 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	3b01      	subs	r3, #1
 8003434:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1f9      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800343c:	e02e      	b.n	800349c <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b11      	cmp	r3, #17
 8003444:	d10b      	bne.n	800345e <HAL_ADC_ConfigChannel+0x56e>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800344e:	d106      	bne.n	800345e <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003450:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800345a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800345c:	e01e      	b.n	800349c <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2b12      	cmp	r3, #18
 8003464:	d11a      	bne.n	800349c <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003466:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800346e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003470:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003472:	e013      	b.n	800349c <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003478:	f043 0220 	orr.w	r2, r3, #32
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003486:	e00a      	b.n	800349e <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348c:	f043 0220 	orr.w	r2, r3, #32
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800349a:	e000      	b.n	800349e <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800349c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80034a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	376c      	adds	r7, #108	; 0x6c
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	50000400 	.word	0x50000400
 80034bc:	50000500 	.word	0x50000500
 80034c0:	20000010 	.word	0x20000010
 80034c4:	431bde83 	.word	0x431bde83

080034c8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b099      	sub	sp, #100	; 0x64
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034d2:	2300      	movs	r3, #0
 80034d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034e0:	d102      	bne.n	80034e8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80034e2:	4b6d      	ldr	r3, [pc, #436]	; (8003698 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80034e4:	60bb      	str	r3, [r7, #8]
 80034e6:	e01a      	b.n	800351e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a6a      	ldr	r2, [pc, #424]	; (8003698 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d103      	bne.n	80034fa <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80034f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80034f6:	60bb      	str	r3, [r7, #8]
 80034f8:	e011      	b.n	800351e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a67      	ldr	r2, [pc, #412]	; (800369c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d102      	bne.n	800350a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003504:	4b66      	ldr	r3, [pc, #408]	; (80036a0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003506:	60bb      	str	r3, [r7, #8]
 8003508:	e009      	b.n	800351e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a64      	ldr	r2, [pc, #400]	; (80036a0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d102      	bne.n	800351a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003514:	4b61      	ldr	r3, [pc, #388]	; (800369c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003516:	60bb      	str	r3, [r7, #8]
 8003518:	e001      	b.n	800351e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800351a:	2300      	movs	r3, #0
 800351c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e0b0      	b.n	800368a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800352e:	2b01      	cmp	r3, #1
 8003530:	d101      	bne.n	8003536 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003532:	2302      	movs	r3, #2
 8003534:	e0a9      	b.n	800368a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	2b00      	cmp	r3, #0
 800354a:	f040 808d 	bne.w	8003668 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 0304 	and.w	r3, r3, #4
 8003556:	2b00      	cmp	r3, #0
 8003558:	f040 8086 	bne.w	8003668 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003564:	d004      	beq.n	8003570 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a4b      	ldr	r2, [pc, #300]	; (8003698 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d101      	bne.n	8003574 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003570:	4b4c      	ldr	r3, [pc, #304]	; (80036a4 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8003572:	e000      	b.n	8003576 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003574:	4b4c      	ldr	r3, [pc, #304]	; (80036a8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8003576:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d040      	beq.n	8003602 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003580:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	6859      	ldr	r1, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003592:	035b      	lsls	r3, r3, #13
 8003594:	430b      	orrs	r3, r1
 8003596:	431a      	orrs	r2, r3
 8003598:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800359a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 0303 	and.w	r3, r3, #3
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d108      	bne.n	80035bc <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d101      	bne.n	80035bc <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80035b8:	2301      	movs	r3, #1
 80035ba:	e000      	b.n	80035be <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80035bc:	2300      	movs	r3, #0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d15c      	bne.n	800367c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d107      	bne.n	80035de <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d101      	bne.n	80035de <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80035da:	2301      	movs	r3, #1
 80035dc:	e000      	b.n	80035e0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80035de:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d14b      	bne.n	800367c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80035e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80035ec:	f023 030f 	bic.w	r3, r3, #15
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	6811      	ldr	r1, [r2, #0]
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	6892      	ldr	r2, [r2, #8]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	431a      	orrs	r2, r3
 80035fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035fe:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003600:	e03c      	b.n	800367c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003602:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800360a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800360c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 0303 	and.w	r3, r3, #3
 8003618:	2b01      	cmp	r3, #1
 800361a:	d108      	bne.n	800362e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b01      	cmp	r3, #1
 8003628:	d101      	bne.n	800362e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800362e:	2300      	movs	r3, #0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d123      	bne.n	800367c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f003 0303 	and.w	r3, r3, #3
 800363c:	2b01      	cmp	r3, #1
 800363e:	d107      	bne.n	8003650 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b01      	cmp	r3, #1
 800364a:	d101      	bne.n	8003650 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800364c:	2301      	movs	r3, #1
 800364e:	e000      	b.n	8003652 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003650:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003652:	2b00      	cmp	r3, #0
 8003654:	d112      	bne.n	800367c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003656:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800365e:	f023 030f 	bic.w	r3, r3, #15
 8003662:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003664:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003666:	e009      	b.n	800367c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366c:	f043 0220 	orr.w	r2, r3, #32
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800367a:	e000      	b.n	800367e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800367c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003686:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800368a:	4618      	mov	r0, r3
 800368c:	3764      	adds	r7, #100	; 0x64
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	50000100 	.word	0x50000100
 800369c:	50000400 	.word	0x50000400
 80036a0:	50000500 	.word	0x50000500
 80036a4:	50000300 	.word	0x50000300
 80036a8:	50000700 	.word	0x50000700

080036ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 0303 	and.w	r3, r3, #3
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d108      	bne.n	80036d8 <ADC_Enable+0x2c>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d101      	bne.n	80036d8 <ADC_Enable+0x2c>
 80036d4:	2301      	movs	r3, #1
 80036d6:	e000      	b.n	80036da <ADC_Enable+0x2e>
 80036d8:	2300      	movs	r3, #0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d143      	bne.n	8003766 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	4b22      	ldr	r3, [pc, #136]	; (8003770 <ADC_Enable+0xc4>)
 80036e6:	4013      	ands	r3, r2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00d      	beq.n	8003708 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f0:	f043 0210 	orr.w	r2, r3, #16
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fc:	f043 0201 	orr.w	r2, r3, #1
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e02f      	b.n	8003768 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689a      	ldr	r2, [r3, #8]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0201 	orr.w	r2, r2, #1
 8003716:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003718:	f7fe ff66 	bl	80025e8 <HAL_GetTick>
 800371c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800371e:	e01b      	b.n	8003758 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003720:	f7fe ff62 	bl	80025e8 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d914      	bls.n	8003758 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b01      	cmp	r3, #1
 800373a:	d00d      	beq.n	8003758 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	f043 0210 	orr.w	r2, r3, #16
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374c:	f043 0201 	orr.w	r2, r3, #1
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e007      	b.n	8003768 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b01      	cmp	r3, #1
 8003764:	d1dc      	bne.n	8003720 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	8000003f 	.word	0x8000003f

08003774 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800377c:	2300      	movs	r3, #0
 800377e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 0303 	and.w	r3, r3, #3
 800378a:	2b01      	cmp	r3, #1
 800378c:	d108      	bne.n	80037a0 <ADC_Disable+0x2c>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b01      	cmp	r3, #1
 800379a:	d101      	bne.n	80037a0 <ADC_Disable+0x2c>
 800379c:	2301      	movs	r3, #1
 800379e:	e000      	b.n	80037a2 <ADC_Disable+0x2e>
 80037a0:	2300      	movs	r3, #0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d047      	beq.n	8003836 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f003 030d 	and.w	r3, r3, #13
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d10f      	bne.n	80037d4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0202 	orr.w	r2, r2, #2
 80037c2:	609a      	str	r2, [r3, #8]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2203      	movs	r2, #3
 80037ca:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80037cc:	f7fe ff0c 	bl	80025e8 <HAL_GetTick>
 80037d0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80037d2:	e029      	b.n	8003828 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d8:	f043 0210 	orr.w	r2, r3, #16
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e4:	f043 0201 	orr.w	r2, r3, #1
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e023      	b.n	8003838 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80037f0:	f7fe fefa 	bl	80025e8 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d914      	bls.n	8003828 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b01      	cmp	r3, #1
 800380a:	d10d      	bne.n	8003828 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	f043 0210 	orr.w	r2, r3, #16
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381c:	f043 0201 	orr.w	r2, r3, #1
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e007      	b.n	8003838 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b01      	cmp	r3, #1
 8003834:	d0dc      	beq.n	80037f0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 800384a:	2300      	movs	r3, #0
 800384c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800384e:	2300      	movs	r3, #0
 8003850:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003852:	2300      	movs	r3, #0
 8003854:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f003 030c 	and.w	r3, r3, #12
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 809a 	beq.w	800399a <ADC_ConversionStop+0x15a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003870:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003874:	d12a      	bne.n	80038cc <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800387a:	2b01      	cmp	r3, #1
 800387c:	d126      	bne.n	80038cc <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8003882:	2b01      	cmp	r3, #1
 8003884:	d122      	bne.n	80038cc <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8003886:	230c      	movs	r3, #12
 8003888:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800388a:	e014      	b.n	80038b6 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	4a45      	ldr	r2, [pc, #276]	; (80039a4 <ADC_ConversionStop+0x164>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d90d      	bls.n	80038b0 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	f043 0210 	orr.w	r2, r3, #16
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a4:	f043 0201 	orr.w	r2, r3, #1
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e075      	b.n	800399c <ADC_ConversionStop+0x15c>
        }
        Conversion_Timeout_CPU_cycles ++;
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	3301      	adds	r3, #1
 80038b4:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c0:	2b40      	cmp	r3, #64	; 0x40
 80038c2:	d1e3      	bne.n	800388c <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2240      	movs	r2, #64	; 0x40
 80038ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	2b60      	cmp	r3, #96	; 0x60
 80038d0:	d015      	beq.n	80038fe <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b04      	cmp	r3, #4
 80038de:	d10e      	bne.n	80038fe <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d107      	bne.n	80038fe <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f042 0210 	orr.w	r2, r2, #16
 80038fc:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b0c      	cmp	r3, #12
 8003902:	d015      	beq.n	8003930 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	2b08      	cmp	r3, #8
 8003910:	d10e      	bne.n	8003930 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800391c:	2b00      	cmp	r3, #0
 800391e:	d107      	bne.n	8003930 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0220 	orr.w	r2, r2, #32
 800392e:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	2b60      	cmp	r3, #96	; 0x60
 8003934:	d004      	beq.n	8003940 <ADC_ConversionStop+0x100>
 8003936:	2b6c      	cmp	r3, #108	; 0x6c
 8003938:	d105      	bne.n	8003946 <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800393a:	230c      	movs	r3, #12
 800393c:	617b      	str	r3, [r7, #20]
        break;
 800393e:	e005      	b.n	800394c <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003940:	2308      	movs	r3, #8
 8003942:	617b      	str	r3, [r7, #20]
        break;
 8003944:	e002      	b.n	800394c <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003946:	2304      	movs	r3, #4
 8003948:	617b      	str	r3, [r7, #20]
        break;
 800394a:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800394c:	f7fe fe4c 	bl	80025e8 <HAL_GetTick>
 8003950:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003952:	e01b      	b.n	800398c <ADC_ConversionStop+0x14c>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003954:	f7fe fe48 	bl	80025e8 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b0b      	cmp	r3, #11
 8003960:	d914      	bls.n	800398c <ADC_ConversionStop+0x14c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	4013      	ands	r3, r2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00d      	beq.n	800398c <ADC_ConversionStop+0x14c>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003974:	f043 0210 	orr.w	r2, r3, #16
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003980:	f043 0201 	orr.w	r2, r3, #1
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e007      	b.n	800399c <ADC_ConversionStop+0x15c>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689a      	ldr	r2, [r3, #8]
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	4013      	ands	r3, r2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1dc      	bne.n	8003954 <ADC_ConversionStop+0x114>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3718      	adds	r7, #24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	000993ff 	.word	0x000993ff

080039a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039b8:	4b0c      	ldr	r3, [pc, #48]	; (80039ec <__NVIC_SetPriorityGrouping+0x44>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039c4:	4013      	ands	r3, r2
 80039c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039da:	4a04      	ldr	r2, [pc, #16]	; (80039ec <__NVIC_SetPriorityGrouping+0x44>)
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	60d3      	str	r3, [r2, #12]
}
 80039e0:	bf00      	nop
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	e000ed00 	.word	0xe000ed00

080039f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039f4:	4b04      	ldr	r3, [pc, #16]	; (8003a08 <__NVIC_GetPriorityGrouping+0x18>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	0a1b      	lsrs	r3, r3, #8
 80039fa:	f003 0307 	and.w	r3, r3, #7
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr
 8003a08:	e000ed00 	.word	0xe000ed00

08003a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	4603      	mov	r3, r0
 8003a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	db0b      	blt.n	8003a36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a1e:	79fb      	ldrb	r3, [r7, #7]
 8003a20:	f003 021f 	and.w	r2, r3, #31
 8003a24:	4907      	ldr	r1, [pc, #28]	; (8003a44 <__NVIC_EnableIRQ+0x38>)
 8003a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2a:	095b      	lsrs	r3, r3, #5
 8003a2c:	2001      	movs	r0, #1
 8003a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8003a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	e000e100 	.word	0xe000e100

08003a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	6039      	str	r1, [r7, #0]
 8003a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	db0a      	blt.n	8003a72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	490c      	ldr	r1, [pc, #48]	; (8003a94 <__NVIC_SetPriority+0x4c>)
 8003a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a66:	0112      	lsls	r2, r2, #4
 8003a68:	b2d2      	uxtb	r2, r2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a70:	e00a      	b.n	8003a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	4908      	ldr	r1, [pc, #32]	; (8003a98 <__NVIC_SetPriority+0x50>)
 8003a78:	79fb      	ldrb	r3, [r7, #7]
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	3b04      	subs	r3, #4
 8003a80:	0112      	lsls	r2, r2, #4
 8003a82:	b2d2      	uxtb	r2, r2
 8003a84:	440b      	add	r3, r1
 8003a86:	761a      	strb	r2, [r3, #24]
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	e000e100 	.word	0xe000e100
 8003a98:	e000ed00 	.word	0xe000ed00

08003a9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b089      	sub	sp, #36	; 0x24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	f1c3 0307 	rsb	r3, r3, #7
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	bf28      	it	cs
 8003aba:	2304      	movcs	r3, #4
 8003abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	2b06      	cmp	r3, #6
 8003ac4:	d902      	bls.n	8003acc <NVIC_EncodePriority+0x30>
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	3b03      	subs	r3, #3
 8003aca:	e000      	b.n	8003ace <NVIC_EncodePriority+0x32>
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ada:	43da      	mvns	r2, r3
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	401a      	ands	r2, r3
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	fa01 f303 	lsl.w	r3, r1, r3
 8003aee:	43d9      	mvns	r1, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003af4:	4313      	orrs	r3, r2
         );
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3724      	adds	r7, #36	; 0x24
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
	...

08003b04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b14:	d301      	bcc.n	8003b1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b16:	2301      	movs	r3, #1
 8003b18:	e00f      	b.n	8003b3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b1a:	4a0a      	ldr	r2, [pc, #40]	; (8003b44 <SysTick_Config+0x40>)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b22:	210f      	movs	r1, #15
 8003b24:	f04f 30ff 	mov.w	r0, #4294967295
 8003b28:	f7ff ff8e 	bl	8003a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b2c:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <SysTick_Config+0x40>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b32:	4b04      	ldr	r3, [pc, #16]	; (8003b44 <SysTick_Config+0x40>)
 8003b34:	2207      	movs	r2, #7
 8003b36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	e000e010 	.word	0xe000e010

08003b48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7ff ff29 	bl	80039a8 <__NVIC_SetPriorityGrouping>
}
 8003b56:	bf00      	nop
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b086      	sub	sp, #24
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	4603      	mov	r3, r0
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	607a      	str	r2, [r7, #4]
 8003b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b70:	f7ff ff3e 	bl	80039f0 <__NVIC_GetPriorityGrouping>
 8003b74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	68b9      	ldr	r1, [r7, #8]
 8003b7a:	6978      	ldr	r0, [r7, #20]
 8003b7c:	f7ff ff8e 	bl	8003a9c <NVIC_EncodePriority>
 8003b80:	4602      	mov	r2, r0
 8003b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b86:	4611      	mov	r1, r2
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff ff5d 	bl	8003a48 <__NVIC_SetPriority>
}
 8003b8e:	bf00      	nop
 8003b90:	3718      	adds	r7, #24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b082      	sub	sp, #8
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7ff ff31 	bl	8003a0c <__NVIC_EnableIRQ>
}
 8003baa:	bf00      	nop
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b082      	sub	sp, #8
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7ff ffa2 	bl	8003b04 <SysTick_Config>
 8003bc0:	4603      	mov	r3, r0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b082      	sub	sp, #8
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e014      	b.n	8003c06 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	791b      	ldrb	r3, [r3, #4]
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d105      	bne.n	8003bf2 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7fe faf5 	bl	80021dc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8003c3e:	bf00      	nop
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
	...

08003c4c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
 8003c58:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	795b      	ldrb	r3, [r3, #5]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d101      	bne.n	8003c6a <HAL_DAC_Start_DMA+0x1e>
 8003c66:	2302      	movs	r3, #2
 8003c68:	e08e      	b.n	8003d88 <HAL_DAC_Start_DMA+0x13c>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2202      	movs	r2, #2
 8003c74:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d12a      	bne.n	8003cd2 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	4a43      	ldr	r2, [pc, #268]	; (8003d90 <HAL_DAC_Start_DMA+0x144>)
 8003c82:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	4a42      	ldr	r2, [pc, #264]	; (8003d94 <HAL_DAC_Start_DMA+0x148>)
 8003c8a:	62da      	str	r2, [r3, #44]	; 0x2c
      
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	4a41      	ldr	r2, [pc, #260]	; (8003d98 <HAL_DAC_Start_DMA+0x14c>)
 8003c92:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ca2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1U */
    switch(Alignment)
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d009      	beq.n	8003cbe <HAL_DAC_Start_DMA+0x72>
 8003caa:	2b08      	cmp	r3, #8
 8003cac:	d00c      	beq.n	8003cc8 <HAL_DAC_Start_DMA+0x7c>
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d000      	beq.n	8003cb4 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003cb2:	e039      	b.n	8003d28 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	3308      	adds	r3, #8
 8003cba:	617b      	str	r3, [r7, #20]
        break;
 8003cbc:	e034      	b.n	8003d28 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	330c      	adds	r3, #12
 8003cc4:	617b      	str	r3, [r7, #20]
        break;
 8003cc6:	e02f      	b.n	8003d28 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	3310      	adds	r3, #16
 8003cce:	617b      	str	r3, [r7, #20]
        break;
 8003cd0:	e02a      	b.n	8003d28 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	4a31      	ldr	r2, [pc, #196]	; (8003d9c <HAL_DAC_Start_DMA+0x150>)
 8003cd8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	4a30      	ldr	r2, [pc, #192]	; (8003da0 <HAL_DAC_Start_DMA+0x154>)
 8003ce0:	62da      	str	r2, [r3, #44]	; 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	4a2f      	ldr	r2, [pc, #188]	; (8003da4 <HAL_DAC_Start_DMA+0x158>)
 8003ce8:	631a      	str	r2, [r3, #48]	; 0x30
 
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003cf8:	601a      	str	r2, [r3, #0]
   
    /* Case of use of channel 2U */
    switch(Alignment)
 8003cfa:	6a3b      	ldr	r3, [r7, #32]
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d009      	beq.n	8003d14 <HAL_DAC_Start_DMA+0xc8>
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d00c      	beq.n	8003d1e <HAL_DAC_Start_DMA+0xd2>
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d000      	beq.n	8003d0a <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003d08:	e00e      	b.n	8003d28 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	3314      	adds	r3, #20
 8003d10:	617b      	str	r3, [r7, #20]
        break;
 8003d12:	e009      	b.n	8003d28 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	3318      	adds	r3, #24
 8003d1a:	617b      	str	r3, [r7, #20]
        break;
 8003d1c:	e004      	b.n	8003d28 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	331c      	adds	r3, #28
 8003d24:	617b      	str	r3, [r7, #20]
        break;
 8003d26:	bf00      	nop
    }
  }
 
  /* Enable the DMA Channel */
  if(Channel == DAC_CHANNEL_1)
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10f      	bne.n	8003d4e <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d3c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6898      	ldr	r0, [r3, #8]
 8003d42:	6879      	ldr	r1, [r7, #4]
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	f000 f94c 	bl	8003fe4 <HAL_DMA_Start_IT>
 8003d4c:	e00e      	b.n	8003d6c <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003d5c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	68d8      	ldr	r0, [r3, #12]
 8003d62:	6879      	ldr	r1, [r7, #4]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	f000 f93c 	bl	8003fe4 <HAL_DMA_Start_IT>
  }
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6819      	ldr	r1, [r3, #0]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	409a      	lsls	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3718      	adds	r7, #24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	08003e7f 	.word	0x08003e7f
 8003d94:	08003ea1 	.word	0x08003ea1
 8003d98:	08003ebd 	.word	0x08003ebd
 8003d9c:	08003eeb 	.word	0x08003eeb
 8003da0:	08003f0d 	.word	0x08003f0d
 8003da4:	08003f29 	.word	0x08003f29

08003da8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b087      	sub	sp, #28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003db4:	2300      	movs	r3, #0
 8003db6:	617b      	str	r3, [r7, #20]
 8003db8:	2300      	movs	r3, #0
 8003dba:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	795b      	ldrb	r3, [r3, #5]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d101      	bne.n	8003dc8 <HAL_DAC_ConfigChannel+0x20>
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	e036      	b.n	8003e36 <HAL_DAC_ConfigChannel+0x8e>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2202      	movs	r2, #2
 8003dd2:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003ddc:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	fa02 f303 	lsl.w	r3, r2, r3
 8003de6:	43db      	mvns	r3, r3
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	4013      	ands	r3, r2
 8003dec:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6819      	ldr	r1, [r3, #0]
 8003e16:	22c0      	movs	r2, #192	; 0xc0
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1e:	43da      	mvns	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	400a      	ands	r2, r1
 8003e26:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	371c      	adds	r7, #28
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b084      	sub	sp, #16
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f7ff febe 	bl	8003c0e <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2201      	movs	r2, #1
 8003e96:	711a      	strb	r2, [r3, #4]
}
 8003e98:	bf00      	nop
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f7ff feb7 	bl	8003c22 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 8003eb4:	bf00      	nop
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	f043 0204 	orr.w	r2, r3, #4
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f7ff fead 	bl	8003c36 <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	711a      	strb	r2, [r3, #4]
}
 8003ee2:	bf00      	nop
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b084      	sub	sp, #16
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f7ff ffa2 	bl	8003e42 <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2201      	movs	r2, #1
 8003f02:	711a      	strb	r2, [r3, #4]
}
 8003f04:	bf00      	nop
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f7ff ff9b 	bl	8003e56 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 8003f20:	bf00      	nop
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	f043 0204 	orr.w	r2, r3, #4
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f7ff ff91 	bl	8003e6a <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	711a      	strb	r2, [r3, #4]
}
 8003f4e:	bf00      	nop
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b084      	sub	sp, #16
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e037      	b.n	8003fdc <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2202      	movs	r2, #2
 8003f70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003f82:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003f86:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003f90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fa8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f9b8 	bl	8004334 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}  
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d101      	bne.n	8004004 <HAL_DMA_Start_IT+0x20>
 8004000:	2302      	movs	r3, #2
 8004002:	e04a      	b.n	800409a <HAL_DMA_Start_IT+0xb6>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004012:	2b01      	cmp	r3, #1
 8004014:	d13a      	bne.n	800408c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2202      	movs	r2, #2
 800401a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0201 	bic.w	r2, r2, #1
 8004032:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	68b9      	ldr	r1, [r7, #8]
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 f94b 	bl	80042d6 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004044:	2b00      	cmp	r3, #0
 8004046:	d008      	beq.n	800405a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 020e 	orr.w	r2, r2, #14
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	e00f      	b.n	800407a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f042 020a 	orr.w	r2, r2, #10
 8004068:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 0204 	bic.w	r2, r2, #4
 8004078:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f042 0201 	orr.w	r2, r2, #1
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	e005      	b.n	8004098 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004094:	2302      	movs	r3, #2
 8004096:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8004098:	7dfb      	ldrb	r3, [r7, #23]
} 
 800409a:	4618      	mov	r0, r3
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d008      	beq.n	80040c6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2204      	movs	r2, #4
 80040b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e020      	b.n	8004108 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 020e 	bic.w	r2, r2, #14
 80040d4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0201 	bic.w	r2, r2, #1
 80040e4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ee:	2101      	movs	r1, #1
 80040f0:	fa01 f202 	lsl.w	r2, r1, r2
 80040f4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800411c:	2300      	movs	r3, #0
 800411e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004126:	2b02      	cmp	r3, #2
 8004128:	d005      	beq.n	8004136 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2204      	movs	r2, #4
 800412e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	73fb      	strb	r3, [r7, #15]
 8004134:	e027      	b.n	8004186 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 020e 	bic.w	r2, r2, #14
 8004144:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 0201 	bic.w	r2, r2, #1
 8004154:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415e:	2101      	movs	r1, #1
 8004160:	fa01 f202 	lsl.w	r2, r1, r2
 8004164:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	4798      	blx	r3
    } 
  }
  return status;
 8004186:	7bfb      	ldrb	r3, [r7, #15]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ac:	2204      	movs	r2, #4
 80041ae:	409a      	lsls	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4013      	ands	r3, r2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d024      	beq.n	8004202 <HAL_DMA_IRQHandler+0x72>
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	f003 0304 	and.w	r3, r3, #4
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d01f      	beq.n	8004202 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0320 	and.w	r3, r3, #32
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d107      	bne.n	80041e0 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0204 	bic.w	r2, r2, #4
 80041de:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e8:	2104      	movs	r1, #4
 80041ea:	fa01 f202 	lsl.w	r2, r1, r2
 80041ee:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d06a      	beq.n	80042ce <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004200:	e065      	b.n	80042ce <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	2202      	movs	r2, #2
 8004208:	409a      	lsls	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	4013      	ands	r3, r2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d02c      	beq.n	800426c <HAL_DMA_IRQHandler+0xdc>
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d027      	beq.n	800426c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0320 	and.w	r3, r3, #32
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10b      	bne.n	8004242 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 020a 	bic.w	r2, r2, #10
 8004238:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424a:	2102      	movs	r1, #2
 800424c:	fa01 f202 	lsl.w	r2, r1, r2
 8004250:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425e:	2b00      	cmp	r3, #0
 8004260:	d035      	beq.n	80042ce <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800426a:	e030      	b.n	80042ce <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004270:	2208      	movs	r2, #8
 8004272:	409a      	lsls	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4013      	ands	r3, r2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d028      	beq.n	80042ce <HAL_DMA_IRQHandler+0x13e>
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	f003 0308 	and.w	r3, r3, #8
 8004282:	2b00      	cmp	r3, #0
 8004284:	d023      	beq.n	80042ce <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 020e 	bic.w	r2, r2, #14
 8004294:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429e:	2101      	movs	r1, #1
 80042a0:	fa01 f202 	lsl.w	r2, r1, r2
 80042a4:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d004      	beq.n	80042ce <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	4798      	blx	r3
    }
  }
}  
 80042cc:	e7ff      	b.n	80042ce <HAL_DMA_IRQHandler+0x13e>
 80042ce:	bf00      	nop
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b085      	sub	sp, #20
 80042da:	af00      	add	r7, sp, #0
 80042dc:	60f8      	str	r0, [r7, #12]
 80042de:	60b9      	str	r1, [r7, #8]
 80042e0:	607a      	str	r2, [r7, #4]
 80042e2:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ec:	2101      	movs	r1, #1
 80042ee:	fa01 f202 	lsl.w	r2, r1, r2
 80042f2:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	2b10      	cmp	r3, #16
 8004302:	d108      	bne.n	8004316 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004314:	e007      	b.n	8004326 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	60da      	str	r2, [r3, #12]
}
 8004326:	bf00      	nop
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
	...

08004334 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	461a      	mov	r2, r3
 8004342:	4b14      	ldr	r3, [pc, #80]	; (8004394 <DMA_CalcBaseAndBitshift+0x60>)
 8004344:	429a      	cmp	r2, r3
 8004346:	d80f      	bhi.n	8004368 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	461a      	mov	r2, r3
 800434e:	4b12      	ldr	r3, [pc, #72]	; (8004398 <DMA_CalcBaseAndBitshift+0x64>)
 8004350:	4413      	add	r3, r2
 8004352:	4a12      	ldr	r2, [pc, #72]	; (800439c <DMA_CalcBaseAndBitshift+0x68>)
 8004354:	fba2 2303 	umull	r2, r3, r2, r3
 8004358:	091b      	lsrs	r3, r3, #4
 800435a:	009a      	lsls	r2, r3, #2
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a0f      	ldr	r2, [pc, #60]	; (80043a0 <DMA_CalcBaseAndBitshift+0x6c>)
 8004364:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8004366:	e00e      	b.n	8004386 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	461a      	mov	r2, r3
 800436e:	4b0d      	ldr	r3, [pc, #52]	; (80043a4 <DMA_CalcBaseAndBitshift+0x70>)
 8004370:	4413      	add	r3, r2
 8004372:	4a0a      	ldr	r2, [pc, #40]	; (800439c <DMA_CalcBaseAndBitshift+0x68>)
 8004374:	fba2 2303 	umull	r2, r3, r2, r3
 8004378:	091b      	lsrs	r3, r3, #4
 800437a:	009a      	lsls	r2, r3, #2
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a09      	ldr	r2, [pc, #36]	; (80043a8 <DMA_CalcBaseAndBitshift+0x74>)
 8004384:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004386:	bf00      	nop
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	40020407 	.word	0x40020407
 8004398:	bffdfff8 	.word	0xbffdfff8
 800439c:	cccccccd 	.word	0xcccccccd
 80043a0:	40020000 	.word	0x40020000
 80043a4:	bffdfbf8 	.word	0xbffdfbf8
 80043a8:	40020400 	.word	0x40020400

080043ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043b6:	2300      	movs	r3, #0
 80043b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043ba:	e160      	b.n	800467e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	2101      	movs	r1, #1
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	fa01 f303 	lsl.w	r3, r1, r3
 80043c8:	4013      	ands	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 8152 	beq.w	8004678 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f003 0303 	and.w	r3, r3, #3
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d005      	beq.n	80043ec <HAL_GPIO_Init+0x40>
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f003 0303 	and.w	r3, r3, #3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d130      	bne.n	800444e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	2203      	movs	r2, #3
 80043f8:	fa02 f303 	lsl.w	r3, r2, r3
 80043fc:	43db      	mvns	r3, r3
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	4013      	ands	r3, r2
 8004402:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	68da      	ldr	r2, [r3, #12]
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	4313      	orrs	r3, r2
 8004414:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004422:	2201      	movs	r2, #1
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	fa02 f303 	lsl.w	r3, r2, r3
 800442a:	43db      	mvns	r3, r3
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	4013      	ands	r3, r2
 8004430:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	091b      	lsrs	r3, r3, #4
 8004438:	f003 0201 	and.w	r2, r3, #1
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	fa02 f303 	lsl.w	r3, r2, r3
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	4313      	orrs	r3, r2
 8004446:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	2b03      	cmp	r3, #3
 8004458:	d017      	beq.n	800448a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	2203      	movs	r2, #3
 8004466:	fa02 f303 	lsl.w	r3, r2, r3
 800446a:	43db      	mvns	r3, r3
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	4013      	ands	r3, r2
 8004470:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	fa02 f303 	lsl.w	r3, r2, r3
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	4313      	orrs	r3, r2
 8004482:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d123      	bne.n	80044de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	08da      	lsrs	r2, r3, #3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	3208      	adds	r2, #8
 800449e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	220f      	movs	r2, #15
 80044ae:	fa02 f303 	lsl.w	r3, r2, r3
 80044b2:	43db      	mvns	r3, r3
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	4013      	ands	r3, r2
 80044b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	691a      	ldr	r2, [r3, #16]
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	08da      	lsrs	r2, r3, #3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3208      	adds	r2, #8
 80044d8:	6939      	ldr	r1, [r7, #16]
 80044da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	2203      	movs	r2, #3
 80044ea:	fa02 f303 	lsl.w	r3, r2, r3
 80044ee:	43db      	mvns	r3, r3
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	4013      	ands	r3, r2
 80044f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f003 0203 	and.w	r2, r3, #3
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	fa02 f303 	lsl.w	r3, r2, r3
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	4313      	orrs	r3, r2
 800450a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 80ac 	beq.w	8004678 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004520:	4b5e      	ldr	r3, [pc, #376]	; (800469c <HAL_GPIO_Init+0x2f0>)
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	4a5d      	ldr	r2, [pc, #372]	; (800469c <HAL_GPIO_Init+0x2f0>)
 8004526:	f043 0301 	orr.w	r3, r3, #1
 800452a:	6193      	str	r3, [r2, #24]
 800452c:	4b5b      	ldr	r3, [pc, #364]	; (800469c <HAL_GPIO_Init+0x2f0>)
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	60bb      	str	r3, [r7, #8]
 8004536:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004538:	4a59      	ldr	r2, [pc, #356]	; (80046a0 <HAL_GPIO_Init+0x2f4>)
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	089b      	lsrs	r3, r3, #2
 800453e:	3302      	adds	r3, #2
 8004540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004544:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f003 0303 	and.w	r3, r3, #3
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	220f      	movs	r2, #15
 8004550:	fa02 f303 	lsl.w	r3, r2, r3
 8004554:	43db      	mvns	r3, r3
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	4013      	ands	r3, r2
 800455a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004562:	d025      	beq.n	80045b0 <HAL_GPIO_Init+0x204>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a4f      	ldr	r2, [pc, #316]	; (80046a4 <HAL_GPIO_Init+0x2f8>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d01f      	beq.n	80045ac <HAL_GPIO_Init+0x200>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a4e      	ldr	r2, [pc, #312]	; (80046a8 <HAL_GPIO_Init+0x2fc>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d019      	beq.n	80045a8 <HAL_GPIO_Init+0x1fc>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a4d      	ldr	r2, [pc, #308]	; (80046ac <HAL_GPIO_Init+0x300>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d013      	beq.n	80045a4 <HAL_GPIO_Init+0x1f8>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a4c      	ldr	r2, [pc, #304]	; (80046b0 <HAL_GPIO_Init+0x304>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d00d      	beq.n	80045a0 <HAL_GPIO_Init+0x1f4>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a4b      	ldr	r2, [pc, #300]	; (80046b4 <HAL_GPIO_Init+0x308>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d007      	beq.n	800459c <HAL_GPIO_Init+0x1f0>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a4a      	ldr	r2, [pc, #296]	; (80046b8 <HAL_GPIO_Init+0x30c>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d101      	bne.n	8004598 <HAL_GPIO_Init+0x1ec>
 8004594:	2306      	movs	r3, #6
 8004596:	e00c      	b.n	80045b2 <HAL_GPIO_Init+0x206>
 8004598:	2307      	movs	r3, #7
 800459a:	e00a      	b.n	80045b2 <HAL_GPIO_Init+0x206>
 800459c:	2305      	movs	r3, #5
 800459e:	e008      	b.n	80045b2 <HAL_GPIO_Init+0x206>
 80045a0:	2304      	movs	r3, #4
 80045a2:	e006      	b.n	80045b2 <HAL_GPIO_Init+0x206>
 80045a4:	2303      	movs	r3, #3
 80045a6:	e004      	b.n	80045b2 <HAL_GPIO_Init+0x206>
 80045a8:	2302      	movs	r3, #2
 80045aa:	e002      	b.n	80045b2 <HAL_GPIO_Init+0x206>
 80045ac:	2301      	movs	r3, #1
 80045ae:	e000      	b.n	80045b2 <HAL_GPIO_Init+0x206>
 80045b0:	2300      	movs	r3, #0
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	f002 0203 	and.w	r2, r2, #3
 80045b8:	0092      	lsls	r2, r2, #2
 80045ba:	4093      	lsls	r3, r2
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	4313      	orrs	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80045c2:	4937      	ldr	r1, [pc, #220]	; (80046a0 <HAL_GPIO_Init+0x2f4>)
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	089b      	lsrs	r3, r3, #2
 80045c8:	3302      	adds	r3, #2
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045d0:	4b3a      	ldr	r3, [pc, #232]	; (80046bc <HAL_GPIO_Init+0x310>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	43db      	mvns	r3, r3
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	4013      	ands	r3, r2
 80045de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d003      	beq.n	80045f4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80045f4:	4a31      	ldr	r2, [pc, #196]	; (80046bc <HAL_GPIO_Init+0x310>)
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80045fa:	4b30      	ldr	r3, [pc, #192]	; (80046bc <HAL_GPIO_Init+0x310>)
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	43db      	mvns	r3, r3
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	4013      	ands	r3, r2
 8004608:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4313      	orrs	r3, r2
 800461c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800461e:	4a27      	ldr	r2, [pc, #156]	; (80046bc <HAL_GPIO_Init+0x310>)
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004624:	4b25      	ldr	r3, [pc, #148]	; (80046bc <HAL_GPIO_Init+0x310>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	43db      	mvns	r3, r3
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	4013      	ands	r3, r2
 8004632:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d003      	beq.n	8004648 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	4313      	orrs	r3, r2
 8004646:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004648:	4a1c      	ldr	r2, [pc, #112]	; (80046bc <HAL_GPIO_Init+0x310>)
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800464e:	4b1b      	ldr	r3, [pc, #108]	; (80046bc <HAL_GPIO_Init+0x310>)
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	43db      	mvns	r3, r3
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	4013      	ands	r3, r2
 800465c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	4313      	orrs	r3, r2
 8004670:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004672:	4a12      	ldr	r2, [pc, #72]	; (80046bc <HAL_GPIO_Init+0x310>)
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	3301      	adds	r3, #1
 800467c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	fa22 f303 	lsr.w	r3, r2, r3
 8004688:	2b00      	cmp	r3, #0
 800468a:	f47f ae97 	bne.w	80043bc <HAL_GPIO_Init+0x10>
  }
}
 800468e:	bf00      	nop
 8004690:	371c      	adds	r7, #28
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	40021000 	.word	0x40021000
 80046a0:	40010000 	.word	0x40010000
 80046a4:	48000400 	.word	0x48000400
 80046a8:	48000800 	.word	0x48000800
 80046ac:	48000c00 	.word	0x48000c00
 80046b0:	48001000 	.word	0x48001000
 80046b4:	48001400 	.word	0x48001400
 80046b8:	48001800 	.word	0x48001800
 80046bc:	40010400 	.word	0x40010400

080046c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	460b      	mov	r3, r1
 80046ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	691a      	ldr	r2, [r3, #16]
 80046d0:	887b      	ldrh	r3, [r7, #2]
 80046d2:	4013      	ands	r3, r2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046d8:	2301      	movs	r3, #1
 80046da:	73fb      	strb	r3, [r7, #15]
 80046dc:	e001      	b.n	80046e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046de:	2300      	movs	r3, #0
 80046e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	460b      	mov	r3, r1
 80046fa:	807b      	strh	r3, [r7, #2]
 80046fc:	4613      	mov	r3, r2
 80046fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004700:	787b      	ldrb	r3, [r7, #1]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004706:	887a      	ldrh	r2, [r7, #2]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800470c:	e002      	b.n	8004714 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800470e:	887a      	ldrh	r2, [r7, #2]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	460b      	mov	r3, r1
 800472a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004732:	887a      	ldrh	r2, [r7, #2]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	4013      	ands	r3, r2
 8004738:	041a      	lsls	r2, r3, #16
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	43d9      	mvns	r1, r3
 800473e:	887b      	ldrh	r3, [r7, #2]
 8004740:	400b      	ands	r3, r1
 8004742:	431a      	orrs	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	619a      	str	r2, [r3, #24]
}
 8004748:	bf00      	nop
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	4603      	mov	r3, r0
 800475c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800475e:	4b08      	ldr	r3, [pc, #32]	; (8004780 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004760:	695a      	ldr	r2, [r3, #20]
 8004762:	88fb      	ldrh	r3, [r7, #6]
 8004764:	4013      	ands	r3, r2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d006      	beq.n	8004778 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800476a:	4a05      	ldr	r2, [pc, #20]	; (8004780 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800476c:	88fb      	ldrh	r3, [r7, #6]
 800476e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004770:	88fb      	ldrh	r3, [r7, #6]
 8004772:	4618      	mov	r0, r3
 8004774:	f7fc fc16 	bl	8000fa4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004778:	bf00      	nop
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	40010400 	.word	0x40010400

08004784 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800478a:	af00      	add	r7, sp, #0
 800478c:	1d3b      	adds	r3, r7, #4
 800478e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004790:	1d3b      	adds	r3, r7, #4
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d102      	bne.n	800479e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	f000 bf01 	b.w	80055a0 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800479e:	1d3b      	adds	r3, r7, #4
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 8160 	beq.w	8004a6e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80047ae:	4bae      	ldr	r3, [pc, #696]	; (8004a68 <HAL_RCC_OscConfig+0x2e4>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f003 030c 	and.w	r3, r3, #12
 80047b6:	2b04      	cmp	r3, #4
 80047b8:	d00c      	beq.n	80047d4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80047ba:	4bab      	ldr	r3, [pc, #684]	; (8004a68 <HAL_RCC_OscConfig+0x2e4>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f003 030c 	and.w	r3, r3, #12
 80047c2:	2b08      	cmp	r3, #8
 80047c4:	d159      	bne.n	800487a <HAL_RCC_OscConfig+0xf6>
 80047c6:	4ba8      	ldr	r3, [pc, #672]	; (8004a68 <HAL_RCC_OscConfig+0x2e4>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80047ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047d2:	d152      	bne.n	800487a <HAL_RCC_OscConfig+0xf6>
 80047d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047d8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047dc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80047e0:	fa93 f3a3 	rbit	r3, r3
 80047e4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80047e8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ec:	fab3 f383 	clz	r3, r3
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	095b      	lsrs	r3, r3, #5
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	f043 0301 	orr.w	r3, r3, #1
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d102      	bne.n	8004806 <HAL_RCC_OscConfig+0x82>
 8004800:	4b99      	ldr	r3, [pc, #612]	; (8004a68 <HAL_RCC_OscConfig+0x2e4>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	e015      	b.n	8004832 <HAL_RCC_OscConfig+0xae>
 8004806:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800480a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800480e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8004812:	fa93 f3a3 	rbit	r3, r3
 8004816:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800481a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800481e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004822:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8004826:	fa93 f3a3 	rbit	r3, r3
 800482a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800482e:	4b8e      	ldr	r3, [pc, #568]	; (8004a68 <HAL_RCC_OscConfig+0x2e4>)
 8004830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004832:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004836:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800483a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800483e:	fa92 f2a2 	rbit	r2, r2
 8004842:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8004846:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800484a:	fab2 f282 	clz	r2, r2
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	f042 0220 	orr.w	r2, r2, #32
 8004854:	b2d2      	uxtb	r2, r2
 8004856:	f002 021f 	and.w	r2, r2, #31
 800485a:	2101      	movs	r1, #1
 800485c:	fa01 f202 	lsl.w	r2, r1, r2
 8004860:	4013      	ands	r3, r2
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 8102 	beq.w	8004a6c <HAL_RCC_OscConfig+0x2e8>
 8004868:	1d3b      	adds	r3, r7, #4
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	f040 80fc 	bne.w	8004a6c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	f000 be93 	b.w	80055a0 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800487a:	1d3b      	adds	r3, r7, #4
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004884:	d106      	bne.n	8004894 <HAL_RCC_OscConfig+0x110>
 8004886:	4b78      	ldr	r3, [pc, #480]	; (8004a68 <HAL_RCC_OscConfig+0x2e4>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a77      	ldr	r2, [pc, #476]	; (8004a68 <HAL_RCC_OscConfig+0x2e4>)
 800488c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	e030      	b.n	80048f6 <HAL_RCC_OscConfig+0x172>
 8004894:	1d3b      	adds	r3, r7, #4
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10c      	bne.n	80048b8 <HAL_RCC_OscConfig+0x134>
 800489e:	4b72      	ldr	r3, [pc, #456]	; (8004a68 <HAL_RCC_OscConfig+0x2e4>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a71      	ldr	r2, [pc, #452]	; (8004a68 <HAL_RCC_OscConfig+0x2e4>)
 80048a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048a8:	6013      	str	r3, [r2, #0]
 80048aa:	4b6f      	ldr	r3, [pc, #444]	; (8004a68 <HAL_RCC_OscConfig+0x2e4>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a6e      	ldr	r2, [pc, #440]	; (8004a68 <HAL_RCC_OscConfig+0x2e4>)
 80048b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048b4:	6013      	str	r3, [r2, #0]
 80048b6:	e01e      	b.n	80048f6 <HAL_RCC_OscConfig+0x172>
 80048b8:	1d3b      	adds	r3, r7, #4
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048c2:	d10c      	bne.n	80048de <HAL_RCC_OscConfig+0x15a>
 80048c4:	4b68      	ldr	r3, [pc, #416]	; (8004a68 <HAL_RCC_OscConfig+0x2e4>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a67      	ldr	r2, [pc, #412]	; (8004a68 <HAL_RCC_OscConfig+0x2e4>)
 80048ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048ce:	6013      	str	r3, [r2, #0]
 80048d0:	4b65      	ldr	r3, [pc, #404]	; (8004a68 <HAL_RCC_OscConfig+0x2e4>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a64      	ldr	r2, [pc, #400]	; (8004a68 <HAL_RCC_OscConfig+0x2e4>)
 80048d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048da:	6013      	str	r3, [r2, #0]
 80048dc:	e00b      	b.n	80048f6 <HAL_RCC_OscConfig+0x172>
 80048de:	4b62      	ldr	r3, [pc, #392]	; (8004a68 <HAL_RCC_OscConfig+0x2e4>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a61      	ldr	r2, [pc, #388]	; (8004a68 <HAL_RCC_OscConfig+0x2e4>)
 80048e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048e8:	6013      	str	r3, [r2, #0]
 80048ea:	4b5f      	ldr	r3, [pc, #380]	; (8004a68 <HAL_RCC_OscConfig+0x2e4>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a5e      	ldr	r2, [pc, #376]	; (8004a68 <HAL_RCC_OscConfig+0x2e4>)
 80048f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048f4:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048f6:	1d3b      	adds	r3, r7, #4
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d059      	beq.n	80049b4 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004900:	f7fd fe72 	bl	80025e8 <HAL_GetTick>
 8004904:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004908:	e00a      	b.n	8004920 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800490a:	f7fd fe6d 	bl	80025e8 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b64      	cmp	r3, #100	; 0x64
 8004918:	d902      	bls.n	8004920 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	f000 be40 	b.w	80055a0 <HAL_RCC_OscConfig+0xe1c>
 8004920:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004924:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004928:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800492c:	fa93 f3a3 	rbit	r3, r3
 8004930:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8004934:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004938:	fab3 f383 	clz	r3, r3
 800493c:	b2db      	uxtb	r3, r3
 800493e:	095b      	lsrs	r3, r3, #5
 8004940:	b2db      	uxtb	r3, r3
 8004942:	f043 0301 	orr.w	r3, r3, #1
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b01      	cmp	r3, #1
 800494a:	d102      	bne.n	8004952 <HAL_RCC_OscConfig+0x1ce>
 800494c:	4b46      	ldr	r3, [pc, #280]	; (8004a68 <HAL_RCC_OscConfig+0x2e4>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	e015      	b.n	800497e <HAL_RCC_OscConfig+0x1fa>
 8004952:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004956:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800495a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800495e:	fa93 f3a3 	rbit	r3, r3
 8004962:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004966:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800496a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800496e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8004972:	fa93 f3a3 	rbit	r3, r3
 8004976:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800497a:	4b3b      	ldr	r3, [pc, #236]	; (8004a68 <HAL_RCC_OscConfig+0x2e4>)
 800497c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004982:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8004986:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800498a:	fa92 f2a2 	rbit	r2, r2
 800498e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8004992:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004996:	fab2 f282 	clz	r2, r2
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	f042 0220 	orr.w	r2, r2, #32
 80049a0:	b2d2      	uxtb	r2, r2
 80049a2:	f002 021f 	and.w	r2, r2, #31
 80049a6:	2101      	movs	r1, #1
 80049a8:	fa01 f202 	lsl.w	r2, r1, r2
 80049ac:	4013      	ands	r3, r2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0ab      	beq.n	800490a <HAL_RCC_OscConfig+0x186>
 80049b2:	e05c      	b.n	8004a6e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b4:	f7fd fe18 	bl	80025e8 <HAL_GetTick>
 80049b8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049bc:	e00a      	b.n	80049d4 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049be:	f7fd fe13 	bl	80025e8 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b64      	cmp	r3, #100	; 0x64
 80049cc:	d902      	bls.n	80049d4 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	f000 bde6 	b.w	80055a0 <HAL_RCC_OscConfig+0xe1c>
 80049d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049d8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049dc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80049e0:	fa93 f3a3 	rbit	r3, r3
 80049e4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80049e8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ec:	fab3 f383 	clz	r3, r3
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	095b      	lsrs	r3, r3, #5
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	f043 0301 	orr.w	r3, r3, #1
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d102      	bne.n	8004a06 <HAL_RCC_OscConfig+0x282>
 8004a00:	4b19      	ldr	r3, [pc, #100]	; (8004a68 <HAL_RCC_OscConfig+0x2e4>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	e015      	b.n	8004a32 <HAL_RCC_OscConfig+0x2ae>
 8004a06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a0a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a0e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004a12:	fa93 f3a3 	rbit	r3, r3
 8004a16:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004a1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a1e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004a22:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004a26:	fa93 f3a3 	rbit	r3, r3
 8004a2a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004a2e:	4b0e      	ldr	r3, [pc, #56]	; (8004a68 <HAL_RCC_OscConfig+0x2e4>)
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a36:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004a3a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8004a3e:	fa92 f2a2 	rbit	r2, r2
 8004a42:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8004a46:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004a4a:	fab2 f282 	clz	r2, r2
 8004a4e:	b2d2      	uxtb	r2, r2
 8004a50:	f042 0220 	orr.w	r2, r2, #32
 8004a54:	b2d2      	uxtb	r2, r2
 8004a56:	f002 021f 	and.w	r2, r2, #31
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a60:	4013      	ands	r3, r2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1ab      	bne.n	80049be <HAL_RCC_OscConfig+0x23a>
 8004a66:	e002      	b.n	8004a6e <HAL_RCC_OscConfig+0x2ea>
 8004a68:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a6e:	1d3b      	adds	r3, r7, #4
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 8170 	beq.w	8004d5e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004a7e:	4bd0      	ldr	r3, [pc, #832]	; (8004dc0 <HAL_RCC_OscConfig+0x63c>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f003 030c 	and.w	r3, r3, #12
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00c      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004a8a:	4bcd      	ldr	r3, [pc, #820]	; (8004dc0 <HAL_RCC_OscConfig+0x63c>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f003 030c 	and.w	r3, r3, #12
 8004a92:	2b08      	cmp	r3, #8
 8004a94:	d16d      	bne.n	8004b72 <HAL_RCC_OscConfig+0x3ee>
 8004a96:	4bca      	ldr	r3, [pc, #808]	; (8004dc0 <HAL_RCC_OscConfig+0x63c>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004a9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aa2:	d166      	bne.n	8004b72 <HAL_RCC_OscConfig+0x3ee>
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aaa:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004aae:	fa93 f3a3 	rbit	r3, r3
 8004ab2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8004ab6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aba:	fab3 f383 	clz	r3, r3
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	095b      	lsrs	r3, r3, #5
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	f043 0301 	orr.w	r3, r3, #1
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d102      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x350>
 8004ace:	4bbc      	ldr	r3, [pc, #752]	; (8004dc0 <HAL_RCC_OscConfig+0x63c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	e013      	b.n	8004afc <HAL_RCC_OscConfig+0x378>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ada:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004ade:	fa93 f3a3 	rbit	r3, r3
 8004ae2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004aec:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004af0:	fa93 f3a3 	rbit	r3, r3
 8004af4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004af8:	4bb1      	ldr	r3, [pc, #708]	; (8004dc0 <HAL_RCC_OscConfig+0x63c>)
 8004afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afc:	2202      	movs	r2, #2
 8004afe:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004b02:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8004b06:	fa92 f2a2 	rbit	r2, r2
 8004b0a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8004b0e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004b12:	fab2 f282 	clz	r2, r2
 8004b16:	b2d2      	uxtb	r2, r2
 8004b18:	f042 0220 	orr.w	r2, r2, #32
 8004b1c:	b2d2      	uxtb	r2, r2
 8004b1e:	f002 021f 	and.w	r2, r2, #31
 8004b22:	2101      	movs	r1, #1
 8004b24:	fa01 f202 	lsl.w	r2, r1, r2
 8004b28:	4013      	ands	r3, r2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d007      	beq.n	8004b3e <HAL_RCC_OscConfig+0x3ba>
 8004b2e:	1d3b      	adds	r3, r7, #4
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d002      	beq.n	8004b3e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	f000 bd31 	b.w	80055a0 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b3e:	4ba0      	ldr	r3, [pc, #640]	; (8004dc0 <HAL_RCC_OscConfig+0x63c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b46:	1d3b      	adds	r3, r7, #4
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	21f8      	movs	r1, #248	; 0xf8
 8004b4e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b52:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004b56:	fa91 f1a1 	rbit	r1, r1
 8004b5a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8004b5e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004b62:	fab1 f181 	clz	r1, r1
 8004b66:	b2c9      	uxtb	r1, r1
 8004b68:	408b      	lsls	r3, r1
 8004b6a:	4995      	ldr	r1, [pc, #596]	; (8004dc0 <HAL_RCC_OscConfig+0x63c>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b70:	e0f5      	b.n	8004d5e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b72:	1d3b      	adds	r3, r7, #4
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 8085 	beq.w	8004c88 <HAL_RCC_OscConfig+0x504>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b84:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004b88:	fa93 f3a3 	rbit	r3, r3
 8004b8c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8004b90:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b94:	fab3 f383 	clz	r3, r3
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004b9e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004baa:	f7fd fd1d 	bl	80025e8 <HAL_GetTick>
 8004bae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bb2:	e00a      	b.n	8004bca <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bb4:	f7fd fd18 	bl	80025e8 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d902      	bls.n	8004bca <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	f000 bceb 	b.w	80055a0 <HAL_RCC_OscConfig+0xe1c>
 8004bca:	2302      	movs	r3, #2
 8004bcc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004bd4:	fa93 f3a3 	rbit	r3, r3
 8004bd8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8004bdc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be0:	fab3 f383 	clz	r3, r3
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	095b      	lsrs	r3, r3, #5
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	f043 0301 	orr.w	r3, r3, #1
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d102      	bne.n	8004bfa <HAL_RCC_OscConfig+0x476>
 8004bf4:	4b72      	ldr	r3, [pc, #456]	; (8004dc0 <HAL_RCC_OscConfig+0x63c>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	e013      	b.n	8004c22 <HAL_RCC_OscConfig+0x49e>
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c00:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004c04:	fa93 f3a3 	rbit	r3, r3
 8004c08:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004c12:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004c16:	fa93 f3a3 	rbit	r3, r3
 8004c1a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004c1e:	4b68      	ldr	r3, [pc, #416]	; (8004dc0 <HAL_RCC_OscConfig+0x63c>)
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	2202      	movs	r2, #2
 8004c24:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004c28:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004c2c:	fa92 f2a2 	rbit	r2, r2
 8004c30:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8004c34:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004c38:	fab2 f282 	clz	r2, r2
 8004c3c:	b2d2      	uxtb	r2, r2
 8004c3e:	f042 0220 	orr.w	r2, r2, #32
 8004c42:	b2d2      	uxtb	r2, r2
 8004c44:	f002 021f 	and.w	r2, r2, #31
 8004c48:	2101      	movs	r1, #1
 8004c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c4e:	4013      	ands	r3, r2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d0af      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c54:	4b5a      	ldr	r3, [pc, #360]	; (8004dc0 <HAL_RCC_OscConfig+0x63c>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c5c:	1d3b      	adds	r3, r7, #4
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	21f8      	movs	r1, #248	; 0xf8
 8004c64:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c68:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8004c6c:	fa91 f1a1 	rbit	r1, r1
 8004c70:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8004c74:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004c78:	fab1 f181 	clz	r1, r1
 8004c7c:	b2c9      	uxtb	r1, r1
 8004c7e:	408b      	lsls	r3, r1
 8004c80:	494f      	ldr	r1, [pc, #316]	; (8004dc0 <HAL_RCC_OscConfig+0x63c>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	600b      	str	r3, [r1, #0]
 8004c86:	e06a      	b.n	8004d5e <HAL_RCC_OscConfig+0x5da>
 8004c88:	2301      	movs	r3, #1
 8004c8a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c8e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004c92:	fa93 f3a3 	rbit	r3, r3
 8004c96:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8004c9a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c9e:	fab3 f383 	clz	r3, r3
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004ca8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	461a      	mov	r2, r3
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb4:	f7fd fc98 	bl	80025e8 <HAL_GetTick>
 8004cb8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cbc:	e00a      	b.n	8004cd4 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cbe:	f7fd fc93 	bl	80025e8 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d902      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	f000 bc66 	b.w	80055a0 <HAL_RCC_OscConfig+0xe1c>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cda:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004cde:	fa93 f3a3 	rbit	r3, r3
 8004ce2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8004ce6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cea:	fab3 f383 	clz	r3, r3
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	095b      	lsrs	r3, r3, #5
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	f043 0301 	orr.w	r3, r3, #1
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d102      	bne.n	8004d04 <HAL_RCC_OscConfig+0x580>
 8004cfe:	4b30      	ldr	r3, [pc, #192]	; (8004dc0 <HAL_RCC_OscConfig+0x63c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	e013      	b.n	8004d2c <HAL_RCC_OscConfig+0x5a8>
 8004d04:	2302      	movs	r3, #2
 8004d06:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d0e:	fa93 f3a3 	rbit	r3, r3
 8004d12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004d16:	2302      	movs	r3, #2
 8004d18:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d1c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004d20:	fa93 f3a3 	rbit	r3, r3
 8004d24:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004d28:	4b25      	ldr	r3, [pc, #148]	; (8004dc0 <HAL_RCC_OscConfig+0x63c>)
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004d32:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8004d36:	fa92 f2a2 	rbit	r2, r2
 8004d3a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8004d3e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004d42:	fab2 f282 	clz	r2, r2
 8004d46:	b2d2      	uxtb	r2, r2
 8004d48:	f042 0220 	orr.w	r2, r2, #32
 8004d4c:	b2d2      	uxtb	r2, r2
 8004d4e:	f002 021f 	and.w	r2, r2, #31
 8004d52:	2101      	movs	r1, #1
 8004d54:	fa01 f202 	lsl.w	r2, r1, r2
 8004d58:	4013      	ands	r3, r2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1af      	bne.n	8004cbe <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d5e:	1d3b      	adds	r3, r7, #4
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0308 	and.w	r3, r3, #8
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 80da 	beq.w	8004f22 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d6e:	1d3b      	adds	r3, r7, #4
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d069      	beq.n	8004e4c <HAL_RCC_OscConfig+0x6c8>
 8004d78:	2301      	movs	r3, #1
 8004d7a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d82:	fa93 f3a3 	rbit	r3, r3
 8004d86:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8004d8a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d8e:	fab3 f383 	clz	r3, r3
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	461a      	mov	r2, r3
 8004d96:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <HAL_RCC_OscConfig+0x640>)
 8004d98:	4413      	add	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	2301      	movs	r3, #1
 8004da0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004da2:	f7fd fc21 	bl	80025e8 <HAL_GetTick>
 8004da6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004daa:	e00d      	b.n	8004dc8 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dac:	f7fd fc1c 	bl	80025e8 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d905      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e3ef      	b.n	80055a0 <HAL_RCC_OscConfig+0xe1c>
 8004dc0:	40021000 	.word	0x40021000
 8004dc4:	10908120 	.word	0x10908120
 8004dc8:	2302      	movs	r3, #2
 8004dca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dd2:	fa93 f2a3 	rbit	r2, r3
 8004dd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004de0:	2202      	movs	r2, #2
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	fa93 f2a3 	rbit	r2, r3
 8004dee:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004df8:	2202      	movs	r2, #2
 8004dfa:	601a      	str	r2, [r3, #0]
 8004dfc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	fa93 f2a3 	rbit	r2, r3
 8004e06:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004e0a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e0c:	4ba4      	ldr	r3, [pc, #656]	; (80050a0 <HAL_RCC_OscConfig+0x91c>)
 8004e0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e10:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004e14:	2102      	movs	r1, #2
 8004e16:	6019      	str	r1, [r3, #0]
 8004e18:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	fa93 f1a3 	rbit	r1, r3
 8004e22:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004e26:	6019      	str	r1, [r3, #0]
  return result;
 8004e28:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	fab3 f383 	clz	r3, r3
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	f003 031f 	and.w	r3, r3, #31
 8004e3e:	2101      	movs	r1, #1
 8004e40:	fa01 f303 	lsl.w	r3, r1, r3
 8004e44:	4013      	ands	r3, r2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d0b0      	beq.n	8004dac <HAL_RCC_OscConfig+0x628>
 8004e4a:	e06a      	b.n	8004f22 <HAL_RCC_OscConfig+0x79e>
 8004e4c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004e50:	2201      	movs	r2, #1
 8004e52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e54:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	fa93 f2a3 	rbit	r2, r3
 8004e5e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004e62:	601a      	str	r2, [r3, #0]
  return result;
 8004e64:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004e68:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e6a:	fab3 f383 	clz	r3, r3
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	461a      	mov	r2, r3
 8004e72:	4b8c      	ldr	r3, [pc, #560]	; (80050a4 <HAL_RCC_OscConfig+0x920>)
 8004e74:	4413      	add	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	461a      	mov	r2, r3
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e7e:	f7fd fbb3 	bl	80025e8 <HAL_GetTick>
 8004e82:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e86:	e009      	b.n	8004e9c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e88:	f7fd fbae 	bl	80025e8 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e381      	b.n	80055a0 <HAL_RCC_OscConfig+0xe1c>
 8004e9c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	fa93 f2a3 	rbit	r2, r3
 8004eae:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004eb8:	2202      	movs	r2, #2
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	fa93 f2a3 	rbit	r2, r3
 8004ec6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004ed0:	2202      	movs	r2, #2
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	fa93 f2a3 	rbit	r2, r3
 8004ede:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004ee2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ee4:	4b6e      	ldr	r3, [pc, #440]	; (80050a0 <HAL_RCC_OscConfig+0x91c>)
 8004ee6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ee8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004eec:	2102      	movs	r1, #2
 8004eee:	6019      	str	r1, [r3, #0]
 8004ef0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	fa93 f1a3 	rbit	r1, r3
 8004efa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004efe:	6019      	str	r1, [r3, #0]
  return result;
 8004f00:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	fab3 f383 	clz	r3, r3
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	f003 031f 	and.w	r3, r3, #31
 8004f16:	2101      	movs	r1, #1
 8004f18:	fa01 f303 	lsl.w	r3, r1, r3
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1b2      	bne.n	8004e88 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f22:	1d3b      	adds	r3, r7, #4
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 8157 	beq.w	80051e0 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f32:	2300      	movs	r3, #0
 8004f34:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f38:	4b59      	ldr	r3, [pc, #356]	; (80050a0 <HAL_RCC_OscConfig+0x91c>)
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d112      	bne.n	8004f6a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f44:	4b56      	ldr	r3, [pc, #344]	; (80050a0 <HAL_RCC_OscConfig+0x91c>)
 8004f46:	69db      	ldr	r3, [r3, #28]
 8004f48:	4a55      	ldr	r2, [pc, #340]	; (80050a0 <HAL_RCC_OscConfig+0x91c>)
 8004f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f4e:	61d3      	str	r3, [r2, #28]
 8004f50:	4b53      	ldr	r3, [pc, #332]	; (80050a0 <HAL_RCC_OscConfig+0x91c>)
 8004f52:	69db      	ldr	r3, [r3, #28]
 8004f54:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004f58:	f107 030c 	add.w	r3, r7, #12
 8004f5c:	601a      	str	r2, [r3, #0]
 8004f5e:	f107 030c 	add.w	r3, r7, #12
 8004f62:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004f64:	2301      	movs	r3, #1
 8004f66:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f6a:	4b4f      	ldr	r3, [pc, #316]	; (80050a8 <HAL_RCC_OscConfig+0x924>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d11a      	bne.n	8004fac <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f76:	4b4c      	ldr	r3, [pc, #304]	; (80050a8 <HAL_RCC_OscConfig+0x924>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a4b      	ldr	r2, [pc, #300]	; (80050a8 <HAL_RCC_OscConfig+0x924>)
 8004f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f80:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f82:	f7fd fb31 	bl	80025e8 <HAL_GetTick>
 8004f86:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f8a:	e009      	b.n	8004fa0 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f8c:	f7fd fb2c 	bl	80025e8 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	2b64      	cmp	r3, #100	; 0x64
 8004f9a:	d901      	bls.n	8004fa0 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e2ff      	b.n	80055a0 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fa0:	4b41      	ldr	r3, [pc, #260]	; (80050a8 <HAL_RCC_OscConfig+0x924>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d0ef      	beq.n	8004f8c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fac:	1d3b      	adds	r3, r7, #4
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d106      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x840>
 8004fb6:	4b3a      	ldr	r3, [pc, #232]	; (80050a0 <HAL_RCC_OscConfig+0x91c>)
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	4a39      	ldr	r2, [pc, #228]	; (80050a0 <HAL_RCC_OscConfig+0x91c>)
 8004fbc:	f043 0301 	orr.w	r3, r3, #1
 8004fc0:	6213      	str	r3, [r2, #32]
 8004fc2:	e02f      	b.n	8005024 <HAL_RCC_OscConfig+0x8a0>
 8004fc4:	1d3b      	adds	r3, r7, #4
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10c      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x864>
 8004fce:	4b34      	ldr	r3, [pc, #208]	; (80050a0 <HAL_RCC_OscConfig+0x91c>)
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	4a33      	ldr	r2, [pc, #204]	; (80050a0 <HAL_RCC_OscConfig+0x91c>)
 8004fd4:	f023 0301 	bic.w	r3, r3, #1
 8004fd8:	6213      	str	r3, [r2, #32]
 8004fda:	4b31      	ldr	r3, [pc, #196]	; (80050a0 <HAL_RCC_OscConfig+0x91c>)
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	4a30      	ldr	r2, [pc, #192]	; (80050a0 <HAL_RCC_OscConfig+0x91c>)
 8004fe0:	f023 0304 	bic.w	r3, r3, #4
 8004fe4:	6213      	str	r3, [r2, #32]
 8004fe6:	e01d      	b.n	8005024 <HAL_RCC_OscConfig+0x8a0>
 8004fe8:	1d3b      	adds	r3, r7, #4
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	2b05      	cmp	r3, #5
 8004ff0:	d10c      	bne.n	800500c <HAL_RCC_OscConfig+0x888>
 8004ff2:	4b2b      	ldr	r3, [pc, #172]	; (80050a0 <HAL_RCC_OscConfig+0x91c>)
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	4a2a      	ldr	r2, [pc, #168]	; (80050a0 <HAL_RCC_OscConfig+0x91c>)
 8004ff8:	f043 0304 	orr.w	r3, r3, #4
 8004ffc:	6213      	str	r3, [r2, #32]
 8004ffe:	4b28      	ldr	r3, [pc, #160]	; (80050a0 <HAL_RCC_OscConfig+0x91c>)
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	4a27      	ldr	r2, [pc, #156]	; (80050a0 <HAL_RCC_OscConfig+0x91c>)
 8005004:	f043 0301 	orr.w	r3, r3, #1
 8005008:	6213      	str	r3, [r2, #32]
 800500a:	e00b      	b.n	8005024 <HAL_RCC_OscConfig+0x8a0>
 800500c:	4b24      	ldr	r3, [pc, #144]	; (80050a0 <HAL_RCC_OscConfig+0x91c>)
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	4a23      	ldr	r2, [pc, #140]	; (80050a0 <HAL_RCC_OscConfig+0x91c>)
 8005012:	f023 0301 	bic.w	r3, r3, #1
 8005016:	6213      	str	r3, [r2, #32]
 8005018:	4b21      	ldr	r3, [pc, #132]	; (80050a0 <HAL_RCC_OscConfig+0x91c>)
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	4a20      	ldr	r2, [pc, #128]	; (80050a0 <HAL_RCC_OscConfig+0x91c>)
 800501e:	f023 0304 	bic.w	r3, r3, #4
 8005022:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005024:	1d3b      	adds	r3, r7, #4
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d06a      	beq.n	8005104 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800502e:	f7fd fadb 	bl	80025e8 <HAL_GetTick>
 8005032:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005036:	e00b      	b.n	8005050 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005038:	f7fd fad6 	bl	80025e8 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	f241 3288 	movw	r2, #5000	; 0x1388
 8005048:	4293      	cmp	r3, r2
 800504a:	d901      	bls.n	8005050 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e2a7      	b.n	80055a0 <HAL_RCC_OscConfig+0xe1c>
 8005050:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005054:	2202      	movs	r2, #2
 8005056:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005058:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	fa93 f2a3 	rbit	r2, r3
 8005062:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800506c:	2202      	movs	r2, #2
 800506e:	601a      	str	r2, [r3, #0]
 8005070:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	fa93 f2a3 	rbit	r2, r3
 800507a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800507e:	601a      	str	r2, [r3, #0]
  return result;
 8005080:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005084:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005086:	fab3 f383 	clz	r3, r3
 800508a:	b2db      	uxtb	r3, r3
 800508c:	095b      	lsrs	r3, r3, #5
 800508e:	b2db      	uxtb	r3, r3
 8005090:	f043 0302 	orr.w	r3, r3, #2
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d108      	bne.n	80050ac <HAL_RCC_OscConfig+0x928>
 800509a:	4b01      	ldr	r3, [pc, #4]	; (80050a0 <HAL_RCC_OscConfig+0x91c>)
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	e013      	b.n	80050c8 <HAL_RCC_OscConfig+0x944>
 80050a0:	40021000 	.word	0x40021000
 80050a4:	10908120 	.word	0x10908120
 80050a8:	40007000 	.word	0x40007000
 80050ac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80050b0:	2202      	movs	r2, #2
 80050b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	fa93 f2a3 	rbit	r2, r3
 80050be:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	4bc0      	ldr	r3, [pc, #768]	; (80053c8 <HAL_RCC_OscConfig+0xc44>)
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80050cc:	2102      	movs	r1, #2
 80050ce:	6011      	str	r1, [r2, #0]
 80050d0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80050d4:	6812      	ldr	r2, [r2, #0]
 80050d6:	fa92 f1a2 	rbit	r1, r2
 80050da:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80050de:	6011      	str	r1, [r2, #0]
  return result;
 80050e0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80050e4:	6812      	ldr	r2, [r2, #0]
 80050e6:	fab2 f282 	clz	r2, r2
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050f0:	b2d2      	uxtb	r2, r2
 80050f2:	f002 021f 	and.w	r2, r2, #31
 80050f6:	2101      	movs	r1, #1
 80050f8:	fa01 f202 	lsl.w	r2, r1, r2
 80050fc:	4013      	ands	r3, r2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d09a      	beq.n	8005038 <HAL_RCC_OscConfig+0x8b4>
 8005102:	e063      	b.n	80051cc <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005104:	f7fd fa70 	bl	80025e8 <HAL_GetTick>
 8005108:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800510c:	e00b      	b.n	8005126 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800510e:	f7fd fa6b 	bl	80025e8 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	f241 3288 	movw	r2, #5000	; 0x1388
 800511e:	4293      	cmp	r3, r2
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e23c      	b.n	80055a0 <HAL_RCC_OscConfig+0xe1c>
 8005126:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800512a:	2202      	movs	r2, #2
 800512c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800512e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	fa93 f2a3 	rbit	r2, r3
 8005138:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005142:	2202      	movs	r2, #2
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	fa93 f2a3 	rbit	r2, r3
 8005150:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005154:	601a      	str	r2, [r3, #0]
  return result;
 8005156:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800515a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800515c:	fab3 f383 	clz	r3, r3
 8005160:	b2db      	uxtb	r3, r3
 8005162:	095b      	lsrs	r3, r3, #5
 8005164:	b2db      	uxtb	r3, r3
 8005166:	f043 0302 	orr.w	r3, r3, #2
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b02      	cmp	r3, #2
 800516e:	d102      	bne.n	8005176 <HAL_RCC_OscConfig+0x9f2>
 8005170:	4b95      	ldr	r3, [pc, #596]	; (80053c8 <HAL_RCC_OscConfig+0xc44>)
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	e00d      	b.n	8005192 <HAL_RCC_OscConfig+0xa0e>
 8005176:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800517a:	2202      	movs	r2, #2
 800517c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800517e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	fa93 f2a3 	rbit	r2, r3
 8005188:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	4b8e      	ldr	r3, [pc, #568]	; (80053c8 <HAL_RCC_OscConfig+0xc44>)
 8005190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005192:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8005196:	2102      	movs	r1, #2
 8005198:	6011      	str	r1, [r2, #0]
 800519a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800519e:	6812      	ldr	r2, [r2, #0]
 80051a0:	fa92 f1a2 	rbit	r1, r2
 80051a4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80051a8:	6011      	str	r1, [r2, #0]
  return result;
 80051aa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80051ae:	6812      	ldr	r2, [r2, #0]
 80051b0:	fab2 f282 	clz	r2, r2
 80051b4:	b2d2      	uxtb	r2, r2
 80051b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	f002 021f 	and.w	r2, r2, #31
 80051c0:	2101      	movs	r1, #1
 80051c2:	fa01 f202 	lsl.w	r2, r1, r2
 80051c6:	4013      	ands	r3, r2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1a0      	bne.n	800510e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80051cc:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d105      	bne.n	80051e0 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051d4:	4b7c      	ldr	r3, [pc, #496]	; (80053c8 <HAL_RCC_OscConfig+0xc44>)
 80051d6:	69db      	ldr	r3, [r3, #28]
 80051d8:	4a7b      	ldr	r2, [pc, #492]	; (80053c8 <HAL_RCC_OscConfig+0xc44>)
 80051da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051de:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051e0:	1d3b      	adds	r3, r7, #4
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f000 81d9 	beq.w	800559e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051ec:	4b76      	ldr	r3, [pc, #472]	; (80053c8 <HAL_RCC_OscConfig+0xc44>)
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f003 030c 	and.w	r3, r3, #12
 80051f4:	2b08      	cmp	r3, #8
 80051f6:	f000 81a6 	beq.w	8005546 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051fa:	1d3b      	adds	r3, r7, #4
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	2b02      	cmp	r3, #2
 8005202:	f040 811e 	bne.w	8005442 <HAL_RCC_OscConfig+0xcbe>
 8005206:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800520a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800520e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005210:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	fa93 f2a3 	rbit	r2, r3
 800521a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800521e:	601a      	str	r2, [r3, #0]
  return result;
 8005220:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005224:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005226:	fab3 f383 	clz	r3, r3
 800522a:	b2db      	uxtb	r3, r3
 800522c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005230:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	461a      	mov	r2, r3
 8005238:	2300      	movs	r3, #0
 800523a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800523c:	f7fd f9d4 	bl	80025e8 <HAL_GetTick>
 8005240:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005244:	e009      	b.n	800525a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005246:	f7fd f9cf 	bl	80025e8 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	2b02      	cmp	r3, #2
 8005254:	d901      	bls.n	800525a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e1a2      	b.n	80055a0 <HAL_RCC_OscConfig+0xe1c>
 800525a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800525e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005262:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005264:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	fa93 f2a3 	rbit	r2, r3
 800526e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005272:	601a      	str	r2, [r3, #0]
  return result;
 8005274:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005278:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800527a:	fab3 f383 	clz	r3, r3
 800527e:	b2db      	uxtb	r3, r3
 8005280:	095b      	lsrs	r3, r3, #5
 8005282:	b2db      	uxtb	r3, r3
 8005284:	f043 0301 	orr.w	r3, r3, #1
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b01      	cmp	r3, #1
 800528c:	d102      	bne.n	8005294 <HAL_RCC_OscConfig+0xb10>
 800528e:	4b4e      	ldr	r3, [pc, #312]	; (80053c8 <HAL_RCC_OscConfig+0xc44>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	e01b      	b.n	80052cc <HAL_RCC_OscConfig+0xb48>
 8005294:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005298:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800529c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800529e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	fa93 f2a3 	rbit	r2, r3
 80052a8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80052ac:	601a      	str	r2, [r3, #0]
 80052ae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80052b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	fa93 f2a3 	rbit	r2, r3
 80052c2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80052c6:	601a      	str	r2, [r3, #0]
 80052c8:	4b3f      	ldr	r3, [pc, #252]	; (80053c8 <HAL_RCC_OscConfig+0xc44>)
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052cc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80052d0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80052d4:	6011      	str	r1, [r2, #0]
 80052d6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80052da:	6812      	ldr	r2, [r2, #0]
 80052dc:	fa92 f1a2 	rbit	r1, r2
 80052e0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80052e4:	6011      	str	r1, [r2, #0]
  return result;
 80052e6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80052ea:	6812      	ldr	r2, [r2, #0]
 80052ec:	fab2 f282 	clz	r2, r2
 80052f0:	b2d2      	uxtb	r2, r2
 80052f2:	f042 0220 	orr.w	r2, r2, #32
 80052f6:	b2d2      	uxtb	r2, r2
 80052f8:	f002 021f 	and.w	r2, r2, #31
 80052fc:	2101      	movs	r1, #1
 80052fe:	fa01 f202 	lsl.w	r2, r1, r2
 8005302:	4013      	ands	r3, r2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d19e      	bne.n	8005246 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005308:	4b2f      	ldr	r3, [pc, #188]	; (80053c8 <HAL_RCC_OscConfig+0xc44>)
 800530a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530c:	f023 020f 	bic.w	r2, r3, #15
 8005310:	1d3b      	adds	r3, r7, #4
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005316:	492c      	ldr	r1, [pc, #176]	; (80053c8 <HAL_RCC_OscConfig+0xc44>)
 8005318:	4313      	orrs	r3, r2
 800531a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800531c:	4b2a      	ldr	r3, [pc, #168]	; (80053c8 <HAL_RCC_OscConfig+0xc44>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8005324:	1d3b      	adds	r3, r7, #4
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	6a19      	ldr	r1, [r3, #32]
 800532a:	1d3b      	adds	r3, r7, #4
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	69db      	ldr	r3, [r3, #28]
 8005330:	430b      	orrs	r3, r1
 8005332:	4925      	ldr	r1, [pc, #148]	; (80053c8 <HAL_RCC_OscConfig+0xc44>)
 8005334:	4313      	orrs	r3, r2
 8005336:	604b      	str	r3, [r1, #4]
 8005338:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800533c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005340:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005342:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	fa93 f2a3 	rbit	r2, r3
 800534c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005350:	601a      	str	r2, [r3, #0]
  return result;
 8005352:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005356:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005358:	fab3 f383 	clz	r3, r3
 800535c:	b2db      	uxtb	r3, r3
 800535e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005362:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	461a      	mov	r2, r3
 800536a:	2301      	movs	r3, #1
 800536c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800536e:	f7fd f93b 	bl	80025e8 <HAL_GetTick>
 8005372:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005376:	e009      	b.n	800538c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005378:	f7fd f936 	bl	80025e8 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d901      	bls.n	800538c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e109      	b.n	80055a0 <HAL_RCC_OscConfig+0xe1c>
 800538c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005390:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005394:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005396:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	fa93 f2a3 	rbit	r2, r3
 80053a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80053a4:	601a      	str	r2, [r3, #0]
  return result;
 80053a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80053aa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053ac:	fab3 f383 	clz	r3, r3
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	095b      	lsrs	r3, r3, #5
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	f043 0301 	orr.w	r3, r3, #1
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d105      	bne.n	80053cc <HAL_RCC_OscConfig+0xc48>
 80053c0:	4b01      	ldr	r3, [pc, #4]	; (80053c8 <HAL_RCC_OscConfig+0xc44>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	e01e      	b.n	8005404 <HAL_RCC_OscConfig+0xc80>
 80053c6:	bf00      	nop
 80053c8:	40021000 	.word	0x40021000
 80053cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80053d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	fa93 f2a3 	rbit	r2, r3
 80053e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80053e4:	601a      	str	r2, [r3, #0]
 80053e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80053ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053ee:	601a      	str	r2, [r3, #0]
 80053f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	fa93 f2a3 	rbit	r2, r3
 80053fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80053fe:	601a      	str	r2, [r3, #0]
 8005400:	4b6a      	ldr	r3, [pc, #424]	; (80055ac <HAL_RCC_OscConfig+0xe28>)
 8005402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005404:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005408:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800540c:	6011      	str	r1, [r2, #0]
 800540e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005412:	6812      	ldr	r2, [r2, #0]
 8005414:	fa92 f1a2 	rbit	r1, r2
 8005418:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800541c:	6011      	str	r1, [r2, #0]
  return result;
 800541e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005422:	6812      	ldr	r2, [r2, #0]
 8005424:	fab2 f282 	clz	r2, r2
 8005428:	b2d2      	uxtb	r2, r2
 800542a:	f042 0220 	orr.w	r2, r2, #32
 800542e:	b2d2      	uxtb	r2, r2
 8005430:	f002 021f 	and.w	r2, r2, #31
 8005434:	2101      	movs	r1, #1
 8005436:	fa01 f202 	lsl.w	r2, r1, r2
 800543a:	4013      	ands	r3, r2
 800543c:	2b00      	cmp	r3, #0
 800543e:	d09b      	beq.n	8005378 <HAL_RCC_OscConfig+0xbf4>
 8005440:	e0ad      	b.n	800559e <HAL_RCC_OscConfig+0xe1a>
 8005442:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005446:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800544a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800544c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	fa93 f2a3 	rbit	r2, r3
 8005456:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800545a:	601a      	str	r2, [r3, #0]
  return result;
 800545c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005460:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005462:	fab3 f383 	clz	r3, r3
 8005466:	b2db      	uxtb	r3, r3
 8005468:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800546c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	461a      	mov	r2, r3
 8005474:	2300      	movs	r3, #0
 8005476:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005478:	f7fd f8b6 	bl	80025e8 <HAL_GetTick>
 800547c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005480:	e009      	b.n	8005496 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005482:	f7fd f8b1 	bl	80025e8 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b02      	cmp	r3, #2
 8005490:	d901      	bls.n	8005496 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e084      	b.n	80055a0 <HAL_RCC_OscConfig+0xe1c>
 8005496:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800549a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800549e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	fa93 f2a3 	rbit	r2, r3
 80054aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054ae:	601a      	str	r2, [r3, #0]
  return result;
 80054b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054b6:	fab3 f383 	clz	r3, r3
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	095b      	lsrs	r3, r3, #5
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	f043 0301 	orr.w	r3, r3, #1
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d102      	bne.n	80054d0 <HAL_RCC_OscConfig+0xd4c>
 80054ca:	4b38      	ldr	r3, [pc, #224]	; (80055ac <HAL_RCC_OscConfig+0xe28>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	e01b      	b.n	8005508 <HAL_RCC_OscConfig+0xd84>
 80054d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	fa93 f2a3 	rbit	r2, r3
 80054e4:	f107 0320 	add.w	r3, r7, #32
 80054e8:	601a      	str	r2, [r3, #0]
 80054ea:	f107 031c 	add.w	r3, r7, #28
 80054ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	f107 031c 	add.w	r3, r7, #28
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	fa93 f2a3 	rbit	r2, r3
 80054fe:	f107 0318 	add.w	r3, r7, #24
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	4b29      	ldr	r3, [pc, #164]	; (80055ac <HAL_RCC_OscConfig+0xe28>)
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	f107 0214 	add.w	r2, r7, #20
 800550c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005510:	6011      	str	r1, [r2, #0]
 8005512:	f107 0214 	add.w	r2, r7, #20
 8005516:	6812      	ldr	r2, [r2, #0]
 8005518:	fa92 f1a2 	rbit	r1, r2
 800551c:	f107 0210 	add.w	r2, r7, #16
 8005520:	6011      	str	r1, [r2, #0]
  return result;
 8005522:	f107 0210 	add.w	r2, r7, #16
 8005526:	6812      	ldr	r2, [r2, #0]
 8005528:	fab2 f282 	clz	r2, r2
 800552c:	b2d2      	uxtb	r2, r2
 800552e:	f042 0220 	orr.w	r2, r2, #32
 8005532:	b2d2      	uxtb	r2, r2
 8005534:	f002 021f 	and.w	r2, r2, #31
 8005538:	2101      	movs	r1, #1
 800553a:	fa01 f202 	lsl.w	r2, r1, r2
 800553e:	4013      	ands	r3, r2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d19e      	bne.n	8005482 <HAL_RCC_OscConfig+0xcfe>
 8005544:	e02b      	b.n	800559e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005546:	1d3b      	adds	r3, r7, #4
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d101      	bne.n	8005554 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e025      	b.n	80055a0 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005554:	4b15      	ldr	r3, [pc, #84]	; (80055ac <HAL_RCC_OscConfig+0xe28>)
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800555c:	4b13      	ldr	r3, [pc, #76]	; (80055ac <HAL_RCC_OscConfig+0xe28>)
 800555e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005560:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005564:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005568:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800556c:	1d3b      	adds	r3, r7, #4
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	429a      	cmp	r2, r3
 8005574:	d111      	bne.n	800559a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005576:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800557a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800557e:	1d3b      	adds	r3, r7, #4
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005584:	429a      	cmp	r2, r3
 8005586:	d108      	bne.n	800559a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8005588:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800558c:	f003 020f 	and.w	r2, r3, #15
 8005590:	1d3b      	adds	r3, r7, #4
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005596:	429a      	cmp	r2, r3
 8005598:	d001      	beq.n	800559e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e000      	b.n	80055a0 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	40021000 	.word	0x40021000

080055b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b09e      	sub	sp, #120	; 0x78
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80055ba:	2300      	movs	r3, #0
 80055bc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d101      	bne.n	80055c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e162      	b.n	800588e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055c8:	4b90      	ldr	r3, [pc, #576]	; (800580c <HAL_RCC_ClockConfig+0x25c>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0307 	and.w	r3, r3, #7
 80055d0:	683a      	ldr	r2, [r7, #0]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d910      	bls.n	80055f8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055d6:	4b8d      	ldr	r3, [pc, #564]	; (800580c <HAL_RCC_ClockConfig+0x25c>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f023 0207 	bic.w	r2, r3, #7
 80055de:	498b      	ldr	r1, [pc, #556]	; (800580c <HAL_RCC_ClockConfig+0x25c>)
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055e6:	4b89      	ldr	r3, [pc, #548]	; (800580c <HAL_RCC_ClockConfig+0x25c>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0307 	and.w	r3, r3, #7
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d001      	beq.n	80055f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e14a      	b.n	800588e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0302 	and.w	r3, r3, #2
 8005600:	2b00      	cmp	r3, #0
 8005602:	d008      	beq.n	8005616 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005604:	4b82      	ldr	r3, [pc, #520]	; (8005810 <HAL_RCC_ClockConfig+0x260>)
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	497f      	ldr	r1, [pc, #508]	; (8005810 <HAL_RCC_ClockConfig+0x260>)
 8005612:	4313      	orrs	r3, r2
 8005614:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b00      	cmp	r3, #0
 8005620:	f000 80dc 	beq.w	80057dc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d13c      	bne.n	80056a6 <HAL_RCC_ClockConfig+0xf6>
 800562c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005630:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005632:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005634:	fa93 f3a3 	rbit	r3, r3
 8005638:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800563a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800563c:	fab3 f383 	clz	r3, r3
 8005640:	b2db      	uxtb	r3, r3
 8005642:	095b      	lsrs	r3, r3, #5
 8005644:	b2db      	uxtb	r3, r3
 8005646:	f043 0301 	orr.w	r3, r3, #1
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b01      	cmp	r3, #1
 800564e:	d102      	bne.n	8005656 <HAL_RCC_ClockConfig+0xa6>
 8005650:	4b6f      	ldr	r3, [pc, #444]	; (8005810 <HAL_RCC_ClockConfig+0x260>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	e00f      	b.n	8005676 <HAL_RCC_ClockConfig+0xc6>
 8005656:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800565a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800565c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800565e:	fa93 f3a3 	rbit	r3, r3
 8005662:	667b      	str	r3, [r7, #100]	; 0x64
 8005664:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005668:	663b      	str	r3, [r7, #96]	; 0x60
 800566a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800566c:	fa93 f3a3 	rbit	r3, r3
 8005670:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005672:	4b67      	ldr	r3, [pc, #412]	; (8005810 <HAL_RCC_ClockConfig+0x260>)
 8005674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005676:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800567a:	65ba      	str	r2, [r7, #88]	; 0x58
 800567c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800567e:	fa92 f2a2 	rbit	r2, r2
 8005682:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005684:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005686:	fab2 f282 	clz	r2, r2
 800568a:	b2d2      	uxtb	r2, r2
 800568c:	f042 0220 	orr.w	r2, r2, #32
 8005690:	b2d2      	uxtb	r2, r2
 8005692:	f002 021f 	and.w	r2, r2, #31
 8005696:	2101      	movs	r1, #1
 8005698:	fa01 f202 	lsl.w	r2, r1, r2
 800569c:	4013      	ands	r3, r2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d17b      	bne.n	800579a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e0f3      	b.n	800588e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d13c      	bne.n	8005728 <HAL_RCC_ClockConfig+0x178>
 80056ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056b2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056b6:	fa93 f3a3 	rbit	r3, r3
 80056ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80056bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056be:	fab3 f383 	clz	r3, r3
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	095b      	lsrs	r3, r3, #5
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	f043 0301 	orr.w	r3, r3, #1
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d102      	bne.n	80056d8 <HAL_RCC_ClockConfig+0x128>
 80056d2:	4b4f      	ldr	r3, [pc, #316]	; (8005810 <HAL_RCC_ClockConfig+0x260>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	e00f      	b.n	80056f8 <HAL_RCC_ClockConfig+0x148>
 80056d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056dc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056e0:	fa93 f3a3 	rbit	r3, r3
 80056e4:	647b      	str	r3, [r7, #68]	; 0x44
 80056e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056ea:	643b      	str	r3, [r7, #64]	; 0x40
 80056ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056ee:	fa93 f3a3 	rbit	r3, r3
 80056f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056f4:	4b46      	ldr	r3, [pc, #280]	; (8005810 <HAL_RCC_ClockConfig+0x260>)
 80056f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056fc:	63ba      	str	r2, [r7, #56]	; 0x38
 80056fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005700:	fa92 f2a2 	rbit	r2, r2
 8005704:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005706:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005708:	fab2 f282 	clz	r2, r2
 800570c:	b2d2      	uxtb	r2, r2
 800570e:	f042 0220 	orr.w	r2, r2, #32
 8005712:	b2d2      	uxtb	r2, r2
 8005714:	f002 021f 	and.w	r2, r2, #31
 8005718:	2101      	movs	r1, #1
 800571a:	fa01 f202 	lsl.w	r2, r1, r2
 800571e:	4013      	ands	r3, r2
 8005720:	2b00      	cmp	r3, #0
 8005722:	d13a      	bne.n	800579a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e0b2      	b.n	800588e <HAL_RCC_ClockConfig+0x2de>
 8005728:	2302      	movs	r3, #2
 800572a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800572c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572e:	fa93 f3a3 	rbit	r3, r3
 8005732:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005736:	fab3 f383 	clz	r3, r3
 800573a:	b2db      	uxtb	r3, r3
 800573c:	095b      	lsrs	r3, r3, #5
 800573e:	b2db      	uxtb	r3, r3
 8005740:	f043 0301 	orr.w	r3, r3, #1
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b01      	cmp	r3, #1
 8005748:	d102      	bne.n	8005750 <HAL_RCC_ClockConfig+0x1a0>
 800574a:	4b31      	ldr	r3, [pc, #196]	; (8005810 <HAL_RCC_ClockConfig+0x260>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	e00d      	b.n	800576c <HAL_RCC_ClockConfig+0x1bc>
 8005750:	2302      	movs	r3, #2
 8005752:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005756:	fa93 f3a3 	rbit	r3, r3
 800575a:	627b      	str	r3, [r7, #36]	; 0x24
 800575c:	2302      	movs	r3, #2
 800575e:	623b      	str	r3, [r7, #32]
 8005760:	6a3b      	ldr	r3, [r7, #32]
 8005762:	fa93 f3a3 	rbit	r3, r3
 8005766:	61fb      	str	r3, [r7, #28]
 8005768:	4b29      	ldr	r3, [pc, #164]	; (8005810 <HAL_RCC_ClockConfig+0x260>)
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	2202      	movs	r2, #2
 800576e:	61ba      	str	r2, [r7, #24]
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	fa92 f2a2 	rbit	r2, r2
 8005776:	617a      	str	r2, [r7, #20]
  return result;
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	fab2 f282 	clz	r2, r2
 800577e:	b2d2      	uxtb	r2, r2
 8005780:	f042 0220 	orr.w	r2, r2, #32
 8005784:	b2d2      	uxtb	r2, r2
 8005786:	f002 021f 	and.w	r2, r2, #31
 800578a:	2101      	movs	r1, #1
 800578c:	fa01 f202 	lsl.w	r2, r1, r2
 8005790:	4013      	ands	r3, r2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e079      	b.n	800588e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800579a:	4b1d      	ldr	r3, [pc, #116]	; (8005810 <HAL_RCC_ClockConfig+0x260>)
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f023 0203 	bic.w	r2, r3, #3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	491a      	ldr	r1, [pc, #104]	; (8005810 <HAL_RCC_ClockConfig+0x260>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057ac:	f7fc ff1c 	bl	80025e8 <HAL_GetTick>
 80057b0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057b2:	e00a      	b.n	80057ca <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057b4:	f7fc ff18 	bl	80025e8 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	f241 3288 	movw	r2, #5000	; 0x1388
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e061      	b.n	800588e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ca:	4b11      	ldr	r3, [pc, #68]	; (8005810 <HAL_RCC_ClockConfig+0x260>)
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f003 020c 	and.w	r2, r3, #12
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	429a      	cmp	r2, r3
 80057da:	d1eb      	bne.n	80057b4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057dc:	4b0b      	ldr	r3, [pc, #44]	; (800580c <HAL_RCC_ClockConfig+0x25c>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0307 	and.w	r3, r3, #7
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d214      	bcs.n	8005814 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ea:	4b08      	ldr	r3, [pc, #32]	; (800580c <HAL_RCC_ClockConfig+0x25c>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f023 0207 	bic.w	r2, r3, #7
 80057f2:	4906      	ldr	r1, [pc, #24]	; (800580c <HAL_RCC_ClockConfig+0x25c>)
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057fa:	4b04      	ldr	r3, [pc, #16]	; (800580c <HAL_RCC_ClockConfig+0x25c>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0307 	and.w	r3, r3, #7
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	429a      	cmp	r2, r3
 8005806:	d005      	beq.n	8005814 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e040      	b.n	800588e <HAL_RCC_ClockConfig+0x2de>
 800580c:	40022000 	.word	0x40022000
 8005810:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0304 	and.w	r3, r3, #4
 800581c:	2b00      	cmp	r3, #0
 800581e:	d008      	beq.n	8005832 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005820:	4b1d      	ldr	r3, [pc, #116]	; (8005898 <HAL_RCC_ClockConfig+0x2e8>)
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	491a      	ldr	r1, [pc, #104]	; (8005898 <HAL_RCC_ClockConfig+0x2e8>)
 800582e:	4313      	orrs	r3, r2
 8005830:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0308 	and.w	r3, r3, #8
 800583a:	2b00      	cmp	r3, #0
 800583c:	d009      	beq.n	8005852 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800583e:	4b16      	ldr	r3, [pc, #88]	; (8005898 <HAL_RCC_ClockConfig+0x2e8>)
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	00db      	lsls	r3, r3, #3
 800584c:	4912      	ldr	r1, [pc, #72]	; (8005898 <HAL_RCC_ClockConfig+0x2e8>)
 800584e:	4313      	orrs	r3, r2
 8005850:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005852:	f000 f829 	bl	80058a8 <HAL_RCC_GetSysClockFreq>
 8005856:	4601      	mov	r1, r0
 8005858:	4b0f      	ldr	r3, [pc, #60]	; (8005898 <HAL_RCC_ClockConfig+0x2e8>)
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005860:	22f0      	movs	r2, #240	; 0xf0
 8005862:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	fa92 f2a2 	rbit	r2, r2
 800586a:	60fa      	str	r2, [r7, #12]
  return result;
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	fab2 f282 	clz	r2, r2
 8005872:	b2d2      	uxtb	r2, r2
 8005874:	40d3      	lsrs	r3, r2
 8005876:	4a09      	ldr	r2, [pc, #36]	; (800589c <HAL_RCC_ClockConfig+0x2ec>)
 8005878:	5cd3      	ldrb	r3, [r2, r3]
 800587a:	fa21 f303 	lsr.w	r3, r1, r3
 800587e:	4a08      	ldr	r2, [pc, #32]	; (80058a0 <HAL_RCC_ClockConfig+0x2f0>)
 8005880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005882:	4b08      	ldr	r3, [pc, #32]	; (80058a4 <HAL_RCC_ClockConfig+0x2f4>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4618      	mov	r0, r3
 8005888:	f7fc fe6a 	bl	8002560 <HAL_InitTick>
  
  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3778      	adds	r7, #120	; 0x78
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	40021000 	.word	0x40021000
 800589c:	08008e64 	.word	0x08008e64
 80058a0:	20000010 	.word	0x20000010
 80058a4:	20000014 	.word	0x20000014

080058a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b08b      	sub	sp, #44	; 0x2c
 80058ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	61fb      	str	r3, [r7, #28]
 80058b2:	2300      	movs	r3, #0
 80058b4:	61bb      	str	r3, [r7, #24]
 80058b6:	2300      	movs	r3, #0
 80058b8:	627b      	str	r3, [r7, #36]	; 0x24
 80058ba:	2300      	movs	r3, #0
 80058bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80058be:	2300      	movs	r3, #0
 80058c0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80058c2:	4b2a      	ldr	r3, [pc, #168]	; (800596c <HAL_RCC_GetSysClockFreq+0xc4>)
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	f003 030c 	and.w	r3, r3, #12
 80058ce:	2b04      	cmp	r3, #4
 80058d0:	d002      	beq.n	80058d8 <HAL_RCC_GetSysClockFreq+0x30>
 80058d2:	2b08      	cmp	r3, #8
 80058d4:	d003      	beq.n	80058de <HAL_RCC_GetSysClockFreq+0x36>
 80058d6:	e03f      	b.n	8005958 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80058d8:	4b25      	ldr	r3, [pc, #148]	; (8005970 <HAL_RCC_GetSysClockFreq+0xc8>)
 80058da:	623b      	str	r3, [r7, #32]
      break;
 80058dc:	e03f      	b.n	800595e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80058e4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80058e8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	fa92 f2a2 	rbit	r2, r2
 80058f0:	607a      	str	r2, [r7, #4]
  return result;
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	fab2 f282 	clz	r2, r2
 80058f8:	b2d2      	uxtb	r2, r2
 80058fa:	40d3      	lsrs	r3, r2
 80058fc:	4a1d      	ldr	r2, [pc, #116]	; (8005974 <HAL_RCC_GetSysClockFreq+0xcc>)
 80058fe:	5cd3      	ldrb	r3, [r2, r3]
 8005900:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005902:	4b1a      	ldr	r3, [pc, #104]	; (800596c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005906:	f003 030f 	and.w	r3, r3, #15
 800590a:	220f      	movs	r2, #15
 800590c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	fa92 f2a2 	rbit	r2, r2
 8005914:	60fa      	str	r2, [r7, #12]
  return result;
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	fab2 f282 	clz	r2, r2
 800591c:	b2d2      	uxtb	r2, r2
 800591e:	40d3      	lsrs	r3, r2
 8005920:	4a15      	ldr	r2, [pc, #84]	; (8005978 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005922:	5cd3      	ldrb	r3, [r2, r3]
 8005924:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d008      	beq.n	8005942 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005930:	4a0f      	ldr	r2, [pc, #60]	; (8005970 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	fbb2 f2f3 	udiv	r2, r2, r3
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	fb02 f303 	mul.w	r3, r2, r3
 800593e:	627b      	str	r3, [r7, #36]	; 0x24
 8005940:	e007      	b.n	8005952 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005942:	4a0b      	ldr	r2, [pc, #44]	; (8005970 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	fbb2 f2f3 	udiv	r2, r2, r3
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	fb02 f303 	mul.w	r3, r2, r3
 8005950:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	623b      	str	r3, [r7, #32]
      break;
 8005956:	e002      	b.n	800595e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005958:	4b05      	ldr	r3, [pc, #20]	; (8005970 <HAL_RCC_GetSysClockFreq+0xc8>)
 800595a:	623b      	str	r3, [r7, #32]
      break;
 800595c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800595e:	6a3b      	ldr	r3, [r7, #32]
}
 8005960:	4618      	mov	r0, r3
 8005962:	372c      	adds	r7, #44	; 0x2c
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	40021000 	.word	0x40021000
 8005970:	007a1200 	.word	0x007a1200
 8005974:	08008e7c 	.word	0x08008e7c
 8005978:	08008e8c 	.word	0x08008e8c

0800597c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800597c:	b480      	push	{r7}
 800597e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005980:	4b03      	ldr	r3, [pc, #12]	; (8005990 <HAL_RCC_GetHCLKFreq+0x14>)
 8005982:	681b      	ldr	r3, [r3, #0]
}
 8005984:	4618      	mov	r0, r3
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	20000010 	.word	0x20000010

08005994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800599a:	f7ff ffef 	bl	800597c <HAL_RCC_GetHCLKFreq>
 800599e:	4601      	mov	r1, r0
 80059a0:	4b0b      	ldr	r3, [pc, #44]	; (80059d0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059a8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80059ac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	fa92 f2a2 	rbit	r2, r2
 80059b4:	603a      	str	r2, [r7, #0]
  return result;
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	fab2 f282 	clz	r2, r2
 80059bc:	b2d2      	uxtb	r2, r2
 80059be:	40d3      	lsrs	r3, r2
 80059c0:	4a04      	ldr	r2, [pc, #16]	; (80059d4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80059c2:	5cd3      	ldrb	r3, [r2, r3]
 80059c4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80059c8:	4618      	mov	r0, r3
 80059ca:	3708      	adds	r7, #8
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	40021000 	.word	0x40021000
 80059d4:	08008e74 	.word	0x08008e74

080059d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80059de:	f7ff ffcd 	bl	800597c <HAL_RCC_GetHCLKFreq>
 80059e2:	4601      	mov	r1, r0
 80059e4:	4b0b      	ldr	r3, [pc, #44]	; (8005a14 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80059ec:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80059f0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	fa92 f2a2 	rbit	r2, r2
 80059f8:	603a      	str	r2, [r7, #0]
  return result;
 80059fa:	683a      	ldr	r2, [r7, #0]
 80059fc:	fab2 f282 	clz	r2, r2
 8005a00:	b2d2      	uxtb	r2, r2
 8005a02:	40d3      	lsrs	r3, r2
 8005a04:	4a04      	ldr	r2, [pc, #16]	; (8005a18 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005a06:	5cd3      	ldrb	r3, [r2, r3]
 8005a08:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	40021000 	.word	0x40021000
 8005a18:	08008e74 	.word	0x08008e74

08005a1c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b092      	sub	sp, #72	; 0x48
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a24:	2300      	movs	r3, #0
 8005a26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f000 80d4 	beq.w	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a40:	4b4e      	ldr	r3, [pc, #312]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d10e      	bne.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a4c:	4b4b      	ldr	r3, [pc, #300]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a4e:	69db      	ldr	r3, [r3, #28]
 8005a50:	4a4a      	ldr	r2, [pc, #296]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a56:	61d3      	str	r3, [r2, #28]
 8005a58:	4b48      	ldr	r3, [pc, #288]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a5a:	69db      	ldr	r3, [r3, #28]
 8005a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a60:	60bb      	str	r3, [r7, #8]
 8005a62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a64:	2301      	movs	r3, #1
 8005a66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a6a:	4b45      	ldr	r3, [pc, #276]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d118      	bne.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a76:	4b42      	ldr	r3, [pc, #264]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a41      	ldr	r2, [pc, #260]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a80:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a82:	f7fc fdb1 	bl	80025e8 <HAL_GetTick>
 8005a86:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a88:	e008      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a8a:	f7fc fdad 	bl	80025e8 <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	2b64      	cmp	r3, #100	; 0x64
 8005a96:	d901      	bls.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e1d6      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a9c:	4b38      	ldr	r3, [pc, #224]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d0f0      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005aa8:	4b34      	ldr	r3, [pc, #208]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f000 8084 	beq.w	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ac2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d07c      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ac8:	4b2c      	ldr	r3, [pc, #176]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ad2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ad6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ada:	fa93 f3a3 	rbit	r3, r3
 8005ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ae2:	fab3 f383 	clz	r3, r3
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	461a      	mov	r2, r3
 8005aea:	4b26      	ldr	r3, [pc, #152]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005aec:	4413      	add	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	461a      	mov	r2, r3
 8005af2:	2301      	movs	r3, #1
 8005af4:	6013      	str	r3, [r2, #0]
 8005af6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005afa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afe:	fa93 f3a3 	rbit	r3, r3
 8005b02:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b06:	fab3 f383 	clz	r3, r3
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	4b1d      	ldr	r3, [pc, #116]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005b10:	4413      	add	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	461a      	mov	r2, r3
 8005b16:	2300      	movs	r3, #0
 8005b18:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005b1a:	4a18      	ldr	r2, [pc, #96]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b1e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d04b      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b2a:	f7fc fd5d 	bl	80025e8 <HAL_GetTick>
 8005b2e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b30:	e00a      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b32:	f7fc fd59 	bl	80025e8 <HAL_GetTick>
 8005b36:	4602      	mov	r2, r0
 8005b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d901      	bls.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e180      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005b48:	2302      	movs	r3, #2
 8005b4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4e:	fa93 f3a3 	rbit	r3, r3
 8005b52:	627b      	str	r3, [r7, #36]	; 0x24
 8005b54:	2302      	movs	r3, #2
 8005b56:	623b      	str	r3, [r7, #32]
 8005b58:	6a3b      	ldr	r3, [r7, #32]
 8005b5a:	fa93 f3a3 	rbit	r3, r3
 8005b5e:	61fb      	str	r3, [r7, #28]
  return result;
 8005b60:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b62:	fab3 f383 	clz	r3, r3
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	095b      	lsrs	r3, r3, #5
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	f043 0302 	orr.w	r3, r3, #2
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d108      	bne.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005b76:	4b01      	ldr	r3, [pc, #4]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	e00d      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005b7c:	40021000 	.word	0x40021000
 8005b80:	40007000 	.word	0x40007000
 8005b84:	10908100 	.word	0x10908100
 8005b88:	2302      	movs	r3, #2
 8005b8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	fa93 f3a3 	rbit	r3, r3
 8005b92:	617b      	str	r3, [r7, #20]
 8005b94:	4ba0      	ldr	r3, [pc, #640]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b98:	2202      	movs	r2, #2
 8005b9a:	613a      	str	r2, [r7, #16]
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	fa92 f2a2 	rbit	r2, r2
 8005ba2:	60fa      	str	r2, [r7, #12]
  return result;
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	fab2 f282 	clz	r2, r2
 8005baa:	b2d2      	uxtb	r2, r2
 8005bac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bb0:	b2d2      	uxtb	r2, r2
 8005bb2:	f002 021f 	and.w	r2, r2, #31
 8005bb6:	2101      	movs	r1, #1
 8005bb8:	fa01 f202 	lsl.w	r2, r1, r2
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d0b7      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005bc2:	4b95      	ldr	r3, [pc, #596]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	4992      	ldr	r1, [pc, #584]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005bd4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d105      	bne.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bdc:	4b8e      	ldr	r3, [pc, #568]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005bde:	69db      	ldr	r3, [r3, #28]
 8005be0:	4a8d      	ldr	r2, [pc, #564]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005be2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005be6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d008      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005bf4:	4b88      	ldr	r3, [pc, #544]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf8:	f023 0203 	bic.w	r2, r3, #3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	4985      	ldr	r1, [pc, #532]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0302 	and.w	r3, r3, #2
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d008      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c12:	4b81      	ldr	r3, [pc, #516]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c16:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	497e      	ldr	r1, [pc, #504]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0304 	and.w	r3, r3, #4
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d008      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c30:	4b79      	ldr	r3, [pc, #484]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	4976      	ldr	r1, [pc, #472]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0320 	and.w	r3, r3, #32
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d008      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c4e:	4b72      	ldr	r3, [pc, #456]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c52:	f023 0210 	bic.w	r2, r3, #16
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	496f      	ldr	r1, [pc, #444]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d008      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005c6c:	4b6a      	ldr	r3, [pc, #424]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c78:	4967      	ldr	r1, [pc, #412]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d008      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c8a:	4b63      	ldr	r3, [pc, #396]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c8e:	f023 0220 	bic.w	r2, r3, #32
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	4960      	ldr	r1, [pc, #384]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d008      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ca8:	4b5b      	ldr	r3, [pc, #364]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cac:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb4:	4958      	ldr	r1, [pc, #352]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0308 	and.w	r3, r3, #8
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d008      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005cc6:	4b54      	ldr	r3, [pc, #336]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	4951      	ldr	r1, [pc, #324]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0310 	and.w	r3, r3, #16
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d008      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005ce4:	4b4c      	ldr	r3, [pc, #304]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	4949      	ldr	r1, [pc, #292]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d008      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d02:	4b45      	ldr	r3, [pc, #276]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0e:	4942      	ldr	r1, [pc, #264]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d008      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005d20:	4b3d      	ldr	r3, [pc, #244]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d24:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2c:	493a      	ldr	r1, [pc, #232]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d008      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005d3e:	4b36      	ldr	r3, [pc, #216]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d42:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4a:	4933      	ldr	r1, [pc, #204]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d008      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005d5c:	4b2e      	ldr	r3, [pc, #184]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d68:	492b      	ldr	r1, [pc, #172]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d008      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005d7a:	4b27      	ldr	r3, [pc, #156]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d7e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d86:	4924      	ldr	r1, [pc, #144]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d008      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005d98:	4b1f      	ldr	r3, [pc, #124]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da4:	491c      	ldr	r1, [pc, #112]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d008      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005db6:	4b18      	ldr	r3, [pc, #96]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc2:	4915      	ldr	r1, [pc, #84]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d008      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005dd4:	4b10      	ldr	r3, [pc, #64]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de0:	490d      	ldr	r1, [pc, #52]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d008      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005df2:	4b09      	ldr	r3, [pc, #36]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dfe:	4906      	ldr	r1, [pc, #24]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00c      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005e10:	4b01      	ldr	r3, [pc, #4]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e14:	e002      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005e16:	bf00      	nop
 8005e18:	40021000 	.word	0x40021000
 8005e1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e24:	490b      	ldr	r1, [pc, #44]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d008      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8005e36:	4b07      	ldr	r3, [pc, #28]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e42:	4904      	ldr	r1, [pc, #16]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3748      	adds	r7, #72	; 0x48
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	40021000 	.word	0x40021000

08005e58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d101      	bne.n	8005e6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e049      	b.n	8005efe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d106      	bne.n	8005e84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f7fc fa1e 	bl	80022c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2202      	movs	r2, #2
 8005e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	3304      	adds	r3, #4
 8005e94:	4619      	mov	r1, r3
 8005e96:	4610      	mov	r0, r2
 8005e98:	f000 fb14 	bl	80064c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3708      	adds	r7, #8
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
	...

08005f08 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d001      	beq.n	8005f20 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e047      	b.n	8005fb0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2202      	movs	r2, #2
 8005f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a23      	ldr	r2, [pc, #140]	; (8005fbc <HAL_TIM_Base_Start+0xb4>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d01d      	beq.n	8005f6e <HAL_TIM_Base_Start+0x66>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f3a:	d018      	beq.n	8005f6e <HAL_TIM_Base_Start+0x66>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a1f      	ldr	r2, [pc, #124]	; (8005fc0 <HAL_TIM_Base_Start+0xb8>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d013      	beq.n	8005f6e <HAL_TIM_Base_Start+0x66>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a1e      	ldr	r2, [pc, #120]	; (8005fc4 <HAL_TIM_Base_Start+0xbc>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d00e      	beq.n	8005f6e <HAL_TIM_Base_Start+0x66>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a1c      	ldr	r2, [pc, #112]	; (8005fc8 <HAL_TIM_Base_Start+0xc0>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d009      	beq.n	8005f6e <HAL_TIM_Base_Start+0x66>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a1b      	ldr	r2, [pc, #108]	; (8005fcc <HAL_TIM_Base_Start+0xc4>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d004      	beq.n	8005f6e <HAL_TIM_Base_Start+0x66>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a19      	ldr	r2, [pc, #100]	; (8005fd0 <HAL_TIM_Base_Start+0xc8>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d115      	bne.n	8005f9a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689a      	ldr	r2, [r3, #8]
 8005f74:	4b17      	ldr	r3, [pc, #92]	; (8005fd4 <HAL_TIM_Base_Start+0xcc>)
 8005f76:	4013      	ands	r3, r2
 8005f78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2b06      	cmp	r3, #6
 8005f7e:	d015      	beq.n	8005fac <HAL_TIM_Base_Start+0xa4>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f86:	d011      	beq.n	8005fac <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f042 0201 	orr.w	r2, r2, #1
 8005f96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f98:	e008      	b.n	8005fac <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f042 0201 	orr.w	r2, r2, #1
 8005fa8:	601a      	str	r2, [r3, #0]
 8005faa:	e000      	b.n	8005fae <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3714      	adds	r7, #20
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr
 8005fbc:	40012c00 	.word	0x40012c00
 8005fc0:	40000400 	.word	0x40000400
 8005fc4:	40000800 	.word	0x40000800
 8005fc8:	40013400 	.word	0x40013400
 8005fcc:	40014000 	.word	0x40014000
 8005fd0:	40015000 	.word	0x40015000
 8005fd4:	00010007 	.word	0x00010007

08005fd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d001      	beq.n	8005ff0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e04f      	b.n	8006090 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68da      	ldr	r2, [r3, #12]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f042 0201 	orr.w	r2, r2, #1
 8006006:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a23      	ldr	r2, [pc, #140]	; (800609c <HAL_TIM_Base_Start_IT+0xc4>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d01d      	beq.n	800604e <HAL_TIM_Base_Start_IT+0x76>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800601a:	d018      	beq.n	800604e <HAL_TIM_Base_Start_IT+0x76>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a1f      	ldr	r2, [pc, #124]	; (80060a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d013      	beq.n	800604e <HAL_TIM_Base_Start_IT+0x76>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a1e      	ldr	r2, [pc, #120]	; (80060a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d00e      	beq.n	800604e <HAL_TIM_Base_Start_IT+0x76>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a1c      	ldr	r2, [pc, #112]	; (80060a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d009      	beq.n	800604e <HAL_TIM_Base_Start_IT+0x76>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a1b      	ldr	r2, [pc, #108]	; (80060ac <HAL_TIM_Base_Start_IT+0xd4>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d004      	beq.n	800604e <HAL_TIM_Base_Start_IT+0x76>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a19      	ldr	r2, [pc, #100]	; (80060b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d115      	bne.n	800607a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	689a      	ldr	r2, [r3, #8]
 8006054:	4b17      	ldr	r3, [pc, #92]	; (80060b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006056:	4013      	ands	r3, r2
 8006058:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2b06      	cmp	r3, #6
 800605e:	d015      	beq.n	800608c <HAL_TIM_Base_Start_IT+0xb4>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006066:	d011      	beq.n	800608c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f042 0201 	orr.w	r2, r2, #1
 8006076:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006078:	e008      	b.n	800608c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f042 0201 	orr.w	r2, r2, #1
 8006088:	601a      	str	r2, [r3, #0]
 800608a:	e000      	b.n	800608e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800608c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3714      	adds	r7, #20
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr
 800609c:	40012c00 	.word	0x40012c00
 80060a0:	40000400 	.word	0x40000400
 80060a4:	40000800 	.word	0x40000800
 80060a8:	40013400 	.word	0x40013400
 80060ac:	40014000 	.word	0x40014000
 80060b0:	40015000 	.word	0x40015000
 80060b4:	00010007 	.word	0x00010007

080060b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d122      	bne.n	8006114 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	f003 0302 	and.w	r3, r3, #2
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d11b      	bne.n	8006114 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f06f 0202 	mvn.w	r2, #2
 80060e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	f003 0303 	and.w	r3, r3, #3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f9c3 	bl	8006486 <HAL_TIM_IC_CaptureCallback>
 8006100:	e005      	b.n	800610e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f9b5 	bl	8006472 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 f9c6 	bl	800649a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	f003 0304 	and.w	r3, r3, #4
 800611e:	2b04      	cmp	r3, #4
 8006120:	d122      	bne.n	8006168 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	f003 0304 	and.w	r3, r3, #4
 800612c:	2b04      	cmp	r3, #4
 800612e:	d11b      	bne.n	8006168 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f06f 0204 	mvn.w	r2, #4
 8006138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2202      	movs	r2, #2
 800613e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f999 	bl	8006486 <HAL_TIM_IC_CaptureCallback>
 8006154:	e005      	b.n	8006162 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f98b 	bl	8006472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 f99c 	bl	800649a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	f003 0308 	and.w	r3, r3, #8
 8006172:	2b08      	cmp	r3, #8
 8006174:	d122      	bne.n	80061bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	f003 0308 	and.w	r3, r3, #8
 8006180:	2b08      	cmp	r3, #8
 8006182:	d11b      	bne.n	80061bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f06f 0208 	mvn.w	r2, #8
 800618c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2204      	movs	r2, #4
 8006192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	f003 0303 	and.w	r3, r3, #3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f96f 	bl	8006486 <HAL_TIM_IC_CaptureCallback>
 80061a8:	e005      	b.n	80061b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f961 	bl	8006472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 f972 	bl	800649a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	f003 0310 	and.w	r3, r3, #16
 80061c6:	2b10      	cmp	r3, #16
 80061c8:	d122      	bne.n	8006210 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	f003 0310 	and.w	r3, r3, #16
 80061d4:	2b10      	cmp	r3, #16
 80061d6:	d11b      	bne.n	8006210 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f06f 0210 	mvn.w	r2, #16
 80061e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2208      	movs	r2, #8
 80061e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	69db      	ldr	r3, [r3, #28]
 80061ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d003      	beq.n	80061fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f945 	bl	8006486 <HAL_TIM_IC_CaptureCallback>
 80061fc:	e005      	b.n	800620a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f937 	bl	8006472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 f948 	bl	800649a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	2b01      	cmp	r3, #1
 800621c:	d10e      	bne.n	800623c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	2b01      	cmp	r3, #1
 800622a:	d107      	bne.n	800623c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f06f 0201 	mvn.w	r2, #1
 8006234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f7fb fbf2 	bl	8001a20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006246:	2b80      	cmp	r3, #128	; 0x80
 8006248:	d10e      	bne.n	8006268 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006254:	2b80      	cmp	r3, #128	; 0x80
 8006256:	d107      	bne.n	8006268 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fafc 	bl	8006860 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006276:	d10e      	bne.n	8006296 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006282:	2b80      	cmp	r3, #128	; 0x80
 8006284:	d107      	bne.n	8006296 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800628e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 faef 	bl	8006874 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a0:	2b40      	cmp	r3, #64	; 0x40
 80062a2:	d10e      	bne.n	80062c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ae:	2b40      	cmp	r3, #64	; 0x40
 80062b0:	d107      	bne.n	80062c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 f8f6 	bl	80064ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	f003 0320 	and.w	r3, r3, #32
 80062cc:	2b20      	cmp	r3, #32
 80062ce:	d10e      	bne.n	80062ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	f003 0320 	and.w	r3, r3, #32
 80062da:	2b20      	cmp	r3, #32
 80062dc:	d107      	bne.n	80062ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f06f 0220 	mvn.w	r2, #32
 80062e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 faaf 	bl	800684c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062ee:	bf00      	nop
 80062f0:	3708      	adds	r7, #8
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b084      	sub	sp, #16
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
 80062fe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006300:	2300      	movs	r3, #0
 8006302:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800630a:	2b01      	cmp	r3, #1
 800630c:	d101      	bne.n	8006312 <HAL_TIM_ConfigClockSource+0x1c>
 800630e:	2302      	movs	r3, #2
 8006310:	e0ab      	b.n	800646a <HAL_TIM_ConfigClockSource+0x174>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2202      	movs	r2, #2
 800631e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006330:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006334:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800633c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2b40      	cmp	r3, #64	; 0x40
 800634c:	d067      	beq.n	800641e <HAL_TIM_ConfigClockSource+0x128>
 800634e:	2b40      	cmp	r3, #64	; 0x40
 8006350:	d80b      	bhi.n	800636a <HAL_TIM_ConfigClockSource+0x74>
 8006352:	2b10      	cmp	r3, #16
 8006354:	d073      	beq.n	800643e <HAL_TIM_ConfigClockSource+0x148>
 8006356:	2b10      	cmp	r3, #16
 8006358:	d802      	bhi.n	8006360 <HAL_TIM_ConfigClockSource+0x6a>
 800635a:	2b00      	cmp	r3, #0
 800635c:	d06f      	beq.n	800643e <HAL_TIM_ConfigClockSource+0x148>
 800635e:	e077      	b.n	8006450 <HAL_TIM_ConfigClockSource+0x15a>
 8006360:	2b20      	cmp	r3, #32
 8006362:	d06c      	beq.n	800643e <HAL_TIM_ConfigClockSource+0x148>
 8006364:	2b30      	cmp	r3, #48	; 0x30
 8006366:	d06a      	beq.n	800643e <HAL_TIM_ConfigClockSource+0x148>
 8006368:	e072      	b.n	8006450 <HAL_TIM_ConfigClockSource+0x15a>
 800636a:	2b70      	cmp	r3, #112	; 0x70
 800636c:	d00d      	beq.n	800638a <HAL_TIM_ConfigClockSource+0x94>
 800636e:	2b70      	cmp	r3, #112	; 0x70
 8006370:	d804      	bhi.n	800637c <HAL_TIM_ConfigClockSource+0x86>
 8006372:	2b50      	cmp	r3, #80	; 0x50
 8006374:	d033      	beq.n	80063de <HAL_TIM_ConfigClockSource+0xe8>
 8006376:	2b60      	cmp	r3, #96	; 0x60
 8006378:	d041      	beq.n	80063fe <HAL_TIM_ConfigClockSource+0x108>
 800637a:	e069      	b.n	8006450 <HAL_TIM_ConfigClockSource+0x15a>
 800637c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006380:	d069      	beq.n	8006456 <HAL_TIM_ConfigClockSource+0x160>
 8006382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006386:	d017      	beq.n	80063b8 <HAL_TIM_ConfigClockSource+0xc2>
 8006388:	e062      	b.n	8006450 <HAL_TIM_ConfigClockSource+0x15a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6818      	ldr	r0, [r3, #0]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	6899      	ldr	r1, [r3, #8]
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	685a      	ldr	r2, [r3, #4]
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	f000 f9ab 	bl	80066f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68ba      	ldr	r2, [r7, #8]
 80063b4:	609a      	str	r2, [r3, #8]
      break;
 80063b6:	e04f      	b.n	8006458 <HAL_TIM_ConfigClockSource+0x162>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6818      	ldr	r0, [r3, #0]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	6899      	ldr	r1, [r3, #8]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	685a      	ldr	r2, [r3, #4]
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	f000 f994 	bl	80066f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	689a      	ldr	r2, [r3, #8]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063da:	609a      	str	r2, [r3, #8]
      break;
 80063dc:	e03c      	b.n	8006458 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6818      	ldr	r0, [r3, #0]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	6859      	ldr	r1, [r3, #4]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	461a      	mov	r2, r3
 80063ec:	f000 f908 	bl	8006600 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2150      	movs	r1, #80	; 0x50
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 f961 	bl	80066be <TIM_ITRx_SetConfig>
      break;
 80063fc:	e02c      	b.n	8006458 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6818      	ldr	r0, [r3, #0]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	6859      	ldr	r1, [r3, #4]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	461a      	mov	r2, r3
 800640c:	f000 f927 	bl	800665e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2160      	movs	r1, #96	; 0x60
 8006416:	4618      	mov	r0, r3
 8006418:	f000 f951 	bl	80066be <TIM_ITRx_SetConfig>
      break;
 800641c:	e01c      	b.n	8006458 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6818      	ldr	r0, [r3, #0]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	6859      	ldr	r1, [r3, #4]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	461a      	mov	r2, r3
 800642c:	f000 f8e8 	bl	8006600 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2140      	movs	r1, #64	; 0x40
 8006436:	4618      	mov	r0, r3
 8006438:	f000 f941 	bl	80066be <TIM_ITRx_SetConfig>
      break;
 800643c:	e00c      	b.n	8006458 <HAL_TIM_ConfigClockSource+0x162>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4619      	mov	r1, r3
 8006448:	4610      	mov	r0, r2
 800644a:	f000 f938 	bl	80066be <TIM_ITRx_SetConfig>
      break;
 800644e:	e003      	b.n	8006458 <HAL_TIM_ConfigClockSource+0x162>
    }

    default:
      status = HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	73fb      	strb	r3, [r7, #15]
      break;
 8006454:	e000      	b.n	8006458 <HAL_TIM_ConfigClockSource+0x162>
      break;
 8006456:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006468:	7bfb      	ldrb	r3, [r7, #15]
}
 800646a:	4618      	mov	r0, r3
 800646c:	3710      	adds	r7, #16
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006472:	b480      	push	{r7}
 8006474:	b083      	sub	sp, #12
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800647a:	bf00      	nop
 800647c:	370c      	adds	r7, #12
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006486:	b480      	push	{r7}
 8006488:	b083      	sub	sp, #12
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800648e:	bf00      	nop
 8006490:	370c      	adds	r7, #12
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800649a:	b480      	push	{r7}
 800649c:	b083      	sub	sp, #12
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064a2:	bf00      	nop
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b083      	sub	sp, #12
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064b6:	bf00      	nop
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
	...

080064c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a42      	ldr	r2, [pc, #264]	; (80065e0 <TIM_Base_SetConfig+0x11c>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d013      	beq.n	8006504 <TIM_Base_SetConfig+0x40>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064e2:	d00f      	beq.n	8006504 <TIM_Base_SetConfig+0x40>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a3f      	ldr	r2, [pc, #252]	; (80065e4 <TIM_Base_SetConfig+0x120>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d00b      	beq.n	8006504 <TIM_Base_SetConfig+0x40>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a3e      	ldr	r2, [pc, #248]	; (80065e8 <TIM_Base_SetConfig+0x124>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d007      	beq.n	8006504 <TIM_Base_SetConfig+0x40>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a3d      	ldr	r2, [pc, #244]	; (80065ec <TIM_Base_SetConfig+0x128>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d003      	beq.n	8006504 <TIM_Base_SetConfig+0x40>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a3c      	ldr	r2, [pc, #240]	; (80065f0 <TIM_Base_SetConfig+0x12c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d108      	bne.n	8006516 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800650a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	4313      	orrs	r3, r2
 8006514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a31      	ldr	r2, [pc, #196]	; (80065e0 <TIM_Base_SetConfig+0x11c>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d01f      	beq.n	800655e <TIM_Base_SetConfig+0x9a>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006524:	d01b      	beq.n	800655e <TIM_Base_SetConfig+0x9a>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a2e      	ldr	r2, [pc, #184]	; (80065e4 <TIM_Base_SetConfig+0x120>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d017      	beq.n	800655e <TIM_Base_SetConfig+0x9a>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a2d      	ldr	r2, [pc, #180]	; (80065e8 <TIM_Base_SetConfig+0x124>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d013      	beq.n	800655e <TIM_Base_SetConfig+0x9a>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a2c      	ldr	r2, [pc, #176]	; (80065ec <TIM_Base_SetConfig+0x128>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d00f      	beq.n	800655e <TIM_Base_SetConfig+0x9a>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a2c      	ldr	r2, [pc, #176]	; (80065f4 <TIM_Base_SetConfig+0x130>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d00b      	beq.n	800655e <TIM_Base_SetConfig+0x9a>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a2b      	ldr	r2, [pc, #172]	; (80065f8 <TIM_Base_SetConfig+0x134>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d007      	beq.n	800655e <TIM_Base_SetConfig+0x9a>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a2a      	ldr	r2, [pc, #168]	; (80065fc <TIM_Base_SetConfig+0x138>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d003      	beq.n	800655e <TIM_Base_SetConfig+0x9a>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a25      	ldr	r2, [pc, #148]	; (80065f0 <TIM_Base_SetConfig+0x12c>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d108      	bne.n	8006570 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	4313      	orrs	r3, r2
 800656e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	4313      	orrs	r3, r2
 800657c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	689a      	ldr	r2, [r3, #8]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a12      	ldr	r2, [pc, #72]	; (80065e0 <TIM_Base_SetConfig+0x11c>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d013      	beq.n	80065c4 <TIM_Base_SetConfig+0x100>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a13      	ldr	r2, [pc, #76]	; (80065ec <TIM_Base_SetConfig+0x128>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d00f      	beq.n	80065c4 <TIM_Base_SetConfig+0x100>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a13      	ldr	r2, [pc, #76]	; (80065f4 <TIM_Base_SetConfig+0x130>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d00b      	beq.n	80065c4 <TIM_Base_SetConfig+0x100>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a12      	ldr	r2, [pc, #72]	; (80065f8 <TIM_Base_SetConfig+0x134>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d007      	beq.n	80065c4 <TIM_Base_SetConfig+0x100>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a11      	ldr	r2, [pc, #68]	; (80065fc <TIM_Base_SetConfig+0x138>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d003      	beq.n	80065c4 <TIM_Base_SetConfig+0x100>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a0c      	ldr	r2, [pc, #48]	; (80065f0 <TIM_Base_SetConfig+0x12c>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d103      	bne.n	80065cc <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	691a      	ldr	r2, [r3, #16]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	615a      	str	r2, [r3, #20]
}
 80065d2:	bf00      	nop
 80065d4:	3714      	adds	r7, #20
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	40012c00 	.word	0x40012c00
 80065e4:	40000400 	.word	0x40000400
 80065e8:	40000800 	.word	0x40000800
 80065ec:	40013400 	.word	0x40013400
 80065f0:	40015000 	.word	0x40015000
 80065f4:	40014000 	.word	0x40014000
 80065f8:	40014400 	.word	0x40014400
 80065fc:	40014800 	.word	0x40014800

08006600 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006600:	b480      	push	{r7}
 8006602:	b087      	sub	sp, #28
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6a1b      	ldr	r3, [r3, #32]
 8006610:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	f023 0201 	bic.w	r2, r3, #1
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800662a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	011b      	lsls	r3, r3, #4
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	4313      	orrs	r3, r2
 8006634:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f023 030a 	bic.w	r3, r3, #10
 800663c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	4313      	orrs	r3, r2
 8006644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	621a      	str	r2, [r3, #32]
}
 8006652:	bf00      	nop
 8006654:	371c      	adds	r7, #28
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800665e:	b480      	push	{r7}
 8006660:	b087      	sub	sp, #28
 8006662:	af00      	add	r7, sp, #0
 8006664:	60f8      	str	r0, [r7, #12]
 8006666:	60b9      	str	r1, [r7, #8]
 8006668:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6a1b      	ldr	r3, [r3, #32]
 800666e:	f023 0210 	bic.w	r2, r3, #16
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6a1b      	ldr	r3, [r3, #32]
 8006680:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006688:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	031b      	lsls	r3, r3, #12
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	4313      	orrs	r3, r2
 8006692:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800669a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	011b      	lsls	r3, r3, #4
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	621a      	str	r2, [r3, #32]
}
 80066b2:	bf00      	nop
 80066b4:	371c      	adds	r7, #28
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066be:	b480      	push	{r7}
 80066c0:	b085      	sub	sp, #20
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
 80066c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	4313      	orrs	r3, r2
 80066dc:	f043 0307 	orr.w	r3, r3, #7
 80066e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	609a      	str	r2, [r3, #8]
}
 80066e8:	bf00      	nop
 80066ea:	3714      	adds	r7, #20
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b087      	sub	sp, #28
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
 8006700:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800670e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	021a      	lsls	r2, r3, #8
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	431a      	orrs	r2, r3
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	4313      	orrs	r3, r2
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	4313      	orrs	r3, r2
 8006720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	609a      	str	r2, [r3, #8]
}
 8006728:	bf00      	nop
 800672a:	371c      	adds	r7, #28
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006744:	2b01      	cmp	r3, #1
 8006746:	d101      	bne.n	800674c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006748:	2302      	movs	r3, #2
 800674a:	e06d      	b.n	8006828 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2202      	movs	r2, #2
 8006758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a30      	ldr	r2, [pc, #192]	; (8006834 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d009      	beq.n	800678a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a2f      	ldr	r2, [pc, #188]	; (8006838 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d004      	beq.n	800678a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a2d      	ldr	r2, [pc, #180]	; (800683c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d108      	bne.n	800679c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006790:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	4313      	orrs	r3, r2
 800679a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a1e      	ldr	r2, [pc, #120]	; (8006834 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d01d      	beq.n	80067fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067c8:	d018      	beq.n	80067fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a1c      	ldr	r2, [pc, #112]	; (8006840 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d013      	beq.n	80067fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a1a      	ldr	r2, [pc, #104]	; (8006844 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d00e      	beq.n	80067fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a15      	ldr	r2, [pc, #84]	; (8006838 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d009      	beq.n	80067fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a16      	ldr	r2, [pc, #88]	; (8006848 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d004      	beq.n	80067fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a11      	ldr	r2, [pc, #68]	; (800683c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d10c      	bne.n	8006816 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006802:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	4313      	orrs	r3, r2
 800680c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68ba      	ldr	r2, [r7, #8]
 8006814:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3714      	adds	r7, #20
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr
 8006834:	40012c00 	.word	0x40012c00
 8006838:	40013400 	.word	0x40013400
 800683c:	40015000 	.word	0x40015000
 8006840:	40000400 	.word	0x40000400
 8006844:	40000800 	.word	0x40000800
 8006848:	40014000 	.word	0x40014000

0800684c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e040      	b.n	800691c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d106      	bne.n	80068b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f7fb fd48 	bl	8002340 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2224      	movs	r2, #36	; 0x24
 80068b4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f022 0201 	bic.w	r2, r2, #1
 80068c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 fc0e 	bl	80070e8 <UART_SetConfig>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d101      	bne.n	80068d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e022      	b.n	800691c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fdd6 	bl	8007490 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685a      	ldr	r2, [r3, #4]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	689a      	ldr	r2, [r3, #8]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006902:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f042 0201 	orr.w	r2, r2, #1
 8006912:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 fe5d 	bl	80075d4 <UART_CheckIdleState>
 800691a:	4603      	mov	r3, r0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3708      	adds	r7, #8
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b08a      	sub	sp, #40	; 0x28
 8006928:	af02      	add	r7, sp, #8
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	603b      	str	r3, [r7, #0]
 8006930:	4613      	mov	r3, r2
 8006932:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006938:	2b20      	cmp	r3, #32
 800693a:	f040 8082 	bne.w	8006a42 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d002      	beq.n	800694a <HAL_UART_Transmit+0x26>
 8006944:	88fb      	ldrh	r3, [r7, #6]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d101      	bne.n	800694e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e07a      	b.n	8006a44 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006954:	2b01      	cmp	r3, #1
 8006956:	d101      	bne.n	800695c <HAL_UART_Transmit+0x38>
 8006958:	2302      	movs	r3, #2
 800695a:	e073      	b.n	8006a44 <HAL_UART_Transmit+0x120>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2221      	movs	r2, #33	; 0x21
 8006970:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006972:	f7fb fe39 	bl	80025e8 <HAL_GetTick>
 8006976:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	88fa      	ldrh	r2, [r7, #6]
 800697c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	88fa      	ldrh	r2, [r7, #6]
 8006984:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006990:	d108      	bne.n	80069a4 <HAL_UART_Transmit+0x80>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d104      	bne.n	80069a4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800699a:	2300      	movs	r3, #0
 800699c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	61bb      	str	r3, [r7, #24]
 80069a2:	e003      	b.n	80069ac <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069a8:	2300      	movs	r3, #0
 80069aa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80069b4:	e02d      	b.n	8006a12 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	2200      	movs	r2, #0
 80069be:	2180      	movs	r1, #128	; 0x80
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f000 fe50 	bl	8007666 <UART_WaitOnFlagUntilTimeout>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d001      	beq.n	80069d0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e039      	b.n	8006a44 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10b      	bne.n	80069ee <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	881a      	ldrh	r2, [r3, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069e2:	b292      	uxth	r2, r2
 80069e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	3302      	adds	r3, #2
 80069ea:	61bb      	str	r3, [r7, #24]
 80069ec:	e008      	b.n	8006a00 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	781a      	ldrb	r2, [r3, #0]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	b292      	uxth	r2, r2
 80069f8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	3301      	adds	r3, #1
 80069fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1cb      	bne.n	80069b6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	9300      	str	r3, [sp, #0]
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	2200      	movs	r2, #0
 8006a26:	2140      	movs	r1, #64	; 0x40
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	f000 fe1c 	bl	8007666 <UART_WaitOnFlagUntilTimeout>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d001      	beq.n	8006a38 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e005      	b.n	8006a44 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2220      	movs	r2, #32
 8006a3c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	e000      	b.n	8006a44 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006a42:	2302      	movs	r3, #2
  }
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3720      	adds	r7, #32
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b08a      	sub	sp, #40	; 0x28
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	4613      	mov	r3, r2
 8006a58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a5e:	2b20      	cmp	r3, #32
 8006a60:	d13d      	bne.n	8006ade <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d002      	beq.n	8006a6e <HAL_UART_Receive_IT+0x22>
 8006a68:	88fb      	ldrh	r3, [r7, #6]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e036      	b.n	8006ae0 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d101      	bne.n	8006a80 <HAL_UART_Receive_IT+0x34>
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	e02f      	b.n	8006ae0 <HAL_UART_Receive_IT+0x94>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d018      	beq.n	8006ace <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	e853 3f00 	ldrex	r3, [r3]
 8006aa8:	613b      	str	r3, [r7, #16]
   return(result);
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	623b      	str	r3, [r7, #32]
 8006abc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006abe:	69f9      	ldr	r1, [r7, #28]
 8006ac0:	6a3a      	ldr	r2, [r7, #32]
 8006ac2:	e841 2300 	strex	r3, r2, [r1]
 8006ac6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1e6      	bne.n	8006a9c <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006ace:	88fb      	ldrh	r3, [r7, #6]
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	68b9      	ldr	r1, [r7, #8]
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f000 fe8b 	bl	80077f0 <UART_Start_Receive_IT>
 8006ada:	4603      	mov	r3, r0
 8006adc:	e000      	b.n	8006ae0 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006ade:	2302      	movs	r3, #2
  }
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3728      	adds	r7, #40	; 0x28
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b0ba      	sub	sp, #232	; 0xe8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	69db      	ldr	r3, [r3, #28]
 8006af6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006b12:	f640 030f 	movw	r3, #2063	; 0x80f
 8006b16:	4013      	ands	r3, r2
 8006b18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006b1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d115      	bne.n	8006b50 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b28:	f003 0320 	and.w	r3, r3, #32
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00f      	beq.n	8006b50 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b34:	f003 0320 	and.w	r3, r3, #32
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d009      	beq.n	8006b50 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f000 82a4 	beq.w	800708e <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	4798      	blx	r3
      }
      return;
 8006b4e:	e29e      	b.n	800708e <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006b50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f000 8117 	beq.w	8006d88 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006b5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b5e:	f003 0301 	and.w	r3, r3, #1
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d106      	bne.n	8006b74 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006b66:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006b6a:	4b85      	ldr	r3, [pc, #532]	; (8006d80 <HAL_UART_IRQHandler+0x298>)
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f000 810a 	beq.w	8006d88 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d011      	beq.n	8006ba4 <HAL_UART_IRQHandler+0xbc>
 8006b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00b      	beq.n	8006ba4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2201      	movs	r2, #1
 8006b92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b9a:	f043 0201 	orr.w	r2, r3, #1
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ba8:	f003 0302 	and.w	r3, r3, #2
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d011      	beq.n	8006bd4 <HAL_UART_IRQHandler+0xec>
 8006bb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bb4:	f003 0301 	and.w	r3, r3, #1
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00b      	beq.n	8006bd4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2202      	movs	r2, #2
 8006bc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bca:	f043 0204 	orr.w	r2, r3, #4
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bd8:	f003 0304 	and.w	r3, r3, #4
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d011      	beq.n	8006c04 <HAL_UART_IRQHandler+0x11c>
 8006be0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006be4:	f003 0301 	and.w	r3, r3, #1
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00b      	beq.n	8006c04 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2204      	movs	r2, #4
 8006bf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bfa:	f043 0202 	orr.w	r2, r3, #2
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c08:	f003 0308 	and.w	r3, r3, #8
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d017      	beq.n	8006c40 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c14:	f003 0320 	and.w	r3, r3, #32
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d105      	bne.n	8006c28 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006c1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c20:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00b      	beq.n	8006c40 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2208      	movs	r2, #8
 8006c2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c36:	f043 0208 	orr.w	r2, r3, #8
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d012      	beq.n	8006c72 <HAL_UART_IRQHandler+0x18a>
 8006c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00c      	beq.n	8006c72 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c68:	f043 0220 	orr.w	r2, r3, #32
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f000 820a 	beq.w	8007092 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c82:	f003 0320 	and.w	r3, r3, #32
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00d      	beq.n	8006ca6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c8e:	f003 0320 	and.w	r3, r3, #32
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d007      	beq.n	8006ca6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d003      	beq.n	8006ca6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cba:	2b40      	cmp	r3, #64	; 0x40
 8006cbc:	d005      	beq.n	8006cca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006cbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cc2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d04f      	beq.n	8006d6a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 fe3c 	bl	8007948 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cda:	2b40      	cmp	r3, #64	; 0x40
 8006cdc:	d141      	bne.n	8006d62 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	3308      	adds	r3, #8
 8006ce4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cec:	e853 3f00 	ldrex	r3, [r3]
 8006cf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006cf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	3308      	adds	r3, #8
 8006d06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006d16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d1a:	e841 2300 	strex	r3, r2, [r1]
 8006d1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006d22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d1d9      	bne.n	8006cde <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d013      	beq.n	8006d5a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d36:	4a13      	ldr	r2, [pc, #76]	; (8006d84 <HAL_UART_IRQHandler+0x29c>)
 8006d38:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7fd f9e8 	bl	8004114 <HAL_DMA_Abort_IT>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d017      	beq.n	8006d7a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006d54:	4610      	mov	r0, r2
 8006d56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d58:	e00f      	b.n	8006d7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f9ae 	bl	80070bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d60:	e00b      	b.n	8006d7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f9aa 	bl	80070bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d68:	e007      	b.n	8006d7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 f9a6 	bl	80070bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006d78:	e18b      	b.n	8007092 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d7a:	bf00      	nop
    return;
 8006d7c:	e189      	b.n	8007092 <HAL_UART_IRQHandler+0x5aa>
 8006d7e:	bf00      	nop
 8006d80:	04000120 	.word	0x04000120
 8006d84:	08007a0f 	.word	0x08007a0f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	f040 8143 	bne.w	8007018 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d96:	f003 0310 	and.w	r3, r3, #16
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f000 813c 	beq.w	8007018 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006da4:	f003 0310 	and.w	r3, r3, #16
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f000 8135 	beq.w	8007018 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2210      	movs	r2, #16
 8006db4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc0:	2b40      	cmp	r3, #64	; 0x40
 8006dc2:	f040 80b1 	bne.w	8006f28 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006dd2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f000 815d 	beq.w	8007096 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006de2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006de6:	429a      	cmp	r2, r3
 8006de8:	f080 8155 	bcs.w	8007096 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006df2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	2b20      	cmp	r3, #32
 8006dfe:	f000 8085 	beq.w	8006f0c <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e0e:	e853 3f00 	ldrex	r3, [r3]
 8006e12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	461a      	mov	r2, r3
 8006e28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e30:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e34:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e38:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e3c:	e841 2300 	strex	r3, r2, [r1]
 8006e40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006e44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1da      	bne.n	8006e02 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	3308      	adds	r3, #8
 8006e52:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e56:	e853 3f00 	ldrex	r3, [r3]
 8006e5a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006e5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e5e:	f023 0301 	bic.w	r3, r3, #1
 8006e62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	3308      	adds	r3, #8
 8006e6c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e70:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006e74:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e76:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006e78:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006e7c:	e841 2300 	strex	r3, r2, [r1]
 8006e80:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006e82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1e1      	bne.n	8006e4c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	3308      	adds	r3, #8
 8006e8e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e92:	e853 3f00 	ldrex	r3, [r3]
 8006e96:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006e98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	3308      	adds	r3, #8
 8006ea8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006eac:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006eae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006eb2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006eb4:	e841 2300 	strex	r3, r2, [r1]
 8006eb8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006eba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d1e3      	bne.n	8006e88 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2220      	movs	r2, #32
 8006ec4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ed4:	e853 3f00 	ldrex	r3, [r3]
 8006ed8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006eda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006edc:	f023 0310 	bic.w	r3, r3, #16
 8006ee0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	461a      	mov	r2, r3
 8006eea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006eee:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ef0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ef4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ef6:	e841 2300 	strex	r3, r2, [r1]
 8006efa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006efc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1e4      	bne.n	8006ecc <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7fd f8cb 	bl	80040a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	4619      	mov	r1, r3
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 f8d5 	bl	80070d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f26:	e0b6      	b.n	8007096 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f000 80a8 	beq.w	800709a <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8006f4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f000 80a3 	beq.w	800709a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5c:	e853 3f00 	ldrex	r3, [r3]
 8006f60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	461a      	mov	r2, r3
 8006f72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f76:	647b      	str	r3, [r7, #68]	; 0x44
 8006f78:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f7e:	e841 2300 	strex	r3, r2, [r1]
 8006f82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1e4      	bne.n	8006f54 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	3308      	adds	r3, #8
 8006f90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f94:	e853 3f00 	ldrex	r3, [r3]
 8006f98:	623b      	str	r3, [r7, #32]
   return(result);
 8006f9a:	6a3b      	ldr	r3, [r7, #32]
 8006f9c:	f023 0301 	bic.w	r3, r3, #1
 8006fa0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	3308      	adds	r3, #8
 8006faa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006fae:	633a      	str	r2, [r7, #48]	; 0x30
 8006fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fb6:	e841 2300 	strex	r3, r2, [r1]
 8006fba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1e3      	bne.n	8006f8a <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2220      	movs	r2, #32
 8006fc6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	e853 3f00 	ldrex	r3, [r3]
 8006fe0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f023 0310 	bic.w	r3, r3, #16
 8006fe8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006ff6:	61fb      	str	r3, [r7, #28]
 8006ff8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffa:	69b9      	ldr	r1, [r7, #24]
 8006ffc:	69fa      	ldr	r2, [r7, #28]
 8006ffe:	e841 2300 	strex	r3, r2, [r1]
 8007002:	617b      	str	r3, [r7, #20]
   return(result);
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1e4      	bne.n	8006fd4 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800700a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800700e:	4619      	mov	r1, r3
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 f85d 	bl	80070d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007016:	e040      	b.n	800709a <HAL_UART_IRQHandler+0x5b2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800701c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00e      	beq.n	8007042 <HAL_UART_IRQHandler+0x55a>
 8007024:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007028:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d008      	beq.n	8007042 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007038:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fe83 	bl	8007d46 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007040:	e02e      	b.n	80070a0 <HAL_UART_IRQHandler+0x5b8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00e      	beq.n	800706c <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800704e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007056:	2b00      	cmp	r3, #0
 8007058:	d008      	beq.n	800706c <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800705e:	2b00      	cmp	r3, #0
 8007060:	d01d      	beq.n	800709e <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	4798      	blx	r3
    }
    return;
 800706a:	e018      	b.n	800709e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800706c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007074:	2b00      	cmp	r3, #0
 8007076:	d013      	beq.n	80070a0 <HAL_UART_IRQHandler+0x5b8>
 8007078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800707c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00d      	beq.n	80070a0 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 fcd8 	bl	8007a3a <UART_EndTransmit_IT>
    return;
 800708a:	bf00      	nop
 800708c:	e008      	b.n	80070a0 <HAL_UART_IRQHandler+0x5b8>
      return;
 800708e:	bf00      	nop
 8007090:	e006      	b.n	80070a0 <HAL_UART_IRQHandler+0x5b8>
    return;
 8007092:	bf00      	nop
 8007094:	e004      	b.n	80070a0 <HAL_UART_IRQHandler+0x5b8>
      return;
 8007096:	bf00      	nop
 8007098:	e002      	b.n	80070a0 <HAL_UART_IRQHandler+0x5b8>
      return;
 800709a:	bf00      	nop
 800709c:	e000      	b.n	80070a0 <HAL_UART_IRQHandler+0x5b8>
    return;
 800709e:	bf00      	nop
  }

}
 80070a0:	37e8      	adds	r7, #232	; 0xe8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop

080070a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80070c4:	bf00      	nop
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	460b      	mov	r3, r1
 80070da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80070dc:	bf00      	nop
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b088      	sub	sp, #32
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80070f0:	2300      	movs	r3, #0
 80070f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	689a      	ldr	r2, [r3, #8]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	431a      	orrs	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	695b      	ldr	r3, [r3, #20]
 8007102:	431a      	orrs	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	69db      	ldr	r3, [r3, #28]
 8007108:	4313      	orrs	r3, r2
 800710a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	4baa      	ldr	r3, [pc, #680]	; (80073bc <UART_SetConfig+0x2d4>)
 8007114:	4013      	ands	r3, r2
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	6812      	ldr	r2, [r2, #0]
 800711a:	6979      	ldr	r1, [r7, #20]
 800711c:	430b      	orrs	r3, r1
 800711e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	68da      	ldr	r2, [r3, #12]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	430a      	orrs	r2, r1
 8007134:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a1b      	ldr	r3, [r3, #32]
 8007140:	697a      	ldr	r2, [r7, #20]
 8007142:	4313      	orrs	r3, r2
 8007144:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	697a      	ldr	r2, [r7, #20]
 8007156:	430a      	orrs	r2, r1
 8007158:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a98      	ldr	r2, [pc, #608]	; (80073c0 <UART_SetConfig+0x2d8>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d121      	bne.n	80071a8 <UART_SetConfig+0xc0>
 8007164:	4b97      	ldr	r3, [pc, #604]	; (80073c4 <UART_SetConfig+0x2dc>)
 8007166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007168:	f003 0303 	and.w	r3, r3, #3
 800716c:	2b03      	cmp	r3, #3
 800716e:	d817      	bhi.n	80071a0 <UART_SetConfig+0xb8>
 8007170:	a201      	add	r2, pc, #4	; (adr r2, 8007178 <UART_SetConfig+0x90>)
 8007172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007176:	bf00      	nop
 8007178:	08007189 	.word	0x08007189
 800717c:	08007195 	.word	0x08007195
 8007180:	0800719b 	.word	0x0800719b
 8007184:	0800718f 	.word	0x0800718f
 8007188:	2301      	movs	r3, #1
 800718a:	77fb      	strb	r3, [r7, #31]
 800718c:	e0b2      	b.n	80072f4 <UART_SetConfig+0x20c>
 800718e:	2302      	movs	r3, #2
 8007190:	77fb      	strb	r3, [r7, #31]
 8007192:	e0af      	b.n	80072f4 <UART_SetConfig+0x20c>
 8007194:	2304      	movs	r3, #4
 8007196:	77fb      	strb	r3, [r7, #31]
 8007198:	e0ac      	b.n	80072f4 <UART_SetConfig+0x20c>
 800719a:	2308      	movs	r3, #8
 800719c:	77fb      	strb	r3, [r7, #31]
 800719e:	e0a9      	b.n	80072f4 <UART_SetConfig+0x20c>
 80071a0:	2310      	movs	r3, #16
 80071a2:	77fb      	strb	r3, [r7, #31]
 80071a4:	bf00      	nop
 80071a6:	e0a5      	b.n	80072f4 <UART_SetConfig+0x20c>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a86      	ldr	r2, [pc, #536]	; (80073c8 <UART_SetConfig+0x2e0>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d123      	bne.n	80071fa <UART_SetConfig+0x112>
 80071b2:	4b84      	ldr	r3, [pc, #528]	; (80073c4 <UART_SetConfig+0x2dc>)
 80071b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80071ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071be:	d012      	beq.n	80071e6 <UART_SetConfig+0xfe>
 80071c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071c4:	d802      	bhi.n	80071cc <UART_SetConfig+0xe4>
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d007      	beq.n	80071da <UART_SetConfig+0xf2>
 80071ca:	e012      	b.n	80071f2 <UART_SetConfig+0x10a>
 80071cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071d0:	d00c      	beq.n	80071ec <UART_SetConfig+0x104>
 80071d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80071d6:	d003      	beq.n	80071e0 <UART_SetConfig+0xf8>
 80071d8:	e00b      	b.n	80071f2 <UART_SetConfig+0x10a>
 80071da:	2300      	movs	r3, #0
 80071dc:	77fb      	strb	r3, [r7, #31]
 80071de:	e089      	b.n	80072f4 <UART_SetConfig+0x20c>
 80071e0:	2302      	movs	r3, #2
 80071e2:	77fb      	strb	r3, [r7, #31]
 80071e4:	e086      	b.n	80072f4 <UART_SetConfig+0x20c>
 80071e6:	2304      	movs	r3, #4
 80071e8:	77fb      	strb	r3, [r7, #31]
 80071ea:	e083      	b.n	80072f4 <UART_SetConfig+0x20c>
 80071ec:	2308      	movs	r3, #8
 80071ee:	77fb      	strb	r3, [r7, #31]
 80071f0:	e080      	b.n	80072f4 <UART_SetConfig+0x20c>
 80071f2:	2310      	movs	r3, #16
 80071f4:	77fb      	strb	r3, [r7, #31]
 80071f6:	bf00      	nop
 80071f8:	e07c      	b.n	80072f4 <UART_SetConfig+0x20c>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a73      	ldr	r2, [pc, #460]	; (80073cc <UART_SetConfig+0x2e4>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d123      	bne.n	800724c <UART_SetConfig+0x164>
 8007204:	4b6f      	ldr	r3, [pc, #444]	; (80073c4 <UART_SetConfig+0x2dc>)
 8007206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007208:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800720c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007210:	d012      	beq.n	8007238 <UART_SetConfig+0x150>
 8007212:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007216:	d802      	bhi.n	800721e <UART_SetConfig+0x136>
 8007218:	2b00      	cmp	r3, #0
 800721a:	d007      	beq.n	800722c <UART_SetConfig+0x144>
 800721c:	e012      	b.n	8007244 <UART_SetConfig+0x15c>
 800721e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007222:	d00c      	beq.n	800723e <UART_SetConfig+0x156>
 8007224:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007228:	d003      	beq.n	8007232 <UART_SetConfig+0x14a>
 800722a:	e00b      	b.n	8007244 <UART_SetConfig+0x15c>
 800722c:	2300      	movs	r3, #0
 800722e:	77fb      	strb	r3, [r7, #31]
 8007230:	e060      	b.n	80072f4 <UART_SetConfig+0x20c>
 8007232:	2302      	movs	r3, #2
 8007234:	77fb      	strb	r3, [r7, #31]
 8007236:	e05d      	b.n	80072f4 <UART_SetConfig+0x20c>
 8007238:	2304      	movs	r3, #4
 800723a:	77fb      	strb	r3, [r7, #31]
 800723c:	e05a      	b.n	80072f4 <UART_SetConfig+0x20c>
 800723e:	2308      	movs	r3, #8
 8007240:	77fb      	strb	r3, [r7, #31]
 8007242:	e057      	b.n	80072f4 <UART_SetConfig+0x20c>
 8007244:	2310      	movs	r3, #16
 8007246:	77fb      	strb	r3, [r7, #31]
 8007248:	bf00      	nop
 800724a:	e053      	b.n	80072f4 <UART_SetConfig+0x20c>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a5f      	ldr	r2, [pc, #380]	; (80073d0 <UART_SetConfig+0x2e8>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d123      	bne.n	800729e <UART_SetConfig+0x1b6>
 8007256:	4b5b      	ldr	r3, [pc, #364]	; (80073c4 <UART_SetConfig+0x2dc>)
 8007258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800725e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007262:	d012      	beq.n	800728a <UART_SetConfig+0x1a2>
 8007264:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007268:	d802      	bhi.n	8007270 <UART_SetConfig+0x188>
 800726a:	2b00      	cmp	r3, #0
 800726c:	d007      	beq.n	800727e <UART_SetConfig+0x196>
 800726e:	e012      	b.n	8007296 <UART_SetConfig+0x1ae>
 8007270:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007274:	d00c      	beq.n	8007290 <UART_SetConfig+0x1a8>
 8007276:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800727a:	d003      	beq.n	8007284 <UART_SetConfig+0x19c>
 800727c:	e00b      	b.n	8007296 <UART_SetConfig+0x1ae>
 800727e:	2300      	movs	r3, #0
 8007280:	77fb      	strb	r3, [r7, #31]
 8007282:	e037      	b.n	80072f4 <UART_SetConfig+0x20c>
 8007284:	2302      	movs	r3, #2
 8007286:	77fb      	strb	r3, [r7, #31]
 8007288:	e034      	b.n	80072f4 <UART_SetConfig+0x20c>
 800728a:	2304      	movs	r3, #4
 800728c:	77fb      	strb	r3, [r7, #31]
 800728e:	e031      	b.n	80072f4 <UART_SetConfig+0x20c>
 8007290:	2308      	movs	r3, #8
 8007292:	77fb      	strb	r3, [r7, #31]
 8007294:	e02e      	b.n	80072f4 <UART_SetConfig+0x20c>
 8007296:	2310      	movs	r3, #16
 8007298:	77fb      	strb	r3, [r7, #31]
 800729a:	bf00      	nop
 800729c:	e02a      	b.n	80072f4 <UART_SetConfig+0x20c>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a4c      	ldr	r2, [pc, #304]	; (80073d4 <UART_SetConfig+0x2ec>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d123      	bne.n	80072f0 <UART_SetConfig+0x208>
 80072a8:	4b46      	ldr	r3, [pc, #280]	; (80073c4 <UART_SetConfig+0x2dc>)
 80072aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ac:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80072b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072b4:	d012      	beq.n	80072dc <UART_SetConfig+0x1f4>
 80072b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072ba:	d802      	bhi.n	80072c2 <UART_SetConfig+0x1da>
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d007      	beq.n	80072d0 <UART_SetConfig+0x1e8>
 80072c0:	e012      	b.n	80072e8 <UART_SetConfig+0x200>
 80072c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072c6:	d00c      	beq.n	80072e2 <UART_SetConfig+0x1fa>
 80072c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80072cc:	d003      	beq.n	80072d6 <UART_SetConfig+0x1ee>
 80072ce:	e00b      	b.n	80072e8 <UART_SetConfig+0x200>
 80072d0:	2300      	movs	r3, #0
 80072d2:	77fb      	strb	r3, [r7, #31]
 80072d4:	e00e      	b.n	80072f4 <UART_SetConfig+0x20c>
 80072d6:	2302      	movs	r3, #2
 80072d8:	77fb      	strb	r3, [r7, #31]
 80072da:	e00b      	b.n	80072f4 <UART_SetConfig+0x20c>
 80072dc:	2304      	movs	r3, #4
 80072de:	77fb      	strb	r3, [r7, #31]
 80072e0:	e008      	b.n	80072f4 <UART_SetConfig+0x20c>
 80072e2:	2308      	movs	r3, #8
 80072e4:	77fb      	strb	r3, [r7, #31]
 80072e6:	e005      	b.n	80072f4 <UART_SetConfig+0x20c>
 80072e8:	2310      	movs	r3, #16
 80072ea:	77fb      	strb	r3, [r7, #31]
 80072ec:	bf00      	nop
 80072ee:	e001      	b.n	80072f4 <UART_SetConfig+0x20c>
 80072f0:	2310      	movs	r3, #16
 80072f2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	69db      	ldr	r3, [r3, #28]
 80072f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072fc:	d16e      	bne.n	80073dc <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80072fe:	7ffb      	ldrb	r3, [r7, #31]
 8007300:	2b08      	cmp	r3, #8
 8007302:	d828      	bhi.n	8007356 <UART_SetConfig+0x26e>
 8007304:	a201      	add	r2, pc, #4	; (adr r2, 800730c <UART_SetConfig+0x224>)
 8007306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730a:	bf00      	nop
 800730c:	08007331 	.word	0x08007331
 8007310:	08007339 	.word	0x08007339
 8007314:	08007341 	.word	0x08007341
 8007318:	08007357 	.word	0x08007357
 800731c:	08007347 	.word	0x08007347
 8007320:	08007357 	.word	0x08007357
 8007324:	08007357 	.word	0x08007357
 8007328:	08007357 	.word	0x08007357
 800732c:	0800734f 	.word	0x0800734f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007330:	f7fe fb30 	bl	8005994 <HAL_RCC_GetPCLK1Freq>
 8007334:	61b8      	str	r0, [r7, #24]
        break;
 8007336:	e013      	b.n	8007360 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007338:	f7fe fb4e 	bl	80059d8 <HAL_RCC_GetPCLK2Freq>
 800733c:	61b8      	str	r0, [r7, #24]
        break;
 800733e:	e00f      	b.n	8007360 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007340:	4b25      	ldr	r3, [pc, #148]	; (80073d8 <UART_SetConfig+0x2f0>)
 8007342:	61bb      	str	r3, [r7, #24]
        break;
 8007344:	e00c      	b.n	8007360 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007346:	f7fe faaf 	bl	80058a8 <HAL_RCC_GetSysClockFreq>
 800734a:	61b8      	str	r0, [r7, #24]
        break;
 800734c:	e008      	b.n	8007360 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800734e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007352:	61bb      	str	r3, [r7, #24]
        break;
 8007354:	e004      	b.n	8007360 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8007356:	2300      	movs	r3, #0
 8007358:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	77bb      	strb	r3, [r7, #30]
        break;
 800735e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	2b00      	cmp	r3, #0
 8007364:	f000 8086 	beq.w	8007474 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	005a      	lsls	r2, r3, #1
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	085b      	lsrs	r3, r3, #1
 8007372:	441a      	add	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	fbb2 f3f3 	udiv	r3, r2, r3
 800737c:	b29b      	uxth	r3, r3
 800737e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	2b0f      	cmp	r3, #15
 8007384:	d916      	bls.n	80073b4 <UART_SetConfig+0x2cc>
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800738c:	d212      	bcs.n	80073b4 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	b29b      	uxth	r3, r3
 8007392:	f023 030f 	bic.w	r3, r3, #15
 8007396:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	085b      	lsrs	r3, r3, #1
 800739c:	b29b      	uxth	r3, r3
 800739e:	f003 0307 	and.w	r3, r3, #7
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	89fb      	ldrh	r3, [r7, #14]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	89fa      	ldrh	r2, [r7, #14]
 80073b0:	60da      	str	r2, [r3, #12]
 80073b2:	e05f      	b.n	8007474 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	77bb      	strb	r3, [r7, #30]
 80073b8:	e05c      	b.n	8007474 <UART_SetConfig+0x38c>
 80073ba:	bf00      	nop
 80073bc:	efff69f3 	.word	0xefff69f3
 80073c0:	40013800 	.word	0x40013800
 80073c4:	40021000 	.word	0x40021000
 80073c8:	40004400 	.word	0x40004400
 80073cc:	40004800 	.word	0x40004800
 80073d0:	40004c00 	.word	0x40004c00
 80073d4:	40005000 	.word	0x40005000
 80073d8:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 80073dc:	7ffb      	ldrb	r3, [r7, #31]
 80073de:	2b08      	cmp	r3, #8
 80073e0:	d827      	bhi.n	8007432 <UART_SetConfig+0x34a>
 80073e2:	a201      	add	r2, pc, #4	; (adr r2, 80073e8 <UART_SetConfig+0x300>)
 80073e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e8:	0800740d 	.word	0x0800740d
 80073ec:	08007415 	.word	0x08007415
 80073f0:	0800741d 	.word	0x0800741d
 80073f4:	08007433 	.word	0x08007433
 80073f8:	08007423 	.word	0x08007423
 80073fc:	08007433 	.word	0x08007433
 8007400:	08007433 	.word	0x08007433
 8007404:	08007433 	.word	0x08007433
 8007408:	0800742b 	.word	0x0800742b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800740c:	f7fe fac2 	bl	8005994 <HAL_RCC_GetPCLK1Freq>
 8007410:	61b8      	str	r0, [r7, #24]
        break;
 8007412:	e013      	b.n	800743c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007414:	f7fe fae0 	bl	80059d8 <HAL_RCC_GetPCLK2Freq>
 8007418:	61b8      	str	r0, [r7, #24]
        break;
 800741a:	e00f      	b.n	800743c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800741c:	4b1b      	ldr	r3, [pc, #108]	; (800748c <UART_SetConfig+0x3a4>)
 800741e:	61bb      	str	r3, [r7, #24]
        break;
 8007420:	e00c      	b.n	800743c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007422:	f7fe fa41 	bl	80058a8 <HAL_RCC_GetSysClockFreq>
 8007426:	61b8      	str	r0, [r7, #24]
        break;
 8007428:	e008      	b.n	800743c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800742a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800742e:	61bb      	str	r3, [r7, #24]
        break;
 8007430:	e004      	b.n	800743c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8007432:	2300      	movs	r3, #0
 8007434:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	77bb      	strb	r3, [r7, #30]
        break;
 800743a:	bf00      	nop
    }

    if (pclk != 0U)
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d018      	beq.n	8007474 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	085a      	lsrs	r2, r3, #1
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	441a      	add	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	fbb2 f3f3 	udiv	r3, r2, r3
 8007454:	b29b      	uxth	r3, r3
 8007456:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	2b0f      	cmp	r3, #15
 800745c:	d908      	bls.n	8007470 <UART_SetConfig+0x388>
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007464:	d204      	bcs.n	8007470 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	693a      	ldr	r2, [r7, #16]
 800746c:	60da      	str	r2, [r3, #12]
 800746e:	e001      	b.n	8007474 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007480:	7fbb      	ldrb	r3, [r7, #30]
}
 8007482:	4618      	mov	r0, r3
 8007484:	3720      	adds	r7, #32
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	007a1200 	.word	0x007a1200

08007490 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749c:	f003 0301 	and.w	r3, r3, #1
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00a      	beq.n	80074ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	430a      	orrs	r2, r1
 80074b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074be:	f003 0302 	and.w	r3, r3, #2
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00a      	beq.n	80074dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	430a      	orrs	r2, r1
 80074da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e0:	f003 0304 	and.w	r3, r3, #4
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00a      	beq.n	80074fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	430a      	orrs	r2, r1
 80074fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007502:	f003 0308 	and.w	r3, r3, #8
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00a      	beq.n	8007520 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	430a      	orrs	r2, r1
 800751e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007524:	f003 0310 	and.w	r3, r3, #16
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00a      	beq.n	8007542 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	430a      	orrs	r2, r1
 8007540:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007546:	f003 0320 	and.w	r3, r3, #32
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00a      	beq.n	8007564 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	430a      	orrs	r2, r1
 8007562:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800756c:	2b00      	cmp	r3, #0
 800756e:	d01a      	beq.n	80075a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	430a      	orrs	r2, r1
 8007584:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800758e:	d10a      	bne.n	80075a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	430a      	orrs	r2, r1
 80075a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00a      	beq.n	80075c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	430a      	orrs	r2, r1
 80075c6:	605a      	str	r2, [r3, #4]
  }
}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b086      	sub	sp, #24
 80075d8:	af02      	add	r7, sp, #8
 80075da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075e4:	f7fb f800 	bl	80025e8 <HAL_GetTick>
 80075e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 0308 	and.w	r3, r3, #8
 80075f4:	2b08      	cmp	r3, #8
 80075f6:	d10e      	bne.n	8007616 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075fc:	9300      	str	r3, [sp, #0]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 f82d 	bl	8007666 <UART_WaitOnFlagUntilTimeout>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d001      	beq.n	8007616 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e023      	b.n	800765e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 0304 	and.w	r3, r3, #4
 8007620:	2b04      	cmp	r3, #4
 8007622:	d10e      	bne.n	8007642 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007624:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007628:	9300      	str	r3, [sp, #0]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 f817 	bl	8007666 <UART_WaitOnFlagUntilTimeout>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d001      	beq.n	8007642 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800763e:	2303      	movs	r3, #3
 8007640:	e00d      	b.n	800765e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2220      	movs	r2, #32
 8007646:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2220      	movs	r2, #32
 800764c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b09c      	sub	sp, #112	; 0x70
 800766a:	af00      	add	r7, sp, #0
 800766c:	60f8      	str	r0, [r7, #12]
 800766e:	60b9      	str	r1, [r7, #8]
 8007670:	603b      	str	r3, [r7, #0]
 8007672:	4613      	mov	r3, r2
 8007674:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007676:	e0a5      	b.n	80077c4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007678:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800767a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800767e:	f000 80a1 	beq.w	80077c4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007682:	f7fa ffb1 	bl	80025e8 <HAL_GetTick>
 8007686:	4602      	mov	r2, r0
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800768e:	429a      	cmp	r2, r3
 8007690:	d302      	bcc.n	8007698 <UART_WaitOnFlagUntilTimeout+0x32>
 8007692:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007694:	2b00      	cmp	r3, #0
 8007696:	d13e      	bne.n	8007716 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076a0:	e853 3f00 	ldrex	r3, [r3]
 80076a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80076a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80076ac:	667b      	str	r3, [r7, #100]	; 0x64
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	461a      	mov	r2, r3
 80076b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076b8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80076bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80076be:	e841 2300 	strex	r3, r2, [r1]
 80076c2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80076c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1e6      	bne.n	8007698 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	3308      	adds	r3, #8
 80076d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076d4:	e853 3f00 	ldrex	r3, [r3]
 80076d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076dc:	f023 0301 	bic.w	r3, r3, #1
 80076e0:	663b      	str	r3, [r7, #96]	; 0x60
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	3308      	adds	r3, #8
 80076e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80076ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80076ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80076f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076f2:	e841 2300 	strex	r3, r2, [r1]
 80076f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80076f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1e5      	bne.n	80076ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2220      	movs	r2, #32
 8007702:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2220      	movs	r2, #32
 8007708:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007712:	2303      	movs	r3, #3
 8007714:	e067      	b.n	80077e6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 0304 	and.w	r3, r3, #4
 8007720:	2b00      	cmp	r3, #0
 8007722:	d04f      	beq.n	80077c4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	69db      	ldr	r3, [r3, #28]
 800772a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800772e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007732:	d147      	bne.n	80077c4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800773c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007746:	e853 3f00 	ldrex	r3, [r3]
 800774a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800774c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007752:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	461a      	mov	r2, r3
 800775a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800775c:	637b      	str	r3, [r7, #52]	; 0x34
 800775e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007760:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007762:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007764:	e841 2300 	strex	r3, r2, [r1]
 8007768:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800776a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776c:	2b00      	cmp	r3, #0
 800776e:	d1e6      	bne.n	800773e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	3308      	adds	r3, #8
 8007776:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	e853 3f00 	ldrex	r3, [r3]
 800777e:	613b      	str	r3, [r7, #16]
   return(result);
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	f023 0301 	bic.w	r3, r3, #1
 8007786:	66bb      	str	r3, [r7, #104]	; 0x68
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	3308      	adds	r3, #8
 800778e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007790:	623a      	str	r2, [r7, #32]
 8007792:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007794:	69f9      	ldr	r1, [r7, #28]
 8007796:	6a3a      	ldr	r2, [r7, #32]
 8007798:	e841 2300 	strex	r3, r2, [r1]
 800779c:	61bb      	str	r3, [r7, #24]
   return(result);
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d1e5      	bne.n	8007770 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2220      	movs	r2, #32
 80077a8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2220      	movs	r2, #32
 80077ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2220      	movs	r2, #32
 80077b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80077c0:	2303      	movs	r3, #3
 80077c2:	e010      	b.n	80077e6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	69da      	ldr	r2, [r3, #28]
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	4013      	ands	r3, r2
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	bf0c      	ite	eq
 80077d4:	2301      	moveq	r3, #1
 80077d6:	2300      	movne	r3, #0
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	461a      	mov	r2, r3
 80077dc:	79fb      	ldrb	r3, [r7, #7]
 80077de:	429a      	cmp	r2, r3
 80077e0:	f43f af4a 	beq.w	8007678 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3770      	adds	r7, #112	; 0x70
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
	...

080077f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b091      	sub	sp, #68	; 0x44
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	4613      	mov	r3, r2
 80077fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	68ba      	ldr	r2, [r7, #8]
 8007802:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	88fa      	ldrh	r2, [r7, #6]
 8007808:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	88fa      	ldrh	r2, [r7, #6]
 8007810:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007822:	d10e      	bne.n	8007842 <UART_Start_Receive_IT+0x52>
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d105      	bne.n	8007838 <UART_Start_Receive_IT+0x48>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007832:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007836:	e02d      	b.n	8007894 <UART_Start_Receive_IT+0xa4>
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	22ff      	movs	r2, #255	; 0xff
 800783c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007840:	e028      	b.n	8007894 <UART_Start_Receive_IT+0xa4>
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d10d      	bne.n	8007866 <UART_Start_Receive_IT+0x76>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d104      	bne.n	800785c <UART_Start_Receive_IT+0x6c>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	22ff      	movs	r2, #255	; 0xff
 8007856:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800785a:	e01b      	b.n	8007894 <UART_Start_Receive_IT+0xa4>
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	227f      	movs	r2, #127	; 0x7f
 8007860:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007864:	e016      	b.n	8007894 <UART_Start_Receive_IT+0xa4>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800786e:	d10d      	bne.n	800788c <UART_Start_Receive_IT+0x9c>
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d104      	bne.n	8007882 <UART_Start_Receive_IT+0x92>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	227f      	movs	r2, #127	; 0x7f
 800787c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007880:	e008      	b.n	8007894 <UART_Start_Receive_IT+0xa4>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	223f      	movs	r2, #63	; 0x3f
 8007886:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800788a:	e003      	b.n	8007894 <UART_Start_Receive_IT+0xa4>
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2222      	movs	r2, #34	; 0x22
 80078a0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	3308      	adds	r3, #8
 80078a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ac:	e853 3f00 	ldrex	r3, [r3]
 80078b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b4:	f043 0301 	orr.w	r3, r3, #1
 80078b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	3308      	adds	r3, #8
 80078c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80078c2:	637a      	str	r2, [r7, #52]	; 0x34
 80078c4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078ca:	e841 2300 	strex	r3, r2, [r1]
 80078ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1e5      	bne.n	80078a2 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078de:	d107      	bne.n	80078f0 <UART_Start_Receive_IT+0x100>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d103      	bne.n	80078f0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	4a15      	ldr	r2, [pc, #84]	; (8007940 <UART_Start_Receive_IT+0x150>)
 80078ec:	665a      	str	r2, [r3, #100]	; 0x64
 80078ee:	e002      	b.n	80078f6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	4a14      	ldr	r2, [pc, #80]	; (8007944 <UART_Start_Receive_IT+0x154>)
 80078f4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	e853 3f00 	ldrex	r3, [r3]
 800790a:	613b      	str	r3, [r7, #16]
   return(result);
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007912:	63bb      	str	r3, [r7, #56]	; 0x38
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	461a      	mov	r2, r3
 800791a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791c:	623b      	str	r3, [r7, #32]
 800791e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007920:	69f9      	ldr	r1, [r7, #28]
 8007922:	6a3a      	ldr	r2, [r7, #32]
 8007924:	e841 2300 	strex	r3, r2, [r1]
 8007928:	61bb      	str	r3, [r7, #24]
   return(result);
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d1e6      	bne.n	80078fe <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3744      	adds	r7, #68	; 0x44
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	08007beb 	.word	0x08007beb
 8007944:	08007a8f 	.word	0x08007a8f

08007948 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007948:	b480      	push	{r7}
 800794a:	b095      	sub	sp, #84	; 0x54
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007958:	e853 3f00 	ldrex	r3, [r3]
 800795c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800795e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007960:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007964:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	461a      	mov	r2, r3
 800796c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800796e:	643b      	str	r3, [r7, #64]	; 0x40
 8007970:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007972:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007974:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007976:	e841 2300 	strex	r3, r2, [r1]
 800797a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800797c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1e6      	bne.n	8007950 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	3308      	adds	r3, #8
 8007988:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798a:	6a3b      	ldr	r3, [r7, #32]
 800798c:	e853 3f00 	ldrex	r3, [r3]
 8007990:	61fb      	str	r3, [r7, #28]
   return(result);
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	f023 0301 	bic.w	r3, r3, #1
 8007998:	64bb      	str	r3, [r7, #72]	; 0x48
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	3308      	adds	r3, #8
 80079a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079aa:	e841 2300 	strex	r3, r2, [r1]
 80079ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1e5      	bne.n	8007982 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d118      	bne.n	80079f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	e853 3f00 	ldrex	r3, [r3]
 80079ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	f023 0310 	bic.w	r3, r3, #16
 80079d2:	647b      	str	r3, [r7, #68]	; 0x44
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	461a      	mov	r2, r3
 80079da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079dc:	61bb      	str	r3, [r7, #24]
 80079de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e0:	6979      	ldr	r1, [r7, #20]
 80079e2:	69ba      	ldr	r2, [r7, #24]
 80079e4:	e841 2300 	strex	r3, r2, [r1]
 80079e8:	613b      	str	r3, [r7, #16]
   return(result);
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1e6      	bne.n	80079be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2220      	movs	r2, #32
 80079f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007a02:	bf00      	nop
 8007a04:	3754      	adds	r7, #84	; 0x54
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr

08007a0e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b084      	sub	sp, #16
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f7ff fb45 	bl	80070bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a32:	bf00      	nop
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b088      	sub	sp, #32
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	e853 3f00 	ldrex	r3, [r3]
 8007a4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a56:	61fb      	str	r3, [r7, #28]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	61bb      	str	r3, [r7, #24]
 8007a62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a64:	6979      	ldr	r1, [r7, #20]
 8007a66:	69ba      	ldr	r2, [r7, #24]
 8007a68:	e841 2300 	strex	r3, r2, [r1]
 8007a6c:	613b      	str	r3, [r7, #16]
   return(result);
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1e6      	bne.n	8007a42 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2220      	movs	r2, #32
 8007a78:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f7ff fb11 	bl	80070a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a86:	bf00      	nop
 8007a88:	3720      	adds	r7, #32
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b096      	sub	sp, #88	; 0x58
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a9c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007aa4:	2b22      	cmp	r3, #34	; 0x22
 8007aa6:	f040 8094 	bne.w	8007bd2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007ab0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007ab4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007ab8:	b2d9      	uxtb	r1, r3
 8007aba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007abe:	b2da      	uxtb	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ac4:	400a      	ands	r2, r1
 8007ac6:	b2d2      	uxtb	r2, r2
 8007ac8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ace:	1c5a      	adds	r2, r3, #1
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	3b01      	subs	r3, #1
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d177      	bne.n	8007be2 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afa:	e853 3f00 	ldrex	r3, [r3]
 8007afe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b06:	653b      	str	r3, [r7, #80]	; 0x50
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b10:	647b      	str	r3, [r7, #68]	; 0x44
 8007b12:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b18:	e841 2300 	strex	r3, r2, [r1]
 8007b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d1e6      	bne.n	8007af2 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	3308      	adds	r3, #8
 8007b2a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2e:	e853 3f00 	ldrex	r3, [r3]
 8007b32:	623b      	str	r3, [r7, #32]
   return(result);
 8007b34:	6a3b      	ldr	r3, [r7, #32]
 8007b36:	f023 0301 	bic.w	r3, r3, #1
 8007b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	3308      	adds	r3, #8
 8007b42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b44:	633a      	str	r2, [r7, #48]	; 0x30
 8007b46:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b4c:	e841 2300 	strex	r3, r2, [r1]
 8007b50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d1e5      	bne.n	8007b24 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2220      	movs	r2, #32
 8007b5c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d12e      	bne.n	8007bca <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	e853 3f00 	ldrex	r3, [r3]
 8007b7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f023 0310 	bic.w	r3, r3, #16
 8007b86:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b90:	61fb      	str	r3, [r7, #28]
 8007b92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b94:	69b9      	ldr	r1, [r7, #24]
 8007b96:	69fa      	ldr	r2, [r7, #28]
 8007b98:	e841 2300 	strex	r3, r2, [r1]
 8007b9c:	617b      	str	r3, [r7, #20]
   return(result);
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1e6      	bne.n	8007b72 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	69db      	ldr	r3, [r3, #28]
 8007baa:	f003 0310 	and.w	r3, r3, #16
 8007bae:	2b10      	cmp	r3, #16
 8007bb0:	d103      	bne.n	8007bba <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	2210      	movs	r2, #16
 8007bb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f7ff fa84 	bl	80070d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007bc8:	e00b      	b.n	8007be2 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f7f9 f9da 	bl	8000f84 <HAL_UART_RxCpltCallback>
}
 8007bd0:	e007      	b.n	8007be2 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	699a      	ldr	r2, [r3, #24]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f042 0208 	orr.w	r2, r2, #8
 8007be0:	619a      	str	r2, [r3, #24]
}
 8007be2:	bf00      	nop
 8007be4:	3758      	adds	r7, #88	; 0x58
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b096      	sub	sp, #88	; 0x58
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007bf8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c00:	2b22      	cmp	r3, #34	; 0x22
 8007c02:	f040 8094 	bne.w	8007d2e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007c0c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c14:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007c16:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007c1a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007c1e:	4013      	ands	r3, r2
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c24:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c2a:	1c9a      	adds	r2, r3, #2
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d177      	bne.n	8007d3e <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c56:	e853 3f00 	ldrex	r3, [r3]
 8007c5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	461a      	mov	r2, r3
 8007c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c6c:	643b      	str	r3, [r7, #64]	; 0x40
 8007c6e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c74:	e841 2300 	strex	r3, r2, [r1]
 8007c78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1e6      	bne.n	8007c4e <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	3308      	adds	r3, #8
 8007c86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c88:	6a3b      	ldr	r3, [r7, #32]
 8007c8a:	e853 3f00 	ldrex	r3, [r3]
 8007c8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	f023 0301 	bic.w	r3, r3, #1
 8007c96:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	3308      	adds	r3, #8
 8007c9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ca0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ca2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ca6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ca8:	e841 2300 	strex	r3, r2, [r1]
 8007cac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d1e5      	bne.n	8007c80 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2220      	movs	r2, #32
 8007cb8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d12e      	bne.n	8007d26 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	e853 3f00 	ldrex	r3, [r3]
 8007cda:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	f023 0310 	bic.w	r3, r3, #16
 8007ce2:	647b      	str	r3, [r7, #68]	; 0x44
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	461a      	mov	r2, r3
 8007cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cec:	61bb      	str	r3, [r7, #24]
 8007cee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf0:	6979      	ldr	r1, [r7, #20]
 8007cf2:	69ba      	ldr	r2, [r7, #24]
 8007cf4:	e841 2300 	strex	r3, r2, [r1]
 8007cf8:	613b      	str	r3, [r7, #16]
   return(result);
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1e6      	bne.n	8007cce <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	69db      	ldr	r3, [r3, #28]
 8007d06:	f003 0310 	and.w	r3, r3, #16
 8007d0a:	2b10      	cmp	r3, #16
 8007d0c:	d103      	bne.n	8007d16 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2210      	movs	r2, #16
 8007d14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f7ff f9d6 	bl	80070d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007d24:	e00b      	b.n	8007d3e <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f7f9 f92c 	bl	8000f84 <HAL_UART_RxCpltCallback>
}
 8007d2c:	e007      	b.n	8007d3e <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	699a      	ldr	r2, [r3, #24]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f042 0208 	orr.w	r2, r2, #8
 8007d3c:	619a      	str	r2, [r3, #24]
}
 8007d3e:	bf00      	nop
 8007d40:	3758      	adds	r7, #88	; 0x58
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007d46:	b480      	push	{r7}
 8007d48:	b083      	sub	sp, #12
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007d4e:	bf00      	nop
 8007d50:	370c      	adds	r7, #12
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr
	...

08007d5c <__libc_init_array>:
 8007d5c:	b570      	push	{r4, r5, r6, lr}
 8007d5e:	4e0d      	ldr	r6, [pc, #52]	; (8007d94 <__libc_init_array+0x38>)
 8007d60:	4c0d      	ldr	r4, [pc, #52]	; (8007d98 <__libc_init_array+0x3c>)
 8007d62:	1ba4      	subs	r4, r4, r6
 8007d64:	10a4      	asrs	r4, r4, #2
 8007d66:	2500      	movs	r5, #0
 8007d68:	42a5      	cmp	r5, r4
 8007d6a:	d109      	bne.n	8007d80 <__libc_init_array+0x24>
 8007d6c:	4e0b      	ldr	r6, [pc, #44]	; (8007d9c <__libc_init_array+0x40>)
 8007d6e:	4c0c      	ldr	r4, [pc, #48]	; (8007da0 <__libc_init_array+0x44>)
 8007d70:	f001 f834 	bl	8008ddc <_init>
 8007d74:	1ba4      	subs	r4, r4, r6
 8007d76:	10a4      	asrs	r4, r4, #2
 8007d78:	2500      	movs	r5, #0
 8007d7a:	42a5      	cmp	r5, r4
 8007d7c:	d105      	bne.n	8007d8a <__libc_init_array+0x2e>
 8007d7e:	bd70      	pop	{r4, r5, r6, pc}
 8007d80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d84:	4798      	blx	r3
 8007d86:	3501      	adds	r5, #1
 8007d88:	e7ee      	b.n	8007d68 <__libc_init_array+0xc>
 8007d8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d8e:	4798      	blx	r3
 8007d90:	3501      	adds	r5, #1
 8007d92:	e7f2      	b.n	8007d7a <__libc_init_array+0x1e>
 8007d94:	08009078 	.word	0x08009078
 8007d98:	08009078 	.word	0x08009078
 8007d9c:	08009078 	.word	0x08009078
 8007da0:	0800907c 	.word	0x0800907c

08007da4 <memset>:
 8007da4:	4402      	add	r2, r0
 8007da6:	4603      	mov	r3, r0
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d100      	bne.n	8007dae <memset+0xa>
 8007dac:	4770      	bx	lr
 8007dae:	f803 1b01 	strb.w	r1, [r3], #1
 8007db2:	e7f9      	b.n	8007da8 <memset+0x4>
 8007db4:	0000      	movs	r0, r0
	...

08007db8 <sin>:
 8007db8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007dba:	ec51 0b10 	vmov	r0, r1, d0
 8007dbe:	4a20      	ldr	r2, [pc, #128]	; (8007e40 <sin+0x88>)
 8007dc0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	dc07      	bgt.n	8007dd8 <sin+0x20>
 8007dc8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8007e38 <sin+0x80>
 8007dcc:	2000      	movs	r0, #0
 8007dce:	f000 fe37 	bl	8008a40 <__kernel_sin>
 8007dd2:	ec51 0b10 	vmov	r0, r1, d0
 8007dd6:	e007      	b.n	8007de8 <sin+0x30>
 8007dd8:	4a1a      	ldr	r2, [pc, #104]	; (8007e44 <sin+0x8c>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	dd09      	ble.n	8007df2 <sin+0x3a>
 8007dde:	ee10 2a10 	vmov	r2, s0
 8007de2:	460b      	mov	r3, r1
 8007de4:	f7f8 f9fc 	bl	80001e0 <__aeabi_dsub>
 8007de8:	ec41 0b10 	vmov	d0, r0, r1
 8007dec:	b005      	add	sp, #20
 8007dee:	f85d fb04 	ldr.w	pc, [sp], #4
 8007df2:	4668      	mov	r0, sp
 8007df4:	f000 f828 	bl	8007e48 <__ieee754_rem_pio2>
 8007df8:	f000 0003 	and.w	r0, r0, #3
 8007dfc:	2801      	cmp	r0, #1
 8007dfe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007e02:	ed9d 0b00 	vldr	d0, [sp]
 8007e06:	d004      	beq.n	8007e12 <sin+0x5a>
 8007e08:	2802      	cmp	r0, #2
 8007e0a:	d005      	beq.n	8007e18 <sin+0x60>
 8007e0c:	b970      	cbnz	r0, 8007e2c <sin+0x74>
 8007e0e:	2001      	movs	r0, #1
 8007e10:	e7dd      	b.n	8007dce <sin+0x16>
 8007e12:	f000 fa0d 	bl	8008230 <__kernel_cos>
 8007e16:	e7dc      	b.n	8007dd2 <sin+0x1a>
 8007e18:	2001      	movs	r0, #1
 8007e1a:	f000 fe11 	bl	8008a40 <__kernel_sin>
 8007e1e:	ec53 2b10 	vmov	r2, r3, d0
 8007e22:	ee10 0a10 	vmov	r0, s0
 8007e26:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007e2a:	e7dd      	b.n	8007de8 <sin+0x30>
 8007e2c:	f000 fa00 	bl	8008230 <__kernel_cos>
 8007e30:	e7f5      	b.n	8007e1e <sin+0x66>
 8007e32:	bf00      	nop
 8007e34:	f3af 8000 	nop.w
	...
 8007e40:	3fe921fb 	.word	0x3fe921fb
 8007e44:	7fefffff 	.word	0x7fefffff

08007e48 <__ieee754_rem_pio2>:
 8007e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e4c:	ec57 6b10 	vmov	r6, r7, d0
 8007e50:	4bc3      	ldr	r3, [pc, #780]	; (8008160 <__ieee754_rem_pio2+0x318>)
 8007e52:	b08d      	sub	sp, #52	; 0x34
 8007e54:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007e58:	4598      	cmp	r8, r3
 8007e5a:	4604      	mov	r4, r0
 8007e5c:	9704      	str	r7, [sp, #16]
 8007e5e:	dc07      	bgt.n	8007e70 <__ieee754_rem_pio2+0x28>
 8007e60:	2200      	movs	r2, #0
 8007e62:	2300      	movs	r3, #0
 8007e64:	ed84 0b00 	vstr	d0, [r4]
 8007e68:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007e6c:	2500      	movs	r5, #0
 8007e6e:	e027      	b.n	8007ec0 <__ieee754_rem_pio2+0x78>
 8007e70:	4bbc      	ldr	r3, [pc, #752]	; (8008164 <__ieee754_rem_pio2+0x31c>)
 8007e72:	4598      	cmp	r8, r3
 8007e74:	dc75      	bgt.n	8007f62 <__ieee754_rem_pio2+0x11a>
 8007e76:	9b04      	ldr	r3, [sp, #16]
 8007e78:	4dbb      	ldr	r5, [pc, #748]	; (8008168 <__ieee754_rem_pio2+0x320>)
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	ee10 0a10 	vmov	r0, s0
 8007e80:	a3a9      	add	r3, pc, #676	; (adr r3, 8008128 <__ieee754_rem_pio2+0x2e0>)
 8007e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e86:	4639      	mov	r1, r7
 8007e88:	dd36      	ble.n	8007ef8 <__ieee754_rem_pio2+0xb0>
 8007e8a:	f7f8 f9a9 	bl	80001e0 <__aeabi_dsub>
 8007e8e:	45a8      	cmp	r8, r5
 8007e90:	4606      	mov	r6, r0
 8007e92:	460f      	mov	r7, r1
 8007e94:	d018      	beq.n	8007ec8 <__ieee754_rem_pio2+0x80>
 8007e96:	a3a6      	add	r3, pc, #664	; (adr r3, 8008130 <__ieee754_rem_pio2+0x2e8>)
 8007e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9c:	f7f8 f9a0 	bl	80001e0 <__aeabi_dsub>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	e9c4 2300 	strd	r2, r3, [r4]
 8007ea8:	4630      	mov	r0, r6
 8007eaa:	4639      	mov	r1, r7
 8007eac:	f7f8 f998 	bl	80001e0 <__aeabi_dsub>
 8007eb0:	a39f      	add	r3, pc, #636	; (adr r3, 8008130 <__ieee754_rem_pio2+0x2e8>)
 8007eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb6:	f7f8 f993 	bl	80001e0 <__aeabi_dsub>
 8007eba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007ebe:	2501      	movs	r5, #1
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	b00d      	add	sp, #52	; 0x34
 8007ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec8:	a39b      	add	r3, pc, #620	; (adr r3, 8008138 <__ieee754_rem_pio2+0x2f0>)
 8007eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ece:	f7f8 f987 	bl	80001e0 <__aeabi_dsub>
 8007ed2:	a39b      	add	r3, pc, #620	; (adr r3, 8008140 <__ieee754_rem_pio2+0x2f8>)
 8007ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed8:	4606      	mov	r6, r0
 8007eda:	460f      	mov	r7, r1
 8007edc:	f7f8 f980 	bl	80001e0 <__aeabi_dsub>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	e9c4 2300 	strd	r2, r3, [r4]
 8007ee8:	4630      	mov	r0, r6
 8007eea:	4639      	mov	r1, r7
 8007eec:	f7f8 f978 	bl	80001e0 <__aeabi_dsub>
 8007ef0:	a393      	add	r3, pc, #588	; (adr r3, 8008140 <__ieee754_rem_pio2+0x2f8>)
 8007ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef6:	e7de      	b.n	8007eb6 <__ieee754_rem_pio2+0x6e>
 8007ef8:	f7f8 f974 	bl	80001e4 <__adddf3>
 8007efc:	45a8      	cmp	r8, r5
 8007efe:	4606      	mov	r6, r0
 8007f00:	460f      	mov	r7, r1
 8007f02:	d016      	beq.n	8007f32 <__ieee754_rem_pio2+0xea>
 8007f04:	a38a      	add	r3, pc, #552	; (adr r3, 8008130 <__ieee754_rem_pio2+0x2e8>)
 8007f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0a:	f7f8 f96b 	bl	80001e4 <__adddf3>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	460b      	mov	r3, r1
 8007f12:	e9c4 2300 	strd	r2, r3, [r4]
 8007f16:	4630      	mov	r0, r6
 8007f18:	4639      	mov	r1, r7
 8007f1a:	f7f8 f961 	bl	80001e0 <__aeabi_dsub>
 8007f1e:	a384      	add	r3, pc, #528	; (adr r3, 8008130 <__ieee754_rem_pio2+0x2e8>)
 8007f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f24:	f7f8 f95e 	bl	80001e4 <__adddf3>
 8007f28:	f04f 35ff 	mov.w	r5, #4294967295
 8007f2c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007f30:	e7c6      	b.n	8007ec0 <__ieee754_rem_pio2+0x78>
 8007f32:	a381      	add	r3, pc, #516	; (adr r3, 8008138 <__ieee754_rem_pio2+0x2f0>)
 8007f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f38:	f7f8 f954 	bl	80001e4 <__adddf3>
 8007f3c:	a380      	add	r3, pc, #512	; (adr r3, 8008140 <__ieee754_rem_pio2+0x2f8>)
 8007f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f42:	4606      	mov	r6, r0
 8007f44:	460f      	mov	r7, r1
 8007f46:	f7f8 f94d 	bl	80001e4 <__adddf3>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	e9c4 2300 	strd	r2, r3, [r4]
 8007f52:	4630      	mov	r0, r6
 8007f54:	4639      	mov	r1, r7
 8007f56:	f7f8 f943 	bl	80001e0 <__aeabi_dsub>
 8007f5a:	a379      	add	r3, pc, #484	; (adr r3, 8008140 <__ieee754_rem_pio2+0x2f8>)
 8007f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f60:	e7e0      	b.n	8007f24 <__ieee754_rem_pio2+0xdc>
 8007f62:	4b82      	ldr	r3, [pc, #520]	; (800816c <__ieee754_rem_pio2+0x324>)
 8007f64:	4598      	cmp	r8, r3
 8007f66:	f300 80d0 	bgt.w	800810a <__ieee754_rem_pio2+0x2c2>
 8007f6a:	f000 fe23 	bl	8008bb4 <fabs>
 8007f6e:	ec57 6b10 	vmov	r6, r7, d0
 8007f72:	ee10 0a10 	vmov	r0, s0
 8007f76:	a374      	add	r3, pc, #464	; (adr r3, 8008148 <__ieee754_rem_pio2+0x300>)
 8007f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7c:	4639      	mov	r1, r7
 8007f7e:	f7f8 fae7 	bl	8000550 <__aeabi_dmul>
 8007f82:	2200      	movs	r2, #0
 8007f84:	4b7a      	ldr	r3, [pc, #488]	; (8008170 <__ieee754_rem_pio2+0x328>)
 8007f86:	f7f8 f92d 	bl	80001e4 <__adddf3>
 8007f8a:	f7f8 fd7b 	bl	8000a84 <__aeabi_d2iz>
 8007f8e:	4605      	mov	r5, r0
 8007f90:	f7f8 fa74 	bl	800047c <__aeabi_i2d>
 8007f94:	a364      	add	r3, pc, #400	; (adr r3, 8008128 <__ieee754_rem_pio2+0x2e0>)
 8007f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f9e:	f7f8 fad7 	bl	8000550 <__aeabi_dmul>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	4630      	mov	r0, r6
 8007fa8:	4639      	mov	r1, r7
 8007faa:	f7f8 f919 	bl	80001e0 <__aeabi_dsub>
 8007fae:	a360      	add	r3, pc, #384	; (adr r3, 8008130 <__ieee754_rem_pio2+0x2e8>)
 8007fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb4:	4682      	mov	sl, r0
 8007fb6:	468b      	mov	fp, r1
 8007fb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fbc:	f7f8 fac8 	bl	8000550 <__aeabi_dmul>
 8007fc0:	2d1f      	cmp	r5, #31
 8007fc2:	4606      	mov	r6, r0
 8007fc4:	460f      	mov	r7, r1
 8007fc6:	dc0c      	bgt.n	8007fe2 <__ieee754_rem_pio2+0x19a>
 8007fc8:	1e6a      	subs	r2, r5, #1
 8007fca:	4b6a      	ldr	r3, [pc, #424]	; (8008174 <__ieee754_rem_pio2+0x32c>)
 8007fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fd0:	4543      	cmp	r3, r8
 8007fd2:	d006      	beq.n	8007fe2 <__ieee754_rem_pio2+0x19a>
 8007fd4:	4632      	mov	r2, r6
 8007fd6:	463b      	mov	r3, r7
 8007fd8:	4650      	mov	r0, sl
 8007fda:	4659      	mov	r1, fp
 8007fdc:	f7f8 f900 	bl	80001e0 <__aeabi_dsub>
 8007fe0:	e00e      	b.n	8008000 <__ieee754_rem_pio2+0x1b8>
 8007fe2:	4632      	mov	r2, r6
 8007fe4:	463b      	mov	r3, r7
 8007fe6:	4650      	mov	r0, sl
 8007fe8:	4659      	mov	r1, fp
 8007fea:	f7f8 f8f9 	bl	80001e0 <__aeabi_dsub>
 8007fee:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007ff2:	9305      	str	r3, [sp, #20]
 8007ff4:	9a05      	ldr	r2, [sp, #20]
 8007ff6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007ffa:	1ad3      	subs	r3, r2, r3
 8007ffc:	2b10      	cmp	r3, #16
 8007ffe:	dc02      	bgt.n	8008006 <__ieee754_rem_pio2+0x1be>
 8008000:	e9c4 0100 	strd	r0, r1, [r4]
 8008004:	e039      	b.n	800807a <__ieee754_rem_pio2+0x232>
 8008006:	a34c      	add	r3, pc, #304	; (adr r3, 8008138 <__ieee754_rem_pio2+0x2f0>)
 8008008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008010:	f7f8 fa9e 	bl	8000550 <__aeabi_dmul>
 8008014:	4606      	mov	r6, r0
 8008016:	460f      	mov	r7, r1
 8008018:	4602      	mov	r2, r0
 800801a:	460b      	mov	r3, r1
 800801c:	4650      	mov	r0, sl
 800801e:	4659      	mov	r1, fp
 8008020:	f7f8 f8de 	bl	80001e0 <__aeabi_dsub>
 8008024:	4602      	mov	r2, r0
 8008026:	460b      	mov	r3, r1
 8008028:	4680      	mov	r8, r0
 800802a:	4689      	mov	r9, r1
 800802c:	4650      	mov	r0, sl
 800802e:	4659      	mov	r1, fp
 8008030:	f7f8 f8d6 	bl	80001e0 <__aeabi_dsub>
 8008034:	4632      	mov	r2, r6
 8008036:	463b      	mov	r3, r7
 8008038:	f7f8 f8d2 	bl	80001e0 <__aeabi_dsub>
 800803c:	a340      	add	r3, pc, #256	; (adr r3, 8008140 <__ieee754_rem_pio2+0x2f8>)
 800803e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008042:	4606      	mov	r6, r0
 8008044:	460f      	mov	r7, r1
 8008046:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800804a:	f7f8 fa81 	bl	8000550 <__aeabi_dmul>
 800804e:	4632      	mov	r2, r6
 8008050:	463b      	mov	r3, r7
 8008052:	f7f8 f8c5 	bl	80001e0 <__aeabi_dsub>
 8008056:	4602      	mov	r2, r0
 8008058:	460b      	mov	r3, r1
 800805a:	4606      	mov	r6, r0
 800805c:	460f      	mov	r7, r1
 800805e:	4640      	mov	r0, r8
 8008060:	4649      	mov	r1, r9
 8008062:	f7f8 f8bd 	bl	80001e0 <__aeabi_dsub>
 8008066:	9a05      	ldr	r2, [sp, #20]
 8008068:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	2b31      	cmp	r3, #49	; 0x31
 8008070:	dc20      	bgt.n	80080b4 <__ieee754_rem_pio2+0x26c>
 8008072:	e9c4 0100 	strd	r0, r1, [r4]
 8008076:	46c2      	mov	sl, r8
 8008078:	46cb      	mov	fp, r9
 800807a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800807e:	4650      	mov	r0, sl
 8008080:	4642      	mov	r2, r8
 8008082:	464b      	mov	r3, r9
 8008084:	4659      	mov	r1, fp
 8008086:	f7f8 f8ab 	bl	80001e0 <__aeabi_dsub>
 800808a:	463b      	mov	r3, r7
 800808c:	4632      	mov	r2, r6
 800808e:	f7f8 f8a7 	bl	80001e0 <__aeabi_dsub>
 8008092:	9b04      	ldr	r3, [sp, #16]
 8008094:	2b00      	cmp	r3, #0
 8008096:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800809a:	f6bf af11 	bge.w	8007ec0 <__ieee754_rem_pio2+0x78>
 800809e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80080a2:	6063      	str	r3, [r4, #4]
 80080a4:	f8c4 8000 	str.w	r8, [r4]
 80080a8:	60a0      	str	r0, [r4, #8]
 80080aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080ae:	60e3      	str	r3, [r4, #12]
 80080b0:	426d      	negs	r5, r5
 80080b2:	e705      	b.n	8007ec0 <__ieee754_rem_pio2+0x78>
 80080b4:	a326      	add	r3, pc, #152	; (adr r3, 8008150 <__ieee754_rem_pio2+0x308>)
 80080b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080be:	f7f8 fa47 	bl	8000550 <__aeabi_dmul>
 80080c2:	4606      	mov	r6, r0
 80080c4:	460f      	mov	r7, r1
 80080c6:	4602      	mov	r2, r0
 80080c8:	460b      	mov	r3, r1
 80080ca:	4640      	mov	r0, r8
 80080cc:	4649      	mov	r1, r9
 80080ce:	f7f8 f887 	bl	80001e0 <__aeabi_dsub>
 80080d2:	4602      	mov	r2, r0
 80080d4:	460b      	mov	r3, r1
 80080d6:	4682      	mov	sl, r0
 80080d8:	468b      	mov	fp, r1
 80080da:	4640      	mov	r0, r8
 80080dc:	4649      	mov	r1, r9
 80080de:	f7f8 f87f 	bl	80001e0 <__aeabi_dsub>
 80080e2:	4632      	mov	r2, r6
 80080e4:	463b      	mov	r3, r7
 80080e6:	f7f8 f87b 	bl	80001e0 <__aeabi_dsub>
 80080ea:	a31b      	add	r3, pc, #108	; (adr r3, 8008158 <__ieee754_rem_pio2+0x310>)
 80080ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f0:	4606      	mov	r6, r0
 80080f2:	460f      	mov	r7, r1
 80080f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080f8:	f7f8 fa2a 	bl	8000550 <__aeabi_dmul>
 80080fc:	4632      	mov	r2, r6
 80080fe:	463b      	mov	r3, r7
 8008100:	f7f8 f86e 	bl	80001e0 <__aeabi_dsub>
 8008104:	4606      	mov	r6, r0
 8008106:	460f      	mov	r7, r1
 8008108:	e764      	b.n	8007fd4 <__ieee754_rem_pio2+0x18c>
 800810a:	4b1b      	ldr	r3, [pc, #108]	; (8008178 <__ieee754_rem_pio2+0x330>)
 800810c:	4598      	cmp	r8, r3
 800810e:	dd35      	ble.n	800817c <__ieee754_rem_pio2+0x334>
 8008110:	ee10 2a10 	vmov	r2, s0
 8008114:	463b      	mov	r3, r7
 8008116:	4630      	mov	r0, r6
 8008118:	4639      	mov	r1, r7
 800811a:	f7f8 f861 	bl	80001e0 <__aeabi_dsub>
 800811e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008122:	e9c4 0100 	strd	r0, r1, [r4]
 8008126:	e6a1      	b.n	8007e6c <__ieee754_rem_pio2+0x24>
 8008128:	54400000 	.word	0x54400000
 800812c:	3ff921fb 	.word	0x3ff921fb
 8008130:	1a626331 	.word	0x1a626331
 8008134:	3dd0b461 	.word	0x3dd0b461
 8008138:	1a600000 	.word	0x1a600000
 800813c:	3dd0b461 	.word	0x3dd0b461
 8008140:	2e037073 	.word	0x2e037073
 8008144:	3ba3198a 	.word	0x3ba3198a
 8008148:	6dc9c883 	.word	0x6dc9c883
 800814c:	3fe45f30 	.word	0x3fe45f30
 8008150:	2e000000 	.word	0x2e000000
 8008154:	3ba3198a 	.word	0x3ba3198a
 8008158:	252049c1 	.word	0x252049c1
 800815c:	397b839a 	.word	0x397b839a
 8008160:	3fe921fb 	.word	0x3fe921fb
 8008164:	4002d97b 	.word	0x4002d97b
 8008168:	3ff921fb 	.word	0x3ff921fb
 800816c:	413921fb 	.word	0x413921fb
 8008170:	3fe00000 	.word	0x3fe00000
 8008174:	08008e9c 	.word	0x08008e9c
 8008178:	7fefffff 	.word	0x7fefffff
 800817c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8008180:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8008184:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8008188:	4630      	mov	r0, r6
 800818a:	460f      	mov	r7, r1
 800818c:	f7f8 fc7a 	bl	8000a84 <__aeabi_d2iz>
 8008190:	f7f8 f974 	bl	800047c <__aeabi_i2d>
 8008194:	4602      	mov	r2, r0
 8008196:	460b      	mov	r3, r1
 8008198:	4630      	mov	r0, r6
 800819a:	4639      	mov	r1, r7
 800819c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80081a0:	f7f8 f81e 	bl	80001e0 <__aeabi_dsub>
 80081a4:	2200      	movs	r2, #0
 80081a6:	4b1f      	ldr	r3, [pc, #124]	; (8008224 <__ieee754_rem_pio2+0x3dc>)
 80081a8:	f7f8 f9d2 	bl	8000550 <__aeabi_dmul>
 80081ac:	460f      	mov	r7, r1
 80081ae:	4606      	mov	r6, r0
 80081b0:	f7f8 fc68 	bl	8000a84 <__aeabi_d2iz>
 80081b4:	f7f8 f962 	bl	800047c <__aeabi_i2d>
 80081b8:	4602      	mov	r2, r0
 80081ba:	460b      	mov	r3, r1
 80081bc:	4630      	mov	r0, r6
 80081be:	4639      	mov	r1, r7
 80081c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80081c4:	f7f8 f80c 	bl	80001e0 <__aeabi_dsub>
 80081c8:	2200      	movs	r2, #0
 80081ca:	4b16      	ldr	r3, [pc, #88]	; (8008224 <__ieee754_rem_pio2+0x3dc>)
 80081cc:	f7f8 f9c0 	bl	8000550 <__aeabi_dmul>
 80081d0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80081d4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80081d8:	f04f 0803 	mov.w	r8, #3
 80081dc:	2600      	movs	r6, #0
 80081de:	2700      	movs	r7, #0
 80081e0:	4632      	mov	r2, r6
 80081e2:	463b      	mov	r3, r7
 80081e4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80081e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80081ec:	f7f8 fc18 	bl	8000a20 <__aeabi_dcmpeq>
 80081f0:	b9b0      	cbnz	r0, 8008220 <__ieee754_rem_pio2+0x3d8>
 80081f2:	4b0d      	ldr	r3, [pc, #52]	; (8008228 <__ieee754_rem_pio2+0x3e0>)
 80081f4:	9301      	str	r3, [sp, #4]
 80081f6:	2302      	movs	r3, #2
 80081f8:	9300      	str	r3, [sp, #0]
 80081fa:	462a      	mov	r2, r5
 80081fc:	4643      	mov	r3, r8
 80081fe:	4621      	mov	r1, r4
 8008200:	a806      	add	r0, sp, #24
 8008202:	f000 f8dd 	bl	80083c0 <__kernel_rem_pio2>
 8008206:	9b04      	ldr	r3, [sp, #16]
 8008208:	2b00      	cmp	r3, #0
 800820a:	4605      	mov	r5, r0
 800820c:	f6bf ae58 	bge.w	8007ec0 <__ieee754_rem_pio2+0x78>
 8008210:	6863      	ldr	r3, [r4, #4]
 8008212:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008216:	6063      	str	r3, [r4, #4]
 8008218:	68e3      	ldr	r3, [r4, #12]
 800821a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800821e:	e746      	b.n	80080ae <__ieee754_rem_pio2+0x266>
 8008220:	46d0      	mov	r8, sl
 8008222:	e7dd      	b.n	80081e0 <__ieee754_rem_pio2+0x398>
 8008224:	41700000 	.word	0x41700000
 8008228:	08008f1c 	.word	0x08008f1c
 800822c:	00000000 	.word	0x00000000

08008230 <__kernel_cos>:
 8008230:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008234:	ec59 8b10 	vmov	r8, r9, d0
 8008238:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800823c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8008240:	ed2d 8b02 	vpush	{d8}
 8008244:	eeb0 8a41 	vmov.f32	s16, s2
 8008248:	eef0 8a61 	vmov.f32	s17, s3
 800824c:	da07      	bge.n	800825e <__kernel_cos+0x2e>
 800824e:	ee10 0a10 	vmov	r0, s0
 8008252:	4649      	mov	r1, r9
 8008254:	f7f8 fc16 	bl	8000a84 <__aeabi_d2iz>
 8008258:	2800      	cmp	r0, #0
 800825a:	f000 8089 	beq.w	8008370 <__kernel_cos+0x140>
 800825e:	4642      	mov	r2, r8
 8008260:	464b      	mov	r3, r9
 8008262:	4640      	mov	r0, r8
 8008264:	4649      	mov	r1, r9
 8008266:	f7f8 f973 	bl	8000550 <__aeabi_dmul>
 800826a:	2200      	movs	r2, #0
 800826c:	4b4e      	ldr	r3, [pc, #312]	; (80083a8 <__kernel_cos+0x178>)
 800826e:	4604      	mov	r4, r0
 8008270:	460d      	mov	r5, r1
 8008272:	f7f8 f96d 	bl	8000550 <__aeabi_dmul>
 8008276:	a340      	add	r3, pc, #256	; (adr r3, 8008378 <__kernel_cos+0x148>)
 8008278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827c:	4682      	mov	sl, r0
 800827e:	468b      	mov	fp, r1
 8008280:	4620      	mov	r0, r4
 8008282:	4629      	mov	r1, r5
 8008284:	f7f8 f964 	bl	8000550 <__aeabi_dmul>
 8008288:	a33d      	add	r3, pc, #244	; (adr r3, 8008380 <__kernel_cos+0x150>)
 800828a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828e:	f7f7 ffa9 	bl	80001e4 <__adddf3>
 8008292:	4622      	mov	r2, r4
 8008294:	462b      	mov	r3, r5
 8008296:	f7f8 f95b 	bl	8000550 <__aeabi_dmul>
 800829a:	a33b      	add	r3, pc, #236	; (adr r3, 8008388 <__kernel_cos+0x158>)
 800829c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a0:	f7f7 ff9e 	bl	80001e0 <__aeabi_dsub>
 80082a4:	4622      	mov	r2, r4
 80082a6:	462b      	mov	r3, r5
 80082a8:	f7f8 f952 	bl	8000550 <__aeabi_dmul>
 80082ac:	a338      	add	r3, pc, #224	; (adr r3, 8008390 <__kernel_cos+0x160>)
 80082ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b2:	f7f7 ff97 	bl	80001e4 <__adddf3>
 80082b6:	4622      	mov	r2, r4
 80082b8:	462b      	mov	r3, r5
 80082ba:	f7f8 f949 	bl	8000550 <__aeabi_dmul>
 80082be:	a336      	add	r3, pc, #216	; (adr r3, 8008398 <__kernel_cos+0x168>)
 80082c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c4:	f7f7 ff8c 	bl	80001e0 <__aeabi_dsub>
 80082c8:	4622      	mov	r2, r4
 80082ca:	462b      	mov	r3, r5
 80082cc:	f7f8 f940 	bl	8000550 <__aeabi_dmul>
 80082d0:	a333      	add	r3, pc, #204	; (adr r3, 80083a0 <__kernel_cos+0x170>)
 80082d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d6:	f7f7 ff85 	bl	80001e4 <__adddf3>
 80082da:	4622      	mov	r2, r4
 80082dc:	462b      	mov	r3, r5
 80082de:	f7f8 f937 	bl	8000550 <__aeabi_dmul>
 80082e2:	4622      	mov	r2, r4
 80082e4:	462b      	mov	r3, r5
 80082e6:	f7f8 f933 	bl	8000550 <__aeabi_dmul>
 80082ea:	ec53 2b18 	vmov	r2, r3, d8
 80082ee:	4604      	mov	r4, r0
 80082f0:	460d      	mov	r5, r1
 80082f2:	4640      	mov	r0, r8
 80082f4:	4649      	mov	r1, r9
 80082f6:	f7f8 f92b 	bl	8000550 <__aeabi_dmul>
 80082fa:	460b      	mov	r3, r1
 80082fc:	4602      	mov	r2, r0
 80082fe:	4629      	mov	r1, r5
 8008300:	4620      	mov	r0, r4
 8008302:	f7f7 ff6d 	bl	80001e0 <__aeabi_dsub>
 8008306:	4b29      	ldr	r3, [pc, #164]	; (80083ac <__kernel_cos+0x17c>)
 8008308:	429e      	cmp	r6, r3
 800830a:	4680      	mov	r8, r0
 800830c:	4689      	mov	r9, r1
 800830e:	dc11      	bgt.n	8008334 <__kernel_cos+0x104>
 8008310:	4602      	mov	r2, r0
 8008312:	460b      	mov	r3, r1
 8008314:	4650      	mov	r0, sl
 8008316:	4659      	mov	r1, fp
 8008318:	f7f7 ff62 	bl	80001e0 <__aeabi_dsub>
 800831c:	460b      	mov	r3, r1
 800831e:	4924      	ldr	r1, [pc, #144]	; (80083b0 <__kernel_cos+0x180>)
 8008320:	4602      	mov	r2, r0
 8008322:	2000      	movs	r0, #0
 8008324:	f7f7 ff5c 	bl	80001e0 <__aeabi_dsub>
 8008328:	ecbd 8b02 	vpop	{d8}
 800832c:	ec41 0b10 	vmov	d0, r0, r1
 8008330:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008334:	4b1f      	ldr	r3, [pc, #124]	; (80083b4 <__kernel_cos+0x184>)
 8008336:	491e      	ldr	r1, [pc, #120]	; (80083b0 <__kernel_cos+0x180>)
 8008338:	429e      	cmp	r6, r3
 800833a:	bfcc      	ite	gt
 800833c:	4d1e      	ldrgt	r5, [pc, #120]	; (80083b8 <__kernel_cos+0x188>)
 800833e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8008342:	2400      	movs	r4, #0
 8008344:	4622      	mov	r2, r4
 8008346:	462b      	mov	r3, r5
 8008348:	2000      	movs	r0, #0
 800834a:	f7f7 ff49 	bl	80001e0 <__aeabi_dsub>
 800834e:	4622      	mov	r2, r4
 8008350:	4606      	mov	r6, r0
 8008352:	460f      	mov	r7, r1
 8008354:	462b      	mov	r3, r5
 8008356:	4650      	mov	r0, sl
 8008358:	4659      	mov	r1, fp
 800835a:	f7f7 ff41 	bl	80001e0 <__aeabi_dsub>
 800835e:	4642      	mov	r2, r8
 8008360:	464b      	mov	r3, r9
 8008362:	f7f7 ff3d 	bl	80001e0 <__aeabi_dsub>
 8008366:	4602      	mov	r2, r0
 8008368:	460b      	mov	r3, r1
 800836a:	4630      	mov	r0, r6
 800836c:	4639      	mov	r1, r7
 800836e:	e7d9      	b.n	8008324 <__kernel_cos+0xf4>
 8008370:	2000      	movs	r0, #0
 8008372:	490f      	ldr	r1, [pc, #60]	; (80083b0 <__kernel_cos+0x180>)
 8008374:	e7d8      	b.n	8008328 <__kernel_cos+0xf8>
 8008376:	bf00      	nop
 8008378:	be8838d4 	.word	0xbe8838d4
 800837c:	bda8fae9 	.word	0xbda8fae9
 8008380:	bdb4b1c4 	.word	0xbdb4b1c4
 8008384:	3e21ee9e 	.word	0x3e21ee9e
 8008388:	809c52ad 	.word	0x809c52ad
 800838c:	3e927e4f 	.word	0x3e927e4f
 8008390:	19cb1590 	.word	0x19cb1590
 8008394:	3efa01a0 	.word	0x3efa01a0
 8008398:	16c15177 	.word	0x16c15177
 800839c:	3f56c16c 	.word	0x3f56c16c
 80083a0:	5555554c 	.word	0x5555554c
 80083a4:	3fa55555 	.word	0x3fa55555
 80083a8:	3fe00000 	.word	0x3fe00000
 80083ac:	3fd33332 	.word	0x3fd33332
 80083b0:	3ff00000 	.word	0x3ff00000
 80083b4:	3fe90000 	.word	0x3fe90000
 80083b8:	3fd20000 	.word	0x3fd20000
 80083bc:	00000000 	.word	0x00000000

080083c0 <__kernel_rem_pio2>:
 80083c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083c4:	ed2d 8b02 	vpush	{d8}
 80083c8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80083cc:	1ed4      	subs	r4, r2, #3
 80083ce:	9308      	str	r3, [sp, #32]
 80083d0:	9101      	str	r1, [sp, #4]
 80083d2:	4bc5      	ldr	r3, [pc, #788]	; (80086e8 <__kernel_rem_pio2+0x328>)
 80083d4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80083d6:	9009      	str	r0, [sp, #36]	; 0x24
 80083d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80083dc:	9304      	str	r3, [sp, #16]
 80083de:	9b08      	ldr	r3, [sp, #32]
 80083e0:	3b01      	subs	r3, #1
 80083e2:	9307      	str	r3, [sp, #28]
 80083e4:	2318      	movs	r3, #24
 80083e6:	fb94 f4f3 	sdiv	r4, r4, r3
 80083ea:	f06f 0317 	mvn.w	r3, #23
 80083ee:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80083f2:	fb04 3303 	mla	r3, r4, r3, r3
 80083f6:	eb03 0a02 	add.w	sl, r3, r2
 80083fa:	9b04      	ldr	r3, [sp, #16]
 80083fc:	9a07      	ldr	r2, [sp, #28]
 80083fe:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80086d8 <__kernel_rem_pio2+0x318>
 8008402:	eb03 0802 	add.w	r8, r3, r2
 8008406:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008408:	1aa7      	subs	r7, r4, r2
 800840a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800840e:	ae22      	add	r6, sp, #136	; 0x88
 8008410:	2500      	movs	r5, #0
 8008412:	4545      	cmp	r5, r8
 8008414:	dd13      	ble.n	800843e <__kernel_rem_pio2+0x7e>
 8008416:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80086d8 <__kernel_rem_pio2+0x318>
 800841a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800841e:	2600      	movs	r6, #0
 8008420:	9b04      	ldr	r3, [sp, #16]
 8008422:	429e      	cmp	r6, r3
 8008424:	dc32      	bgt.n	800848c <__kernel_rem_pio2+0xcc>
 8008426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008428:	9302      	str	r3, [sp, #8]
 800842a:	9b08      	ldr	r3, [sp, #32]
 800842c:	199d      	adds	r5, r3, r6
 800842e:	ab22      	add	r3, sp, #136	; 0x88
 8008430:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008434:	9306      	str	r3, [sp, #24]
 8008436:	ec59 8b18 	vmov	r8, r9, d8
 800843a:	2700      	movs	r7, #0
 800843c:	e01f      	b.n	800847e <__kernel_rem_pio2+0xbe>
 800843e:	42ef      	cmn	r7, r5
 8008440:	d407      	bmi.n	8008452 <__kernel_rem_pio2+0x92>
 8008442:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008446:	f7f8 f819 	bl	800047c <__aeabi_i2d>
 800844a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800844e:	3501      	adds	r5, #1
 8008450:	e7df      	b.n	8008412 <__kernel_rem_pio2+0x52>
 8008452:	ec51 0b18 	vmov	r0, r1, d8
 8008456:	e7f8      	b.n	800844a <__kernel_rem_pio2+0x8a>
 8008458:	9906      	ldr	r1, [sp, #24]
 800845a:	9d02      	ldr	r5, [sp, #8]
 800845c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8008460:	9106      	str	r1, [sp, #24]
 8008462:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8008466:	9502      	str	r5, [sp, #8]
 8008468:	f7f8 f872 	bl	8000550 <__aeabi_dmul>
 800846c:	4602      	mov	r2, r0
 800846e:	460b      	mov	r3, r1
 8008470:	4640      	mov	r0, r8
 8008472:	4649      	mov	r1, r9
 8008474:	f7f7 feb6 	bl	80001e4 <__adddf3>
 8008478:	3701      	adds	r7, #1
 800847a:	4680      	mov	r8, r0
 800847c:	4689      	mov	r9, r1
 800847e:	9b07      	ldr	r3, [sp, #28]
 8008480:	429f      	cmp	r7, r3
 8008482:	dde9      	ble.n	8008458 <__kernel_rem_pio2+0x98>
 8008484:	e8eb 8902 	strd	r8, r9, [fp], #8
 8008488:	3601      	adds	r6, #1
 800848a:	e7c9      	b.n	8008420 <__kernel_rem_pio2+0x60>
 800848c:	9b04      	ldr	r3, [sp, #16]
 800848e:	aa0e      	add	r2, sp, #56	; 0x38
 8008490:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008494:	930c      	str	r3, [sp, #48]	; 0x30
 8008496:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008498:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800849c:	9c04      	ldr	r4, [sp, #16]
 800849e:	930b      	str	r3, [sp, #44]	; 0x2c
 80084a0:	ab9a      	add	r3, sp, #616	; 0x268
 80084a2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80084a6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80084aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80084ae:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80084b2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80084b6:	ab9a      	add	r3, sp, #616	; 0x268
 80084b8:	445b      	add	r3, fp
 80084ba:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80084be:	2500      	movs	r5, #0
 80084c0:	1b63      	subs	r3, r4, r5
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	dc78      	bgt.n	80085b8 <__kernel_rem_pio2+0x1f8>
 80084c6:	4650      	mov	r0, sl
 80084c8:	ec49 8b10 	vmov	d0, r8, r9
 80084cc:	f000 fc00 	bl	8008cd0 <scalbn>
 80084d0:	ec57 6b10 	vmov	r6, r7, d0
 80084d4:	2200      	movs	r2, #0
 80084d6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80084da:	ee10 0a10 	vmov	r0, s0
 80084de:	4639      	mov	r1, r7
 80084e0:	f7f8 f836 	bl	8000550 <__aeabi_dmul>
 80084e4:	ec41 0b10 	vmov	d0, r0, r1
 80084e8:	f000 fb6e 	bl	8008bc8 <floor>
 80084ec:	2200      	movs	r2, #0
 80084ee:	ec51 0b10 	vmov	r0, r1, d0
 80084f2:	4b7e      	ldr	r3, [pc, #504]	; (80086ec <__kernel_rem_pio2+0x32c>)
 80084f4:	f7f8 f82c 	bl	8000550 <__aeabi_dmul>
 80084f8:	4602      	mov	r2, r0
 80084fa:	460b      	mov	r3, r1
 80084fc:	4630      	mov	r0, r6
 80084fe:	4639      	mov	r1, r7
 8008500:	f7f7 fe6e 	bl	80001e0 <__aeabi_dsub>
 8008504:	460f      	mov	r7, r1
 8008506:	4606      	mov	r6, r0
 8008508:	f7f8 fabc 	bl	8000a84 <__aeabi_d2iz>
 800850c:	9006      	str	r0, [sp, #24]
 800850e:	f7f7 ffb5 	bl	800047c <__aeabi_i2d>
 8008512:	4602      	mov	r2, r0
 8008514:	460b      	mov	r3, r1
 8008516:	4630      	mov	r0, r6
 8008518:	4639      	mov	r1, r7
 800851a:	f7f7 fe61 	bl	80001e0 <__aeabi_dsub>
 800851e:	f1ba 0f00 	cmp.w	sl, #0
 8008522:	4606      	mov	r6, r0
 8008524:	460f      	mov	r7, r1
 8008526:	dd6c      	ble.n	8008602 <__kernel_rem_pio2+0x242>
 8008528:	1e62      	subs	r2, r4, #1
 800852a:	ab0e      	add	r3, sp, #56	; 0x38
 800852c:	f1ca 0118 	rsb	r1, sl, #24
 8008530:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008534:	9d06      	ldr	r5, [sp, #24]
 8008536:	fa40 f301 	asr.w	r3, r0, r1
 800853a:	441d      	add	r5, r3
 800853c:	408b      	lsls	r3, r1
 800853e:	1ac0      	subs	r0, r0, r3
 8008540:	ab0e      	add	r3, sp, #56	; 0x38
 8008542:	9506      	str	r5, [sp, #24]
 8008544:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008548:	f1ca 0317 	rsb	r3, sl, #23
 800854c:	fa40 f303 	asr.w	r3, r0, r3
 8008550:	9302      	str	r3, [sp, #8]
 8008552:	9b02      	ldr	r3, [sp, #8]
 8008554:	2b00      	cmp	r3, #0
 8008556:	dd62      	ble.n	800861e <__kernel_rem_pio2+0x25e>
 8008558:	9b06      	ldr	r3, [sp, #24]
 800855a:	2200      	movs	r2, #0
 800855c:	3301      	adds	r3, #1
 800855e:	9306      	str	r3, [sp, #24]
 8008560:	4615      	mov	r5, r2
 8008562:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008566:	4294      	cmp	r4, r2
 8008568:	f300 8095 	bgt.w	8008696 <__kernel_rem_pio2+0x2d6>
 800856c:	f1ba 0f00 	cmp.w	sl, #0
 8008570:	dd07      	ble.n	8008582 <__kernel_rem_pio2+0x1c2>
 8008572:	f1ba 0f01 	cmp.w	sl, #1
 8008576:	f000 80a2 	beq.w	80086be <__kernel_rem_pio2+0x2fe>
 800857a:	f1ba 0f02 	cmp.w	sl, #2
 800857e:	f000 80c1 	beq.w	8008704 <__kernel_rem_pio2+0x344>
 8008582:	9b02      	ldr	r3, [sp, #8]
 8008584:	2b02      	cmp	r3, #2
 8008586:	d14a      	bne.n	800861e <__kernel_rem_pio2+0x25e>
 8008588:	4632      	mov	r2, r6
 800858a:	463b      	mov	r3, r7
 800858c:	2000      	movs	r0, #0
 800858e:	4958      	ldr	r1, [pc, #352]	; (80086f0 <__kernel_rem_pio2+0x330>)
 8008590:	f7f7 fe26 	bl	80001e0 <__aeabi_dsub>
 8008594:	4606      	mov	r6, r0
 8008596:	460f      	mov	r7, r1
 8008598:	2d00      	cmp	r5, #0
 800859a:	d040      	beq.n	800861e <__kernel_rem_pio2+0x25e>
 800859c:	4650      	mov	r0, sl
 800859e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80086e0 <__kernel_rem_pio2+0x320>
 80085a2:	f000 fb95 	bl	8008cd0 <scalbn>
 80085a6:	4630      	mov	r0, r6
 80085a8:	4639      	mov	r1, r7
 80085aa:	ec53 2b10 	vmov	r2, r3, d0
 80085ae:	f7f7 fe17 	bl	80001e0 <__aeabi_dsub>
 80085b2:	4606      	mov	r6, r0
 80085b4:	460f      	mov	r7, r1
 80085b6:	e032      	b.n	800861e <__kernel_rem_pio2+0x25e>
 80085b8:	2200      	movs	r2, #0
 80085ba:	4b4e      	ldr	r3, [pc, #312]	; (80086f4 <__kernel_rem_pio2+0x334>)
 80085bc:	4640      	mov	r0, r8
 80085be:	4649      	mov	r1, r9
 80085c0:	f7f7 ffc6 	bl	8000550 <__aeabi_dmul>
 80085c4:	f7f8 fa5e 	bl	8000a84 <__aeabi_d2iz>
 80085c8:	f7f7 ff58 	bl	800047c <__aeabi_i2d>
 80085cc:	2200      	movs	r2, #0
 80085ce:	4b4a      	ldr	r3, [pc, #296]	; (80086f8 <__kernel_rem_pio2+0x338>)
 80085d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085d4:	f7f7 ffbc 	bl	8000550 <__aeabi_dmul>
 80085d8:	4602      	mov	r2, r0
 80085da:	460b      	mov	r3, r1
 80085dc:	4640      	mov	r0, r8
 80085de:	4649      	mov	r1, r9
 80085e0:	f7f7 fdfe 	bl	80001e0 <__aeabi_dsub>
 80085e4:	f7f8 fa4e 	bl	8000a84 <__aeabi_d2iz>
 80085e8:	ab0e      	add	r3, sp, #56	; 0x38
 80085ea:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80085ee:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80085f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085f6:	f7f7 fdf5 	bl	80001e4 <__adddf3>
 80085fa:	3501      	adds	r5, #1
 80085fc:	4680      	mov	r8, r0
 80085fe:	4689      	mov	r9, r1
 8008600:	e75e      	b.n	80084c0 <__kernel_rem_pio2+0x100>
 8008602:	d105      	bne.n	8008610 <__kernel_rem_pio2+0x250>
 8008604:	1e63      	subs	r3, r4, #1
 8008606:	aa0e      	add	r2, sp, #56	; 0x38
 8008608:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800860c:	15c3      	asrs	r3, r0, #23
 800860e:	e79f      	b.n	8008550 <__kernel_rem_pio2+0x190>
 8008610:	2200      	movs	r2, #0
 8008612:	4b3a      	ldr	r3, [pc, #232]	; (80086fc <__kernel_rem_pio2+0x33c>)
 8008614:	f7f8 fa22 	bl	8000a5c <__aeabi_dcmpge>
 8008618:	2800      	cmp	r0, #0
 800861a:	d139      	bne.n	8008690 <__kernel_rem_pio2+0x2d0>
 800861c:	9002      	str	r0, [sp, #8]
 800861e:	2200      	movs	r2, #0
 8008620:	2300      	movs	r3, #0
 8008622:	4630      	mov	r0, r6
 8008624:	4639      	mov	r1, r7
 8008626:	f7f8 f9fb 	bl	8000a20 <__aeabi_dcmpeq>
 800862a:	2800      	cmp	r0, #0
 800862c:	f000 80c7 	beq.w	80087be <__kernel_rem_pio2+0x3fe>
 8008630:	1e65      	subs	r5, r4, #1
 8008632:	462b      	mov	r3, r5
 8008634:	2200      	movs	r2, #0
 8008636:	9904      	ldr	r1, [sp, #16]
 8008638:	428b      	cmp	r3, r1
 800863a:	da6a      	bge.n	8008712 <__kernel_rem_pio2+0x352>
 800863c:	2a00      	cmp	r2, #0
 800863e:	f000 8088 	beq.w	8008752 <__kernel_rem_pio2+0x392>
 8008642:	ab0e      	add	r3, sp, #56	; 0x38
 8008644:	f1aa 0a18 	sub.w	sl, sl, #24
 8008648:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800864c:	2b00      	cmp	r3, #0
 800864e:	f000 80b4 	beq.w	80087ba <__kernel_rem_pio2+0x3fa>
 8008652:	4650      	mov	r0, sl
 8008654:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80086e0 <__kernel_rem_pio2+0x320>
 8008658:	f000 fb3a 	bl	8008cd0 <scalbn>
 800865c:	00ec      	lsls	r4, r5, #3
 800865e:	ab72      	add	r3, sp, #456	; 0x1c8
 8008660:	191e      	adds	r6, r3, r4
 8008662:	ec59 8b10 	vmov	r8, r9, d0
 8008666:	f106 0a08 	add.w	sl, r6, #8
 800866a:	462f      	mov	r7, r5
 800866c:	2f00      	cmp	r7, #0
 800866e:	f280 80df 	bge.w	8008830 <__kernel_rem_pio2+0x470>
 8008672:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80086d8 <__kernel_rem_pio2+0x318>
 8008676:	f04f 0a00 	mov.w	sl, #0
 800867a:	eba5 030a 	sub.w	r3, r5, sl
 800867e:	2b00      	cmp	r3, #0
 8008680:	f2c0 810a 	blt.w	8008898 <__kernel_rem_pio2+0x4d8>
 8008684:	f8df b078 	ldr.w	fp, [pc, #120]	; 8008700 <__kernel_rem_pio2+0x340>
 8008688:	ec59 8b18 	vmov	r8, r9, d8
 800868c:	2700      	movs	r7, #0
 800868e:	e0f5      	b.n	800887c <__kernel_rem_pio2+0x4bc>
 8008690:	2302      	movs	r3, #2
 8008692:	9302      	str	r3, [sp, #8]
 8008694:	e760      	b.n	8008558 <__kernel_rem_pio2+0x198>
 8008696:	ab0e      	add	r3, sp, #56	; 0x38
 8008698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800869c:	b94d      	cbnz	r5, 80086b2 <__kernel_rem_pio2+0x2f2>
 800869e:	b12b      	cbz	r3, 80086ac <__kernel_rem_pio2+0x2ec>
 80086a0:	a80e      	add	r0, sp, #56	; 0x38
 80086a2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80086a6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80086aa:	2301      	movs	r3, #1
 80086ac:	3201      	adds	r2, #1
 80086ae:	461d      	mov	r5, r3
 80086b0:	e759      	b.n	8008566 <__kernel_rem_pio2+0x1a6>
 80086b2:	a80e      	add	r0, sp, #56	; 0x38
 80086b4:	1acb      	subs	r3, r1, r3
 80086b6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80086ba:	462b      	mov	r3, r5
 80086bc:	e7f6      	b.n	80086ac <__kernel_rem_pio2+0x2ec>
 80086be:	1e62      	subs	r2, r4, #1
 80086c0:	ab0e      	add	r3, sp, #56	; 0x38
 80086c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086c6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80086ca:	a90e      	add	r1, sp, #56	; 0x38
 80086cc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80086d0:	e757      	b.n	8008582 <__kernel_rem_pio2+0x1c2>
 80086d2:	bf00      	nop
 80086d4:	f3af 8000 	nop.w
	...
 80086e4:	3ff00000 	.word	0x3ff00000
 80086e8:	08009068 	.word	0x08009068
 80086ec:	40200000 	.word	0x40200000
 80086f0:	3ff00000 	.word	0x3ff00000
 80086f4:	3e700000 	.word	0x3e700000
 80086f8:	41700000 	.word	0x41700000
 80086fc:	3fe00000 	.word	0x3fe00000
 8008700:	08009028 	.word	0x08009028
 8008704:	1e62      	subs	r2, r4, #1
 8008706:	ab0e      	add	r3, sp, #56	; 0x38
 8008708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800870c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008710:	e7db      	b.n	80086ca <__kernel_rem_pio2+0x30a>
 8008712:	a90e      	add	r1, sp, #56	; 0x38
 8008714:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008718:	3b01      	subs	r3, #1
 800871a:	430a      	orrs	r2, r1
 800871c:	e78b      	b.n	8008636 <__kernel_rem_pio2+0x276>
 800871e:	3301      	adds	r3, #1
 8008720:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008724:	2900      	cmp	r1, #0
 8008726:	d0fa      	beq.n	800871e <__kernel_rem_pio2+0x35e>
 8008728:	9a08      	ldr	r2, [sp, #32]
 800872a:	4422      	add	r2, r4
 800872c:	00d2      	lsls	r2, r2, #3
 800872e:	a922      	add	r1, sp, #136	; 0x88
 8008730:	18e3      	adds	r3, r4, r3
 8008732:	9206      	str	r2, [sp, #24]
 8008734:	440a      	add	r2, r1
 8008736:	9302      	str	r3, [sp, #8]
 8008738:	f10b 0108 	add.w	r1, fp, #8
 800873c:	f102 0308 	add.w	r3, r2, #8
 8008740:	1c66      	adds	r6, r4, #1
 8008742:	910a      	str	r1, [sp, #40]	; 0x28
 8008744:	2500      	movs	r5, #0
 8008746:	930d      	str	r3, [sp, #52]	; 0x34
 8008748:	9b02      	ldr	r3, [sp, #8]
 800874a:	42b3      	cmp	r3, r6
 800874c:	da04      	bge.n	8008758 <__kernel_rem_pio2+0x398>
 800874e:	461c      	mov	r4, r3
 8008750:	e6a6      	b.n	80084a0 <__kernel_rem_pio2+0xe0>
 8008752:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008754:	2301      	movs	r3, #1
 8008756:	e7e3      	b.n	8008720 <__kernel_rem_pio2+0x360>
 8008758:	9b06      	ldr	r3, [sp, #24]
 800875a:	18ef      	adds	r7, r5, r3
 800875c:	ab22      	add	r3, sp, #136	; 0x88
 800875e:	441f      	add	r7, r3
 8008760:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008762:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008766:	f7f7 fe89 	bl	800047c <__aeabi_i2d>
 800876a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800876c:	461c      	mov	r4, r3
 800876e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008770:	e9c7 0100 	strd	r0, r1, [r7]
 8008774:	eb03 0b05 	add.w	fp, r3, r5
 8008778:	2700      	movs	r7, #0
 800877a:	f04f 0800 	mov.w	r8, #0
 800877e:	f04f 0900 	mov.w	r9, #0
 8008782:	9b07      	ldr	r3, [sp, #28]
 8008784:	429f      	cmp	r7, r3
 8008786:	dd08      	ble.n	800879a <__kernel_rem_pio2+0x3da>
 8008788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800878a:	aa72      	add	r2, sp, #456	; 0x1c8
 800878c:	18eb      	adds	r3, r5, r3
 800878e:	4413      	add	r3, r2
 8008790:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8008794:	3601      	adds	r6, #1
 8008796:	3508      	adds	r5, #8
 8008798:	e7d6      	b.n	8008748 <__kernel_rem_pio2+0x388>
 800879a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800879e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80087a2:	f7f7 fed5 	bl	8000550 <__aeabi_dmul>
 80087a6:	4602      	mov	r2, r0
 80087a8:	460b      	mov	r3, r1
 80087aa:	4640      	mov	r0, r8
 80087ac:	4649      	mov	r1, r9
 80087ae:	f7f7 fd19 	bl	80001e4 <__adddf3>
 80087b2:	3701      	adds	r7, #1
 80087b4:	4680      	mov	r8, r0
 80087b6:	4689      	mov	r9, r1
 80087b8:	e7e3      	b.n	8008782 <__kernel_rem_pio2+0x3c2>
 80087ba:	3d01      	subs	r5, #1
 80087bc:	e741      	b.n	8008642 <__kernel_rem_pio2+0x282>
 80087be:	f1ca 0000 	rsb	r0, sl, #0
 80087c2:	ec47 6b10 	vmov	d0, r6, r7
 80087c6:	f000 fa83 	bl	8008cd0 <scalbn>
 80087ca:	ec57 6b10 	vmov	r6, r7, d0
 80087ce:	2200      	movs	r2, #0
 80087d0:	4b99      	ldr	r3, [pc, #612]	; (8008a38 <__kernel_rem_pio2+0x678>)
 80087d2:	ee10 0a10 	vmov	r0, s0
 80087d6:	4639      	mov	r1, r7
 80087d8:	f7f8 f940 	bl	8000a5c <__aeabi_dcmpge>
 80087dc:	b1f8      	cbz	r0, 800881e <__kernel_rem_pio2+0x45e>
 80087de:	2200      	movs	r2, #0
 80087e0:	4b96      	ldr	r3, [pc, #600]	; (8008a3c <__kernel_rem_pio2+0x67c>)
 80087e2:	4630      	mov	r0, r6
 80087e4:	4639      	mov	r1, r7
 80087e6:	f7f7 feb3 	bl	8000550 <__aeabi_dmul>
 80087ea:	f7f8 f94b 	bl	8000a84 <__aeabi_d2iz>
 80087ee:	4680      	mov	r8, r0
 80087f0:	f7f7 fe44 	bl	800047c <__aeabi_i2d>
 80087f4:	2200      	movs	r2, #0
 80087f6:	4b90      	ldr	r3, [pc, #576]	; (8008a38 <__kernel_rem_pio2+0x678>)
 80087f8:	f7f7 feaa 	bl	8000550 <__aeabi_dmul>
 80087fc:	460b      	mov	r3, r1
 80087fe:	4602      	mov	r2, r0
 8008800:	4639      	mov	r1, r7
 8008802:	4630      	mov	r0, r6
 8008804:	f7f7 fcec 	bl	80001e0 <__aeabi_dsub>
 8008808:	f7f8 f93c 	bl	8000a84 <__aeabi_d2iz>
 800880c:	1c65      	adds	r5, r4, #1
 800880e:	ab0e      	add	r3, sp, #56	; 0x38
 8008810:	f10a 0a18 	add.w	sl, sl, #24
 8008814:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008818:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800881c:	e719      	b.n	8008652 <__kernel_rem_pio2+0x292>
 800881e:	4630      	mov	r0, r6
 8008820:	4639      	mov	r1, r7
 8008822:	f7f8 f92f 	bl	8000a84 <__aeabi_d2iz>
 8008826:	ab0e      	add	r3, sp, #56	; 0x38
 8008828:	4625      	mov	r5, r4
 800882a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800882e:	e710      	b.n	8008652 <__kernel_rem_pio2+0x292>
 8008830:	ab0e      	add	r3, sp, #56	; 0x38
 8008832:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8008836:	f7f7 fe21 	bl	800047c <__aeabi_i2d>
 800883a:	4642      	mov	r2, r8
 800883c:	464b      	mov	r3, r9
 800883e:	f7f7 fe87 	bl	8000550 <__aeabi_dmul>
 8008842:	2200      	movs	r2, #0
 8008844:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8008848:	4b7c      	ldr	r3, [pc, #496]	; (8008a3c <__kernel_rem_pio2+0x67c>)
 800884a:	4640      	mov	r0, r8
 800884c:	4649      	mov	r1, r9
 800884e:	f7f7 fe7f 	bl	8000550 <__aeabi_dmul>
 8008852:	3f01      	subs	r7, #1
 8008854:	4680      	mov	r8, r0
 8008856:	4689      	mov	r9, r1
 8008858:	e708      	b.n	800866c <__kernel_rem_pio2+0x2ac>
 800885a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800885e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008862:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8008866:	f7f7 fe73 	bl	8000550 <__aeabi_dmul>
 800886a:	4602      	mov	r2, r0
 800886c:	460b      	mov	r3, r1
 800886e:	4640      	mov	r0, r8
 8008870:	4649      	mov	r1, r9
 8008872:	f7f7 fcb7 	bl	80001e4 <__adddf3>
 8008876:	3701      	adds	r7, #1
 8008878:	4680      	mov	r8, r0
 800887a:	4689      	mov	r9, r1
 800887c:	9b04      	ldr	r3, [sp, #16]
 800887e:	429f      	cmp	r7, r3
 8008880:	dc01      	bgt.n	8008886 <__kernel_rem_pio2+0x4c6>
 8008882:	45ba      	cmp	sl, r7
 8008884:	dae9      	bge.n	800885a <__kernel_rem_pio2+0x49a>
 8008886:	ab4a      	add	r3, sp, #296	; 0x128
 8008888:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800888c:	e9c3 8900 	strd	r8, r9, [r3]
 8008890:	f10a 0a01 	add.w	sl, sl, #1
 8008894:	3e08      	subs	r6, #8
 8008896:	e6f0      	b.n	800867a <__kernel_rem_pio2+0x2ba>
 8008898:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800889a:	2b03      	cmp	r3, #3
 800889c:	d85b      	bhi.n	8008956 <__kernel_rem_pio2+0x596>
 800889e:	e8df f003 	tbb	[pc, r3]
 80088a2:	264a      	.short	0x264a
 80088a4:	0226      	.short	0x0226
 80088a6:	ab9a      	add	r3, sp, #616	; 0x268
 80088a8:	441c      	add	r4, r3
 80088aa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80088ae:	46a2      	mov	sl, r4
 80088b0:	46ab      	mov	fp, r5
 80088b2:	f1bb 0f00 	cmp.w	fp, #0
 80088b6:	dc6c      	bgt.n	8008992 <__kernel_rem_pio2+0x5d2>
 80088b8:	46a2      	mov	sl, r4
 80088ba:	46ab      	mov	fp, r5
 80088bc:	f1bb 0f01 	cmp.w	fp, #1
 80088c0:	f300 8086 	bgt.w	80089d0 <__kernel_rem_pio2+0x610>
 80088c4:	2000      	movs	r0, #0
 80088c6:	2100      	movs	r1, #0
 80088c8:	2d01      	cmp	r5, #1
 80088ca:	f300 80a0 	bgt.w	8008a0e <__kernel_rem_pio2+0x64e>
 80088ce:	9b02      	ldr	r3, [sp, #8]
 80088d0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80088d4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f040 809e 	bne.w	8008a1a <__kernel_rem_pio2+0x65a>
 80088de:	9b01      	ldr	r3, [sp, #4]
 80088e0:	e9c3 7800 	strd	r7, r8, [r3]
 80088e4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80088e8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80088ec:	e033      	b.n	8008956 <__kernel_rem_pio2+0x596>
 80088ee:	3408      	adds	r4, #8
 80088f0:	ab4a      	add	r3, sp, #296	; 0x128
 80088f2:	441c      	add	r4, r3
 80088f4:	462e      	mov	r6, r5
 80088f6:	2000      	movs	r0, #0
 80088f8:	2100      	movs	r1, #0
 80088fa:	2e00      	cmp	r6, #0
 80088fc:	da3a      	bge.n	8008974 <__kernel_rem_pio2+0x5b4>
 80088fe:	9b02      	ldr	r3, [sp, #8]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d03d      	beq.n	8008980 <__kernel_rem_pio2+0x5c0>
 8008904:	4602      	mov	r2, r0
 8008906:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800890a:	9c01      	ldr	r4, [sp, #4]
 800890c:	e9c4 2300 	strd	r2, r3, [r4]
 8008910:	4602      	mov	r2, r0
 8008912:	460b      	mov	r3, r1
 8008914:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8008918:	f7f7 fc62 	bl	80001e0 <__aeabi_dsub>
 800891c:	ae4c      	add	r6, sp, #304	; 0x130
 800891e:	2401      	movs	r4, #1
 8008920:	42a5      	cmp	r5, r4
 8008922:	da30      	bge.n	8008986 <__kernel_rem_pio2+0x5c6>
 8008924:	9b02      	ldr	r3, [sp, #8]
 8008926:	b113      	cbz	r3, 800892e <__kernel_rem_pio2+0x56e>
 8008928:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800892c:	4619      	mov	r1, r3
 800892e:	9b01      	ldr	r3, [sp, #4]
 8008930:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008934:	e00f      	b.n	8008956 <__kernel_rem_pio2+0x596>
 8008936:	ab9a      	add	r3, sp, #616	; 0x268
 8008938:	441c      	add	r4, r3
 800893a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800893e:	2000      	movs	r0, #0
 8008940:	2100      	movs	r1, #0
 8008942:	2d00      	cmp	r5, #0
 8008944:	da10      	bge.n	8008968 <__kernel_rem_pio2+0x5a8>
 8008946:	9b02      	ldr	r3, [sp, #8]
 8008948:	b113      	cbz	r3, 8008950 <__kernel_rem_pio2+0x590>
 800894a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800894e:	4619      	mov	r1, r3
 8008950:	9b01      	ldr	r3, [sp, #4]
 8008952:	e9c3 0100 	strd	r0, r1, [r3]
 8008956:	9b06      	ldr	r3, [sp, #24]
 8008958:	f003 0007 	and.w	r0, r3, #7
 800895c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8008960:	ecbd 8b02 	vpop	{d8}
 8008964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008968:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800896c:	f7f7 fc3a 	bl	80001e4 <__adddf3>
 8008970:	3d01      	subs	r5, #1
 8008972:	e7e6      	b.n	8008942 <__kernel_rem_pio2+0x582>
 8008974:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008978:	f7f7 fc34 	bl	80001e4 <__adddf3>
 800897c:	3e01      	subs	r6, #1
 800897e:	e7bc      	b.n	80088fa <__kernel_rem_pio2+0x53a>
 8008980:	4602      	mov	r2, r0
 8008982:	460b      	mov	r3, r1
 8008984:	e7c1      	b.n	800890a <__kernel_rem_pio2+0x54a>
 8008986:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800898a:	f7f7 fc2b 	bl	80001e4 <__adddf3>
 800898e:	3401      	adds	r4, #1
 8008990:	e7c6      	b.n	8008920 <__kernel_rem_pio2+0x560>
 8008992:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8008996:	ed3a 7b02 	vldmdb	sl!, {d7}
 800899a:	4640      	mov	r0, r8
 800899c:	ec53 2b17 	vmov	r2, r3, d7
 80089a0:	4649      	mov	r1, r9
 80089a2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80089a6:	f7f7 fc1d 	bl	80001e4 <__adddf3>
 80089aa:	4602      	mov	r2, r0
 80089ac:	460b      	mov	r3, r1
 80089ae:	4606      	mov	r6, r0
 80089b0:	460f      	mov	r7, r1
 80089b2:	4640      	mov	r0, r8
 80089b4:	4649      	mov	r1, r9
 80089b6:	f7f7 fc13 	bl	80001e0 <__aeabi_dsub>
 80089ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089be:	f7f7 fc11 	bl	80001e4 <__adddf3>
 80089c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80089c6:	e9ca 0100 	strd	r0, r1, [sl]
 80089ca:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80089ce:	e770      	b.n	80088b2 <__kernel_rem_pio2+0x4f2>
 80089d0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80089d4:	ed3a 7b02 	vldmdb	sl!, {d7}
 80089d8:	4630      	mov	r0, r6
 80089da:	ec53 2b17 	vmov	r2, r3, d7
 80089de:	4639      	mov	r1, r7
 80089e0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80089e4:	f7f7 fbfe 	bl	80001e4 <__adddf3>
 80089e8:	4602      	mov	r2, r0
 80089ea:	460b      	mov	r3, r1
 80089ec:	4680      	mov	r8, r0
 80089ee:	4689      	mov	r9, r1
 80089f0:	4630      	mov	r0, r6
 80089f2:	4639      	mov	r1, r7
 80089f4:	f7f7 fbf4 	bl	80001e0 <__aeabi_dsub>
 80089f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089fc:	f7f7 fbf2 	bl	80001e4 <__adddf3>
 8008a00:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008a04:	e9ca 0100 	strd	r0, r1, [sl]
 8008a08:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8008a0c:	e756      	b.n	80088bc <__kernel_rem_pio2+0x4fc>
 8008a0e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008a12:	f7f7 fbe7 	bl	80001e4 <__adddf3>
 8008a16:	3d01      	subs	r5, #1
 8008a18:	e756      	b.n	80088c8 <__kernel_rem_pio2+0x508>
 8008a1a:	9b01      	ldr	r3, [sp, #4]
 8008a1c:	9a01      	ldr	r2, [sp, #4]
 8008a1e:	601f      	str	r7, [r3, #0]
 8008a20:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8008a24:	605c      	str	r4, [r3, #4]
 8008a26:	609d      	str	r5, [r3, #8]
 8008a28:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008a2c:	60d3      	str	r3, [r2, #12]
 8008a2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a32:	6110      	str	r0, [r2, #16]
 8008a34:	6153      	str	r3, [r2, #20]
 8008a36:	e78e      	b.n	8008956 <__kernel_rem_pio2+0x596>
 8008a38:	41700000 	.word	0x41700000
 8008a3c:	3e700000 	.word	0x3e700000

08008a40 <__kernel_sin>:
 8008a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a44:	ec55 4b10 	vmov	r4, r5, d0
 8008a48:	b085      	sub	sp, #20
 8008a4a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008a4e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008a52:	ed8d 1b00 	vstr	d1, [sp]
 8008a56:	9002      	str	r0, [sp, #8]
 8008a58:	da06      	bge.n	8008a68 <__kernel_sin+0x28>
 8008a5a:	ee10 0a10 	vmov	r0, s0
 8008a5e:	4629      	mov	r1, r5
 8008a60:	f7f8 f810 	bl	8000a84 <__aeabi_d2iz>
 8008a64:	2800      	cmp	r0, #0
 8008a66:	d051      	beq.n	8008b0c <__kernel_sin+0xcc>
 8008a68:	4622      	mov	r2, r4
 8008a6a:	462b      	mov	r3, r5
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	4629      	mov	r1, r5
 8008a70:	f7f7 fd6e 	bl	8000550 <__aeabi_dmul>
 8008a74:	4682      	mov	sl, r0
 8008a76:	468b      	mov	fp, r1
 8008a78:	4602      	mov	r2, r0
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	4629      	mov	r1, r5
 8008a80:	f7f7 fd66 	bl	8000550 <__aeabi_dmul>
 8008a84:	a341      	add	r3, pc, #260	; (adr r3, 8008b8c <__kernel_sin+0x14c>)
 8008a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8a:	4680      	mov	r8, r0
 8008a8c:	4689      	mov	r9, r1
 8008a8e:	4650      	mov	r0, sl
 8008a90:	4659      	mov	r1, fp
 8008a92:	f7f7 fd5d 	bl	8000550 <__aeabi_dmul>
 8008a96:	a33f      	add	r3, pc, #252	; (adr r3, 8008b94 <__kernel_sin+0x154>)
 8008a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9c:	f7f7 fba0 	bl	80001e0 <__aeabi_dsub>
 8008aa0:	4652      	mov	r2, sl
 8008aa2:	465b      	mov	r3, fp
 8008aa4:	f7f7 fd54 	bl	8000550 <__aeabi_dmul>
 8008aa8:	a33c      	add	r3, pc, #240	; (adr r3, 8008b9c <__kernel_sin+0x15c>)
 8008aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aae:	f7f7 fb99 	bl	80001e4 <__adddf3>
 8008ab2:	4652      	mov	r2, sl
 8008ab4:	465b      	mov	r3, fp
 8008ab6:	f7f7 fd4b 	bl	8000550 <__aeabi_dmul>
 8008aba:	a33a      	add	r3, pc, #232	; (adr r3, 8008ba4 <__kernel_sin+0x164>)
 8008abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac0:	f7f7 fb8e 	bl	80001e0 <__aeabi_dsub>
 8008ac4:	4652      	mov	r2, sl
 8008ac6:	465b      	mov	r3, fp
 8008ac8:	f7f7 fd42 	bl	8000550 <__aeabi_dmul>
 8008acc:	a337      	add	r3, pc, #220	; (adr r3, 8008bac <__kernel_sin+0x16c>)
 8008ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad2:	f7f7 fb87 	bl	80001e4 <__adddf3>
 8008ad6:	9b02      	ldr	r3, [sp, #8]
 8008ad8:	4606      	mov	r6, r0
 8008ada:	460f      	mov	r7, r1
 8008adc:	b9db      	cbnz	r3, 8008b16 <__kernel_sin+0xd6>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	4650      	mov	r0, sl
 8008ae4:	4659      	mov	r1, fp
 8008ae6:	f7f7 fd33 	bl	8000550 <__aeabi_dmul>
 8008aea:	a325      	add	r3, pc, #148	; (adr r3, 8008b80 <__kernel_sin+0x140>)
 8008aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af0:	f7f7 fb76 	bl	80001e0 <__aeabi_dsub>
 8008af4:	4642      	mov	r2, r8
 8008af6:	464b      	mov	r3, r9
 8008af8:	f7f7 fd2a 	bl	8000550 <__aeabi_dmul>
 8008afc:	4602      	mov	r2, r0
 8008afe:	460b      	mov	r3, r1
 8008b00:	4620      	mov	r0, r4
 8008b02:	4629      	mov	r1, r5
 8008b04:	f7f7 fb6e 	bl	80001e4 <__adddf3>
 8008b08:	4604      	mov	r4, r0
 8008b0a:	460d      	mov	r5, r1
 8008b0c:	ec45 4b10 	vmov	d0, r4, r5
 8008b10:	b005      	add	sp, #20
 8008b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b16:	2200      	movs	r2, #0
 8008b18:	4b1b      	ldr	r3, [pc, #108]	; (8008b88 <__kernel_sin+0x148>)
 8008b1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b1e:	f7f7 fd17 	bl	8000550 <__aeabi_dmul>
 8008b22:	4632      	mov	r2, r6
 8008b24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b28:	463b      	mov	r3, r7
 8008b2a:	4640      	mov	r0, r8
 8008b2c:	4649      	mov	r1, r9
 8008b2e:	f7f7 fd0f 	bl	8000550 <__aeabi_dmul>
 8008b32:	4602      	mov	r2, r0
 8008b34:	460b      	mov	r3, r1
 8008b36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b3a:	f7f7 fb51 	bl	80001e0 <__aeabi_dsub>
 8008b3e:	4652      	mov	r2, sl
 8008b40:	465b      	mov	r3, fp
 8008b42:	f7f7 fd05 	bl	8000550 <__aeabi_dmul>
 8008b46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b4a:	f7f7 fb49 	bl	80001e0 <__aeabi_dsub>
 8008b4e:	a30c      	add	r3, pc, #48	; (adr r3, 8008b80 <__kernel_sin+0x140>)
 8008b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b54:	4606      	mov	r6, r0
 8008b56:	460f      	mov	r7, r1
 8008b58:	4640      	mov	r0, r8
 8008b5a:	4649      	mov	r1, r9
 8008b5c:	f7f7 fcf8 	bl	8000550 <__aeabi_dmul>
 8008b60:	4602      	mov	r2, r0
 8008b62:	460b      	mov	r3, r1
 8008b64:	4630      	mov	r0, r6
 8008b66:	4639      	mov	r1, r7
 8008b68:	f7f7 fb3c 	bl	80001e4 <__adddf3>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	460b      	mov	r3, r1
 8008b70:	4620      	mov	r0, r4
 8008b72:	4629      	mov	r1, r5
 8008b74:	f7f7 fb34 	bl	80001e0 <__aeabi_dsub>
 8008b78:	e7c6      	b.n	8008b08 <__kernel_sin+0xc8>
 8008b7a:	bf00      	nop
 8008b7c:	f3af 8000 	nop.w
 8008b80:	55555549 	.word	0x55555549
 8008b84:	3fc55555 	.word	0x3fc55555
 8008b88:	3fe00000 	.word	0x3fe00000
 8008b8c:	5acfd57c 	.word	0x5acfd57c
 8008b90:	3de5d93a 	.word	0x3de5d93a
 8008b94:	8a2b9ceb 	.word	0x8a2b9ceb
 8008b98:	3e5ae5e6 	.word	0x3e5ae5e6
 8008b9c:	57b1fe7d 	.word	0x57b1fe7d
 8008ba0:	3ec71de3 	.word	0x3ec71de3
 8008ba4:	19c161d5 	.word	0x19c161d5
 8008ba8:	3f2a01a0 	.word	0x3f2a01a0
 8008bac:	1110f8a6 	.word	0x1110f8a6
 8008bb0:	3f811111 	.word	0x3f811111

08008bb4 <fabs>:
 8008bb4:	ec51 0b10 	vmov	r0, r1, d0
 8008bb8:	ee10 2a10 	vmov	r2, s0
 8008bbc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008bc0:	ec43 2b10 	vmov	d0, r2, r3
 8008bc4:	4770      	bx	lr
	...

08008bc8 <floor>:
 8008bc8:	ec51 0b10 	vmov	r0, r1, d0
 8008bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bd0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008bd4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008bd8:	2e13      	cmp	r6, #19
 8008bda:	460c      	mov	r4, r1
 8008bdc:	ee10 5a10 	vmov	r5, s0
 8008be0:	4680      	mov	r8, r0
 8008be2:	dc34      	bgt.n	8008c4e <floor+0x86>
 8008be4:	2e00      	cmp	r6, #0
 8008be6:	da16      	bge.n	8008c16 <floor+0x4e>
 8008be8:	a335      	add	r3, pc, #212	; (adr r3, 8008cc0 <floor+0xf8>)
 8008bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bee:	f7f7 faf9 	bl	80001e4 <__adddf3>
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	f7f7 ff3b 	bl	8000a70 <__aeabi_dcmpgt>
 8008bfa:	b148      	cbz	r0, 8008c10 <floor+0x48>
 8008bfc:	2c00      	cmp	r4, #0
 8008bfe:	da59      	bge.n	8008cb4 <floor+0xec>
 8008c00:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008c04:	4a30      	ldr	r2, [pc, #192]	; (8008cc8 <floor+0x100>)
 8008c06:	432b      	orrs	r3, r5
 8008c08:	2500      	movs	r5, #0
 8008c0a:	42ab      	cmp	r3, r5
 8008c0c:	bf18      	it	ne
 8008c0e:	4614      	movne	r4, r2
 8008c10:	4621      	mov	r1, r4
 8008c12:	4628      	mov	r0, r5
 8008c14:	e025      	b.n	8008c62 <floor+0x9a>
 8008c16:	4f2d      	ldr	r7, [pc, #180]	; (8008ccc <floor+0x104>)
 8008c18:	4137      	asrs	r7, r6
 8008c1a:	ea01 0307 	and.w	r3, r1, r7
 8008c1e:	4303      	orrs	r3, r0
 8008c20:	d01f      	beq.n	8008c62 <floor+0x9a>
 8008c22:	a327      	add	r3, pc, #156	; (adr r3, 8008cc0 <floor+0xf8>)
 8008c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c28:	f7f7 fadc 	bl	80001e4 <__adddf3>
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	2300      	movs	r3, #0
 8008c30:	f7f7 ff1e 	bl	8000a70 <__aeabi_dcmpgt>
 8008c34:	2800      	cmp	r0, #0
 8008c36:	d0eb      	beq.n	8008c10 <floor+0x48>
 8008c38:	2c00      	cmp	r4, #0
 8008c3a:	bfbe      	ittt	lt
 8008c3c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008c40:	fa43 f606 	asrlt.w	r6, r3, r6
 8008c44:	19a4      	addlt	r4, r4, r6
 8008c46:	ea24 0407 	bic.w	r4, r4, r7
 8008c4a:	2500      	movs	r5, #0
 8008c4c:	e7e0      	b.n	8008c10 <floor+0x48>
 8008c4e:	2e33      	cmp	r6, #51	; 0x33
 8008c50:	dd0b      	ble.n	8008c6a <floor+0xa2>
 8008c52:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008c56:	d104      	bne.n	8008c62 <floor+0x9a>
 8008c58:	ee10 2a10 	vmov	r2, s0
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	f7f7 fac1 	bl	80001e4 <__adddf3>
 8008c62:	ec41 0b10 	vmov	d0, r0, r1
 8008c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c6a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8008c72:	fa23 f707 	lsr.w	r7, r3, r7
 8008c76:	4207      	tst	r7, r0
 8008c78:	d0f3      	beq.n	8008c62 <floor+0x9a>
 8008c7a:	a311      	add	r3, pc, #68	; (adr r3, 8008cc0 <floor+0xf8>)
 8008c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c80:	f7f7 fab0 	bl	80001e4 <__adddf3>
 8008c84:	2200      	movs	r2, #0
 8008c86:	2300      	movs	r3, #0
 8008c88:	f7f7 fef2 	bl	8000a70 <__aeabi_dcmpgt>
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	d0bf      	beq.n	8008c10 <floor+0x48>
 8008c90:	2c00      	cmp	r4, #0
 8008c92:	da02      	bge.n	8008c9a <floor+0xd2>
 8008c94:	2e14      	cmp	r6, #20
 8008c96:	d103      	bne.n	8008ca0 <floor+0xd8>
 8008c98:	3401      	adds	r4, #1
 8008c9a:	ea25 0507 	bic.w	r5, r5, r7
 8008c9e:	e7b7      	b.n	8008c10 <floor+0x48>
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008ca6:	fa03 f606 	lsl.w	r6, r3, r6
 8008caa:	4435      	add	r5, r6
 8008cac:	4545      	cmp	r5, r8
 8008cae:	bf38      	it	cc
 8008cb0:	18e4      	addcc	r4, r4, r3
 8008cb2:	e7f2      	b.n	8008c9a <floor+0xd2>
 8008cb4:	2500      	movs	r5, #0
 8008cb6:	462c      	mov	r4, r5
 8008cb8:	e7aa      	b.n	8008c10 <floor+0x48>
 8008cba:	bf00      	nop
 8008cbc:	f3af 8000 	nop.w
 8008cc0:	8800759c 	.word	0x8800759c
 8008cc4:	7e37e43c 	.word	0x7e37e43c
 8008cc8:	bff00000 	.word	0xbff00000
 8008ccc:	000fffff 	.word	0x000fffff

08008cd0 <scalbn>:
 8008cd0:	b570      	push	{r4, r5, r6, lr}
 8008cd2:	ec55 4b10 	vmov	r4, r5, d0
 8008cd6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008cda:	4606      	mov	r6, r0
 8008cdc:	462b      	mov	r3, r5
 8008cde:	b9aa      	cbnz	r2, 8008d0c <scalbn+0x3c>
 8008ce0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008ce4:	4323      	orrs	r3, r4
 8008ce6:	d03b      	beq.n	8008d60 <scalbn+0x90>
 8008ce8:	4b31      	ldr	r3, [pc, #196]	; (8008db0 <scalbn+0xe0>)
 8008cea:	4629      	mov	r1, r5
 8008cec:	2200      	movs	r2, #0
 8008cee:	ee10 0a10 	vmov	r0, s0
 8008cf2:	f7f7 fc2d 	bl	8000550 <__aeabi_dmul>
 8008cf6:	4b2f      	ldr	r3, [pc, #188]	; (8008db4 <scalbn+0xe4>)
 8008cf8:	429e      	cmp	r6, r3
 8008cfa:	4604      	mov	r4, r0
 8008cfc:	460d      	mov	r5, r1
 8008cfe:	da12      	bge.n	8008d26 <scalbn+0x56>
 8008d00:	a327      	add	r3, pc, #156	; (adr r3, 8008da0 <scalbn+0xd0>)
 8008d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d06:	f7f7 fc23 	bl	8000550 <__aeabi_dmul>
 8008d0a:	e009      	b.n	8008d20 <scalbn+0x50>
 8008d0c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008d10:	428a      	cmp	r2, r1
 8008d12:	d10c      	bne.n	8008d2e <scalbn+0x5e>
 8008d14:	ee10 2a10 	vmov	r2, s0
 8008d18:	4620      	mov	r0, r4
 8008d1a:	4629      	mov	r1, r5
 8008d1c:	f7f7 fa62 	bl	80001e4 <__adddf3>
 8008d20:	4604      	mov	r4, r0
 8008d22:	460d      	mov	r5, r1
 8008d24:	e01c      	b.n	8008d60 <scalbn+0x90>
 8008d26:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	3a36      	subs	r2, #54	; 0x36
 8008d2e:	4432      	add	r2, r6
 8008d30:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008d34:	428a      	cmp	r2, r1
 8008d36:	dd0b      	ble.n	8008d50 <scalbn+0x80>
 8008d38:	ec45 4b11 	vmov	d1, r4, r5
 8008d3c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8008da8 <scalbn+0xd8>
 8008d40:	f000 f83c 	bl	8008dbc <copysign>
 8008d44:	a318      	add	r3, pc, #96	; (adr r3, 8008da8 <scalbn+0xd8>)
 8008d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4a:	ec51 0b10 	vmov	r0, r1, d0
 8008d4e:	e7da      	b.n	8008d06 <scalbn+0x36>
 8008d50:	2a00      	cmp	r2, #0
 8008d52:	dd08      	ble.n	8008d66 <scalbn+0x96>
 8008d54:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008d58:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008d5c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008d60:	ec45 4b10 	vmov	d0, r4, r5
 8008d64:	bd70      	pop	{r4, r5, r6, pc}
 8008d66:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008d6a:	da0d      	bge.n	8008d88 <scalbn+0xb8>
 8008d6c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008d70:	429e      	cmp	r6, r3
 8008d72:	ec45 4b11 	vmov	d1, r4, r5
 8008d76:	dce1      	bgt.n	8008d3c <scalbn+0x6c>
 8008d78:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8008da0 <scalbn+0xd0>
 8008d7c:	f000 f81e 	bl	8008dbc <copysign>
 8008d80:	a307      	add	r3, pc, #28	; (adr r3, 8008da0 <scalbn+0xd0>)
 8008d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d86:	e7e0      	b.n	8008d4a <scalbn+0x7a>
 8008d88:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008d8c:	3236      	adds	r2, #54	; 0x36
 8008d8e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008d92:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008d96:	4620      	mov	r0, r4
 8008d98:	4629      	mov	r1, r5
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	4b06      	ldr	r3, [pc, #24]	; (8008db8 <scalbn+0xe8>)
 8008d9e:	e7b2      	b.n	8008d06 <scalbn+0x36>
 8008da0:	c2f8f359 	.word	0xc2f8f359
 8008da4:	01a56e1f 	.word	0x01a56e1f
 8008da8:	8800759c 	.word	0x8800759c
 8008dac:	7e37e43c 	.word	0x7e37e43c
 8008db0:	43500000 	.word	0x43500000
 8008db4:	ffff3cb0 	.word	0xffff3cb0
 8008db8:	3c900000 	.word	0x3c900000

08008dbc <copysign>:
 8008dbc:	ec51 0b10 	vmov	r0, r1, d0
 8008dc0:	ee11 0a90 	vmov	r0, s3
 8008dc4:	ee10 2a10 	vmov	r2, s0
 8008dc8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008dcc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008dd0:	ea41 0300 	orr.w	r3, r1, r0
 8008dd4:	ec43 2b10 	vmov	d0, r2, r3
 8008dd8:	4770      	bx	lr
	...

08008ddc <_init>:
 8008ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dde:	bf00      	nop
 8008de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008de2:	bc08      	pop	{r3}
 8008de4:	469e      	mov	lr, r3
 8008de6:	4770      	bx	lr

08008de8 <_fini>:
 8008de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dea:	bf00      	nop
 8008dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dee:	bc08      	pop	{r3}
 8008df0:	469e      	mov	lr, r3
 8008df2:	4770      	bx	lr
