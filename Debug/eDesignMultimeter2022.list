
eDesignMultimeter2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e8c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800702c  0800702c  0001702c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800712c  0800712c  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800712c  0800712c  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800712c  0800712c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800712c  0800712c  0001712c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007130  08007130  00017130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000080  080071b4  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  080071b4  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001322f  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021c0  00000000  00000000  000332df  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000eb8  00000000  00000000  000354a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000de0  00000000  00000000  00036358  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021ee0  00000000  00000000  00037138  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ea62  00000000  00000000  00059018  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3ea0  00000000  00000000  00067a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013b91a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004250  00000000  00000000  0013b998  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007014 	.word	0x08007014

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08007014 	.word	0x08007014

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <HAL_UART_RxCpltCallback>:
uint8_t measurement_mode = 0;
uint8_t display_state = 1; // Default of 1 is Measurement Display State
uint8_t output_active = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	message_received = 1;
 8000a74:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <HAL_UART_RxCpltCallback+0x1c>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	701a      	strb	r2, [r3, #0]
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	2000009c 	.word	0x2000009c

08000a8c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	80fb      	strh	r3, [r7, #6]
	last_ticks = HAL_GetTick();
 8000a96:	f001 f8b3 	bl	8001c00 <HAL_GetTick>
 8000a9a:	4602      	mov	r2, r0
 8000a9c:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <HAL_GPIO_EXTI_Callback+0x68>)
 8000a9e:	601a      	str	r2, [r3, #0]
	if(GPIO_Pin == btn_mid_Pin)
 8000aa0:	88fb      	ldrh	r3, [r7, #6]
 8000aa2:	2b40      	cmp	r3, #64	; 0x40
 8000aa4:	d103      	bne.n	8000aae <HAL_GPIO_EXTI_Callback+0x22>
	{
		btn_mid_flag = 1;
 8000aa6:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	701a      	strb	r2, [r3, #0]
	}
	else if(GPIO_Pin == btn_down_Pin)
	{
		btn_down_flag = 1;
	}
}
 8000aac:	e01d      	b.n	8000aea <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_right_Pin)
 8000aae:	88fb      	ldrh	r3, [r7, #6]
 8000ab0:	2b80      	cmp	r3, #128	; 0x80
 8000ab2:	d103      	bne.n	8000abc <HAL_GPIO_EXTI_Callback+0x30>
		btn_right_flag = 1;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	; (8000afc <HAL_GPIO_EXTI_Callback+0x70>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	701a      	strb	r2, [r3, #0]
}
 8000aba:	e016      	b.n	8000aea <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_up_Pin)
 8000abc:	88fb      	ldrh	r3, [r7, #6]
 8000abe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ac2:	d103      	bne.n	8000acc <HAL_GPIO_EXTI_Callback+0x40>
		btn_up_flag = 1;
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <HAL_GPIO_EXTI_Callback+0x74>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	701a      	strb	r2, [r3, #0]
}
 8000aca:	e00e      	b.n	8000aea <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_left_Pin)
 8000acc:	88fb      	ldrh	r3, [r7, #6]
 8000ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ad2:	d103      	bne.n	8000adc <HAL_GPIO_EXTI_Callback+0x50>
		btn_left_flag = 1;
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <HAL_GPIO_EXTI_Callback+0x78>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	701a      	strb	r2, [r3, #0]
}
 8000ada:	e006      	b.n	8000aea <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_down_Pin)
 8000adc:	88fb      	ldrh	r3, [r7, #6]
 8000ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ae2:	d102      	bne.n	8000aea <HAL_GPIO_EXTI_Callback+0x5e>
		btn_down_flag = 1;
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	701a      	strb	r2, [r3, #0]
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	200000a4 	.word	0x200000a4
 8000af8:	2000009d 	.word	0x2000009d
 8000afc:	2000009e 	.word	0x2000009e
 8000b00:	2000009f 	.word	0x2000009f
 8000b04:	200000a0 	.word	0x200000a0
 8000b08:	200000a1 	.word	0x200000a1
 8000b0c:	00000000 	.word	0x00000000

08000b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b10:	b590      	push	{r4, r7, lr}
 8000b12:	f6ad 0d6c 	subw	sp, sp, #2156	; 0x86c
 8000b16:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint16_t raw;
	uint16_t millivolts;
	char msg[100];
	uint16_t adc_array[1000];
	uint16_t adc_count = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	f8a7 385e 	strh.w	r3, [r7, #2142]	; 0x85e


	uint8_t rx_bytes[10] = {0};
 8000b1e:	463b      	mov	r3, r7
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	811a      	strh	r2, [r3, #8]
	uint8_t rx_bytes_counter = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	f887 385d 	strb.w	r3, [r7, #2141]	; 0x85d
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2e:	f001 f80d 	bl	8001b4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b32:	f000 fa15 	bl	8000f60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b36:	f000 fb3f 	bl	80011b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b3a:	f000 fb0d 	bl	8001158 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000b3e:	f000 fae5 	bl	800110c <MX_TIM16_Init>
  MX_ADC1_Init();
 8000b42:	f000 fa73 	bl	800102c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, std_num, 13, 10);
 8000b46:	230a      	movs	r3, #10
 8000b48:	220d      	movs	r2, #13
 8000b4a:	499d      	ldr	r1, [pc, #628]	; (8000dc0 <main+0x2b0>)
 8000b4c:	489d      	ldr	r0, [pc, #628]	; (8000dc4 <main+0x2b4>)
 8000b4e:	f004 fc0d 	bl	800536c <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 8000b52:	2201      	movs	r2, #1
 8000b54:	499c      	ldr	r1, [pc, #624]	; (8000dc8 <main+0x2b8>)
 8000b56:	489b      	ldr	r0, [pc, #620]	; (8000dc4 <main+0x2b4>)
 8000b58:	f004 fc9c 	bl	8005494 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 8000b5c:	489b      	ldr	r0, [pc, #620]	; (8000dcc <main+0x2bc>)
 8000b5e:	f004 f943 	bl	8004de8 <HAL_TIM_Base_Start_IT>


  // Set up the default state of the device
  display_state = changeDisplayState(1); // 1 == Measurement mode
 8000b62:	2001      	movs	r0, #1
 8000b64:	f000 fbf6 	bl	8001354 <changeDisplayState>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	4b98      	ldr	r3, [pc, #608]	; (8000dd0 <main+0x2c0>)
 8000b6e:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(message_received && rx_byte[0] != '\n')
 8000b70:	4b98      	ldr	r3, [pc, #608]	; (8000dd4 <main+0x2c4>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d03a      	beq.n	8000bee <main+0xde>
 8000b78:	4b93      	ldr	r3, [pc, #588]	; (8000dc8 <main+0x2b8>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b0a      	cmp	r3, #10
 8000b7e:	d036      	beq.n	8000bee <main+0xde>
	  {
		  rx_bytes[rx_bytes_counter] = rx_byte[0];
 8000b80:	f897 385d 	ldrb.w	r3, [r7, #2141]	; 0x85d
 8000b84:	4a90      	ldr	r2, [pc, #576]	; (8000dc8 <main+0x2b8>)
 8000b86:	7811      	ldrb	r1, [r2, #0]
 8000b88:	463a      	mov	r2, r7
 8000b8a:	54d1      	strb	r1, [r2, r3]
		  if(rx_bytes_counter == 0 && rx_byte[0] == '@'){
 8000b8c:	f897 385d 	ldrb.w	r3, [r7, #2141]	; 0x85d
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d109      	bne.n	8000ba8 <main+0x98>
 8000b94:	4b8c      	ldr	r3, [pc, #560]	; (8000dc8 <main+0x2b8>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b40      	cmp	r3, #64	; 0x40
 8000b9a:	d105      	bne.n	8000ba8 <main+0x98>
			  rx_bytes_counter++;
 8000b9c:	f897 385d 	ldrb.w	r3, [r7, #2141]	; 0x85d
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	f887 385d 	strb.w	r3, [r7, #2141]	; 0x85d
 8000ba6:	e01a      	b.n	8000bde <main+0xce>
		  } else if(rx_bytes_counter > 0){
 8000ba8:	f897 385d 	ldrb.w	r3, [r7, #2141]	; 0x85d
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d016      	beq.n	8000bde <main+0xce>
			  rx_bytes_counter++;
 8000bb0:	f897 385d 	ldrb.w	r3, [r7, #2141]	; 0x85d
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	f887 385d 	strb.w	r3, [r7, #2141]	; 0x85d
			  if(uartRxComplete(rx_byte[0]))
 8000bba:	4b83      	ldr	r3, [pc, #524]	; (8000dc8 <main+0x2b8>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 fc3a 	bl	8001438 <uartRxComplete>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d009      	beq.n	8000bde <main+0xce>
			  {
				  interpret_rx_message(rx_bytes, rx_bytes_counter);
 8000bca:	f897 285d 	ldrb.w	r2, [r7, #2141]	; 0x85d
 8000bce:	463b      	mov	r3, r7
 8000bd0:	4611      	mov	r1, r2
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 fc42 	bl	800145c <interpret_rx_message>
				  rx_bytes_counter = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f887 385d 	strb.w	r3, [r7, #2141]	; 0x85d
			  }
		  }
		  HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 8000bde:	2201      	movs	r2, #1
 8000be0:	4979      	ldr	r1, [pc, #484]	; (8000dc8 <main+0x2b8>)
 8000be2:	4878      	ldr	r0, [pc, #480]	; (8000dc4 <main+0x2b4>)
 8000be4:	f004 fc56 	bl	8005494 <HAL_UART_Receive_IT>
		  message_received = 0;
 8000be8:	4b7a      	ldr	r3, [pc, #488]	; (8000dd4 <main+0x2c4>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	701a      	strb	r2, [r3, #0]
	  }
	  if(btn_up_flag)
 8000bee:	4b7a      	ldr	r3, [pc, #488]	; (8000dd8 <main+0x2c8>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d010      	beq.n	8000c18 <main+0x108>
	  {
		  if(HAL_GetTick() - last_ticks >= 4)
 8000bf6:	f001 f803 	bl	8001c00 <HAL_GetTick>
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	4b77      	ldr	r3, [pc, #476]	; (8000ddc <main+0x2cc>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	2b03      	cmp	r3, #3
 8000c04:	d96d      	bls.n	8000ce2 <main+0x1d2>
		  {
			  if(HAL_GPIO_ReadPin(btn_up_GPIO_Port, btn_up_Pin))
 8000c06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c0a:	4875      	ldr	r0, [pc, #468]	; (8000de0 <main+0x2d0>)
 8000c0c:	f002 fcc8 	bl	80035a0 <HAL_GPIO_ReadPin>
			  {
//				  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
			  }
			  btn_up_flag = 0;
 8000c10:	4b71      	ldr	r3, [pc, #452]	; (8000dd8 <main+0x2c8>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	701a      	strb	r2, [r3, #0]
 8000c16:	e064      	b.n	8000ce2 <main+0x1d2>
		  }
	  }
	  else if(btn_left_flag)
 8000c18:	4b72      	ldr	r3, [pc, #456]	; (8000de4 <main+0x2d4>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d010      	beq.n	8000c42 <main+0x132>
	  {
		  if(HAL_GetTick() - last_ticks >= 4)
 8000c20:	f000 ffee 	bl	8001c00 <HAL_GetTick>
 8000c24:	4602      	mov	r2, r0
 8000c26:	4b6d      	ldr	r3, [pc, #436]	; (8000ddc <main+0x2cc>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	1ad3      	subs	r3, r2, r3
 8000c2c:	2b03      	cmp	r3, #3
 8000c2e:	d958      	bls.n	8000ce2 <main+0x1d2>
		  {
			  if(HAL_GPIO_ReadPin(btn_left_GPIO_Port, btn_left_Pin))
 8000c30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c34:	486a      	ldr	r0, [pc, #424]	; (8000de0 <main+0x2d0>)
 8000c36:	f002 fcb3 	bl	80035a0 <HAL_GPIO_ReadPin>
			  {
//				  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
			  }
			  btn_left_flag = 0;
 8000c3a:	4b6a      	ldr	r3, [pc, #424]	; (8000de4 <main+0x2d4>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
 8000c40:	e04f      	b.n	8000ce2 <main+0x1d2>
		  }
	  }
	  else if(btn_down_flag)
 8000c42:	4b69      	ldr	r3, [pc, #420]	; (8000de8 <main+0x2d8>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d010      	beq.n	8000c6c <main+0x15c>
	  {
		  if(HAL_GetTick() - last_ticks >= 4)
 8000c4a:	f000 ffd9 	bl	8001c00 <HAL_GetTick>
 8000c4e:	4602      	mov	r2, r0
 8000c50:	4b62      	ldr	r3, [pc, #392]	; (8000ddc <main+0x2cc>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	2b03      	cmp	r3, #3
 8000c58:	d943      	bls.n	8000ce2 <main+0x1d2>
		  {
			  if(HAL_GPIO_ReadPin(btn_down_GPIO_Port, btn_down_Pin))
 8000c5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c5e:	4860      	ldr	r0, [pc, #384]	; (8000de0 <main+0x2d0>)
 8000c60:	f002 fc9e 	bl	80035a0 <HAL_GPIO_ReadPin>
			  {
//				  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
			  }
			  btn_down_flag = 0;
 8000c64:	4b60      	ldr	r3, [pc, #384]	; (8000de8 <main+0x2d8>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	701a      	strb	r2, [r3, #0]
 8000c6a:	e03a      	b.n	8000ce2 <main+0x1d2>
		  }
	  }
	  else if(btn_right_flag)
 8000c6c:	4b5f      	ldr	r3, [pc, #380]	; (8000dec <main+0x2dc>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d010      	beq.n	8000c96 <main+0x186>
	  {
		  if(HAL_GetTick() - last_ticks >= 4)
 8000c74:	f000 ffc4 	bl	8001c00 <HAL_GetTick>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	4b58      	ldr	r3, [pc, #352]	; (8000ddc <main+0x2cc>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	2b03      	cmp	r3, #3
 8000c82:	d92e      	bls.n	8000ce2 <main+0x1d2>
		  {
			  if(HAL_GPIO_ReadPin(btn_right_GPIO_Port, btn_right_Pin))
 8000c84:	2180      	movs	r1, #128	; 0x80
 8000c86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8a:	f002 fc89 	bl	80035a0 <HAL_GPIO_ReadPin>
			  {
//				  HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
			  }
			  btn_right_flag = 0;
 8000c8e:	4b57      	ldr	r3, [pc, #348]	; (8000dec <main+0x2dc>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]
 8000c94:	e025      	b.n	8000ce2 <main+0x1d2>
		  }
	  }
	  else if(btn_mid_flag)
 8000c96:	4b56      	ldr	r3, [pc, #344]	; (8000df0 <main+0x2e0>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d021      	beq.n	8000ce2 <main+0x1d2>
	  {
		  if(HAL_GetTick() - last_ticks >= 4)
 8000c9e:	f000 ffaf 	bl	8001c00 <HAL_GetTick>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	4b4d      	ldr	r3, [pc, #308]	; (8000ddc <main+0x2cc>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	2b03      	cmp	r3, #3
 8000cac:	d919      	bls.n	8000ce2 <main+0x1d2>
		  {
			  if(HAL_GPIO_ReadPin(btn_mid_GPIO_Port, btn_mid_Pin))
 8000cae:	2140      	movs	r1, #64	; 0x40
 8000cb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb4:	f002 fc74 	bl	80035a0 <HAL_GPIO_ReadPin>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d00e      	beq.n	8000cdc <main+0x1cc>
			  {
				  // Toggle Menu Display state
				  if(display_state == 0){
 8000cbe:	4b44      	ldr	r3, [pc, #272]	; (8000dd0 <main+0x2c0>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d103      	bne.n	8000cce <main+0x1be>
					  changeDisplayState(1);
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	f000 fb44 	bl	8001354 <changeDisplayState>
 8000ccc:	e006      	b.n	8000cdc <main+0x1cc>
				  } else if(display_state == 1){
 8000cce:	4b40      	ldr	r3, [pc, #256]	; (8000dd0 <main+0x2c0>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d102      	bne.n	8000cdc <main+0x1cc>
					  changeDisplayState(0);
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f000 fb3c 	bl	8001354 <changeDisplayState>
				  }
//				  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
			  }
			  btn_mid_flag = 0;
 8000cdc:	4b44      	ldr	r3, [pc, #272]	; (8000df0 <main+0x2e0>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  // ADC TIM16 interrupt
	  if(adc_timer_flag)
 8000ce2:	4b44      	ldr	r3, [pc, #272]	; (8000df4 <main+0x2e4>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f43f af42 	beq.w	8000b70 <main+0x60>
	  {
		  if(adc_count > 999)
 8000cec:	f8b7 385e 	ldrh.w	r3, [r7, #2142]	; 0x85e
 8000cf0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cf4:	f0c0 80e4 	bcc.w	8000ec0 <main+0x3b0>
		  {
			  // Do calculations every 1000 readings
			  adc_count = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f8a7 385e 	strh.w	r3, [r7, #2142]	; 0x85e
			  uint32_t total = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	f8c7 3858 	str.w	r3, [r7, #2136]	; 0x858
			  uint16_t max = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f8a7 3856 	strh.w	r3, [r7, #2134]	; 0x856
			  uint16_t min = adc_array[99]; // arbitrary value
 8000d0a:	f107 030c 	add.w	r3, r7, #12
 8000d0e:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8000d12:	f8a7 3854 	strh.w	r3, [r7, #2132]	; 0x854
			  int16_t diff = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	f8a7 3842 	strh.w	r3, [r7, #2114]	; 0x842
			  int16_t prev_diff = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f8a7 3852 	strh.w	r3, [r7, #2130]	; 0x852
			  uint16_t mid_passes = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	f8a7 3850 	strh.w	r3, [r7, #2128]	; 0x850
			  // 1000 measurements at 5kHz take 200ms
			  for(int x = 0; x < 1000; x++)
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
 8000d2e:	e035      	b.n	8000d9c <main+0x28c>
			  {
				  total += adc_array[x];
 8000d30:	f107 030c 	add.w	r3, r7, #12
 8000d34:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8000d38:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	f8d7 3858 	ldr.w	r3, [r7, #2136]	; 0x858
 8000d42:	4413      	add	r3, r2
 8000d44:	f8c7 3858 	str.w	r3, [r7, #2136]	; 0x858
				  if(adc_array[x] > max)
 8000d48:	f107 030c 	add.w	r3, r7, #12
 8000d4c:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8000d50:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000d54:	f8b7 2856 	ldrh.w	r2, [r7, #2134]	; 0x856
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d208      	bcs.n	8000d6e <main+0x25e>
				  {
					  max = adc_array[x];
 8000d5c:	f107 030c 	add.w	r3, r7, #12
 8000d60:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8000d64:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000d68:	f8a7 3856 	strh.w	r3, [r7, #2134]	; 0x856
 8000d6c:	e011      	b.n	8000d92 <main+0x282>
				  }
				  else if(adc_array[x] < min)
 8000d6e:	f107 030c 	add.w	r3, r7, #12
 8000d72:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8000d76:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000d7a:	f8b7 2854 	ldrh.w	r2, [r7, #2132]	; 0x854
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d907      	bls.n	8000d92 <main+0x282>
				  {
					  min = adc_array[x];
 8000d82:	f107 030c 	add.w	r3, r7, #12
 8000d86:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8000d8a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000d8e:	f8a7 3854 	strh.w	r3, [r7, #2132]	; 0x854
			  for(int x = 0; x < 1000; x++)
 8000d92:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
 8000d96:	3301      	adds	r3, #1
 8000d98:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
 8000d9c:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
 8000da0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000da4:	dbc4      	blt.n	8000d30 <main+0x220>
				  }
			  }
			  offset = total/1000;
 8000da6:	f8d7 3858 	ldr.w	r3, [r7, #2136]	; 0x858
 8000daa:	4a13      	ldr	r2, [pc, #76]	; (8000df8 <main+0x2e8>)
 8000dac:	fba2 2303 	umull	r2, r3, r2, r3
 8000db0:	099b      	lsrs	r3, r3, #6
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <main+0x2ec>)
 8000db6:	801a      	strh	r2, [r3, #0]
			  for(int x = 0; x < 1000; x++)
 8000db8:	2300      	movs	r3, #0
 8000dba:	f8c7 3848 	str.w	r3, [r7, #2120]	; 0x848
 8000dbe:	e041      	b.n	8000e44 <main+0x334>
 8000dc0:	20000000 	.word	0x20000000
 8000dc4:	20000114 	.word	0x20000114
 8000dc8:	20000110 	.word	0x20000110
 8000dcc:	20000198 	.word	0x20000198
 8000dd0:	2000000d 	.word	0x2000000d
 8000dd4:	2000009c 	.word	0x2000009c
 8000dd8:	2000009f 	.word	0x2000009f
 8000ddc:	200000a4 	.word	0x200000a4
 8000de0:	48000400 	.word	0x48000400
 8000de4:	200000a0 	.word	0x200000a0
 8000de8:	200000a1 	.word	0x200000a1
 8000dec:	2000009e 	.word	0x2000009e
 8000df0:	2000009d 	.word	0x2000009d
 8000df4:	200000a2 	.word	0x200000a2
 8000df8:	10624dd3 	.word	0x10624dd3
 8000dfc:	200000ae 	.word	0x200000ae
			  {
				  // Calculate frequency
				  diff = adc_array[x] - offset;
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	f8d7 2848 	ldr.w	r2, [r7, #2120]	; 0x848
 8000e08:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000e0c:	4b4a      	ldr	r3, [pc, #296]	; (8000f38 <main+0x428>)
 8000e0e:	881b      	ldrh	r3, [r3, #0]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	f8a7 3842 	strh.w	r3, [r7, #2114]	; 0x842
				  if((diff * prev_diff) < 0)
 8000e18:	f9b7 3842 	ldrsh.w	r3, [r7, #2114]	; 0x842
 8000e1c:	f9b7 2852 	ldrsh.w	r2, [r7, #2130]	; 0x852
 8000e20:	fb02 f303 	mul.w	r3, r2, r3
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	da04      	bge.n	8000e32 <main+0x322>
				  {
					  mid_passes++;
 8000e28:	f8b7 3850 	ldrh.w	r3, [r7, #2128]	; 0x850
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	f8a7 3850 	strh.w	r3, [r7, #2128]	; 0x850
				  }
				  prev_diff = diff;
 8000e32:	f8b7 3842 	ldrh.w	r3, [r7, #2114]	; 0x842
 8000e36:	f8a7 3852 	strh.w	r3, [r7, #2130]	; 0x852
			  for(int x = 0; x < 1000; x++)
 8000e3a:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 8000e3e:	3301      	adds	r3, #1
 8000e40:	f8c7 3848 	str.w	r3, [r7, #2120]	; 0x848
 8000e44:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 8000e48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e4c:	dbd8      	blt.n	8000e00 <main+0x2f0>
			  }
			  period = 0.2/(0.5*mid_passes);
 8000e4e:	f8b7 3850 	ldrh.w	r3, [r7, #2128]	; 0x850
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fb6e 	bl	8000534 <__aeabi_i2d>
 8000e58:	f04f 0200 	mov.w	r2, #0
 8000e5c:	4b37      	ldr	r3, [pc, #220]	; (8000f3c <main+0x42c>)
 8000e5e:	f7ff fbd3 	bl	8000608 <__aeabi_dmul>
 8000e62:	4603      	mov	r3, r0
 8000e64:	460c      	mov	r4, r1
 8000e66:	461a      	mov	r2, r3
 8000e68:	4623      	mov	r3, r4
 8000e6a:	a131      	add	r1, pc, #196	; (adr r1, 8000f30 <main+0x420>)
 8000e6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e70:	f7ff fcf4 	bl	800085c <__aeabi_ddiv>
 8000e74:	4603      	mov	r3, r0
 8000e76:	460c      	mov	r4, r1
 8000e78:	4618      	mov	r0, r3
 8000e7a:	4621      	mov	r1, r4
 8000e7c:	f7ff fdd6 	bl	8000a2c <__aeabi_d2uiz>
 8000e80:	4603      	mov	r3, r0
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	4b2e      	ldr	r3, [pc, #184]	; (8000f40 <main+0x430>)
 8000e86:	801a      	strh	r2, [r3, #0]
//			  frequency = 1/period;
			  frequency = 5000;
 8000e88:	4b2e      	ldr	r3, [pc, #184]	; (8000f44 <main+0x434>)
 8000e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e8e:	801a      	strh	r2, [r3, #0]
			  amplitude = max - min;
 8000e90:	f8b7 2856 	ldrh.w	r2, [r7, #2134]	; 0x856
 8000e94:	f8b7 3854 	ldrh.w	r3, [r7, #2132]	; 0x854
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	4b2a      	ldr	r3, [pc, #168]	; (8000f48 <main+0x438>)
 8000e9e:	801a      	strh	r2, [r3, #0]
			  sprintf(msg, "Offset: %u\nMax: %u\nMin: %u\n \n", offset, max, min);
 8000ea0:	4b25      	ldr	r3, [pc, #148]	; (8000f38 <main+0x428>)
 8000ea2:	881b      	ldrh	r3, [r3, #0]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f8b7 2856 	ldrh.w	r2, [r7, #2134]	; 0x856
 8000eaa:	f8b7 3854 	ldrh.w	r3, [r7, #2132]	; 0x854
 8000eae:	f207 70dc 	addw	r0, r7, #2012	; 0x7dc
 8000eb2:	9300      	str	r3, [sp, #0]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	460a      	mov	r2, r1
 8000eb8:	4924      	ldr	r1, [pc, #144]	; (8000f4c <main+0x43c>)
 8000eba:	f005 fca5 	bl	8006808 <siprintf>
 8000ebe:	e02c      	b.n	8000f1a <main+0x40a>
//			  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 10);
		  }
		  else
		  {
			  HAL_ADC_Start(&hadc1);
 8000ec0:	4823      	ldr	r0, [pc, #140]	; (8000f50 <main+0x440>)
 8000ec2:	f001 f8a3 	bl	800200c <HAL_ADC_Start>
			  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000ec6:	f04f 31ff 	mov.w	r1, #4294967295
 8000eca:	4821      	ldr	r0, [pc, #132]	; (8000f50 <main+0x440>)
 8000ecc:	f001 f9ea 	bl	80022a4 <HAL_ADC_PollForConversion>
			  raw = HAL_ADC_GetValue(&hadc1);
 8000ed0:	481f      	ldr	r0, [pc, #124]	; (8000f50 <main+0x440>)
 8000ed2:	f001 fae9 	bl	80024a8 <HAL_ADC_GetValue>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	f8a7 3846 	strh.w	r3, [r7, #2118]	; 0x846
			  HAL_ADC_Stop(&hadc1);
 8000edc:	481c      	ldr	r0, [pc, #112]	; (8000f50 <main+0x440>)
 8000ede:	f001 f9ab 	bl	8002238 <HAL_ADC_Stop>
			  millivolts = raw*3300/4095;
 8000ee2:	f8b7 3846 	ldrh.w	r3, [r7, #2118]	; 0x846
 8000ee6:	f640 42e4 	movw	r2, #3300	; 0xce4
 8000eea:	fb02 f303 	mul.w	r3, r2, r3
 8000eee:	4a19      	ldr	r2, [pc, #100]	; (8000f54 <main+0x444>)
 8000ef0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ef4:	441a      	add	r2, r3
 8000ef6:	12d2      	asrs	r2, r2, #11
 8000ef8:	17db      	asrs	r3, r3, #31
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	f8a7 3844 	strh.w	r3, [r7, #2116]	; 0x844
			  adc_array[adc_count] = millivolts;
 8000f00:	f8b7 285e 	ldrh.w	r2, [r7, #2142]	; 0x85e
 8000f04:	f107 030c 	add.w	r3, r7, #12
 8000f08:	f8b7 1844 	ldrh.w	r1, [r7, #2116]	; 0x844
 8000f0c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			  adc_count++;
 8000f10:	f8b7 385e 	ldrh.w	r3, [r7, #2142]	; 0x85e
 8000f14:	3301      	adds	r3, #1
 8000f16:	f8a7 385e 	strh.w	r3, [r7, #2142]	; 0x85e
		  }

		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8000f1a:	2110      	movs	r1, #16
 8000f1c:	480e      	ldr	r0, [pc, #56]	; (8000f58 <main+0x448>)
 8000f1e:	f002 fb6f 	bl	8003600 <HAL_GPIO_TogglePin>
		  adc_timer_flag = 0;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <main+0x44c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
	  if(message_received && rx_byte[0] != '\n')
 8000f28:	e622      	b.n	8000b70 <main+0x60>
 8000f2a:	bf00      	nop
 8000f2c:	f3af 8000 	nop.w
 8000f30:	9999999a 	.word	0x9999999a
 8000f34:	3fc99999 	.word	0x3fc99999
 8000f38:	200000ae 	.word	0x200000ae
 8000f3c:	3fe00000 	.word	0x3fe00000
 8000f40:	200000ac 	.word	0x200000ac
 8000f44:	200000aa 	.word	0x200000aa
 8000f48:	200000a8 	.word	0x200000a8
 8000f4c:	0800702c 	.word	0x0800702c
 8000f50:	200000c0 	.word	0x200000c0
 8000f54:	80080081 	.word	0x80080081
 8000f58:	48000800 	.word	0x48000800
 8000f5c:	200000a2 	.word	0x200000a2

08000f60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b0a6      	sub	sp, #152	; 0x98
 8000f64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f66:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000f6a:	2228      	movs	r2, #40	; 0x28
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f005 fc42 	bl	80067f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f74:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	2258      	movs	r2, #88	; 0x58
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f005 fc34 	bl	80067f8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f90:	2302      	movs	r3, #2
 8000f92:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f94:	2301      	movs	r3, #1
 8000f96:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f98:	2310      	movs	r3, #16
 8000f9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fa8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fac:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fb0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f002 fb50 	bl	8003664 <HAL_RCC_OscConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000fca:	f000 fc1f 	bl	800180c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fce:	230f      	movs	r3, #15
 8000fd0:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fde:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fe4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000fe8:	2102      	movs	r1, #2
 8000fea:	4618      	mov	r0, r3
 8000fec:	f003 fa50 	bl	8004490 <HAL_RCC_ClockConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ff6:	f000 fc09 	bl	800180c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM16
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <SystemClock_Config+0xc8>)
 8000ffc:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001002:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001006:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8001008:	2300      	movs	r3, #0
 800100a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	4618      	mov	r0, r3
 8001010:	f003 fc74 	bl	80048fc <HAL_RCCEx_PeriphCLKConfig>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800101a:	f000 fbf7 	bl	800180c <Error_Handler>
  }
}
 800101e:	bf00      	nop
 8001020:	3798      	adds	r7, #152	; 0x98
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	00800082 	.word	0x00800082

0800102c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
 800104c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800104e:	4b2e      	ldr	r3, [pc, #184]	; (8001108 <MX_ADC1_Init+0xdc>)
 8001050:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001054:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001056:	4b2c      	ldr	r3, [pc, #176]	; (8001108 <MX_ADC1_Init+0xdc>)
 8001058:	2200      	movs	r2, #0
 800105a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800105c:	4b2a      	ldr	r3, [pc, #168]	; (8001108 <MX_ADC1_Init+0xdc>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001062:	4b29      	ldr	r3, [pc, #164]	; (8001108 <MX_ADC1_Init+0xdc>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001068:	4b27      	ldr	r3, [pc, #156]	; (8001108 <MX_ADC1_Init+0xdc>)
 800106a:	2200      	movs	r2, #0
 800106c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800106e:	4b26      	ldr	r3, [pc, #152]	; (8001108 <MX_ADC1_Init+0xdc>)
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001076:	4b24      	ldr	r3, [pc, #144]	; (8001108 <MX_ADC1_Init+0xdc>)
 8001078:	2200      	movs	r2, #0
 800107a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800107c:	4b22      	ldr	r3, [pc, #136]	; (8001108 <MX_ADC1_Init+0xdc>)
 800107e:	2201      	movs	r2, #1
 8001080:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001082:	4b21      	ldr	r3, [pc, #132]	; (8001108 <MX_ADC1_Init+0xdc>)
 8001084:	2200      	movs	r2, #0
 8001086:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001088:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <MX_ADC1_Init+0xdc>)
 800108a:	2201      	movs	r2, #1
 800108c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800108e:	4b1e      	ldr	r3, [pc, #120]	; (8001108 <MX_ADC1_Init+0xdc>)
 8001090:	2200      	movs	r2, #0
 8001092:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001096:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <MX_ADC1_Init+0xdc>)
 8001098:	2204      	movs	r2, #4
 800109a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800109c:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <MX_ADC1_Init+0xdc>)
 800109e:	2200      	movs	r2, #0
 80010a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80010a2:	4b19      	ldr	r3, [pc, #100]	; (8001108 <MX_ADC1_Init+0xdc>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010a8:	4817      	ldr	r0, [pc, #92]	; (8001108 <MX_ADC1_Init+0xdc>)
 80010aa:	f000 fdb5 	bl	8001c18 <HAL_ADC_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80010b4:	f000 fbaa 	bl	800180c <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010bc:	f107 031c 	add.w	r3, r7, #28
 80010c0:	4619      	mov	r1, r3
 80010c2:	4811      	ldr	r0, [pc, #68]	; (8001108 <MX_ADC1_Init+0xdc>)
 80010c4:	f001 fcea 	bl	8002a9c <HAL_ADCEx_MultiModeConfigChannel>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80010ce:	f000 fb9d 	bl	800180c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010d2:	2301      	movs	r3, #1
 80010d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010d6:	2301      	movs	r3, #1
 80010d8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	4619      	mov	r1, r3
 80010ee:	4806      	ldr	r0, [pc, #24]	; (8001108 <MX_ADC1_Init+0xdc>)
 80010f0:	f001 f9e8 	bl	80024c4 <HAL_ADC_ConfigChannel>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80010fa:	f000 fb87 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	3728      	adds	r7, #40	; 0x28
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200000c0 	.word	0x200000c0

0800110c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <MX_TIM16_Init+0x44>)
 8001112:	4a10      	ldr	r2, [pc, #64]	; (8001154 <MX_TIM16_Init+0x48>)
 8001114:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 72-1;
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <MX_TIM16_Init+0x44>)
 8001118:	2247      	movs	r2, #71	; 0x47
 800111a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <MX_TIM16_Init+0x44>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 200 - 1;
 8001122:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <MX_TIM16_Init+0x44>)
 8001124:	22c7      	movs	r2, #199	; 0xc7
 8001126:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <MX_TIM16_Init+0x44>)
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800112e:	4b08      	ldr	r3, [pc, #32]	; (8001150 <MX_TIM16_Init+0x44>)
 8001130:	2200      	movs	r2, #0
 8001132:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <MX_TIM16_Init+0x44>)
 8001136:	2200      	movs	r2, #0
 8001138:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <MX_TIM16_Init+0x44>)
 800113c:	f003 fdfc 	bl	8004d38 <HAL_TIM_Base_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8001146:	f000 fb61 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000198 	.word	0x20000198
 8001154:	40014400 	.word	0x40014400

08001158 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800115c:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <MX_USART2_UART_Init+0x58>)
 800115e:	4a15      	ldr	r2, [pc, #84]	; (80011b4 <MX_USART2_UART_Init+0x5c>)
 8001160:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001162:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <MX_USART2_UART_Init+0x58>)
 8001164:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001168:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_USART2_UART_Init+0x58>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_USART2_UART_Init+0x58>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_USART2_UART_Init+0x58>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_USART2_UART_Init+0x58>)
 800117e:	220c      	movs	r2, #12
 8001180:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <MX_USART2_UART_Init+0x58>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_USART2_UART_Init+0x58>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800118e:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <MX_USART2_UART_Init+0x58>)
 8001190:	2200      	movs	r2, #0
 8001192:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_USART2_UART_Init+0x58>)
 8001196:	2200      	movs	r2, #0
 8001198:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_USART2_UART_Init+0x58>)
 800119c:	f004 f898 	bl	80052d0 <HAL_UART_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011a6:	f000 fb31 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000114 	.word	0x20000114
 80011b4:	40004400 	.word	0x40004400

080011b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ce:	4b53      	ldr	r3, [pc, #332]	; (800131c <MX_GPIO_Init+0x164>)
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	4a52      	ldr	r2, [pc, #328]	; (800131c <MX_GPIO_Init+0x164>)
 80011d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011d8:	6153      	str	r3, [r2, #20]
 80011da:	4b50      	ldr	r3, [pc, #320]	; (800131c <MX_GPIO_Init+0x164>)
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011e6:	4b4d      	ldr	r3, [pc, #308]	; (800131c <MX_GPIO_Init+0x164>)
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	4a4c      	ldr	r2, [pc, #304]	; (800131c <MX_GPIO_Init+0x164>)
 80011ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011f0:	6153      	str	r3, [r2, #20]
 80011f2:	4b4a      	ldr	r3, [pc, #296]	; (800131c <MX_GPIO_Init+0x164>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	4b47      	ldr	r3, [pc, #284]	; (800131c <MX_GPIO_Init+0x164>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	4a46      	ldr	r2, [pc, #280]	; (800131c <MX_GPIO_Init+0x164>)
 8001204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001208:	6153      	str	r3, [r2, #20]
 800120a:	4b44      	ldr	r3, [pc, #272]	; (800131c <MX_GPIO_Init+0x164>)
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001216:	4b41      	ldr	r3, [pc, #260]	; (800131c <MX_GPIO_Init+0x164>)
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	4a40      	ldr	r2, [pc, #256]	; (800131c <MX_GPIO_Init+0x164>)
 800121c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001220:	6153      	str	r3, [r2, #20]
 8001222:	4b3e      	ldr	r3, [pc, #248]	; (800131c <MX_GPIO_Init+0x164>)
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD5_Pin|LD4_Pin, GPIO_PIN_RESET);
 800122e:	2200      	movs	r2, #0
 8001230:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8001234:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001238:	f002 f9ca 	bl	80035d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|LD3_Pin, GPIO_PIN_RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	2190      	movs	r1, #144	; 0x90
 8001240:	4837      	ldr	r0, [pc, #220]	; (8001320 <MX_GPIO_Init+0x168>)
 8001242:	f002 f9c5 	bl	80035d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001246:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800124a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800124c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	4619      	mov	r1, r3
 800125c:	4830      	ldr	r0, [pc, #192]	; (8001320 <MX_GPIO_Init+0x168>)
 800125e:	f002 f815 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD5_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD5_Pin|LD4_Pin;
 8001262:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 8001266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001268:	2301      	movs	r3, #1
 800126a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001270:	2300      	movs	r3, #0
 8001272:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	4619      	mov	r1, r3
 800127a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800127e:	f002 f805 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_mid_Pin */
  GPIO_InitStruct.Pin = btn_mid_Pin;
 8001282:	2340      	movs	r3, #64	; 0x40
 8001284:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001286:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800128a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800128c:	2301      	movs	r3, #1
 800128e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn_mid_GPIO_Port, &GPIO_InitStruct);
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	4619      	mov	r1, r3
 8001296:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800129a:	f001 fff7 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_right_Pin */
  GPIO_InitStruct.Pin = btn_right_Pin;
 800129e:	2380      	movs	r3, #128	; 0x80
 80012a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012a8:	2301      	movs	r3, #1
 80012aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn_right_GPIO_Port, &GPIO_InitStruct);
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4619      	mov	r1, r3
 80012b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b6:	f001 ffe9 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD3_Pin;
 80012ba:	2390      	movs	r3, #144	; 0x90
 80012bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012be:	2301      	movs	r3, #1
 80012c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4619      	mov	r1, r3
 80012d0:	4813      	ldr	r0, [pc, #76]	; (8001320 <MX_GPIO_Init+0x168>)
 80012d2:	f001 ffdb 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : btn_down_Pin btn_left_Pin btn_up_Pin */
  GPIO_InitStruct.Pin = btn_down_Pin|btn_left_Pin|btn_up_Pin;
 80012d6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80012da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012dc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012e2:	2301      	movs	r3, #1
 80012e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4619      	mov	r1, r3
 80012ec:	480d      	ldr	r0, [pc, #52]	; (8001324 <MX_GPIO_Init+0x16c>)
 80012ee:	f001 ffcd 	bl	800328c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	2017      	movs	r0, #23
 80012f8:	f001 ff1b 	bl	8003132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012fc:	2017      	movs	r0, #23
 80012fe:	f001 ff34 	bl	800316a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	2028      	movs	r0, #40	; 0x28
 8001308:	f001 ff13 	bl	8003132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800130c:	2028      	movs	r0, #40	; 0x28
 800130e:	f001 ff2c 	bl	800316a <HAL_NVIC_EnableIRQ>

}
 8001312:	bf00      	nop
 8001314:	3728      	adds	r7, #40	; 0x28
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40021000 	.word	0x40021000
 8001320:	48000800 	.word	0x48000800
 8001324:	48000400 	.word	0x48000400

08001328 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this interrupt
	if(htim == &htim16)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a06      	ldr	r2, [pc, #24]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d102      	bne.n	800133e <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		adc_timer_flag = 1;
 8001338:	4b05      	ldr	r3, [pc, #20]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800133a:	2201      	movs	r2, #1
 800133c:	701a      	strb	r2, [r3, #0]
	}
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	20000198 	.word	0x20000198
 8001350:	200000a2 	.word	0x200000a2

08001354 <changeDisplayState>:

uint8_t changeDisplayState(uint8_t code)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
	if (code == 0)
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d11d      	bne.n	80013a0 <changeDisplayState+0x4c>
	{
		// Change to Menu Display State
		display_state = 0;
 8001364:	4b32      	ldr	r3, [pc, #200]	; (8001430 <changeDisplayState+0xdc>)
 8001366:	2200      	movs	r2, #0
 8001368:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800136a:	2201      	movs	r2, #1
 800136c:	2120      	movs	r1, #32
 800136e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001372:	f002 f92d 	bl	80035d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	2180      	movs	r1, #128	; 0x80
 800137a:	482e      	ldr	r0, [pc, #184]	; (8001434 <changeDisplayState+0xe0>)
 800137c:	f002 f928 	bl	80035d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138a:	f002 f921 	bl	80035d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 800138e:	2200      	movs	r2, #0
 8001390:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001394:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001398:	f002 f91a 	bl	80035d0 <HAL_GPIO_WritePin>
		return 0;
 800139c:	2300      	movs	r3, #0
 800139e:	e042      	b.n	8001426 <changeDisplayState+0xd2>
	}
	else if (code == 1)
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d11d      	bne.n	80013e2 <changeDisplayState+0x8e>
	{
		// Change to Measurement Display State
		display_state = 1;
 80013a6:	4b22      	ldr	r3, [pc, #136]	; (8001430 <changeDisplayState+0xdc>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2120      	movs	r1, #32
 80013b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b4:	f002 f90c 	bl	80035d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80013b8:	2201      	movs	r2, #1
 80013ba:	2180      	movs	r1, #128	; 0x80
 80013bc:	481d      	ldr	r0, [pc, #116]	; (8001434 <changeDisplayState+0xe0>)
 80013be:	f002 f907 	bl	80035d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013cc:	f002 f900 	bl	80035d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 80013d0:	2200      	movs	r2, #0
 80013d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013da:	f002 f8f9 	bl	80035d0 <HAL_GPIO_WritePin>
		return 1;
 80013de:	2301      	movs	r3, #1
 80013e0:	e021      	b.n	8001426 <changeDisplayState+0xd2>
	}
	else if (code == 2)
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d11d      	bne.n	8001424 <changeDisplayState+0xd0>
	{
		// Change to Output Display State
		display_state = 2;
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <changeDisplayState+0xdc>)
 80013ea:	2202      	movs	r2, #2
 80013ec:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2120      	movs	r1, #32
 80013f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f6:	f002 f8eb 	bl	80035d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2180      	movs	r1, #128	; 0x80
 80013fe:	480d      	ldr	r0, [pc, #52]	; (8001434 <changeDisplayState+0xe0>)
 8001400:	f002 f8e6 	bl	80035d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8001404:	2201      	movs	r2, #1
 8001406:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800140a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140e:	f002 f8df 	bl	80035d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001418:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141c:	f002 f8d8 	bl	80035d0 <HAL_GPIO_WritePin>
		return 2;
 8001420:	2302      	movs	r3, #2
 8001422:	e000      	b.n	8001426 <changeDisplayState+0xd2>
	}
	else
	{
		// An error has occurred
		return 3;
 8001424:	2303      	movs	r3, #3
	}
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	2000000d 	.word	0x2000000d
 8001434:	48000800 	.word	0x48000800

08001438 <uartRxComplete>:

bool uartRxComplete(uint8_t last_byte)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
	if(last_byte == '!')
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	2b21      	cmp	r3, #33	; 0x21
 8001446:	d101      	bne.n	800144c <uartRxComplete+0x14>
	{
		return true;
 8001448:	2301      	movs	r3, #1
 800144a:	e000      	b.n	800144e <uartRxComplete+0x16>
	}
	else
	{
		return false;
 800144c:	2300      	movs	r3, #0
	}
}
 800144e:	4618      	mov	r0, r3
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
	...

0800145c <interpret_rx_message>:

void interpret_rx_message(uint8_t *rx_array, uint8_t length)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	70fb      	strb	r3, [r7, #3]

//	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);

	if(length > 7)
 8001468:	78fb      	ldrb	r3, [r7, #3]
 800146a:	2b07      	cmp	r3, #7
 800146c:	d957      	bls.n	800151e <interpret_rx_message+0xc2>
	{
		if(rx_array[2] == '*')
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3302      	adds	r3, #2
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b2a      	cmp	r3, #42	; 0x2a
 8001476:	d115      	bne.n	80014a4 <interpret_rx_message+0x48>
		{
			// Requests
//			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
			switch(rx_array[4])
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3304      	adds	r3, #4
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b6d      	cmp	r3, #109	; 0x6d
 8001480:	d002      	beq.n	8001488 <interpret_rx_message+0x2c>
 8001482:	2b73      	cmp	r3, #115	; 0x73
 8001484:	d007      	beq.n	8001496 <interpret_rx_message+0x3a>
					request_status(rx_array[6]);
					break;

				default:
					// Problems
					break;
 8001486:	e04a      	b.n	800151e <interpret_rx_message+0xc2>
					request_measurement(rx_array[6]);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3306      	adds	r3, #6
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f000 f84c 	bl	800152c <request_measurement>
					break;
 8001494:	e043      	b.n	800151e <interpret_rx_message+0xc2>
					request_status(rx_array[6]);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3306      	adds	r3, #6
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f000 f8e3 	bl	8001668 <request_status>
					break;
 80014a2:	e03c      	b.n	800151e <interpret_rx_message+0xc2>
			}
		}
		else if(rx_array[2] == '$')
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3302      	adds	r3, #2
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b24      	cmp	r3, #36	; 0x24
 80014ac:	d137      	bne.n	800151e <interpret_rx_message+0xc2>
		{
			// Set
//			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
			uint8_t key1 = rx_array[4];
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	791b      	ldrb	r3, [r3, #4]
 80014b2:	73fb      	strb	r3, [r7, #15]
			uint8_t key2 = rx_array[5];
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	795b      	ldrb	r3, [r3, #5]
 80014b8:	73bb      	strb	r3, [r7, #14]
			if(key1 == 'D' && key2 == 'V'){
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
 80014bc:	2b44      	cmp	r3, #68	; 0x44
 80014be:	d106      	bne.n	80014ce <interpret_rx_message+0x72>
 80014c0:	7bbb      	ldrb	r3, [r7, #14]
 80014c2:	2b56      	cmp	r3, #86	; 0x56
 80014c4:	d103      	bne.n	80014ce <interpret_rx_message+0x72>
				// DC Voltage
				measurement_mode = 0;
 80014c6:	4b18      	ldr	r3, [pc, #96]	; (8001528 <interpret_rx_message+0xcc>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	701a      	strb	r2, [r3, #0]
 80014cc:	e027      	b.n	800151e <interpret_rx_message+0xc2>
			} else if (key1 == 'A' && key2 == 'V'){
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	2b41      	cmp	r3, #65	; 0x41
 80014d2:	d106      	bne.n	80014e2 <interpret_rx_message+0x86>
 80014d4:	7bbb      	ldrb	r3, [r7, #14]
 80014d6:	2b56      	cmp	r3, #86	; 0x56
 80014d8:	d103      	bne.n	80014e2 <interpret_rx_message+0x86>
				// AC Voltage
				measurement_mode = 1;
 80014da:	4b13      	ldr	r3, [pc, #76]	; (8001528 <interpret_rx_message+0xcc>)
 80014dc:	2201      	movs	r2, #1
 80014de:	701a      	strb	r2, [r3, #0]
 80014e0:	e01d      	b.n	800151e <interpret_rx_message+0xc2>
			} else if (key1 == 'D' && key2 == 'I'){
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	2b44      	cmp	r3, #68	; 0x44
 80014e6:	d106      	bne.n	80014f6 <interpret_rx_message+0x9a>
 80014e8:	7bbb      	ldrb	r3, [r7, #14]
 80014ea:	2b49      	cmp	r3, #73	; 0x49
 80014ec:	d103      	bne.n	80014f6 <interpret_rx_message+0x9a>
				// DC Current
				measurement_mode = 2;
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <interpret_rx_message+0xcc>)
 80014f0:	2202      	movs	r2, #2
 80014f2:	701a      	strb	r2, [r3, #0]
 80014f4:	e013      	b.n	800151e <interpret_rx_message+0xc2>
			} else if (key1 == 'A' && key2 == 'I'){
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
 80014f8:	2b41      	cmp	r3, #65	; 0x41
 80014fa:	d106      	bne.n	800150a <interpret_rx_message+0xae>
 80014fc:	7bbb      	ldrb	r3, [r7, #14]
 80014fe:	2b49      	cmp	r3, #73	; 0x49
 8001500:	d103      	bne.n	800150a <interpret_rx_message+0xae>
				// AC Current
				measurement_mode = 3;
 8001502:	4b09      	ldr	r3, [pc, #36]	; (8001528 <interpret_rx_message+0xcc>)
 8001504:	2203      	movs	r2, #3
 8001506:	701a      	strb	r2, [r3, #0]
 8001508:	e009      	b.n	800151e <interpret_rx_message+0xc2>
			} else if (key1 == 'T' && key2 == 'C'){
 800150a:	7bfb      	ldrb	r3, [r7, #15]
 800150c:	2b54      	cmp	r3, #84	; 0x54
 800150e:	d106      	bne.n	800151e <interpret_rx_message+0xc2>
 8001510:	7bbb      	ldrb	r3, [r7, #14]
 8001512:	2b43      	cmp	r3, #67	; 0x43
 8001514:	d103      	bne.n	800151e <interpret_rx_message+0xc2>
				// Temperature
				measurement_mode = 4;
 8001516:	4b04      	ldr	r3, [pc, #16]	; (8001528 <interpret_rx_message+0xcc>)
 8001518:	2204      	movs	r2, #4
 800151a:	701a      	strb	r2, [r3, #0]
		else
		{
//			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
		}
	}
}
 800151c:	e7ff      	b.n	800151e <interpret_rx_message+0xc2>
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200000b0 	.word	0x200000b0

0800152c <request_measurement>:

void request_measurement(uint8_t parameter)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	71fb      	strb	r3, [r7, #7]
	char msg[20];
	switch(parameter){
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	3b61      	subs	r3, #97	; 0x61
 800153a:	2b13      	cmp	r3, #19
 800153c:	d87e      	bhi.n	800163c <request_measurement+0x110>
 800153e:	a201      	add	r2, pc, #4	; (adr r2, 8001544 <request_measurement+0x18>)
 8001540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001544:	08001595 	.word	0x08001595
 8001548:	0800163d 	.word	0x0800163d
 800154c:	0800163d 	.word	0x0800163d
 8001550:	0800163d 	.word	0x0800163d
 8001554:	0800163d 	.word	0x0800163d
 8001558:	08001605 	.word	0x08001605
 800155c:	0800163d 	.word	0x0800163d
 8001560:	0800163d 	.word	0x0800163d
 8001564:	0800163d 	.word	0x0800163d
 8001568:	0800163d 	.word	0x0800163d
 800156c:	0800163d 	.word	0x0800163d
 8001570:	0800163d 	.word	0x0800163d
 8001574:	0800163d 	.word	0x0800163d
 8001578:	0800163d 	.word	0x0800163d
 800157c:	080015cd 	.word	0x080015cd
 8001580:	0800163d 	.word	0x0800163d
 8001584:	0800163d 	.word	0x0800163d
 8001588:	0800163d 	.word	0x0800163d
 800158c:	0800163d 	.word	0x0800163d
 8001590:	0800163d 	.word	0x0800163d
		case 't':
			// Type
			break;
		case 'a':
			// Amplitude (peak-to-peak)
			sprintf(msg, "@,m,a,%u,!\n", amplitude);
 8001594:	4b2c      	ldr	r3, [pc, #176]	; (8001648 <request_measurement+0x11c>)
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	f107 030c 	add.w	r3, r7, #12
 800159e:	492b      	ldr	r1, [pc, #172]	; (800164c <request_measurement+0x120>)
 80015a0:	4618      	mov	r0, r3
 80015a2:	f005 f931 	bl	8006808 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 10);
 80015a6:	f107 030c 	add.w	r3, r7, #12
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe fe18 	bl	80001e0 <strlen>
 80015b0:	4603      	mov	r3, r0
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	f107 010c 	add.w	r1, r7, #12
 80015b8:	230a      	movs	r3, #10
 80015ba:	4825      	ldr	r0, [pc, #148]	; (8001650 <request_measurement+0x124>)
 80015bc:	f003 fed6 	bl	800536c <HAL_UART_Transmit>
			HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 80015c0:	2201      	movs	r2, #1
 80015c2:	4924      	ldr	r1, [pc, #144]	; (8001654 <request_measurement+0x128>)
 80015c4:	4822      	ldr	r0, [pc, #136]	; (8001650 <request_measurement+0x124>)
 80015c6:	f003 ff65 	bl	8005494 <HAL_UART_Receive_IT>
			break;
 80015ca:	e038      	b.n	800163e <request_measurement+0x112>
		case 'o':
			// Offset
			sprintf(msg, "@,m,o,%u,!\n", offset);
 80015cc:	4b22      	ldr	r3, [pc, #136]	; (8001658 <request_measurement+0x12c>)
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	461a      	mov	r2, r3
 80015d2:	f107 030c 	add.w	r3, r7, #12
 80015d6:	4921      	ldr	r1, [pc, #132]	; (800165c <request_measurement+0x130>)
 80015d8:	4618      	mov	r0, r3
 80015da:	f005 f915 	bl	8006808 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 10);
 80015de:	f107 030c 	add.w	r3, r7, #12
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7fe fdfc 	bl	80001e0 <strlen>
 80015e8:	4603      	mov	r3, r0
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	f107 010c 	add.w	r1, r7, #12
 80015f0:	230a      	movs	r3, #10
 80015f2:	4817      	ldr	r0, [pc, #92]	; (8001650 <request_measurement+0x124>)
 80015f4:	f003 feba 	bl	800536c <HAL_UART_Transmit>
			HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 80015f8:	2201      	movs	r2, #1
 80015fa:	4916      	ldr	r1, [pc, #88]	; (8001654 <request_measurement+0x128>)
 80015fc:	4814      	ldr	r0, [pc, #80]	; (8001650 <request_measurement+0x124>)
 80015fe:	f003 ff49 	bl	8005494 <HAL_UART_Receive_IT>
			break;
 8001602:	e01c      	b.n	800163e <request_measurement+0x112>
		case 'f':
			// Frequency
			sprintf(msg, "@,m,f,%u,!\n", frequency);
 8001604:	4b16      	ldr	r3, [pc, #88]	; (8001660 <request_measurement+0x134>)
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	4915      	ldr	r1, [pc, #84]	; (8001664 <request_measurement+0x138>)
 8001610:	4618      	mov	r0, r3
 8001612:	f005 f8f9 	bl	8006808 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 10);
 8001616:	f107 030c 	add.w	r3, r7, #12
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe fde0 	bl	80001e0 <strlen>
 8001620:	4603      	mov	r3, r0
 8001622:	b29a      	uxth	r2, r3
 8001624:	f107 010c 	add.w	r1, r7, #12
 8001628:	230a      	movs	r3, #10
 800162a:	4809      	ldr	r0, [pc, #36]	; (8001650 <request_measurement+0x124>)
 800162c:	f003 fe9e 	bl	800536c <HAL_UART_Transmit>
			HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 8001630:	2201      	movs	r2, #1
 8001632:	4908      	ldr	r1, [pc, #32]	; (8001654 <request_measurement+0x128>)
 8001634:	4806      	ldr	r0, [pc, #24]	; (8001650 <request_measurement+0x124>)
 8001636:	f003 ff2d 	bl	8005494 <HAL_UART_Receive_IT>
			break;
 800163a:	e000      	b.n	800163e <request_measurement+0x112>
		case 'c':
			// Temperature
			break;
		default:
			// Problems
			break;
 800163c:	bf00      	nop
	}
}
 800163e:	bf00      	nop
 8001640:	3720      	adds	r7, #32
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200000a8 	.word	0x200000a8
 800164c:	0800704c 	.word	0x0800704c
 8001650:	20000114 	.word	0x20000114
 8001654:	20000110 	.word	0x20000110
 8001658:	200000ae 	.word	0x200000ae
 800165c:	08007058 	.word	0x08007058
 8001660:	200000aa 	.word	0x200000aa
 8001664:	08007064 	.word	0x08007064

08001668 <request_status>:

void request_status(uint8_t output)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b088      	sub	sp, #32
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
	char msg[20];
	if(output == '1')
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	2b31      	cmp	r3, #49	; 0x31
 8001676:	d158      	bne.n	800172a <request_status+0xc2>
	{
		// Output On
		output_active = 1;
 8001678:	4b5b      	ldr	r3, [pc, #364]	; (80017e8 <request_status+0x180>)
 800167a:	2201      	movs	r2, #1
 800167c:	701a      	strb	r2, [r3, #0]
		switch(measurement_mode){
 800167e:	4b5b      	ldr	r3, [pc, #364]	; (80017ec <request_status+0x184>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b04      	cmp	r3, #4
 8001684:	d83e      	bhi.n	8001704 <request_status+0x9c>
 8001686:	a201      	add	r2, pc, #4	; (adr r2, 800168c <request_status+0x24>)
 8001688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168c:	080016a1 	.word	0x080016a1
 8001690:	080016b5 	.word	0x080016b5
 8001694:	080016c9 	.word	0x080016c9
 8001698:	080016dd 	.word	0x080016dd
 800169c:	080016f1 	.word	0x080016f1
			case 0:
				// DV
				sprintf(msg, "@,DV,p,%u,!\n", output_active);
 80016a0:	4b51      	ldr	r3, [pc, #324]	; (80017e8 <request_status+0x180>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	f107 030c 	add.w	r3, r7, #12
 80016aa:	4951      	ldr	r1, [pc, #324]	; (80017f0 <request_status+0x188>)
 80016ac:	4618      	mov	r0, r3
 80016ae:	f005 f8ab 	bl	8006808 <siprintf>
				break;
 80016b2:	e027      	b.n	8001704 <request_status+0x9c>
			case 1:
				// AV
				sprintf(msg, "@,AV,p,%u,!\n", output_active);
 80016b4:	4b4c      	ldr	r3, [pc, #304]	; (80017e8 <request_status+0x180>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	461a      	mov	r2, r3
 80016ba:	f107 030c 	add.w	r3, r7, #12
 80016be:	494d      	ldr	r1, [pc, #308]	; (80017f4 <request_status+0x18c>)
 80016c0:	4618      	mov	r0, r3
 80016c2:	f005 f8a1 	bl	8006808 <siprintf>
				break;
 80016c6:	e01d      	b.n	8001704 <request_status+0x9c>
			case 2:
				// DI
				sprintf(msg, "@,DI,p,%u,!\n", output_active);
 80016c8:	4b47      	ldr	r3, [pc, #284]	; (80017e8 <request_status+0x180>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	f107 030c 	add.w	r3, r7, #12
 80016d2:	4949      	ldr	r1, [pc, #292]	; (80017f8 <request_status+0x190>)
 80016d4:	4618      	mov	r0, r3
 80016d6:	f005 f897 	bl	8006808 <siprintf>
				break;
 80016da:	e013      	b.n	8001704 <request_status+0x9c>
			case 3:
				// AI
				sprintf(msg, "@,AI,p,%u,!\n", output_active);
 80016dc:	4b42      	ldr	r3, [pc, #264]	; (80017e8 <request_status+0x180>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	f107 030c 	add.w	r3, r7, #12
 80016e6:	4945      	ldr	r1, [pc, #276]	; (80017fc <request_status+0x194>)
 80016e8:	4618      	mov	r0, r3
 80016ea:	f005 f88d 	bl	8006808 <siprintf>
				break;
 80016ee:	e009      	b.n	8001704 <request_status+0x9c>
			case 4:
				// TC
				sprintf(msg, "@,TC,p,%u,!\n", output_active);
 80016f0:	4b3d      	ldr	r3, [pc, #244]	; (80017e8 <request_status+0x180>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	f107 030c 	add.w	r3, r7, #12
 80016fa:	4941      	ldr	r1, [pc, #260]	; (8001800 <request_status+0x198>)
 80016fc:	4618      	mov	r0, r3
 80016fe:	f005 f883 	bl	8006808 <siprintf>
				break;
 8001702:	bf00      	nop
		}
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 10);
 8001704:	f107 030c 	add.w	r3, r7, #12
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe fd69 	bl	80001e0 <strlen>
 800170e:	4603      	mov	r3, r0
 8001710:	b29a      	uxth	r2, r3
 8001712:	f107 010c 	add.w	r1, r7, #12
 8001716:	230a      	movs	r3, #10
 8001718:	483a      	ldr	r0, [pc, #232]	; (8001804 <request_status+0x19c>)
 800171a:	f003 fe27 	bl	800536c <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 800171e:	2201      	movs	r2, #1
 8001720:	4939      	ldr	r1, [pc, #228]	; (8001808 <request_status+0x1a0>)
 8001722:	4838      	ldr	r0, [pc, #224]	; (8001804 <request_status+0x19c>)
 8001724:	f003 feb6 	bl	8005494 <HAL_UART_Receive_IT>
		}
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 10);
		HAL_UART_Receive_IT(&huart2, rx_byte, 1);
	}

}
 8001728:	e05a      	b.n	80017e0 <request_status+0x178>
	else if (output == '0')
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	2b30      	cmp	r3, #48	; 0x30
 800172e:	d157      	bne.n	80017e0 <request_status+0x178>
		output_active = 0;
 8001730:	4b2d      	ldr	r3, [pc, #180]	; (80017e8 <request_status+0x180>)
 8001732:	2200      	movs	r2, #0
 8001734:	701a      	strb	r2, [r3, #0]
		switch(measurement_mode){
 8001736:	4b2d      	ldr	r3, [pc, #180]	; (80017ec <request_status+0x184>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b04      	cmp	r3, #4
 800173c:	d83e      	bhi.n	80017bc <request_status+0x154>
 800173e:	a201      	add	r2, pc, #4	; (adr r2, 8001744 <request_status+0xdc>)
 8001740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001744:	08001759 	.word	0x08001759
 8001748:	0800176d 	.word	0x0800176d
 800174c:	08001781 	.word	0x08001781
 8001750:	08001795 	.word	0x08001795
 8001754:	080017a9 	.word	0x080017a9
				sprintf(msg, "@,DV,p,%u,!\n", output_active);
 8001758:	4b23      	ldr	r3, [pc, #140]	; (80017e8 <request_status+0x180>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	f107 030c 	add.w	r3, r7, #12
 8001762:	4923      	ldr	r1, [pc, #140]	; (80017f0 <request_status+0x188>)
 8001764:	4618      	mov	r0, r3
 8001766:	f005 f84f 	bl	8006808 <siprintf>
				break;
 800176a:	e027      	b.n	80017bc <request_status+0x154>
				sprintf(msg, "@,AV,p,%u,!\n", output_active);
 800176c:	4b1e      	ldr	r3, [pc, #120]	; (80017e8 <request_status+0x180>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	f107 030c 	add.w	r3, r7, #12
 8001776:	491f      	ldr	r1, [pc, #124]	; (80017f4 <request_status+0x18c>)
 8001778:	4618      	mov	r0, r3
 800177a:	f005 f845 	bl	8006808 <siprintf>
				break;
 800177e:	e01d      	b.n	80017bc <request_status+0x154>
				sprintf(msg, "@,DI,p,%u,!\n", output_active);
 8001780:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <request_status+0x180>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	f107 030c 	add.w	r3, r7, #12
 800178a:	491b      	ldr	r1, [pc, #108]	; (80017f8 <request_status+0x190>)
 800178c:	4618      	mov	r0, r3
 800178e:	f005 f83b 	bl	8006808 <siprintf>
				break;
 8001792:	e013      	b.n	80017bc <request_status+0x154>
				sprintf(msg, "@,AI,p,%u,!\n", output_active);
 8001794:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <request_status+0x180>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	461a      	mov	r2, r3
 800179a:	f107 030c 	add.w	r3, r7, #12
 800179e:	4917      	ldr	r1, [pc, #92]	; (80017fc <request_status+0x194>)
 80017a0:	4618      	mov	r0, r3
 80017a2:	f005 f831 	bl	8006808 <siprintf>
				break;
 80017a6:	e009      	b.n	80017bc <request_status+0x154>
				sprintf(msg, "@,TC,p,%u,!\n", output_active);
 80017a8:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <request_status+0x180>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	461a      	mov	r2, r3
 80017ae:	f107 030c 	add.w	r3, r7, #12
 80017b2:	4913      	ldr	r1, [pc, #76]	; (8001800 <request_status+0x198>)
 80017b4:	4618      	mov	r0, r3
 80017b6:	f005 f827 	bl	8006808 <siprintf>
				break;
 80017ba:	bf00      	nop
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 10);
 80017bc:	f107 030c 	add.w	r3, r7, #12
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe fd0d 	bl	80001e0 <strlen>
 80017c6:	4603      	mov	r3, r0
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	f107 010c 	add.w	r1, r7, #12
 80017ce:	230a      	movs	r3, #10
 80017d0:	480c      	ldr	r0, [pc, #48]	; (8001804 <request_status+0x19c>)
 80017d2:	f003 fdcb 	bl	800536c <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 80017d6:	2201      	movs	r2, #1
 80017d8:	490b      	ldr	r1, [pc, #44]	; (8001808 <request_status+0x1a0>)
 80017da:	480a      	ldr	r0, [pc, #40]	; (8001804 <request_status+0x19c>)
 80017dc:	f003 fe5a 	bl	8005494 <HAL_UART_Receive_IT>
}
 80017e0:	bf00      	nop
 80017e2:	3720      	adds	r7, #32
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	200000b1 	.word	0x200000b1
 80017ec:	200000b0 	.word	0x200000b0
 80017f0:	08007070 	.word	0x08007070
 80017f4:	08007080 	.word	0x08007080
 80017f8:	08007090 	.word	0x08007090
 80017fc:	080070a0 	.word	0x080070a0
 8001800:	080070b0 	.word	0x080070b0
 8001804:	20000114 	.word	0x20000114
 8001808:	20000110 	.word	0x20000110

0800180c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001822:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <HAL_MspInit+0x44>)
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	4a0e      	ldr	r2, [pc, #56]	; (8001860 <HAL_MspInit+0x44>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6193      	str	r3, [r2, #24]
 800182e:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <HAL_MspInit+0x44>)
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <HAL_MspInit+0x44>)
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	4a08      	ldr	r2, [pc, #32]	; (8001860 <HAL_MspInit+0x44>)
 8001840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001844:	61d3      	str	r3, [r2, #28]
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_MspInit+0x44>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001852:	2007      	movs	r0, #7
 8001854:	f001 fc62 	bl	800311c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40021000 	.word	0x40021000

08001864 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08a      	sub	sp, #40	; 0x28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001884:	d124      	bne.n	80018d0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001886:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <HAL_ADC_MspInit+0x74>)
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	4a13      	ldr	r2, [pc, #76]	; (80018d8 <HAL_ADC_MspInit+0x74>)
 800188c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001890:	6153      	str	r3, [r2, #20]
 8001892:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <HAL_ADC_MspInit+0x74>)
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189e:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <HAL_ADC_MspInit+0x74>)
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	4a0d      	ldr	r2, [pc, #52]	; (80018d8 <HAL_ADC_MspInit+0x74>)
 80018a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a8:	6153      	str	r3, [r2, #20]
 80018aa:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <HAL_ADC_MspInit+0x74>)
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018b6:	2301      	movs	r3, #1
 80018b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ba:	2303      	movs	r3, #3
 80018bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c2:	f107 0314 	add.w	r3, r7, #20
 80018c6:	4619      	mov	r1, r3
 80018c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018cc:	f001 fcde 	bl	800328c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018d0:	bf00      	nop
 80018d2:	3728      	adds	r7, #40	; 0x28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40021000 	.word	0x40021000

080018dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a0d      	ldr	r2, [pc, #52]	; (8001920 <HAL_TIM_Base_MspInit+0x44>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d113      	bne.n	8001916 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80018ee:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <HAL_TIM_Base_MspInit+0x48>)
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	4a0c      	ldr	r2, [pc, #48]	; (8001924 <HAL_TIM_Base_MspInit+0x48>)
 80018f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f8:	6193      	str	r3, [r2, #24]
 80018fa:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <HAL_TIM_Base_MspInit+0x48>)
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	2100      	movs	r1, #0
 800190a:	2019      	movs	r0, #25
 800190c:	f001 fc11 	bl	8003132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001910:	2019      	movs	r0, #25
 8001912:	f001 fc2a 	bl	800316a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001916:	bf00      	nop
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40014400 	.word	0x40014400
 8001924:	40021000 	.word	0x40021000

08001928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	; 0x28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a1b      	ldr	r2, [pc, #108]	; (80019b4 <HAL_UART_MspInit+0x8c>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d130      	bne.n	80019ac <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800194a:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <HAL_UART_MspInit+0x90>)
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	4a1a      	ldr	r2, [pc, #104]	; (80019b8 <HAL_UART_MspInit+0x90>)
 8001950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001954:	61d3      	str	r3, [r2, #28]
 8001956:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <HAL_UART_MspInit+0x90>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <HAL_UART_MspInit+0x90>)
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	4a14      	ldr	r2, [pc, #80]	; (80019b8 <HAL_UART_MspInit+0x90>)
 8001968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800196c:	6153      	str	r3, [r2, #20]
 800196e:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <HAL_UART_MspInit+0x90>)
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800197a:	230c      	movs	r3, #12
 800197c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197e:	2302      	movs	r3, #2
 8001980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001986:	2300      	movs	r3, #0
 8001988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800198a:	2307      	movs	r3, #7
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198e:	f107 0314 	add.w	r3, r7, #20
 8001992:	4619      	mov	r1, r3
 8001994:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001998:	f001 fc78 	bl	800328c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800199c:	2200      	movs	r2, #0
 800199e:	2100      	movs	r1, #0
 80019a0:	2026      	movs	r0, #38	; 0x26
 80019a2:	f001 fbc6 	bl	8003132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019a6:	2026      	movs	r0, #38	; 0x26
 80019a8:	f001 fbdf 	bl	800316a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019ac:	bf00      	nop
 80019ae:	3728      	adds	r7, #40	; 0x28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40004400 	.word	0x40004400
 80019b8:	40021000 	.word	0x40021000

080019bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ce:	e7fe      	b.n	80019ce <HardFault_Handler+0x4>

080019d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d4:	e7fe      	b.n	80019d4 <MemManage_Handler+0x4>

080019d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019da:	e7fe      	b.n	80019da <BusFault_Handler+0x4>

080019dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <UsageFault_Handler+0x4>

080019e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a10:	f000 f8e2 	bl	8001bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001a1c:	2040      	movs	r0, #64	; 0x40
 8001a1e:	f001 fe09 	bl	8003634 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001a22:	2080      	movs	r0, #128	; 0x80
 8001a24:	f001 fe06 	bl	8003634 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001a28:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a2c:	f001 fe02 	bl	8003634 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001a30:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a34:	f001 fdfe 	bl	8003634 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001a40:	4802      	ldr	r0, [pc, #8]	; (8001a4c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001a42:	f003 fa41 	bl	8004ec8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000198 	.word	0x20000198

08001a50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a54:	4802      	ldr	r0, [pc, #8]	; (8001a60 <USART2_IRQHandler+0x10>)
 8001a56:	f003 fd6b 	bl	8005530 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000114 	.word	0x20000114

08001a64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001a68:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001a6c:	f001 fde2 	bl	8003634 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001a70:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a74:	f001 fdde 	bl	8003634 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <_sbrk+0x50>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d102      	bne.n	8001a92 <_sbrk+0x16>
		heap_end = &end;
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <_sbrk+0x50>)
 8001a8e:	4a10      	ldr	r2, [pc, #64]	; (8001ad0 <_sbrk+0x54>)
 8001a90:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001a92:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <_sbrk+0x50>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <_sbrk+0x50>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	466a      	mov	r2, sp
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d907      	bls.n	8001ab6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001aa6:	f004 fe7d 	bl	80067a4 <__errno>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	230c      	movs	r3, #12
 8001aae:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab4:	e006      	b.n	8001ac4 <_sbrk+0x48>
	}

	heap_end += incr;
 8001ab6:	4b05      	ldr	r3, [pc, #20]	; (8001acc <_sbrk+0x50>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	4a03      	ldr	r2, [pc, #12]	; (8001acc <_sbrk+0x50>)
 8001ac0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	200000b4 	.word	0x200000b4
 8001ad0:	200001f0 	.word	0x200001f0

08001ad4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <SystemInit+0x20>)
 8001ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ade:	4a05      	ldr	r2, [pc, #20]	; (8001af4 <SystemInit+0x20>)
 8001ae0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ae4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001af8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b30 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001afc:	480d      	ldr	r0, [pc, #52]	; (8001b34 <LoopForever+0x6>)
  ldr r1, =_edata
 8001afe:	490e      	ldr	r1, [pc, #56]	; (8001b38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b00:	4a0e      	ldr	r2, [pc, #56]	; (8001b3c <LoopForever+0xe>)
  movs r3, #0
 8001b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b04:	e002      	b.n	8001b0c <LoopCopyDataInit>

08001b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b0a:	3304      	adds	r3, #4

08001b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b10:	d3f9      	bcc.n	8001b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b12:	4a0b      	ldr	r2, [pc, #44]	; (8001b40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b14:	4c0b      	ldr	r4, [pc, #44]	; (8001b44 <LoopForever+0x16>)
  movs r3, #0
 8001b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b18:	e001      	b.n	8001b1e <LoopFillZerobss>

08001b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b1c:	3204      	adds	r2, #4

08001b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b20:	d3fb      	bcc.n	8001b1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b22:	f7ff ffd7 	bl	8001ad4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b26:	f004 fe43 	bl	80067b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b2a:	f7fe fff1 	bl	8000b10 <main>

08001b2e <LoopForever>:

LoopForever:
    b LoopForever
 8001b2e:	e7fe      	b.n	8001b2e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b30:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b38:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001b3c:	08007134 	.word	0x08007134
  ldr r2, =_sbss
 8001b40:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001b44:	200001ec 	.word	0x200001ec

08001b48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b48:	e7fe      	b.n	8001b48 <ADC1_2_IRQHandler>
	...

08001b4c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b50:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <HAL_Init+0x28>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a07      	ldr	r2, [pc, #28]	; (8001b74 <HAL_Init+0x28>)
 8001b56:	f043 0310 	orr.w	r3, r3, #16
 8001b5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b5c:	2003      	movs	r0, #3
 8001b5e:	f001 fadd 	bl	800311c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b62:	2000      	movs	r0, #0
 8001b64:	f000 f808 	bl	8001b78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b68:	f7ff fe58 	bl	800181c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40022000 	.word	0x40022000

08001b78 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b80:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <HAL_InitTick+0x54>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <HAL_InitTick+0x58>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b96:	4618      	mov	r0, r3
 8001b98:	f001 faf5 	bl	8003186 <HAL_SYSTICK_Config>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e00e      	b.n	8001bc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b0f      	cmp	r3, #15
 8001baa:	d80a      	bhi.n	8001bc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bac:	2200      	movs	r2, #0
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb4:	f001 fabd 	bl	8003132 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bb8:	4a06      	ldr	r2, [pc, #24]	; (8001bd4 <HAL_InitTick+0x5c>)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	e000      	b.n	8001bc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20000010 	.word	0x20000010
 8001bd0:	20000018 	.word	0x20000018
 8001bd4:	20000014 	.word	0x20000014

08001bd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <HAL_IncTick+0x20>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	461a      	mov	r2, r3
 8001be2:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <HAL_IncTick+0x24>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4413      	add	r3, r2
 8001be8:	4a04      	ldr	r2, [pc, #16]	; (8001bfc <HAL_IncTick+0x24>)
 8001bea:	6013      	str	r3, [r2, #0]
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	20000018 	.word	0x20000018
 8001bfc:	200001e4 	.word	0x200001e4

08001c00 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return uwTick;  
 8001c04:	4b03      	ldr	r3, [pc, #12]	; (8001c14 <HAL_GetTick+0x14>)
 8001c06:	681b      	ldr	r3, [r3, #0]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	200001e4 	.word	0x200001e4

08001c18 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b09a      	sub	sp, #104	; 0x68
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e1e3      	b.n	8002000 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	f003 0310 	and.w	r3, r3, #16
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d176      	bne.n	8001d38 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d152      	bne.n	8001cf8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff fdf9 	bl	8001864 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d13b      	bne.n	8001cf8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f001 f861 	bl	8002d48 <ADC_Disable>
 8001c86:	4603      	mov	r3, r0
 8001c88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	f003 0310 	and.w	r3, r3, #16
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d12f      	bne.n	8001cf8 <HAL_ADC_Init+0xe0>
 8001c98:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d12b      	bne.n	8001cf8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ca8:	f023 0302 	bic.w	r3, r3, #2
 8001cac:	f043 0202 	orr.w	r2, r3, #2
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cc2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001cd2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cd4:	4b92      	ldr	r3, [pc, #584]	; (8001f20 <HAL_ADC_Init+0x308>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a92      	ldr	r2, [pc, #584]	; (8001f24 <HAL_ADC_Init+0x30c>)
 8001cda:	fba2 2303 	umull	r2, r3, r2, r3
 8001cde:	0c9a      	lsrs	r2, r3, #18
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cea:	e002      	b.n	8001cf2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1f9      	bne.n	8001cec <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d007      	beq.n	8001d16 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001d10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d14:	d110      	bne.n	8001d38 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f023 0312 	bic.w	r3, r3, #18
 8001d1e:	f043 0210 	orr.w	r2, r3, #16
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	f043 0201 	orr.w	r2, r3, #1
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3c:	f003 0310 	and.w	r3, r3, #16
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f040 8150 	bne.w	8001fe6 <HAL_ADC_Init+0x3ce>
 8001d46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f040 814b 	bne.w	8001fe6 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f040 8143 	bne.w	8001fe6 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d68:	f043 0202 	orr.w	r2, r3, #2
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d78:	d004      	beq.n	8001d84 <HAL_ADC_Init+0x16c>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a6a      	ldr	r2, [pc, #424]	; (8001f28 <HAL_ADC_Init+0x310>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d101      	bne.n	8001d88 <HAL_ADC_Init+0x170>
 8001d84:	4b69      	ldr	r3, [pc, #420]	; (8001f2c <HAL_ADC_Init+0x314>)
 8001d86:	e000      	b.n	8001d8a <HAL_ADC_Init+0x172>
 8001d88:	4b69      	ldr	r3, [pc, #420]	; (8001f30 <HAL_ADC_Init+0x318>)
 8001d8a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d94:	d102      	bne.n	8001d9c <HAL_ADC_Init+0x184>
 8001d96:	4b64      	ldr	r3, [pc, #400]	; (8001f28 <HAL_ADC_Init+0x310>)
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	e01a      	b.n	8001dd2 <HAL_ADC_Init+0x1ba>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a61      	ldr	r2, [pc, #388]	; (8001f28 <HAL_ADC_Init+0x310>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d103      	bne.n	8001dae <HAL_ADC_Init+0x196>
 8001da6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	e011      	b.n	8001dd2 <HAL_ADC_Init+0x1ba>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a60      	ldr	r2, [pc, #384]	; (8001f34 <HAL_ADC_Init+0x31c>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d102      	bne.n	8001dbe <HAL_ADC_Init+0x1a6>
 8001db8:	4b5f      	ldr	r3, [pc, #380]	; (8001f38 <HAL_ADC_Init+0x320>)
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	e009      	b.n	8001dd2 <HAL_ADC_Init+0x1ba>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a5d      	ldr	r2, [pc, #372]	; (8001f38 <HAL_ADC_Init+0x320>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d102      	bne.n	8001dce <HAL_ADC_Init+0x1b6>
 8001dc8:	4b5a      	ldr	r3, [pc, #360]	; (8001f34 <HAL_ADC_Init+0x31c>)
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	e001      	b.n	8001dd2 <HAL_ADC_Init+0x1ba>
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d108      	bne.n	8001df2 <HAL_ADC_Init+0x1da>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d101      	bne.n	8001df2 <HAL_ADC_Init+0x1da>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <HAL_ADC_Init+0x1dc>
 8001df2:	2300      	movs	r3, #0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d11c      	bne.n	8001e32 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001df8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d010      	beq.n	8001e20 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d107      	bne.n	8001e1a <HAL_ADC_Init+0x202>
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <HAL_ADC_Init+0x202>
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <HAL_ADC_Init+0x204>
 8001e1a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d108      	bne.n	8001e32 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001e20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e30:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	7e5b      	ldrb	r3, [r3, #25]
 8001e36:	035b      	lsls	r3, r3, #13
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e3c:	2a01      	cmp	r2, #1
 8001e3e:	d002      	beq.n	8001e46 <HAL_ADC_Init+0x22e>
 8001e40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e44:	e000      	b.n	8001e48 <HAL_ADC_Init+0x230>
 8001e46:	2200      	movs	r2, #0
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d11b      	bne.n	8001e9e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	7e5b      	ldrb	r3, [r3, #25]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d109      	bne.n	8001e82 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	3b01      	subs	r3, #1
 8001e74:	045a      	lsls	r2, r3, #17
 8001e76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e7e:	663b      	str	r3, [r7, #96]	; 0x60
 8001e80:	e00d      	b.n	8001e9e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001e8a:	f043 0220 	orr.w	r2, r3, #32
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	f043 0201 	orr.w	r2, r3, #1
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d054      	beq.n	8001f50 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a22      	ldr	r2, [pc, #136]	; (8001f34 <HAL_ADC_Init+0x31c>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d004      	beq.n	8001eba <HAL_ADC_Init+0x2a2>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a20      	ldr	r2, [pc, #128]	; (8001f38 <HAL_ADC_Init+0x320>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d140      	bne.n	8001f3c <HAL_ADC_Init+0x324>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebe:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001ec2:	d02a      	beq.n	8001f1a <HAL_ADC_Init+0x302>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ecc:	d022      	beq.n	8001f14 <HAL_ADC_Init+0x2fc>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed2:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001ed6:	d01a      	beq.n	8001f0e <HAL_ADC_Init+0x2f6>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001edc:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8001ee0:	d012      	beq.n	8001f08 <HAL_ADC_Init+0x2f0>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee6:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8001eea:	d00a      	beq.n	8001f02 <HAL_ADC_Init+0x2ea>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef0:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8001ef4:	d002      	beq.n	8001efc <HAL_ADC_Init+0x2e4>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efa:	e023      	b.n	8001f44 <HAL_ADC_Init+0x32c>
 8001efc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001f00:	e020      	b.n	8001f44 <HAL_ADC_Init+0x32c>
 8001f02:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001f06:	e01d      	b.n	8001f44 <HAL_ADC_Init+0x32c>
 8001f08:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001f0c:	e01a      	b.n	8001f44 <HAL_ADC_Init+0x32c>
 8001f0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f12:	e017      	b.n	8001f44 <HAL_ADC_Init+0x32c>
 8001f14:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001f18:	e014      	b.n	8001f44 <HAL_ADC_Init+0x32c>
 8001f1a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001f1e:	e011      	b.n	8001f44 <HAL_ADC_Init+0x32c>
 8001f20:	20000010 	.word	0x20000010
 8001f24:	431bde83 	.word	0x431bde83
 8001f28:	50000100 	.word	0x50000100
 8001f2c:	50000300 	.word	0x50000300
 8001f30:	50000700 	.word	0x50000700
 8001f34:	50000400 	.word	0x50000400
 8001f38:	50000500 	.word	0x50000500
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 030c 	and.w	r3, r3, #12
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d114      	bne.n	8001f88 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6812      	ldr	r2, [r2, #0]
 8001f68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f6c:	f023 0302 	bic.w	r3, r3, #2
 8001f70:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	7e1b      	ldrb	r3, [r3, #24]
 8001f76:	039a      	lsls	r2, r3, #14
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	4313      	orrs	r3, r2
 8001f82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f84:	4313      	orrs	r3, r2
 8001f86:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	4b1e      	ldr	r3, [pc, #120]	; (8002008 <HAL_ADC_Init+0x3f0>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	6812      	ldr	r2, [r2, #0]
 8001f96:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001f98:	430b      	orrs	r3, r1
 8001f9a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d10c      	bne.n	8001fbe <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	f023 010f 	bic.w	r1, r3, #15
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	1e5a      	subs	r2, r3, #1
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	631a      	str	r2, [r3, #48]	; 0x30
 8001fbc:	e007      	b.n	8001fce <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 020f 	bic.w	r2, r2, #15
 8001fcc:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	f023 0303 	bic.w	r3, r3, #3
 8001fdc:	f043 0201 	orr.w	r2, r3, #1
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	641a      	str	r2, [r3, #64]	; 0x40
 8001fe4:	e00a      	b.n	8001ffc <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	f023 0312 	bic.w	r3, r3, #18
 8001fee:	f043 0210 	orr.w	r2, r3, #16
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001ffc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002000:	4618      	mov	r0, r3
 8002002:	3768      	adds	r7, #104	; 0x68
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	fff0c007 	.word	0xfff0c007

0800200c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002014:	2300      	movs	r3, #0
 8002016:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	2b00      	cmp	r3, #0
 8002024:	f040 80f9 	bne.w	800221a <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800202e:	2b01      	cmp	r3, #1
 8002030:	d101      	bne.n	8002036 <HAL_ADC_Start+0x2a>
 8002032:	2302      	movs	r3, #2
 8002034:	e0f4      	b.n	8002220 <HAL_ADC_Start+0x214>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 fe1e 	bl	8002c80 <ADC_Enable>
 8002044:	4603      	mov	r3, r0
 8002046:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	2b00      	cmp	r3, #0
 800204c:	f040 80e0 	bne.w	8002210 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002058:	f023 0301 	bic.w	r3, r3, #1
 800205c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800206c:	d004      	beq.n	8002078 <HAL_ADC_Start+0x6c>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a6d      	ldr	r2, [pc, #436]	; (8002228 <HAL_ADC_Start+0x21c>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d106      	bne.n	8002086 <HAL_ADC_Start+0x7a>
 8002078:	4b6c      	ldr	r3, [pc, #432]	; (800222c <HAL_ADC_Start+0x220>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 031f 	and.w	r3, r3, #31
 8002080:	2b00      	cmp	r3, #0
 8002082:	d010      	beq.n	80020a6 <HAL_ADC_Start+0x9a>
 8002084:	e005      	b.n	8002092 <HAL_ADC_Start+0x86>
 8002086:	4b6a      	ldr	r3, [pc, #424]	; (8002230 <HAL_ADC_Start+0x224>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 031f 	and.w	r3, r3, #31
 800208e:	2b00      	cmp	r3, #0
 8002090:	d009      	beq.n	80020a6 <HAL_ADC_Start+0x9a>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800209a:	d004      	beq.n	80020a6 <HAL_ADC_Start+0x9a>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a64      	ldr	r2, [pc, #400]	; (8002234 <HAL_ADC_Start+0x228>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d115      	bne.n	80020d2 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d036      	beq.n	800212e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80020d0:	e02d      	b.n	800212e <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020e6:	d004      	beq.n	80020f2 <HAL_ADC_Start+0xe6>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a4e      	ldr	r2, [pc, #312]	; (8002228 <HAL_ADC_Start+0x21c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d10a      	bne.n	8002108 <HAL_ADC_Start+0xfc>
 80020f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	bf14      	ite	ne
 8002100:	2301      	movne	r3, #1
 8002102:	2300      	moveq	r3, #0
 8002104:	b2db      	uxtb	r3, r3
 8002106:	e008      	b.n	800211a <HAL_ADC_Start+0x10e>
 8002108:	4b4a      	ldr	r3, [pc, #296]	; (8002234 <HAL_ADC_Start+0x228>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002110:	2b00      	cmp	r3, #0
 8002112:	bf14      	ite	ne
 8002114:	2301      	movne	r3, #1
 8002116:	2300      	moveq	r3, #0
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d007      	beq.n	800212e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002126:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800213a:	d106      	bne.n	800214a <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002140:	f023 0206 	bic.w	r2, r3, #6
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	645a      	str	r2, [r3, #68]	; 0x44
 8002148:	e002      	b.n	8002150 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	221c      	movs	r2, #28
 800215e:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002168:	d004      	beq.n	8002174 <HAL_ADC_Start+0x168>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a2e      	ldr	r2, [pc, #184]	; (8002228 <HAL_ADC_Start+0x21c>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d106      	bne.n	8002182 <HAL_ADC_Start+0x176>
 8002174:	4b2d      	ldr	r3, [pc, #180]	; (800222c <HAL_ADC_Start+0x220>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 031f 	and.w	r3, r3, #31
 800217c:	2b00      	cmp	r3, #0
 800217e:	d03e      	beq.n	80021fe <HAL_ADC_Start+0x1f2>
 8002180:	e005      	b.n	800218e <HAL_ADC_Start+0x182>
 8002182:	4b2b      	ldr	r3, [pc, #172]	; (8002230 <HAL_ADC_Start+0x224>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 031f 	and.w	r3, r3, #31
 800218a:	2b00      	cmp	r3, #0
 800218c:	d037      	beq.n	80021fe <HAL_ADC_Start+0x1f2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002196:	d004      	beq.n	80021a2 <HAL_ADC_Start+0x196>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a22      	ldr	r2, [pc, #136]	; (8002228 <HAL_ADC_Start+0x21c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d106      	bne.n	80021b0 <HAL_ADC_Start+0x1a4>
 80021a2:	4b22      	ldr	r3, [pc, #136]	; (800222c <HAL_ADC_Start+0x220>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 031f 	and.w	r3, r3, #31
 80021aa:	2b05      	cmp	r3, #5
 80021ac:	d027      	beq.n	80021fe <HAL_ADC_Start+0x1f2>
 80021ae:	e005      	b.n	80021bc <HAL_ADC_Start+0x1b0>
 80021b0:	4b1f      	ldr	r3, [pc, #124]	; (8002230 <HAL_ADC_Start+0x224>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 031f 	and.w	r3, r3, #31
 80021b8:	2b05      	cmp	r3, #5
 80021ba:	d020      	beq.n	80021fe <HAL_ADC_Start+0x1f2>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021c4:	d004      	beq.n	80021d0 <HAL_ADC_Start+0x1c4>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a17      	ldr	r2, [pc, #92]	; (8002228 <HAL_ADC_Start+0x21c>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d106      	bne.n	80021de <HAL_ADC_Start+0x1d2>
 80021d0:	4b16      	ldr	r3, [pc, #88]	; (800222c <HAL_ADC_Start+0x220>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 031f 	and.w	r3, r3, #31
 80021d8:	2b09      	cmp	r3, #9
 80021da:	d010      	beq.n	80021fe <HAL_ADC_Start+0x1f2>
 80021dc:	e005      	b.n	80021ea <HAL_ADC_Start+0x1de>
 80021de:	4b14      	ldr	r3, [pc, #80]	; (8002230 <HAL_ADC_Start+0x224>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 031f 	and.w	r3, r3, #31
 80021e6:	2b09      	cmp	r3, #9
 80021e8:	d009      	beq.n	80021fe <HAL_ADC_Start+0x1f2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021f2:	d004      	beq.n	80021fe <HAL_ADC_Start+0x1f2>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a0e      	ldr	r2, [pc, #56]	; (8002234 <HAL_ADC_Start+0x228>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d10f      	bne.n	800221e <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f042 0204 	orr.w	r2, r2, #4
 800220c:	609a      	str	r2, [r3, #8]
 800220e:	e006      	b.n	800221e <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002218:	e001      	b.n	800221e <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800221a:	2302      	movs	r3, #2
 800221c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800221e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	50000100 	.word	0x50000100
 800222c:	50000300 	.word	0x50000300
 8002230:	50000700 	.word	0x50000700
 8002234:	50000400 	.word	0x50000400

08002238 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002240:	2300      	movs	r3, #0
 8002242:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800224a:	2b01      	cmp	r3, #1
 800224c:	d101      	bne.n	8002252 <HAL_ADC_Stop+0x1a>
 800224e:	2302      	movs	r3, #2
 8002250:	e023      	b.n	800229a <HAL_ADC_Stop+0x62>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800225a:	216c      	movs	r1, #108	; 0x6c
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 fdd9 	bl	8002e14 <ADC_ConversionStop>
 8002262:	4603      	mov	r3, r0
 8002264:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002266:	7bfb      	ldrb	r3, [r7, #15]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d111      	bne.n	8002290 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 fd6b 	bl	8002d48 <ADC_Disable>
 8002272:	4603      	mov	r3, r0
 8002274:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d109      	bne.n	8002290 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002284:	f023 0301 	bic.w	r3, r3, #1
 8002288:	f043 0201 	orr.w	r2, r3, #1
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002298:	7bfb      	ldrb	r3, [r7, #15]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d102      	bne.n	80022c0 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80022ba:	2308      	movs	r3, #8
 80022bc:	617b      	str	r3, [r7, #20]
 80022be:	e03a      	b.n	8002336 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022c8:	d004      	beq.n	80022d4 <HAL_ADC_PollForConversion+0x30>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a72      	ldr	r2, [pc, #456]	; (8002498 <HAL_ADC_PollForConversion+0x1f4>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d101      	bne.n	80022d8 <HAL_ADC_PollForConversion+0x34>
 80022d4:	4b71      	ldr	r3, [pc, #452]	; (800249c <HAL_ADC_PollForConversion+0x1f8>)
 80022d6:	e000      	b.n	80022da <HAL_ADC_PollForConversion+0x36>
 80022d8:	4b71      	ldr	r3, [pc, #452]	; (80024a0 <HAL_ADC_PollForConversion+0x1fc>)
 80022da:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 031f 	and.w	r3, r3, #31
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d112      	bne.n	800230e <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d11d      	bne.n	8002332 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	f043 0220 	orr.w	r2, r3, #32
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e0bf      	b.n	800248e <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00b      	beq.n	8002332 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	f043 0220 	orr.w	r2, r3, #32
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e0ad      	b.n	800248e <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002332:	230c      	movs	r3, #12
 8002334:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800233e:	d004      	beq.n	800234a <HAL_ADC_PollForConversion+0xa6>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a54      	ldr	r2, [pc, #336]	; (8002498 <HAL_ADC_PollForConversion+0x1f4>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d106      	bne.n	8002358 <HAL_ADC_PollForConversion+0xb4>
 800234a:	4b54      	ldr	r3, [pc, #336]	; (800249c <HAL_ADC_PollForConversion+0x1f8>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 031f 	and.w	r3, r3, #31
 8002352:	2b00      	cmp	r3, #0
 8002354:	d010      	beq.n	8002378 <HAL_ADC_PollForConversion+0xd4>
 8002356:	e005      	b.n	8002364 <HAL_ADC_PollForConversion+0xc0>
 8002358:	4b51      	ldr	r3, [pc, #324]	; (80024a0 <HAL_ADC_PollForConversion+0x1fc>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 031f 	and.w	r3, r3, #31
 8002360:	2b00      	cmp	r3, #0
 8002362:	d009      	beq.n	8002378 <HAL_ADC_PollForConversion+0xd4>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800236c:	d004      	beq.n	8002378 <HAL_ADC_PollForConversion+0xd4>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a4c      	ldr	r2, [pc, #304]	; (80024a4 <HAL_ADC_PollForConversion+0x200>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d104      	bne.n	8002382 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	613b      	str	r3, [r7, #16]
 8002380:	e00f      	b.n	80023a2 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800238a:	d004      	beq.n	8002396 <HAL_ADC_PollForConversion+0xf2>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a41      	ldr	r2, [pc, #260]	; (8002498 <HAL_ADC_PollForConversion+0x1f4>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d102      	bne.n	800239c <HAL_ADC_PollForConversion+0xf8>
 8002396:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800239a:	e000      	b.n	800239e <HAL_ADC_PollForConversion+0xfa>
 800239c:	4b41      	ldr	r3, [pc, #260]	; (80024a4 <HAL_ADC_PollForConversion+0x200>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80023a2:	f7ff fc2d 	bl	8001c00 <HAL_GetTick>
 80023a6:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80023a8:	e021      	b.n	80023ee <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b0:	d01d      	beq.n	80023ee <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d007      	beq.n	80023c8 <HAL_ADC_PollForConversion+0x124>
 80023b8:	f7ff fc22 	bl	8001c00 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d212      	bcs.n	80023ee <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	4013      	ands	r3, r2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10b      	bne.n	80023ee <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	f043 0204 	orr.w	r2, r3, #4
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e04f      	b.n	800248e <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	4013      	ands	r3, r2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0d6      	beq.n	80023aa <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002400:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002412:	2b00      	cmp	r3, #0
 8002414:	d131      	bne.n	800247a <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800241c:	2b00      	cmp	r3, #0
 800241e:	d12c      	bne.n	800247a <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b08      	cmp	r3, #8
 800242c:	d125      	bne.n	800247a <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d112      	bne.n	8002462 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d112      	bne.n	800247a <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	f043 0201 	orr.w	r2, r3, #1
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	641a      	str	r2, [r3, #64]	; 0x40
 8002460:	e00b      	b.n	800247a <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	f043 0220 	orr.w	r2, r3, #32
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002472:	f043 0201 	orr.w	r2, r3, #1
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d103      	bne.n	800248c <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	50000100 	.word	0x50000100
 800249c:	50000300 	.word	0x50000300
 80024a0:	50000700 	.word	0x50000700
 80024a4:	50000400 	.word	0x50000400

080024a8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
	...

080024c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b09b      	sub	sp, #108	; 0x6c
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d101      	bne.n	80024e6 <HAL_ADC_ConfigChannel+0x22>
 80024e2:	2302      	movs	r3, #2
 80024e4:	e2cb      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x5ba>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f040 82af 	bne.w	8002a5c <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2b04      	cmp	r3, #4
 8002504:	d81c      	bhi.n	8002540 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	4413      	add	r3, r2
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	461a      	mov	r2, r3
 800251a:	231f      	movs	r3, #31
 800251c:	4093      	lsls	r3, r2
 800251e:	43db      	mvns	r3, r3
 8002520:	4019      	ands	r1, r3
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	6818      	ldr	r0, [r3, #0]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	4613      	mov	r3, r2
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	4413      	add	r3, r2
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	fa00 f203 	lsl.w	r2, r0, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	631a      	str	r2, [r3, #48]	; 0x30
 800253e:	e063      	b.n	8002608 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b09      	cmp	r3, #9
 8002546:	d81e      	bhi.n	8002586 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	4413      	add	r3, r2
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	3b1e      	subs	r3, #30
 800255c:	221f      	movs	r2, #31
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43db      	mvns	r3, r3
 8002564:	4019      	ands	r1, r3
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	6818      	ldr	r0, [r3, #0]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	4613      	mov	r3, r2
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	4413      	add	r3, r2
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	3b1e      	subs	r3, #30
 8002578:	fa00 f203 	lsl.w	r2, r0, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	635a      	str	r2, [r3, #52]	; 0x34
 8002584:	e040      	b.n	8002608 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b0e      	cmp	r3, #14
 800258c:	d81e      	bhi.n	80025cc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	4613      	mov	r3, r2
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	4413      	add	r3, r2
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	3b3c      	subs	r3, #60	; 0x3c
 80025a2:	221f      	movs	r2, #31
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	4019      	ands	r1, r3
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	6818      	ldr	r0, [r3, #0]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	4413      	add	r3, r2
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	3b3c      	subs	r3, #60	; 0x3c
 80025be:	fa00 f203 	lsl.w	r2, r0, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	639a      	str	r2, [r3, #56]	; 0x38
 80025ca:	e01d      	b.n	8002608 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	4613      	mov	r3, r2
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	4413      	add	r3, r2
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	3b5a      	subs	r3, #90	; 0x5a
 80025e0:	221f      	movs	r2, #31
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43db      	mvns	r3, r3
 80025e8:	4019      	ands	r1, r3
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	4413      	add	r3, r2
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	3b5a      	subs	r3, #90	; 0x5a
 80025fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	2b00      	cmp	r3, #0
 8002614:	f040 80e5 	bne.w	80027e2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2b09      	cmp	r3, #9
 800261e:	d91c      	bls.n	800265a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6999      	ldr	r1, [r3, #24]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	4613      	mov	r3, r2
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	4413      	add	r3, r2
 8002630:	3b1e      	subs	r3, #30
 8002632:	2207      	movs	r2, #7
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	4019      	ands	r1, r3
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	6898      	ldr	r0, [r3, #8]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	4613      	mov	r3, r2
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	4413      	add	r3, r2
 800264a:	3b1e      	subs	r3, #30
 800264c:	fa00 f203 	lsl.w	r2, r0, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	619a      	str	r2, [r3, #24]
 8002658:	e019      	b.n	800268e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6959      	ldr	r1, [r3, #20]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	4613      	mov	r3, r2
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	4413      	add	r3, r2
 800266a:	2207      	movs	r2, #7
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	4019      	ands	r1, r3
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	6898      	ldr	r0, [r3, #8]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	4613      	mov	r3, r2
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	4413      	add	r3, r2
 8002682:	fa00 f203 	lsl.w	r2, r0, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	695a      	ldr	r2, [r3, #20]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	08db      	lsrs	r3, r3, #3
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	2b03      	cmp	r3, #3
 80026ae:	d84f      	bhi.n	8002750 <HAL_ADC_ConfigChannel+0x28c>
 80026b0:	a201      	add	r2, pc, #4	; (adr r2, 80026b8 <HAL_ADC_ConfigChannel+0x1f4>)
 80026b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b6:	bf00      	nop
 80026b8:	080026c9 	.word	0x080026c9
 80026bc:	080026eb 	.word	0x080026eb
 80026c0:	0800270d 	.word	0x0800270d
 80026c4:	0800272f 	.word	0x0800272f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026ce:	4b9f      	ldr	r3, [pc, #636]	; (800294c <HAL_ADC_ConfigChannel+0x488>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	6812      	ldr	r2, [r2, #0]
 80026d6:	0691      	lsls	r1, r2, #26
 80026d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80026da:	430a      	orrs	r2, r1
 80026dc:	431a      	orrs	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80026e6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80026e8:	e07e      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80026f0:	4b96      	ldr	r3, [pc, #600]	; (800294c <HAL_ADC_ConfigChannel+0x488>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	6812      	ldr	r2, [r2, #0]
 80026f8:	0691      	lsls	r1, r2, #26
 80026fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80026fc:	430a      	orrs	r2, r1
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002708:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800270a:	e06d      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002712:	4b8e      	ldr	r3, [pc, #568]	; (800294c <HAL_ADC_ConfigChannel+0x488>)
 8002714:	4013      	ands	r3, r2
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	6812      	ldr	r2, [r2, #0]
 800271a:	0691      	lsls	r1, r2, #26
 800271c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800271e:	430a      	orrs	r2, r1
 8002720:	431a      	orrs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800272a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800272c:	e05c      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002734:	4b85      	ldr	r3, [pc, #532]	; (800294c <HAL_ADC_ConfigChannel+0x488>)
 8002736:	4013      	ands	r3, r2
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	0691      	lsls	r1, r2, #26
 800273e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002740:	430a      	orrs	r2, r1
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800274c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800274e:	e04b      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002756:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	069b      	lsls	r3, r3, #26
 8002760:	429a      	cmp	r2, r3
 8002762:	d107      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002772:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800277a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	069b      	lsls	r3, r3, #26
 8002784:	429a      	cmp	r2, r3
 8002786:	d107      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002796:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800279e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	069b      	lsls	r3, r3, #26
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d107      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027ba:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	069b      	lsls	r3, r3, #26
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d10a      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027de:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80027e0:	e001      	b.n	80027e6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80027e2:	bf00      	nop
 80027e4:	e000      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x324>
      break;
 80027e6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d108      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x344>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x344>
 8002804:	2301      	movs	r3, #1
 8002806:	e000      	b.n	800280a <HAL_ADC_ConfigChannel+0x346>
 8002808:	2300      	movs	r3, #0
 800280a:	2b00      	cmp	r3, #0
 800280c:	f040 8131 	bne.w	8002a72 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d00f      	beq.n	8002838 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2201      	movs	r2, #1
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43da      	mvns	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	400a      	ands	r2, r1
 8002832:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002836:	e049      	b.n	80028cc <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2201      	movs	r2, #1
 8002846:	409a      	lsls	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2b09      	cmp	r3, #9
 8002858:	d91c      	bls.n	8002894 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6999      	ldr	r1, [r3, #24]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	4613      	mov	r3, r2
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	4413      	add	r3, r2
 800286a:	3b1b      	subs	r3, #27
 800286c:	2207      	movs	r2, #7
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43db      	mvns	r3, r3
 8002874:	4019      	ands	r1, r3
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	6898      	ldr	r0, [r3, #8]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	4613      	mov	r3, r2
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	4413      	add	r3, r2
 8002884:	3b1b      	subs	r3, #27
 8002886:	fa00 f203 	lsl.w	r2, r0, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	619a      	str	r2, [r3, #24]
 8002892:	e01b      	b.n	80028cc <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6959      	ldr	r1, [r3, #20]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	1c5a      	adds	r2, r3, #1
 80028a0:	4613      	mov	r3, r2
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	4413      	add	r3, r2
 80028a6:	2207      	movs	r2, #7
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	4019      	ands	r1, r3
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	6898      	ldr	r0, [r3, #8]
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	4613      	mov	r3, r2
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	4413      	add	r3, r2
 80028c0:	fa00 f203 	lsl.w	r2, r0, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028d4:	d004      	beq.n	80028e0 <HAL_ADC_ConfigChannel+0x41c>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a1d      	ldr	r2, [pc, #116]	; (8002950 <HAL_ADC_ConfigChannel+0x48c>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d101      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x420>
 80028e0:	4b1c      	ldr	r3, [pc, #112]	; (8002954 <HAL_ADC_ConfigChannel+0x490>)
 80028e2:	e000      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x422>
 80028e4:	4b1c      	ldr	r3, [pc, #112]	; (8002958 <HAL_ADC_ConfigChannel+0x494>)
 80028e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b10      	cmp	r3, #16
 80028ee:	d105      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80028f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d015      	beq.n	8002928 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002900:	2b11      	cmp	r3, #17
 8002902:	d105      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002904:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00b      	beq.n	8002928 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002914:	2b12      	cmp	r3, #18
 8002916:	f040 80ac 	bne.w	8002a72 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800291a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002922:	2b00      	cmp	r3, #0
 8002924:	f040 80a5 	bne.w	8002a72 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002930:	d102      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x474>
 8002932:	4b07      	ldr	r3, [pc, #28]	; (8002950 <HAL_ADC_ConfigChannel+0x48c>)
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	e023      	b.n	8002980 <HAL_ADC_ConfigChannel+0x4bc>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a04      	ldr	r2, [pc, #16]	; (8002950 <HAL_ADC_ConfigChannel+0x48c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d10c      	bne.n	800295c <HAL_ADC_ConfigChannel+0x498>
 8002942:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	e01a      	b.n	8002980 <HAL_ADC_ConfigChannel+0x4bc>
 800294a:	bf00      	nop
 800294c:	83fff000 	.word	0x83fff000
 8002950:	50000100 	.word	0x50000100
 8002954:	50000300 	.word	0x50000300
 8002958:	50000700 	.word	0x50000700
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a4a      	ldr	r2, [pc, #296]	; (8002a8c <HAL_ADC_ConfigChannel+0x5c8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d102      	bne.n	800296c <HAL_ADC_ConfigChannel+0x4a8>
 8002966:	4b4a      	ldr	r3, [pc, #296]	; (8002a90 <HAL_ADC_ConfigChannel+0x5cc>)
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	e009      	b.n	8002980 <HAL_ADC_ConfigChannel+0x4bc>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a47      	ldr	r2, [pc, #284]	; (8002a90 <HAL_ADC_ConfigChannel+0x5cc>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d102      	bne.n	800297c <HAL_ADC_ConfigChannel+0x4b8>
 8002976:	4b45      	ldr	r3, [pc, #276]	; (8002a8c <HAL_ADC_ConfigChannel+0x5c8>)
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	e001      	b.n	8002980 <HAL_ADC_ConfigChannel+0x4bc>
 800297c:	2300      	movs	r3, #0
 800297e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	2b01      	cmp	r3, #1
 800298c:	d108      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x4dc>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x4dc>
 800299c:	2301      	movs	r3, #1
 800299e:	e000      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x4de>
 80029a0:	2300      	movs	r3, #0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d150      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80029a6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d010      	beq.n	80029ce <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d107      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x504>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d101      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x504>
 80029c4:	2301      	movs	r3, #1
 80029c6:	e000      	b.n	80029ca <HAL_ADC_ConfigChannel+0x506>
 80029c8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d13c      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2b10      	cmp	r3, #16
 80029d4:	d11d      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x54e>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029de:	d118      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80029e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80029e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029ea:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029ec:	4b29      	ldr	r3, [pc, #164]	; (8002a94 <HAL_ADC_ConfigChannel+0x5d0>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a29      	ldr	r2, [pc, #164]	; (8002a98 <HAL_ADC_ConfigChannel+0x5d4>)
 80029f2:	fba2 2303 	umull	r2, r3, r2, r3
 80029f6:	0c9a      	lsrs	r2, r3, #18
 80029f8:	4613      	mov	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a02:	e002      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1f9      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a10:	e02e      	b.n	8002a70 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2b11      	cmp	r3, #17
 8002a18:	d10b      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x56e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a22:	d106      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002a24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002a2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a2e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a30:	e01e      	b.n	8002a70 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2b12      	cmp	r3, #18
 8002a38:	d11a      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002a42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a44:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a46:	e013      	b.n	8002a70 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	f043 0220 	orr.w	r2, r3, #32
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002a5a:	e00a      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	f043 0220 	orr.w	r2, r3, #32
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002a6e:	e000      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a70:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002a7a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	376c      	adds	r7, #108	; 0x6c
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	50000400 	.word	0x50000400
 8002a90:	50000500 	.word	0x50000500
 8002a94:	20000010 	.word	0x20000010
 8002a98:	431bde83 	.word	0x431bde83

08002a9c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b099      	sub	sp, #100	; 0x64
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ab4:	d102      	bne.n	8002abc <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002ab6:	4b6d      	ldr	r3, [pc, #436]	; (8002c6c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002ab8:	60bb      	str	r3, [r7, #8]
 8002aba:	e01a      	b.n	8002af2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a6a      	ldr	r2, [pc, #424]	; (8002c6c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d103      	bne.n	8002ace <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002ac6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002aca:	60bb      	str	r3, [r7, #8]
 8002acc:	e011      	b.n	8002af2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a67      	ldr	r2, [pc, #412]	; (8002c70 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d102      	bne.n	8002ade <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002ad8:	4b66      	ldr	r3, [pc, #408]	; (8002c74 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002ada:	60bb      	str	r3, [r7, #8]
 8002adc:	e009      	b.n	8002af2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a64      	ldr	r2, [pc, #400]	; (8002c74 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d102      	bne.n	8002aee <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002ae8:	4b61      	ldr	r3, [pc, #388]	; (8002c70 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002aea:	60bb      	str	r3, [r7, #8]
 8002aec:	e001      	b.n	8002af2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002aee:	2300      	movs	r3, #0
 8002af0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e0b0      	b.n	8002c5e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d101      	bne.n	8002b0a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002b06:	2302      	movs	r3, #2
 8002b08:	e0a9      	b.n	8002c5e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f040 808d 	bne.w	8002c3c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 0304 	and.w	r3, r3, #4
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f040 8086 	bne.w	8002c3c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b38:	d004      	beq.n	8002b44 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a4b      	ldr	r2, [pc, #300]	; (8002c6c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d101      	bne.n	8002b48 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002b44:	4b4c      	ldr	r3, [pc, #304]	; (8002c78 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002b46:	e000      	b.n	8002b4a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002b48:	4b4c      	ldr	r3, [pc, #304]	; (8002c7c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002b4a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d040      	beq.n	8002bd6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002b54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	6859      	ldr	r1, [r3, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b66:	035b      	lsls	r3, r3, #13
 8002b68:	430b      	orrs	r3, r1
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b6e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d108      	bne.n	8002b90 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e000      	b.n	8002b92 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002b90:	2300      	movs	r3, #0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d15c      	bne.n	8002c50 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d107      	bne.n	8002bb2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e000      	b.n	8002bb4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002bb2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d14b      	bne.n	8002c50 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002bb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002bc0:	f023 030f 	bic.w	r3, r3, #15
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	6811      	ldr	r1, [r2, #0]
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	6892      	ldr	r2, [r2, #8]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bd2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bd4:	e03c      	b.n	8002c50 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002bd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002be0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 0303 	and.w	r3, r3, #3
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d108      	bne.n	8002c02 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d101      	bne.n	8002c02 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002c02:	2300      	movs	r3, #0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d123      	bne.n	8002c50 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 0303 	and.w	r3, r3, #3
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d107      	bne.n	8002c24 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d101      	bne.n	8002c24 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002c20:	2301      	movs	r3, #1
 8002c22:	e000      	b.n	8002c26 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002c24:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d112      	bne.n	8002c50 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002c2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c32:	f023 030f 	bic.w	r3, r3, #15
 8002c36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c38:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c3a:	e009      	b.n	8002c50 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	f043 0220 	orr.w	r2, r3, #32
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002c4e:	e000      	b.n	8002c52 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c50:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002c5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3764      	adds	r7, #100	; 0x64
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	50000100 	.word	0x50000100
 8002c70:	50000400 	.word	0x50000400
 8002c74:	50000500 	.word	0x50000500
 8002c78:	50000300 	.word	0x50000300
 8002c7c:	50000700 	.word	0x50000700

08002c80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d108      	bne.n	8002cac <ADC_Enable+0x2c>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d101      	bne.n	8002cac <ADC_Enable+0x2c>
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e000      	b.n	8002cae <ADC_Enable+0x2e>
 8002cac:	2300      	movs	r3, #0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d143      	bne.n	8002d3a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	4b22      	ldr	r3, [pc, #136]	; (8002d44 <ADC_Enable+0xc4>)
 8002cba:	4013      	ands	r3, r2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00d      	beq.n	8002cdc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	f043 0210 	orr.w	r2, r3, #16
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd0:	f043 0201 	orr.w	r2, r3, #1
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e02f      	b.n	8002d3c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0201 	orr.w	r2, r2, #1
 8002cea:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002cec:	f7fe ff88 	bl	8001c00 <HAL_GetTick>
 8002cf0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002cf2:	e01b      	b.n	8002d2c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cf4:	f7fe ff84 	bl	8001c00 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d914      	bls.n	8002d2c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d00d      	beq.n	8002d2c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	f043 0210 	orr.w	r2, r3, #16
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d20:	f043 0201 	orr.w	r2, r3, #1
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e007      	b.n	8002d3c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d1dc      	bne.n	8002cf4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	8000003f 	.word	0x8000003f

08002d48 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d108      	bne.n	8002d74 <ADC_Disable+0x2c>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d101      	bne.n	8002d74 <ADC_Disable+0x2c>
 8002d70:	2301      	movs	r3, #1
 8002d72:	e000      	b.n	8002d76 <ADC_Disable+0x2e>
 8002d74:	2300      	movs	r3, #0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d047      	beq.n	8002e0a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 030d 	and.w	r3, r3, #13
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d10f      	bne.n	8002da8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 0202 	orr.w	r2, r2, #2
 8002d96:	609a      	str	r2, [r3, #8]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2203      	movs	r2, #3
 8002d9e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002da0:	f7fe ff2e 	bl	8001c00 <HAL_GetTick>
 8002da4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002da6:	e029      	b.n	8002dfc <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	f043 0210 	orr.w	r2, r3, #16
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db8:	f043 0201 	orr.w	r2, r3, #1
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e023      	b.n	8002e0c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002dc4:	f7fe ff1c 	bl	8001c00 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d914      	bls.n	8002dfc <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d10d      	bne.n	8002dfc <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de4:	f043 0210 	orr.w	r2, r3, #16
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df0:	f043 0201 	orr.w	r2, r3, #1
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e007      	b.n	8002e0c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d0dc      	beq.n	8002dc4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 030c 	and.w	r3, r3, #12
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 809a 	beq.w	8002f6e <ADC_ConversionStop+0x15a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e48:	d12a      	bne.n	8002ea0 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d126      	bne.n	8002ea0 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d122      	bne.n	8002ea0 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8002e5a:	230c      	movs	r3, #12
 8002e5c:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002e5e:	e014      	b.n	8002e8a <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	4a45      	ldr	r2, [pc, #276]	; (8002f78 <ADC_ConversionStop+0x164>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d90d      	bls.n	8002e84 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	f043 0210 	orr.w	r2, r3, #16
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e78:	f043 0201 	orr.w	r2, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e075      	b.n	8002f70 <ADC_ConversionStop+0x15c>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	3301      	adds	r3, #1
 8002e88:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e94:	2b40      	cmp	r3, #64	; 0x40
 8002e96:	d1e3      	bne.n	8002e60 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2240      	movs	r2, #64	; 0x40
 8002e9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	2b60      	cmp	r3, #96	; 0x60
 8002ea4:	d015      	beq.n	8002ed2 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 0304 	and.w	r3, r3, #4
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d10e      	bne.n	8002ed2 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d107      	bne.n	8002ed2 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f042 0210 	orr.w	r2, r2, #16
 8002ed0:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	2b0c      	cmp	r3, #12
 8002ed6:	d015      	beq.n	8002f04 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d10e      	bne.n	8002f04 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d107      	bne.n	8002f04 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0220 	orr.w	r2, r2, #32
 8002f02:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	2b60      	cmp	r3, #96	; 0x60
 8002f08:	d004      	beq.n	8002f14 <ADC_ConversionStop+0x100>
 8002f0a:	2b6c      	cmp	r3, #108	; 0x6c
 8002f0c:	d105      	bne.n	8002f1a <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002f0e:	230c      	movs	r3, #12
 8002f10:	617b      	str	r3, [r7, #20]
        break;
 8002f12:	e005      	b.n	8002f20 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002f14:	2308      	movs	r3, #8
 8002f16:	617b      	str	r3, [r7, #20]
        break;
 8002f18:	e002      	b.n	8002f20 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002f1a:	2304      	movs	r3, #4
 8002f1c:	617b      	str	r3, [r7, #20]
        break;
 8002f1e:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002f20:	f7fe fe6e 	bl	8001c00 <HAL_GetTick>
 8002f24:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002f26:	e01b      	b.n	8002f60 <ADC_ConversionStop+0x14c>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002f28:	f7fe fe6a 	bl	8001c00 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b0b      	cmp	r3, #11
 8002f34:	d914      	bls.n	8002f60 <ADC_ConversionStop+0x14c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00d      	beq.n	8002f60 <ADC_ConversionStop+0x14c>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	f043 0210 	orr.w	r2, r3, #16
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f54:	f043 0201 	orr.w	r2, r3, #1
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e007      	b.n	8002f70 <ADC_ConversionStop+0x15c>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1dc      	bne.n	8002f28 <ADC_ConversionStop+0x114>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3718      	adds	r7, #24
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	000993ff 	.word	0x000993ff

08002f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f8c:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f98:	4013      	ands	r3, r2
 8002f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fae:	4a04      	ldr	r2, [pc, #16]	; (8002fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	60d3      	str	r3, [r2, #12]
}
 8002fb4:	bf00      	nop
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	e000ed00 	.word	0xe000ed00

08002fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fc8:	4b04      	ldr	r3, [pc, #16]	; (8002fdc <__NVIC_GetPriorityGrouping+0x18>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	0a1b      	lsrs	r3, r3, #8
 8002fce:	f003 0307 	and.w	r3, r3, #7
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	db0b      	blt.n	800300a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	f003 021f 	and.w	r2, r3, #31
 8002ff8:	4907      	ldr	r1, [pc, #28]	; (8003018 <__NVIC_EnableIRQ+0x38>)
 8002ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffe:	095b      	lsrs	r3, r3, #5
 8003000:	2001      	movs	r0, #1
 8003002:	fa00 f202 	lsl.w	r2, r0, r2
 8003006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	e000e100 	.word	0xe000e100

0800301c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	6039      	str	r1, [r7, #0]
 8003026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302c:	2b00      	cmp	r3, #0
 800302e:	db0a      	blt.n	8003046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	b2da      	uxtb	r2, r3
 8003034:	490c      	ldr	r1, [pc, #48]	; (8003068 <__NVIC_SetPriority+0x4c>)
 8003036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303a:	0112      	lsls	r2, r2, #4
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	440b      	add	r3, r1
 8003040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003044:	e00a      	b.n	800305c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	b2da      	uxtb	r2, r3
 800304a:	4908      	ldr	r1, [pc, #32]	; (800306c <__NVIC_SetPriority+0x50>)
 800304c:	79fb      	ldrb	r3, [r7, #7]
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	3b04      	subs	r3, #4
 8003054:	0112      	lsls	r2, r2, #4
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	440b      	add	r3, r1
 800305a:	761a      	strb	r2, [r3, #24]
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	e000e100 	.word	0xe000e100
 800306c:	e000ed00 	.word	0xe000ed00

08003070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003070:	b480      	push	{r7}
 8003072:	b089      	sub	sp, #36	; 0x24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f1c3 0307 	rsb	r3, r3, #7
 800308a:	2b04      	cmp	r3, #4
 800308c:	bf28      	it	cs
 800308e:	2304      	movcs	r3, #4
 8003090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	3304      	adds	r3, #4
 8003096:	2b06      	cmp	r3, #6
 8003098:	d902      	bls.n	80030a0 <NVIC_EncodePriority+0x30>
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	3b03      	subs	r3, #3
 800309e:	e000      	b.n	80030a2 <NVIC_EncodePriority+0x32>
 80030a0:	2300      	movs	r3, #0
 80030a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a4:	f04f 32ff 	mov.w	r2, #4294967295
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43da      	mvns	r2, r3
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	401a      	ands	r2, r3
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030b8:	f04f 31ff 	mov.w	r1, #4294967295
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	fa01 f303 	lsl.w	r3, r1, r3
 80030c2:	43d9      	mvns	r1, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c8:	4313      	orrs	r3, r2
         );
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3724      	adds	r7, #36	; 0x24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
	...

080030d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030e8:	d301      	bcc.n	80030ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ea:	2301      	movs	r3, #1
 80030ec:	e00f      	b.n	800310e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030ee:	4a0a      	ldr	r2, [pc, #40]	; (8003118 <SysTick_Config+0x40>)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030f6:	210f      	movs	r1, #15
 80030f8:	f04f 30ff 	mov.w	r0, #4294967295
 80030fc:	f7ff ff8e 	bl	800301c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003100:	4b05      	ldr	r3, [pc, #20]	; (8003118 <SysTick_Config+0x40>)
 8003102:	2200      	movs	r2, #0
 8003104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003106:	4b04      	ldr	r3, [pc, #16]	; (8003118 <SysTick_Config+0x40>)
 8003108:	2207      	movs	r2, #7
 800310a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	e000e010 	.word	0xe000e010

0800311c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f7ff ff29 	bl	8002f7c <__NVIC_SetPriorityGrouping>
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b086      	sub	sp, #24
 8003136:	af00      	add	r7, sp, #0
 8003138:	4603      	mov	r3, r0
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	607a      	str	r2, [r7, #4]
 800313e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003144:	f7ff ff3e 	bl	8002fc4 <__NVIC_GetPriorityGrouping>
 8003148:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	68b9      	ldr	r1, [r7, #8]
 800314e:	6978      	ldr	r0, [r7, #20]
 8003150:	f7ff ff8e 	bl	8003070 <NVIC_EncodePriority>
 8003154:	4602      	mov	r2, r0
 8003156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800315a:	4611      	mov	r1, r2
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff ff5d 	bl	800301c <__NVIC_SetPriority>
}
 8003162:	bf00      	nop
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b082      	sub	sp, #8
 800316e:	af00      	add	r7, sp, #0
 8003170:	4603      	mov	r3, r0
 8003172:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff ff31 	bl	8002fe0 <__NVIC_EnableIRQ>
}
 800317e:	bf00      	nop
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b082      	sub	sp, #8
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7ff ffa2 	bl	80030d8 <SysTick_Config>
 8003194:	4603      	mov	r3, r0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d008      	beq.n	80031c2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2204      	movs	r2, #4
 80031b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e020      	b.n	8003204 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 020e 	bic.w	r2, r2, #14
 80031d0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0201 	bic.w	r2, r2, #1
 80031e0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ea:	2101      	movs	r1, #1
 80031ec:	fa01 f202 	lsl.w	r2, r1, r2
 80031f0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003218:	2300      	movs	r3, #0
 800321a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003222:	2b02      	cmp	r3, #2
 8003224:	d005      	beq.n	8003232 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2204      	movs	r2, #4
 800322a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	73fb      	strb	r3, [r7, #15]
 8003230:	e027      	b.n	8003282 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 020e 	bic.w	r2, r2, #14
 8003240:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0201 	bic.w	r2, r2, #1
 8003250:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325a:	2101      	movs	r1, #1
 800325c:	fa01 f202 	lsl.w	r2, r1, r2
 8003260:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	4798      	blx	r3
    } 
  }
  return status;
 8003282:	7bfb      	ldrb	r3, [r7, #15]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800328c:	b480      	push	{r7}
 800328e:	b087      	sub	sp, #28
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003296:	2300      	movs	r3, #0
 8003298:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800329a:	e160      	b.n	800355e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	2101      	movs	r1, #1
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	fa01 f303 	lsl.w	r3, r1, r3
 80032a8:	4013      	ands	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 8152 	beq.w	8003558 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f003 0303 	and.w	r3, r3, #3
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d005      	beq.n	80032cc <HAL_GPIO_Init+0x40>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f003 0303 	and.w	r3, r3, #3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d130      	bne.n	800332e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	2203      	movs	r2, #3
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	43db      	mvns	r3, r3
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	4013      	ands	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003302:	2201      	movs	r2, #1
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	43db      	mvns	r3, r3
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	4013      	ands	r3, r2
 8003310:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	091b      	lsrs	r3, r3, #4
 8003318:	f003 0201 	and.w	r2, r3, #1
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	4313      	orrs	r3, r2
 8003326:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	2b03      	cmp	r3, #3
 8003338:	d017      	beq.n	800336a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	2203      	movs	r2, #3
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43db      	mvns	r3, r3
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	4013      	ands	r3, r2
 8003350:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	4313      	orrs	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d123      	bne.n	80033be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	08da      	lsrs	r2, r3, #3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3208      	adds	r2, #8
 800337e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003382:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	220f      	movs	r2, #15
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	43db      	mvns	r3, r3
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4013      	ands	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	691a      	ldr	r2, [r3, #16]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	08da      	lsrs	r2, r3, #3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3208      	adds	r2, #8
 80033b8:	6939      	ldr	r1, [r7, #16]
 80033ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	2203      	movs	r2, #3
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43db      	mvns	r3, r3
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	4013      	ands	r3, r2
 80033d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f003 0203 	and.w	r2, r3, #3
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 80ac 	beq.w	8003558 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003400:	4b5e      	ldr	r3, [pc, #376]	; (800357c <HAL_GPIO_Init+0x2f0>)
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	4a5d      	ldr	r2, [pc, #372]	; (800357c <HAL_GPIO_Init+0x2f0>)
 8003406:	f043 0301 	orr.w	r3, r3, #1
 800340a:	6193      	str	r3, [r2, #24]
 800340c:	4b5b      	ldr	r3, [pc, #364]	; (800357c <HAL_GPIO_Init+0x2f0>)
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003418:	4a59      	ldr	r2, [pc, #356]	; (8003580 <HAL_GPIO_Init+0x2f4>)
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	089b      	lsrs	r3, r3, #2
 800341e:	3302      	adds	r3, #2
 8003420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003424:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f003 0303 	and.w	r3, r3, #3
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	220f      	movs	r2, #15
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	43db      	mvns	r3, r3
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4013      	ands	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003442:	d025      	beq.n	8003490 <HAL_GPIO_Init+0x204>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a4f      	ldr	r2, [pc, #316]	; (8003584 <HAL_GPIO_Init+0x2f8>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d01f      	beq.n	800348c <HAL_GPIO_Init+0x200>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a4e      	ldr	r2, [pc, #312]	; (8003588 <HAL_GPIO_Init+0x2fc>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d019      	beq.n	8003488 <HAL_GPIO_Init+0x1fc>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a4d      	ldr	r2, [pc, #308]	; (800358c <HAL_GPIO_Init+0x300>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d013      	beq.n	8003484 <HAL_GPIO_Init+0x1f8>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a4c      	ldr	r2, [pc, #304]	; (8003590 <HAL_GPIO_Init+0x304>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d00d      	beq.n	8003480 <HAL_GPIO_Init+0x1f4>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a4b      	ldr	r2, [pc, #300]	; (8003594 <HAL_GPIO_Init+0x308>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d007      	beq.n	800347c <HAL_GPIO_Init+0x1f0>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a4a      	ldr	r2, [pc, #296]	; (8003598 <HAL_GPIO_Init+0x30c>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d101      	bne.n	8003478 <HAL_GPIO_Init+0x1ec>
 8003474:	2306      	movs	r3, #6
 8003476:	e00c      	b.n	8003492 <HAL_GPIO_Init+0x206>
 8003478:	2307      	movs	r3, #7
 800347a:	e00a      	b.n	8003492 <HAL_GPIO_Init+0x206>
 800347c:	2305      	movs	r3, #5
 800347e:	e008      	b.n	8003492 <HAL_GPIO_Init+0x206>
 8003480:	2304      	movs	r3, #4
 8003482:	e006      	b.n	8003492 <HAL_GPIO_Init+0x206>
 8003484:	2303      	movs	r3, #3
 8003486:	e004      	b.n	8003492 <HAL_GPIO_Init+0x206>
 8003488:	2302      	movs	r3, #2
 800348a:	e002      	b.n	8003492 <HAL_GPIO_Init+0x206>
 800348c:	2301      	movs	r3, #1
 800348e:	e000      	b.n	8003492 <HAL_GPIO_Init+0x206>
 8003490:	2300      	movs	r3, #0
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	f002 0203 	and.w	r2, r2, #3
 8003498:	0092      	lsls	r2, r2, #2
 800349a:	4093      	lsls	r3, r2
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	4313      	orrs	r3, r2
 80034a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034a2:	4937      	ldr	r1, [pc, #220]	; (8003580 <HAL_GPIO_Init+0x2f4>)
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	089b      	lsrs	r3, r3, #2
 80034a8:	3302      	adds	r3, #2
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034b0:	4b3a      	ldr	r3, [pc, #232]	; (800359c <HAL_GPIO_Init+0x310>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	43db      	mvns	r3, r3
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	4013      	ands	r3, r2
 80034be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80034d4:	4a31      	ldr	r2, [pc, #196]	; (800359c <HAL_GPIO_Init+0x310>)
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80034da:	4b30      	ldr	r3, [pc, #192]	; (800359c <HAL_GPIO_Init+0x310>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	43db      	mvns	r3, r3
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4013      	ands	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80034fe:	4a27      	ldr	r2, [pc, #156]	; (800359c <HAL_GPIO_Init+0x310>)
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003504:	4b25      	ldr	r3, [pc, #148]	; (800359c <HAL_GPIO_Init+0x310>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	43db      	mvns	r3, r3
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	4013      	ands	r3, r2
 8003512:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	4313      	orrs	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003528:	4a1c      	ldr	r2, [pc, #112]	; (800359c <HAL_GPIO_Init+0x310>)
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800352e:	4b1b      	ldr	r3, [pc, #108]	; (800359c <HAL_GPIO_Init+0x310>)
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	43db      	mvns	r3, r3
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	4013      	ands	r3, r2
 800353c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4313      	orrs	r3, r2
 8003550:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003552:	4a12      	ldr	r2, [pc, #72]	; (800359c <HAL_GPIO_Init+0x310>)
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	3301      	adds	r3, #1
 800355c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	fa22 f303 	lsr.w	r3, r2, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	f47f ae97 	bne.w	800329c <HAL_GPIO_Init+0x10>
  }
}
 800356e:	bf00      	nop
 8003570:	371c      	adds	r7, #28
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	40021000 	.word	0x40021000
 8003580:	40010000 	.word	0x40010000
 8003584:	48000400 	.word	0x48000400
 8003588:	48000800 	.word	0x48000800
 800358c:	48000c00 	.word	0x48000c00
 8003590:	48001000 	.word	0x48001000
 8003594:	48001400 	.word	0x48001400
 8003598:	48001800 	.word	0x48001800
 800359c:	40010400 	.word	0x40010400

080035a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	460b      	mov	r3, r1
 80035aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	691a      	ldr	r2, [r3, #16]
 80035b0:	887b      	ldrh	r3, [r7, #2]
 80035b2:	4013      	ands	r3, r2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d002      	beq.n	80035be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035b8:	2301      	movs	r3, #1
 80035ba:	73fb      	strb	r3, [r7, #15]
 80035bc:	e001      	b.n	80035c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035be:	2300      	movs	r3, #0
 80035c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	460b      	mov	r3, r1
 80035da:	807b      	strh	r3, [r7, #2]
 80035dc:	4613      	mov	r3, r2
 80035de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035e0:	787b      	ldrb	r3, [r7, #1]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035e6:	887a      	ldrh	r2, [r7, #2]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035ec:	e002      	b.n	80035f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035ee:	887a      	ldrh	r2, [r7, #2]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	460b      	mov	r3, r1
 800360a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003612:	887a      	ldrh	r2, [r7, #2]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4013      	ands	r3, r2
 8003618:	041a      	lsls	r2, r3, #16
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	43d9      	mvns	r1, r3
 800361e:	887b      	ldrh	r3, [r7, #2]
 8003620:	400b      	ands	r3, r1
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	619a      	str	r2, [r3, #24]
}
 8003628:	bf00      	nop
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800363e:	4b08      	ldr	r3, [pc, #32]	; (8003660 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003640:	695a      	ldr	r2, [r3, #20]
 8003642:	88fb      	ldrh	r3, [r7, #6]
 8003644:	4013      	ands	r3, r2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d006      	beq.n	8003658 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800364a:	4a05      	ldr	r2, [pc, #20]	; (8003660 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800364c:	88fb      	ldrh	r3, [r7, #6]
 800364e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003650:	88fb      	ldrh	r3, [r7, #6]
 8003652:	4618      	mov	r0, r3
 8003654:	f7fd fa1a 	bl	8000a8c <HAL_GPIO_EXTI_Callback>
  }
}
 8003658:	bf00      	nop
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40010400 	.word	0x40010400

08003664 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800366a:	af00      	add	r7, sp, #0
 800366c:	1d3b      	adds	r3, r7, #4
 800366e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003670:	1d3b      	adds	r3, r7, #4
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d102      	bne.n	800367e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	f000 bf01 	b.w	8004480 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800367e:	1d3b      	adds	r3, r7, #4
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 8160 	beq.w	800394e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800368e:	4bae      	ldr	r3, [pc, #696]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f003 030c 	and.w	r3, r3, #12
 8003696:	2b04      	cmp	r3, #4
 8003698:	d00c      	beq.n	80036b4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800369a:	4bab      	ldr	r3, [pc, #684]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	2b08      	cmp	r3, #8
 80036a4:	d159      	bne.n	800375a <HAL_RCC_OscConfig+0xf6>
 80036a6:	4ba8      	ldr	r3, [pc, #672]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80036ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b2:	d152      	bne.n	800375a <HAL_RCC_OscConfig+0xf6>
 80036b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036b8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036bc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80036c0:	fa93 f3a3 	rbit	r3, r3
 80036c4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80036c8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036cc:	fab3 f383 	clz	r3, r3
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d102      	bne.n	80036e6 <HAL_RCC_OscConfig+0x82>
 80036e0:	4b99      	ldr	r3, [pc, #612]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	e015      	b.n	8003712 <HAL_RCC_OscConfig+0xae>
 80036e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036ea:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80036f2:	fa93 f3a3 	rbit	r3, r3
 80036f6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80036fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036fe:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003702:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003706:	fa93 f3a3 	rbit	r3, r3
 800370a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800370e:	4b8e      	ldr	r3, [pc, #568]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003716:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800371a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800371e:	fa92 f2a2 	rbit	r2, r2
 8003722:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003726:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800372a:	fab2 f282 	clz	r2, r2
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	f042 0220 	orr.w	r2, r2, #32
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	f002 021f 	and.w	r2, r2, #31
 800373a:	2101      	movs	r1, #1
 800373c:	fa01 f202 	lsl.w	r2, r1, r2
 8003740:	4013      	ands	r3, r2
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 8102 	beq.w	800394c <HAL_RCC_OscConfig+0x2e8>
 8003748:	1d3b      	adds	r3, r7, #4
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	f040 80fc 	bne.w	800394c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	f000 be93 	b.w	8004480 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800375a:	1d3b      	adds	r3, r7, #4
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003764:	d106      	bne.n	8003774 <HAL_RCC_OscConfig+0x110>
 8003766:	4b78      	ldr	r3, [pc, #480]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a77      	ldr	r2, [pc, #476]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 800376c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	e030      	b.n	80037d6 <HAL_RCC_OscConfig+0x172>
 8003774:	1d3b      	adds	r3, r7, #4
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10c      	bne.n	8003798 <HAL_RCC_OscConfig+0x134>
 800377e:	4b72      	ldr	r3, [pc, #456]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a71      	ldr	r2, [pc, #452]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 8003784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003788:	6013      	str	r3, [r2, #0]
 800378a:	4b6f      	ldr	r3, [pc, #444]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a6e      	ldr	r2, [pc, #440]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 8003790:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	e01e      	b.n	80037d6 <HAL_RCC_OscConfig+0x172>
 8003798:	1d3b      	adds	r3, r7, #4
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037a2:	d10c      	bne.n	80037be <HAL_RCC_OscConfig+0x15a>
 80037a4:	4b68      	ldr	r3, [pc, #416]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a67      	ldr	r2, [pc, #412]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 80037aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037ae:	6013      	str	r3, [r2, #0]
 80037b0:	4b65      	ldr	r3, [pc, #404]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a64      	ldr	r2, [pc, #400]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 80037b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ba:	6013      	str	r3, [r2, #0]
 80037bc:	e00b      	b.n	80037d6 <HAL_RCC_OscConfig+0x172>
 80037be:	4b62      	ldr	r3, [pc, #392]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a61      	ldr	r2, [pc, #388]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 80037c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	4b5f      	ldr	r3, [pc, #380]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a5e      	ldr	r2, [pc, #376]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 80037d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037d4:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037d6:	1d3b      	adds	r3, r7, #4
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d059      	beq.n	8003894 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e0:	f7fe fa0e 	bl	8001c00 <HAL_GetTick>
 80037e4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e8:	e00a      	b.n	8003800 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037ea:	f7fe fa09 	bl	8001c00 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b64      	cmp	r3, #100	; 0x64
 80037f8:	d902      	bls.n	8003800 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	f000 be40 	b.w	8004480 <HAL_RCC_OscConfig+0xe1c>
 8003800:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003804:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003808:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800380c:	fa93 f3a3 	rbit	r3, r3
 8003810:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003814:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003818:	fab3 f383 	clz	r3, r3
 800381c:	b2db      	uxtb	r3, r3
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	b2db      	uxtb	r3, r3
 8003822:	f043 0301 	orr.w	r3, r3, #1
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b01      	cmp	r3, #1
 800382a:	d102      	bne.n	8003832 <HAL_RCC_OscConfig+0x1ce>
 800382c:	4b46      	ldr	r3, [pc, #280]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	e015      	b.n	800385e <HAL_RCC_OscConfig+0x1fa>
 8003832:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003836:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800383e:	fa93 f3a3 	rbit	r3, r3
 8003842:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003846:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800384a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800384e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003852:	fa93 f3a3 	rbit	r3, r3
 8003856:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800385a:	4b3b      	ldr	r3, [pc, #236]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003862:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003866:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800386a:	fa92 f2a2 	rbit	r2, r2
 800386e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003872:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003876:	fab2 f282 	clz	r2, r2
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	f042 0220 	orr.w	r2, r2, #32
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	f002 021f 	and.w	r2, r2, #31
 8003886:	2101      	movs	r1, #1
 8003888:	fa01 f202 	lsl.w	r2, r1, r2
 800388c:	4013      	ands	r3, r2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d0ab      	beq.n	80037ea <HAL_RCC_OscConfig+0x186>
 8003892:	e05c      	b.n	800394e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003894:	f7fe f9b4 	bl	8001c00 <HAL_GetTick>
 8003898:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800389c:	e00a      	b.n	80038b4 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800389e:	f7fe f9af 	bl	8001c00 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b64      	cmp	r3, #100	; 0x64
 80038ac:	d902      	bls.n	80038b4 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	f000 bde6 	b.w	8004480 <HAL_RCC_OscConfig+0xe1c>
 80038b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038b8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038bc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80038c0:	fa93 f3a3 	rbit	r3, r3
 80038c4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80038c8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038cc:	fab3 f383 	clz	r3, r3
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	095b      	lsrs	r3, r3, #5
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	f043 0301 	orr.w	r3, r3, #1
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d102      	bne.n	80038e6 <HAL_RCC_OscConfig+0x282>
 80038e0:	4b19      	ldr	r3, [pc, #100]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	e015      	b.n	8003912 <HAL_RCC_OscConfig+0x2ae>
 80038e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038ea:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80038f2:	fa93 f3a3 	rbit	r3, r3
 80038f6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80038fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038fe:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003902:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003906:	fa93 f3a3 	rbit	r3, r3
 800390a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800390e:	4b0e      	ldr	r3, [pc, #56]	; (8003948 <HAL_RCC_OscConfig+0x2e4>)
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003916:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800391a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800391e:	fa92 f2a2 	rbit	r2, r2
 8003922:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003926:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800392a:	fab2 f282 	clz	r2, r2
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	f042 0220 	orr.w	r2, r2, #32
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	f002 021f 	and.w	r2, r2, #31
 800393a:	2101      	movs	r1, #1
 800393c:	fa01 f202 	lsl.w	r2, r1, r2
 8003940:	4013      	ands	r3, r2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1ab      	bne.n	800389e <HAL_RCC_OscConfig+0x23a>
 8003946:	e002      	b.n	800394e <HAL_RCC_OscConfig+0x2ea>
 8003948:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800394c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800394e:	1d3b      	adds	r3, r7, #4
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 8170 	beq.w	8003c3e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800395e:	4bd0      	ldr	r3, [pc, #832]	; (8003ca0 <HAL_RCC_OscConfig+0x63c>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f003 030c 	and.w	r3, r3, #12
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00c      	beq.n	8003984 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800396a:	4bcd      	ldr	r3, [pc, #820]	; (8003ca0 <HAL_RCC_OscConfig+0x63c>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f003 030c 	and.w	r3, r3, #12
 8003972:	2b08      	cmp	r3, #8
 8003974:	d16d      	bne.n	8003a52 <HAL_RCC_OscConfig+0x3ee>
 8003976:	4bca      	ldr	r3, [pc, #808]	; (8003ca0 <HAL_RCC_OscConfig+0x63c>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800397e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003982:	d166      	bne.n	8003a52 <HAL_RCC_OscConfig+0x3ee>
 8003984:	2302      	movs	r3, #2
 8003986:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800398e:	fa93 f3a3 	rbit	r3, r3
 8003992:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003996:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800399a:	fab3 f383 	clz	r3, r3
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	095b      	lsrs	r3, r3, #5
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	f043 0301 	orr.w	r3, r3, #1
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d102      	bne.n	80039b4 <HAL_RCC_OscConfig+0x350>
 80039ae:	4bbc      	ldr	r3, [pc, #752]	; (8003ca0 <HAL_RCC_OscConfig+0x63c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	e013      	b.n	80039dc <HAL_RCC_OscConfig+0x378>
 80039b4:	2302      	movs	r3, #2
 80039b6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ba:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80039be:	fa93 f3a3 	rbit	r3, r3
 80039c2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80039c6:	2302      	movs	r3, #2
 80039c8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80039cc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80039d0:	fa93 f3a3 	rbit	r3, r3
 80039d4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80039d8:	4bb1      	ldr	r3, [pc, #708]	; (8003ca0 <HAL_RCC_OscConfig+0x63c>)
 80039da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039dc:	2202      	movs	r2, #2
 80039de:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80039e2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80039e6:	fa92 f2a2 	rbit	r2, r2
 80039ea:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80039ee:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80039f2:	fab2 f282 	clz	r2, r2
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	f042 0220 	orr.w	r2, r2, #32
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	f002 021f 	and.w	r2, r2, #31
 8003a02:	2101      	movs	r1, #1
 8003a04:	fa01 f202 	lsl.w	r2, r1, r2
 8003a08:	4013      	ands	r3, r2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d007      	beq.n	8003a1e <HAL_RCC_OscConfig+0x3ba>
 8003a0e:	1d3b      	adds	r3, r7, #4
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d002      	beq.n	8003a1e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	f000 bd31 	b.w	8004480 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a1e:	4ba0      	ldr	r3, [pc, #640]	; (8003ca0 <HAL_RCC_OscConfig+0x63c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a26:	1d3b      	adds	r3, r7, #4
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	21f8      	movs	r1, #248	; 0xf8
 8003a2e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a32:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003a36:	fa91 f1a1 	rbit	r1, r1
 8003a3a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003a3e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003a42:	fab1 f181 	clz	r1, r1
 8003a46:	b2c9      	uxtb	r1, r1
 8003a48:	408b      	lsls	r3, r1
 8003a4a:	4995      	ldr	r1, [pc, #596]	; (8003ca0 <HAL_RCC_OscConfig+0x63c>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a50:	e0f5      	b.n	8003c3e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a52:	1d3b      	adds	r3, r7, #4
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 8085 	beq.w	8003b68 <HAL_RCC_OscConfig+0x504>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a64:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003a68:	fa93 f3a3 	rbit	r3, r3
 8003a6c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003a70:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a74:	fab3 f383 	clz	r3, r3
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a7e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	461a      	mov	r2, r3
 8003a86:	2301      	movs	r3, #1
 8003a88:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8a:	f7fe f8b9 	bl	8001c00 <HAL_GetTick>
 8003a8e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a92:	e00a      	b.n	8003aaa <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a94:	f7fe f8b4 	bl	8001c00 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d902      	bls.n	8003aaa <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	f000 bceb 	b.w	8004480 <HAL_RCC_OscConfig+0xe1c>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003ab4:	fa93 f3a3 	rbit	r3, r3
 8003ab8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003abc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac0:	fab3 f383 	clz	r3, r3
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	095b      	lsrs	r3, r3, #5
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	f043 0301 	orr.w	r3, r3, #1
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d102      	bne.n	8003ada <HAL_RCC_OscConfig+0x476>
 8003ad4:	4b72      	ldr	r3, [pc, #456]	; (8003ca0 <HAL_RCC_OscConfig+0x63c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	e013      	b.n	8003b02 <HAL_RCC_OscConfig+0x49e>
 8003ada:	2302      	movs	r3, #2
 8003adc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003ae4:	fa93 f3a3 	rbit	r3, r3
 8003ae8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003aec:	2302      	movs	r3, #2
 8003aee:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003af2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003af6:	fa93 f3a3 	rbit	r3, r3
 8003afa:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003afe:	4b68      	ldr	r3, [pc, #416]	; (8003ca0 <HAL_RCC_OscConfig+0x63c>)
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	2202      	movs	r2, #2
 8003b04:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003b08:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003b0c:	fa92 f2a2 	rbit	r2, r2
 8003b10:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003b14:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003b18:	fab2 f282 	clz	r2, r2
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	f042 0220 	orr.w	r2, r2, #32
 8003b22:	b2d2      	uxtb	r2, r2
 8003b24:	f002 021f 	and.w	r2, r2, #31
 8003b28:	2101      	movs	r1, #1
 8003b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b2e:	4013      	ands	r3, r2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0af      	beq.n	8003a94 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b34:	4b5a      	ldr	r3, [pc, #360]	; (8003ca0 <HAL_RCC_OscConfig+0x63c>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b3c:	1d3b      	adds	r3, r7, #4
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	21f8      	movs	r1, #248	; 0xf8
 8003b44:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b48:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003b4c:	fa91 f1a1 	rbit	r1, r1
 8003b50:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003b54:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003b58:	fab1 f181 	clz	r1, r1
 8003b5c:	b2c9      	uxtb	r1, r1
 8003b5e:	408b      	lsls	r3, r1
 8003b60:	494f      	ldr	r1, [pc, #316]	; (8003ca0 <HAL_RCC_OscConfig+0x63c>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	600b      	str	r3, [r1, #0]
 8003b66:	e06a      	b.n	8003c3e <HAL_RCC_OscConfig+0x5da>
 8003b68:	2301      	movs	r3, #1
 8003b6a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003b72:	fa93 f3a3 	rbit	r3, r3
 8003b76:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003b7a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b7e:	fab3 f383 	clz	r3, r3
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b88:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	461a      	mov	r2, r3
 8003b90:	2300      	movs	r3, #0
 8003b92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b94:	f7fe f834 	bl	8001c00 <HAL_GetTick>
 8003b98:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b9c:	e00a      	b.n	8003bb4 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b9e:	f7fe f82f 	bl	8001c00 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d902      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	f000 bc66 	b.w	8004480 <HAL_RCC_OscConfig+0xe1c>
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003bbe:	fa93 f3a3 	rbit	r3, r3
 8003bc2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003bc6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bca:	fab3 f383 	clz	r3, r3
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	095b      	lsrs	r3, r3, #5
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	f043 0301 	orr.w	r3, r3, #1
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d102      	bne.n	8003be4 <HAL_RCC_OscConfig+0x580>
 8003bde:	4b30      	ldr	r3, [pc, #192]	; (8003ca0 <HAL_RCC_OscConfig+0x63c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	e013      	b.n	8003c0c <HAL_RCC_OscConfig+0x5a8>
 8003be4:	2302      	movs	r3, #2
 8003be6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bee:	fa93 f3a3 	rbit	r3, r3
 8003bf2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003bfc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003c00:	fa93 f3a3 	rbit	r3, r3
 8003c04:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003c08:	4b25      	ldr	r3, [pc, #148]	; (8003ca0 <HAL_RCC_OscConfig+0x63c>)
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003c12:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003c16:	fa92 f2a2 	rbit	r2, r2
 8003c1a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003c1e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003c22:	fab2 f282 	clz	r2, r2
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	f042 0220 	orr.w	r2, r2, #32
 8003c2c:	b2d2      	uxtb	r2, r2
 8003c2e:	f002 021f 	and.w	r2, r2, #31
 8003c32:	2101      	movs	r1, #1
 8003c34:	fa01 f202 	lsl.w	r2, r1, r2
 8003c38:	4013      	ands	r3, r2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1af      	bne.n	8003b9e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c3e:	1d3b      	adds	r3, r7, #4
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0308 	and.w	r3, r3, #8
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 80da 	beq.w	8003e02 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c4e:	1d3b      	adds	r3, r7, #4
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d069      	beq.n	8003d2c <HAL_RCC_OscConfig+0x6c8>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c62:	fa93 f3a3 	rbit	r3, r3
 8003c66:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003c6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c6e:	fab3 f383 	clz	r3, r3
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	461a      	mov	r2, r3
 8003c76:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <HAL_RCC_OscConfig+0x640>)
 8003c78:	4413      	add	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	2301      	movs	r3, #1
 8003c80:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c82:	f7fd ffbd 	bl	8001c00 <HAL_GetTick>
 8003c86:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c8a:	e00d      	b.n	8003ca8 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c8c:	f7fd ffb8 	bl	8001c00 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d905      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e3ef      	b.n	8004480 <HAL_RCC_OscConfig+0xe1c>
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	10908120 	.word	0x10908120
 8003ca8:	2302      	movs	r3, #2
 8003caa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cb2:	fa93 f2a3 	rbit	r2, r3
 8003cb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	fa93 f2a3 	rbit	r2, r3
 8003cce:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003cd8:	2202      	movs	r2, #2
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	fa93 f2a3 	rbit	r2, r3
 8003ce6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003cea:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cec:	4ba4      	ldr	r3, [pc, #656]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003cee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cf0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003cf4:	2102      	movs	r1, #2
 8003cf6:	6019      	str	r1, [r3, #0]
 8003cf8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	fa93 f1a3 	rbit	r1, r3
 8003d02:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003d06:	6019      	str	r1, [r3, #0]
  return result;
 8003d08:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	fab3 f383 	clz	r3, r3
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	f003 031f 	and.w	r3, r3, #31
 8003d1e:	2101      	movs	r1, #1
 8003d20:	fa01 f303 	lsl.w	r3, r1, r3
 8003d24:	4013      	ands	r3, r2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0b0      	beq.n	8003c8c <HAL_RCC_OscConfig+0x628>
 8003d2a:	e06a      	b.n	8003e02 <HAL_RCC_OscConfig+0x79e>
 8003d2c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003d30:	2201      	movs	r2, #1
 8003d32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d34:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	fa93 f2a3 	rbit	r2, r3
 8003d3e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003d42:	601a      	str	r2, [r3, #0]
  return result;
 8003d44:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003d48:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d4a:	fab3 f383 	clz	r3, r3
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	461a      	mov	r2, r3
 8003d52:	4b8c      	ldr	r3, [pc, #560]	; (8003f84 <HAL_RCC_OscConfig+0x920>)
 8003d54:	4413      	add	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	461a      	mov	r2, r3
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d5e:	f7fd ff4f 	bl	8001c00 <HAL_GetTick>
 8003d62:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d66:	e009      	b.n	8003d7c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d68:	f7fd ff4a 	bl	8001c00 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e381      	b.n	8004480 <HAL_RCC_OscConfig+0xe1c>
 8003d7c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003d80:	2202      	movs	r2, #2
 8003d82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d84:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	fa93 f2a3 	rbit	r2, r3
 8003d8e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003d98:	2202      	movs	r2, #2
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	fa93 f2a3 	rbit	r2, r3
 8003da6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003db0:	2202      	movs	r2, #2
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	fa93 f2a3 	rbit	r2, r3
 8003dbe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003dc2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc4:	4b6e      	ldr	r3, [pc, #440]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003dc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dc8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003dcc:	2102      	movs	r1, #2
 8003dce:	6019      	str	r1, [r3, #0]
 8003dd0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	fa93 f1a3 	rbit	r1, r3
 8003dda:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003dde:	6019      	str	r1, [r3, #0]
  return result;
 8003de0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	fab3 f383 	clz	r3, r3
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	f003 031f 	and.w	r3, r3, #31
 8003df6:	2101      	movs	r1, #1
 8003df8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1b2      	bne.n	8003d68 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e02:	1d3b      	adds	r3, r7, #4
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 8157 	beq.w	80040c0 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e12:	2300      	movs	r3, #0
 8003e14:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e18:	4b59      	ldr	r3, [pc, #356]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d112      	bne.n	8003e4a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e24:	4b56      	ldr	r3, [pc, #344]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	4a55      	ldr	r2, [pc, #340]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e2e:	61d3      	str	r3, [r2, #28]
 8003e30:	4b53      	ldr	r3, [pc, #332]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003e38:	f107 030c 	add.w	r3, r7, #12
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	f107 030c 	add.w	r3, r7, #12
 8003e42:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003e44:	2301      	movs	r3, #1
 8003e46:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e4a:	4b4f      	ldr	r3, [pc, #316]	; (8003f88 <HAL_RCC_OscConfig+0x924>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d11a      	bne.n	8003e8c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e56:	4b4c      	ldr	r3, [pc, #304]	; (8003f88 <HAL_RCC_OscConfig+0x924>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a4b      	ldr	r2, [pc, #300]	; (8003f88 <HAL_RCC_OscConfig+0x924>)
 8003e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e60:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e62:	f7fd fecd 	bl	8001c00 <HAL_GetTick>
 8003e66:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e6a:	e009      	b.n	8003e80 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e6c:	f7fd fec8 	bl	8001c00 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b64      	cmp	r3, #100	; 0x64
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e2ff      	b.n	8004480 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e80:	4b41      	ldr	r3, [pc, #260]	; (8003f88 <HAL_RCC_OscConfig+0x924>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0ef      	beq.n	8003e6c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e8c:	1d3b      	adds	r3, r7, #4
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d106      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x840>
 8003e96:	4b3a      	ldr	r3, [pc, #232]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	4a39      	ldr	r2, [pc, #228]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003e9c:	f043 0301 	orr.w	r3, r3, #1
 8003ea0:	6213      	str	r3, [r2, #32]
 8003ea2:	e02f      	b.n	8003f04 <HAL_RCC_OscConfig+0x8a0>
 8003ea4:	1d3b      	adds	r3, r7, #4
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10c      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x864>
 8003eae:	4b34      	ldr	r3, [pc, #208]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	4a33      	ldr	r2, [pc, #204]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003eb4:	f023 0301 	bic.w	r3, r3, #1
 8003eb8:	6213      	str	r3, [r2, #32]
 8003eba:	4b31      	ldr	r3, [pc, #196]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	4a30      	ldr	r2, [pc, #192]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003ec0:	f023 0304 	bic.w	r3, r3, #4
 8003ec4:	6213      	str	r3, [r2, #32]
 8003ec6:	e01d      	b.n	8003f04 <HAL_RCC_OscConfig+0x8a0>
 8003ec8:	1d3b      	adds	r3, r7, #4
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2b05      	cmp	r3, #5
 8003ed0:	d10c      	bne.n	8003eec <HAL_RCC_OscConfig+0x888>
 8003ed2:	4b2b      	ldr	r3, [pc, #172]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	4a2a      	ldr	r2, [pc, #168]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003ed8:	f043 0304 	orr.w	r3, r3, #4
 8003edc:	6213      	str	r3, [r2, #32]
 8003ede:	4b28      	ldr	r3, [pc, #160]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	4a27      	ldr	r2, [pc, #156]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003ee4:	f043 0301 	orr.w	r3, r3, #1
 8003ee8:	6213      	str	r3, [r2, #32]
 8003eea:	e00b      	b.n	8003f04 <HAL_RCC_OscConfig+0x8a0>
 8003eec:	4b24      	ldr	r3, [pc, #144]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	4a23      	ldr	r2, [pc, #140]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003ef2:	f023 0301 	bic.w	r3, r3, #1
 8003ef6:	6213      	str	r3, [r2, #32]
 8003ef8:	4b21      	ldr	r3, [pc, #132]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	4a20      	ldr	r2, [pc, #128]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003efe:	f023 0304 	bic.w	r3, r3, #4
 8003f02:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f04:	1d3b      	adds	r3, r7, #4
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d06a      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f0e:	f7fd fe77 	bl	8001c00 <HAL_GetTick>
 8003f12:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f16:	e00b      	b.n	8003f30 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f18:	f7fd fe72 	bl	8001c00 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e2a7      	b.n	8004480 <HAL_RCC_OscConfig+0xe1c>
 8003f30:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003f34:	2202      	movs	r2, #2
 8003f36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f38:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	fa93 f2a3 	rbit	r2, r3
 8003f42:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	fa93 f2a3 	rbit	r2, r3
 8003f5a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003f5e:	601a      	str	r2, [r3, #0]
  return result;
 8003f60:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003f64:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f66:	fab3 f383 	clz	r3, r3
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	095b      	lsrs	r3, r3, #5
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	f043 0302 	orr.w	r3, r3, #2
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d108      	bne.n	8003f8c <HAL_RCC_OscConfig+0x928>
 8003f7a:	4b01      	ldr	r3, [pc, #4]	; (8003f80 <HAL_RCC_OscConfig+0x91c>)
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	e013      	b.n	8003fa8 <HAL_RCC_OscConfig+0x944>
 8003f80:	40021000 	.word	0x40021000
 8003f84:	10908120 	.word	0x10908120
 8003f88:	40007000 	.word	0x40007000
 8003f8c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003f90:	2202      	movs	r2, #2
 8003f92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f94:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	fa93 f2a3 	rbit	r2, r3
 8003f9e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	4bc0      	ldr	r3, [pc, #768]	; (80042a8 <HAL_RCC_OscConfig+0xc44>)
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003fac:	2102      	movs	r1, #2
 8003fae:	6011      	str	r1, [r2, #0]
 8003fb0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003fb4:	6812      	ldr	r2, [r2, #0]
 8003fb6:	fa92 f1a2 	rbit	r1, r2
 8003fba:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003fbe:	6011      	str	r1, [r2, #0]
  return result;
 8003fc0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003fc4:	6812      	ldr	r2, [r2, #0]
 8003fc6:	fab2 f282 	clz	r2, r2
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fd0:	b2d2      	uxtb	r2, r2
 8003fd2:	f002 021f 	and.w	r2, r2, #31
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	fa01 f202 	lsl.w	r2, r1, r2
 8003fdc:	4013      	ands	r3, r2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d09a      	beq.n	8003f18 <HAL_RCC_OscConfig+0x8b4>
 8003fe2:	e063      	b.n	80040ac <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fe4:	f7fd fe0c 	bl	8001c00 <HAL_GetTick>
 8003fe8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fec:	e00b      	b.n	8004006 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fee:	f7fd fe07 	bl	8001c00 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e23c      	b.n	8004480 <HAL_RCC_OscConfig+0xe1c>
 8004006:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800400a:	2202      	movs	r2, #2
 800400c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	fa93 f2a3 	rbit	r2, r3
 8004018:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004022:	2202      	movs	r2, #2
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	fa93 f2a3 	rbit	r2, r3
 8004030:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004034:	601a      	str	r2, [r3, #0]
  return result;
 8004036:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800403a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800403c:	fab3 f383 	clz	r3, r3
 8004040:	b2db      	uxtb	r3, r3
 8004042:	095b      	lsrs	r3, r3, #5
 8004044:	b2db      	uxtb	r3, r3
 8004046:	f043 0302 	orr.w	r3, r3, #2
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d102      	bne.n	8004056 <HAL_RCC_OscConfig+0x9f2>
 8004050:	4b95      	ldr	r3, [pc, #596]	; (80042a8 <HAL_RCC_OscConfig+0xc44>)
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	e00d      	b.n	8004072 <HAL_RCC_OscConfig+0xa0e>
 8004056:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800405a:	2202      	movs	r2, #2
 800405c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	fa93 f2a3 	rbit	r2, r3
 8004068:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	4b8e      	ldr	r3, [pc, #568]	; (80042a8 <HAL_RCC_OscConfig+0xc44>)
 8004070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004072:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8004076:	2102      	movs	r1, #2
 8004078:	6011      	str	r1, [r2, #0]
 800407a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800407e:	6812      	ldr	r2, [r2, #0]
 8004080:	fa92 f1a2 	rbit	r1, r2
 8004084:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004088:	6011      	str	r1, [r2, #0]
  return result;
 800408a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800408e:	6812      	ldr	r2, [r2, #0]
 8004090:	fab2 f282 	clz	r2, r2
 8004094:	b2d2      	uxtb	r2, r2
 8004096:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800409a:	b2d2      	uxtb	r2, r2
 800409c:	f002 021f 	and.w	r2, r2, #31
 80040a0:	2101      	movs	r1, #1
 80040a2:	fa01 f202 	lsl.w	r2, r1, r2
 80040a6:	4013      	ands	r3, r2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1a0      	bne.n	8003fee <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80040ac:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d105      	bne.n	80040c0 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040b4:	4b7c      	ldr	r3, [pc, #496]	; (80042a8 <HAL_RCC_OscConfig+0xc44>)
 80040b6:	69db      	ldr	r3, [r3, #28]
 80040b8:	4a7b      	ldr	r2, [pc, #492]	; (80042a8 <HAL_RCC_OscConfig+0xc44>)
 80040ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040be:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040c0:	1d3b      	adds	r3, r7, #4
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 81d9 	beq.w	800447e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040cc:	4b76      	ldr	r3, [pc, #472]	; (80042a8 <HAL_RCC_OscConfig+0xc44>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f003 030c 	and.w	r3, r3, #12
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	f000 81a6 	beq.w	8004426 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040da:	1d3b      	adds	r3, r7, #4
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	f040 811e 	bne.w	8004322 <HAL_RCC_OscConfig+0xcbe>
 80040e6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80040ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	fa93 f2a3 	rbit	r2, r3
 80040fa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80040fe:	601a      	str	r2, [r3, #0]
  return result;
 8004100:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004104:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004106:	fab3 f383 	clz	r3, r3
 800410a:	b2db      	uxtb	r3, r3
 800410c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004110:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	461a      	mov	r2, r3
 8004118:	2300      	movs	r3, #0
 800411a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800411c:	f7fd fd70 	bl	8001c00 <HAL_GetTick>
 8004120:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004124:	e009      	b.n	800413a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004126:	f7fd fd6b 	bl	8001c00 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e1a2      	b.n	8004480 <HAL_RCC_OscConfig+0xe1c>
 800413a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800413e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004142:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004144:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	fa93 f2a3 	rbit	r2, r3
 800414e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004152:	601a      	str	r2, [r3, #0]
  return result;
 8004154:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004158:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800415a:	fab3 f383 	clz	r3, r3
 800415e:	b2db      	uxtb	r3, r3
 8004160:	095b      	lsrs	r3, r3, #5
 8004162:	b2db      	uxtb	r3, r3
 8004164:	f043 0301 	orr.w	r3, r3, #1
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b01      	cmp	r3, #1
 800416c:	d102      	bne.n	8004174 <HAL_RCC_OscConfig+0xb10>
 800416e:	4b4e      	ldr	r3, [pc, #312]	; (80042a8 <HAL_RCC_OscConfig+0xc44>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	e01b      	b.n	80041ac <HAL_RCC_OscConfig+0xb48>
 8004174:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004178:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800417c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	fa93 f2a3 	rbit	r2, r3
 8004188:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004192:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	fa93 f2a3 	rbit	r2, r3
 80041a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	4b3f      	ldr	r3, [pc, #252]	; (80042a8 <HAL_RCC_OscConfig+0xc44>)
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80041b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80041b4:	6011      	str	r1, [r2, #0]
 80041b6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80041ba:	6812      	ldr	r2, [r2, #0]
 80041bc:	fa92 f1a2 	rbit	r1, r2
 80041c0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80041c4:	6011      	str	r1, [r2, #0]
  return result;
 80041c6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80041ca:	6812      	ldr	r2, [r2, #0]
 80041cc:	fab2 f282 	clz	r2, r2
 80041d0:	b2d2      	uxtb	r2, r2
 80041d2:	f042 0220 	orr.w	r2, r2, #32
 80041d6:	b2d2      	uxtb	r2, r2
 80041d8:	f002 021f 	and.w	r2, r2, #31
 80041dc:	2101      	movs	r1, #1
 80041de:	fa01 f202 	lsl.w	r2, r1, r2
 80041e2:	4013      	ands	r3, r2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d19e      	bne.n	8004126 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041e8:	4b2f      	ldr	r3, [pc, #188]	; (80042a8 <HAL_RCC_OscConfig+0xc44>)
 80041ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ec:	f023 020f 	bic.w	r2, r3, #15
 80041f0:	1d3b      	adds	r3, r7, #4
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	492c      	ldr	r1, [pc, #176]	; (80042a8 <HAL_RCC_OscConfig+0xc44>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	62cb      	str	r3, [r1, #44]	; 0x2c
 80041fc:	4b2a      	ldr	r3, [pc, #168]	; (80042a8 <HAL_RCC_OscConfig+0xc44>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004204:	1d3b      	adds	r3, r7, #4
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6a19      	ldr	r1, [r3, #32]
 800420a:	1d3b      	adds	r3, r7, #4
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	430b      	orrs	r3, r1
 8004212:	4925      	ldr	r1, [pc, #148]	; (80042a8 <HAL_RCC_OscConfig+0xc44>)
 8004214:	4313      	orrs	r3, r2
 8004216:	604b      	str	r3, [r1, #4]
 8004218:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800421c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004220:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004222:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	fa93 f2a3 	rbit	r2, r3
 800422c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004230:	601a      	str	r2, [r3, #0]
  return result;
 8004232:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004236:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004238:	fab3 f383 	clz	r3, r3
 800423c:	b2db      	uxtb	r3, r3
 800423e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004242:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	461a      	mov	r2, r3
 800424a:	2301      	movs	r3, #1
 800424c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800424e:	f7fd fcd7 	bl	8001c00 <HAL_GetTick>
 8004252:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004256:	e009      	b.n	800426c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004258:	f7fd fcd2 	bl	8001c00 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e109      	b.n	8004480 <HAL_RCC_OscConfig+0xe1c>
 800426c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004270:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004274:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004276:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	fa93 f2a3 	rbit	r2, r3
 8004280:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004284:	601a      	str	r2, [r3, #0]
  return result;
 8004286:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800428a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800428c:	fab3 f383 	clz	r3, r3
 8004290:	b2db      	uxtb	r3, r3
 8004292:	095b      	lsrs	r3, r3, #5
 8004294:	b2db      	uxtb	r3, r3
 8004296:	f043 0301 	orr.w	r3, r3, #1
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b01      	cmp	r3, #1
 800429e:	d105      	bne.n	80042ac <HAL_RCC_OscConfig+0xc48>
 80042a0:	4b01      	ldr	r3, [pc, #4]	; (80042a8 <HAL_RCC_OscConfig+0xc44>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	e01e      	b.n	80042e4 <HAL_RCC_OscConfig+0xc80>
 80042a6:	bf00      	nop
 80042a8:	40021000 	.word	0x40021000
 80042ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80042b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	fa93 f2a3 	rbit	r2, r3
 80042c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80042ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	fa93 f2a3 	rbit	r2, r3
 80042da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	4b6a      	ldr	r3, [pc, #424]	; (800448c <HAL_RCC_OscConfig+0xe28>)
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80042e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80042ec:	6011      	str	r1, [r2, #0]
 80042ee:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80042f2:	6812      	ldr	r2, [r2, #0]
 80042f4:	fa92 f1a2 	rbit	r1, r2
 80042f8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80042fc:	6011      	str	r1, [r2, #0]
  return result;
 80042fe:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004302:	6812      	ldr	r2, [r2, #0]
 8004304:	fab2 f282 	clz	r2, r2
 8004308:	b2d2      	uxtb	r2, r2
 800430a:	f042 0220 	orr.w	r2, r2, #32
 800430e:	b2d2      	uxtb	r2, r2
 8004310:	f002 021f 	and.w	r2, r2, #31
 8004314:	2101      	movs	r1, #1
 8004316:	fa01 f202 	lsl.w	r2, r1, r2
 800431a:	4013      	ands	r3, r2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d09b      	beq.n	8004258 <HAL_RCC_OscConfig+0xbf4>
 8004320:	e0ad      	b.n	800447e <HAL_RCC_OscConfig+0xe1a>
 8004322:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004326:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800432a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	fa93 f2a3 	rbit	r2, r3
 8004336:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800433a:	601a      	str	r2, [r3, #0]
  return result;
 800433c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004340:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004342:	fab3 f383 	clz	r3, r3
 8004346:	b2db      	uxtb	r3, r3
 8004348:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800434c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	461a      	mov	r2, r3
 8004354:	2300      	movs	r3, #0
 8004356:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004358:	f7fd fc52 	bl	8001c00 <HAL_GetTick>
 800435c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004360:	e009      	b.n	8004376 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004362:	f7fd fc4d 	bl	8001c00 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e084      	b.n	8004480 <HAL_RCC_OscConfig+0xe1c>
 8004376:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800437a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800437e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004380:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	fa93 f2a3 	rbit	r2, r3
 800438a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800438e:	601a      	str	r2, [r3, #0]
  return result;
 8004390:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004394:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004396:	fab3 f383 	clz	r3, r3
 800439a:	b2db      	uxtb	r3, r3
 800439c:	095b      	lsrs	r3, r3, #5
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	f043 0301 	orr.w	r3, r3, #1
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d102      	bne.n	80043b0 <HAL_RCC_OscConfig+0xd4c>
 80043aa:	4b38      	ldr	r3, [pc, #224]	; (800448c <HAL_RCC_OscConfig+0xe28>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	e01b      	b.n	80043e8 <HAL_RCC_OscConfig+0xd84>
 80043b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	fa93 f2a3 	rbit	r2, r3
 80043c4:	f107 0320 	add.w	r3, r7, #32
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	f107 031c 	add.w	r3, r7, #28
 80043ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	f107 031c 	add.w	r3, r7, #28
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	fa93 f2a3 	rbit	r2, r3
 80043de:	f107 0318 	add.w	r3, r7, #24
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	4b29      	ldr	r3, [pc, #164]	; (800448c <HAL_RCC_OscConfig+0xe28>)
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	f107 0214 	add.w	r2, r7, #20
 80043ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80043f0:	6011      	str	r1, [r2, #0]
 80043f2:	f107 0214 	add.w	r2, r7, #20
 80043f6:	6812      	ldr	r2, [r2, #0]
 80043f8:	fa92 f1a2 	rbit	r1, r2
 80043fc:	f107 0210 	add.w	r2, r7, #16
 8004400:	6011      	str	r1, [r2, #0]
  return result;
 8004402:	f107 0210 	add.w	r2, r7, #16
 8004406:	6812      	ldr	r2, [r2, #0]
 8004408:	fab2 f282 	clz	r2, r2
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	f042 0220 	orr.w	r2, r2, #32
 8004412:	b2d2      	uxtb	r2, r2
 8004414:	f002 021f 	and.w	r2, r2, #31
 8004418:	2101      	movs	r1, #1
 800441a:	fa01 f202 	lsl.w	r2, r1, r2
 800441e:	4013      	ands	r3, r2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d19e      	bne.n	8004362 <HAL_RCC_OscConfig+0xcfe>
 8004424:	e02b      	b.n	800447e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004426:	1d3b      	adds	r3, r7, #4
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d101      	bne.n	8004434 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e025      	b.n	8004480 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004434:	4b15      	ldr	r3, [pc, #84]	; (800448c <HAL_RCC_OscConfig+0xe28>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800443c:	4b13      	ldr	r3, [pc, #76]	; (800448c <HAL_RCC_OscConfig+0xe28>)
 800443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004440:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004444:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004448:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800444c:	1d3b      	adds	r3, r7, #4
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	429a      	cmp	r2, r3
 8004454:	d111      	bne.n	800447a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004456:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800445a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800445e:	1d3b      	adds	r3, r7, #4
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004464:	429a      	cmp	r2, r3
 8004466:	d108      	bne.n	800447a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004468:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800446c:	f003 020f 	and.w	r2, r3, #15
 8004470:	1d3b      	adds	r3, r7, #4
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004476:	429a      	cmp	r2, r3
 8004478:	d001      	beq.n	800447e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e000      	b.n	8004480 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	40021000 	.word	0x40021000

08004490 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b09e      	sub	sp, #120	; 0x78
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800449a:	2300      	movs	r3, #0
 800449c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e162      	b.n	800476e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044a8:	4b90      	ldr	r3, [pc, #576]	; (80046ec <HAL_RCC_ClockConfig+0x25c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0307 	and.w	r3, r3, #7
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d910      	bls.n	80044d8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b6:	4b8d      	ldr	r3, [pc, #564]	; (80046ec <HAL_RCC_ClockConfig+0x25c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f023 0207 	bic.w	r2, r3, #7
 80044be:	498b      	ldr	r1, [pc, #556]	; (80046ec <HAL_RCC_ClockConfig+0x25c>)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c6:	4b89      	ldr	r3, [pc, #548]	; (80046ec <HAL_RCC_ClockConfig+0x25c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0307 	and.w	r3, r3, #7
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d001      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e14a      	b.n	800476e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d008      	beq.n	80044f6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044e4:	4b82      	ldr	r3, [pc, #520]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	497f      	ldr	r1, [pc, #508]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 80dc 	beq.w	80046bc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d13c      	bne.n	8004586 <HAL_RCC_ClockConfig+0xf6>
 800450c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004510:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004512:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004514:	fa93 f3a3 	rbit	r3, r3
 8004518:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800451a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800451c:	fab3 f383 	clz	r3, r3
 8004520:	b2db      	uxtb	r3, r3
 8004522:	095b      	lsrs	r3, r3, #5
 8004524:	b2db      	uxtb	r3, r3
 8004526:	f043 0301 	orr.w	r3, r3, #1
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b01      	cmp	r3, #1
 800452e:	d102      	bne.n	8004536 <HAL_RCC_ClockConfig+0xa6>
 8004530:	4b6f      	ldr	r3, [pc, #444]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	e00f      	b.n	8004556 <HAL_RCC_ClockConfig+0xc6>
 8004536:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800453a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800453e:	fa93 f3a3 	rbit	r3, r3
 8004542:	667b      	str	r3, [r7, #100]	; 0x64
 8004544:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004548:	663b      	str	r3, [r7, #96]	; 0x60
 800454a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800454c:	fa93 f3a3 	rbit	r3, r3
 8004550:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004552:	4b67      	ldr	r3, [pc, #412]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800455a:	65ba      	str	r2, [r7, #88]	; 0x58
 800455c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800455e:	fa92 f2a2 	rbit	r2, r2
 8004562:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004564:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004566:	fab2 f282 	clz	r2, r2
 800456a:	b2d2      	uxtb	r2, r2
 800456c:	f042 0220 	orr.w	r2, r2, #32
 8004570:	b2d2      	uxtb	r2, r2
 8004572:	f002 021f 	and.w	r2, r2, #31
 8004576:	2101      	movs	r1, #1
 8004578:	fa01 f202 	lsl.w	r2, r1, r2
 800457c:	4013      	ands	r3, r2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d17b      	bne.n	800467a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e0f3      	b.n	800476e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b02      	cmp	r3, #2
 800458c:	d13c      	bne.n	8004608 <HAL_RCC_ClockConfig+0x178>
 800458e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004592:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004594:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004596:	fa93 f3a3 	rbit	r3, r3
 800459a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800459c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800459e:	fab3 f383 	clz	r3, r3
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	095b      	lsrs	r3, r3, #5
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	f043 0301 	orr.w	r3, r3, #1
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d102      	bne.n	80045b8 <HAL_RCC_ClockConfig+0x128>
 80045b2:	4b4f      	ldr	r3, [pc, #316]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	e00f      	b.n	80045d8 <HAL_RCC_ClockConfig+0x148>
 80045b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045c0:	fa93 f3a3 	rbit	r3, r3
 80045c4:	647b      	str	r3, [r7, #68]	; 0x44
 80045c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045ca:	643b      	str	r3, [r7, #64]	; 0x40
 80045cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045ce:	fa93 f3a3 	rbit	r3, r3
 80045d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045d4:	4b46      	ldr	r3, [pc, #280]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045dc:	63ba      	str	r2, [r7, #56]	; 0x38
 80045de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045e0:	fa92 f2a2 	rbit	r2, r2
 80045e4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80045e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045e8:	fab2 f282 	clz	r2, r2
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	f042 0220 	orr.w	r2, r2, #32
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	f002 021f 	and.w	r2, r2, #31
 80045f8:	2101      	movs	r1, #1
 80045fa:	fa01 f202 	lsl.w	r2, r1, r2
 80045fe:	4013      	ands	r3, r2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d13a      	bne.n	800467a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e0b2      	b.n	800476e <HAL_RCC_ClockConfig+0x2de>
 8004608:	2302      	movs	r3, #2
 800460a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460e:	fa93 f3a3 	rbit	r3, r3
 8004612:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004616:	fab3 f383 	clz	r3, r3
 800461a:	b2db      	uxtb	r3, r3
 800461c:	095b      	lsrs	r3, r3, #5
 800461e:	b2db      	uxtb	r3, r3
 8004620:	f043 0301 	orr.w	r3, r3, #1
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b01      	cmp	r3, #1
 8004628:	d102      	bne.n	8004630 <HAL_RCC_ClockConfig+0x1a0>
 800462a:	4b31      	ldr	r3, [pc, #196]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	e00d      	b.n	800464c <HAL_RCC_ClockConfig+0x1bc>
 8004630:	2302      	movs	r3, #2
 8004632:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004636:	fa93 f3a3 	rbit	r3, r3
 800463a:	627b      	str	r3, [r7, #36]	; 0x24
 800463c:	2302      	movs	r3, #2
 800463e:	623b      	str	r3, [r7, #32]
 8004640:	6a3b      	ldr	r3, [r7, #32]
 8004642:	fa93 f3a3 	rbit	r3, r3
 8004646:	61fb      	str	r3, [r7, #28]
 8004648:	4b29      	ldr	r3, [pc, #164]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	2202      	movs	r2, #2
 800464e:	61ba      	str	r2, [r7, #24]
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	fa92 f2a2 	rbit	r2, r2
 8004656:	617a      	str	r2, [r7, #20]
  return result;
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	fab2 f282 	clz	r2, r2
 800465e:	b2d2      	uxtb	r2, r2
 8004660:	f042 0220 	orr.w	r2, r2, #32
 8004664:	b2d2      	uxtb	r2, r2
 8004666:	f002 021f 	and.w	r2, r2, #31
 800466a:	2101      	movs	r1, #1
 800466c:	fa01 f202 	lsl.w	r2, r1, r2
 8004670:	4013      	ands	r3, r2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e079      	b.n	800476e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800467a:	4b1d      	ldr	r3, [pc, #116]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f023 0203 	bic.w	r2, r3, #3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	491a      	ldr	r1, [pc, #104]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 8004688:	4313      	orrs	r3, r2
 800468a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800468c:	f7fd fab8 	bl	8001c00 <HAL_GetTick>
 8004690:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004692:	e00a      	b.n	80046aa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004694:	f7fd fab4 	bl	8001c00 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e061      	b.n	800476e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046aa:	4b11      	ldr	r3, [pc, #68]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f003 020c 	and.w	r2, r3, #12
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d1eb      	bne.n	8004694 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046bc:	4b0b      	ldr	r3, [pc, #44]	; (80046ec <HAL_RCC_ClockConfig+0x25c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d214      	bcs.n	80046f4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ca:	4b08      	ldr	r3, [pc, #32]	; (80046ec <HAL_RCC_ClockConfig+0x25c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f023 0207 	bic.w	r2, r3, #7
 80046d2:	4906      	ldr	r1, [pc, #24]	; (80046ec <HAL_RCC_ClockConfig+0x25c>)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046da:	4b04      	ldr	r3, [pc, #16]	; (80046ec <HAL_RCC_ClockConfig+0x25c>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d005      	beq.n	80046f4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e040      	b.n	800476e <HAL_RCC_ClockConfig+0x2de>
 80046ec:	40022000 	.word	0x40022000
 80046f0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d008      	beq.n	8004712 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004700:	4b1d      	ldr	r3, [pc, #116]	; (8004778 <HAL_RCC_ClockConfig+0x2e8>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	491a      	ldr	r1, [pc, #104]	; (8004778 <HAL_RCC_ClockConfig+0x2e8>)
 800470e:	4313      	orrs	r3, r2
 8004710:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0308 	and.w	r3, r3, #8
 800471a:	2b00      	cmp	r3, #0
 800471c:	d009      	beq.n	8004732 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800471e:	4b16      	ldr	r3, [pc, #88]	; (8004778 <HAL_RCC_ClockConfig+0x2e8>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	4912      	ldr	r1, [pc, #72]	; (8004778 <HAL_RCC_ClockConfig+0x2e8>)
 800472e:	4313      	orrs	r3, r2
 8004730:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004732:	f000 f829 	bl	8004788 <HAL_RCC_GetSysClockFreq>
 8004736:	4601      	mov	r1, r0
 8004738:	4b0f      	ldr	r3, [pc, #60]	; (8004778 <HAL_RCC_ClockConfig+0x2e8>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004740:	22f0      	movs	r2, #240	; 0xf0
 8004742:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	fa92 f2a2 	rbit	r2, r2
 800474a:	60fa      	str	r2, [r7, #12]
  return result;
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	fab2 f282 	clz	r2, r2
 8004752:	b2d2      	uxtb	r2, r2
 8004754:	40d3      	lsrs	r3, r2
 8004756:	4a09      	ldr	r2, [pc, #36]	; (800477c <HAL_RCC_ClockConfig+0x2ec>)
 8004758:	5cd3      	ldrb	r3, [r2, r3]
 800475a:	fa21 f303 	lsr.w	r3, r1, r3
 800475e:	4a08      	ldr	r2, [pc, #32]	; (8004780 <HAL_RCC_ClockConfig+0x2f0>)
 8004760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004762:	4b08      	ldr	r3, [pc, #32]	; (8004784 <HAL_RCC_ClockConfig+0x2f4>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7fd fa06 	bl	8001b78 <HAL_InitTick>
  
  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3778      	adds	r7, #120	; 0x78
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	40021000 	.word	0x40021000
 800477c:	080070c0 	.word	0x080070c0
 8004780:	20000010 	.word	0x20000010
 8004784:	20000014 	.word	0x20000014

08004788 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004788:	b480      	push	{r7}
 800478a:	b08b      	sub	sp, #44	; 0x2c
 800478c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800478e:	2300      	movs	r3, #0
 8004790:	61fb      	str	r3, [r7, #28]
 8004792:	2300      	movs	r3, #0
 8004794:	61bb      	str	r3, [r7, #24]
 8004796:	2300      	movs	r3, #0
 8004798:	627b      	str	r3, [r7, #36]	; 0x24
 800479a:	2300      	movs	r3, #0
 800479c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800479e:	2300      	movs	r3, #0
 80047a0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80047a2:	4b2a      	ldr	r3, [pc, #168]	; (800484c <HAL_RCC_GetSysClockFreq+0xc4>)
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	f003 030c 	and.w	r3, r3, #12
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d002      	beq.n	80047b8 <HAL_RCC_GetSysClockFreq+0x30>
 80047b2:	2b08      	cmp	r3, #8
 80047b4:	d003      	beq.n	80047be <HAL_RCC_GetSysClockFreq+0x36>
 80047b6:	e03f      	b.n	8004838 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047b8:	4b25      	ldr	r3, [pc, #148]	; (8004850 <HAL_RCC_GetSysClockFreq+0xc8>)
 80047ba:	623b      	str	r3, [r7, #32]
      break;
 80047bc:	e03f      	b.n	800483e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80047c4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80047c8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	fa92 f2a2 	rbit	r2, r2
 80047d0:	607a      	str	r2, [r7, #4]
  return result;
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	fab2 f282 	clz	r2, r2
 80047d8:	b2d2      	uxtb	r2, r2
 80047da:	40d3      	lsrs	r3, r2
 80047dc:	4a1d      	ldr	r2, [pc, #116]	; (8004854 <HAL_RCC_GetSysClockFreq+0xcc>)
 80047de:	5cd3      	ldrb	r3, [r2, r3]
 80047e0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80047e2:	4b1a      	ldr	r3, [pc, #104]	; (800484c <HAL_RCC_GetSysClockFreq+0xc4>)
 80047e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e6:	f003 030f 	and.w	r3, r3, #15
 80047ea:	220f      	movs	r2, #15
 80047ec:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	fa92 f2a2 	rbit	r2, r2
 80047f4:	60fa      	str	r2, [r7, #12]
  return result;
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	fab2 f282 	clz	r2, r2
 80047fc:	b2d2      	uxtb	r2, r2
 80047fe:	40d3      	lsrs	r3, r2
 8004800:	4a15      	ldr	r2, [pc, #84]	; (8004858 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004802:	5cd3      	ldrb	r3, [r2, r3]
 8004804:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d008      	beq.n	8004822 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004810:	4a0f      	ldr	r2, [pc, #60]	; (8004850 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	fbb2 f2f3 	udiv	r2, r2, r3
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	fb02 f303 	mul.w	r3, r2, r3
 800481e:	627b      	str	r3, [r7, #36]	; 0x24
 8004820:	e007      	b.n	8004832 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004822:	4a0b      	ldr	r2, [pc, #44]	; (8004850 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	fbb2 f2f3 	udiv	r2, r2, r3
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	fb02 f303 	mul.w	r3, r2, r3
 8004830:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	623b      	str	r3, [r7, #32]
      break;
 8004836:	e002      	b.n	800483e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004838:	4b05      	ldr	r3, [pc, #20]	; (8004850 <HAL_RCC_GetSysClockFreq+0xc8>)
 800483a:	623b      	str	r3, [r7, #32]
      break;
 800483c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800483e:	6a3b      	ldr	r3, [r7, #32]
}
 8004840:	4618      	mov	r0, r3
 8004842:	372c      	adds	r7, #44	; 0x2c
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	40021000 	.word	0x40021000
 8004850:	007a1200 	.word	0x007a1200
 8004854:	080070d8 	.word	0x080070d8
 8004858:	080070e8 	.word	0x080070e8

0800485c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004860:	4b03      	ldr	r3, [pc, #12]	; (8004870 <HAL_RCC_GetHCLKFreq+0x14>)
 8004862:	681b      	ldr	r3, [r3, #0]
}
 8004864:	4618      	mov	r0, r3
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	20000010 	.word	0x20000010

08004874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800487a:	f7ff ffef 	bl	800485c <HAL_RCC_GetHCLKFreq>
 800487e:	4601      	mov	r1, r0
 8004880:	4b0b      	ldr	r3, [pc, #44]	; (80048b0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004888:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800488c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	fa92 f2a2 	rbit	r2, r2
 8004894:	603a      	str	r2, [r7, #0]
  return result;
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	fab2 f282 	clz	r2, r2
 800489c:	b2d2      	uxtb	r2, r2
 800489e:	40d3      	lsrs	r3, r2
 80048a0:	4a04      	ldr	r2, [pc, #16]	; (80048b4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80048a2:	5cd3      	ldrb	r3, [r2, r3]
 80048a4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80048a8:	4618      	mov	r0, r3
 80048aa:	3708      	adds	r7, #8
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	40021000 	.word	0x40021000
 80048b4:	080070d0 	.word	0x080070d0

080048b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80048be:	f7ff ffcd 	bl	800485c <HAL_RCC_GetHCLKFreq>
 80048c2:	4601      	mov	r1, r0
 80048c4:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80048cc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80048d0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	fa92 f2a2 	rbit	r2, r2
 80048d8:	603a      	str	r2, [r7, #0]
  return result;
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	fab2 f282 	clz	r2, r2
 80048e0:	b2d2      	uxtb	r2, r2
 80048e2:	40d3      	lsrs	r3, r2
 80048e4:	4a04      	ldr	r2, [pc, #16]	; (80048f8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80048e6:	5cd3      	ldrb	r3, [r2, r3]
 80048e8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80048ec:	4618      	mov	r0, r3
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	40021000 	.word	0x40021000
 80048f8:	080070d0 	.word	0x080070d0

080048fc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b092      	sub	sp, #72	; 0x48
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004908:	2300      	movs	r3, #0
 800490a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800490c:	2300      	movs	r3, #0
 800490e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800491a:	2b00      	cmp	r3, #0
 800491c:	f000 80d4 	beq.w	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004920:	4b4e      	ldr	r3, [pc, #312]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004922:	69db      	ldr	r3, [r3, #28]
 8004924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10e      	bne.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800492c:	4b4b      	ldr	r3, [pc, #300]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800492e:	69db      	ldr	r3, [r3, #28]
 8004930:	4a4a      	ldr	r2, [pc, #296]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004936:	61d3      	str	r3, [r2, #28]
 8004938:	4b48      	ldr	r3, [pc, #288]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004940:	60bb      	str	r3, [r7, #8]
 8004942:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004944:	2301      	movs	r3, #1
 8004946:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800494a:	4b45      	ldr	r3, [pc, #276]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004952:	2b00      	cmp	r3, #0
 8004954:	d118      	bne.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004956:	4b42      	ldr	r3, [pc, #264]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a41      	ldr	r2, [pc, #260]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800495c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004960:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004962:	f7fd f94d 	bl	8001c00 <HAL_GetTick>
 8004966:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004968:	e008      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800496a:	f7fd f949 	bl	8001c00 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	2b64      	cmp	r3, #100	; 0x64
 8004976:	d901      	bls.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e1d6      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800497c:	4b38      	ldr	r3, [pc, #224]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004984:	2b00      	cmp	r3, #0
 8004986:	d0f0      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004988:	4b34      	ldr	r3, [pc, #208]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004990:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 8084 	beq.w	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d07c      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049a8:	4b2c      	ldr	r3, [pc, #176]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ba:	fa93 f3a3 	rbit	r3, r3
 80049be:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80049c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049c2:	fab3 f383 	clz	r3, r3
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	461a      	mov	r2, r3
 80049ca:	4b26      	ldr	r3, [pc, #152]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80049cc:	4413      	add	r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	461a      	mov	r2, r3
 80049d2:	2301      	movs	r3, #1
 80049d4:	6013      	str	r3, [r2, #0]
 80049d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049de:	fa93 f3a3 	rbit	r3, r3
 80049e2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80049e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049e6:	fab3 f383 	clz	r3, r3
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	461a      	mov	r2, r3
 80049ee:	4b1d      	ldr	r3, [pc, #116]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80049f0:	4413      	add	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	461a      	mov	r2, r3
 80049f6:	2300      	movs	r3, #0
 80049f8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80049fa:	4a18      	ldr	r2, [pc, #96]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049fe:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d04b      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a0a:	f7fd f8f9 	bl	8001c00 <HAL_GetTick>
 8004a0e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a10:	e00a      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a12:	f7fd f8f5 	bl	8001c00 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d901      	bls.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e180      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004a28:	2302      	movs	r3, #2
 8004a2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2e:	fa93 f3a3 	rbit	r3, r3
 8004a32:	627b      	str	r3, [r7, #36]	; 0x24
 8004a34:	2302      	movs	r3, #2
 8004a36:	623b      	str	r3, [r7, #32]
 8004a38:	6a3b      	ldr	r3, [r7, #32]
 8004a3a:	fa93 f3a3 	rbit	r3, r3
 8004a3e:	61fb      	str	r3, [r7, #28]
  return result;
 8004a40:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a42:	fab3 f383 	clz	r3, r3
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	095b      	lsrs	r3, r3, #5
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	f043 0302 	orr.w	r3, r3, #2
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d108      	bne.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004a56:	4b01      	ldr	r3, [pc, #4]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	e00d      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	40007000 	.word	0x40007000
 8004a64:	10908100 	.word	0x10908100
 8004a68:	2302      	movs	r3, #2
 8004a6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	fa93 f3a3 	rbit	r3, r3
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	4ba0      	ldr	r3, [pc, #640]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a78:	2202      	movs	r2, #2
 8004a7a:	613a      	str	r2, [r7, #16]
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	fa92 f2a2 	rbit	r2, r2
 8004a82:	60fa      	str	r2, [r7, #12]
  return result;
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	fab2 f282 	clz	r2, r2
 8004a8a:	b2d2      	uxtb	r2, r2
 8004a8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a90:	b2d2      	uxtb	r2, r2
 8004a92:	f002 021f 	and.w	r2, r2, #31
 8004a96:	2101      	movs	r1, #1
 8004a98:	fa01 f202 	lsl.w	r2, r1, r2
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d0b7      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004aa2:	4b95      	ldr	r3, [pc, #596]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	4992      	ldr	r1, [pc, #584]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ab4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d105      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004abc:	4b8e      	ldr	r3, [pc, #568]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004abe:	69db      	ldr	r3, [r3, #28]
 8004ac0:	4a8d      	ldr	r2, [pc, #564]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ac2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ac6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d008      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ad4:	4b88      	ldr	r3, [pc, #544]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad8:	f023 0203 	bic.w	r2, r3, #3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	4985      	ldr	r1, [pc, #532]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d008      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004af2:	4b81      	ldr	r3, [pc, #516]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	497e      	ldr	r1, [pc, #504]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d008      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b10:	4b79      	ldr	r3, [pc, #484]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	4976      	ldr	r1, [pc, #472]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0320 	and.w	r3, r3, #32
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d008      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b2e:	4b72      	ldr	r3, [pc, #456]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b32:	f023 0210 	bic.w	r2, r3, #16
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	496f      	ldr	r1, [pc, #444]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d008      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004b4c:	4b6a      	ldr	r3, [pc, #424]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b58:	4967      	ldr	r1, [pc, #412]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d008      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b6a:	4b63      	ldr	r3, [pc, #396]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6e:	f023 0220 	bic.w	r2, r3, #32
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	4960      	ldr	r1, [pc, #384]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d008      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b88:	4b5b      	ldr	r3, [pc, #364]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	4958      	ldr	r1, [pc, #352]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0308 	and.w	r3, r3, #8
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d008      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ba6:	4b54      	ldr	r3, [pc, #336]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004baa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	4951      	ldr	r1, [pc, #324]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0310 	and.w	r3, r3, #16
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d008      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004bc4:	4b4c      	ldr	r3, [pc, #304]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	4949      	ldr	r1, [pc, #292]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d008      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004be2:	4b45      	ldr	r3, [pc, #276]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bee:	4942      	ldr	r1, [pc, #264]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d008      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004c00:	4b3d      	ldr	r3, [pc, #244]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c04:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0c:	493a      	ldr	r1, [pc, #232]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d008      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004c1e:	4b36      	ldr	r3, [pc, #216]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c22:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2a:	4933      	ldr	r1, [pc, #204]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d008      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004c3c:	4b2e      	ldr	r3, [pc, #184]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c48:	492b      	ldr	r1, [pc, #172]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d008      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004c5a:	4b27      	ldr	r3, [pc, #156]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	4924      	ldr	r1, [pc, #144]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d008      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004c78:	4b1f      	ldr	r3, [pc, #124]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c84:	491c      	ldr	r1, [pc, #112]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d008      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004c96:	4b18      	ldr	r3, [pc, #96]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca2:	4915      	ldr	r1, [pc, #84]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d008      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004cb4:	4b10      	ldr	r3, [pc, #64]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc0:	490d      	ldr	r1, [pc, #52]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d008      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004cd2:	4b09      	ldr	r3, [pc, #36]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cde:	4906      	ldr	r1, [pc, #24]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00c      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004cf0:	4b01      	ldr	r3, [pc, #4]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf4:	e002      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004cf6:	bf00      	nop
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d04:	490b      	ldr	r1, [pc, #44]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d008      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004d16:	4b07      	ldr	r3, [pc, #28]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d22:	4904      	ldr	r1, [pc, #16]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3748      	adds	r7, #72	; 0x48
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	40021000 	.word	0x40021000

08004d38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e049      	b.n	8004dde <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d106      	bne.n	8004d64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7fc fdbc 	bl	80018dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2202      	movs	r2, #2
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	3304      	adds	r3, #4
 8004d74:	4619      	mov	r1, r3
 8004d76:	4610      	mov	r0, r2
 8004d78:	f000 f9ee 	bl	8005158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
	...

08004de8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d001      	beq.n	8004e00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e04f      	b.n	8004ea0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2202      	movs	r2, #2
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68da      	ldr	r2, [r3, #12]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f042 0201 	orr.w	r2, r2, #1
 8004e16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a23      	ldr	r2, [pc, #140]	; (8004eac <HAL_TIM_Base_Start_IT+0xc4>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d01d      	beq.n	8004e5e <HAL_TIM_Base_Start_IT+0x76>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e2a:	d018      	beq.n	8004e5e <HAL_TIM_Base_Start_IT+0x76>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a1f      	ldr	r2, [pc, #124]	; (8004eb0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d013      	beq.n	8004e5e <HAL_TIM_Base_Start_IT+0x76>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a1e      	ldr	r2, [pc, #120]	; (8004eb4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d00e      	beq.n	8004e5e <HAL_TIM_Base_Start_IT+0x76>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a1c      	ldr	r2, [pc, #112]	; (8004eb8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d009      	beq.n	8004e5e <HAL_TIM_Base_Start_IT+0x76>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a1b      	ldr	r2, [pc, #108]	; (8004ebc <HAL_TIM_Base_Start_IT+0xd4>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d004      	beq.n	8004e5e <HAL_TIM_Base_Start_IT+0x76>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a19      	ldr	r2, [pc, #100]	; (8004ec0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d115      	bne.n	8004e8a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689a      	ldr	r2, [r3, #8]
 8004e64:	4b17      	ldr	r3, [pc, #92]	; (8004ec4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e66:	4013      	ands	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2b06      	cmp	r3, #6
 8004e6e:	d015      	beq.n	8004e9c <HAL_TIM_Base_Start_IT+0xb4>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e76:	d011      	beq.n	8004e9c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f042 0201 	orr.w	r2, r2, #1
 8004e86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e88:	e008      	b.n	8004e9c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f042 0201 	orr.w	r2, r2, #1
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	e000      	b.n	8004e9e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3714      	adds	r7, #20
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr
 8004eac:	40012c00 	.word	0x40012c00
 8004eb0:	40000400 	.word	0x40000400
 8004eb4:	40000800 	.word	0x40000800
 8004eb8:	40013400 	.word	0x40013400
 8004ebc:	40014000 	.word	0x40014000
 8004ec0:	40015000 	.word	0x40015000
 8004ec4:	00010007 	.word	0x00010007

08004ec8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d122      	bne.n	8004f24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d11b      	bne.n	8004f24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f06f 0202 	mvn.w	r2, #2
 8004ef4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	f003 0303 	and.w	r3, r3, #3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f905 	bl	800511a <HAL_TIM_IC_CaptureCallback>
 8004f10:	e005      	b.n	8004f1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f8f7 	bl	8005106 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 f908 	bl	800512e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f003 0304 	and.w	r3, r3, #4
 8004f2e:	2b04      	cmp	r3, #4
 8004f30:	d122      	bne.n	8004f78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f003 0304 	and.w	r3, r3, #4
 8004f3c:	2b04      	cmp	r3, #4
 8004f3e:	d11b      	bne.n	8004f78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f06f 0204 	mvn.w	r2, #4
 8004f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2202      	movs	r2, #2
 8004f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f8db 	bl	800511a <HAL_TIM_IC_CaptureCallback>
 8004f64:	e005      	b.n	8004f72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f8cd 	bl	8005106 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 f8de 	bl	800512e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	f003 0308 	and.w	r3, r3, #8
 8004f82:	2b08      	cmp	r3, #8
 8004f84:	d122      	bne.n	8004fcc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f003 0308 	and.w	r3, r3, #8
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d11b      	bne.n	8004fcc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f06f 0208 	mvn.w	r2, #8
 8004f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2204      	movs	r2, #4
 8004fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d003      	beq.n	8004fba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f8b1 	bl	800511a <HAL_TIM_IC_CaptureCallback>
 8004fb8:	e005      	b.n	8004fc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f8a3 	bl	8005106 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 f8b4 	bl	800512e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	f003 0310 	and.w	r3, r3, #16
 8004fd6:	2b10      	cmp	r3, #16
 8004fd8:	d122      	bne.n	8005020 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f003 0310 	and.w	r3, r3, #16
 8004fe4:	2b10      	cmp	r3, #16
 8004fe6:	d11b      	bne.n	8005020 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f06f 0210 	mvn.w	r2, #16
 8004ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2208      	movs	r2, #8
 8004ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005002:	2b00      	cmp	r3, #0
 8005004:	d003      	beq.n	800500e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f887 	bl	800511a <HAL_TIM_IC_CaptureCallback>
 800500c:	e005      	b.n	800501a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f879 	bl	8005106 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 f88a 	bl	800512e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b01      	cmp	r3, #1
 800502c:	d10e      	bne.n	800504c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	2b01      	cmp	r3, #1
 800503a:	d107      	bne.n	800504c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f06f 0201 	mvn.w	r2, #1
 8005044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f7fc f96e 	bl	8001328 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005056:	2b80      	cmp	r3, #128	; 0x80
 8005058:	d10e      	bne.n	8005078 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005064:	2b80      	cmp	r3, #128	; 0x80
 8005066:	d107      	bne.n	8005078 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f918 	bl	80052a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005086:	d10e      	bne.n	80050a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005092:	2b80      	cmp	r3, #128	; 0x80
 8005094:	d107      	bne.n	80050a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800509e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f90b 	bl	80052bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b0:	2b40      	cmp	r3, #64	; 0x40
 80050b2:	d10e      	bne.n	80050d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050be:	2b40      	cmp	r3, #64	; 0x40
 80050c0:	d107      	bne.n	80050d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f838 	bl	8005142 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	f003 0320 	and.w	r3, r3, #32
 80050dc:	2b20      	cmp	r3, #32
 80050de:	d10e      	bne.n	80050fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	f003 0320 	and.w	r3, r3, #32
 80050ea:	2b20      	cmp	r3, #32
 80050ec:	d107      	bne.n	80050fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f06f 0220 	mvn.w	r2, #32
 80050f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 f8cb 	bl	8005294 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050fe:	bf00      	nop
 8005100:	3708      	adds	r7, #8
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005106:	b480      	push	{r7}
 8005108:	b083      	sub	sp, #12
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800510e:	bf00      	nop
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800511a:	b480      	push	{r7}
 800511c:	b083      	sub	sp, #12
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005122:	bf00      	nop
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800512e:	b480      	push	{r7}
 8005130:	b083      	sub	sp, #12
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005142:	b480      	push	{r7}
 8005144:	b083      	sub	sp, #12
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800514a:	bf00      	nop
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
	...

08005158 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a42      	ldr	r2, [pc, #264]	; (8005274 <TIM_Base_SetConfig+0x11c>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d013      	beq.n	8005198 <TIM_Base_SetConfig+0x40>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005176:	d00f      	beq.n	8005198 <TIM_Base_SetConfig+0x40>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a3f      	ldr	r2, [pc, #252]	; (8005278 <TIM_Base_SetConfig+0x120>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d00b      	beq.n	8005198 <TIM_Base_SetConfig+0x40>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a3e      	ldr	r2, [pc, #248]	; (800527c <TIM_Base_SetConfig+0x124>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d007      	beq.n	8005198 <TIM_Base_SetConfig+0x40>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a3d      	ldr	r2, [pc, #244]	; (8005280 <TIM_Base_SetConfig+0x128>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d003      	beq.n	8005198 <TIM_Base_SetConfig+0x40>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a3c      	ldr	r2, [pc, #240]	; (8005284 <TIM_Base_SetConfig+0x12c>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d108      	bne.n	80051aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a31      	ldr	r2, [pc, #196]	; (8005274 <TIM_Base_SetConfig+0x11c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d01f      	beq.n	80051f2 <TIM_Base_SetConfig+0x9a>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b8:	d01b      	beq.n	80051f2 <TIM_Base_SetConfig+0x9a>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a2e      	ldr	r2, [pc, #184]	; (8005278 <TIM_Base_SetConfig+0x120>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d017      	beq.n	80051f2 <TIM_Base_SetConfig+0x9a>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a2d      	ldr	r2, [pc, #180]	; (800527c <TIM_Base_SetConfig+0x124>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d013      	beq.n	80051f2 <TIM_Base_SetConfig+0x9a>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a2c      	ldr	r2, [pc, #176]	; (8005280 <TIM_Base_SetConfig+0x128>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d00f      	beq.n	80051f2 <TIM_Base_SetConfig+0x9a>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a2c      	ldr	r2, [pc, #176]	; (8005288 <TIM_Base_SetConfig+0x130>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d00b      	beq.n	80051f2 <TIM_Base_SetConfig+0x9a>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a2b      	ldr	r2, [pc, #172]	; (800528c <TIM_Base_SetConfig+0x134>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d007      	beq.n	80051f2 <TIM_Base_SetConfig+0x9a>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a2a      	ldr	r2, [pc, #168]	; (8005290 <TIM_Base_SetConfig+0x138>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d003      	beq.n	80051f2 <TIM_Base_SetConfig+0x9a>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a25      	ldr	r2, [pc, #148]	; (8005284 <TIM_Base_SetConfig+0x12c>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d108      	bne.n	8005204 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	4313      	orrs	r3, r2
 8005202:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	4313      	orrs	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	689a      	ldr	r2, [r3, #8]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a12      	ldr	r2, [pc, #72]	; (8005274 <TIM_Base_SetConfig+0x11c>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d013      	beq.n	8005258 <TIM_Base_SetConfig+0x100>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a13      	ldr	r2, [pc, #76]	; (8005280 <TIM_Base_SetConfig+0x128>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d00f      	beq.n	8005258 <TIM_Base_SetConfig+0x100>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a13      	ldr	r2, [pc, #76]	; (8005288 <TIM_Base_SetConfig+0x130>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d00b      	beq.n	8005258 <TIM_Base_SetConfig+0x100>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a12      	ldr	r2, [pc, #72]	; (800528c <TIM_Base_SetConfig+0x134>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d007      	beq.n	8005258 <TIM_Base_SetConfig+0x100>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a11      	ldr	r2, [pc, #68]	; (8005290 <TIM_Base_SetConfig+0x138>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d003      	beq.n	8005258 <TIM_Base_SetConfig+0x100>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a0c      	ldr	r2, [pc, #48]	; (8005284 <TIM_Base_SetConfig+0x12c>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d103      	bne.n	8005260 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	691a      	ldr	r2, [r3, #16]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	615a      	str	r2, [r3, #20]
}
 8005266:	bf00      	nop
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	40012c00 	.word	0x40012c00
 8005278:	40000400 	.word	0x40000400
 800527c:	40000800 	.word	0x40000800
 8005280:	40013400 	.word	0x40013400
 8005284:	40015000 	.word	0x40015000
 8005288:	40014000 	.word	0x40014000
 800528c:	40014400 	.word	0x40014400
 8005290:	40014800 	.word	0x40014800

08005294 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e040      	b.n	8005364 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d106      	bne.n	80052f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7fc fb18 	bl	8001928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2224      	movs	r2, #36	; 0x24
 80052fc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 0201 	bic.w	r2, r2, #1
 800530c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 fc0e 	bl	8005b30 <UART_SetConfig>
 8005314:	4603      	mov	r3, r0
 8005316:	2b01      	cmp	r3, #1
 8005318:	d101      	bne.n	800531e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e022      	b.n	8005364 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	2b00      	cmp	r3, #0
 8005324:	d002      	beq.n	800532c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 fdd6 	bl	8005ed8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800533a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	689a      	ldr	r2, [r3, #8]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800534a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f042 0201 	orr.w	r2, r2, #1
 800535a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 fe5d 	bl	800601c <UART_CheckIdleState>
 8005362:	4603      	mov	r3, r0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3708      	adds	r7, #8
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b08a      	sub	sp, #40	; 0x28
 8005370:	af02      	add	r7, sp, #8
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	603b      	str	r3, [r7, #0]
 8005378:	4613      	mov	r3, r2
 800537a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005380:	2b20      	cmp	r3, #32
 8005382:	f040 8082 	bne.w	800548a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d002      	beq.n	8005392 <HAL_UART_Transmit+0x26>
 800538c:	88fb      	ldrh	r3, [r7, #6]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d101      	bne.n	8005396 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e07a      	b.n	800548c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800539c:	2b01      	cmp	r3, #1
 800539e:	d101      	bne.n	80053a4 <HAL_UART_Transmit+0x38>
 80053a0:	2302      	movs	r3, #2
 80053a2:	e073      	b.n	800548c <HAL_UART_Transmit+0x120>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2221      	movs	r2, #33	; 0x21
 80053b8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053ba:	f7fc fc21 	bl	8001c00 <HAL_GetTick>
 80053be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	88fa      	ldrh	r2, [r7, #6]
 80053c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	88fa      	ldrh	r2, [r7, #6]
 80053cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053d8:	d108      	bne.n	80053ec <HAL_UART_Transmit+0x80>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d104      	bne.n	80053ec <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80053e2:	2300      	movs	r3, #0
 80053e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	61bb      	str	r3, [r7, #24]
 80053ea:	e003      	b.n	80053f4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053f0:	2300      	movs	r3, #0
 80053f2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80053fc:	e02d      	b.n	800545a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2200      	movs	r2, #0
 8005406:	2180      	movs	r1, #128	; 0x80
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f000 fe50 	bl	80060ae <UART_WaitOnFlagUntilTimeout>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e039      	b.n	800548c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10b      	bne.n	8005436 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	881a      	ldrh	r2, [r3, #0]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800542a:	b292      	uxth	r2, r2
 800542c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	3302      	adds	r3, #2
 8005432:	61bb      	str	r3, [r7, #24]
 8005434:	e008      	b.n	8005448 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	781a      	ldrb	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	b292      	uxth	r2, r2
 8005440:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	3301      	adds	r3, #1
 8005446:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800544e:	b29b      	uxth	r3, r3
 8005450:	3b01      	subs	r3, #1
 8005452:	b29a      	uxth	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005460:	b29b      	uxth	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1cb      	bne.n	80053fe <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	2200      	movs	r2, #0
 800546e:	2140      	movs	r1, #64	; 0x40
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 fe1c 	bl	80060ae <UART_WaitOnFlagUntilTimeout>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e005      	b.n	800548c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2220      	movs	r2, #32
 8005484:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005486:	2300      	movs	r3, #0
 8005488:	e000      	b.n	800548c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800548a:	2302      	movs	r3, #2
  }
}
 800548c:	4618      	mov	r0, r3
 800548e:	3720      	adds	r7, #32
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b08a      	sub	sp, #40	; 0x28
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	4613      	mov	r3, r2
 80054a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054a6:	2b20      	cmp	r3, #32
 80054a8:	d13d      	bne.n	8005526 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d002      	beq.n	80054b6 <HAL_UART_Receive_IT+0x22>
 80054b0:	88fb      	ldrh	r3, [r7, #6]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e036      	b.n	8005528 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d101      	bne.n	80054c8 <HAL_UART_Receive_IT+0x34>
 80054c4:	2302      	movs	r3, #2
 80054c6:	e02f      	b.n	8005528 <HAL_UART_Receive_IT+0x94>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d018      	beq.n	8005516 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	e853 3f00 	ldrex	r3, [r3]
 80054f0:	613b      	str	r3, [r7, #16]
   return(result);
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	461a      	mov	r2, r3
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	623b      	str	r3, [r7, #32]
 8005504:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005506:	69f9      	ldr	r1, [r7, #28]
 8005508:	6a3a      	ldr	r2, [r7, #32]
 800550a:	e841 2300 	strex	r3, r2, [r1]
 800550e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1e6      	bne.n	80054e4 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005516:	88fb      	ldrh	r3, [r7, #6]
 8005518:	461a      	mov	r2, r3
 800551a:	68b9      	ldr	r1, [r7, #8]
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f000 fe8b 	bl	8006238 <UART_Start_Receive_IT>
 8005522:	4603      	mov	r3, r0
 8005524:	e000      	b.n	8005528 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005526:	2302      	movs	r3, #2
  }
}
 8005528:	4618      	mov	r0, r3
 800552a:	3728      	adds	r7, #40	; 0x28
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b0ba      	sub	sp, #232	; 0xe8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005556:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800555a:	f640 030f 	movw	r3, #2063	; 0x80f
 800555e:	4013      	ands	r3, r2
 8005560:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005564:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005568:	2b00      	cmp	r3, #0
 800556a:	d115      	bne.n	8005598 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800556c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005570:	f003 0320 	and.w	r3, r3, #32
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00f      	beq.n	8005598 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800557c:	f003 0320 	and.w	r3, r3, #32
 8005580:	2b00      	cmp	r3, #0
 8005582:	d009      	beq.n	8005598 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005588:	2b00      	cmp	r3, #0
 800558a:	f000 82a4 	beq.w	8005ad6 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	4798      	blx	r3
      }
      return;
 8005596:	e29e      	b.n	8005ad6 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005598:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 8117 	beq.w	80057d0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80055a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d106      	bne.n	80055bc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80055ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80055b2:	4b85      	ldr	r3, [pc, #532]	; (80057c8 <HAL_UART_IRQHandler+0x298>)
 80055b4:	4013      	ands	r3, r2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f000 810a 	beq.w	80057d0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80055bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055c0:	f003 0301 	and.w	r3, r3, #1
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d011      	beq.n	80055ec <HAL_UART_IRQHandler+0xbc>
 80055c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00b      	beq.n	80055ec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2201      	movs	r2, #1
 80055da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055e2:	f043 0201 	orr.w	r2, r3, #1
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055f0:	f003 0302 	and.w	r3, r3, #2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d011      	beq.n	800561c <HAL_UART_IRQHandler+0xec>
 80055f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00b      	beq.n	800561c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2202      	movs	r2, #2
 800560a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005612:	f043 0204 	orr.w	r2, r3, #4
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800561c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005620:	f003 0304 	and.w	r3, r3, #4
 8005624:	2b00      	cmp	r3, #0
 8005626:	d011      	beq.n	800564c <HAL_UART_IRQHandler+0x11c>
 8005628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00b      	beq.n	800564c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2204      	movs	r2, #4
 800563a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005642:	f043 0202 	orr.w	r2, r3, #2
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800564c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005650:	f003 0308 	and.w	r3, r3, #8
 8005654:	2b00      	cmp	r3, #0
 8005656:	d017      	beq.n	8005688 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800565c:	f003 0320 	and.w	r3, r3, #32
 8005660:	2b00      	cmp	r3, #0
 8005662:	d105      	bne.n	8005670 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005668:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00b      	beq.n	8005688 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2208      	movs	r2, #8
 8005676:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800567e:	f043 0208 	orr.w	r2, r3, #8
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800568c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005690:	2b00      	cmp	r3, #0
 8005692:	d012      	beq.n	80056ba <HAL_UART_IRQHandler+0x18a>
 8005694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005698:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00c      	beq.n	80056ba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056b0:	f043 0220 	orr.w	r2, r3, #32
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f000 820a 	beq.w	8005ada <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80056c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ca:	f003 0320 	and.w	r3, r3, #32
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00d      	beq.n	80056ee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80056d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056d6:	f003 0320 	and.w	r3, r3, #32
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d007      	beq.n	80056ee <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d003      	beq.n	80056ee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005702:	2b40      	cmp	r3, #64	; 0x40
 8005704:	d005      	beq.n	8005712 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005706:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800570a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800570e:	2b00      	cmp	r3, #0
 8005710:	d04f      	beq.n	80057b2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 fe3c 	bl	8006390 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005722:	2b40      	cmp	r3, #64	; 0x40
 8005724:	d141      	bne.n	80057aa <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	3308      	adds	r3, #8
 800572c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005730:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005734:	e853 3f00 	ldrex	r3, [r3]
 8005738:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800573c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005740:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005744:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	3308      	adds	r3, #8
 800574e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005752:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005756:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800575e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005762:	e841 2300 	strex	r3, r2, [r1]
 8005766:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800576a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1d9      	bne.n	8005726 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005776:	2b00      	cmp	r3, #0
 8005778:	d013      	beq.n	80057a2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800577e:	4a13      	ldr	r2, [pc, #76]	; (80057cc <HAL_UART_IRQHandler+0x29c>)
 8005780:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005786:	4618      	mov	r0, r3
 8005788:	f7fd fd42 	bl	8003210 <HAL_DMA_Abort_IT>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d017      	beq.n	80057c2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800579c:	4610      	mov	r0, r2
 800579e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a0:	e00f      	b.n	80057c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f9ae 	bl	8005b04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a8:	e00b      	b.n	80057c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f9aa 	bl	8005b04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057b0:	e007      	b.n	80057c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f9a6 	bl	8005b04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80057c0:	e18b      	b.n	8005ada <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057c2:	bf00      	nop
    return;
 80057c4:	e189      	b.n	8005ada <HAL_UART_IRQHandler+0x5aa>
 80057c6:	bf00      	nop
 80057c8:	04000120 	.word	0x04000120
 80057cc:	08006457 	.word	0x08006457

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	f040 8143 	bne.w	8005a60 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80057da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057de:	f003 0310 	and.w	r3, r3, #16
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 813c 	beq.w	8005a60 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80057e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057ec:	f003 0310 	and.w	r3, r3, #16
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 8135 	beq.w	8005a60 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2210      	movs	r2, #16
 80057fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005808:	2b40      	cmp	r3, #64	; 0x40
 800580a:	f040 80b1 	bne.w	8005970 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800581a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800581e:	2b00      	cmp	r3, #0
 8005820:	f000 815d 	beq.w	8005ade <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800582a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800582e:	429a      	cmp	r2, r3
 8005830:	f080 8155 	bcs.w	8005ade <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800583a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	2b20      	cmp	r3, #32
 8005846:	f000 8085 	beq.w	8005954 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005852:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005856:	e853 3f00 	ldrex	r3, [r3]
 800585a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800585e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005862:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005866:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	461a      	mov	r2, r3
 8005870:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005874:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005878:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005880:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005884:	e841 2300 	strex	r3, r2, [r1]
 8005888:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800588c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1da      	bne.n	800584a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3308      	adds	r3, #8
 800589a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800589e:	e853 3f00 	ldrex	r3, [r3]
 80058a2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80058a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058a6:	f023 0301 	bic.w	r3, r3, #1
 80058aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	3308      	adds	r3, #8
 80058b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80058b8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80058bc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058be:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80058c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80058c4:	e841 2300 	strex	r3, r2, [r1]
 80058c8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80058ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1e1      	bne.n	8005894 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3308      	adds	r3, #8
 80058d6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058da:	e853 3f00 	ldrex	r3, [r3]
 80058de:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80058e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	3308      	adds	r3, #8
 80058f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80058f4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80058f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80058fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80058fc:	e841 2300 	strex	r3, r2, [r1]
 8005900:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005902:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1e3      	bne.n	80058d0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2220      	movs	r2, #32
 800590c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800591c:	e853 3f00 	ldrex	r3, [r3]
 8005920:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005924:	f023 0310 	bic.w	r3, r3, #16
 8005928:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	461a      	mov	r2, r3
 8005932:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005936:	65bb      	str	r3, [r7, #88]	; 0x58
 8005938:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800593c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800593e:	e841 2300 	strex	r3, r2, [r1]
 8005942:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1e4      	bne.n	8005914 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800594e:	4618      	mov	r0, r3
 8005950:	f7fd fc25 	bl	800319e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005960:	b29b      	uxth	r3, r3
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	b29b      	uxth	r3, r3
 8005966:	4619      	mov	r1, r3
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 f8d5 	bl	8005b18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800596e:	e0b6      	b.n	8005ade <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800597c:	b29b      	uxth	r3, r3
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800598a:	b29b      	uxth	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 80a8 	beq.w	8005ae2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8005992:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005996:	2b00      	cmp	r3, #0
 8005998:	f000 80a3 	beq.w	8005ae2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a4:	e853 3f00 	ldrex	r3, [r3]
 80059a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	461a      	mov	r2, r3
 80059ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80059be:	647b      	str	r3, [r7, #68]	; 0x44
 80059c0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059c6:	e841 2300 	strex	r3, r2, [r1]
 80059ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1e4      	bne.n	800599c <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	3308      	adds	r3, #8
 80059d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059dc:	e853 3f00 	ldrex	r3, [r3]
 80059e0:	623b      	str	r3, [r7, #32]
   return(result);
 80059e2:	6a3b      	ldr	r3, [r7, #32]
 80059e4:	f023 0301 	bic.w	r3, r3, #1
 80059e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	3308      	adds	r3, #8
 80059f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80059f6:	633a      	str	r2, [r7, #48]	; 0x30
 80059f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059fe:	e841 2300 	strex	r3, r2, [r1]
 8005a02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1e3      	bne.n	80059d2 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	e853 3f00 	ldrex	r3, [r3]
 8005a28:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f023 0310 	bic.w	r3, r3, #16
 8005a30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	461a      	mov	r2, r3
 8005a3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a3e:	61fb      	str	r3, [r7, #28]
 8005a40:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a42:	69b9      	ldr	r1, [r7, #24]
 8005a44:	69fa      	ldr	r2, [r7, #28]
 8005a46:	e841 2300 	strex	r3, r2, [r1]
 8005a4a:	617b      	str	r3, [r7, #20]
   return(result);
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1e4      	bne.n	8005a1c <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a56:	4619      	mov	r1, r3
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 f85d 	bl	8005b18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a5e:	e040      	b.n	8005ae2 <HAL_UART_IRQHandler+0x5b2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00e      	beq.n	8005a8a <HAL_UART_IRQHandler+0x55a>
 8005a6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d008      	beq.n	8005a8a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005a80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 fe83 	bl	800678e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a88:	e02e      	b.n	8005ae8 <HAL_UART_IRQHandler+0x5b8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00e      	beq.n	8005ab4 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005a96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d008      	beq.n	8005ab4 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d01d      	beq.n	8005ae6 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	4798      	blx	r3
    }
    return;
 8005ab2:	e018      	b.n	8005ae6 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d013      	beq.n	8005ae8 <HAL_UART_IRQHandler+0x5b8>
 8005ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00d      	beq.n	8005ae8 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 fcd8 	bl	8006482 <UART_EndTransmit_IT>
    return;
 8005ad2:	bf00      	nop
 8005ad4:	e008      	b.n	8005ae8 <HAL_UART_IRQHandler+0x5b8>
      return;
 8005ad6:	bf00      	nop
 8005ad8:	e006      	b.n	8005ae8 <HAL_UART_IRQHandler+0x5b8>
    return;
 8005ada:	bf00      	nop
 8005adc:	e004      	b.n	8005ae8 <HAL_UART_IRQHandler+0x5b8>
      return;
 8005ade:	bf00      	nop
 8005ae0:	e002      	b.n	8005ae8 <HAL_UART_IRQHandler+0x5b8>
      return;
 8005ae2:	bf00      	nop
 8005ae4:	e000      	b.n	8005ae8 <HAL_UART_IRQHandler+0x5b8>
    return;
 8005ae6:	bf00      	nop
  }

}
 8005ae8:	37e8      	adds	r7, #232	; 0xe8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop

08005af0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	460b      	mov	r3, r1
 8005b22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b088      	sub	sp, #32
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	689a      	ldr	r2, [r3, #8]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	431a      	orrs	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	431a      	orrs	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	69db      	ldr	r3, [r3, #28]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	4baa      	ldr	r3, [pc, #680]	; (8005e04 <UART_SetConfig+0x2d4>)
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	6812      	ldr	r2, [r2, #0]
 8005b62:	6979      	ldr	r1, [r7, #20]
 8005b64:	430b      	orrs	r3, r1
 8005b66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68da      	ldr	r2, [r3, #12]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a1b      	ldr	r3, [r3, #32]
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a98      	ldr	r2, [pc, #608]	; (8005e08 <UART_SetConfig+0x2d8>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d121      	bne.n	8005bf0 <UART_SetConfig+0xc0>
 8005bac:	4b97      	ldr	r3, [pc, #604]	; (8005e0c <UART_SetConfig+0x2dc>)
 8005bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb0:	f003 0303 	and.w	r3, r3, #3
 8005bb4:	2b03      	cmp	r3, #3
 8005bb6:	d817      	bhi.n	8005be8 <UART_SetConfig+0xb8>
 8005bb8:	a201      	add	r2, pc, #4	; (adr r2, 8005bc0 <UART_SetConfig+0x90>)
 8005bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bbe:	bf00      	nop
 8005bc0:	08005bd1 	.word	0x08005bd1
 8005bc4:	08005bdd 	.word	0x08005bdd
 8005bc8:	08005be3 	.word	0x08005be3
 8005bcc:	08005bd7 	.word	0x08005bd7
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	77fb      	strb	r3, [r7, #31]
 8005bd4:	e0b2      	b.n	8005d3c <UART_SetConfig+0x20c>
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	77fb      	strb	r3, [r7, #31]
 8005bda:	e0af      	b.n	8005d3c <UART_SetConfig+0x20c>
 8005bdc:	2304      	movs	r3, #4
 8005bde:	77fb      	strb	r3, [r7, #31]
 8005be0:	e0ac      	b.n	8005d3c <UART_SetConfig+0x20c>
 8005be2:	2308      	movs	r3, #8
 8005be4:	77fb      	strb	r3, [r7, #31]
 8005be6:	e0a9      	b.n	8005d3c <UART_SetConfig+0x20c>
 8005be8:	2310      	movs	r3, #16
 8005bea:	77fb      	strb	r3, [r7, #31]
 8005bec:	bf00      	nop
 8005bee:	e0a5      	b.n	8005d3c <UART_SetConfig+0x20c>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a86      	ldr	r2, [pc, #536]	; (8005e10 <UART_SetConfig+0x2e0>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d123      	bne.n	8005c42 <UART_SetConfig+0x112>
 8005bfa:	4b84      	ldr	r3, [pc, #528]	; (8005e0c <UART_SetConfig+0x2dc>)
 8005bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bfe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c06:	d012      	beq.n	8005c2e <UART_SetConfig+0xfe>
 8005c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c0c:	d802      	bhi.n	8005c14 <UART_SetConfig+0xe4>
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d007      	beq.n	8005c22 <UART_SetConfig+0xf2>
 8005c12:	e012      	b.n	8005c3a <UART_SetConfig+0x10a>
 8005c14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c18:	d00c      	beq.n	8005c34 <UART_SetConfig+0x104>
 8005c1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c1e:	d003      	beq.n	8005c28 <UART_SetConfig+0xf8>
 8005c20:	e00b      	b.n	8005c3a <UART_SetConfig+0x10a>
 8005c22:	2300      	movs	r3, #0
 8005c24:	77fb      	strb	r3, [r7, #31]
 8005c26:	e089      	b.n	8005d3c <UART_SetConfig+0x20c>
 8005c28:	2302      	movs	r3, #2
 8005c2a:	77fb      	strb	r3, [r7, #31]
 8005c2c:	e086      	b.n	8005d3c <UART_SetConfig+0x20c>
 8005c2e:	2304      	movs	r3, #4
 8005c30:	77fb      	strb	r3, [r7, #31]
 8005c32:	e083      	b.n	8005d3c <UART_SetConfig+0x20c>
 8005c34:	2308      	movs	r3, #8
 8005c36:	77fb      	strb	r3, [r7, #31]
 8005c38:	e080      	b.n	8005d3c <UART_SetConfig+0x20c>
 8005c3a:	2310      	movs	r3, #16
 8005c3c:	77fb      	strb	r3, [r7, #31]
 8005c3e:	bf00      	nop
 8005c40:	e07c      	b.n	8005d3c <UART_SetConfig+0x20c>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a73      	ldr	r2, [pc, #460]	; (8005e14 <UART_SetConfig+0x2e4>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d123      	bne.n	8005c94 <UART_SetConfig+0x164>
 8005c4c:	4b6f      	ldr	r3, [pc, #444]	; (8005e0c <UART_SetConfig+0x2dc>)
 8005c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c50:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005c54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c58:	d012      	beq.n	8005c80 <UART_SetConfig+0x150>
 8005c5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c5e:	d802      	bhi.n	8005c66 <UART_SetConfig+0x136>
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d007      	beq.n	8005c74 <UART_SetConfig+0x144>
 8005c64:	e012      	b.n	8005c8c <UART_SetConfig+0x15c>
 8005c66:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c6a:	d00c      	beq.n	8005c86 <UART_SetConfig+0x156>
 8005c6c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005c70:	d003      	beq.n	8005c7a <UART_SetConfig+0x14a>
 8005c72:	e00b      	b.n	8005c8c <UART_SetConfig+0x15c>
 8005c74:	2300      	movs	r3, #0
 8005c76:	77fb      	strb	r3, [r7, #31]
 8005c78:	e060      	b.n	8005d3c <UART_SetConfig+0x20c>
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	77fb      	strb	r3, [r7, #31]
 8005c7e:	e05d      	b.n	8005d3c <UART_SetConfig+0x20c>
 8005c80:	2304      	movs	r3, #4
 8005c82:	77fb      	strb	r3, [r7, #31]
 8005c84:	e05a      	b.n	8005d3c <UART_SetConfig+0x20c>
 8005c86:	2308      	movs	r3, #8
 8005c88:	77fb      	strb	r3, [r7, #31]
 8005c8a:	e057      	b.n	8005d3c <UART_SetConfig+0x20c>
 8005c8c:	2310      	movs	r3, #16
 8005c8e:	77fb      	strb	r3, [r7, #31]
 8005c90:	bf00      	nop
 8005c92:	e053      	b.n	8005d3c <UART_SetConfig+0x20c>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a5f      	ldr	r2, [pc, #380]	; (8005e18 <UART_SetConfig+0x2e8>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d123      	bne.n	8005ce6 <UART_SetConfig+0x1b6>
 8005c9e:	4b5b      	ldr	r3, [pc, #364]	; (8005e0c <UART_SetConfig+0x2dc>)
 8005ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005ca6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005caa:	d012      	beq.n	8005cd2 <UART_SetConfig+0x1a2>
 8005cac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cb0:	d802      	bhi.n	8005cb8 <UART_SetConfig+0x188>
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d007      	beq.n	8005cc6 <UART_SetConfig+0x196>
 8005cb6:	e012      	b.n	8005cde <UART_SetConfig+0x1ae>
 8005cb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cbc:	d00c      	beq.n	8005cd8 <UART_SetConfig+0x1a8>
 8005cbe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005cc2:	d003      	beq.n	8005ccc <UART_SetConfig+0x19c>
 8005cc4:	e00b      	b.n	8005cde <UART_SetConfig+0x1ae>
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	77fb      	strb	r3, [r7, #31]
 8005cca:	e037      	b.n	8005d3c <UART_SetConfig+0x20c>
 8005ccc:	2302      	movs	r3, #2
 8005cce:	77fb      	strb	r3, [r7, #31]
 8005cd0:	e034      	b.n	8005d3c <UART_SetConfig+0x20c>
 8005cd2:	2304      	movs	r3, #4
 8005cd4:	77fb      	strb	r3, [r7, #31]
 8005cd6:	e031      	b.n	8005d3c <UART_SetConfig+0x20c>
 8005cd8:	2308      	movs	r3, #8
 8005cda:	77fb      	strb	r3, [r7, #31]
 8005cdc:	e02e      	b.n	8005d3c <UART_SetConfig+0x20c>
 8005cde:	2310      	movs	r3, #16
 8005ce0:	77fb      	strb	r3, [r7, #31]
 8005ce2:	bf00      	nop
 8005ce4:	e02a      	b.n	8005d3c <UART_SetConfig+0x20c>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a4c      	ldr	r2, [pc, #304]	; (8005e1c <UART_SetConfig+0x2ec>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d123      	bne.n	8005d38 <UART_SetConfig+0x208>
 8005cf0:	4b46      	ldr	r3, [pc, #280]	; (8005e0c <UART_SetConfig+0x2dc>)
 8005cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005cf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cfc:	d012      	beq.n	8005d24 <UART_SetConfig+0x1f4>
 8005cfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d02:	d802      	bhi.n	8005d0a <UART_SetConfig+0x1da>
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d007      	beq.n	8005d18 <UART_SetConfig+0x1e8>
 8005d08:	e012      	b.n	8005d30 <UART_SetConfig+0x200>
 8005d0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d0e:	d00c      	beq.n	8005d2a <UART_SetConfig+0x1fa>
 8005d10:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005d14:	d003      	beq.n	8005d1e <UART_SetConfig+0x1ee>
 8005d16:	e00b      	b.n	8005d30 <UART_SetConfig+0x200>
 8005d18:	2300      	movs	r3, #0
 8005d1a:	77fb      	strb	r3, [r7, #31]
 8005d1c:	e00e      	b.n	8005d3c <UART_SetConfig+0x20c>
 8005d1e:	2302      	movs	r3, #2
 8005d20:	77fb      	strb	r3, [r7, #31]
 8005d22:	e00b      	b.n	8005d3c <UART_SetConfig+0x20c>
 8005d24:	2304      	movs	r3, #4
 8005d26:	77fb      	strb	r3, [r7, #31]
 8005d28:	e008      	b.n	8005d3c <UART_SetConfig+0x20c>
 8005d2a:	2308      	movs	r3, #8
 8005d2c:	77fb      	strb	r3, [r7, #31]
 8005d2e:	e005      	b.n	8005d3c <UART_SetConfig+0x20c>
 8005d30:	2310      	movs	r3, #16
 8005d32:	77fb      	strb	r3, [r7, #31]
 8005d34:	bf00      	nop
 8005d36:	e001      	b.n	8005d3c <UART_SetConfig+0x20c>
 8005d38:	2310      	movs	r3, #16
 8005d3a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	69db      	ldr	r3, [r3, #28]
 8005d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d44:	d16e      	bne.n	8005e24 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8005d46:	7ffb      	ldrb	r3, [r7, #31]
 8005d48:	2b08      	cmp	r3, #8
 8005d4a:	d828      	bhi.n	8005d9e <UART_SetConfig+0x26e>
 8005d4c:	a201      	add	r2, pc, #4	; (adr r2, 8005d54 <UART_SetConfig+0x224>)
 8005d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d52:	bf00      	nop
 8005d54:	08005d79 	.word	0x08005d79
 8005d58:	08005d81 	.word	0x08005d81
 8005d5c:	08005d89 	.word	0x08005d89
 8005d60:	08005d9f 	.word	0x08005d9f
 8005d64:	08005d8f 	.word	0x08005d8f
 8005d68:	08005d9f 	.word	0x08005d9f
 8005d6c:	08005d9f 	.word	0x08005d9f
 8005d70:	08005d9f 	.word	0x08005d9f
 8005d74:	08005d97 	.word	0x08005d97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d78:	f7fe fd7c 	bl	8004874 <HAL_RCC_GetPCLK1Freq>
 8005d7c:	61b8      	str	r0, [r7, #24]
        break;
 8005d7e:	e013      	b.n	8005da8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d80:	f7fe fd9a 	bl	80048b8 <HAL_RCC_GetPCLK2Freq>
 8005d84:	61b8      	str	r0, [r7, #24]
        break;
 8005d86:	e00f      	b.n	8005da8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d88:	4b25      	ldr	r3, [pc, #148]	; (8005e20 <UART_SetConfig+0x2f0>)
 8005d8a:	61bb      	str	r3, [r7, #24]
        break;
 8005d8c:	e00c      	b.n	8005da8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d8e:	f7fe fcfb 	bl	8004788 <HAL_RCC_GetSysClockFreq>
 8005d92:	61b8      	str	r0, [r7, #24]
        break;
 8005d94:	e008      	b.n	8005da8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d9a:	61bb      	str	r3, [r7, #24]
        break;
 8005d9c:	e004      	b.n	8005da8 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	77bb      	strb	r3, [r7, #30]
        break;
 8005da6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f000 8086 	beq.w	8005ebc <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	005a      	lsls	r2, r3, #1
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	085b      	lsrs	r3, r3, #1
 8005dba:	441a      	add	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	2b0f      	cmp	r3, #15
 8005dcc:	d916      	bls.n	8005dfc <UART_SetConfig+0x2cc>
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dd4:	d212      	bcs.n	8005dfc <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	f023 030f 	bic.w	r3, r3, #15
 8005dde:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	085b      	lsrs	r3, r3, #1
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	f003 0307 	and.w	r3, r3, #7
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	89fb      	ldrh	r3, [r7, #14]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	89fa      	ldrh	r2, [r7, #14]
 8005df8:	60da      	str	r2, [r3, #12]
 8005dfa:	e05f      	b.n	8005ebc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	77bb      	strb	r3, [r7, #30]
 8005e00:	e05c      	b.n	8005ebc <UART_SetConfig+0x38c>
 8005e02:	bf00      	nop
 8005e04:	efff69f3 	.word	0xefff69f3
 8005e08:	40013800 	.word	0x40013800
 8005e0c:	40021000 	.word	0x40021000
 8005e10:	40004400 	.word	0x40004400
 8005e14:	40004800 	.word	0x40004800
 8005e18:	40004c00 	.word	0x40004c00
 8005e1c:	40005000 	.word	0x40005000
 8005e20:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e24:	7ffb      	ldrb	r3, [r7, #31]
 8005e26:	2b08      	cmp	r3, #8
 8005e28:	d827      	bhi.n	8005e7a <UART_SetConfig+0x34a>
 8005e2a:	a201      	add	r2, pc, #4	; (adr r2, 8005e30 <UART_SetConfig+0x300>)
 8005e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e30:	08005e55 	.word	0x08005e55
 8005e34:	08005e5d 	.word	0x08005e5d
 8005e38:	08005e65 	.word	0x08005e65
 8005e3c:	08005e7b 	.word	0x08005e7b
 8005e40:	08005e6b 	.word	0x08005e6b
 8005e44:	08005e7b 	.word	0x08005e7b
 8005e48:	08005e7b 	.word	0x08005e7b
 8005e4c:	08005e7b 	.word	0x08005e7b
 8005e50:	08005e73 	.word	0x08005e73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e54:	f7fe fd0e 	bl	8004874 <HAL_RCC_GetPCLK1Freq>
 8005e58:	61b8      	str	r0, [r7, #24]
        break;
 8005e5a:	e013      	b.n	8005e84 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e5c:	f7fe fd2c 	bl	80048b8 <HAL_RCC_GetPCLK2Freq>
 8005e60:	61b8      	str	r0, [r7, #24]
        break;
 8005e62:	e00f      	b.n	8005e84 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e64:	4b1b      	ldr	r3, [pc, #108]	; (8005ed4 <UART_SetConfig+0x3a4>)
 8005e66:	61bb      	str	r3, [r7, #24]
        break;
 8005e68:	e00c      	b.n	8005e84 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e6a:	f7fe fc8d 	bl	8004788 <HAL_RCC_GetSysClockFreq>
 8005e6e:	61b8      	str	r0, [r7, #24]
        break;
 8005e70:	e008      	b.n	8005e84 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e76:	61bb      	str	r3, [r7, #24]
        break;
 8005e78:	e004      	b.n	8005e84 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	77bb      	strb	r3, [r7, #30]
        break;
 8005e82:	bf00      	nop
    }

    if (pclk != 0U)
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d018      	beq.n	8005ebc <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	085a      	lsrs	r2, r3, #1
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	441a      	add	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	2b0f      	cmp	r3, #15
 8005ea4:	d908      	bls.n	8005eb8 <UART_SetConfig+0x388>
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eac:	d204      	bcs.n	8005eb8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	60da      	str	r2, [r3, #12]
 8005eb6:	e001      	b.n	8005ebc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005ec8:	7fbb      	ldrb	r3, [r7, #30]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3720      	adds	r7, #32
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	007a1200 	.word	0x007a1200

08005ed8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00a      	beq.n	8005f02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	430a      	orrs	r2, r1
 8005f00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00a      	beq.n	8005f24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	430a      	orrs	r2, r1
 8005f22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f28:	f003 0304 	and.w	r3, r3, #4
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00a      	beq.n	8005f46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4a:	f003 0308 	and.w	r3, r3, #8
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00a      	beq.n	8005f68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	430a      	orrs	r2, r1
 8005f66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6c:	f003 0310 	and.w	r3, r3, #16
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00a      	beq.n	8005f8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	430a      	orrs	r2, r1
 8005f88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8e:	f003 0320 	and.w	r3, r3, #32
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00a      	beq.n	8005fac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d01a      	beq.n	8005fee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fd6:	d10a      	bne.n	8005fee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00a      	beq.n	8006010 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	605a      	str	r2, [r3, #4]
  }
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b086      	sub	sp, #24
 8006020:	af02      	add	r7, sp, #8
 8006022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800602c:	f7fb fde8 	bl	8001c00 <HAL_GetTick>
 8006030:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0308 	and.w	r3, r3, #8
 800603c:	2b08      	cmp	r3, #8
 800603e:	d10e      	bne.n	800605e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006040:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f82d 	bl	80060ae <UART_WaitOnFlagUntilTimeout>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d001      	beq.n	800605e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e023      	b.n	80060a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 0304 	and.w	r3, r3, #4
 8006068:	2b04      	cmp	r3, #4
 800606a:	d10e      	bne.n	800608a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800606c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006070:	9300      	str	r3, [sp, #0]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f817 	bl	80060ae <UART_WaitOnFlagUntilTimeout>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d001      	beq.n	800608a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e00d      	b.n	80060a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2220      	movs	r2, #32
 800608e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2220      	movs	r2, #32
 8006094:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b09c      	sub	sp, #112	; 0x70
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	60f8      	str	r0, [r7, #12]
 80060b6:	60b9      	str	r1, [r7, #8]
 80060b8:	603b      	str	r3, [r7, #0]
 80060ba:	4613      	mov	r3, r2
 80060bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060be:	e0a5      	b.n	800620c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c6:	f000 80a1 	beq.w	800620c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ca:	f7fb fd99 	bl	8001c00 <HAL_GetTick>
 80060ce:	4602      	mov	r2, r0
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d302      	bcc.n	80060e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80060da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d13e      	bne.n	800615e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060e8:	e853 3f00 	ldrex	r3, [r3]
 80060ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80060ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060f4:	667b      	str	r3, [r7, #100]	; 0x64
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	461a      	mov	r2, r3
 80060fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006100:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006102:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006104:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006106:	e841 2300 	strex	r3, r2, [r1]
 800610a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800610c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1e6      	bne.n	80060e0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3308      	adds	r3, #8
 8006118:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800611c:	e853 3f00 	ldrex	r3, [r3]
 8006120:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006124:	f023 0301 	bic.w	r3, r3, #1
 8006128:	663b      	str	r3, [r7, #96]	; 0x60
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	3308      	adds	r3, #8
 8006130:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006132:	64ba      	str	r2, [r7, #72]	; 0x48
 8006134:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006136:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006138:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800613a:	e841 2300 	strex	r3, r2, [r1]
 800613e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1e5      	bne.n	8006112 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2220      	movs	r2, #32
 800614a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2220      	movs	r2, #32
 8006150:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e067      	b.n	800622e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0304 	and.w	r3, r3, #4
 8006168:	2b00      	cmp	r3, #0
 800616a:	d04f      	beq.n	800620c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006176:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800617a:	d147      	bne.n	800620c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006184:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618e:	e853 3f00 	ldrex	r3, [r3]
 8006192:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006196:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800619a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	461a      	mov	r2, r3
 80061a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061a4:	637b      	str	r3, [r7, #52]	; 0x34
 80061a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061ac:	e841 2300 	strex	r3, r2, [r1]
 80061b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80061b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1e6      	bne.n	8006186 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	3308      	adds	r3, #8
 80061be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	e853 3f00 	ldrex	r3, [r3]
 80061c6:	613b      	str	r3, [r7, #16]
   return(result);
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	f023 0301 	bic.w	r3, r3, #1
 80061ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	3308      	adds	r3, #8
 80061d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80061d8:	623a      	str	r2, [r7, #32]
 80061da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061dc:	69f9      	ldr	r1, [r7, #28]
 80061de:	6a3a      	ldr	r2, [r7, #32]
 80061e0:	e841 2300 	strex	r3, r2, [r1]
 80061e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1e5      	bne.n	80061b8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2220      	movs	r2, #32
 80061f0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2220      	movs	r2, #32
 80061f6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2220      	movs	r2, #32
 80061fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e010      	b.n	800622e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	69da      	ldr	r2, [r3, #28]
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	4013      	ands	r3, r2
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	429a      	cmp	r2, r3
 800621a:	bf0c      	ite	eq
 800621c:	2301      	moveq	r3, #1
 800621e:	2300      	movne	r3, #0
 8006220:	b2db      	uxtb	r3, r3
 8006222:	461a      	mov	r2, r3
 8006224:	79fb      	ldrb	r3, [r7, #7]
 8006226:	429a      	cmp	r2, r3
 8006228:	f43f af4a 	beq.w	80060c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3770      	adds	r7, #112	; 0x70
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
	...

08006238 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006238:	b480      	push	{r7}
 800623a:	b091      	sub	sp, #68	; 0x44
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	4613      	mov	r3, r2
 8006244:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	88fa      	ldrh	r2, [r7, #6]
 8006250:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	88fa      	ldrh	r2, [r7, #6]
 8006258:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800626a:	d10e      	bne.n	800628a <UART_Start_Receive_IT+0x52>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d105      	bne.n	8006280 <UART_Start_Receive_IT+0x48>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f240 12ff 	movw	r2, #511	; 0x1ff
 800627a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800627e:	e02d      	b.n	80062dc <UART_Start_Receive_IT+0xa4>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	22ff      	movs	r2, #255	; 0xff
 8006284:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006288:	e028      	b.n	80062dc <UART_Start_Receive_IT+0xa4>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10d      	bne.n	80062ae <UART_Start_Receive_IT+0x76>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d104      	bne.n	80062a4 <UART_Start_Receive_IT+0x6c>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	22ff      	movs	r2, #255	; 0xff
 800629e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062a2:	e01b      	b.n	80062dc <UART_Start_Receive_IT+0xa4>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	227f      	movs	r2, #127	; 0x7f
 80062a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062ac:	e016      	b.n	80062dc <UART_Start_Receive_IT+0xa4>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062b6:	d10d      	bne.n	80062d4 <UART_Start_Receive_IT+0x9c>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d104      	bne.n	80062ca <UART_Start_Receive_IT+0x92>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	227f      	movs	r2, #127	; 0x7f
 80062c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062c8:	e008      	b.n	80062dc <UART_Start_Receive_IT+0xa4>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	223f      	movs	r2, #63	; 0x3f
 80062ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062d2:	e003      	b.n	80062dc <UART_Start_Receive_IT+0xa4>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2222      	movs	r2, #34	; 0x22
 80062e8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	3308      	adds	r3, #8
 80062f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f4:	e853 3f00 	ldrex	r3, [r3]
 80062f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	f043 0301 	orr.w	r3, r3, #1
 8006300:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	3308      	adds	r3, #8
 8006308:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800630a:	637a      	str	r2, [r7, #52]	; 0x34
 800630c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006310:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006312:	e841 2300 	strex	r3, r2, [r1]
 8006316:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1e5      	bne.n	80062ea <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006326:	d107      	bne.n	8006338 <UART_Start_Receive_IT+0x100>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d103      	bne.n	8006338 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	4a15      	ldr	r2, [pc, #84]	; (8006388 <UART_Start_Receive_IT+0x150>)
 8006334:	665a      	str	r2, [r3, #100]	; 0x64
 8006336:	e002      	b.n	800633e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	4a14      	ldr	r2, [pc, #80]	; (800638c <UART_Start_Receive_IT+0x154>)
 800633c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	e853 3f00 	ldrex	r3, [r3]
 8006352:	613b      	str	r3, [r7, #16]
   return(result);
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800635a:	63bb      	str	r3, [r7, #56]	; 0x38
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	461a      	mov	r2, r3
 8006362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006364:	623b      	str	r3, [r7, #32]
 8006366:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006368:	69f9      	ldr	r1, [r7, #28]
 800636a:	6a3a      	ldr	r2, [r7, #32]
 800636c:	e841 2300 	strex	r3, r2, [r1]
 8006370:	61bb      	str	r3, [r7, #24]
   return(result);
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1e6      	bne.n	8006346 <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3744      	adds	r7, #68	; 0x44
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	08006633 	.word	0x08006633
 800638c:	080064d7 	.word	0x080064d7

08006390 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006390:	b480      	push	{r7}
 8006392:	b095      	sub	sp, #84	; 0x54
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a0:	e853 3f00 	ldrex	r3, [r3]
 80063a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	461a      	mov	r2, r3
 80063b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063b6:	643b      	str	r3, [r7, #64]	; 0x40
 80063b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80063bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063be:	e841 2300 	strex	r3, r2, [r1]
 80063c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1e6      	bne.n	8006398 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	3308      	adds	r3, #8
 80063d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d2:	6a3b      	ldr	r3, [r7, #32]
 80063d4:	e853 3f00 	ldrex	r3, [r3]
 80063d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	f023 0301 	bic.w	r3, r3, #1
 80063e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	3308      	adds	r3, #8
 80063e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063f2:	e841 2300 	strex	r3, r2, [r1]
 80063f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1e5      	bne.n	80063ca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006402:	2b01      	cmp	r3, #1
 8006404:	d118      	bne.n	8006438 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	e853 3f00 	ldrex	r3, [r3]
 8006412:	60bb      	str	r3, [r7, #8]
   return(result);
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	f023 0310 	bic.w	r3, r3, #16
 800641a:	647b      	str	r3, [r7, #68]	; 0x44
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	461a      	mov	r2, r3
 8006422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006424:	61bb      	str	r3, [r7, #24]
 8006426:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006428:	6979      	ldr	r1, [r7, #20]
 800642a:	69ba      	ldr	r2, [r7, #24]
 800642c:	e841 2300 	strex	r3, r2, [r1]
 8006430:	613b      	str	r3, [r7, #16]
   return(result);
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1e6      	bne.n	8006406 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2220      	movs	r2, #32
 800643c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	665a      	str	r2, [r3, #100]	; 0x64
}
 800644a:	bf00      	nop
 800644c:	3754      	adds	r7, #84	; 0x54
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b084      	sub	sp, #16
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006462:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f7ff fb45 	bl	8005b04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800647a:	bf00      	nop
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b088      	sub	sp, #32
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	e853 3f00 	ldrex	r3, [r3]
 8006496:	60bb      	str	r3, [r7, #8]
   return(result);
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800649e:	61fb      	str	r3, [r7, #28]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	461a      	mov	r2, r3
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	61bb      	str	r3, [r7, #24]
 80064aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ac:	6979      	ldr	r1, [r7, #20]
 80064ae:	69ba      	ldr	r2, [r7, #24]
 80064b0:	e841 2300 	strex	r3, r2, [r1]
 80064b4:	613b      	str	r3, [r7, #16]
   return(result);
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1e6      	bne.n	800648a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2220      	movs	r2, #32
 80064c0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f7ff fb11 	bl	8005af0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064ce:	bf00      	nop
 80064d0:	3720      	adds	r7, #32
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b096      	sub	sp, #88	; 0x58
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80064e4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064ec:	2b22      	cmp	r3, #34	; 0x22
 80064ee:	f040 8094 	bne.w	800661a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80064f8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80064fc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006500:	b2d9      	uxtb	r1, r3
 8006502:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006506:	b2da      	uxtb	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800650c:	400a      	ands	r2, r1
 800650e:	b2d2      	uxtb	r2, r2
 8006510:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006516:	1c5a      	adds	r2, r3, #1
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006522:	b29b      	uxth	r3, r3
 8006524:	3b01      	subs	r3, #1
 8006526:	b29a      	uxth	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006534:	b29b      	uxth	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d177      	bne.n	800662a <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006542:	e853 3f00 	ldrex	r3, [r3]
 8006546:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800654a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800654e:	653b      	str	r3, [r7, #80]	; 0x50
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	461a      	mov	r2, r3
 8006556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006558:	647b      	str	r3, [r7, #68]	; 0x44
 800655a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800655e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006560:	e841 2300 	strex	r3, r2, [r1]
 8006564:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006568:	2b00      	cmp	r3, #0
 800656a:	d1e6      	bne.n	800653a <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	3308      	adds	r3, #8
 8006572:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	e853 3f00 	ldrex	r3, [r3]
 800657a:	623b      	str	r3, [r7, #32]
   return(result);
 800657c:	6a3b      	ldr	r3, [r7, #32]
 800657e:	f023 0301 	bic.w	r3, r3, #1
 8006582:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	3308      	adds	r3, #8
 800658a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800658c:	633a      	str	r2, [r7, #48]	; 0x30
 800658e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006590:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006592:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006594:	e841 2300 	strex	r3, r2, [r1]
 8006598:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800659a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1e5      	bne.n	800656c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2220      	movs	r2, #32
 80065a4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d12e      	bne.n	8006612 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	e853 3f00 	ldrex	r3, [r3]
 80065c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f023 0310 	bic.w	r3, r3, #16
 80065ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	461a      	mov	r2, r3
 80065d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065d8:	61fb      	str	r3, [r7, #28]
 80065da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065dc:	69b9      	ldr	r1, [r7, #24]
 80065de:	69fa      	ldr	r2, [r7, #28]
 80065e0:	e841 2300 	strex	r3, r2, [r1]
 80065e4:	617b      	str	r3, [r7, #20]
   return(result);
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1e6      	bne.n	80065ba <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	69db      	ldr	r3, [r3, #28]
 80065f2:	f003 0310 	and.w	r3, r3, #16
 80065f6:	2b10      	cmp	r3, #16
 80065f8:	d103      	bne.n	8006602 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2210      	movs	r2, #16
 8006600:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006608:	4619      	mov	r1, r3
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f7ff fa84 	bl	8005b18 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006610:	e00b      	b.n	800662a <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7fa fa2a 	bl	8000a6c <HAL_UART_RxCpltCallback>
}
 8006618:	e007      	b.n	800662a <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	699a      	ldr	r2, [r3, #24]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f042 0208 	orr.w	r2, r2, #8
 8006628:	619a      	str	r2, [r3, #24]
}
 800662a:	bf00      	nop
 800662c:	3758      	adds	r7, #88	; 0x58
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}

08006632 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006632:	b580      	push	{r7, lr}
 8006634:	b096      	sub	sp, #88	; 0x58
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006640:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006648:	2b22      	cmp	r3, #34	; 0x22
 800664a:	f040 8094 	bne.w	8006776 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006654:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800665c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800665e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006662:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006666:	4013      	ands	r3, r2
 8006668:	b29a      	uxth	r2, r3
 800666a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800666c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006672:	1c9a      	adds	r2, r3, #2
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800667e:	b29b      	uxth	r3, r3
 8006680:	3b01      	subs	r3, #1
 8006682:	b29a      	uxth	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006690:	b29b      	uxth	r3, r3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d177      	bne.n	8006786 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800669e:	e853 3f00 	ldrex	r3, [r3]
 80066a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	461a      	mov	r2, r3
 80066b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066b4:	643b      	str	r3, [r7, #64]	; 0x40
 80066b6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066bc:	e841 2300 	strex	r3, r2, [r1]
 80066c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1e6      	bne.n	8006696 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	3308      	adds	r3, #8
 80066ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d0:	6a3b      	ldr	r3, [r7, #32]
 80066d2:	e853 3f00 	ldrex	r3, [r3]
 80066d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	f023 0301 	bic.w	r3, r3, #1
 80066de:	64bb      	str	r3, [r7, #72]	; 0x48
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	3308      	adds	r3, #8
 80066e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066f0:	e841 2300 	strex	r3, r2, [r1]
 80066f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d1e5      	bne.n	80066c8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2220      	movs	r2, #32
 8006700:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800670c:	2b01      	cmp	r3, #1
 800670e:	d12e      	bne.n	800676e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	e853 3f00 	ldrex	r3, [r3]
 8006722:	60bb      	str	r3, [r7, #8]
   return(result);
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	f023 0310 	bic.w	r3, r3, #16
 800672a:	647b      	str	r3, [r7, #68]	; 0x44
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	461a      	mov	r2, r3
 8006732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006734:	61bb      	str	r3, [r7, #24]
 8006736:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006738:	6979      	ldr	r1, [r7, #20]
 800673a:	69ba      	ldr	r2, [r7, #24]
 800673c:	e841 2300 	strex	r3, r2, [r1]
 8006740:	613b      	str	r3, [r7, #16]
   return(result);
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1e6      	bne.n	8006716 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	69db      	ldr	r3, [r3, #28]
 800674e:	f003 0310 	and.w	r3, r3, #16
 8006752:	2b10      	cmp	r3, #16
 8006754:	d103      	bne.n	800675e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2210      	movs	r2, #16
 800675c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006764:	4619      	mov	r1, r3
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f7ff f9d6 	bl	8005b18 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800676c:	e00b      	b.n	8006786 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f7fa f97c 	bl	8000a6c <HAL_UART_RxCpltCallback>
}
 8006774:	e007      	b.n	8006786 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	699a      	ldr	r2, [r3, #24]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f042 0208 	orr.w	r2, r2, #8
 8006784:	619a      	str	r2, [r3, #24]
}
 8006786:	bf00      	nop
 8006788:	3758      	adds	r7, #88	; 0x58
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800678e:	b480      	push	{r7}
 8006790:	b083      	sub	sp, #12
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006796:	bf00      	nop
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
	...

080067a4 <__errno>:
 80067a4:	4b01      	ldr	r3, [pc, #4]	; (80067ac <__errno+0x8>)
 80067a6:	6818      	ldr	r0, [r3, #0]
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	2000001c 	.word	0x2000001c

080067b0 <__libc_init_array>:
 80067b0:	b570      	push	{r4, r5, r6, lr}
 80067b2:	4e0d      	ldr	r6, [pc, #52]	; (80067e8 <__libc_init_array+0x38>)
 80067b4:	4c0d      	ldr	r4, [pc, #52]	; (80067ec <__libc_init_array+0x3c>)
 80067b6:	1ba4      	subs	r4, r4, r6
 80067b8:	10a4      	asrs	r4, r4, #2
 80067ba:	2500      	movs	r5, #0
 80067bc:	42a5      	cmp	r5, r4
 80067be:	d109      	bne.n	80067d4 <__libc_init_array+0x24>
 80067c0:	4e0b      	ldr	r6, [pc, #44]	; (80067f0 <__libc_init_array+0x40>)
 80067c2:	4c0c      	ldr	r4, [pc, #48]	; (80067f4 <__libc_init_array+0x44>)
 80067c4:	f000 fc26 	bl	8007014 <_init>
 80067c8:	1ba4      	subs	r4, r4, r6
 80067ca:	10a4      	asrs	r4, r4, #2
 80067cc:	2500      	movs	r5, #0
 80067ce:	42a5      	cmp	r5, r4
 80067d0:	d105      	bne.n	80067de <__libc_init_array+0x2e>
 80067d2:	bd70      	pop	{r4, r5, r6, pc}
 80067d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80067d8:	4798      	blx	r3
 80067da:	3501      	adds	r5, #1
 80067dc:	e7ee      	b.n	80067bc <__libc_init_array+0xc>
 80067de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80067e2:	4798      	blx	r3
 80067e4:	3501      	adds	r5, #1
 80067e6:	e7f2      	b.n	80067ce <__libc_init_array+0x1e>
 80067e8:	0800712c 	.word	0x0800712c
 80067ec:	0800712c 	.word	0x0800712c
 80067f0:	0800712c 	.word	0x0800712c
 80067f4:	08007130 	.word	0x08007130

080067f8 <memset>:
 80067f8:	4402      	add	r2, r0
 80067fa:	4603      	mov	r3, r0
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d100      	bne.n	8006802 <memset+0xa>
 8006800:	4770      	bx	lr
 8006802:	f803 1b01 	strb.w	r1, [r3], #1
 8006806:	e7f9      	b.n	80067fc <memset+0x4>

08006808 <siprintf>:
 8006808:	b40e      	push	{r1, r2, r3}
 800680a:	b500      	push	{lr}
 800680c:	b09c      	sub	sp, #112	; 0x70
 800680e:	ab1d      	add	r3, sp, #116	; 0x74
 8006810:	9002      	str	r0, [sp, #8]
 8006812:	9006      	str	r0, [sp, #24]
 8006814:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006818:	4809      	ldr	r0, [pc, #36]	; (8006840 <siprintf+0x38>)
 800681a:	9107      	str	r1, [sp, #28]
 800681c:	9104      	str	r1, [sp, #16]
 800681e:	4909      	ldr	r1, [pc, #36]	; (8006844 <siprintf+0x3c>)
 8006820:	f853 2b04 	ldr.w	r2, [r3], #4
 8006824:	9105      	str	r1, [sp, #20]
 8006826:	6800      	ldr	r0, [r0, #0]
 8006828:	9301      	str	r3, [sp, #4]
 800682a:	a902      	add	r1, sp, #8
 800682c:	f000 f866 	bl	80068fc <_svfiprintf_r>
 8006830:	9b02      	ldr	r3, [sp, #8]
 8006832:	2200      	movs	r2, #0
 8006834:	701a      	strb	r2, [r3, #0]
 8006836:	b01c      	add	sp, #112	; 0x70
 8006838:	f85d eb04 	ldr.w	lr, [sp], #4
 800683c:	b003      	add	sp, #12
 800683e:	4770      	bx	lr
 8006840:	2000001c 	.word	0x2000001c
 8006844:	ffff0208 	.word	0xffff0208

08006848 <__ssputs_r>:
 8006848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800684c:	688e      	ldr	r6, [r1, #8]
 800684e:	429e      	cmp	r6, r3
 8006850:	4682      	mov	sl, r0
 8006852:	460c      	mov	r4, r1
 8006854:	4690      	mov	r8, r2
 8006856:	4699      	mov	r9, r3
 8006858:	d837      	bhi.n	80068ca <__ssputs_r+0x82>
 800685a:	898a      	ldrh	r2, [r1, #12]
 800685c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006860:	d031      	beq.n	80068c6 <__ssputs_r+0x7e>
 8006862:	6825      	ldr	r5, [r4, #0]
 8006864:	6909      	ldr	r1, [r1, #16]
 8006866:	1a6f      	subs	r7, r5, r1
 8006868:	6965      	ldr	r5, [r4, #20]
 800686a:	2302      	movs	r3, #2
 800686c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006870:	fb95 f5f3 	sdiv	r5, r5, r3
 8006874:	f109 0301 	add.w	r3, r9, #1
 8006878:	443b      	add	r3, r7
 800687a:	429d      	cmp	r5, r3
 800687c:	bf38      	it	cc
 800687e:	461d      	movcc	r5, r3
 8006880:	0553      	lsls	r3, r2, #21
 8006882:	d530      	bpl.n	80068e6 <__ssputs_r+0x9e>
 8006884:	4629      	mov	r1, r5
 8006886:	f000 fb2b 	bl	8006ee0 <_malloc_r>
 800688a:	4606      	mov	r6, r0
 800688c:	b950      	cbnz	r0, 80068a4 <__ssputs_r+0x5c>
 800688e:	230c      	movs	r3, #12
 8006890:	f8ca 3000 	str.w	r3, [sl]
 8006894:	89a3      	ldrh	r3, [r4, #12]
 8006896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800689a:	81a3      	strh	r3, [r4, #12]
 800689c:	f04f 30ff 	mov.w	r0, #4294967295
 80068a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068a4:	463a      	mov	r2, r7
 80068a6:	6921      	ldr	r1, [r4, #16]
 80068a8:	f000 faa8 	bl	8006dfc <memcpy>
 80068ac:	89a3      	ldrh	r3, [r4, #12]
 80068ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80068b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068b6:	81a3      	strh	r3, [r4, #12]
 80068b8:	6126      	str	r6, [r4, #16]
 80068ba:	6165      	str	r5, [r4, #20]
 80068bc:	443e      	add	r6, r7
 80068be:	1bed      	subs	r5, r5, r7
 80068c0:	6026      	str	r6, [r4, #0]
 80068c2:	60a5      	str	r5, [r4, #8]
 80068c4:	464e      	mov	r6, r9
 80068c6:	454e      	cmp	r6, r9
 80068c8:	d900      	bls.n	80068cc <__ssputs_r+0x84>
 80068ca:	464e      	mov	r6, r9
 80068cc:	4632      	mov	r2, r6
 80068ce:	4641      	mov	r1, r8
 80068d0:	6820      	ldr	r0, [r4, #0]
 80068d2:	f000 fa9e 	bl	8006e12 <memmove>
 80068d6:	68a3      	ldr	r3, [r4, #8]
 80068d8:	1b9b      	subs	r3, r3, r6
 80068da:	60a3      	str	r3, [r4, #8]
 80068dc:	6823      	ldr	r3, [r4, #0]
 80068de:	441e      	add	r6, r3
 80068e0:	6026      	str	r6, [r4, #0]
 80068e2:	2000      	movs	r0, #0
 80068e4:	e7dc      	b.n	80068a0 <__ssputs_r+0x58>
 80068e6:	462a      	mov	r2, r5
 80068e8:	f000 fb54 	bl	8006f94 <_realloc_r>
 80068ec:	4606      	mov	r6, r0
 80068ee:	2800      	cmp	r0, #0
 80068f0:	d1e2      	bne.n	80068b8 <__ssputs_r+0x70>
 80068f2:	6921      	ldr	r1, [r4, #16]
 80068f4:	4650      	mov	r0, sl
 80068f6:	f000 faa5 	bl	8006e44 <_free_r>
 80068fa:	e7c8      	b.n	800688e <__ssputs_r+0x46>

080068fc <_svfiprintf_r>:
 80068fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006900:	461d      	mov	r5, r3
 8006902:	898b      	ldrh	r3, [r1, #12]
 8006904:	061f      	lsls	r7, r3, #24
 8006906:	b09d      	sub	sp, #116	; 0x74
 8006908:	4680      	mov	r8, r0
 800690a:	460c      	mov	r4, r1
 800690c:	4616      	mov	r6, r2
 800690e:	d50f      	bpl.n	8006930 <_svfiprintf_r+0x34>
 8006910:	690b      	ldr	r3, [r1, #16]
 8006912:	b96b      	cbnz	r3, 8006930 <_svfiprintf_r+0x34>
 8006914:	2140      	movs	r1, #64	; 0x40
 8006916:	f000 fae3 	bl	8006ee0 <_malloc_r>
 800691a:	6020      	str	r0, [r4, #0]
 800691c:	6120      	str	r0, [r4, #16]
 800691e:	b928      	cbnz	r0, 800692c <_svfiprintf_r+0x30>
 8006920:	230c      	movs	r3, #12
 8006922:	f8c8 3000 	str.w	r3, [r8]
 8006926:	f04f 30ff 	mov.w	r0, #4294967295
 800692a:	e0c8      	b.n	8006abe <_svfiprintf_r+0x1c2>
 800692c:	2340      	movs	r3, #64	; 0x40
 800692e:	6163      	str	r3, [r4, #20]
 8006930:	2300      	movs	r3, #0
 8006932:	9309      	str	r3, [sp, #36]	; 0x24
 8006934:	2320      	movs	r3, #32
 8006936:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800693a:	2330      	movs	r3, #48	; 0x30
 800693c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006940:	9503      	str	r5, [sp, #12]
 8006942:	f04f 0b01 	mov.w	fp, #1
 8006946:	4637      	mov	r7, r6
 8006948:	463d      	mov	r5, r7
 800694a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800694e:	b10b      	cbz	r3, 8006954 <_svfiprintf_r+0x58>
 8006950:	2b25      	cmp	r3, #37	; 0x25
 8006952:	d13e      	bne.n	80069d2 <_svfiprintf_r+0xd6>
 8006954:	ebb7 0a06 	subs.w	sl, r7, r6
 8006958:	d00b      	beq.n	8006972 <_svfiprintf_r+0x76>
 800695a:	4653      	mov	r3, sl
 800695c:	4632      	mov	r2, r6
 800695e:	4621      	mov	r1, r4
 8006960:	4640      	mov	r0, r8
 8006962:	f7ff ff71 	bl	8006848 <__ssputs_r>
 8006966:	3001      	adds	r0, #1
 8006968:	f000 80a4 	beq.w	8006ab4 <_svfiprintf_r+0x1b8>
 800696c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800696e:	4453      	add	r3, sl
 8006970:	9309      	str	r3, [sp, #36]	; 0x24
 8006972:	783b      	ldrb	r3, [r7, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	f000 809d 	beq.w	8006ab4 <_svfiprintf_r+0x1b8>
 800697a:	2300      	movs	r3, #0
 800697c:	f04f 32ff 	mov.w	r2, #4294967295
 8006980:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006984:	9304      	str	r3, [sp, #16]
 8006986:	9307      	str	r3, [sp, #28]
 8006988:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800698c:	931a      	str	r3, [sp, #104]	; 0x68
 800698e:	462f      	mov	r7, r5
 8006990:	2205      	movs	r2, #5
 8006992:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006996:	4850      	ldr	r0, [pc, #320]	; (8006ad8 <_svfiprintf_r+0x1dc>)
 8006998:	f7f9 fc2a 	bl	80001f0 <memchr>
 800699c:	9b04      	ldr	r3, [sp, #16]
 800699e:	b9d0      	cbnz	r0, 80069d6 <_svfiprintf_r+0xda>
 80069a0:	06d9      	lsls	r1, r3, #27
 80069a2:	bf44      	itt	mi
 80069a4:	2220      	movmi	r2, #32
 80069a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80069aa:	071a      	lsls	r2, r3, #28
 80069ac:	bf44      	itt	mi
 80069ae:	222b      	movmi	r2, #43	; 0x2b
 80069b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80069b4:	782a      	ldrb	r2, [r5, #0]
 80069b6:	2a2a      	cmp	r2, #42	; 0x2a
 80069b8:	d015      	beq.n	80069e6 <_svfiprintf_r+0xea>
 80069ba:	9a07      	ldr	r2, [sp, #28]
 80069bc:	462f      	mov	r7, r5
 80069be:	2000      	movs	r0, #0
 80069c0:	250a      	movs	r5, #10
 80069c2:	4639      	mov	r1, r7
 80069c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069c8:	3b30      	subs	r3, #48	; 0x30
 80069ca:	2b09      	cmp	r3, #9
 80069cc:	d94d      	bls.n	8006a6a <_svfiprintf_r+0x16e>
 80069ce:	b1b8      	cbz	r0, 8006a00 <_svfiprintf_r+0x104>
 80069d0:	e00f      	b.n	80069f2 <_svfiprintf_r+0xf6>
 80069d2:	462f      	mov	r7, r5
 80069d4:	e7b8      	b.n	8006948 <_svfiprintf_r+0x4c>
 80069d6:	4a40      	ldr	r2, [pc, #256]	; (8006ad8 <_svfiprintf_r+0x1dc>)
 80069d8:	1a80      	subs	r0, r0, r2
 80069da:	fa0b f000 	lsl.w	r0, fp, r0
 80069de:	4318      	orrs	r0, r3
 80069e0:	9004      	str	r0, [sp, #16]
 80069e2:	463d      	mov	r5, r7
 80069e4:	e7d3      	b.n	800698e <_svfiprintf_r+0x92>
 80069e6:	9a03      	ldr	r2, [sp, #12]
 80069e8:	1d11      	adds	r1, r2, #4
 80069ea:	6812      	ldr	r2, [r2, #0]
 80069ec:	9103      	str	r1, [sp, #12]
 80069ee:	2a00      	cmp	r2, #0
 80069f0:	db01      	blt.n	80069f6 <_svfiprintf_r+0xfa>
 80069f2:	9207      	str	r2, [sp, #28]
 80069f4:	e004      	b.n	8006a00 <_svfiprintf_r+0x104>
 80069f6:	4252      	negs	r2, r2
 80069f8:	f043 0302 	orr.w	r3, r3, #2
 80069fc:	9207      	str	r2, [sp, #28]
 80069fe:	9304      	str	r3, [sp, #16]
 8006a00:	783b      	ldrb	r3, [r7, #0]
 8006a02:	2b2e      	cmp	r3, #46	; 0x2e
 8006a04:	d10c      	bne.n	8006a20 <_svfiprintf_r+0x124>
 8006a06:	787b      	ldrb	r3, [r7, #1]
 8006a08:	2b2a      	cmp	r3, #42	; 0x2a
 8006a0a:	d133      	bne.n	8006a74 <_svfiprintf_r+0x178>
 8006a0c:	9b03      	ldr	r3, [sp, #12]
 8006a0e:	1d1a      	adds	r2, r3, #4
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	9203      	str	r2, [sp, #12]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	bfb8      	it	lt
 8006a18:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a1c:	3702      	adds	r7, #2
 8006a1e:	9305      	str	r3, [sp, #20]
 8006a20:	4d2e      	ldr	r5, [pc, #184]	; (8006adc <_svfiprintf_r+0x1e0>)
 8006a22:	7839      	ldrb	r1, [r7, #0]
 8006a24:	2203      	movs	r2, #3
 8006a26:	4628      	mov	r0, r5
 8006a28:	f7f9 fbe2 	bl	80001f0 <memchr>
 8006a2c:	b138      	cbz	r0, 8006a3e <_svfiprintf_r+0x142>
 8006a2e:	2340      	movs	r3, #64	; 0x40
 8006a30:	1b40      	subs	r0, r0, r5
 8006a32:	fa03 f000 	lsl.w	r0, r3, r0
 8006a36:	9b04      	ldr	r3, [sp, #16]
 8006a38:	4303      	orrs	r3, r0
 8006a3a:	3701      	adds	r7, #1
 8006a3c:	9304      	str	r3, [sp, #16]
 8006a3e:	7839      	ldrb	r1, [r7, #0]
 8006a40:	4827      	ldr	r0, [pc, #156]	; (8006ae0 <_svfiprintf_r+0x1e4>)
 8006a42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a46:	2206      	movs	r2, #6
 8006a48:	1c7e      	adds	r6, r7, #1
 8006a4a:	f7f9 fbd1 	bl	80001f0 <memchr>
 8006a4e:	2800      	cmp	r0, #0
 8006a50:	d038      	beq.n	8006ac4 <_svfiprintf_r+0x1c8>
 8006a52:	4b24      	ldr	r3, [pc, #144]	; (8006ae4 <_svfiprintf_r+0x1e8>)
 8006a54:	bb13      	cbnz	r3, 8006a9c <_svfiprintf_r+0x1a0>
 8006a56:	9b03      	ldr	r3, [sp, #12]
 8006a58:	3307      	adds	r3, #7
 8006a5a:	f023 0307 	bic.w	r3, r3, #7
 8006a5e:	3308      	adds	r3, #8
 8006a60:	9303      	str	r3, [sp, #12]
 8006a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a64:	444b      	add	r3, r9
 8006a66:	9309      	str	r3, [sp, #36]	; 0x24
 8006a68:	e76d      	b.n	8006946 <_svfiprintf_r+0x4a>
 8006a6a:	fb05 3202 	mla	r2, r5, r2, r3
 8006a6e:	2001      	movs	r0, #1
 8006a70:	460f      	mov	r7, r1
 8006a72:	e7a6      	b.n	80069c2 <_svfiprintf_r+0xc6>
 8006a74:	2300      	movs	r3, #0
 8006a76:	3701      	adds	r7, #1
 8006a78:	9305      	str	r3, [sp, #20]
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	250a      	movs	r5, #10
 8006a7e:	4638      	mov	r0, r7
 8006a80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a84:	3a30      	subs	r2, #48	; 0x30
 8006a86:	2a09      	cmp	r2, #9
 8006a88:	d903      	bls.n	8006a92 <_svfiprintf_r+0x196>
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d0c8      	beq.n	8006a20 <_svfiprintf_r+0x124>
 8006a8e:	9105      	str	r1, [sp, #20]
 8006a90:	e7c6      	b.n	8006a20 <_svfiprintf_r+0x124>
 8006a92:	fb05 2101 	mla	r1, r5, r1, r2
 8006a96:	2301      	movs	r3, #1
 8006a98:	4607      	mov	r7, r0
 8006a9a:	e7f0      	b.n	8006a7e <_svfiprintf_r+0x182>
 8006a9c:	ab03      	add	r3, sp, #12
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	4622      	mov	r2, r4
 8006aa2:	4b11      	ldr	r3, [pc, #68]	; (8006ae8 <_svfiprintf_r+0x1ec>)
 8006aa4:	a904      	add	r1, sp, #16
 8006aa6:	4640      	mov	r0, r8
 8006aa8:	f3af 8000 	nop.w
 8006aac:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006ab0:	4681      	mov	r9, r0
 8006ab2:	d1d6      	bne.n	8006a62 <_svfiprintf_r+0x166>
 8006ab4:	89a3      	ldrh	r3, [r4, #12]
 8006ab6:	065b      	lsls	r3, r3, #25
 8006ab8:	f53f af35 	bmi.w	8006926 <_svfiprintf_r+0x2a>
 8006abc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006abe:	b01d      	add	sp, #116	; 0x74
 8006ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ac4:	ab03      	add	r3, sp, #12
 8006ac6:	9300      	str	r3, [sp, #0]
 8006ac8:	4622      	mov	r2, r4
 8006aca:	4b07      	ldr	r3, [pc, #28]	; (8006ae8 <_svfiprintf_r+0x1ec>)
 8006acc:	a904      	add	r1, sp, #16
 8006ace:	4640      	mov	r0, r8
 8006ad0:	f000 f882 	bl	8006bd8 <_printf_i>
 8006ad4:	e7ea      	b.n	8006aac <_svfiprintf_r+0x1b0>
 8006ad6:	bf00      	nop
 8006ad8:	080070f8 	.word	0x080070f8
 8006adc:	080070fe 	.word	0x080070fe
 8006ae0:	08007102 	.word	0x08007102
 8006ae4:	00000000 	.word	0x00000000
 8006ae8:	08006849 	.word	0x08006849

08006aec <_printf_common>:
 8006aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006af0:	4691      	mov	r9, r2
 8006af2:	461f      	mov	r7, r3
 8006af4:	688a      	ldr	r2, [r1, #8]
 8006af6:	690b      	ldr	r3, [r1, #16]
 8006af8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006afc:	4293      	cmp	r3, r2
 8006afe:	bfb8      	it	lt
 8006b00:	4613      	movlt	r3, r2
 8006b02:	f8c9 3000 	str.w	r3, [r9]
 8006b06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b0a:	4606      	mov	r6, r0
 8006b0c:	460c      	mov	r4, r1
 8006b0e:	b112      	cbz	r2, 8006b16 <_printf_common+0x2a>
 8006b10:	3301      	adds	r3, #1
 8006b12:	f8c9 3000 	str.w	r3, [r9]
 8006b16:	6823      	ldr	r3, [r4, #0]
 8006b18:	0699      	lsls	r1, r3, #26
 8006b1a:	bf42      	ittt	mi
 8006b1c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006b20:	3302      	addmi	r3, #2
 8006b22:	f8c9 3000 	strmi.w	r3, [r9]
 8006b26:	6825      	ldr	r5, [r4, #0]
 8006b28:	f015 0506 	ands.w	r5, r5, #6
 8006b2c:	d107      	bne.n	8006b3e <_printf_common+0x52>
 8006b2e:	f104 0a19 	add.w	sl, r4, #25
 8006b32:	68e3      	ldr	r3, [r4, #12]
 8006b34:	f8d9 2000 	ldr.w	r2, [r9]
 8006b38:	1a9b      	subs	r3, r3, r2
 8006b3a:	42ab      	cmp	r3, r5
 8006b3c:	dc28      	bgt.n	8006b90 <_printf_common+0xa4>
 8006b3e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006b42:	6822      	ldr	r2, [r4, #0]
 8006b44:	3300      	adds	r3, #0
 8006b46:	bf18      	it	ne
 8006b48:	2301      	movne	r3, #1
 8006b4a:	0692      	lsls	r2, r2, #26
 8006b4c:	d42d      	bmi.n	8006baa <_printf_common+0xbe>
 8006b4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b52:	4639      	mov	r1, r7
 8006b54:	4630      	mov	r0, r6
 8006b56:	47c0      	blx	r8
 8006b58:	3001      	adds	r0, #1
 8006b5a:	d020      	beq.n	8006b9e <_printf_common+0xb2>
 8006b5c:	6823      	ldr	r3, [r4, #0]
 8006b5e:	68e5      	ldr	r5, [r4, #12]
 8006b60:	f8d9 2000 	ldr.w	r2, [r9]
 8006b64:	f003 0306 	and.w	r3, r3, #6
 8006b68:	2b04      	cmp	r3, #4
 8006b6a:	bf08      	it	eq
 8006b6c:	1aad      	subeq	r5, r5, r2
 8006b6e:	68a3      	ldr	r3, [r4, #8]
 8006b70:	6922      	ldr	r2, [r4, #16]
 8006b72:	bf0c      	ite	eq
 8006b74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b78:	2500      	movne	r5, #0
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	bfc4      	itt	gt
 8006b7e:	1a9b      	subgt	r3, r3, r2
 8006b80:	18ed      	addgt	r5, r5, r3
 8006b82:	f04f 0900 	mov.w	r9, #0
 8006b86:	341a      	adds	r4, #26
 8006b88:	454d      	cmp	r5, r9
 8006b8a:	d11a      	bne.n	8006bc2 <_printf_common+0xd6>
 8006b8c:	2000      	movs	r0, #0
 8006b8e:	e008      	b.n	8006ba2 <_printf_common+0xb6>
 8006b90:	2301      	movs	r3, #1
 8006b92:	4652      	mov	r2, sl
 8006b94:	4639      	mov	r1, r7
 8006b96:	4630      	mov	r0, r6
 8006b98:	47c0      	blx	r8
 8006b9a:	3001      	adds	r0, #1
 8006b9c:	d103      	bne.n	8006ba6 <_printf_common+0xba>
 8006b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ba6:	3501      	adds	r5, #1
 8006ba8:	e7c3      	b.n	8006b32 <_printf_common+0x46>
 8006baa:	18e1      	adds	r1, r4, r3
 8006bac:	1c5a      	adds	r2, r3, #1
 8006bae:	2030      	movs	r0, #48	; 0x30
 8006bb0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bb4:	4422      	add	r2, r4
 8006bb6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006bbe:	3302      	adds	r3, #2
 8006bc0:	e7c5      	b.n	8006b4e <_printf_common+0x62>
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	4622      	mov	r2, r4
 8006bc6:	4639      	mov	r1, r7
 8006bc8:	4630      	mov	r0, r6
 8006bca:	47c0      	blx	r8
 8006bcc:	3001      	adds	r0, #1
 8006bce:	d0e6      	beq.n	8006b9e <_printf_common+0xb2>
 8006bd0:	f109 0901 	add.w	r9, r9, #1
 8006bd4:	e7d8      	b.n	8006b88 <_printf_common+0x9c>
	...

08006bd8 <_printf_i>:
 8006bd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006bdc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006be0:	460c      	mov	r4, r1
 8006be2:	7e09      	ldrb	r1, [r1, #24]
 8006be4:	b085      	sub	sp, #20
 8006be6:	296e      	cmp	r1, #110	; 0x6e
 8006be8:	4617      	mov	r7, r2
 8006bea:	4606      	mov	r6, r0
 8006bec:	4698      	mov	r8, r3
 8006bee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bf0:	f000 80b3 	beq.w	8006d5a <_printf_i+0x182>
 8006bf4:	d822      	bhi.n	8006c3c <_printf_i+0x64>
 8006bf6:	2963      	cmp	r1, #99	; 0x63
 8006bf8:	d036      	beq.n	8006c68 <_printf_i+0x90>
 8006bfa:	d80a      	bhi.n	8006c12 <_printf_i+0x3a>
 8006bfc:	2900      	cmp	r1, #0
 8006bfe:	f000 80b9 	beq.w	8006d74 <_printf_i+0x19c>
 8006c02:	2958      	cmp	r1, #88	; 0x58
 8006c04:	f000 8083 	beq.w	8006d0e <_printf_i+0x136>
 8006c08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c0c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006c10:	e032      	b.n	8006c78 <_printf_i+0xa0>
 8006c12:	2964      	cmp	r1, #100	; 0x64
 8006c14:	d001      	beq.n	8006c1a <_printf_i+0x42>
 8006c16:	2969      	cmp	r1, #105	; 0x69
 8006c18:	d1f6      	bne.n	8006c08 <_printf_i+0x30>
 8006c1a:	6820      	ldr	r0, [r4, #0]
 8006c1c:	6813      	ldr	r3, [r2, #0]
 8006c1e:	0605      	lsls	r5, r0, #24
 8006c20:	f103 0104 	add.w	r1, r3, #4
 8006c24:	d52a      	bpl.n	8006c7c <_printf_i+0xa4>
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6011      	str	r1, [r2, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	da03      	bge.n	8006c36 <_printf_i+0x5e>
 8006c2e:	222d      	movs	r2, #45	; 0x2d
 8006c30:	425b      	negs	r3, r3
 8006c32:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006c36:	486f      	ldr	r0, [pc, #444]	; (8006df4 <_printf_i+0x21c>)
 8006c38:	220a      	movs	r2, #10
 8006c3a:	e039      	b.n	8006cb0 <_printf_i+0xd8>
 8006c3c:	2973      	cmp	r1, #115	; 0x73
 8006c3e:	f000 809d 	beq.w	8006d7c <_printf_i+0x1a4>
 8006c42:	d808      	bhi.n	8006c56 <_printf_i+0x7e>
 8006c44:	296f      	cmp	r1, #111	; 0x6f
 8006c46:	d020      	beq.n	8006c8a <_printf_i+0xb2>
 8006c48:	2970      	cmp	r1, #112	; 0x70
 8006c4a:	d1dd      	bne.n	8006c08 <_printf_i+0x30>
 8006c4c:	6823      	ldr	r3, [r4, #0]
 8006c4e:	f043 0320 	orr.w	r3, r3, #32
 8006c52:	6023      	str	r3, [r4, #0]
 8006c54:	e003      	b.n	8006c5e <_printf_i+0x86>
 8006c56:	2975      	cmp	r1, #117	; 0x75
 8006c58:	d017      	beq.n	8006c8a <_printf_i+0xb2>
 8006c5a:	2978      	cmp	r1, #120	; 0x78
 8006c5c:	d1d4      	bne.n	8006c08 <_printf_i+0x30>
 8006c5e:	2378      	movs	r3, #120	; 0x78
 8006c60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c64:	4864      	ldr	r0, [pc, #400]	; (8006df8 <_printf_i+0x220>)
 8006c66:	e055      	b.n	8006d14 <_printf_i+0x13c>
 8006c68:	6813      	ldr	r3, [r2, #0]
 8006c6a:	1d19      	adds	r1, r3, #4
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	6011      	str	r1, [r2, #0]
 8006c70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e08c      	b.n	8006d96 <_printf_i+0x1be>
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	6011      	str	r1, [r2, #0]
 8006c80:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c84:	bf18      	it	ne
 8006c86:	b21b      	sxthne	r3, r3
 8006c88:	e7cf      	b.n	8006c2a <_printf_i+0x52>
 8006c8a:	6813      	ldr	r3, [r2, #0]
 8006c8c:	6825      	ldr	r5, [r4, #0]
 8006c8e:	1d18      	adds	r0, r3, #4
 8006c90:	6010      	str	r0, [r2, #0]
 8006c92:	0628      	lsls	r0, r5, #24
 8006c94:	d501      	bpl.n	8006c9a <_printf_i+0xc2>
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	e002      	b.n	8006ca0 <_printf_i+0xc8>
 8006c9a:	0668      	lsls	r0, r5, #25
 8006c9c:	d5fb      	bpl.n	8006c96 <_printf_i+0xbe>
 8006c9e:	881b      	ldrh	r3, [r3, #0]
 8006ca0:	4854      	ldr	r0, [pc, #336]	; (8006df4 <_printf_i+0x21c>)
 8006ca2:	296f      	cmp	r1, #111	; 0x6f
 8006ca4:	bf14      	ite	ne
 8006ca6:	220a      	movne	r2, #10
 8006ca8:	2208      	moveq	r2, #8
 8006caa:	2100      	movs	r1, #0
 8006cac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cb0:	6865      	ldr	r5, [r4, #4]
 8006cb2:	60a5      	str	r5, [r4, #8]
 8006cb4:	2d00      	cmp	r5, #0
 8006cb6:	f2c0 8095 	blt.w	8006de4 <_printf_i+0x20c>
 8006cba:	6821      	ldr	r1, [r4, #0]
 8006cbc:	f021 0104 	bic.w	r1, r1, #4
 8006cc0:	6021      	str	r1, [r4, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d13d      	bne.n	8006d42 <_printf_i+0x16a>
 8006cc6:	2d00      	cmp	r5, #0
 8006cc8:	f040 808e 	bne.w	8006de8 <_printf_i+0x210>
 8006ccc:	4665      	mov	r5, ip
 8006cce:	2a08      	cmp	r2, #8
 8006cd0:	d10b      	bne.n	8006cea <_printf_i+0x112>
 8006cd2:	6823      	ldr	r3, [r4, #0]
 8006cd4:	07db      	lsls	r3, r3, #31
 8006cd6:	d508      	bpl.n	8006cea <_printf_i+0x112>
 8006cd8:	6923      	ldr	r3, [r4, #16]
 8006cda:	6862      	ldr	r2, [r4, #4]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	bfde      	ittt	le
 8006ce0:	2330      	movle	r3, #48	; 0x30
 8006ce2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ce6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006cea:	ebac 0305 	sub.w	r3, ip, r5
 8006cee:	6123      	str	r3, [r4, #16]
 8006cf0:	f8cd 8000 	str.w	r8, [sp]
 8006cf4:	463b      	mov	r3, r7
 8006cf6:	aa03      	add	r2, sp, #12
 8006cf8:	4621      	mov	r1, r4
 8006cfa:	4630      	mov	r0, r6
 8006cfc:	f7ff fef6 	bl	8006aec <_printf_common>
 8006d00:	3001      	adds	r0, #1
 8006d02:	d14d      	bne.n	8006da0 <_printf_i+0x1c8>
 8006d04:	f04f 30ff 	mov.w	r0, #4294967295
 8006d08:	b005      	add	sp, #20
 8006d0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d0e:	4839      	ldr	r0, [pc, #228]	; (8006df4 <_printf_i+0x21c>)
 8006d10:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006d14:	6813      	ldr	r3, [r2, #0]
 8006d16:	6821      	ldr	r1, [r4, #0]
 8006d18:	1d1d      	adds	r5, r3, #4
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	6015      	str	r5, [r2, #0]
 8006d1e:	060a      	lsls	r2, r1, #24
 8006d20:	d50b      	bpl.n	8006d3a <_printf_i+0x162>
 8006d22:	07ca      	lsls	r2, r1, #31
 8006d24:	bf44      	itt	mi
 8006d26:	f041 0120 	orrmi.w	r1, r1, #32
 8006d2a:	6021      	strmi	r1, [r4, #0]
 8006d2c:	b91b      	cbnz	r3, 8006d36 <_printf_i+0x15e>
 8006d2e:	6822      	ldr	r2, [r4, #0]
 8006d30:	f022 0220 	bic.w	r2, r2, #32
 8006d34:	6022      	str	r2, [r4, #0]
 8006d36:	2210      	movs	r2, #16
 8006d38:	e7b7      	b.n	8006caa <_printf_i+0xd2>
 8006d3a:	064d      	lsls	r5, r1, #25
 8006d3c:	bf48      	it	mi
 8006d3e:	b29b      	uxthmi	r3, r3
 8006d40:	e7ef      	b.n	8006d22 <_printf_i+0x14a>
 8006d42:	4665      	mov	r5, ip
 8006d44:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d48:	fb02 3311 	mls	r3, r2, r1, r3
 8006d4c:	5cc3      	ldrb	r3, [r0, r3]
 8006d4e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006d52:	460b      	mov	r3, r1
 8006d54:	2900      	cmp	r1, #0
 8006d56:	d1f5      	bne.n	8006d44 <_printf_i+0x16c>
 8006d58:	e7b9      	b.n	8006cce <_printf_i+0xf6>
 8006d5a:	6813      	ldr	r3, [r2, #0]
 8006d5c:	6825      	ldr	r5, [r4, #0]
 8006d5e:	6961      	ldr	r1, [r4, #20]
 8006d60:	1d18      	adds	r0, r3, #4
 8006d62:	6010      	str	r0, [r2, #0]
 8006d64:	0628      	lsls	r0, r5, #24
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	d501      	bpl.n	8006d6e <_printf_i+0x196>
 8006d6a:	6019      	str	r1, [r3, #0]
 8006d6c:	e002      	b.n	8006d74 <_printf_i+0x19c>
 8006d6e:	066a      	lsls	r2, r5, #25
 8006d70:	d5fb      	bpl.n	8006d6a <_printf_i+0x192>
 8006d72:	8019      	strh	r1, [r3, #0]
 8006d74:	2300      	movs	r3, #0
 8006d76:	6123      	str	r3, [r4, #16]
 8006d78:	4665      	mov	r5, ip
 8006d7a:	e7b9      	b.n	8006cf0 <_printf_i+0x118>
 8006d7c:	6813      	ldr	r3, [r2, #0]
 8006d7e:	1d19      	adds	r1, r3, #4
 8006d80:	6011      	str	r1, [r2, #0]
 8006d82:	681d      	ldr	r5, [r3, #0]
 8006d84:	6862      	ldr	r2, [r4, #4]
 8006d86:	2100      	movs	r1, #0
 8006d88:	4628      	mov	r0, r5
 8006d8a:	f7f9 fa31 	bl	80001f0 <memchr>
 8006d8e:	b108      	cbz	r0, 8006d94 <_printf_i+0x1bc>
 8006d90:	1b40      	subs	r0, r0, r5
 8006d92:	6060      	str	r0, [r4, #4]
 8006d94:	6863      	ldr	r3, [r4, #4]
 8006d96:	6123      	str	r3, [r4, #16]
 8006d98:	2300      	movs	r3, #0
 8006d9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d9e:	e7a7      	b.n	8006cf0 <_printf_i+0x118>
 8006da0:	6923      	ldr	r3, [r4, #16]
 8006da2:	462a      	mov	r2, r5
 8006da4:	4639      	mov	r1, r7
 8006da6:	4630      	mov	r0, r6
 8006da8:	47c0      	blx	r8
 8006daa:	3001      	adds	r0, #1
 8006dac:	d0aa      	beq.n	8006d04 <_printf_i+0x12c>
 8006dae:	6823      	ldr	r3, [r4, #0]
 8006db0:	079b      	lsls	r3, r3, #30
 8006db2:	d413      	bmi.n	8006ddc <_printf_i+0x204>
 8006db4:	68e0      	ldr	r0, [r4, #12]
 8006db6:	9b03      	ldr	r3, [sp, #12]
 8006db8:	4298      	cmp	r0, r3
 8006dba:	bfb8      	it	lt
 8006dbc:	4618      	movlt	r0, r3
 8006dbe:	e7a3      	b.n	8006d08 <_printf_i+0x130>
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	464a      	mov	r2, r9
 8006dc4:	4639      	mov	r1, r7
 8006dc6:	4630      	mov	r0, r6
 8006dc8:	47c0      	blx	r8
 8006dca:	3001      	adds	r0, #1
 8006dcc:	d09a      	beq.n	8006d04 <_printf_i+0x12c>
 8006dce:	3501      	adds	r5, #1
 8006dd0:	68e3      	ldr	r3, [r4, #12]
 8006dd2:	9a03      	ldr	r2, [sp, #12]
 8006dd4:	1a9b      	subs	r3, r3, r2
 8006dd6:	42ab      	cmp	r3, r5
 8006dd8:	dcf2      	bgt.n	8006dc0 <_printf_i+0x1e8>
 8006dda:	e7eb      	b.n	8006db4 <_printf_i+0x1dc>
 8006ddc:	2500      	movs	r5, #0
 8006dde:	f104 0919 	add.w	r9, r4, #25
 8006de2:	e7f5      	b.n	8006dd0 <_printf_i+0x1f8>
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1ac      	bne.n	8006d42 <_printf_i+0x16a>
 8006de8:	7803      	ldrb	r3, [r0, #0]
 8006dea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006dee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006df2:	e76c      	b.n	8006cce <_printf_i+0xf6>
 8006df4:	08007109 	.word	0x08007109
 8006df8:	0800711a 	.word	0x0800711a

08006dfc <memcpy>:
 8006dfc:	b510      	push	{r4, lr}
 8006dfe:	1e43      	subs	r3, r0, #1
 8006e00:	440a      	add	r2, r1
 8006e02:	4291      	cmp	r1, r2
 8006e04:	d100      	bne.n	8006e08 <memcpy+0xc>
 8006e06:	bd10      	pop	{r4, pc}
 8006e08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e10:	e7f7      	b.n	8006e02 <memcpy+0x6>

08006e12 <memmove>:
 8006e12:	4288      	cmp	r0, r1
 8006e14:	b510      	push	{r4, lr}
 8006e16:	eb01 0302 	add.w	r3, r1, r2
 8006e1a:	d807      	bhi.n	8006e2c <memmove+0x1a>
 8006e1c:	1e42      	subs	r2, r0, #1
 8006e1e:	4299      	cmp	r1, r3
 8006e20:	d00a      	beq.n	8006e38 <memmove+0x26>
 8006e22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e26:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006e2a:	e7f8      	b.n	8006e1e <memmove+0xc>
 8006e2c:	4283      	cmp	r3, r0
 8006e2e:	d9f5      	bls.n	8006e1c <memmove+0xa>
 8006e30:	1881      	adds	r1, r0, r2
 8006e32:	1ad2      	subs	r2, r2, r3
 8006e34:	42d3      	cmn	r3, r2
 8006e36:	d100      	bne.n	8006e3a <memmove+0x28>
 8006e38:	bd10      	pop	{r4, pc}
 8006e3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e3e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006e42:	e7f7      	b.n	8006e34 <memmove+0x22>

08006e44 <_free_r>:
 8006e44:	b538      	push	{r3, r4, r5, lr}
 8006e46:	4605      	mov	r5, r0
 8006e48:	2900      	cmp	r1, #0
 8006e4a:	d045      	beq.n	8006ed8 <_free_r+0x94>
 8006e4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e50:	1f0c      	subs	r4, r1, #4
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	bfb8      	it	lt
 8006e56:	18e4      	addlt	r4, r4, r3
 8006e58:	f000 f8d2 	bl	8007000 <__malloc_lock>
 8006e5c:	4a1f      	ldr	r2, [pc, #124]	; (8006edc <_free_r+0x98>)
 8006e5e:	6813      	ldr	r3, [r2, #0]
 8006e60:	4610      	mov	r0, r2
 8006e62:	b933      	cbnz	r3, 8006e72 <_free_r+0x2e>
 8006e64:	6063      	str	r3, [r4, #4]
 8006e66:	6014      	str	r4, [r2, #0]
 8006e68:	4628      	mov	r0, r5
 8006e6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e6e:	f000 b8c8 	b.w	8007002 <__malloc_unlock>
 8006e72:	42a3      	cmp	r3, r4
 8006e74:	d90c      	bls.n	8006e90 <_free_r+0x4c>
 8006e76:	6821      	ldr	r1, [r4, #0]
 8006e78:	1862      	adds	r2, r4, r1
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	bf04      	itt	eq
 8006e7e:	681a      	ldreq	r2, [r3, #0]
 8006e80:	685b      	ldreq	r3, [r3, #4]
 8006e82:	6063      	str	r3, [r4, #4]
 8006e84:	bf04      	itt	eq
 8006e86:	1852      	addeq	r2, r2, r1
 8006e88:	6022      	streq	r2, [r4, #0]
 8006e8a:	6004      	str	r4, [r0, #0]
 8006e8c:	e7ec      	b.n	8006e68 <_free_r+0x24>
 8006e8e:	4613      	mov	r3, r2
 8006e90:	685a      	ldr	r2, [r3, #4]
 8006e92:	b10a      	cbz	r2, 8006e98 <_free_r+0x54>
 8006e94:	42a2      	cmp	r2, r4
 8006e96:	d9fa      	bls.n	8006e8e <_free_r+0x4a>
 8006e98:	6819      	ldr	r1, [r3, #0]
 8006e9a:	1858      	adds	r0, r3, r1
 8006e9c:	42a0      	cmp	r0, r4
 8006e9e:	d10b      	bne.n	8006eb8 <_free_r+0x74>
 8006ea0:	6820      	ldr	r0, [r4, #0]
 8006ea2:	4401      	add	r1, r0
 8006ea4:	1858      	adds	r0, r3, r1
 8006ea6:	4282      	cmp	r2, r0
 8006ea8:	6019      	str	r1, [r3, #0]
 8006eaa:	d1dd      	bne.n	8006e68 <_free_r+0x24>
 8006eac:	6810      	ldr	r0, [r2, #0]
 8006eae:	6852      	ldr	r2, [r2, #4]
 8006eb0:	605a      	str	r2, [r3, #4]
 8006eb2:	4401      	add	r1, r0
 8006eb4:	6019      	str	r1, [r3, #0]
 8006eb6:	e7d7      	b.n	8006e68 <_free_r+0x24>
 8006eb8:	d902      	bls.n	8006ec0 <_free_r+0x7c>
 8006eba:	230c      	movs	r3, #12
 8006ebc:	602b      	str	r3, [r5, #0]
 8006ebe:	e7d3      	b.n	8006e68 <_free_r+0x24>
 8006ec0:	6820      	ldr	r0, [r4, #0]
 8006ec2:	1821      	adds	r1, r4, r0
 8006ec4:	428a      	cmp	r2, r1
 8006ec6:	bf04      	itt	eq
 8006ec8:	6811      	ldreq	r1, [r2, #0]
 8006eca:	6852      	ldreq	r2, [r2, #4]
 8006ecc:	6062      	str	r2, [r4, #4]
 8006ece:	bf04      	itt	eq
 8006ed0:	1809      	addeq	r1, r1, r0
 8006ed2:	6021      	streq	r1, [r4, #0]
 8006ed4:	605c      	str	r4, [r3, #4]
 8006ed6:	e7c7      	b.n	8006e68 <_free_r+0x24>
 8006ed8:	bd38      	pop	{r3, r4, r5, pc}
 8006eda:	bf00      	nop
 8006edc:	200000b8 	.word	0x200000b8

08006ee0 <_malloc_r>:
 8006ee0:	b570      	push	{r4, r5, r6, lr}
 8006ee2:	1ccd      	adds	r5, r1, #3
 8006ee4:	f025 0503 	bic.w	r5, r5, #3
 8006ee8:	3508      	adds	r5, #8
 8006eea:	2d0c      	cmp	r5, #12
 8006eec:	bf38      	it	cc
 8006eee:	250c      	movcc	r5, #12
 8006ef0:	2d00      	cmp	r5, #0
 8006ef2:	4606      	mov	r6, r0
 8006ef4:	db01      	blt.n	8006efa <_malloc_r+0x1a>
 8006ef6:	42a9      	cmp	r1, r5
 8006ef8:	d903      	bls.n	8006f02 <_malloc_r+0x22>
 8006efa:	230c      	movs	r3, #12
 8006efc:	6033      	str	r3, [r6, #0]
 8006efe:	2000      	movs	r0, #0
 8006f00:	bd70      	pop	{r4, r5, r6, pc}
 8006f02:	f000 f87d 	bl	8007000 <__malloc_lock>
 8006f06:	4a21      	ldr	r2, [pc, #132]	; (8006f8c <_malloc_r+0xac>)
 8006f08:	6814      	ldr	r4, [r2, #0]
 8006f0a:	4621      	mov	r1, r4
 8006f0c:	b991      	cbnz	r1, 8006f34 <_malloc_r+0x54>
 8006f0e:	4c20      	ldr	r4, [pc, #128]	; (8006f90 <_malloc_r+0xb0>)
 8006f10:	6823      	ldr	r3, [r4, #0]
 8006f12:	b91b      	cbnz	r3, 8006f1c <_malloc_r+0x3c>
 8006f14:	4630      	mov	r0, r6
 8006f16:	f000 f863 	bl	8006fe0 <_sbrk_r>
 8006f1a:	6020      	str	r0, [r4, #0]
 8006f1c:	4629      	mov	r1, r5
 8006f1e:	4630      	mov	r0, r6
 8006f20:	f000 f85e 	bl	8006fe0 <_sbrk_r>
 8006f24:	1c43      	adds	r3, r0, #1
 8006f26:	d124      	bne.n	8006f72 <_malloc_r+0x92>
 8006f28:	230c      	movs	r3, #12
 8006f2a:	6033      	str	r3, [r6, #0]
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	f000 f868 	bl	8007002 <__malloc_unlock>
 8006f32:	e7e4      	b.n	8006efe <_malloc_r+0x1e>
 8006f34:	680b      	ldr	r3, [r1, #0]
 8006f36:	1b5b      	subs	r3, r3, r5
 8006f38:	d418      	bmi.n	8006f6c <_malloc_r+0x8c>
 8006f3a:	2b0b      	cmp	r3, #11
 8006f3c:	d90f      	bls.n	8006f5e <_malloc_r+0x7e>
 8006f3e:	600b      	str	r3, [r1, #0]
 8006f40:	50cd      	str	r5, [r1, r3]
 8006f42:	18cc      	adds	r4, r1, r3
 8006f44:	4630      	mov	r0, r6
 8006f46:	f000 f85c 	bl	8007002 <__malloc_unlock>
 8006f4a:	f104 000b 	add.w	r0, r4, #11
 8006f4e:	1d23      	adds	r3, r4, #4
 8006f50:	f020 0007 	bic.w	r0, r0, #7
 8006f54:	1ac3      	subs	r3, r0, r3
 8006f56:	d0d3      	beq.n	8006f00 <_malloc_r+0x20>
 8006f58:	425a      	negs	r2, r3
 8006f5a:	50e2      	str	r2, [r4, r3]
 8006f5c:	e7d0      	b.n	8006f00 <_malloc_r+0x20>
 8006f5e:	428c      	cmp	r4, r1
 8006f60:	684b      	ldr	r3, [r1, #4]
 8006f62:	bf16      	itet	ne
 8006f64:	6063      	strne	r3, [r4, #4]
 8006f66:	6013      	streq	r3, [r2, #0]
 8006f68:	460c      	movne	r4, r1
 8006f6a:	e7eb      	b.n	8006f44 <_malloc_r+0x64>
 8006f6c:	460c      	mov	r4, r1
 8006f6e:	6849      	ldr	r1, [r1, #4]
 8006f70:	e7cc      	b.n	8006f0c <_malloc_r+0x2c>
 8006f72:	1cc4      	adds	r4, r0, #3
 8006f74:	f024 0403 	bic.w	r4, r4, #3
 8006f78:	42a0      	cmp	r0, r4
 8006f7a:	d005      	beq.n	8006f88 <_malloc_r+0xa8>
 8006f7c:	1a21      	subs	r1, r4, r0
 8006f7e:	4630      	mov	r0, r6
 8006f80:	f000 f82e 	bl	8006fe0 <_sbrk_r>
 8006f84:	3001      	adds	r0, #1
 8006f86:	d0cf      	beq.n	8006f28 <_malloc_r+0x48>
 8006f88:	6025      	str	r5, [r4, #0]
 8006f8a:	e7db      	b.n	8006f44 <_malloc_r+0x64>
 8006f8c:	200000b8 	.word	0x200000b8
 8006f90:	200000bc 	.word	0x200000bc

08006f94 <_realloc_r>:
 8006f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f96:	4607      	mov	r7, r0
 8006f98:	4614      	mov	r4, r2
 8006f9a:	460e      	mov	r6, r1
 8006f9c:	b921      	cbnz	r1, 8006fa8 <_realloc_r+0x14>
 8006f9e:	4611      	mov	r1, r2
 8006fa0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006fa4:	f7ff bf9c 	b.w	8006ee0 <_malloc_r>
 8006fa8:	b922      	cbnz	r2, 8006fb4 <_realloc_r+0x20>
 8006faa:	f7ff ff4b 	bl	8006e44 <_free_r>
 8006fae:	4625      	mov	r5, r4
 8006fb0:	4628      	mov	r0, r5
 8006fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fb4:	f000 f826 	bl	8007004 <_malloc_usable_size_r>
 8006fb8:	42a0      	cmp	r0, r4
 8006fba:	d20f      	bcs.n	8006fdc <_realloc_r+0x48>
 8006fbc:	4621      	mov	r1, r4
 8006fbe:	4638      	mov	r0, r7
 8006fc0:	f7ff ff8e 	bl	8006ee0 <_malloc_r>
 8006fc4:	4605      	mov	r5, r0
 8006fc6:	2800      	cmp	r0, #0
 8006fc8:	d0f2      	beq.n	8006fb0 <_realloc_r+0x1c>
 8006fca:	4631      	mov	r1, r6
 8006fcc:	4622      	mov	r2, r4
 8006fce:	f7ff ff15 	bl	8006dfc <memcpy>
 8006fd2:	4631      	mov	r1, r6
 8006fd4:	4638      	mov	r0, r7
 8006fd6:	f7ff ff35 	bl	8006e44 <_free_r>
 8006fda:	e7e9      	b.n	8006fb0 <_realloc_r+0x1c>
 8006fdc:	4635      	mov	r5, r6
 8006fde:	e7e7      	b.n	8006fb0 <_realloc_r+0x1c>

08006fe0 <_sbrk_r>:
 8006fe0:	b538      	push	{r3, r4, r5, lr}
 8006fe2:	4c06      	ldr	r4, [pc, #24]	; (8006ffc <_sbrk_r+0x1c>)
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	4605      	mov	r5, r0
 8006fe8:	4608      	mov	r0, r1
 8006fea:	6023      	str	r3, [r4, #0]
 8006fec:	f7fa fd46 	bl	8001a7c <_sbrk>
 8006ff0:	1c43      	adds	r3, r0, #1
 8006ff2:	d102      	bne.n	8006ffa <_sbrk_r+0x1a>
 8006ff4:	6823      	ldr	r3, [r4, #0]
 8006ff6:	b103      	cbz	r3, 8006ffa <_sbrk_r+0x1a>
 8006ff8:	602b      	str	r3, [r5, #0]
 8006ffa:	bd38      	pop	{r3, r4, r5, pc}
 8006ffc:	200001e8 	.word	0x200001e8

08007000 <__malloc_lock>:
 8007000:	4770      	bx	lr

08007002 <__malloc_unlock>:
 8007002:	4770      	bx	lr

08007004 <_malloc_usable_size_r>:
 8007004:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007008:	1f18      	subs	r0, r3, #4
 800700a:	2b00      	cmp	r3, #0
 800700c:	bfbc      	itt	lt
 800700e:	580b      	ldrlt	r3, [r1, r0]
 8007010:	18c0      	addlt	r0, r0, r3
 8007012:	4770      	bx	lr

08007014 <_init>:
 8007014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007016:	bf00      	nop
 8007018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800701a:	bc08      	pop	{r3}
 800701c:	469e      	mov	lr, r3
 800701e:	4770      	bx	lr

08007020 <_fini>:
 8007020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007022:	bf00      	nop
 8007024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007026:	bc08      	pop	{r3}
 8007028:	469e      	mov	lr, r3
 800702a:	4770      	bx	lr
