
eDesignMultimeter2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075f4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08007788  08007788  00017788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007848  08007848  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08007848  08007848  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007848  08007848  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007848  08007848  00017848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800784c  0800784c  0001784c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08007850  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b90  2000001c  0800786c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bac  0800786c  00020bac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001737b  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c43  00000000  00000000  000373c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001138  00000000  00000000  0003a010  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001010  00000000  00000000  0003b148  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000227ec  00000000  00000000  0003c158  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011a9d  00000000  00000000  0005e944  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4fff  00000000  00000000  000703e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001453e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047a0  00000000  00000000  0014545c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000001c 	.word	0x2000001c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007770 	.word	0x08007770

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000020 	.word	0x20000020
 80001d0:	08007770 	.word	0x08007770

080001d4 <ADC_Main_Function>:
uint16_t millivolts;
uint16_t adc_array[1000];
uint16_t adc_count = 0;

void ADC_Main_Function()
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b086      	sub	sp, #24
 80001d8:	af00      	add	r7, sp, #0
	if(adc_count > 999)
 80001da:	4b61      	ldr	r3, [pc, #388]	; (8000360 <ADC_Main_Function+0x18c>)
 80001dc:	881b      	ldrh	r3, [r3, #0]
 80001de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80001e2:	d370      	bcc.n	80002c6 <ADC_Main_Function+0xf2>
	{
	  // Do calculations every 1000 readings
	  adc_count = 0;
 80001e4:	4b5e      	ldr	r3, [pc, #376]	; (8000360 <ADC_Main_Function+0x18c>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	801a      	strh	r2, [r3, #0]
	  uint32_t total = 0;
 80001ea:	2300      	movs	r3, #0
 80001ec:	617b      	str	r3, [r7, #20]
	  uint16_t max = 0;
 80001ee:	2300      	movs	r3, #0
 80001f0:	827b      	strh	r3, [r7, #18]
	  uint16_t min = adc_array[99]; // arbitrary value
 80001f2:	4b5c      	ldr	r3, [pc, #368]	; (8000364 <ADC_Main_Function+0x190>)
 80001f4:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 80001f8:	823b      	strh	r3, [r7, #16]
	  int16_t diff = 0;
 80001fa:	2300      	movs	r3, #0
 80001fc:	807b      	strh	r3, [r7, #2]
	  int16_t prev_diff = 0;
 80001fe:	2300      	movs	r3, #0
 8000200:	81fb      	strh	r3, [r7, #14]
	  uint16_t mid_passes = 0;
 8000202:	2300      	movs	r3, #0
 8000204:	81bb      	strh	r3, [r7, #12]
	  // 1000 measurements at 5kHz take 200ms
	  for(int x = 0; x < 1000; x++)
 8000206:	2300      	movs	r3, #0
 8000208:	60bb      	str	r3, [r7, #8]
 800020a:	e023      	b.n	8000254 <ADC_Main_Function+0x80>
	  {
		  total += adc_array[x];
 800020c:	4a55      	ldr	r2, [pc, #340]	; (8000364 <ADC_Main_Function+0x190>)
 800020e:	68bb      	ldr	r3, [r7, #8]
 8000210:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000214:	461a      	mov	r2, r3
 8000216:	697b      	ldr	r3, [r7, #20]
 8000218:	4413      	add	r3, r2
 800021a:	617b      	str	r3, [r7, #20]
		  if(adc_array[x] > max)
 800021c:	4a51      	ldr	r2, [pc, #324]	; (8000364 <ADC_Main_Function+0x190>)
 800021e:	68bb      	ldr	r3, [r7, #8]
 8000220:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000224:	8a7a      	ldrh	r2, [r7, #18]
 8000226:	429a      	cmp	r2, r3
 8000228:	d205      	bcs.n	8000236 <ADC_Main_Function+0x62>
		  {
			  max = adc_array[x];
 800022a:	4a4e      	ldr	r2, [pc, #312]	; (8000364 <ADC_Main_Function+0x190>)
 800022c:	68bb      	ldr	r3, [r7, #8]
 800022e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000232:	827b      	strh	r3, [r7, #18]
 8000234:	e00b      	b.n	800024e <ADC_Main_Function+0x7a>
		  }
		  else if(adc_array[x] < min)
 8000236:	4a4b      	ldr	r2, [pc, #300]	; (8000364 <ADC_Main_Function+0x190>)
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800023e:	8a3a      	ldrh	r2, [r7, #16]
 8000240:	429a      	cmp	r2, r3
 8000242:	d904      	bls.n	800024e <ADC_Main_Function+0x7a>
		  {
			  min = adc_array[x];
 8000244:	4a47      	ldr	r2, [pc, #284]	; (8000364 <ADC_Main_Function+0x190>)
 8000246:	68bb      	ldr	r3, [r7, #8]
 8000248:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800024c:	823b      	strh	r3, [r7, #16]
	  for(int x = 0; x < 1000; x++)
 800024e:	68bb      	ldr	r3, [r7, #8]
 8000250:	3301      	adds	r3, #1
 8000252:	60bb      	str	r3, [r7, #8]
 8000254:	68bb      	ldr	r3, [r7, #8]
 8000256:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800025a:	dbd7      	blt.n	800020c <ADC_Main_Function+0x38>
		  }
	  }
	//			  measured_offset = total/1000;
	  MeasurementState.Offset = 1000;
 800025c:	4b42      	ldr	r3, [pc, #264]	; (8000368 <ADC_Main_Function+0x194>)
 800025e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000262:	811a      	strh	r2, [r3, #8]
	  for(int x = 0; x < 1000; x++)
 8000264:	2300      	movs	r3, #0
 8000266:	607b      	str	r3, [r7, #4]
 8000268:	e018      	b.n	800029c <ADC_Main_Function+0xc8>
	  {
		  // Calculate frequency
		  diff = adc_array[x] - MeasurementState.Offset;
 800026a:	4a3e      	ldr	r2, [pc, #248]	; (8000364 <ADC_Main_Function+0x190>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000272:	4b3d      	ldr	r3, [pc, #244]	; (8000368 <ADC_Main_Function+0x194>)
 8000274:	891b      	ldrh	r3, [r3, #8]
 8000276:	1ad3      	subs	r3, r2, r3
 8000278:	b29b      	uxth	r3, r3
 800027a:	807b      	strh	r3, [r7, #2]
		  if(diff > 0 && prev_diff < 0)
 800027c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000280:	2b00      	cmp	r3, #0
 8000282:	dd06      	ble.n	8000292 <ADC_Main_Function+0xbe>
 8000284:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000288:	2b00      	cmp	r3, #0
 800028a:	da02      	bge.n	8000292 <ADC_Main_Function+0xbe>
		  {
			  mid_passes++;
 800028c:	89bb      	ldrh	r3, [r7, #12]
 800028e:	3301      	adds	r3, #1
 8000290:	81bb      	strh	r3, [r7, #12]
		  }
		  prev_diff = diff;
 8000292:	887b      	ldrh	r3, [r7, #2]
 8000294:	81fb      	strh	r3, [r7, #14]
	  for(int x = 0; x < 1000; x++)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	3301      	adds	r3, #1
 800029a:	607b      	str	r3, [r7, #4]
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80002a2:	dbe2      	blt.n	800026a <ADC_Main_Function+0x96>
	  }
	  MeasurementState.Period = 50000/(mid_passes);
 80002a4:	89bb      	ldrh	r3, [r7, #12]
 80002a6:	f24c 3250 	movw	r2, #50000	; 0xc350
 80002aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80002ae:	b29a      	uxth	r2, r3
 80002b0:	4b2d      	ldr	r3, [pc, #180]	; (8000368 <ADC_Main_Function+0x194>)
 80002b2:	80da      	strh	r2, [r3, #6]
	//			  MeasurementState.Frequency = 1000000/measured_period;
	  MeasurementState.Frequency = 5250;
 80002b4:	4b2c      	ldr	r3, [pc, #176]	; (8000368 <ADC_Main_Function+0x194>)
 80002b6:	f241 4282 	movw	r2, #5250	; 0x1482
 80002ba:	809a      	strh	r2, [r3, #4]
	//			  MeasurementState.Amplitude = max - min;
	  MeasurementState.Amplitude = 500;
 80002bc:	4b2a      	ldr	r3, [pc, #168]	; (8000368 <ADC_Main_Function+0x194>)
 80002be:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80002c2:	805a      	strh	r2, [r3, #2]
 80002c4:	e043      	b.n	800034e <ADC_Main_Function+0x17a>
//			LCD_Display_Measurement();
		}
	}
	else
	{
	  HAL_ADC_Start(&hadc1);
 80002c6:	4829      	ldr	r0, [pc, #164]	; (800036c <ADC_Main_Function+0x198>)
 80002c8:	f002 fa78 	bl	80027bc <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80002cc:	f04f 31ff 	mov.w	r1, #4294967295
 80002d0:	4826      	ldr	r0, [pc, #152]	; (800036c <ADC_Main_Function+0x198>)
 80002d2:	f002 fbbf 	bl	8002a54 <HAL_ADC_PollForConversion>
	  raw = HAL_ADC_GetValue(&hadc1);
 80002d6:	4825      	ldr	r0, [pc, #148]	; (800036c <ADC_Main_Function+0x198>)
 80002d8:	f002 fcbe 	bl	8002c58 <HAL_ADC_GetValue>
 80002dc:	4603      	mov	r3, r0
 80002de:	b29a      	uxth	r2, r3
 80002e0:	4b23      	ldr	r3, [pc, #140]	; (8000370 <ADC_Main_Function+0x19c>)
 80002e2:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 80002e4:	4821      	ldr	r0, [pc, #132]	; (800036c <ADC_Main_Function+0x198>)
 80002e6:	f002 fb7f 	bl	80029e8 <HAL_ADC_Stop>
	  millivolts = raw*3300/4095;
 80002ea:	4b21      	ldr	r3, [pc, #132]	; (8000370 <ADC_Main_Function+0x19c>)
 80002ec:	881b      	ldrh	r3, [r3, #0]
 80002ee:	461a      	mov	r2, r3
 80002f0:	f640 43e4 	movw	r3, #3300	; 0xce4
 80002f4:	fb03 f302 	mul.w	r3, r3, r2
 80002f8:	4a1e      	ldr	r2, [pc, #120]	; (8000374 <ADC_Main_Function+0x1a0>)
 80002fa:	fb82 1203 	smull	r1, r2, r2, r3
 80002fe:	441a      	add	r2, r3
 8000300:	12d2      	asrs	r2, r2, #11
 8000302:	17db      	asrs	r3, r3, #31
 8000304:	1ad3      	subs	r3, r2, r3
 8000306:	b29a      	uxth	r2, r3
 8000308:	4b1b      	ldr	r3, [pc, #108]	; (8000378 <ADC_Main_Function+0x1a4>)
 800030a:	801a      	strh	r2, [r3, #0]
	  millivolts += 100*millivolts/1000; // Calibration
 800030c:	4b1a      	ldr	r3, [pc, #104]	; (8000378 <ADC_Main_Function+0x1a4>)
 800030e:	881b      	ldrh	r3, [r3, #0]
 8000310:	461a      	mov	r2, r3
 8000312:	2364      	movs	r3, #100	; 0x64
 8000314:	fb03 f302 	mul.w	r3, r3, r2
 8000318:	4a18      	ldr	r2, [pc, #96]	; (800037c <ADC_Main_Function+0x1a8>)
 800031a:	fb82 1203 	smull	r1, r2, r2, r3
 800031e:	1192      	asrs	r2, r2, #6
 8000320:	17db      	asrs	r3, r3, #31
 8000322:	1ad3      	subs	r3, r2, r3
 8000324:	b29a      	uxth	r2, r3
 8000326:	4b14      	ldr	r3, [pc, #80]	; (8000378 <ADC_Main_Function+0x1a4>)
 8000328:	881b      	ldrh	r3, [r3, #0]
 800032a:	4413      	add	r3, r2
 800032c:	b29a      	uxth	r2, r3
 800032e:	4b12      	ldr	r3, [pc, #72]	; (8000378 <ADC_Main_Function+0x1a4>)
 8000330:	801a      	strh	r2, [r3, #0]
	  adc_array[adc_count] = millivolts;
 8000332:	4b0b      	ldr	r3, [pc, #44]	; (8000360 <ADC_Main_Function+0x18c>)
 8000334:	881b      	ldrh	r3, [r3, #0]
 8000336:	461a      	mov	r2, r3
 8000338:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <ADC_Main_Function+0x1a4>)
 800033a:	8819      	ldrh	r1, [r3, #0]
 800033c:	4b09      	ldr	r3, [pc, #36]	; (8000364 <ADC_Main_Function+0x190>)
 800033e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  adc_count++;
 8000342:	4b07      	ldr	r3, [pc, #28]	; (8000360 <ADC_Main_Function+0x18c>)
 8000344:	881b      	ldrh	r3, [r3, #0]
 8000346:	3301      	adds	r3, #1
 8000348:	b29a      	uxth	r2, r3
 800034a:	4b05      	ldr	r3, [pc, #20]	; (8000360 <ADC_Main_Function+0x18c>)
 800034c:	801a      	strh	r2, [r3, #0]
	}

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 800034e:	2110      	movs	r1, #16
 8000350:	480b      	ldr	r0, [pc, #44]	; (8000380 <ADC_Main_Function+0x1ac>)
 8000352:	f003 fec3 	bl	80040dc <HAL_GPIO_TogglePin>
}
 8000356:	bf00      	nop
 8000358:	3718      	adds	r7, #24
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	20000038 	.word	0x20000038
 8000364:	20000054 	.word	0x20000054
 8000368:	20000828 	.word	0x20000828
 800036c:	20000a38 	.word	0x20000a38
 8000370:	20000824 	.word	0x20000824
 8000374:	80080081 	.word	0x80080081
 8000378:	20000826 	.word	0x20000826
 800037c:	10624dd3 	.word	0x10624dd3
 8000380:	48000800 	.word	0x48000800

08000384 <DAC_Switch_Output_OnOff>:
	OutputState.On = false;
	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
}

void DAC_Switch_Output_OnOff(uint8_t onoff)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	4603      	mov	r3, r0
 800038c:	71fb      	strb	r3, [r7, #7]
	if(onoff == '1'){
 800038e:	79fb      	ldrb	r3, [r7, #7]
 8000390:	2b31      	cmp	r3, #49	; 0x31
 8000392:	d10b      	bne.n	80003ac <DAC_Switch_Output_OnOff+0x28>
		OutputState.On = true;
 8000394:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <DAC_Switch_Output_OnOff+0x4c>)
 8000396:	2201      	movs	r2, #1
 8000398:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 800039c:	2201      	movs	r2, #1
 800039e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a6:	f003 fe81 	bl	80040ac <HAL_GPIO_WritePin>
	}else if(onoff == '0'){
		OutputState.On = false;
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
	}
}
 80003aa:	e00d      	b.n	80003c8 <DAC_Switch_Output_OnOff+0x44>
	}else if(onoff == '0'){
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	2b30      	cmp	r3, #48	; 0x30
 80003b0:	d10a      	bne.n	80003c8 <DAC_Switch_Output_OnOff+0x44>
		OutputState.On = false;
 80003b2:	4b07      	ldr	r3, [pc, #28]	; (80003d0 <DAC_Switch_Output_OnOff+0x4c>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 80003ba:	2200      	movs	r2, #0
 80003bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003c4:	f003 fe72 	bl	80040ac <HAL_GPIO_WritePin>
}
 80003c8:	bf00      	nop
 80003ca:	3708      	adds	r7, #8
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	20000834 	.word	0x20000834

080003d4 <LCD_Init>:
#define lcd_D7_bit			12

DisplayStateType DisplayState;

void LCD_Init()
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0

	HAL_Delay(20);
 80003d8:	2014      	movs	r0, #20
 80003da:	f001 ffd3 	bl	8002384 <HAL_Delay>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionReset);
 80003de:	2030      	movs	r0, #48	; 0x30
 80003e0:	f000 f916 	bl	8000610 <LCD_Write_8bitInstruction>
	HAL_Delay(10);
 80003e4:	200a      	movs	r0, #10
 80003e6:	f001 ffcd 	bl	8002384 <HAL_Delay>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionReset);
 80003ea:	2030      	movs	r0, #48	; 0x30
 80003ec:	f000 f910 	bl	8000610 <LCD_Write_8bitInstruction>
	HAL_Delay(1);
 80003f0:	2001      	movs	r0, #1
 80003f2:	f001 ffc7 	bl	8002384 <HAL_Delay>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionReset);
 80003f6:	2030      	movs	r0, #48	; 0x30
 80003f8:	f000 f90a 	bl	8000610 <LCD_Write_8bitInstruction>
	HAL_Delay(10);
 80003fc:	200a      	movs	r0, #10
 80003fe:	f001 ffc1 	bl	8002384 <HAL_Delay>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionSet4bit);
 8000402:	2028      	movs	r0, #40	; 0x28
 8000404:	f000 f904 	bl	8000610 <LCD_Write_8bitInstruction>
	HAL_Delay(1);
 8000408:	2001      	movs	r0, #1
 800040a:	f001 ffbb 	bl	8002384 <HAL_Delay>

	LCD_Write_Instruction(lcd_instruction_FunctionSet4bit);
 800040e:	2028      	movs	r0, #40	; 0x28
 8000410:	f000 f85a 	bl	80004c8 <LCD_Write_Instruction>
	HAL_Delay(1);
 8000414:	2001      	movs	r0, #1
 8000416:	f001 ffb5 	bl	8002384 <HAL_Delay>

	LCD_Write_Instruction(lcd_instruction_DisplayOn);
 800041a:	200f      	movs	r0, #15
 800041c:	f000 f854 	bl	80004c8 <LCD_Write_Instruction>
	HAL_Delay(1);
 8000420:	2001      	movs	r0, #1
 8000422:	f001 ffaf 	bl	8002384 <HAL_Delay>

	LCD_Write_Instruction(lcd_instruction_ClearDisplay);
 8000426:	2001      	movs	r0, #1
 8000428:	f000 f84e 	bl	80004c8 <LCD_Write_Instruction>
	HAL_Delay(3);
 800042c:	2003      	movs	r0, #3
 800042e:	f001 ffa9 	bl	8002384 <HAL_Delay>

	LCD_Write_Instruction(lcd_instruction_EntryMode);
 8000432:	2006      	movs	r0, #6
 8000434:	f000 f848 	bl	80004c8 <LCD_Write_Instruction>
	HAL_Delay(1);
 8000438:	2001      	movs	r0, #1
 800043a:	f001 ffa3 	bl	8002384 <HAL_Delay>

}
 800043e:	bf00      	nop
 8000440:	bd80      	pop	{r7, pc}

08000442 <LCD_Write_String>:

void LCD_Write_String(uint8_t string[])
{
 8000442:	b580      	push	{r7, lr}
 8000444:	b084      	sub	sp, #16
 8000446:	af00      	add	r7, sp, #0
 8000448:	6078      	str	r0, [r7, #4]
	int i = 0;
 800044a:	2300      	movs	r3, #0
 800044c:	60fb      	str	r3, [r7, #12]
	while (string[i] != 0)
 800044e:	e00c      	b.n	800046a <LCD_Write_String+0x28>
	{
		LCD_Write_Character(string[i]);
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	687a      	ldr	r2, [r7, #4]
 8000454:	4413      	add	r3, r2
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	4618      	mov	r0, r3
 800045a:	f000 f811 	bl	8000480 <LCD_Write_Character>
		i++;
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	3301      	adds	r3, #1
 8000462:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1);
 8000464:	2001      	movs	r0, #1
 8000466:	f001 ff8d 	bl	8002384 <HAL_Delay>
	while (string[i] != 0)
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	687a      	ldr	r2, [r7, #4]
 800046e:	4413      	add	r3, r2
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b00      	cmp	r3, #0
 8000474:	d1ec      	bne.n	8000450 <LCD_Write_String+0xe>
	}
}
 8000476:	bf00      	nop
 8000478:	3710      	adds	r7, #16
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
	...

08000480 <LCD_Write_Character>:

void LCD_Write_Character(uint8_t character)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	4603      	mov	r3, r0
 8000488:	71fb      	strb	r3, [r7, #7]
	lcd_RS_GPIO_Port->ODR |= (1<<lcd_RS_bit);			// select data register (RS High)
 800048a:	4b0d      	ldr	r3, [pc, #52]	; (80004c0 <LCD_Write_Character+0x40>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	4a0c      	ldr	r2, [pc, #48]	; (80004c0 <LCD_Write_Character+0x40>)
 8000490:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000494:	6153      	str	r3, [r2, #20]
	LCD_Write_Nibbles(character);
 8000496:	79fb      	ldrb	r3, [r7, #7]
 8000498:	4618      	mov	r0, r3
 800049a:	f000 f82b 	bl	80004f4 <LCD_Write_Nibbles>
	DisplayState.NumCharacters += 1;
 800049e:	4b09      	ldr	r3, [pc, #36]	; (80004c4 <LCD_Write_Character+0x44>)
 80004a0:	785b      	ldrb	r3, [r3, #1]
 80004a2:	3301      	adds	r3, #1
 80004a4:	b2da      	uxtb	r2, r3
 80004a6:	4b07      	ldr	r3, [pc, #28]	; (80004c4 <LCD_Write_Character+0x44>)
 80004a8:	705a      	strb	r2, [r3, #1]
	if(DisplayState.NumCharacters > 15)
 80004aa:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <LCD_Write_Character+0x44>)
 80004ac:	785b      	ldrb	r3, [r3, #1]
 80004ae:	2b0f      	cmp	r3, #15
 80004b0:	d902      	bls.n	80004b8 <LCD_Write_Character+0x38>
	{
		// Scroll Screen
		LCD_Write_Instruction(lcd_instruction_DisplayShiftLeft);
 80004b2:	2018      	movs	r0, #24
 80004b4:	f000 f808 	bl	80004c8 <LCD_Write_Instruction>
	}
}
 80004b8:	bf00      	nop
 80004ba:	3708      	adds	r7, #8
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	48000400 	.word	0x48000400
 80004c4:	200009d8 	.word	0x200009d8

080004c8 <LCD_Write_Instruction>:

void LCD_Write_Instruction(uint8_t instruction)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
	lcd_RS_GPIO_Port->ODR &= ~(1<<lcd_RS_bit);			// select the Instruction Register (RS low)
 80004d2:	4b07      	ldr	r3, [pc, #28]	; (80004f0 <LCD_Write_Instruction+0x28>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	4a06      	ldr	r2, [pc, #24]	; (80004f0 <LCD_Write_Instruction+0x28>)
 80004d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80004dc:	6153      	str	r3, [r2, #20]
	LCD_Write_Nibbles(instruction);
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	4618      	mov	r0, r3
 80004e2:	f000 f807 	bl	80004f4 <LCD_Write_Nibbles>
}
 80004e6:	bf00      	nop
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	48000400 	.word	0x48000400

080004f4 <LCD_Write_Nibbles>:

void LCD_Write_Nibbles(uint8_t byte)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
	lcd_E_GPIO_Port->ODR |= (1<<lcd_E_bit);			// set E high
 80004fe:	4b42      	ldr	r3, [pc, #264]	; (8000608 <LCD_Write_Nibbles+0x114>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	4a41      	ldr	r2, [pc, #260]	; (8000608 <LCD_Write_Nibbles+0x114>)
 8000504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000508:	6153      	str	r3, [r2, #20]
	LCD_ZeroPins();
 800050a:	f000 f8d5 	bl	80006b8 <LCD_ZeroPins>

	// Write first (most significant) nibble
	if(byte & 1<<7)	lcd_D7_GPIO_Port->ODR |= (1<<lcd_D7_bit);
 800050e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000512:	2b00      	cmp	r3, #0
 8000514:	da07      	bge.n	8000526 <LCD_Write_Nibbles+0x32>
 8000516:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800051a:	695b      	ldr	r3, [r3, #20]
 800051c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000520:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000524:	6153      	str	r3, [r2, #20]
	if(byte & 1<<6)	lcd_D6_GPIO_Port->ODR |= (1<<lcd_D6_bit);
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800052c:	2b00      	cmp	r3, #0
 800052e:	d007      	beq.n	8000540 <LCD_Write_Nibbles+0x4c>
 8000530:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800053a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800053e:	6153      	str	r3, [r2, #20]
	if(byte & 1<<5)	lcd_D5_GPIO_Port->ODR |= (1<<lcd_D5_bit);
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	f003 0320 	and.w	r3, r3, #32
 8000546:	2b00      	cmp	r3, #0
 8000548:	d005      	beq.n	8000556 <LCD_Write_Nibbles+0x62>
 800054a:	4b30      	ldr	r3, [pc, #192]	; (800060c <LCD_Write_Nibbles+0x118>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	4a2f      	ldr	r2, [pc, #188]	; (800060c <LCD_Write_Nibbles+0x118>)
 8000550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000554:	6153      	str	r3, [r2, #20]
	if(byte & 1<<4)	lcd_D4_GPIO_Port->ODR |= (1<<lcd_D4_bit);
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	f003 0310 	and.w	r3, r3, #16
 800055c:	2b00      	cmp	r3, #0
 800055e:	d005      	beq.n	800056c <LCD_Write_Nibbles+0x78>
 8000560:	4b2a      	ldr	r3, [pc, #168]	; (800060c <LCD_Write_Nibbles+0x118>)
 8000562:	695b      	ldr	r3, [r3, #20]
 8000564:	4a29      	ldr	r2, [pc, #164]	; (800060c <LCD_Write_Nibbles+0x118>)
 8000566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800056a:	6153      	str	r3, [r2, #20]


	// Pulse Enable
	HAL_Delay(1);
 800056c:	2001      	movs	r0, #1
 800056e:	f001 ff09 	bl	8002384 <HAL_Delay>
	lcd_E_GPIO_Port->ODR &= ~(1<<lcd_E_bit);			// Set to 0
 8000572:	4b25      	ldr	r3, [pc, #148]	; (8000608 <LCD_Write_Nibbles+0x114>)
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	4a24      	ldr	r2, [pc, #144]	; (8000608 <LCD_Write_Nibbles+0x114>)
 8000578:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800057c:	6153      	str	r3, [r2, #20]
	lcd_E_GPIO_Port->ODR |= (1<<lcd_E_bit);				// Set to 1
 800057e:	4b22      	ldr	r3, [pc, #136]	; (8000608 <LCD_Write_Nibbles+0x114>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	4a21      	ldr	r2, [pc, #132]	; (8000608 <LCD_Write_Nibbles+0x114>)
 8000584:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000588:	6153      	str	r3, [r2, #20]

	LCD_ZeroPins();
 800058a:	f000 f895 	bl	80006b8 <LCD_ZeroPins>
	if(byte & 1<<3)	lcd_D7_GPIO_Port->ODR |= (1<<lcd_D7_bit);
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	f003 0308 	and.w	r3, r3, #8
 8000594:	2b00      	cmp	r3, #0
 8000596:	d007      	beq.n	80005a8 <LCD_Write_Nibbles+0xb4>
 8000598:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005a6:	6153      	str	r3, [r2, #20]
	if(byte & 1<<2)	lcd_D6_GPIO_Port->ODR |= (1<<lcd_D6_bit);
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	f003 0304 	and.w	r3, r3, #4
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d007      	beq.n	80005c2 <LCD_Write_Nibbles+0xce>
 80005b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005b6:	695b      	ldr	r3, [r3, #20]
 80005b8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005c0:	6153      	str	r3, [r2, #20]
	if(byte & 1<<1)	lcd_D5_GPIO_Port->ODR |= (1<<lcd_D5_bit);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	f003 0302 	and.w	r3, r3, #2
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d005      	beq.n	80005d8 <LCD_Write_Nibbles+0xe4>
 80005cc:	4b0f      	ldr	r3, [pc, #60]	; (800060c <LCD_Write_Nibbles+0x118>)
 80005ce:	695b      	ldr	r3, [r3, #20]
 80005d0:	4a0e      	ldr	r2, [pc, #56]	; (800060c <LCD_Write_Nibbles+0x118>)
 80005d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005d6:	6153      	str	r3, [r2, #20]
	if(byte & 1<<0)	lcd_D4_GPIO_Port->ODR |= (1<<lcd_D4_bit);
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d005      	beq.n	80005ee <LCD_Write_Nibbles+0xfa>
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <LCD_Write_Nibbles+0x118>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	4a09      	ldr	r2, [pc, #36]	; (800060c <LCD_Write_Nibbles+0x118>)
 80005e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005ec:	6153      	str	r3, [r2, #20]

	// Drop Enable
	HAL_Delay(1);
 80005ee:	2001      	movs	r0, #1
 80005f0:	f001 fec8 	bl	8002384 <HAL_Delay>
	lcd_E_GPIO_Port->ODR &= ~(1<<lcd_E_bit);		// Set to 0
 80005f4:	4b04      	ldr	r3, [pc, #16]	; (8000608 <LCD_Write_Nibbles+0x114>)
 80005f6:	695b      	ldr	r3, [r3, #20]
 80005f8:	4a03      	ldr	r2, [pc, #12]	; (8000608 <LCD_Write_Nibbles+0x114>)
 80005fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80005fe:	6153      	str	r3, [r2, #20]
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	48000400 	.word	0x48000400
 800060c:	48000800 	.word	0x48000800

08000610 <LCD_Write_8bitInstruction>:

void LCD_Write_8bitInstruction(uint8_t byte)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
	lcd_RS_GPIO_Port->ODR &= ~(1<<lcd_RS_bit);			// Set RS to 0
 800061a:	4b25      	ldr	r3, [pc, #148]	; (80006b0 <LCD_Write_8bitInstruction+0xa0>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	4a24      	ldr	r2, [pc, #144]	; (80006b0 <LCD_Write_8bitInstruction+0xa0>)
 8000620:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000624:	6153      	str	r3, [r2, #20]
	lcd_E_GPIO_Port->ODR |= (1<<lcd_E_bit);				// Set E to 1
 8000626:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <LCD_Write_8bitInstruction+0xa0>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	4a21      	ldr	r2, [pc, #132]	; (80006b0 <LCD_Write_8bitInstruction+0xa0>)
 800062c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000630:	6153      	str	r3, [r2, #20]
	LCD_ZeroPins();
 8000632:	f000 f841 	bl	80006b8 <LCD_ZeroPins>

	// Set to zero first
	if(byte & 1<<7)	lcd_D7_GPIO_Port->ODR |= (1<<lcd_D7_bit);
 8000636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063a:	2b00      	cmp	r3, #0
 800063c:	da07      	bge.n	800064e <LCD_Write_8bitInstruction+0x3e>
 800063e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000642:	695b      	ldr	r3, [r3, #20]
 8000644:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000648:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800064c:	6153      	str	r3, [r2, #20]
	if(byte & 1<<6)	lcd_D6_GPIO_Port->ODR |= (1<<lcd_D6_bit);
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000654:	2b00      	cmp	r3, #0
 8000656:	d007      	beq.n	8000668 <LCD_Write_8bitInstruction+0x58>
 8000658:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000662:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000666:	6153      	str	r3, [r2, #20]
	if(byte & 1<<5)	lcd_D5_GPIO_Port->ODR |= (1<<lcd_D5_bit);
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	f003 0320 	and.w	r3, r3, #32
 800066e:	2b00      	cmp	r3, #0
 8000670:	d005      	beq.n	800067e <LCD_Write_8bitInstruction+0x6e>
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <LCD_Write_8bitInstruction+0xa4>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	4a0f      	ldr	r2, [pc, #60]	; (80006b4 <LCD_Write_8bitInstruction+0xa4>)
 8000678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800067c:	6153      	str	r3, [r2, #20]
	if(byte & 1<<4)	lcd_D4_GPIO_Port->ODR |= (1<<lcd_D4_bit);
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	f003 0310 	and.w	r3, r3, #16
 8000684:	2b00      	cmp	r3, #0
 8000686:	d005      	beq.n	8000694 <LCD_Write_8bitInstruction+0x84>
 8000688:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <LCD_Write_8bitInstruction+0xa4>)
 800068a:	695b      	ldr	r3, [r3, #20]
 800068c:	4a09      	ldr	r2, [pc, #36]	; (80006b4 <LCD_Write_8bitInstruction+0xa4>)
 800068e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000692:	6153      	str	r3, [r2, #20]

	HAL_Delay(1);
 8000694:	2001      	movs	r0, #1
 8000696:	f001 fe75 	bl	8002384 <HAL_Delay>
	lcd_E_GPIO_Port->ODR &= ~(1<<lcd_E_bit);		// Set E to 0
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <LCD_Write_8bitInstruction+0xa0>)
 800069c:	695b      	ldr	r3, [r3, #20]
 800069e:	4a04      	ldr	r2, [pc, #16]	; (80006b0 <LCD_Write_8bitInstruction+0xa0>)
 80006a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80006a4:	6153      	str	r3, [r2, #20]
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	48000400 	.word	0x48000400
 80006b4:	48000800 	.word	0x48000800

080006b8 <LCD_ZeroPins>:

void LCD_ZeroPins()
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
	lcd_D7_GPIO_Port->ODR &= ~(1<<lcd_D7_bit);
 80006bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80006ca:	6153      	str	r3, [r2, #20]
	lcd_D6_GPIO_Port->ODR &= ~(1<<lcd_D6_bit);
 80006cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006d0:	695b      	ldr	r3, [r3, #20]
 80006d2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80006da:	6153      	str	r3, [r2, #20]
	lcd_D5_GPIO_Port->ODR &= ~(1<<lcd_D5_bit);
 80006dc:	4b08      	ldr	r3, [pc, #32]	; (8000700 <LCD_ZeroPins+0x48>)
 80006de:	695b      	ldr	r3, [r3, #20]
 80006e0:	4a07      	ldr	r2, [pc, #28]	; (8000700 <LCD_ZeroPins+0x48>)
 80006e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80006e6:	6153      	str	r3, [r2, #20]
	lcd_D4_GPIO_Port->ODR &= ~(1<<lcd_D4_bit);
 80006e8:	4b05      	ldr	r3, [pc, #20]	; (8000700 <LCD_ZeroPins+0x48>)
 80006ea:	695b      	ldr	r3, [r3, #20]
 80006ec:	4a04      	ldr	r2, [pc, #16]	; (8000700 <LCD_ZeroPins+0x48>)
 80006ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006f2:	6153      	str	r3, [r2, #20]
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	48000800 	.word	0x48000800

08000704 <LCD_Clear_Display>:

void LCD_Clear_Display()
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	LCD_Write_Instruction(lcd_instruction_CursorHome);
 8000708:	2002      	movs	r0, #2
 800070a:	f7ff fedd 	bl	80004c8 <LCD_Write_Instruction>
	LCD_Write_Instruction(lcd_instruction_ClearDisplay);
 800070e:	2001      	movs	r0, #1
 8000710:	f7ff feda 	bl	80004c8 <LCD_Write_Instruction>
//	HAL_Delay(3);
//	LCD_Write_Instruction(lcd_instruction_EntryMode);
	DisplayState.NumCharacters = 0;
 8000714:	4b02      	ldr	r3, [pc, #8]	; (8000720 <LCD_Clear_Display+0x1c>)
 8000716:	2200      	movs	r2, #0
 8000718:	705a      	strb	r2, [r3, #1]
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200009d8 	.word	0x200009d8

08000724 <LCD_NewLine>:

void LCD_NewLine()
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	LCD_Write_Instruction(lcd_instruction_CursorNewLine);
 8000728:	20c0      	movs	r0, #192	; 0xc0
 800072a:	f7ff fecd 	bl	80004c8 <LCD_Write_Instruction>
	DisplayState.NumCharacters = 0;
 800072e:	4b02      	ldr	r3, [pc, #8]	; (8000738 <LCD_NewLine+0x14>)
 8000730:	2200      	movs	r2, #0
 8000732:	705a      	strb	r2, [r3, #1]
}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	200009d8 	.word	0x200009d8

0800073c <LCD_changeDisplayMode>:

void LCD_changeDisplayMode(DisplayMode newDisplayMode)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
	LCD_Clear_Display();
 8000746:	f7ff ffdd 	bl	8000704 <LCD_Clear_Display>
	if (newDisplayMode == Menu)
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d117      	bne.n	8000780 <LCD_changeDisplayMode+0x44>
	{
		// Change to Menu Display State
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000750:	2201      	movs	r2, #1
 8000752:	2120      	movs	r1, #32
 8000754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000758:	f003 fca8 	bl	80040ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	2180      	movs	r1, #128	; 0x80
 8000760:	482b      	ldr	r0, [pc, #172]	; (8000810 <LCD_changeDisplayMode+0xd4>)
 8000762:	f003 fca3 	bl	80040ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800076c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000770:	f003 fc9c 	bl	80040ac <HAL_GPIO_WritePin>
		LCD_Display_Menu();
 8000774:	f000 f852 	bl	800081c <LCD_Display_Menu>
		DisplayState.Mode = Menu;
 8000778:	4b26      	ldr	r3, [pc, #152]	; (8000814 <LCD_changeDisplayMode+0xd8>)
 800077a:	2200      	movs	r2, #0
 800077c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
		uint8_t topline[] = "Output";
		LCD_Write_String(topline);
		DisplayState.Mode = Output;
	}
}
 800077e:	e042      	b.n	8000806 <LCD_changeDisplayMode+0xca>
	else if (newDisplayMode == Measurement)
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	2b01      	cmp	r3, #1
 8000784:	d117      	bne.n	80007b6 <LCD_changeDisplayMode+0x7a>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2120      	movs	r1, #32
 800078a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078e:	f003 fc8d 	bl	80040ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000792:	2201      	movs	r2, #1
 8000794:	2180      	movs	r1, #128	; 0x80
 8000796:	481e      	ldr	r0, [pc, #120]	; (8000810 <LCD_changeDisplayMode+0xd4>)
 8000798:	f003 fc88 	bl	80040ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a6:	f003 fc81 	bl	80040ac <HAL_GPIO_WritePin>
		LCD_Display_Measurement();
 80007aa:	f000 f84d 	bl	8000848 <LCD_Display_Measurement>
		DisplayState.Mode = Measurement;
 80007ae:	4b19      	ldr	r3, [pc, #100]	; (8000814 <LCD_changeDisplayMode+0xd8>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	701a      	strb	r2, [r3, #0]
}
 80007b4:	e027      	b.n	8000806 <LCD_changeDisplayMode+0xca>
	else if (newDisplayMode == Output)
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	2b02      	cmp	r3, #2
 80007ba:	d124      	bne.n	8000806 <LCD_changeDisplayMode+0xca>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	2120      	movs	r1, #32
 80007c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c4:	f003 fc72 	bl	80040ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2180      	movs	r1, #128	; 0x80
 80007cc:	4810      	ldr	r0, [pc, #64]	; (8000810 <LCD_changeDisplayMode+0xd4>)
 80007ce:	f003 fc6d 	bl	80040ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 80007d2:	2201      	movs	r2, #1
 80007d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007dc:	f003 fc66 	bl	80040ac <HAL_GPIO_WritePin>
		uint8_t topline[] = "Output";
 80007e0:	4a0d      	ldr	r2, [pc, #52]	; (8000818 <LCD_changeDisplayMode+0xdc>)
 80007e2:	f107 0308 	add.w	r3, r7, #8
 80007e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007ea:	6018      	str	r0, [r3, #0]
 80007ec:	3304      	adds	r3, #4
 80007ee:	8019      	strh	r1, [r3, #0]
 80007f0:	3302      	adds	r3, #2
 80007f2:	0c0a      	lsrs	r2, r1, #16
 80007f4:	701a      	strb	r2, [r3, #0]
		LCD_Write_String(topline);
 80007f6:	f107 0308 	add.w	r3, r7, #8
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff fe21 	bl	8000442 <LCD_Write_String>
		DisplayState.Mode = Output;
 8000800:	4b04      	ldr	r3, [pc, #16]	; (8000814 <LCD_changeDisplayMode+0xd8>)
 8000802:	2202      	movs	r2, #2
 8000804:	701a      	strb	r2, [r3, #0]
}
 8000806:	bf00      	nop
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	48000800 	.word	0x48000800
 8000814:	200009d8 	.word	0x200009d8
 8000818:	08007788 	.word	0x08007788

0800081c <LCD_Display_Menu>:

void LCD_Display_Menu()
{
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
	uint8_t lcd_string[] = "Menu Top Level";
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <LCD_Display_Menu+0x28>)
 8000824:	463c      	mov	r4, r7
 8000826:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000828:	c407      	stmia	r4!, {r0, r1, r2}
 800082a:	8023      	strh	r3, [r4, #0]
 800082c:	3402      	adds	r4, #2
 800082e:	0c1b      	lsrs	r3, r3, #16
 8000830:	7023      	strb	r3, [r4, #0]
	LCD_Write_String(lcd_string);
 8000832:	463b      	mov	r3, r7
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff fe04 	bl	8000442 <LCD_Write_String>
}
 800083a:	bf00      	nop
 800083c:	3714      	adds	r7, #20
 800083e:	46bd      	mov	sp, r7
 8000840:	bd90      	pop	{r4, r7, pc}
 8000842:	bf00      	nop
 8000844:	08007790 	.word	0x08007790

08000848 <LCD_Display_Measurement>:

void LCD_Display_Measurement()
{
 8000848:	b5b0      	push	{r4, r5, r7, lr}
 800084a:	b09e      	sub	sp, #120	; 0x78
 800084c:	af00      	add	r7, sp, #0
	LCD_Clear_Display();
 800084e:	f7ff ff59 	bl	8000704 <LCD_Clear_Display>
	switch(MeasurementState.Mode)
 8000852:	4b44      	ldr	r3, [pc, #272]	; (8000964 <LCD_Display_Measurement+0x11c>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	2b04      	cmp	r3, #4
 8000858:	f200 81c8 	bhi.w	8000bec <LCD_Display_Measurement+0x3a4>
 800085c:	a201      	add	r2, pc, #4	; (adr r2, 8000864 <LCD_Display_Measurement+0x1c>)
 800085e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000862:	bf00      	nop
 8000864:	08000879 	.word	0x08000879
 8000868:	08000943 	.word	0x08000943
 800086c:	0800097d 	.word	0x0800097d
 8000870:	08000b97 	.word	0x08000b97
 8000874:	08000bb7 	.word	0x08000bb7
	{
		case DV:
		{
			uint8_t topline[] = "x.xxxV";
 8000878:	4a3b      	ldr	r2, [pc, #236]	; (8000968 <LCD_Display_Measurement+0x120>)
 800087a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800087e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000882:	6018      	str	r0, [r3, #0]
 8000884:	3304      	adds	r3, #4
 8000886:	8019      	strh	r1, [r3, #0]
 8000888:	3302      	adds	r3, #2
 800088a:	0c0a      	lsrs	r2, r1, #16
 800088c:	701a      	strb	r2, [r3, #0]
			topline[0] = ((MeasurementState.Offset/1000) % 10) + 48;
 800088e:	4b35      	ldr	r3, [pc, #212]	; (8000964 <LCD_Display_Measurement+0x11c>)
 8000890:	891b      	ldrh	r3, [r3, #8]
 8000892:	4a36      	ldr	r2, [pc, #216]	; (800096c <LCD_Display_Measurement+0x124>)
 8000894:	fba2 2303 	umull	r2, r3, r2, r3
 8000898:	099b      	lsrs	r3, r3, #6
 800089a:	b29a      	uxth	r2, r3
 800089c:	4b34      	ldr	r3, [pc, #208]	; (8000970 <LCD_Display_Measurement+0x128>)
 800089e:	fba3 1302 	umull	r1, r3, r3, r2
 80008a2:	08d9      	lsrs	r1, r3, #3
 80008a4:	460b      	mov	r3, r1
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	440b      	add	r3, r1
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	3330      	adds	r3, #48	; 0x30
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
			topline[2] = ((MeasurementState.Offset/100) % 10) + 48;
 80008ba:	4b2a      	ldr	r3, [pc, #168]	; (8000964 <LCD_Display_Measurement+0x11c>)
 80008bc:	891b      	ldrh	r3, [r3, #8]
 80008be:	4a2d      	ldr	r2, [pc, #180]	; (8000974 <LCD_Display_Measurement+0x12c>)
 80008c0:	fba2 2303 	umull	r2, r3, r2, r3
 80008c4:	095b      	lsrs	r3, r3, #5
 80008c6:	b29a      	uxth	r2, r3
 80008c8:	4b29      	ldr	r3, [pc, #164]	; (8000970 <LCD_Display_Measurement+0x128>)
 80008ca:	fba3 1302 	umull	r1, r3, r3, r2
 80008ce:	08d9      	lsrs	r1, r3, #3
 80008d0:	460b      	mov	r3, r1
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	440b      	add	r3, r1
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	b29b      	uxth	r3, r3
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	3330      	adds	r3, #48	; 0x30
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
			topline[3] = ((MeasurementState.Offset/10) % 10) + 48;
 80008e6:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <LCD_Display_Measurement+0x11c>)
 80008e8:	891b      	ldrh	r3, [r3, #8]
 80008ea:	4a21      	ldr	r2, [pc, #132]	; (8000970 <LCD_Display_Measurement+0x128>)
 80008ec:	fba2 2303 	umull	r2, r3, r2, r3
 80008f0:	08db      	lsrs	r3, r3, #3
 80008f2:	b29a      	uxth	r2, r3
 80008f4:	4b1e      	ldr	r3, [pc, #120]	; (8000970 <LCD_Display_Measurement+0x128>)
 80008f6:	fba3 1302 	umull	r1, r3, r3, r2
 80008fa:	08d9      	lsrs	r1, r3, #3
 80008fc:	460b      	mov	r3, r1
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	440b      	add	r3, r1
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	b29b      	uxth	r3, r3
 8000908:	b2db      	uxtb	r3, r3
 800090a:	3330      	adds	r3, #48	; 0x30
 800090c:	b2db      	uxtb	r3, r3
 800090e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
			topline[4] = ((MeasurementState.Offset) % 10) + 48;
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <LCD_Display_Measurement+0x11c>)
 8000914:	891a      	ldrh	r2, [r3, #8]
 8000916:	4b16      	ldr	r3, [pc, #88]	; (8000970 <LCD_Display_Measurement+0x128>)
 8000918:	fba3 1302 	umull	r1, r3, r3, r2
 800091c:	08d9      	lsrs	r1, r3, #3
 800091e:	460b      	mov	r3, r1
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	440b      	add	r3, r1
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	1ad3      	subs	r3, r2, r3
 8000928:	b29b      	uxth	r3, r3
 800092a:	b2db      	uxtb	r3, r3
 800092c:	3330      	adds	r3, #48	; 0x30
 800092e:	b2db      	uxtb	r3, r3
 8000930:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
			LCD_Write_String(topline);
 8000934:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fd82 	bl	8000442 <LCD_Write_String>
			break;
 800093e:	bf00      	nop
 8000940:	e155      	b.n	8000bee <LCD_Display_Measurement+0x3a6>
		}
		case DI:
		{
			uint8_t topline[] = "DC Current";
 8000942:	4a0d      	ldr	r2, [pc, #52]	; (8000978 <LCD_Display_Measurement+0x130>)
 8000944:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000948:	ca07      	ldmia	r2, {r0, r1, r2}
 800094a:	c303      	stmia	r3!, {r0, r1}
 800094c:	801a      	strh	r2, [r3, #0]
 800094e:	3302      	adds	r3, #2
 8000950:	0c12      	lsrs	r2, r2, #16
 8000952:	701a      	strb	r2, [r3, #0]
			LCD_Write_String(topline);
 8000954:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fd72 	bl	8000442 <LCD_Write_String>
			break;
 800095e:	bf00      	nop
 8000960:	e145      	b.n	8000bee <LCD_Display_Measurement+0x3a6>
 8000962:	bf00      	nop
 8000964:	20000828 	.word	0x20000828
 8000968:	080077a0 	.word	0x080077a0
 800096c:	10624dd3 	.word	0x10624dd3
 8000970:	cccccccd 	.word	0xcccccccd
 8000974:	51eb851f 	.word	0x51eb851f
 8000978:	080077a8 	.word	0x080077a8
		}
		case AV:
		{
			uint8_t topline[] = "O:x.xxxV,A:x.xxxV,F:xxxxHz";
 800097c:	4b94      	ldr	r3, [pc, #592]	; (8000bd0 <LCD_Display_Measurement+0x388>)
 800097e:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8000982:	461d      	mov	r5, r3
 8000984:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000986:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000988:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800098c:	c403      	stmia	r4!, {r0, r1}
 800098e:	8022      	strh	r2, [r4, #0]
 8000990:	3402      	adds	r4, #2
 8000992:	0c13      	lsrs	r3, r2, #16
 8000994:	7023      	strb	r3, [r4, #0]
			topline[2] = ((MeasurementState.Offset/1000) % 10) + 48;
 8000996:	4b8f      	ldr	r3, [pc, #572]	; (8000bd4 <LCD_Display_Measurement+0x38c>)
 8000998:	891b      	ldrh	r3, [r3, #8]
 800099a:	4a8f      	ldr	r2, [pc, #572]	; (8000bd8 <LCD_Display_Measurement+0x390>)
 800099c:	fba2 2303 	umull	r2, r3, r2, r3
 80009a0:	099b      	lsrs	r3, r3, #6
 80009a2:	b29a      	uxth	r2, r3
 80009a4:	4b8d      	ldr	r3, [pc, #564]	; (8000bdc <LCD_Display_Measurement+0x394>)
 80009a6:	fba3 1302 	umull	r1, r3, r3, r2
 80009aa:	08d9      	lsrs	r1, r3, #3
 80009ac:	460b      	mov	r3, r1
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	440b      	add	r3, r1
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	3330      	adds	r3, #48	; 0x30
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
			topline[4] = ((MeasurementState.Offset/100) % 10) + 48;
 80009c2:	4b84      	ldr	r3, [pc, #528]	; (8000bd4 <LCD_Display_Measurement+0x38c>)
 80009c4:	891b      	ldrh	r3, [r3, #8]
 80009c6:	4a86      	ldr	r2, [pc, #536]	; (8000be0 <LCD_Display_Measurement+0x398>)
 80009c8:	fba2 2303 	umull	r2, r3, r2, r3
 80009cc:	095b      	lsrs	r3, r3, #5
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	4b82      	ldr	r3, [pc, #520]	; (8000bdc <LCD_Display_Measurement+0x394>)
 80009d2:	fba3 1302 	umull	r1, r3, r3, r2
 80009d6:	08d9      	lsrs	r1, r3, #3
 80009d8:	460b      	mov	r3, r1
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	440b      	add	r3, r1
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	3330      	adds	r3, #48	; 0x30
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
			topline[5] = ((MeasurementState.Offset/10) % 10) + 48;
 80009ee:	4b79      	ldr	r3, [pc, #484]	; (8000bd4 <LCD_Display_Measurement+0x38c>)
 80009f0:	891b      	ldrh	r3, [r3, #8]
 80009f2:	4a7a      	ldr	r2, [pc, #488]	; (8000bdc <LCD_Display_Measurement+0x394>)
 80009f4:	fba2 2303 	umull	r2, r3, r2, r3
 80009f8:	08db      	lsrs	r3, r3, #3
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	4b77      	ldr	r3, [pc, #476]	; (8000bdc <LCD_Display_Measurement+0x394>)
 80009fe:	fba3 1302 	umull	r1, r3, r3, r2
 8000a02:	08d9      	lsrs	r1, r3, #3
 8000a04:	460b      	mov	r3, r1
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	440b      	add	r3, r1
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	3330      	adds	r3, #48	; 0x30
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			topline[6] = ((MeasurementState.Offset) % 10) + 48;
 8000a1a:	4b6e      	ldr	r3, [pc, #440]	; (8000bd4 <LCD_Display_Measurement+0x38c>)
 8000a1c:	891a      	ldrh	r2, [r3, #8]
 8000a1e:	4b6f      	ldr	r3, [pc, #444]	; (8000bdc <LCD_Display_Measurement+0x394>)
 8000a20:	fba3 1302 	umull	r1, r3, r3, r2
 8000a24:	08d9      	lsrs	r1, r3, #3
 8000a26:	460b      	mov	r3, r1
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	440b      	add	r3, r1
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	1ad3      	subs	r3, r2, r3
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	3330      	adds	r3, #48	; 0x30
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
			topline[11] = ((MeasurementState.Amplitude/1000) % 10) + 48;
 8000a3c:	4b65      	ldr	r3, [pc, #404]	; (8000bd4 <LCD_Display_Measurement+0x38c>)
 8000a3e:	885b      	ldrh	r3, [r3, #2]
 8000a40:	4a65      	ldr	r2, [pc, #404]	; (8000bd8 <LCD_Display_Measurement+0x390>)
 8000a42:	fba2 2303 	umull	r2, r3, r2, r3
 8000a46:	099b      	lsrs	r3, r3, #6
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	4b64      	ldr	r3, [pc, #400]	; (8000bdc <LCD_Display_Measurement+0x394>)
 8000a4c:	fba3 1302 	umull	r1, r3, r3, r2
 8000a50:	08d9      	lsrs	r1, r3, #3
 8000a52:	460b      	mov	r3, r1
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	440b      	add	r3, r1
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	1ad3      	subs	r3, r2, r3
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	3330      	adds	r3, #48	; 0x30
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			topline[13] = ((MeasurementState.Amplitude/100) % 10) + 48;
 8000a68:	4b5a      	ldr	r3, [pc, #360]	; (8000bd4 <LCD_Display_Measurement+0x38c>)
 8000a6a:	885b      	ldrh	r3, [r3, #2]
 8000a6c:	4a5c      	ldr	r2, [pc, #368]	; (8000be0 <LCD_Display_Measurement+0x398>)
 8000a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a72:	095b      	lsrs	r3, r3, #5
 8000a74:	b29a      	uxth	r2, r3
 8000a76:	4b59      	ldr	r3, [pc, #356]	; (8000bdc <LCD_Display_Measurement+0x394>)
 8000a78:	fba3 1302 	umull	r1, r3, r3, r2
 8000a7c:	08d9      	lsrs	r1, r3, #3
 8000a7e:	460b      	mov	r3, r1
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	440b      	add	r3, r1
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	1ad3      	subs	r3, r2, r3
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	3330      	adds	r3, #48	; 0x30
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
			topline[14] = ((MeasurementState.Amplitude/10) % 10) + 48;
 8000a94:	4b4f      	ldr	r3, [pc, #316]	; (8000bd4 <LCD_Display_Measurement+0x38c>)
 8000a96:	885b      	ldrh	r3, [r3, #2]
 8000a98:	4a50      	ldr	r2, [pc, #320]	; (8000bdc <LCD_Display_Measurement+0x394>)
 8000a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a9e:	08db      	lsrs	r3, r3, #3
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	4b4e      	ldr	r3, [pc, #312]	; (8000bdc <LCD_Display_Measurement+0x394>)
 8000aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8000aa8:	08d9      	lsrs	r1, r3, #3
 8000aaa:	460b      	mov	r3, r1
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	440b      	add	r3, r1
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	1ad3      	subs	r3, r2, r3
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	3330      	adds	r3, #48	; 0x30
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			topline[15] = ((MeasurementState.Amplitude) % 10) + 48;
 8000ac0:	4b44      	ldr	r3, [pc, #272]	; (8000bd4 <LCD_Display_Measurement+0x38c>)
 8000ac2:	885a      	ldrh	r2, [r3, #2]
 8000ac4:	4b45      	ldr	r3, [pc, #276]	; (8000bdc <LCD_Display_Measurement+0x394>)
 8000ac6:	fba3 1302 	umull	r1, r3, r3, r2
 8000aca:	08d9      	lsrs	r1, r3, #3
 8000acc:	460b      	mov	r3, r1
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	440b      	add	r3, r1
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	3330      	adds	r3, #48	; 0x30
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			topline[20] = ((MeasurementState.Frequency/1000) % 10) + 48;
 8000ae2:	4b3c      	ldr	r3, [pc, #240]	; (8000bd4 <LCD_Display_Measurement+0x38c>)
 8000ae4:	889b      	ldrh	r3, [r3, #4]
 8000ae6:	4a3c      	ldr	r2, [pc, #240]	; (8000bd8 <LCD_Display_Measurement+0x390>)
 8000ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8000aec:	099b      	lsrs	r3, r3, #6
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	4b3a      	ldr	r3, [pc, #232]	; (8000bdc <LCD_Display_Measurement+0x394>)
 8000af2:	fba3 1302 	umull	r1, r3, r3, r2
 8000af6:	08d9      	lsrs	r1, r3, #3
 8000af8:	460b      	mov	r3, r1
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	440b      	add	r3, r1
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	3330      	adds	r3, #48	; 0x30
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
			topline[21] = ((MeasurementState.Frequency/100) % 10) + 48;
 8000b0e:	4b31      	ldr	r3, [pc, #196]	; (8000bd4 <LCD_Display_Measurement+0x38c>)
 8000b10:	889b      	ldrh	r3, [r3, #4]
 8000b12:	4a33      	ldr	r2, [pc, #204]	; (8000be0 <LCD_Display_Measurement+0x398>)
 8000b14:	fba2 2303 	umull	r2, r3, r2, r3
 8000b18:	095b      	lsrs	r3, r3, #5
 8000b1a:	b29a      	uxth	r2, r3
 8000b1c:	4b2f      	ldr	r3, [pc, #188]	; (8000bdc <LCD_Display_Measurement+0x394>)
 8000b1e:	fba3 1302 	umull	r1, r3, r3, r2
 8000b22:	08d9      	lsrs	r1, r3, #3
 8000b24:	460b      	mov	r3, r1
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	440b      	add	r3, r1
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	3330      	adds	r3, #48	; 0x30
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
			topline[22] = ((MeasurementState.Frequency/10) % 10) + 48;
 8000b3a:	4b26      	ldr	r3, [pc, #152]	; (8000bd4 <LCD_Display_Measurement+0x38c>)
 8000b3c:	889b      	ldrh	r3, [r3, #4]
 8000b3e:	4a27      	ldr	r2, [pc, #156]	; (8000bdc <LCD_Display_Measurement+0x394>)
 8000b40:	fba2 2303 	umull	r2, r3, r2, r3
 8000b44:	08db      	lsrs	r3, r3, #3
 8000b46:	b29a      	uxth	r2, r3
 8000b48:	4b24      	ldr	r3, [pc, #144]	; (8000bdc <LCD_Display_Measurement+0x394>)
 8000b4a:	fba3 1302 	umull	r1, r3, r3, r2
 8000b4e:	08d9      	lsrs	r1, r3, #3
 8000b50:	460b      	mov	r3, r1
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	440b      	add	r3, r1
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	3330      	adds	r3, #48	; 0x30
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			topline[23] = ((MeasurementState.Frequency) % 10) + 48;
 8000b66:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <LCD_Display_Measurement+0x38c>)
 8000b68:	889a      	ldrh	r2, [r3, #4]
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <LCD_Display_Measurement+0x394>)
 8000b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8000b70:	08d9      	lsrs	r1, r3, #3
 8000b72:	460b      	mov	r3, r1
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	440b      	add	r3, r1
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	1ad3      	subs	r3, r2, r3
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	3330      	adds	r3, #48	; 0x30
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			LCD_Write_String(topline);
 8000b88:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fc58 	bl	8000442 <LCD_Write_String>
			break;
 8000b92:	bf00      	nop
 8000b94:	e02b      	b.n	8000bee <LCD_Display_Measurement+0x3a6>
		}
		case AI:
		{
			uint8_t topline[] = "AC Current";
 8000b96:	4a13      	ldr	r2, [pc, #76]	; (8000be4 <LCD_Display_Measurement+0x39c>)
 8000b98:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b9e:	c303      	stmia	r3!, {r0, r1}
 8000ba0:	801a      	strh	r2, [r3, #0]
 8000ba2:	3302      	adds	r3, #2
 8000ba4:	0c12      	lsrs	r2, r2, #16
 8000ba6:	701a      	strb	r2, [r3, #0]
			LCD_Write_String(topline);
 8000ba8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff fc48 	bl	8000442 <LCD_Write_String>
			break;
 8000bb2:	bf00      	nop
 8000bb4:	e01b      	b.n	8000bee <LCD_Display_Measurement+0x3a6>
		}
		case TC:
		{
			uint8_t topline[] = "Temperature";
 8000bb6:	4a0c      	ldr	r2, [pc, #48]	; (8000be8 <LCD_Display_Measurement+0x3a0>)
 8000bb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bbc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bbe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			LCD_Write_String(topline);
 8000bc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fc3b 	bl	8000442 <LCD_Write_String>
			break;
 8000bcc:	bf00      	nop
 8000bce:	e00e      	b.n	8000bee <LCD_Display_Measurement+0x3a6>
 8000bd0:	080077b4 	.word	0x080077b4
 8000bd4:	20000828 	.word	0x20000828
 8000bd8:	10624dd3 	.word	0x10624dd3
 8000bdc:	cccccccd 	.word	0xcccccccd
 8000be0:	51eb851f 	.word	0x51eb851f
 8000be4:	080077d0 	.word	0x080077d0
 8000be8:	080077dc 	.word	0x080077dc
		}
		default:
			// Problems
			break;
 8000bec:	bf00      	nop
	}
	LCD_NewLine();
 8000bee:	f7ff fd99 	bl	8000724 <LCD_NewLine>
	if(OutputState.On){
 8000bf2:	4b39      	ldr	r3, [pc, #228]	; (8000cd8 <LCD_Display_Measurement+0x490>)
 8000bf4:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	f000 818d 	beq.w	8000f18 <LCD_Display_Measurement+0x6d0>
		if(OutputState.Mode == d){
 8000bfe:	4b36      	ldr	r3, [pc, #216]	; (8000cd8 <LCD_Display_Measurement+0x490>)
 8000c00:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 8000c04:	2b64      	cmp	r3, #100	; 0x64
 8000c06:	d171      	bne.n	8000cec <LCD_Display_Measurement+0x4a4>
			uint8_t bottomline[] = "x.xxxV";
 8000c08:	4a34      	ldr	r2, [pc, #208]	; (8000cdc <LCD_Display_Measurement+0x494>)
 8000c0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c12:	6018      	str	r0, [r3, #0]
 8000c14:	3304      	adds	r3, #4
 8000c16:	8019      	strh	r1, [r3, #0]
 8000c18:	3302      	adds	r3, #2
 8000c1a:	0c0a      	lsrs	r2, r1, #16
 8000c1c:	701a      	strb	r2, [r3, #0]
			bottomline[0] = ((OutputState.DCValue/1000) % 10) + 48;
 8000c1e:	4b2e      	ldr	r3, [pc, #184]	; (8000cd8 <LCD_Display_Measurement+0x490>)
 8000c20:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 8000c24:	4a2e      	ldr	r2, [pc, #184]	; (8000ce0 <LCD_Display_Measurement+0x498>)
 8000c26:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2a:	099b      	lsrs	r3, r3, #6
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ce4 <LCD_Display_Measurement+0x49c>)
 8000c30:	fba3 1302 	umull	r1, r3, r3, r2
 8000c34:	08d9      	lsrs	r1, r3, #3
 8000c36:	460b      	mov	r3, r1
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	3330      	adds	r3, #48	; 0x30
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			bottomline[2] = ((OutputState.DCValue/100) % 10) + 48;
 8000c4c:	4b22      	ldr	r3, [pc, #136]	; (8000cd8 <LCD_Display_Measurement+0x490>)
 8000c4e:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 8000c52:	4a25      	ldr	r2, [pc, #148]	; (8000ce8 <LCD_Display_Measurement+0x4a0>)
 8000c54:	fba2 2303 	umull	r2, r3, r2, r3
 8000c58:	095b      	lsrs	r3, r3, #5
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	4b21      	ldr	r3, [pc, #132]	; (8000ce4 <LCD_Display_Measurement+0x49c>)
 8000c5e:	fba3 1302 	umull	r1, r3, r3, r2
 8000c62:	08d9      	lsrs	r1, r3, #3
 8000c64:	460b      	mov	r3, r1
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	440b      	add	r3, r1
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	3330      	adds	r3, #48	; 0x30
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			bottomline[3] = ((OutputState.DCValue/10) % 10) + 48;
 8000c7a:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <LCD_Display_Measurement+0x490>)
 8000c7c:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 8000c80:	4a18      	ldr	r2, [pc, #96]	; (8000ce4 <LCD_Display_Measurement+0x49c>)
 8000c82:	fba2 2303 	umull	r2, r3, r2, r3
 8000c86:	08db      	lsrs	r3, r3, #3
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <LCD_Display_Measurement+0x49c>)
 8000c8c:	fba3 1302 	umull	r1, r3, r3, r2
 8000c90:	08d9      	lsrs	r1, r3, #3
 8000c92:	460b      	mov	r3, r1
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	440b      	add	r3, r1
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	1ad3      	subs	r3, r2, r3
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	3330      	adds	r3, #48	; 0x30
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			bottomline[4] = ((OutputState.DCValue) % 10) + 48;
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <LCD_Display_Measurement+0x490>)
 8000caa:	f8b3 219a 	ldrh.w	r2, [r3, #410]	; 0x19a
 8000cae:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <LCD_Display_Measurement+0x49c>)
 8000cb0:	fba3 1302 	umull	r1, r3, r3, r2
 8000cb4:	08d9      	lsrs	r1, r3, #3
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	440b      	add	r3, r1
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	3330      	adds	r3, #48	; 0x30
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			LCD_Write_String(bottomline);
 8000ccc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fbb6 	bl	8000442 <LCD_Write_String>
		}
	} else {
		uint8_t bottomline[] = "OUTPUT OFF";
		LCD_Write_String(bottomline);
	}
}
 8000cd6:	e12b      	b.n	8000f30 <LCD_Display_Measurement+0x6e8>
 8000cd8:	20000834 	.word	0x20000834
 8000cdc:	080077a0 	.word	0x080077a0
 8000ce0:	10624dd3 	.word	0x10624dd3
 8000ce4:	cccccccd 	.word	0xcccccccd
 8000ce8:	51eb851f 	.word	0x51eb851f
		} else if (OutputState.Mode == s){
 8000cec:	4b92      	ldr	r3, [pc, #584]	; (8000f38 <LCD_Display_Measurement+0x6f0>)
 8000cee:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 8000cf2:	2b73      	cmp	r3, #115	; 0x73
 8000cf4:	f040 811c 	bne.w	8000f30 <LCD_Display_Measurement+0x6e8>
			uint8_t bottomline[] = "O:x.xxxV,A:x.xxxV,F:xxxxHz";
 8000cf8:	4b90      	ldr	r3, [pc, #576]	; (8000f3c <LCD_Display_Measurement+0x6f4>)
 8000cfa:	f107 040c 	add.w	r4, r7, #12
 8000cfe:	461d      	mov	r5, r3
 8000d00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d08:	c403      	stmia	r4!, {r0, r1}
 8000d0a:	8022      	strh	r2, [r4, #0]
 8000d0c:	3402      	adds	r4, #2
 8000d0e:	0c13      	lsrs	r3, r2, #16
 8000d10:	7023      	strb	r3, [r4, #0]
			bottomline[2] = ((OutputState.Offset/1000) % 10) + 48;
 8000d12:	4b89      	ldr	r3, [pc, #548]	; (8000f38 <LCD_Display_Measurement+0x6f0>)
 8000d14:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8000d18:	4a89      	ldr	r2, [pc, #548]	; (8000f40 <LCD_Display_Measurement+0x6f8>)
 8000d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d1e:	099b      	lsrs	r3, r3, #6
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	4b88      	ldr	r3, [pc, #544]	; (8000f44 <LCD_Display_Measurement+0x6fc>)
 8000d24:	fba3 1302 	umull	r1, r3, r3, r2
 8000d28:	08d9      	lsrs	r1, r3, #3
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	440b      	add	r3, r1
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	3330      	adds	r3, #48	; 0x30
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	73bb      	strb	r3, [r7, #14]
			bottomline[4] = ((OutputState.Offset/100) % 10) + 48;
 8000d3e:	4b7e      	ldr	r3, [pc, #504]	; (8000f38 <LCD_Display_Measurement+0x6f0>)
 8000d40:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8000d44:	4a80      	ldr	r2, [pc, #512]	; (8000f48 <LCD_Display_Measurement+0x700>)
 8000d46:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4a:	095b      	lsrs	r3, r3, #5
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	4b7d      	ldr	r3, [pc, #500]	; (8000f44 <LCD_Display_Measurement+0x6fc>)
 8000d50:	fba3 1302 	umull	r1, r3, r3, r2
 8000d54:	08d9      	lsrs	r1, r3, #3
 8000d56:	460b      	mov	r3, r1
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	440b      	add	r3, r1
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	1ad3      	subs	r3, r2, r3
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	3330      	adds	r3, #48	; 0x30
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	743b      	strb	r3, [r7, #16]
			bottomline[5] = ((OutputState.Offset/10) % 10) + 48;
 8000d6a:	4b73      	ldr	r3, [pc, #460]	; (8000f38 <LCD_Display_Measurement+0x6f0>)
 8000d6c:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8000d70:	4a74      	ldr	r2, [pc, #464]	; (8000f44 <LCD_Display_Measurement+0x6fc>)
 8000d72:	fba2 2303 	umull	r2, r3, r2, r3
 8000d76:	08db      	lsrs	r3, r3, #3
 8000d78:	b29a      	uxth	r2, r3
 8000d7a:	4b72      	ldr	r3, [pc, #456]	; (8000f44 <LCD_Display_Measurement+0x6fc>)
 8000d7c:	fba3 1302 	umull	r1, r3, r3, r2
 8000d80:	08d9      	lsrs	r1, r3, #3
 8000d82:	460b      	mov	r3, r1
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	440b      	add	r3, r1
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	3330      	adds	r3, #48	; 0x30
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	747b      	strb	r3, [r7, #17]
			bottomline[6] = ((OutputState.Offset) % 10) + 48;
 8000d96:	4b68      	ldr	r3, [pc, #416]	; (8000f38 <LCD_Display_Measurement+0x6f0>)
 8000d98:	f8b3 219c 	ldrh.w	r2, [r3, #412]	; 0x19c
 8000d9c:	4b69      	ldr	r3, [pc, #420]	; (8000f44 <LCD_Display_Measurement+0x6fc>)
 8000d9e:	fba3 1302 	umull	r1, r3, r3, r2
 8000da2:	08d9      	lsrs	r1, r3, #3
 8000da4:	460b      	mov	r3, r1
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	440b      	add	r3, r1
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	3330      	adds	r3, #48	; 0x30
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	74bb      	strb	r3, [r7, #18]
			bottomline[11] = ((OutputState.Amplitude/1000) % 10) + 48;
 8000db8:	4b5f      	ldr	r3, [pc, #380]	; (8000f38 <LCD_Display_Measurement+0x6f0>)
 8000dba:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8000dbe:	4a60      	ldr	r2, [pc, #384]	; (8000f40 <LCD_Display_Measurement+0x6f8>)
 8000dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc4:	099b      	lsrs	r3, r3, #6
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	4b5e      	ldr	r3, [pc, #376]	; (8000f44 <LCD_Display_Measurement+0x6fc>)
 8000dca:	fba3 1302 	umull	r1, r3, r3, r2
 8000dce:	08d9      	lsrs	r1, r3, #3
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	440b      	add	r3, r1
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	3330      	adds	r3, #48	; 0x30
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	75fb      	strb	r3, [r7, #23]
			bottomline[13] = ((OutputState.Amplitude/100) % 10) + 48;
 8000de4:	4b54      	ldr	r3, [pc, #336]	; (8000f38 <LCD_Display_Measurement+0x6f0>)
 8000de6:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8000dea:	4a57      	ldr	r2, [pc, #348]	; (8000f48 <LCD_Display_Measurement+0x700>)
 8000dec:	fba2 2303 	umull	r2, r3, r2, r3
 8000df0:	095b      	lsrs	r3, r3, #5
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	4b53      	ldr	r3, [pc, #332]	; (8000f44 <LCD_Display_Measurement+0x6fc>)
 8000df6:	fba3 1302 	umull	r1, r3, r3, r2
 8000dfa:	08d9      	lsrs	r1, r3, #3
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	440b      	add	r3, r1
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	3330      	adds	r3, #48	; 0x30
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	767b      	strb	r3, [r7, #25]
			bottomline[14] = ((OutputState.Amplitude/10) % 10) + 48;
 8000e10:	4b49      	ldr	r3, [pc, #292]	; (8000f38 <LCD_Display_Measurement+0x6f0>)
 8000e12:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8000e16:	4a4b      	ldr	r2, [pc, #300]	; (8000f44 <LCD_Display_Measurement+0x6fc>)
 8000e18:	fba2 2303 	umull	r2, r3, r2, r3
 8000e1c:	08db      	lsrs	r3, r3, #3
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	4b48      	ldr	r3, [pc, #288]	; (8000f44 <LCD_Display_Measurement+0x6fc>)
 8000e22:	fba3 1302 	umull	r1, r3, r3, r2
 8000e26:	08d9      	lsrs	r1, r3, #3
 8000e28:	460b      	mov	r3, r1
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	3330      	adds	r3, #48	; 0x30
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	76bb      	strb	r3, [r7, #26]
			bottomline[15] = ((OutputState.Amplitude) % 10) + 48;
 8000e3c:	4b3e      	ldr	r3, [pc, #248]	; (8000f38 <LCD_Display_Measurement+0x6f0>)
 8000e3e:	f8b3 2196 	ldrh.w	r2, [r3, #406]	; 0x196
 8000e42:	4b40      	ldr	r3, [pc, #256]	; (8000f44 <LCD_Display_Measurement+0x6fc>)
 8000e44:	fba3 1302 	umull	r1, r3, r3, r2
 8000e48:	08d9      	lsrs	r1, r3, #3
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	440b      	add	r3, r1
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	3330      	adds	r3, #48	; 0x30
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	76fb      	strb	r3, [r7, #27]
			bottomline[20] = ((OutputState.Frequency/1000) % 10) + 48;
 8000e5e:	4b36      	ldr	r3, [pc, #216]	; (8000f38 <LCD_Display_Measurement+0x6f0>)
 8000e60:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8000e64:	4a36      	ldr	r2, [pc, #216]	; (8000f40 <LCD_Display_Measurement+0x6f8>)
 8000e66:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6a:	099b      	lsrs	r3, r3, #6
 8000e6c:	b29a      	uxth	r2, r3
 8000e6e:	4b35      	ldr	r3, [pc, #212]	; (8000f44 <LCD_Display_Measurement+0x6fc>)
 8000e70:	fba3 1302 	umull	r1, r3, r3, r2
 8000e74:	08d9      	lsrs	r1, r3, #3
 8000e76:	460b      	mov	r3, r1
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	440b      	add	r3, r1
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	3330      	adds	r3, #48	; 0x30
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	f887 3020 	strb.w	r3, [r7, #32]
			bottomline[21] = ((OutputState.Frequency/100) % 10) + 48;
 8000e8c:	4b2a      	ldr	r3, [pc, #168]	; (8000f38 <LCD_Display_Measurement+0x6f0>)
 8000e8e:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8000e92:	4a2d      	ldr	r2, [pc, #180]	; (8000f48 <LCD_Display_Measurement+0x700>)
 8000e94:	fba2 2303 	umull	r2, r3, r2, r3
 8000e98:	095b      	lsrs	r3, r3, #5
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	4b29      	ldr	r3, [pc, #164]	; (8000f44 <LCD_Display_Measurement+0x6fc>)
 8000e9e:	fba3 1302 	umull	r1, r3, r3, r2
 8000ea2:	08d9      	lsrs	r1, r3, #3
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	3330      	adds	r3, #48	; 0x30
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			bottomline[22] = ((OutputState.Frequency/10) % 10) + 48;
 8000eba:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <LCD_Display_Measurement+0x6f0>)
 8000ebc:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8000ec0:	4a20      	ldr	r2, [pc, #128]	; (8000f44 <LCD_Display_Measurement+0x6fc>)
 8000ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec6:	08db      	lsrs	r3, r3, #3
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	4b1e      	ldr	r3, [pc, #120]	; (8000f44 <LCD_Display_Measurement+0x6fc>)
 8000ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8000ed0:	08d9      	lsrs	r1, r3, #3
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	3330      	adds	r3, #48	; 0x30
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			bottomline[23] = ((OutputState.Frequency) % 10) + 48;
 8000ee8:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <LCD_Display_Measurement+0x6f0>)
 8000eea:	f8b3 2198 	ldrh.w	r2, [r3, #408]	; 0x198
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <LCD_Display_Measurement+0x6fc>)
 8000ef0:	fba3 1302 	umull	r1, r3, r3, r2
 8000ef4:	08d9      	lsrs	r1, r3, #3
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	440b      	add	r3, r1
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	3330      	adds	r3, #48	; 0x30
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			LCD_Write_String(bottomline);
 8000f0c:	f107 030c 	add.w	r3, r7, #12
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fa96 	bl	8000442 <LCD_Write_String>
}
 8000f16:	e00b      	b.n	8000f30 <LCD_Display_Measurement+0x6e8>
		uint8_t bottomline[] = "OUTPUT OFF";
 8000f18:	4a0c      	ldr	r2, [pc, #48]	; (8000f4c <LCD_Display_Measurement+0x704>)
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f1e:	c303      	stmia	r3!, {r0, r1}
 8000f20:	801a      	strh	r2, [r3, #0]
 8000f22:	3302      	adds	r3, #2
 8000f24:	0c12      	lsrs	r2, r2, #16
 8000f26:	701a      	strb	r2, [r3, #0]
		LCD_Write_String(bottomline);
 8000f28:	463b      	mov	r3, r7
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fa89 	bl	8000442 <LCD_Write_String>
}
 8000f30:	bf00      	nop
 8000f32:	3778      	adds	r7, #120	; 0x78
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bdb0      	pop	{r4, r5, r7, pc}
 8000f38:	20000834 	.word	0x20000834
 8000f3c:	080077b4 	.word	0x080077b4
 8000f40:	10624dd3 	.word	0x10624dd3
 8000f44:	cccccccd 	.word	0xcccccccd
 8000f48:	51eb851f 	.word	0x51eb851f
 8000f4c:	080077e8 	.word	0x080077e8

08000f50 <HAL_UART_RxCpltCallback>:
//uint16_t measured_period = 0;
//uint16_t measured_offset = 0;
//uint8_t measurement_mode = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	message_received = 1; // declared in file: uart.c
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <HAL_UART_RxCpltCallback+0x1c>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	701a      	strb	r2, [r3, #0]
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000044 	.word	0x20000044

08000f70 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	80fb      	strh	r3, [r7, #6]
	last_ticks = HAL_GetTick();
 8000f7a:	f001 f9f7 	bl	800236c <HAL_GetTick>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <HAL_GPIO_EXTI_Callback+0x68>)
 8000f82:	601a      	str	r2, [r3, #0]
	if(GPIO_Pin == btn_mid_Pin)
 8000f84:	88fb      	ldrh	r3, [r7, #6]
 8000f86:	2b40      	cmp	r3, #64	; 0x40
 8000f88:	d103      	bne.n	8000f92 <HAL_GPIO_EXTI_Callback+0x22>
	{
		btn_mid_flag = 1;
 8000f8a:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <HAL_GPIO_EXTI_Callback+0x6c>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	701a      	strb	r2, [r3, #0]
	}
	else if(GPIO_Pin == btn_down_Pin)
	{
		btn_down_flag = 1;
	}
}
 8000f90:	e01d      	b.n	8000fce <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_right_Pin)
 8000f92:	88fb      	ldrh	r3, [r7, #6]
 8000f94:	2b80      	cmp	r3, #128	; 0x80
 8000f96:	d103      	bne.n	8000fa0 <HAL_GPIO_EXTI_Callback+0x30>
		btn_right_flag = 1;
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <HAL_GPIO_EXTI_Callback+0x70>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	701a      	strb	r2, [r3, #0]
}
 8000f9e:	e016      	b.n	8000fce <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_up_Pin)
 8000fa0:	88fb      	ldrh	r3, [r7, #6]
 8000fa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fa6:	d103      	bne.n	8000fb0 <HAL_GPIO_EXTI_Callback+0x40>
		btn_up_flag = 1;
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <HAL_GPIO_EXTI_Callback+0x74>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	701a      	strb	r2, [r3, #0]
}
 8000fae:	e00e      	b.n	8000fce <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_left_Pin)
 8000fb0:	88fb      	ldrh	r3, [r7, #6]
 8000fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fb6:	d103      	bne.n	8000fc0 <HAL_GPIO_EXTI_Callback+0x50>
		btn_left_flag = 1;
 8000fb8:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x78>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	701a      	strb	r2, [r3, #0]
}
 8000fbe:	e006      	b.n	8000fce <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_down_Pin)
 8000fc0:	88fb      	ldrh	r3, [r7, #6]
 8000fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fc6:	d102      	bne.n	8000fce <HAL_GPIO_EXTI_Callback+0x5e>
		btn_down_flag = 1;
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <HAL_GPIO_EXTI_Callback+0x7c>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	701a      	strb	r2, [r3, #0]
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000040 	.word	0x20000040
 8000fdc:	2000003a 	.word	0x2000003a
 8000fe0:	2000003b 	.word	0x2000003b
 8000fe4:	2000003c 	.word	0x2000003c
 8000fe8:	2000003d 	.word	0x2000003d
 8000fec:	2000003e 	.word	0x2000003e

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	OutputState.TIM2_Clock = 72000000;
 8000ff4:	4b82      	ldr	r3, [pc, #520]	; (8001200 <main+0x210>)
 8000ff6:	4a83      	ldr	r2, [pc, #524]	; (8001204 <main+0x214>)
 8000ff8:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OutputState.On = false;
 8000ffc:	4b80      	ldr	r3, [pc, #512]	; (8001200 <main+0x210>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
	OutputState.Mode = d;
 8001004:	4b7e      	ldr	r3, [pc, #504]	; (8001200 <main+0x210>)
 8001006:	2264      	movs	r2, #100	; 0x64
 8001008:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
	OutputState.Amplitude = 1000;
 800100c:	4b7c      	ldr	r3, [pc, #496]	; (8001200 <main+0x210>)
 800100e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001012:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196
	OutputState.Offset = 1200;
 8001016:	4b7a      	ldr	r3, [pc, #488]	; (8001200 <main+0x210>)
 8001018:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800101c:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
	OutputState.Frequency = 1000;
 8001020:	4b77      	ldr	r3, [pc, #476]	; (8001200 <main+0x210>)
 8001022:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001026:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
	OutputState.DCValue = 1000;
 800102a:	4b75      	ldr	r3, [pc, #468]	; (8001200 <main+0x210>)
 800102c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001030:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a

	MeasurementState.Mode = DV;
 8001034:	4b74      	ldr	r3, [pc, #464]	; (8001208 <main+0x218>)
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
	MeasurementState.Amplitude = 0;
 800103a:	4b73      	ldr	r3, [pc, #460]	; (8001208 <main+0x218>)
 800103c:	2200      	movs	r2, #0
 800103e:	805a      	strh	r2, [r3, #2]
	MeasurementState.Frequency = 0;
 8001040:	4b71      	ldr	r3, [pc, #452]	; (8001208 <main+0x218>)
 8001042:	2200      	movs	r2, #0
 8001044:	809a      	strh	r2, [r3, #4]
	MeasurementState.Offset = 0;
 8001046:	4b70      	ldr	r3, [pc, #448]	; (8001208 <main+0x218>)
 8001048:	2200      	movs	r2, #0
 800104a:	811a      	strh	r2, [r3, #8]
	MeasurementState.Period = 0;
 800104c:	4b6e      	ldr	r3, [pc, #440]	; (8001208 <main+0x218>)
 800104e:	2200      	movs	r2, #0
 8001050:	80da      	strh	r2, [r3, #6]

	DisplayState.NumCharacters = 0;
 8001052:	4b6e      	ldr	r3, [pc, #440]	; (800120c <main+0x21c>)
 8001054:	2200      	movs	r2, #0
 8001056:	705a      	strb	r2, [r3, #1]
	DisplayState.PrintFlag = 0;
 8001058:	4b6c      	ldr	r3, [pc, #432]	; (800120c <main+0x21c>)
 800105a:	2200      	movs	r2, #0
 800105c:	709a      	strb	r2, [r3, #2]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105e:	f001 f92b 	bl	80022b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001062:	f000 f8f1 	bl	8001248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001066:	f000 fab3 	bl	80015d0 <MX_GPIO_Init>
  MX_DMA_Init();
 800106a:	f000 fa93 	bl	8001594 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800106e:	f000 fa61 	bl	8001534 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8001072:	f000 fa39 	bl	80014e8 <MX_TIM16_Init>
  MX_ADC1_Init();
 8001076:	f000 f94f 	bl	8001318 <MX_ADC1_Init>
  MX_DAC1_Init();
 800107a:	f000 f9bd 	bl	80013f8 <MX_DAC1_Init>
  MX_TIM2_Init();
 800107e:	f000 f9e5 	bl	800144c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  	// Transmit Student Number
	HAL_UART_Transmit(&huart2, std_num, 13, 10);
 8001082:	230a      	movs	r3, #10
 8001084:	220d      	movs	r2, #13
 8001086:	4962      	ldr	r1, [pc, #392]	; (8001210 <main+0x220>)
 8001088:	4862      	ldr	r0, [pc, #392]	; (8001214 <main+0x224>)
 800108a:	f005 f929 	bl	80062e0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 800108e:	2201      	movs	r2, #1
 8001090:	4961      	ldr	r1, [pc, #388]	; (8001218 <main+0x228>)
 8001092:	4860      	ldr	r0, [pc, #384]	; (8001214 <main+0x224>)
 8001094:	f005 f9b8 	bl	8006408 <HAL_UART_Receive_IT>

	// Init ADC Timer
	HAL_TIM_Base_Start_IT(&htim16);
 8001098:	4860      	ldr	r0, [pc, #384]	; (800121c <main+0x22c>)
 800109a:	f004 fc7b 	bl	8005994 <HAL_TIM_Base_Start_IT>

	// Init LCD
	LCD_Init();
 800109e:	f7ff f999 	bl	80003d4 <LCD_Init>

	// Init Display State
	LCD_changeDisplayMode(Menu);
 80010a2:	2000      	movs	r0, #0
 80010a4:	f7ff fb4a 	bl	800073c <LCD_changeDisplayMode>

	// Init DAC Timer
	HAL_TIM_Base_Start(&htim2);
 80010a8:	485d      	ldr	r0, [pc, #372]	; (8001220 <main+0x230>)
 80010aa:	f004 fc0b 	bl	80058c4 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // LCD UART OUTPUT JOB
	  if(DisplayState.PrintFlag)
 80010ae:	4b57      	ldr	r3, [pc, #348]	; (800120c <main+0x21c>)
 80010b0:	789b      	ldrb	r3, [r3, #2]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d012      	beq.n	80010dc <main+0xec>
	  {
		  if(DisplayState.PrintRS == 1){
 80010b6:	4b55      	ldr	r3, [pc, #340]	; (800120c <main+0x21c>)
 80010b8:	78db      	ldrb	r3, [r3, #3]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d10b      	bne.n	80010d6 <main+0xe6>
			  if(DisplayState.Mode != Output)
 80010be:	4b53      	ldr	r3, [pc, #332]	; (800120c <main+0x21c>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d002      	beq.n	80010cc <main+0xdc>
			  {
				  LCD_changeDisplayMode(Output);
 80010c6:	2002      	movs	r0, #2
 80010c8:	f7ff fb38 	bl	800073c <LCD_changeDisplayMode>
			  }
			  LCD_Write_Character(DisplayState.PrintByte);
 80010cc:	4b4f      	ldr	r3, [pc, #316]	; (800120c <main+0x21c>)
 80010ce:	791b      	ldrb	r3, [r3, #4]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff f9d5 	bl	8000480 <LCD_Write_Character>
		  }
		  DisplayState.PrintFlag = 0;
 80010d6:	4b4d      	ldr	r3, [pc, #308]	; (800120c <main+0x21c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	709a      	strb	r2, [r3, #2]
	  }

	  // UART JOB
	  if(message_received)
 80010dc:	4b51      	ldr	r3, [pc, #324]	; (8001224 <main+0x234>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d004      	beq.n	80010ee <main+0xfe>
	  {
		  UART_Main_Function();
 80010e4:	f000 fd70 	bl	8001bc8 <UART_Main_Function>
		  message_received = 0;
 80010e8:	4b4e      	ldr	r3, [pc, #312]	; (8001224 <main+0x234>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
	  }

	  // BUTTONS JOB
	  if(btn_up_flag)
 80010ee:	4b4e      	ldr	r3, [pc, #312]	; (8001228 <main+0x238>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d010      	beq.n	8001118 <main+0x128>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 80010f6:	f001 f939 	bl	800236c <HAL_GetTick>
 80010fa:	4602      	mov	r2, r0
 80010fc:	4b4b      	ldr	r3, [pc, #300]	; (800122c <main+0x23c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b36      	cmp	r3, #54	; 0x36
 8001104:	d971      	bls.n	80011ea <main+0x1fa>
		  {
			  if(HAL_GPIO_ReadPin(btn_up_GPIO_Port, btn_up_Pin))
 8001106:	f44f 7100 	mov.w	r1, #512	; 0x200
 800110a:	4849      	ldr	r0, [pc, #292]	; (8001230 <main+0x240>)
 800110c:	f002 ffb6 	bl	800407c <HAL_GPIO_ReadPin>
			  {
				  // HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
			  }
			  btn_up_flag = 0;
 8001110:	4b45      	ldr	r3, [pc, #276]	; (8001228 <main+0x238>)
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
 8001116:	e068      	b.n	80011ea <main+0x1fa>
		  }
	  }
	  else if(btn_left_flag)
 8001118:	4b46      	ldr	r3, [pc, #280]	; (8001234 <main+0x244>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d010      	beq.n	8001142 <main+0x152>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 8001120:	f001 f924 	bl	800236c <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	4b41      	ldr	r3, [pc, #260]	; (800122c <main+0x23c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b36      	cmp	r3, #54	; 0x36
 800112e:	d95c      	bls.n	80011ea <main+0x1fa>
		  {
			  if(HAL_GPIO_ReadPin(btn_left_GPIO_Port, btn_left_Pin))
 8001130:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001134:	483e      	ldr	r0, [pc, #248]	; (8001230 <main+0x240>)
 8001136:	f002 ffa1 	bl	800407c <HAL_GPIO_ReadPin>
			  {
				  // HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
			  }
			  btn_left_flag = 0;
 800113a:	4b3e      	ldr	r3, [pc, #248]	; (8001234 <main+0x244>)
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
 8001140:	e053      	b.n	80011ea <main+0x1fa>
		  }
	  }
	  else if(btn_down_flag)
 8001142:	4b3d      	ldr	r3, [pc, #244]	; (8001238 <main+0x248>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d010      	beq.n	800116c <main+0x17c>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 800114a:	f001 f90f 	bl	800236c <HAL_GetTick>
 800114e:	4602      	mov	r2, r0
 8001150:	4b36      	ldr	r3, [pc, #216]	; (800122c <main+0x23c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b36      	cmp	r3, #54	; 0x36
 8001158:	d947      	bls.n	80011ea <main+0x1fa>
		  {
			  if(HAL_GPIO_ReadPin(btn_down_GPIO_Port, btn_down_Pin))
 800115a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800115e:	4834      	ldr	r0, [pc, #208]	; (8001230 <main+0x240>)
 8001160:	f002 ff8c 	bl	800407c <HAL_GPIO_ReadPin>
			  {
				  // HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
			  }
			  btn_down_flag = 0;
 8001164:	4b34      	ldr	r3, [pc, #208]	; (8001238 <main+0x248>)
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
 800116a:	e03e      	b.n	80011ea <main+0x1fa>
		  }
	  }
	  else if(btn_right_flag)
 800116c:	4b33      	ldr	r3, [pc, #204]	; (800123c <main+0x24c>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d010      	beq.n	8001196 <main+0x1a6>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 8001174:	f001 f8fa 	bl	800236c <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	4b2c      	ldr	r3, [pc, #176]	; (800122c <main+0x23c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b36      	cmp	r3, #54	; 0x36
 8001182:	d932      	bls.n	80011ea <main+0x1fa>
		  {
			  if(HAL_GPIO_ReadPin(btn_right_GPIO_Port, btn_right_Pin))
 8001184:	2180      	movs	r1, #128	; 0x80
 8001186:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800118a:	f002 ff77 	bl	800407c <HAL_GPIO_ReadPin>
			  {
				  // HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
			  }
			  btn_right_flag = 0;
 800118e:	4b2b      	ldr	r3, [pc, #172]	; (800123c <main+0x24c>)
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
 8001194:	e029      	b.n	80011ea <main+0x1fa>
		  }
	  }
	  else if(btn_mid_flag)
 8001196:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <main+0x250>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d025      	beq.n	80011ea <main+0x1fa>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 800119e:	f001 f8e5 	bl	800236c <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	4b21      	ldr	r3, [pc, #132]	; (800122c <main+0x23c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b36      	cmp	r3, #54	; 0x36
 80011ac:	d91d      	bls.n	80011ea <main+0x1fa>
		  {
			  if(HAL_GPIO_ReadPin(btn_mid_GPIO_Port, btn_mid_Pin))
 80011ae:	2140      	movs	r1, #64	; 0x40
 80011b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b4:	f002 ff62 	bl	800407c <HAL_GPIO_ReadPin>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d012      	beq.n	80011e4 <main+0x1f4>
			  {
				  // Toggle Menu Display state
				  if(DisplayState.Mode == Menu){
 80011be:	4b13      	ldr	r3, [pc, #76]	; (800120c <main+0x21c>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d103      	bne.n	80011ce <main+0x1de>
					  LCD_changeDisplayMode(Measurement);
 80011c6:	2001      	movs	r0, #1
 80011c8:	f7ff fab8 	bl	800073c <LCD_changeDisplayMode>
 80011cc:	e00a      	b.n	80011e4 <main+0x1f4>
				  } else if(DisplayState.Mode == Measurement || DisplayState.Mode == Output){
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <main+0x21c>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d003      	beq.n	80011de <main+0x1ee>
 80011d6:	4b0d      	ldr	r3, [pc, #52]	; (800120c <main+0x21c>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d102      	bne.n	80011e4 <main+0x1f4>
					  LCD_changeDisplayMode(Menu);
 80011de:	2000      	movs	r0, #0
 80011e0:	f7ff faac 	bl	800073c <LCD_changeDisplayMode>
				  }
			  }
			  btn_mid_flag = 0;
 80011e4:	4b16      	ldr	r3, [pc, #88]	; (8001240 <main+0x250>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  // ADC JOB
	  if(adc_timer_flag)
 80011ea:	4b16      	ldr	r3, [pc, #88]	; (8001244 <main+0x254>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f43f af5d 	beq.w	80010ae <main+0xbe>
	  {
		  ADC_Main_Function();
 80011f4:	f7fe ffee 	bl	80001d4 <ADC_Main_Function>
		  adc_timer_flag = 0;
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <main+0x254>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
	  if(DisplayState.PrintFlag)
 80011fe:	e756      	b.n	80010ae <main+0xbe>
 8001200:	20000834 	.word	0x20000834
 8001204:	044aa200 	.word	0x044aa200
 8001208:	20000828 	.word	0x20000828
 800120c:	200009d8 	.word	0x200009d8
 8001210:	20000000 	.word	0x20000000
 8001214:	20000ad4 	.word	0x20000ad4
 8001218:	20000ba4 	.word	0x20000ba4
 800121c:	20000b58 	.word	0x20000b58
 8001220:	20000a88 	.word	0x20000a88
 8001224:	20000044 	.word	0x20000044
 8001228:	2000003c 	.word	0x2000003c
 800122c:	20000040 	.word	0x20000040
 8001230:	48000400 	.word	0x48000400
 8001234:	2000003d 	.word	0x2000003d
 8001238:	2000003e 	.word	0x2000003e
 800123c:	2000003b 	.word	0x2000003b
 8001240:	2000003a 	.word	0x2000003a
 8001244:	2000003f 	.word	0x2000003f

08001248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b0a6      	sub	sp, #152	; 0x98
 800124c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001252:	2228      	movs	r2, #40	; 0x28
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f006 fa82 	bl	8007760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800125c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	2258      	movs	r2, #88	; 0x58
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f006 fa74 	bl	8007760 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001278:	2302      	movs	r3, #2
 800127a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800127c:	2301      	movs	r3, #1
 800127e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001280:	2310      	movs	r3, #16
 8001282:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001286:	2302      	movs	r3, #2
 8001288:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800128c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001290:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001294:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001298:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800129c:	2300      	movs	r3, #0
 800129e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80012a6:	4618      	mov	r0, r3
 80012a8:	f002 ff4a 	bl	8004140 <HAL_RCC_OscConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80012b2:	f000 fa9f 	bl	80017f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b6:	230f      	movs	r3, #15
 80012b8:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ba:	2302      	movs	r3, #2
 80012bc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012be:	2300      	movs	r3, #0
 80012c0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012c6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012d0:	2102      	movs	r1, #2
 80012d2:	4618      	mov	r0, r3
 80012d4:	f003 fe4a 	bl	8004f6c <HAL_RCC_ClockConfig>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012de:	f000 fa89 	bl	80017f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM16
 80012e2:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <SystemClock_Config+0xcc>)
 80012e4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80012ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80012f0:	2300      	movs	r3, #0
 80012f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80012f4:	2300      	movs	r3, #0
 80012f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	4618      	mov	r0, r3
 80012fc:	f004 f86c 	bl	80053d8 <HAL_RCCEx_PeriphCLKConfig>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001306:	f000 fa75 	bl	80017f4 <Error_Handler>
  }
}
 800130a:	bf00      	nop
 800130c:	3798      	adds	r7, #152	; 0x98
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	00900082 	.word	0x00900082

08001318 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	; 0x28
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800131e:	f107 031c 	add.w	r3, r7, #28
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
 8001338:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800133a:	4b2e      	ldr	r3, [pc, #184]	; (80013f4 <MX_ADC1_Init+0xdc>)
 800133c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001340:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001342:	4b2c      	ldr	r3, [pc, #176]	; (80013f4 <MX_ADC1_Init+0xdc>)
 8001344:	2200      	movs	r2, #0
 8001346:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001348:	4b2a      	ldr	r3, [pc, #168]	; (80013f4 <MX_ADC1_Init+0xdc>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800134e:	4b29      	ldr	r3, [pc, #164]	; (80013f4 <MX_ADC1_Init+0xdc>)
 8001350:	2200      	movs	r2, #0
 8001352:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001354:	4b27      	ldr	r3, [pc, #156]	; (80013f4 <MX_ADC1_Init+0xdc>)
 8001356:	2200      	movs	r2, #0
 8001358:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800135a:	4b26      	ldr	r3, [pc, #152]	; (80013f4 <MX_ADC1_Init+0xdc>)
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001362:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <MX_ADC1_Init+0xdc>)
 8001364:	2200      	movs	r2, #0
 8001366:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001368:	4b22      	ldr	r3, [pc, #136]	; (80013f4 <MX_ADC1_Init+0xdc>)
 800136a:	2201      	movs	r2, #1
 800136c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800136e:	4b21      	ldr	r3, [pc, #132]	; (80013f4 <MX_ADC1_Init+0xdc>)
 8001370:	2200      	movs	r2, #0
 8001372:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001374:	4b1f      	ldr	r3, [pc, #124]	; (80013f4 <MX_ADC1_Init+0xdc>)
 8001376:	2201      	movs	r2, #1
 8001378:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800137a:	4b1e      	ldr	r3, [pc, #120]	; (80013f4 <MX_ADC1_Init+0xdc>)
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001382:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <MX_ADC1_Init+0xdc>)
 8001384:	2204      	movs	r2, #4
 8001386:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001388:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <MX_ADC1_Init+0xdc>)
 800138a:	2200      	movs	r2, #0
 800138c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800138e:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <MX_ADC1_Init+0xdc>)
 8001390:	2200      	movs	r2, #0
 8001392:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001394:	4817      	ldr	r0, [pc, #92]	; (80013f4 <MX_ADC1_Init+0xdc>)
 8001396:	f001 f817 	bl	80023c8 <HAL_ADC_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80013a0:	f000 fa28 	bl	80017f4 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80013a8:	f107 031c 	add.w	r3, r7, #28
 80013ac:	4619      	mov	r1, r3
 80013ae:	4811      	ldr	r0, [pc, #68]	; (80013f4 <MX_ADC1_Init+0xdc>)
 80013b0:	f001 ff4c 	bl	800324c <HAL_ADCEx_MultiModeConfigChannel>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80013ba:	f000 fa1b 	bl	80017f4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013be:	2301      	movs	r3, #1
 80013c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013c2:	2301      	movs	r3, #1
 80013c4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	4619      	mov	r1, r3
 80013da:	4806      	ldr	r0, [pc, #24]	; (80013f4 <MX_ADC1_Init+0xdc>)
 80013dc:	f001 fc4a 	bl	8002c74 <HAL_ADC_ConfigChannel>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80013e6:	f000 fa05 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013ea:	bf00      	nop
 80013ec:	3728      	adds	r7, #40	; 0x28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000a38 	.word	0x20000a38

080013f8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8001408:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_DAC1_Init+0x4c>)
 800140a:	4a0f      	ldr	r2, [pc, #60]	; (8001448 <MX_DAC1_Init+0x50>)
 800140c:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800140e:	480d      	ldr	r0, [pc, #52]	; (8001444 <MX_DAC1_Init+0x4c>)
 8001410:	f002 fa9d 	bl	800394e <HAL_DAC_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 800141a:	f000 f9eb 	bl	80017f4 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800141e:	2324      	movs	r3, #36	; 0x24
 8001420:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	2200      	movs	r2, #0
 800142a:	4619      	mov	r1, r3
 800142c:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_DAC1_Init+0x4c>)
 800142e:	f002 fab0 	bl	8003992 <HAL_DAC_ConfigChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8001438:	f000 f9dc 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800143c:	bf00      	nop
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200009e0 	.word	0x200009e0
 8001448:	40007400 	.word	0x40007400

0800144c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b088      	sub	sp, #32
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001452:	f107 0310 	add.w	r3, r7, #16
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800146a:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <MX_TIM2_Init+0x98>)
 800146c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001470:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001472:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <MX_TIM2_Init+0x98>)
 8001474:	2200      	movs	r2, #0
 8001476:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001478:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <MX_TIM2_Init+0x98>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800147e:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <MX_TIM2_Init+0x98>)
 8001480:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001484:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001486:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <MX_TIM2_Init+0x98>)
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148c:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <MX_TIM2_Init+0x98>)
 800148e:	2200      	movs	r2, #0
 8001490:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001492:	4814      	ldr	r0, [pc, #80]	; (80014e4 <MX_TIM2_Init+0x98>)
 8001494:	f004 f9be 	bl	8005814 <HAL_TIM_Base_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800149e:	f000 f9a9 	bl	80017f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014a8:	f107 0310 	add.w	r3, r7, #16
 80014ac:	4619      	mov	r1, r3
 80014ae:	480d      	ldr	r0, [pc, #52]	; (80014e4 <MX_TIM2_Init+0x98>)
 80014b0:	f004 fbff 	bl	8005cb2 <HAL_TIM_ConfigClockSource>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80014ba:	f000 f99b 	bl	80017f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014be:	2320      	movs	r3, #32
 80014c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	4619      	mov	r1, r3
 80014ca:	4806      	ldr	r0, [pc, #24]	; (80014e4 <MX_TIM2_Init+0x98>)
 80014cc:	f004 fe10 	bl	80060f0 <HAL_TIMEx_MasterConfigSynchronization>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80014d6:	f000 f98d 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	3720      	adds	r7, #32
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000a88 	.word	0x20000a88

080014e8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <MX_TIM16_Init+0x44>)
 80014ee:	4a10      	ldr	r2, [pc, #64]	; (8001530 <MX_TIM16_Init+0x48>)
 80014f0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 72-1;
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <MX_TIM16_Init+0x44>)
 80014f4:	2247      	movs	r2, #71	; 0x47
 80014f6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <MX_TIM16_Init+0x44>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 50 - 1;
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <MX_TIM16_Init+0x44>)
 8001500:	2231      	movs	r2, #49	; 0x31
 8001502:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <MX_TIM16_Init+0x44>)
 8001506:	2200      	movs	r2, #0
 8001508:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <MX_TIM16_Init+0x44>)
 800150c:	2200      	movs	r2, #0
 800150e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <MX_TIM16_Init+0x44>)
 8001512:	2200      	movs	r2, #0
 8001514:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <MX_TIM16_Init+0x44>)
 8001518:	f004 f97c 	bl	8005814 <HAL_TIM_Base_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8001522:	f000 f967 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000b58 	.word	0x20000b58
 8001530:	40014400 	.word	0x40014400

08001534 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <MX_USART2_UART_Init+0x58>)
 800153a:	4a15      	ldr	r2, [pc, #84]	; (8001590 <MX_USART2_UART_Init+0x5c>)
 800153c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800153e:	4b13      	ldr	r3, [pc, #76]	; (800158c <MX_USART2_UART_Init+0x58>)
 8001540:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001544:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <MX_USART2_UART_Init+0x58>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800154c:	4b0f      	ldr	r3, [pc, #60]	; (800158c <MX_USART2_UART_Init+0x58>)
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <MX_USART2_UART_Init+0x58>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <MX_USART2_UART_Init+0x58>)
 800155a:	220c      	movs	r2, #12
 800155c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155e:	4b0b      	ldr	r3, [pc, #44]	; (800158c <MX_USART2_UART_Init+0x58>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <MX_USART2_UART_Init+0x58>)
 8001566:	2200      	movs	r2, #0
 8001568:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <MX_USART2_UART_Init+0x58>)
 800156c:	2200      	movs	r2, #0
 800156e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <MX_USART2_UART_Init+0x58>)
 8001572:	2200      	movs	r2, #0
 8001574:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_USART2_UART_Init+0x58>)
 8001578:	f004 fe64 	bl	8006244 <HAL_UART_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001582:	f000 f937 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000ad4 	.word	0x20000ad4
 8001590:	40004400 	.word	0x40004400

08001594 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800159a:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <MX_DMA_Init+0x38>)
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	4a0b      	ldr	r2, [pc, #44]	; (80015cc <MX_DMA_Init+0x38>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6153      	str	r3, [r2, #20]
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <MX_DMA_Init+0x38>)
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2100      	movs	r1, #0
 80015b6:	200d      	movs	r0, #13
 80015b8:	f002 f993 	bl	80038e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80015bc:	200d      	movs	r0, #13
 80015be:	f002 f9ac 	bl	800391a <HAL_NVIC_EnableIRQ>

}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40021000 	.word	0x40021000

080015d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	; 0x28
 80015d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
 80015e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e6:	4b75      	ldr	r3, [pc, #468]	; (80017bc <MX_GPIO_Init+0x1ec>)
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	4a74      	ldr	r2, [pc, #464]	; (80017bc <MX_GPIO_Init+0x1ec>)
 80015ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015f0:	6153      	str	r3, [r2, #20]
 80015f2:	4b72      	ldr	r3, [pc, #456]	; (80017bc <MX_GPIO_Init+0x1ec>)
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015fe:	4b6f      	ldr	r3, [pc, #444]	; (80017bc <MX_GPIO_Init+0x1ec>)
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	4a6e      	ldr	r2, [pc, #440]	; (80017bc <MX_GPIO_Init+0x1ec>)
 8001604:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001608:	6153      	str	r3, [r2, #20]
 800160a:	4b6c      	ldr	r3, [pc, #432]	; (80017bc <MX_GPIO_Init+0x1ec>)
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	4b69      	ldr	r3, [pc, #420]	; (80017bc <MX_GPIO_Init+0x1ec>)
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	4a68      	ldr	r2, [pc, #416]	; (80017bc <MX_GPIO_Init+0x1ec>)
 800161c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001620:	6153      	str	r3, [r2, #20]
 8001622:	4b66      	ldr	r3, [pc, #408]	; (80017bc <MX_GPIO_Init+0x1ec>)
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800162e:	4b63      	ldr	r3, [pc, #396]	; (80017bc <MX_GPIO_Init+0x1ec>)
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	4a62      	ldr	r2, [pc, #392]	; (80017bc <MX_GPIO_Init+0x1ec>)
 8001634:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001638:	6153      	str	r3, [r2, #20]
 800163a:	4b60      	ldr	r3, [pc, #384]	; (80017bc <MX_GPIO_Init+0x1ec>)
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD5_Pin|LD4_Pin|lcd_D6_Pin 
 8001646:	2200      	movs	r2, #0
 8001648:	f44f 51f1 	mov.w	r1, #7712	; 0x1e20
 800164c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001650:	f002 fd2c 	bl	80040ac <HAL_GPIO_WritePin>
                          |lcd_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|lcd_D4_Pin|LD3_Pin|lcd_D5_Pin, GPIO_PIN_RESET);
 8001654:	2200      	movs	r2, #0
 8001656:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 800165a:	4859      	ldr	r0, [pc, #356]	; (80017c0 <MX_GPIO_Init+0x1f0>)
 800165c:	f002 fd26 	bl	80040ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, lcd_blown_Pin|lcd_RS_Pin|lcd_E_Pin, GPIO_PIN_RESET);
 8001660:	2200      	movs	r2, #0
 8001662:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8001666:	4857      	ldr	r0, [pc, #348]	; (80017c4 <MX_GPIO_Init+0x1f4>)
 8001668:	f002 fd20 	bl	80040ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800166c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001672:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001676:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	4619      	mov	r1, r3
 8001682:	484f      	ldr	r0, [pc, #316]	; (80017c0 <MX_GPIO_Init+0x1f0>)
 8001684:	f002 fb70 	bl	8003d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD5_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD5_Pin|LD4_Pin;
 8001688:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 800168c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168e:	2301      	movs	r3, #1
 8001690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001696:	2300      	movs	r3, #0
 8001698:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	4619      	mov	r1, r3
 80016a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a4:	f002 fb60 	bl	8003d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_mid_Pin */
  GPIO_InitStruct.Pin = btn_mid_Pin;
 80016a8:	2340      	movs	r3, #64	; 0x40
 80016aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80016ac:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80016b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016b2:	2301      	movs	r3, #1
 80016b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn_mid_GPIO_Port, &GPIO_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c0:	f002 fb52 	bl	8003d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_right_Pin */
  GPIO_InitStruct.Pin = btn_right_Pin;
 80016c4:	2380      	movs	r3, #128	; 0x80
 80016c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ce:	2301      	movs	r3, #1
 80016d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn_right_GPIO_Port, &GPIO_InitStruct);
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4619      	mov	r1, r3
 80016d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016dc:	f002 fb44 	bl	8003d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD3_Pin;
 80016e0:	2390      	movs	r3, #144	; 0x90
 80016e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e4:	2301      	movs	r3, #1
 80016e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ec:	2300      	movs	r3, #0
 80016ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	4619      	mov	r1, r3
 80016f6:	4832      	ldr	r0, [pc, #200]	; (80017c0 <MX_GPIO_Init+0x1f0>)
 80016f8:	f002 fb36 	bl	8003d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : btn_down_Pin btn_left_Pin btn_up_Pin */
  GPIO_InitStruct.Pin = btn_down_Pin|btn_left_Pin|btn_up_Pin;
 80016fc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001702:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001708:	2301      	movs	r3, #1
 800170a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	4619      	mov	r1, r3
 8001712:	482c      	ldr	r0, [pc, #176]	; (80017c4 <MX_GPIO_Init+0x1f4>)
 8001714:	f002 fb28 	bl	8003d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : lcd_blown_Pin */
  GPIO_InitStruct.Pin = lcd_blown_Pin;
 8001718:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800171c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800171e:	2311      	movs	r3, #17
 8001720:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	2300      	movs	r3, #0
 8001728:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(lcd_blown_GPIO_Port, &GPIO_InitStruct);
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4619      	mov	r1, r3
 8001730:	4824      	ldr	r0, [pc, #144]	; (80017c4 <MX_GPIO_Init+0x1f4>)
 8001732:	f002 fb19 	bl	8003d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : lcd_RS_Pin lcd_E_Pin */
  GPIO_InitStruct.Pin = lcd_RS_Pin|lcd_E_Pin;
 8001736:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800173a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173c:	2301      	movs	r3, #1
 800173e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001744:	2300      	movs	r3, #0
 8001746:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	4619      	mov	r1, r3
 800174e:	481d      	ldr	r0, [pc, #116]	; (80017c4 <MX_GPIO_Init+0x1f4>)
 8001750:	f002 fb0a 	bl	8003d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : lcd_D4_Pin lcd_D5_Pin */
  GPIO_InitStruct.Pin = lcd_D4_Pin|lcd_D5_Pin;
 8001754:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001758:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800175a:	2311      	movs	r3, #17
 800175c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	2300      	movs	r3, #0
 8001764:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001766:	f107 0314 	add.w	r3, r7, #20
 800176a:	4619      	mov	r1, r3
 800176c:	4814      	ldr	r0, [pc, #80]	; (80017c0 <MX_GPIO_Init+0x1f0>)
 800176e:	f002 fafb 	bl	8003d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : lcd_D6_Pin lcd_D7_Pin */
  GPIO_InitStruct.Pin = lcd_D6_Pin|lcd_D7_Pin;
 8001772:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001778:	2311      	movs	r3, #17
 800177a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001780:	2300      	movs	r3, #0
 8001782:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	4619      	mov	r1, r3
 800178a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800178e:	f002 faeb 	bl	8003d68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	2100      	movs	r1, #0
 8001796:	2017      	movs	r0, #23
 8001798:	f002 f8a3 	bl	80038e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800179c:	2017      	movs	r0, #23
 800179e:	f002 f8bc 	bl	800391a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017a2:	2200      	movs	r2, #0
 80017a4:	2100      	movs	r1, #0
 80017a6:	2028      	movs	r0, #40	; 0x28
 80017a8:	f002 f89b 	bl	80038e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017ac:	2028      	movs	r0, #40	; 0x28
 80017ae:	f002 f8b4 	bl	800391a <HAL_NVIC_EnableIRQ>

}
 80017b2:	bf00      	nop
 80017b4:	3728      	adds	r7, #40	; 0x28
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000
 80017c0:	48000800 	.word	0x48000800
 80017c4:	48000400 	.word	0x48000400

080017c8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this interrupt
	if(htim == &htim16)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a06      	ldr	r2, [pc, #24]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x24>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d102      	bne.n	80017de <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		adc_timer_flag = 1;
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80017da:	2201      	movs	r2, #1
 80017dc:	701a      	strb	r2, [r3, #0]
	}
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	20000b58 	.word	0x20000b58
 80017f0:	2000003f 	.word	0x2000003f

080017f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
	...

08001804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180a:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <HAL_MspInit+0x44>)
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	4a0e      	ldr	r2, [pc, #56]	; (8001848 <HAL_MspInit+0x44>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6193      	str	r3, [r2, #24]
 8001816:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <HAL_MspInit+0x44>)
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <HAL_MspInit+0x44>)
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	4a08      	ldr	r2, [pc, #32]	; (8001848 <HAL_MspInit+0x44>)
 8001828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800182c:	61d3      	str	r3, [r2, #28]
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <HAL_MspInit+0x44>)
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800183a:	2007      	movs	r0, #7
 800183c:	f002 f846 	bl	80038cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40021000 	.word	0x40021000

0800184c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08a      	sub	sp, #40	; 0x28
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800186c:	d124      	bne.n	80018b8 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800186e:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <HAL_ADC_MspInit+0x74>)
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	4a13      	ldr	r2, [pc, #76]	; (80018c0 <HAL_ADC_MspInit+0x74>)
 8001874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001878:	6153      	str	r3, [r2, #20]
 800187a:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <HAL_ADC_MspInit+0x74>)
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001886:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <HAL_ADC_MspInit+0x74>)
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	4a0d      	ldr	r2, [pc, #52]	; (80018c0 <HAL_ADC_MspInit+0x74>)
 800188c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001890:	6153      	str	r3, [r2, #20]
 8001892:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <HAL_ADC_MspInit+0x74>)
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800189e:	2301      	movs	r3, #1
 80018a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018a2:	2303      	movs	r3, #3
 80018a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018aa:	f107 0314 	add.w	r3, r7, #20
 80018ae:	4619      	mov	r1, r3
 80018b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b4:	f002 fa58 	bl	8003d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018b8:	bf00      	nop
 80018ba:	3728      	adds	r7, #40	; 0x28
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40021000 	.word	0x40021000

080018c4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08a      	sub	sp, #40	; 0x28
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a2c      	ldr	r2, [pc, #176]	; (8001994 <HAL_DAC_MspInit+0xd0>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d152      	bne.n	800198c <HAL_DAC_MspInit+0xc8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80018e6:	4b2c      	ldr	r3, [pc, #176]	; (8001998 <HAL_DAC_MspInit+0xd4>)
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	4a2b      	ldr	r2, [pc, #172]	; (8001998 <HAL_DAC_MspInit+0xd4>)
 80018ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80018f0:	61d3      	str	r3, [r2, #28]
 80018f2:	4b29      	ldr	r3, [pc, #164]	; (8001998 <HAL_DAC_MspInit+0xd4>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fe:	4b26      	ldr	r3, [pc, #152]	; (8001998 <HAL_DAC_MspInit+0xd4>)
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	4a25      	ldr	r2, [pc, #148]	; (8001998 <HAL_DAC_MspInit+0xd4>)
 8001904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001908:	6153      	str	r3, [r2, #20]
 800190a:	4b23      	ldr	r3, [pc, #140]	; (8001998 <HAL_DAC_MspInit+0xd4>)
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001916:	2310      	movs	r3, #16
 8001918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800191a:	2303      	movs	r3, #3
 800191c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001922:	f107 0314 	add.w	r3, r7, #20
 8001926:	4619      	mov	r1, r3
 8001928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800192c:	f002 fa1c 	bl	8003d68 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8001930:	4b1a      	ldr	r3, [pc, #104]	; (800199c <HAL_DAC_MspInit+0xd8>)
 8001932:	4a1b      	ldr	r2, [pc, #108]	; (80019a0 <HAL_DAC_MspInit+0xdc>)
 8001934:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001936:	4b19      	ldr	r3, [pc, #100]	; (800199c <HAL_DAC_MspInit+0xd8>)
 8001938:	2210      	movs	r2, #16
 800193a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800193c:	4b17      	ldr	r3, [pc, #92]	; (800199c <HAL_DAC_MspInit+0xd8>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001942:	4b16      	ldr	r3, [pc, #88]	; (800199c <HAL_DAC_MspInit+0xd8>)
 8001944:	2280      	movs	r2, #128	; 0x80
 8001946:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001948:	4b14      	ldr	r3, [pc, #80]	; (800199c <HAL_DAC_MspInit+0xd8>)
 800194a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800194e:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_DAC_MspInit+0xd8>)
 8001952:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001956:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001958:	4b10      	ldr	r3, [pc, #64]	; (800199c <HAL_DAC_MspInit+0xd8>)
 800195a:	2220      	movs	r2, #32
 800195c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800195e:	4b0f      	ldr	r3, [pc, #60]	; (800199c <HAL_DAC_MspInit+0xd8>)
 8001960:	2200      	movs	r2, #0
 8001962:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001964:	480d      	ldr	r0, [pc, #52]	; (800199c <HAL_DAC_MspInit+0xd8>)
 8001966:	f002 f861 	bl	8003a2c <HAL_DMA_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 8001970:	f7ff ff40 	bl	80017f4 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8001974:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <HAL_DAC_MspInit+0xe0>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <HAL_DAC_MspInit+0xe0>)
 800197a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800197e:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a06      	ldr	r2, [pc, #24]	; (800199c <HAL_DAC_MspInit+0xd8>)
 8001984:	609a      	str	r2, [r3, #8]
 8001986:	4a05      	ldr	r2, [pc, #20]	; (800199c <HAL_DAC_MspInit+0xd8>)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800198c:	bf00      	nop
 800198e:	3728      	adds	r7, #40	; 0x28
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40007400 	.word	0x40007400
 8001998:	40021000 	.word	0x40021000
 800199c:	200009f4 	.word	0x200009f4
 80019a0:	40020030 	.word	0x40020030
 80019a4:	40010000 	.word	0x40010000

080019a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019b8:	d114      	bne.n	80019e4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019ba:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <HAL_TIM_Base_MspInit+0x78>)
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	4a18      	ldr	r2, [pc, #96]	; (8001a20 <HAL_TIM_Base_MspInit+0x78>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	61d3      	str	r3, [r2, #28]
 80019c6:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <HAL_TIM_Base_MspInit+0x78>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2100      	movs	r1, #0
 80019d6:	201c      	movs	r0, #28
 80019d8:	f001 ff83 	bl	80038e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019dc:	201c      	movs	r0, #28
 80019de:	f001 ff9c 	bl	800391a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80019e2:	e018      	b.n	8001a16 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM16)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0e      	ldr	r2, [pc, #56]	; (8001a24 <HAL_TIM_Base_MspInit+0x7c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d113      	bne.n	8001a16 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80019ee:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <HAL_TIM_Base_MspInit+0x78>)
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	4a0b      	ldr	r2, [pc, #44]	; (8001a20 <HAL_TIM_Base_MspInit+0x78>)
 80019f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f8:	6193      	str	r3, [r2, #24]
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_TIM_Base_MspInit+0x78>)
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001a06:	2200      	movs	r2, #0
 8001a08:	2100      	movs	r1, #0
 8001a0a:	2019      	movs	r0, #25
 8001a0c:	f001 ff69 	bl	80038e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001a10:	2019      	movs	r0, #25
 8001a12:	f001 ff82 	bl	800391a <HAL_NVIC_EnableIRQ>
}
 8001a16:	bf00      	nop
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40014400 	.word	0x40014400

08001a28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	; 0x28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a1b      	ldr	r2, [pc, #108]	; (8001ab4 <HAL_UART_MspInit+0x8c>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d130      	bne.n	8001aac <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a4a:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <HAL_UART_MspInit+0x90>)
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	4a1a      	ldr	r2, [pc, #104]	; (8001ab8 <HAL_UART_MspInit+0x90>)
 8001a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a54:	61d3      	str	r3, [r2, #28]
 8001a56:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <HAL_UART_MspInit+0x90>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <HAL_UART_MspInit+0x90>)
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	4a14      	ldr	r2, [pc, #80]	; (8001ab8 <HAL_UART_MspInit+0x90>)
 8001a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a6c:	6153      	str	r3, [r2, #20]
 8001a6e:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_UART_MspInit+0x90>)
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a7a:	230c      	movs	r3, #12
 8001a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a86:	2300      	movs	r3, #0
 8001a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a8a:	2307      	movs	r3, #7
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	4619      	mov	r1, r3
 8001a94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a98:	f002 f966 	bl	8003d68 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	2026      	movs	r0, #38	; 0x26
 8001aa2:	f001 ff1e 	bl	80038e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001aa6:	2026      	movs	r0, #38	; 0x26
 8001aa8:	f001 ff37 	bl	800391a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001aac:	bf00      	nop
 8001aae:	3728      	adds	r7, #40	; 0x28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40004400 	.word	0x40004400
 8001ab8:	40021000 	.word	0x40021000

08001abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ace:	e7fe      	b.n	8001ace <HardFault_Handler+0x4>

08001ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <MemManage_Handler+0x4>

08001ad6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ada:	e7fe      	b.n	8001ada <BusFault_Handler+0x4>

08001adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <UsageFault_Handler+0x4>

08001ae2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b10:	f000 fc18 	bl	8002344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001b1c:	4802      	ldr	r0, [pc, #8]	; (8001b28 <DMA1_Channel3_IRQHandler+0x10>)
 8001b1e:	f002 f843 	bl	8003ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	200009f4 	.word	0x200009f4

08001b2c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001b30:	2040      	movs	r0, #64	; 0x40
 8001b32:	f002 faed 	bl	8004110 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001b36:	2080      	movs	r0, #128	; 0x80
 8001b38:	f002 faea 	bl	8004110 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001b3c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001b40:	f002 fae6 	bl	8004110 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001b44:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b48:	f002 fae2 	bl	8004110 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001b54:	4802      	ldr	r0, [pc, #8]	; (8001b60 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001b56:	f003 ff8d 	bl	8005a74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000b58 	.word	0x20000b58

08001b64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b68:	4802      	ldr	r0, [pc, #8]	; (8001b74 <TIM2_IRQHandler+0x10>)
 8001b6a:	f003 ff83 	bl	8005a74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000a88 	.word	0x20000a88

08001b78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b7c:	4802      	ldr	r0, [pc, #8]	; (8001b88 <USART2_IRQHandler+0x10>)
 8001b7e:	f004 fc91 	bl	80064a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000ad4 	.word	0x20000ad4

08001b8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001b90:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001b94:	f002 fabc 	bl	8004110 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b98:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b9c:	f002 fab8 	bl	8004110 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <SystemInit+0x20>)
 8001baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bae:	4a05      	ldr	r2, [pc, #20]	; (8001bc4 <SystemInit+0x20>)
 8001bb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <UART_Main_Function>:
uint8_t rx_byte[1];
uint8_t rx_bytes[10] = {0};
uint8_t rx_bytes_counter = 0;

void UART_Main_Function()
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
	if(rx_byte[0] != '\n')
 8001bcc:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <UART_Main_Function+0x7c>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b0a      	cmp	r3, #10
 8001bd2:	d035      	beq.n	8001c40 <UART_Main_Function+0x78>
	{
	  rx_bytes[rx_bytes_counter] = rx_byte[0];
 8001bd4:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <UART_Main_Function+0x80>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <UART_Main_Function+0x7c>)
 8001bdc:	7819      	ldrb	r1, [r3, #0]
 8001bde:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <UART_Main_Function+0x84>)
 8001be0:	5499      	strb	r1, [r3, r2]
	  if(rx_bytes_counter == 0 && rx_byte[0] == '@'){
 8001be2:	4b19      	ldr	r3, [pc, #100]	; (8001c48 <UART_Main_Function+0x80>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10a      	bne.n	8001c00 <UART_Main_Function+0x38>
 8001bea:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <UART_Main_Function+0x7c>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b40      	cmp	r3, #64	; 0x40
 8001bf0:	d106      	bne.n	8001c00 <UART_Main_Function+0x38>
		  rx_bytes_counter++;
 8001bf2:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <UART_Main_Function+0x80>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <UART_Main_Function+0x80>)
 8001bfc:	701a      	strb	r2, [r3, #0]
 8001bfe:	e01a      	b.n	8001c36 <UART_Main_Function+0x6e>
	  } else if(rx_bytes_counter > 0){
 8001c00:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <UART_Main_Function+0x80>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d016      	beq.n	8001c36 <UART_Main_Function+0x6e>
		  rx_bytes_counter++;
 8001c08:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <UART_Main_Function+0x80>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <UART_Main_Function+0x80>)
 8001c12:	701a      	strb	r2, [r3, #0]
		  if(UART_Rx_Complete(rx_byte[0]))
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <UART_Main_Function+0x7c>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f000 f81b 	bl	8001c54 <UART_Rx_Complete>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d008      	beq.n	8001c36 <UART_Main_Function+0x6e>
		  {
			  UART_Interpret_Rx_Message(rx_bytes, rx_bytes_counter);
 8001c24:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <UART_Main_Function+0x80>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4808      	ldr	r0, [pc, #32]	; (8001c4c <UART_Main_Function+0x84>)
 8001c2c:	f000 f823 	bl	8001c76 <UART_Interpret_Rx_Message>
			  rx_bytes_counter = 0;
 8001c30:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <UART_Main_Function+0x80>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 8001c36:	2201      	movs	r2, #1
 8001c38:	4902      	ldr	r1, [pc, #8]	; (8001c44 <UART_Main_Function+0x7c>)
 8001c3a:	4805      	ldr	r0, [pc, #20]	; (8001c50 <UART_Main_Function+0x88>)
 8001c3c:	f004 fbe4 	bl	8006408 <HAL_UART_Receive_IT>
	}
}
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000ba4 	.word	0x20000ba4
 8001c48:	20000052 	.word	0x20000052
 8001c4c:	20000048 	.word	0x20000048
 8001c50:	20000ad4 	.word	0x20000ad4

08001c54 <UART_Rx_Complete>:

bool UART_Rx_Complete(uint8_t last_byte)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
	if(last_byte == '!')
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	2b21      	cmp	r3, #33	; 0x21
 8001c62:	d101      	bne.n	8001c68 <UART_Rx_Complete+0x14>
	{
		return true;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e000      	b.n	8001c6a <UART_Rx_Complete+0x16>
	}
	else
	{
		return false;
 8001c68:	2300      	movs	r3, #0
	}
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <UART_Interpret_Rx_Message>:

void UART_Interpret_Rx_Message(uint8_t *rx_array, uint8_t length)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
 8001c7e:	460b      	mov	r3, r1
 8001c80:	70fb      	strb	r3, [r7, #3]

	if(length > 7)
 8001c82:	78fb      	ldrb	r3, [r7, #3]
 8001c84:	2b07      	cmp	r3, #7
 8001c86:	d947      	bls.n	8001d18 <UART_Interpret_Rx_Message+0xa2>
	{
		if(rx_array[2] == '*')
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3302      	adds	r3, #2
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b2a      	cmp	r3, #42	; 0x2a
 8001c90:	d117      	bne.n	8001cc2 <UART_Interpret_Rx_Message+0x4c>
		{
			// Requests
			switch(rx_array[4])
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	3304      	adds	r3, #4
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b6d      	cmp	r3, #109	; 0x6d
 8001c9a:	d002      	beq.n	8001ca2 <UART_Interpret_Rx_Message+0x2c>
 8001c9c:	2b73      	cmp	r3, #115	; 0x73
 8001c9e:	d007      	beq.n	8001cb0 <UART_Interpret_Rx_Message+0x3a>
					DAC_Switch_Output_OnOff(rx_array[6]);
					UART_Request_Status();
					break;
				default:
					// Problems
					break;
 8001ca0:	e03a      	b.n	8001d18 <UART_Interpret_Rx_Message+0xa2>
					UART_Request_Measurement(rx_array[6]);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	3306      	adds	r3, #6
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f000 f85b 	bl	8001d64 <UART_Request_Measurement>
					break;
 8001cae:	e033      	b.n	8001d18 <UART_Interpret_Rx_Message+0xa2>
					DAC_Switch_Output_OnOff(rx_array[6]);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3306      	adds	r3, #6
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fb64 	bl	8000384 <DAC_Switch_Output_OnOff>
					UART_Request_Status();
 8001cbc:	f000 f9a4 	bl	8002008 <UART_Request_Status>
					break;
 8001cc0:	e02a      	b.n	8001d18 <UART_Interpret_Rx_Message+0xa2>
			}
		}
		else if(rx_array[2] == '$'){
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3302      	adds	r3, #2
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b24      	cmp	r3, #36	; 0x24
 8001cca:	d10a      	bne.n	8001ce2 <UART_Interpret_Rx_Message+0x6c>
			// Set Measurement Mode
			UART_Set_Measurement_Mode(rx_array[4], rx_array[5]);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3304      	adds	r3, #4
 8001cd0:	781a      	ldrb	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3305      	adds	r3, #5
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4610      	mov	r0, r2
 8001cdc:	f000 f9f2 	bl	80020c4 <UART_Set_Measurement_Mode>
		}else if(rx_array[2] == '#'){
			// Display on LCD
			UART_Display_On_LCD(rx_array[4], rx_array[6]);
		}
	}
}
 8001ce0:	e01a      	b.n	8001d18 <UART_Interpret_Rx_Message+0xa2>
		}else if(rx_array[2] == '^'){
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3302      	adds	r3, #2
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b5e      	cmp	r3, #94	; 0x5e
 8001cea:	d105      	bne.n	8001cf8 <UART_Interpret_Rx_Message+0x82>
			UART_Set_Output_Parameter(rx_array, length);
 8001cec:	78fb      	ldrb	r3, [r7, #3]
 8001cee:	4619      	mov	r1, r3
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 fa29 	bl	8002148 <UART_Set_Output_Parameter>
}
 8001cf6:	e00f      	b.n	8001d18 <UART_Interpret_Rx_Message+0xa2>
		}else if(rx_array[2] == '#'){
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3302      	adds	r3, #2
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b23      	cmp	r3, #35	; 0x23
 8001d00:	d10a      	bne.n	8001d18 <UART_Interpret_Rx_Message+0xa2>
			UART_Display_On_LCD(rx_array[4], rx_array[6]);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3304      	adds	r3, #4
 8001d06:	781a      	ldrb	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3306      	adds	r3, #6
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4610      	mov	r0, r2
 8001d12:	f000 f805 	bl	8001d20 <UART_Display_On_LCD>
}
 8001d16:	e7ff      	b.n	8001d18 <UART_Interpret_Rx_Message+0xa2>
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <UART_Display_On_LCD>:

void UART_Display_On_LCD(uint8_t rs, uint8_t byte)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	460a      	mov	r2, r1
 8001d2a:	71fb      	strb	r3, [r7, #7]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	71bb      	strb	r3, [r7, #6]
	if(rs == '1'){
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	2b31      	cmp	r3, #49	; 0x31
 8001d34:	d109      	bne.n	8001d4a <UART_Display_On_LCD+0x2a>
		// Set print flag; store rs and byte
		DisplayState.PrintFlag = 1;
 8001d36:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <UART_Display_On_LCD+0x40>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	709a      	strb	r2, [r3, #2]
		DisplayState.PrintRS = 1;
 8001d3c:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <UART_Display_On_LCD+0x40>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	70da      	strb	r2, [r3, #3]
		DisplayState.PrintByte = byte;
 8001d42:	4a07      	ldr	r2, [pc, #28]	; (8001d60 <UART_Display_On_LCD+0x40>)
 8001d44:	79bb      	ldrb	r3, [r7, #6]
 8001d46:	7113      	strb	r3, [r2, #4]
	}else if(rs == '0'){
		// Instruction
		LCD_Write_Instruction(byte);
	}
}
 8001d48:	e006      	b.n	8001d58 <UART_Display_On_LCD+0x38>
	}else if(rs == '0'){
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	2b30      	cmp	r3, #48	; 0x30
 8001d4e:	d103      	bne.n	8001d58 <UART_Display_On_LCD+0x38>
		LCD_Write_Instruction(byte);
 8001d50:	79bb      	ldrb	r3, [r7, #6]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe fbb8 	bl	80004c8 <LCD_Write_Instruction>
}
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	200009d8 	.word	0x200009d8

08001d64 <UART_Request_Measurement>:

void UART_Request_Measurement(uint8_t parameter)
{
 8001d64:	b590      	push	{r4, r7, lr}
 8001d66:	b087      	sub	sp, #28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
	uint8_t msg[13] = "@,m,x,xxxx,!\n";
 8001d6e:	4b9f      	ldr	r3, [pc, #636]	; (8001fec <UART_Request_Measurement+0x288>)
 8001d70:	f107 0408 	add.w	r4, r7, #8
 8001d74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d76:	c407      	stmia	r4!, {r0, r1, r2}
 8001d78:	7023      	strb	r3, [r4, #0]
	switch(parameter){
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	3b61      	subs	r3, #97	; 0x61
 8001d7e:	2b13      	cmp	r3, #19
 8001d80:	f200 8122 	bhi.w	8001fc8 <UART_Request_Measurement+0x264>
 8001d84:	a201      	add	r2, pc, #4	; (adr r2, 8001d8c <UART_Request_Measurement+0x28>)
 8001d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d8a:	bf00      	nop
 8001d8c:	08001ddd 	.word	0x08001ddd
 8001d90:	08001fc9 	.word	0x08001fc9
 8001d94:	08001fc9 	.word	0x08001fc9
 8001d98:	08001fc9 	.word	0x08001fc9
 8001d9c:	08001fc9 	.word	0x08001fc9
 8001da0:	08001f25 	.word	0x08001f25
 8001da4:	08001fc9 	.word	0x08001fc9
 8001da8:	08001fc9 	.word	0x08001fc9
 8001dac:	08001fc9 	.word	0x08001fc9
 8001db0:	08001fc9 	.word	0x08001fc9
 8001db4:	08001fc9 	.word	0x08001fc9
 8001db8:	08001fc9 	.word	0x08001fc9
 8001dbc:	08001fc9 	.word	0x08001fc9
 8001dc0:	08001fc9 	.word	0x08001fc9
 8001dc4:	08001e81 	.word	0x08001e81
 8001dc8:	08001fc9 	.word	0x08001fc9
 8001dcc:	08001fc9 	.word	0x08001fc9
 8001dd0:	08001fc9 	.word	0x08001fc9
 8001dd4:	08001fc9 	.word	0x08001fc9
 8001dd8:	08001fc9 	.word	0x08001fc9
		case 't':
			// Type
			break;
		case 'a':
			// Amplitude (peak-to-peak)
			msg[4] = 'a';
 8001ddc:	2361      	movs	r3, #97	; 0x61
 8001dde:	733b      	strb	r3, [r7, #12]
			msg[6] = ((MeasurementState.Amplitude/1000) % 10) + 48;
 8001de0:	4b83      	ldr	r3, [pc, #524]	; (8001ff0 <UART_Request_Measurement+0x28c>)
 8001de2:	885b      	ldrh	r3, [r3, #2]
 8001de4:	4a83      	ldr	r2, [pc, #524]	; (8001ff4 <UART_Request_Measurement+0x290>)
 8001de6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dea:	099b      	lsrs	r3, r3, #6
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	4b82      	ldr	r3, [pc, #520]	; (8001ff8 <UART_Request_Measurement+0x294>)
 8001df0:	fba3 1302 	umull	r1, r3, r3, r2
 8001df4:	08d9      	lsrs	r1, r3, #3
 8001df6:	460b      	mov	r3, r1
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	440b      	add	r3, r1
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	3330      	adds	r3, #48	; 0x30
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	73bb      	strb	r3, [r7, #14]
			msg[7] = ((MeasurementState.Amplitude/100) % 10) + 48;
 8001e0a:	4b79      	ldr	r3, [pc, #484]	; (8001ff0 <UART_Request_Measurement+0x28c>)
 8001e0c:	885b      	ldrh	r3, [r3, #2]
 8001e0e:	4a7b      	ldr	r2, [pc, #492]	; (8001ffc <UART_Request_Measurement+0x298>)
 8001e10:	fba2 2303 	umull	r2, r3, r2, r3
 8001e14:	095b      	lsrs	r3, r3, #5
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	4b77      	ldr	r3, [pc, #476]	; (8001ff8 <UART_Request_Measurement+0x294>)
 8001e1a:	fba3 1302 	umull	r1, r3, r3, r2
 8001e1e:	08d9      	lsrs	r1, r3, #3
 8001e20:	460b      	mov	r3, r1
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	3330      	adds	r3, #48	; 0x30
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	73fb      	strb	r3, [r7, #15]
			msg[8] = ((MeasurementState.Amplitude/10) % 10) + 48;
 8001e34:	4b6e      	ldr	r3, [pc, #440]	; (8001ff0 <UART_Request_Measurement+0x28c>)
 8001e36:	885b      	ldrh	r3, [r3, #2]
 8001e38:	4a6f      	ldr	r2, [pc, #444]	; (8001ff8 <UART_Request_Measurement+0x294>)
 8001e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3e:	08db      	lsrs	r3, r3, #3
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	4b6d      	ldr	r3, [pc, #436]	; (8001ff8 <UART_Request_Measurement+0x294>)
 8001e44:	fba3 1302 	umull	r1, r3, r3, r2
 8001e48:	08d9      	lsrs	r1, r3, #3
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	440b      	add	r3, r1
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	3330      	adds	r3, #48	; 0x30
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	743b      	strb	r3, [r7, #16]
			msg[9] = (MeasurementState.Amplitude % 10) + 48;
 8001e5e:	4b64      	ldr	r3, [pc, #400]	; (8001ff0 <UART_Request_Measurement+0x28c>)
 8001e60:	885a      	ldrh	r2, [r3, #2]
 8001e62:	4b65      	ldr	r3, [pc, #404]	; (8001ff8 <UART_Request_Measurement+0x294>)
 8001e64:	fba3 1302 	umull	r1, r3, r3, r2
 8001e68:	08d9      	lsrs	r1, r3, #3
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	440b      	add	r3, r1
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	3330      	adds	r3, #48	; 0x30
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	747b      	strb	r3, [r7, #17]
			break;
 8001e7e:	e0a4      	b.n	8001fca <UART_Request_Measurement+0x266>
		case 'o':
			// Offset
			msg[4] = 'o';
 8001e80:	236f      	movs	r3, #111	; 0x6f
 8001e82:	733b      	strb	r3, [r7, #12]
			msg[6] = ((MeasurementState.Offset/1000) % 10) + 48;
 8001e84:	4b5a      	ldr	r3, [pc, #360]	; (8001ff0 <UART_Request_Measurement+0x28c>)
 8001e86:	891b      	ldrh	r3, [r3, #8]
 8001e88:	4a5a      	ldr	r2, [pc, #360]	; (8001ff4 <UART_Request_Measurement+0x290>)
 8001e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8e:	099b      	lsrs	r3, r3, #6
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	4b59      	ldr	r3, [pc, #356]	; (8001ff8 <UART_Request_Measurement+0x294>)
 8001e94:	fba3 1302 	umull	r1, r3, r3, r2
 8001e98:	08d9      	lsrs	r1, r3, #3
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	3330      	adds	r3, #48	; 0x30
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	73bb      	strb	r3, [r7, #14]
			msg[7] = ((MeasurementState.Offset/100) % 10) + 48;
 8001eae:	4b50      	ldr	r3, [pc, #320]	; (8001ff0 <UART_Request_Measurement+0x28c>)
 8001eb0:	891b      	ldrh	r3, [r3, #8]
 8001eb2:	4a52      	ldr	r2, [pc, #328]	; (8001ffc <UART_Request_Measurement+0x298>)
 8001eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb8:	095b      	lsrs	r3, r3, #5
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	4b4e      	ldr	r3, [pc, #312]	; (8001ff8 <UART_Request_Measurement+0x294>)
 8001ebe:	fba3 1302 	umull	r1, r3, r3, r2
 8001ec2:	08d9      	lsrs	r1, r3, #3
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	3330      	adds	r3, #48	; 0x30
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	73fb      	strb	r3, [r7, #15]
			msg[8] = ((MeasurementState.Offset/10) % 10) + 48;
 8001ed8:	4b45      	ldr	r3, [pc, #276]	; (8001ff0 <UART_Request_Measurement+0x28c>)
 8001eda:	891b      	ldrh	r3, [r3, #8]
 8001edc:	4a46      	ldr	r2, [pc, #280]	; (8001ff8 <UART_Request_Measurement+0x294>)
 8001ede:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee2:	08db      	lsrs	r3, r3, #3
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	4b44      	ldr	r3, [pc, #272]	; (8001ff8 <UART_Request_Measurement+0x294>)
 8001ee8:	fba3 1302 	umull	r1, r3, r3, r2
 8001eec:	08d9      	lsrs	r1, r3, #3
 8001eee:	460b      	mov	r3, r1
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	3330      	adds	r3, #48	; 0x30
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	743b      	strb	r3, [r7, #16]
			msg[9] = (MeasurementState.Offset % 10) + 48;
 8001f02:	4b3b      	ldr	r3, [pc, #236]	; (8001ff0 <UART_Request_Measurement+0x28c>)
 8001f04:	891a      	ldrh	r2, [r3, #8]
 8001f06:	4b3c      	ldr	r3, [pc, #240]	; (8001ff8 <UART_Request_Measurement+0x294>)
 8001f08:	fba3 1302 	umull	r1, r3, r3, r2
 8001f0c:	08d9      	lsrs	r1, r3, #3
 8001f0e:	460b      	mov	r3, r1
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	3330      	adds	r3, #48	; 0x30
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	747b      	strb	r3, [r7, #17]
			break;
 8001f22:	e052      	b.n	8001fca <UART_Request_Measurement+0x266>
		case 'f':
			// Frequency
			msg[4] = 'f';
 8001f24:	2366      	movs	r3, #102	; 0x66
 8001f26:	733b      	strb	r3, [r7, #12]
			msg[6] = ((MeasurementState.Frequency/1000) % 10) + 48;
 8001f28:	4b31      	ldr	r3, [pc, #196]	; (8001ff0 <UART_Request_Measurement+0x28c>)
 8001f2a:	889b      	ldrh	r3, [r3, #4]
 8001f2c:	4a31      	ldr	r2, [pc, #196]	; (8001ff4 <UART_Request_Measurement+0x290>)
 8001f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f32:	099b      	lsrs	r3, r3, #6
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	4b30      	ldr	r3, [pc, #192]	; (8001ff8 <UART_Request_Measurement+0x294>)
 8001f38:	fba3 1302 	umull	r1, r3, r3, r2
 8001f3c:	08d9      	lsrs	r1, r3, #3
 8001f3e:	460b      	mov	r3, r1
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	440b      	add	r3, r1
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	3330      	adds	r3, #48	; 0x30
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	73bb      	strb	r3, [r7, #14]
			msg[7] = ((MeasurementState.Frequency/100) % 10) + 48;
 8001f52:	4b27      	ldr	r3, [pc, #156]	; (8001ff0 <UART_Request_Measurement+0x28c>)
 8001f54:	889b      	ldrh	r3, [r3, #4]
 8001f56:	4a29      	ldr	r2, [pc, #164]	; (8001ffc <UART_Request_Measurement+0x298>)
 8001f58:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5c:	095b      	lsrs	r3, r3, #5
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	4b25      	ldr	r3, [pc, #148]	; (8001ff8 <UART_Request_Measurement+0x294>)
 8001f62:	fba3 1302 	umull	r1, r3, r3, r2
 8001f66:	08d9      	lsrs	r1, r3, #3
 8001f68:	460b      	mov	r3, r1
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	3330      	adds	r3, #48	; 0x30
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	73fb      	strb	r3, [r7, #15]
			msg[8] = ((MeasurementState.Frequency/10) % 10) + 48;
 8001f7c:	4b1c      	ldr	r3, [pc, #112]	; (8001ff0 <UART_Request_Measurement+0x28c>)
 8001f7e:	889b      	ldrh	r3, [r3, #4]
 8001f80:	4a1d      	ldr	r2, [pc, #116]	; (8001ff8 <UART_Request_Measurement+0x294>)
 8001f82:	fba2 2303 	umull	r2, r3, r2, r3
 8001f86:	08db      	lsrs	r3, r3, #3
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	4b1b      	ldr	r3, [pc, #108]	; (8001ff8 <UART_Request_Measurement+0x294>)
 8001f8c:	fba3 1302 	umull	r1, r3, r3, r2
 8001f90:	08d9      	lsrs	r1, r3, #3
 8001f92:	460b      	mov	r3, r1
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	440b      	add	r3, r1
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	3330      	adds	r3, #48	; 0x30
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	743b      	strb	r3, [r7, #16]
			msg[9] = (MeasurementState.Frequency % 10) + 48;
 8001fa6:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <UART_Request_Measurement+0x28c>)
 8001fa8:	889a      	ldrh	r2, [r3, #4]
 8001faa:	4b13      	ldr	r3, [pc, #76]	; (8001ff8 <UART_Request_Measurement+0x294>)
 8001fac:	fba3 1302 	umull	r1, r3, r3, r2
 8001fb0:	08d9      	lsrs	r1, r3, #3
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	3330      	adds	r3, #48	; 0x30
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	747b      	strb	r3, [r7, #17]
			break;
 8001fc6:	e000      	b.n	8001fca <UART_Request_Measurement+0x266>
		case 'c':
			// Temperature
			break;
		default:
			// Problems
			break;
 8001fc8:	bf00      	nop
	}
	HAL_UART_Transmit(&huart2, msg, 13, 10);
 8001fca:	f107 0108 	add.w	r1, r7, #8
 8001fce:	230a      	movs	r3, #10
 8001fd0:	220d      	movs	r2, #13
 8001fd2:	480b      	ldr	r0, [pc, #44]	; (8002000 <UART_Request_Measurement+0x29c>)
 8001fd4:	f004 f984 	bl	80062e0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 8001fd8:	2201      	movs	r2, #1
 8001fda:	490a      	ldr	r1, [pc, #40]	; (8002004 <UART_Request_Measurement+0x2a0>)
 8001fdc:	4808      	ldr	r0, [pc, #32]	; (8002000 <UART_Request_Measurement+0x29c>)
 8001fde:	f004 fa13 	bl	8006408 <HAL_UART_Receive_IT>
}
 8001fe2:	bf00      	nop
 8001fe4:	371c      	adds	r7, #28
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd90      	pop	{r4, r7, pc}
 8001fea:	bf00      	nop
 8001fec:	080077f4 	.word	0x080077f4
 8001ff0:	20000828 	.word	0x20000828
 8001ff4:	10624dd3 	.word	0x10624dd3
 8001ff8:	cccccccd 	.word	0xcccccccd
 8001ffc:	51eb851f 	.word	0x51eb851f
 8002000:	20000ad4 	.word	0x20000ad4
 8002004:	20000ba4 	.word	0x20000ba4

08002008 <UART_Request_Status>:

void UART_Request_Status()
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
	uint8_t msg[11] = "@,xx,x,x,!\n";
 800200e:	4a28      	ldr	r2, [pc, #160]	; (80020b0 <UART_Request_Status+0xa8>)
 8002010:	1d3b      	adds	r3, r7, #4
 8002012:	ca07      	ldmia	r2, {r0, r1, r2}
 8002014:	c303      	stmia	r3!, {r0, r1}
 8002016:	801a      	strh	r2, [r3, #0]
 8002018:	3302      	adds	r3, #2
 800201a:	0c12      	lsrs	r2, r2, #16
 800201c:	701a      	strb	r2, [r3, #0]
	switch(MeasurementState.Mode){
 800201e:	4b25      	ldr	r3, [pc, #148]	; (80020b4 <UART_Request_Status+0xac>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b04      	cmp	r3, #4
 8002024:	d825      	bhi.n	8002072 <UART_Request_Status+0x6a>
 8002026:	a201      	add	r2, pc, #4	; (adr r2, 800202c <UART_Request_Status+0x24>)
 8002028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800202c:	08002041 	.word	0x08002041
 8002030:	08002055 	.word	0x08002055
 8002034:	0800204b 	.word	0x0800204b
 8002038:	0800205f 	.word	0x0800205f
 800203c:	08002069 	.word	0x08002069
		case DV:
			// DV
			msg[2] = 'D';
 8002040:	2344      	movs	r3, #68	; 0x44
 8002042:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'V';
 8002044:	2356      	movs	r3, #86	; 0x56
 8002046:	71fb      	strb	r3, [r7, #7]
			break;
 8002048:	e014      	b.n	8002074 <UART_Request_Status+0x6c>
		case AV:
			// AV
			msg[2] = 'A';
 800204a:	2341      	movs	r3, #65	; 0x41
 800204c:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'V';
 800204e:	2356      	movs	r3, #86	; 0x56
 8002050:	71fb      	strb	r3, [r7, #7]
			break;
 8002052:	e00f      	b.n	8002074 <UART_Request_Status+0x6c>
		case DI:
			// DI
			msg[2] = 'D';
 8002054:	2344      	movs	r3, #68	; 0x44
 8002056:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'I';
 8002058:	2349      	movs	r3, #73	; 0x49
 800205a:	71fb      	strb	r3, [r7, #7]
			break;
 800205c:	e00a      	b.n	8002074 <UART_Request_Status+0x6c>
		case AI:
			// AI
			msg[2] = 'A';
 800205e:	2341      	movs	r3, #65	; 0x41
 8002060:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'I';
 8002062:	2349      	movs	r3, #73	; 0x49
 8002064:	71fb      	strb	r3, [r7, #7]
			break;
 8002066:	e005      	b.n	8002074 <UART_Request_Status+0x6c>
		case TC:
			// TC
			msg[2] = 'T';
 8002068:	2354      	movs	r3, #84	; 0x54
 800206a:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'C';
 800206c:	2343      	movs	r3, #67	; 0x43
 800206e:	71fb      	strb	r3, [r7, #7]
			break;
 8002070:	e000      	b.n	8002074 <UART_Request_Status+0x6c>
		default:
			// Problems
			break;
 8002072:	bf00      	nop
	}
	msg[5] = OutputState.Mode;
 8002074:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <UART_Request_Status+0xb0>)
 8002076:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 800207a:	727b      	strb	r3, [r7, #9]
	if(OutputState.On){
 800207c:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <UART_Request_Status+0xb0>)
 800207e:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8002082:	2b00      	cmp	r3, #0
 8002084:	d002      	beq.n	800208c <UART_Request_Status+0x84>
		msg[7] = '1';
 8002086:	2331      	movs	r3, #49	; 0x31
 8002088:	72fb      	strb	r3, [r7, #11]
 800208a:	e001      	b.n	8002090 <UART_Request_Status+0x88>
	} else {
		msg[7] = '0';
 800208c:	2330      	movs	r3, #48	; 0x30
 800208e:	72fb      	strb	r3, [r7, #11]
	}
	HAL_UART_Transmit(&huart2, msg, 11, 10);
 8002090:	1d39      	adds	r1, r7, #4
 8002092:	230a      	movs	r3, #10
 8002094:	220b      	movs	r2, #11
 8002096:	4809      	ldr	r0, [pc, #36]	; (80020bc <UART_Request_Status+0xb4>)
 8002098:	f004 f922 	bl	80062e0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 800209c:	2201      	movs	r2, #1
 800209e:	4908      	ldr	r1, [pc, #32]	; (80020c0 <UART_Request_Status+0xb8>)
 80020a0:	4806      	ldr	r0, [pc, #24]	; (80020bc <UART_Request_Status+0xb4>)
 80020a2:	f004 f9b1 	bl	8006408 <HAL_UART_Receive_IT>

}
 80020a6:	bf00      	nop
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	08007804 	.word	0x08007804
 80020b4:	20000828 	.word	0x20000828
 80020b8:	20000834 	.word	0x20000834
 80020bc:	20000ad4 	.word	0x20000ad4
 80020c0:	20000ba4 	.word	0x20000ba4

080020c4 <UART_Set_Measurement_Mode>:

void UART_Set_Measurement_Mode(uint8_t key1, uint8_t key2){
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	460a      	mov	r2, r1
 80020ce:	71fb      	strb	r3, [r7, #7]
 80020d0:	4613      	mov	r3, r2
 80020d2:	71bb      	strb	r3, [r7, #6]
	if(key1 == 'D' && key2 == 'V'){
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	2b44      	cmp	r3, #68	; 0x44
 80020d8:	d106      	bne.n	80020e8 <UART_Set_Measurement_Mode+0x24>
 80020da:	79bb      	ldrb	r3, [r7, #6]
 80020dc:	2b56      	cmp	r3, #86	; 0x56
 80020de:	d103      	bne.n	80020e8 <UART_Set_Measurement_Mode+0x24>
		// DC Voltage
		MeasurementState.Mode = DV;
 80020e0:	4b18      	ldr	r3, [pc, #96]	; (8002144 <UART_Set_Measurement_Mode+0x80>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	701a      	strb	r2, [r3, #0]
 80020e6:	e027      	b.n	8002138 <UART_Set_Measurement_Mode+0x74>
	} else if (key1 == 'A' && key2 == 'V'){
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	2b41      	cmp	r3, #65	; 0x41
 80020ec:	d106      	bne.n	80020fc <UART_Set_Measurement_Mode+0x38>
 80020ee:	79bb      	ldrb	r3, [r7, #6]
 80020f0:	2b56      	cmp	r3, #86	; 0x56
 80020f2:	d103      	bne.n	80020fc <UART_Set_Measurement_Mode+0x38>
		// AC Voltage
		MeasurementState.Mode = AV;
 80020f4:	4b13      	ldr	r3, [pc, #76]	; (8002144 <UART_Set_Measurement_Mode+0x80>)
 80020f6:	2202      	movs	r2, #2
 80020f8:	701a      	strb	r2, [r3, #0]
 80020fa:	e01d      	b.n	8002138 <UART_Set_Measurement_Mode+0x74>
	} else if (key1 == 'D' && key2 == 'I'){
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	2b44      	cmp	r3, #68	; 0x44
 8002100:	d106      	bne.n	8002110 <UART_Set_Measurement_Mode+0x4c>
 8002102:	79bb      	ldrb	r3, [r7, #6]
 8002104:	2b49      	cmp	r3, #73	; 0x49
 8002106:	d103      	bne.n	8002110 <UART_Set_Measurement_Mode+0x4c>
		// DC Current
		MeasurementState.Mode = DI;
 8002108:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <UART_Set_Measurement_Mode+0x80>)
 800210a:	2201      	movs	r2, #1
 800210c:	701a      	strb	r2, [r3, #0]
 800210e:	e013      	b.n	8002138 <UART_Set_Measurement_Mode+0x74>
	} else if (key1 == 'A' && key2 == 'I'){
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	2b41      	cmp	r3, #65	; 0x41
 8002114:	d106      	bne.n	8002124 <UART_Set_Measurement_Mode+0x60>
 8002116:	79bb      	ldrb	r3, [r7, #6]
 8002118:	2b49      	cmp	r3, #73	; 0x49
 800211a:	d103      	bne.n	8002124 <UART_Set_Measurement_Mode+0x60>
		// AC Current
		MeasurementState.Mode = AI;
 800211c:	4b09      	ldr	r3, [pc, #36]	; (8002144 <UART_Set_Measurement_Mode+0x80>)
 800211e:	2203      	movs	r2, #3
 8002120:	701a      	strb	r2, [r3, #0]
 8002122:	e009      	b.n	8002138 <UART_Set_Measurement_Mode+0x74>
	} else if (key1 == 'T' && key2 == 'C'){
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	2b54      	cmp	r3, #84	; 0x54
 8002128:	d106      	bne.n	8002138 <UART_Set_Measurement_Mode+0x74>
 800212a:	79bb      	ldrb	r3, [r7, #6]
 800212c:	2b43      	cmp	r3, #67	; 0x43
 800212e:	d103      	bne.n	8002138 <UART_Set_Measurement_Mode+0x74>
		// Temperature
		MeasurementState.Mode = TC;
 8002130:	4b04      	ldr	r3, [pc, #16]	; (8002144 <UART_Set_Measurement_Mode+0x80>)
 8002132:	2204      	movs	r2, #4
 8002134:	701a      	strb	r2, [r3, #0]
	}
}
 8002136:	e7ff      	b.n	8002138 <UART_Set_Measurement_Mode+0x74>
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	20000828 	.word	0x20000828

08002148 <UART_Set_Output_Parameter>:

void UART_Set_Output_Parameter(uint8_t *rx_array, uint8_t length)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	70fb      	strb	r3, [r7, #3]
	uint8_t param = rx_array[4];
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	791b      	ldrb	r3, [r3, #4]
 8002158:	73bb      	strb	r3, [r7, #14]
	uint8_t val0 = rx_array[6];
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	799b      	ldrb	r3, [r3, #6]
 800215e:	737b      	strb	r3, [r7, #13]
	uint8_t received_value = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	73fb      	strb	r3, [r7, #15]
	if(length > 9){
 8002164:	78fb      	ldrb	r3, [r7, #3]
 8002166:	2b09      	cmp	r3, #9
 8002168:	d92c      	bls.n	80021c4 <UART_Set_Output_Parameter+0x7c>
		uint8_t val1 = rx_array[7];
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	79db      	ldrb	r3, [r3, #7]
 800216e:	733b      	strb	r3, [r7, #12]
		uint8_t val2 = rx_array[8];
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	7a1b      	ldrb	r3, [r3, #8]
 8002174:	72fb      	strb	r3, [r7, #11]
		uint8_t val3 = rx_array[9];
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	7a5b      	ldrb	r3, [r3, #9]
 800217a:	72bb      	strb	r3, [r7, #10]
		received_value += val0*1000;
 800217c:	7b7b      	ldrb	r3, [r7, #13]
 800217e:	461a      	mov	r2, r3
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	b2da      	uxtb	r2, r3
 8002188:	7bfb      	ldrb	r3, [r7, #15]
 800218a:	4413      	add	r3, r2
 800218c:	73fb      	strb	r3, [r7, #15]
		received_value += val1*100;
 800218e:	7b3b      	ldrb	r3, [r7, #12]
 8002190:	461a      	mov	r2, r3
 8002192:	0092      	lsls	r2, r2, #2
 8002194:	4413      	add	r3, r2
 8002196:	461a      	mov	r2, r3
 8002198:	0091      	lsls	r1, r2, #2
 800219a:	461a      	mov	r2, r3
 800219c:	460b      	mov	r3, r1
 800219e:	4413      	add	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
 80021a6:	4413      	add	r3, r2
 80021a8:	73fb      	strb	r3, [r7, #15]
		received_value += val2*10;
 80021aa:	7afb      	ldrb	r3, [r7, #11]
 80021ac:	461a      	mov	r2, r3
 80021ae:	0092      	lsls	r2, r2, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	4413      	add	r3, r2
 80021ba:	73fb      	strb	r3, [r7, #15]
		received_value += val3;
 80021bc:	7bfa      	ldrb	r2, [r7, #15]
 80021be:	7abb      	ldrb	r3, [r7, #10]
 80021c0:	4413      	add	r3, r2
 80021c2:	73fb      	strb	r3, [r7, #15]
	}
	switch(param){
 80021c4:	7bbb      	ldrb	r3, [r7, #14]
 80021c6:	3b61      	subs	r3, #97	; 0x61
 80021c8:	2b13      	cmp	r3, #19
 80021ca:	d842      	bhi.n	8002252 <UART_Set_Output_Parameter+0x10a>
 80021cc:	a201      	add	r2, pc, #4	; (adr r2, 80021d4 <UART_Set_Output_Parameter+0x8c>)
 80021ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d2:	bf00      	nop
 80021d4:	0800222f 	.word	0x0800222f
 80021d8:	08002253 	.word	0x08002253
 80021dc:	08002253 	.word	0x08002253
 80021e0:	08002253 	.word	0x08002253
 80021e4:	08002253 	.word	0x08002253
 80021e8:	08002247 	.word	0x08002247
 80021ec:	08002253 	.word	0x08002253
 80021f0:	08002253 	.word	0x08002253
 80021f4:	08002253 	.word	0x08002253
 80021f8:	08002253 	.word	0x08002253
 80021fc:	08002253 	.word	0x08002253
 8002200:	08002253 	.word	0x08002253
 8002204:	08002253 	.word	0x08002253
 8002208:	08002253 	.word	0x08002253
 800220c:	0800223b 	.word	0x0800223b
 8002210:	08002253 	.word	0x08002253
 8002214:	08002253 	.word	0x08002253
 8002218:	08002253 	.word	0x08002253
 800221c:	08002253 	.word	0x08002253
 8002220:	08002225 	.word	0x08002225
		case 't':
			// Type
			OutputState.Mode = val0;
 8002224:	4a0e      	ldr	r2, [pc, #56]	; (8002260 <UART_Set_Output_Parameter+0x118>)
 8002226:	7b7b      	ldrb	r3, [r7, #13]
 8002228:	f882 3195 	strb.w	r3, [r2, #405]	; 0x195
			break;
 800222c:	e012      	b.n	8002254 <UART_Set_Output_Parameter+0x10c>
		case 'a':
			// Amplitude
			OutputState.Amplitude = received_value;
 800222e:	7bfb      	ldrb	r3, [r7, #15]
 8002230:	b29a      	uxth	r2, r3
 8002232:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <UART_Set_Output_Parameter+0x118>)
 8002234:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196
			break;
 8002238:	e00c      	b.n	8002254 <UART_Set_Output_Parameter+0x10c>
		case 'o':
			// Offset
			OutputState.Offset = received_value;
 800223a:	7bfb      	ldrb	r3, [r7, #15]
 800223c:	b29a      	uxth	r2, r3
 800223e:	4b08      	ldr	r3, [pc, #32]	; (8002260 <UART_Set_Output_Parameter+0x118>)
 8002240:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
			break;
 8002244:	e006      	b.n	8002254 <UART_Set_Output_Parameter+0x10c>
		case 'f':
			// Frequency
			OutputState.Frequency = received_value;
 8002246:	7bfb      	ldrb	r3, [r7, #15]
 8002248:	b29a      	uxth	r2, r3
 800224a:	4b05      	ldr	r3, [pc, #20]	; (8002260 <UART_Set_Output_Parameter+0x118>)
 800224c:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
			break;
 8002250:	e000      	b.n	8002254 <UART_Set_Output_Parameter+0x10c>
		case 'c':
			// Temperature
			break;
		default:
			// Problems
			break;
 8002252:	bf00      	nop
	}
}
 8002254:	bf00      	nop
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	20000834 	.word	0x20000834

08002264 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002264:	f8df d034 	ldr.w	sp, [pc, #52]	; 800229c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002268:	480d      	ldr	r0, [pc, #52]	; (80022a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800226a:	490e      	ldr	r1, [pc, #56]	; (80022a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800226c:	4a0e      	ldr	r2, [pc, #56]	; (80022a8 <LoopForever+0xe>)
  movs r3, #0
 800226e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002270:	e002      	b.n	8002278 <LoopCopyDataInit>

08002272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002276:	3304      	adds	r3, #4

08002278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800227a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800227c:	d3f9      	bcc.n	8002272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800227e:	4a0b      	ldr	r2, [pc, #44]	; (80022ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002280:	4c0b      	ldr	r4, [pc, #44]	; (80022b0 <LoopForever+0x16>)
  movs r3, #0
 8002282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002284:	e001      	b.n	800228a <LoopFillZerobss>

08002286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002288:	3204      	adds	r2, #4

0800228a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800228a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800228c:	d3fb      	bcc.n	8002286 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800228e:	f7ff fc89 	bl	8001ba4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002292:	f005 fa41 	bl	8007718 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002296:	f7fe feab 	bl	8000ff0 <main>

0800229a <LoopForever>:

LoopForever:
    b LoopForever
 800229a:	e7fe      	b.n	800229a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800229c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80022a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022a4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80022a8:	08007850 	.word	0x08007850
  ldr r2, =_sbss
 80022ac:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80022b0:	20000bac 	.word	0x20000bac

080022b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022b4:	e7fe      	b.n	80022b4 <ADC1_2_IRQHandler>
	...

080022b8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022bc:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <HAL_Init+0x28>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a07      	ldr	r2, [pc, #28]	; (80022e0 <HAL_Init+0x28>)
 80022c2:	f043 0310 	orr.w	r3, r3, #16
 80022c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022c8:	2003      	movs	r0, #3
 80022ca:	f001 faff 	bl	80038cc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ce:	2000      	movs	r0, #0
 80022d0:	f000 f808 	bl	80022e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022d4:	f7ff fa96 	bl	8001804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40022000 	.word	0x40022000

080022e4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022ec:	4b12      	ldr	r3, [pc, #72]	; (8002338 <HAL_InitTick+0x54>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4b12      	ldr	r3, [pc, #72]	; (800233c <HAL_InitTick+0x58>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	4619      	mov	r1, r3
 80022f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80022fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002302:	4618      	mov	r0, r3
 8002304:	f001 fb17 	bl	8003936 <HAL_SYSTICK_Config>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e00e      	b.n	8002330 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b0f      	cmp	r3, #15
 8002316:	d80a      	bhi.n	800232e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002318:	2200      	movs	r2, #0
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	f04f 30ff 	mov.w	r0, #4294967295
 8002320:	f001 fadf 	bl	80038e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002324:	4a06      	ldr	r2, [pc, #24]	; (8002340 <HAL_InitTick+0x5c>)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800232a:	2300      	movs	r3, #0
 800232c:	e000      	b.n	8002330 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
}
 8002330:	4618      	mov	r0, r3
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000010 	.word	0x20000010
 800233c:	20000018 	.word	0x20000018
 8002340:	20000014 	.word	0x20000014

08002344 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_IncTick+0x20>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	461a      	mov	r2, r3
 800234e:	4b06      	ldr	r3, [pc, #24]	; (8002368 <HAL_IncTick+0x24>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4413      	add	r3, r2
 8002354:	4a04      	ldr	r2, [pc, #16]	; (8002368 <HAL_IncTick+0x24>)
 8002356:	6013      	str	r3, [r2, #0]
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	20000018 	.word	0x20000018
 8002368:	20000ba8 	.word	0x20000ba8

0800236c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002370:	4b03      	ldr	r3, [pc, #12]	; (8002380 <HAL_GetTick+0x14>)
 8002372:	681b      	ldr	r3, [r3, #0]
}
 8002374:	4618      	mov	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	20000ba8 	.word	0x20000ba8

08002384 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800238c:	f7ff ffee 	bl	800236c <HAL_GetTick>
 8002390:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800239c:	d005      	beq.n	80023aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800239e:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <HAL_Delay+0x40>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4413      	add	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80023aa:	bf00      	nop
 80023ac:	f7ff ffde 	bl	800236c <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d8f7      	bhi.n	80023ac <HAL_Delay+0x28>
  {
  }
}
 80023bc:	bf00      	nop
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	20000018 	.word	0x20000018

080023c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b09a      	sub	sp, #104	; 0x68
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80023da:	2300      	movs	r3, #0
 80023dc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e1e3      	b.n	80027b0 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	f003 0310 	and.w	r3, r3, #16
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d176      	bne.n	80024e8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d152      	bne.n	80024a8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff fa15 	bl	800184c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d13b      	bne.n	80024a8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f001 f861 	bl	80034f8 <ADC_Disable>
 8002436:	4603      	mov	r3, r0
 8002438:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	f003 0310 	and.w	r3, r3, #16
 8002444:	2b00      	cmp	r3, #0
 8002446:	d12f      	bne.n	80024a8 <HAL_ADC_Init+0xe0>
 8002448:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800244c:	2b00      	cmp	r3, #0
 800244e:	d12b      	bne.n	80024a8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002454:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002458:	f023 0302 	bic.w	r3, r3, #2
 800245c:	f043 0202 	orr.w	r2, r3, #2
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002472:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002482:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002484:	4b92      	ldr	r3, [pc, #584]	; (80026d0 <HAL_ADC_Init+0x308>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a92      	ldr	r2, [pc, #584]	; (80026d4 <HAL_ADC_Init+0x30c>)
 800248a:	fba2 2303 	umull	r2, r3, r2, r3
 800248e:	0c9a      	lsrs	r2, r3, #18
 8002490:	4613      	mov	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800249a:	e002      	b.n	80024a2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	3b01      	subs	r3, #1
 80024a0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1f9      	bne.n	800249c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d007      	beq.n	80024c6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80024c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024c4:	d110      	bne.n	80024e8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f023 0312 	bic.w	r3, r3, #18
 80024ce:	f043 0210 	orr.w	r2, r3, #16
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024da:	f043 0201 	orr.w	r2, r3, #1
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	f003 0310 	and.w	r3, r3, #16
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f040 8150 	bne.w	8002796 <HAL_ADC_Init+0x3ce>
 80024f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f040 814b 	bne.w	8002796 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800250a:	2b00      	cmp	r3, #0
 800250c:	f040 8143 	bne.w	8002796 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002518:	f043 0202 	orr.w	r2, r3, #2
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002528:	d004      	beq.n	8002534 <HAL_ADC_Init+0x16c>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a6a      	ldr	r2, [pc, #424]	; (80026d8 <HAL_ADC_Init+0x310>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d101      	bne.n	8002538 <HAL_ADC_Init+0x170>
 8002534:	4b69      	ldr	r3, [pc, #420]	; (80026dc <HAL_ADC_Init+0x314>)
 8002536:	e000      	b.n	800253a <HAL_ADC_Init+0x172>
 8002538:	4b69      	ldr	r3, [pc, #420]	; (80026e0 <HAL_ADC_Init+0x318>)
 800253a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002544:	d102      	bne.n	800254c <HAL_ADC_Init+0x184>
 8002546:	4b64      	ldr	r3, [pc, #400]	; (80026d8 <HAL_ADC_Init+0x310>)
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	e01a      	b.n	8002582 <HAL_ADC_Init+0x1ba>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a61      	ldr	r2, [pc, #388]	; (80026d8 <HAL_ADC_Init+0x310>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d103      	bne.n	800255e <HAL_ADC_Init+0x196>
 8002556:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	e011      	b.n	8002582 <HAL_ADC_Init+0x1ba>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a60      	ldr	r2, [pc, #384]	; (80026e4 <HAL_ADC_Init+0x31c>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d102      	bne.n	800256e <HAL_ADC_Init+0x1a6>
 8002568:	4b5f      	ldr	r3, [pc, #380]	; (80026e8 <HAL_ADC_Init+0x320>)
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	e009      	b.n	8002582 <HAL_ADC_Init+0x1ba>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a5d      	ldr	r2, [pc, #372]	; (80026e8 <HAL_ADC_Init+0x320>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d102      	bne.n	800257e <HAL_ADC_Init+0x1b6>
 8002578:	4b5a      	ldr	r3, [pc, #360]	; (80026e4 <HAL_ADC_Init+0x31c>)
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	e001      	b.n	8002582 <HAL_ADC_Init+0x1ba>
 800257e:	2300      	movs	r3, #0
 8002580:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	2b01      	cmp	r3, #1
 800258e:	d108      	bne.n	80025a2 <HAL_ADC_Init+0x1da>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b01      	cmp	r3, #1
 800259c:	d101      	bne.n	80025a2 <HAL_ADC_Init+0x1da>
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <HAL_ADC_Init+0x1dc>
 80025a2:	2300      	movs	r3, #0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d11c      	bne.n	80025e2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80025a8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d010      	beq.n	80025d0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d107      	bne.n	80025ca <HAL_ADC_Init+0x202>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d101      	bne.n	80025ca <HAL_ADC_Init+0x202>
 80025c6:	2301      	movs	r3, #1
 80025c8:	e000      	b.n	80025cc <HAL_ADC_Init+0x204>
 80025ca:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d108      	bne.n	80025e2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80025d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	431a      	orrs	r2, r3
 80025de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025e0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	7e5b      	ldrb	r3, [r3, #25]
 80025e6:	035b      	lsls	r3, r3, #13
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025ec:	2a01      	cmp	r2, #1
 80025ee:	d002      	beq.n	80025f6 <HAL_ADC_Init+0x22e>
 80025f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025f4:	e000      	b.n	80025f8 <HAL_ADC_Init+0x230>
 80025f6:	2200      	movs	r2, #0
 80025f8:	431a      	orrs	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	431a      	orrs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	4313      	orrs	r3, r2
 8002606:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002608:	4313      	orrs	r3, r2
 800260a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d11b      	bne.n	800264e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	7e5b      	ldrb	r3, [r3, #25]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d109      	bne.n	8002632 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	3b01      	subs	r3, #1
 8002624:	045a      	lsls	r2, r3, #17
 8002626:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002628:	4313      	orrs	r3, r2
 800262a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800262e:	663b      	str	r3, [r7, #96]	; 0x60
 8002630:	e00d      	b.n	800264e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800263a:	f043 0220 	orr.w	r2, r3, #32
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	f043 0201 	orr.w	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002652:	2b01      	cmp	r3, #1
 8002654:	d054      	beq.n	8002700 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a22      	ldr	r2, [pc, #136]	; (80026e4 <HAL_ADC_Init+0x31c>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d004      	beq.n	800266a <HAL_ADC_Init+0x2a2>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a20      	ldr	r2, [pc, #128]	; (80026e8 <HAL_ADC_Init+0x320>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d140      	bne.n	80026ec <HAL_ADC_Init+0x324>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002672:	d02a      	beq.n	80026ca <HAL_ADC_Init+0x302>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002678:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800267c:	d022      	beq.n	80026c4 <HAL_ADC_Init+0x2fc>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002682:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002686:	d01a      	beq.n	80026be <HAL_ADC_Init+0x2f6>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268c:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8002690:	d012      	beq.n	80026b8 <HAL_ADC_Init+0x2f0>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002696:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 800269a:	d00a      	beq.n	80026b2 <HAL_ADC_Init+0x2ea>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a0:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80026a4:	d002      	beq.n	80026ac <HAL_ADC_Init+0x2e4>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026aa:	e023      	b.n	80026f4 <HAL_ADC_Init+0x32c>
 80026ac:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80026b0:	e020      	b.n	80026f4 <HAL_ADC_Init+0x32c>
 80026b2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80026b6:	e01d      	b.n	80026f4 <HAL_ADC_Init+0x32c>
 80026b8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80026bc:	e01a      	b.n	80026f4 <HAL_ADC_Init+0x32c>
 80026be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026c2:	e017      	b.n	80026f4 <HAL_ADC_Init+0x32c>
 80026c4:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80026c8:	e014      	b.n	80026f4 <HAL_ADC_Init+0x32c>
 80026ca:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80026ce:	e011      	b.n	80026f4 <HAL_ADC_Init+0x32c>
 80026d0:	20000010 	.word	0x20000010
 80026d4:	431bde83 	.word	0x431bde83
 80026d8:	50000100 	.word	0x50000100
 80026dc:	50000300 	.word	0x50000300
 80026e0:	50000700 	.word	0x50000700
 80026e4:	50000400 	.word	0x50000400
 80026e8:	50000500 	.word	0x50000500
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80026f8:	4313      	orrs	r3, r2
 80026fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80026fc:	4313      	orrs	r3, r2
 80026fe:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 030c 	and.w	r3, r3, #12
 800270a:	2b00      	cmp	r3, #0
 800270c:	d114      	bne.n	8002738 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6812      	ldr	r2, [r2, #0]
 8002718:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800271c:	f023 0302 	bic.w	r3, r3, #2
 8002720:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	7e1b      	ldrb	r3, [r3, #24]
 8002726:	039a      	lsls	r2, r3, #14
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	4313      	orrs	r3, r2
 8002732:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002734:	4313      	orrs	r3, r2
 8002736:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	4b1e      	ldr	r3, [pc, #120]	; (80027b8 <HAL_ADC_Init+0x3f0>)
 8002740:	4013      	ands	r3, r2
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	6812      	ldr	r2, [r2, #0]
 8002746:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002748:	430b      	orrs	r3, r1
 800274a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d10c      	bne.n	800276e <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	f023 010f 	bic.w	r1, r3, #15
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	1e5a      	subs	r2, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	631a      	str	r2, [r3, #48]	; 0x30
 800276c:	e007      	b.n	800277e <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 020f 	bic.w	r2, r2, #15
 800277c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	f023 0303 	bic.w	r3, r3, #3
 800278c:	f043 0201 	orr.w	r2, r3, #1
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	641a      	str	r2, [r3, #64]	; 0x40
 8002794:	e00a      	b.n	80027ac <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	f023 0312 	bic.w	r3, r3, #18
 800279e:	f043 0210 	orr.w	r2, r3, #16
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80027a6:	2301      	movs	r3, #1
 80027a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80027ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3768      	adds	r7, #104	; 0x68
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	fff0c007 	.word	0xfff0c007

080027bc <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f040 80f9 	bne.w	80029ca <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d101      	bne.n	80027e6 <HAL_ADC_Start+0x2a>
 80027e2:	2302      	movs	r3, #2
 80027e4:	e0f4      	b.n	80029d0 <HAL_ADC_Start+0x214>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 fe1e 	bl	8003430 <ADC_Enable>
 80027f4:	4603      	mov	r3, r0
 80027f6:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f040 80e0 	bne.w	80029c0 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002808:	f023 0301 	bic.w	r3, r3, #1
 800280c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800281c:	d004      	beq.n	8002828 <HAL_ADC_Start+0x6c>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a6d      	ldr	r2, [pc, #436]	; (80029d8 <HAL_ADC_Start+0x21c>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d106      	bne.n	8002836 <HAL_ADC_Start+0x7a>
 8002828:	4b6c      	ldr	r3, [pc, #432]	; (80029dc <HAL_ADC_Start+0x220>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 031f 	and.w	r3, r3, #31
 8002830:	2b00      	cmp	r3, #0
 8002832:	d010      	beq.n	8002856 <HAL_ADC_Start+0x9a>
 8002834:	e005      	b.n	8002842 <HAL_ADC_Start+0x86>
 8002836:	4b6a      	ldr	r3, [pc, #424]	; (80029e0 <HAL_ADC_Start+0x224>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 031f 	and.w	r3, r3, #31
 800283e:	2b00      	cmp	r3, #0
 8002840:	d009      	beq.n	8002856 <HAL_ADC_Start+0x9a>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800284a:	d004      	beq.n	8002856 <HAL_ADC_Start+0x9a>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a64      	ldr	r2, [pc, #400]	; (80029e4 <HAL_ADC_Start+0x228>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d115      	bne.n	8002882 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d036      	beq.n	80028de <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002874:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002878:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002880:	e02d      	b.n	80028de <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002896:	d004      	beq.n	80028a2 <HAL_ADC_Start+0xe6>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a4e      	ldr	r2, [pc, #312]	; (80029d8 <HAL_ADC_Start+0x21c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d10a      	bne.n	80028b8 <HAL_ADC_Start+0xfc>
 80028a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	bf14      	ite	ne
 80028b0:	2301      	movne	r3, #1
 80028b2:	2300      	moveq	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	e008      	b.n	80028ca <HAL_ADC_Start+0x10e>
 80028b8:	4b4a      	ldr	r3, [pc, #296]	; (80029e4 <HAL_ADC_Start+0x228>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	bf14      	ite	ne
 80028c4:	2301      	movne	r3, #1
 80028c6:	2300      	moveq	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d007      	beq.n	80028de <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ea:	d106      	bne.n	80028fa <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f0:	f023 0206 	bic.w	r2, r3, #6
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	645a      	str	r2, [r3, #68]	; 0x44
 80028f8:	e002      	b.n	8002900 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	221c      	movs	r2, #28
 800290e:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002918:	d004      	beq.n	8002924 <HAL_ADC_Start+0x168>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a2e      	ldr	r2, [pc, #184]	; (80029d8 <HAL_ADC_Start+0x21c>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d106      	bne.n	8002932 <HAL_ADC_Start+0x176>
 8002924:	4b2d      	ldr	r3, [pc, #180]	; (80029dc <HAL_ADC_Start+0x220>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f003 031f 	and.w	r3, r3, #31
 800292c:	2b00      	cmp	r3, #0
 800292e:	d03e      	beq.n	80029ae <HAL_ADC_Start+0x1f2>
 8002930:	e005      	b.n	800293e <HAL_ADC_Start+0x182>
 8002932:	4b2b      	ldr	r3, [pc, #172]	; (80029e0 <HAL_ADC_Start+0x224>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 031f 	and.w	r3, r3, #31
 800293a:	2b00      	cmp	r3, #0
 800293c:	d037      	beq.n	80029ae <HAL_ADC_Start+0x1f2>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002946:	d004      	beq.n	8002952 <HAL_ADC_Start+0x196>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a22      	ldr	r2, [pc, #136]	; (80029d8 <HAL_ADC_Start+0x21c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d106      	bne.n	8002960 <HAL_ADC_Start+0x1a4>
 8002952:	4b22      	ldr	r3, [pc, #136]	; (80029dc <HAL_ADC_Start+0x220>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 031f 	and.w	r3, r3, #31
 800295a:	2b05      	cmp	r3, #5
 800295c:	d027      	beq.n	80029ae <HAL_ADC_Start+0x1f2>
 800295e:	e005      	b.n	800296c <HAL_ADC_Start+0x1b0>
 8002960:	4b1f      	ldr	r3, [pc, #124]	; (80029e0 <HAL_ADC_Start+0x224>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 031f 	and.w	r3, r3, #31
 8002968:	2b05      	cmp	r3, #5
 800296a:	d020      	beq.n	80029ae <HAL_ADC_Start+0x1f2>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002974:	d004      	beq.n	8002980 <HAL_ADC_Start+0x1c4>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a17      	ldr	r2, [pc, #92]	; (80029d8 <HAL_ADC_Start+0x21c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d106      	bne.n	800298e <HAL_ADC_Start+0x1d2>
 8002980:	4b16      	ldr	r3, [pc, #88]	; (80029dc <HAL_ADC_Start+0x220>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 031f 	and.w	r3, r3, #31
 8002988:	2b09      	cmp	r3, #9
 800298a:	d010      	beq.n	80029ae <HAL_ADC_Start+0x1f2>
 800298c:	e005      	b.n	800299a <HAL_ADC_Start+0x1de>
 800298e:	4b14      	ldr	r3, [pc, #80]	; (80029e0 <HAL_ADC_Start+0x224>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 031f 	and.w	r3, r3, #31
 8002996:	2b09      	cmp	r3, #9
 8002998:	d009      	beq.n	80029ae <HAL_ADC_Start+0x1f2>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029a2:	d004      	beq.n	80029ae <HAL_ADC_Start+0x1f2>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a0e      	ldr	r2, [pc, #56]	; (80029e4 <HAL_ADC_Start+0x228>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d10f      	bne.n	80029ce <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f042 0204 	orr.w	r2, r2, #4
 80029bc:	609a      	str	r2, [r3, #8]
 80029be:	e006      	b.n	80029ce <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80029c8:	e001      	b.n	80029ce <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80029ca:	2302      	movs	r3, #2
 80029cc:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	50000100 	.word	0x50000100
 80029dc:	50000300 	.word	0x50000300
 80029e0:	50000700 	.word	0x50000700
 80029e4:	50000400 	.word	0x50000400

080029e8 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d101      	bne.n	8002a02 <HAL_ADC_Stop+0x1a>
 80029fe:	2302      	movs	r3, #2
 8002a00:	e023      	b.n	8002a4a <HAL_ADC_Stop+0x62>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002a0a:	216c      	movs	r1, #108	; 0x6c
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 fdd9 	bl	80035c4 <ADC_ConversionStop>
 8002a12:	4603      	mov	r3, r0
 8002a14:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d111      	bne.n	8002a40 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 fd6b 	bl	80034f8 <ADC_Disable>
 8002a22:	4603      	mov	r3, r0
 8002a24:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002a26:	7bfb      	ldrb	r3, [r7, #15]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d109      	bne.n	8002a40 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a34:	f023 0301 	bic.w	r3, r3, #1
 8002a38:	f043 0201 	orr.w	r2, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
	...

08002a54 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	d102      	bne.n	8002a70 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002a6a:	2308      	movs	r3, #8
 8002a6c:	617b      	str	r3, [r7, #20]
 8002a6e:	e03a      	b.n	8002ae6 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a78:	d004      	beq.n	8002a84 <HAL_ADC_PollForConversion+0x30>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a72      	ldr	r2, [pc, #456]	; (8002c48 <HAL_ADC_PollForConversion+0x1f4>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d101      	bne.n	8002a88 <HAL_ADC_PollForConversion+0x34>
 8002a84:	4b71      	ldr	r3, [pc, #452]	; (8002c4c <HAL_ADC_PollForConversion+0x1f8>)
 8002a86:	e000      	b.n	8002a8a <HAL_ADC_PollForConversion+0x36>
 8002a88:	4b71      	ldr	r3, [pc, #452]	; (8002c50 <HAL_ADC_PollForConversion+0x1fc>)
 8002a8a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 031f 	and.w	r3, r3, #31
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d112      	bne.n	8002abe <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d11d      	bne.n	8002ae2 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f043 0220 	orr.w	r2, r3, #32
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e0bf      	b.n	8002c3e <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00b      	beq.n	8002ae2 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	f043 0220 	orr.w	r2, r3, #32
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e0ad      	b.n	8002c3e <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002ae2:	230c      	movs	r3, #12
 8002ae4:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aee:	d004      	beq.n	8002afa <HAL_ADC_PollForConversion+0xa6>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a54      	ldr	r2, [pc, #336]	; (8002c48 <HAL_ADC_PollForConversion+0x1f4>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d106      	bne.n	8002b08 <HAL_ADC_PollForConversion+0xb4>
 8002afa:	4b54      	ldr	r3, [pc, #336]	; (8002c4c <HAL_ADC_PollForConversion+0x1f8>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 031f 	and.w	r3, r3, #31
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d010      	beq.n	8002b28 <HAL_ADC_PollForConversion+0xd4>
 8002b06:	e005      	b.n	8002b14 <HAL_ADC_PollForConversion+0xc0>
 8002b08:	4b51      	ldr	r3, [pc, #324]	; (8002c50 <HAL_ADC_PollForConversion+0x1fc>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 031f 	and.w	r3, r3, #31
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d009      	beq.n	8002b28 <HAL_ADC_PollForConversion+0xd4>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b1c:	d004      	beq.n	8002b28 <HAL_ADC_PollForConversion+0xd4>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a4c      	ldr	r2, [pc, #304]	; (8002c54 <HAL_ADC_PollForConversion+0x200>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d104      	bne.n	8002b32 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	e00f      	b.n	8002b52 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b3a:	d004      	beq.n	8002b46 <HAL_ADC_PollForConversion+0xf2>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a41      	ldr	r2, [pc, #260]	; (8002c48 <HAL_ADC_PollForConversion+0x1f4>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d102      	bne.n	8002b4c <HAL_ADC_PollForConversion+0xf8>
 8002b46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b4a:	e000      	b.n	8002b4e <HAL_ADC_PollForConversion+0xfa>
 8002b4c:	4b41      	ldr	r3, [pc, #260]	; (8002c54 <HAL_ADC_PollForConversion+0x200>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002b52:	f7ff fc0b 	bl	800236c <HAL_GetTick>
 8002b56:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002b58:	e021      	b.n	8002b9e <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b60:	d01d      	beq.n	8002b9e <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d007      	beq.n	8002b78 <HAL_ADC_PollForConversion+0x124>
 8002b68:	f7ff fc00 	bl	800236c <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d212      	bcs.n	8002b9e <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	4013      	ands	r3, r2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10b      	bne.n	8002b9e <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	f043 0204 	orr.w	r2, r3, #4
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e04f      	b.n	8002c3e <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0d6      	beq.n	8002b5a <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d131      	bne.n	8002c2a <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d12c      	bne.n	8002c2a <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b08      	cmp	r3, #8
 8002bdc:	d125      	bne.n	8002c2a <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d112      	bne.n	8002c12 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d112      	bne.n	8002c2a <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	f043 0201 	orr.w	r2, r3, #1
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	641a      	str	r2, [r3, #64]	; 0x40
 8002c10:	e00b      	b.n	8002c2a <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	f043 0220 	orr.w	r2, r3, #32
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c22:	f043 0201 	orr.w	r2, r3, #1
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d103      	bne.n	8002c3c <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	50000100 	.word	0x50000100
 8002c4c:	50000300 	.word	0x50000300
 8002c50:	50000700 	.word	0x50000700
 8002c54:	50000400 	.word	0x50000400

08002c58 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
	...

08002c74 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b09b      	sub	sp, #108	; 0x6c
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d101      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x22>
 8002c92:	2302      	movs	r3, #2
 8002c94:	e2cb      	b.n	800322e <HAL_ADC_ConfigChannel+0x5ba>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f040 82af 	bne.w	800320c <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d81c      	bhi.n	8002cf0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	4413      	add	r3, r2
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	461a      	mov	r2, r3
 8002cca:	231f      	movs	r3, #31
 8002ccc:	4093      	lsls	r3, r2
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	4019      	ands	r1, r3
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	6818      	ldr	r0, [r3, #0]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	4413      	add	r3, r2
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	631a      	str	r2, [r3, #48]	; 0x30
 8002cee:	e063      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b09      	cmp	r3, #9
 8002cf6:	d81e      	bhi.n	8002d36 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	4613      	mov	r3, r2
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	4413      	add	r3, r2
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	3b1e      	subs	r3, #30
 8002d0c:	221f      	movs	r2, #31
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	43db      	mvns	r3, r3
 8002d14:	4019      	ands	r1, r3
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	4413      	add	r3, r2
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	3b1e      	subs	r3, #30
 8002d28:	fa00 f203 	lsl.w	r2, r0, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	635a      	str	r2, [r3, #52]	; 0x34
 8002d34:	e040      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b0e      	cmp	r3, #14
 8002d3c:	d81e      	bhi.n	8002d7c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	4413      	add	r3, r2
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	3b3c      	subs	r3, #60	; 0x3c
 8002d52:	221f      	movs	r2, #31
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	4019      	ands	r1, r3
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	6818      	ldr	r0, [r3, #0]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	4613      	mov	r3, r2
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	4413      	add	r3, r2
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	3b3c      	subs	r3, #60	; 0x3c
 8002d6e:	fa00 f203 	lsl.w	r2, r0, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	639a      	str	r2, [r3, #56]	; 0x38
 8002d7a:	e01d      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	4413      	add	r3, r2
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	3b5a      	subs	r3, #90	; 0x5a
 8002d90:	221f      	movs	r2, #31
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	43db      	mvns	r3, r3
 8002d98:	4019      	ands	r1, r3
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	6818      	ldr	r0, [r3, #0]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	4613      	mov	r3, r2
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	4413      	add	r3, r2
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	3b5a      	subs	r3, #90	; 0x5a
 8002dac:	fa00 f203 	lsl.w	r2, r0, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 030c 	and.w	r3, r3, #12
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f040 80e5 	bne.w	8002f92 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2b09      	cmp	r3, #9
 8002dce:	d91c      	bls.n	8002e0a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6999      	ldr	r1, [r3, #24]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	4413      	add	r3, r2
 8002de0:	3b1e      	subs	r3, #30
 8002de2:	2207      	movs	r2, #7
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	43db      	mvns	r3, r3
 8002dea:	4019      	ands	r1, r3
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	6898      	ldr	r0, [r3, #8]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	4613      	mov	r3, r2
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	4413      	add	r3, r2
 8002dfa:	3b1e      	subs	r3, #30
 8002dfc:	fa00 f203 	lsl.w	r2, r0, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	619a      	str	r2, [r3, #24]
 8002e08:	e019      	b.n	8002e3e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6959      	ldr	r1, [r3, #20]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	4613      	mov	r3, r2
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	4413      	add	r3, r2
 8002e1a:	2207      	movs	r2, #7
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	43db      	mvns	r3, r3
 8002e22:	4019      	ands	r1, r3
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	6898      	ldr	r0, [r3, #8]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	4413      	add	r3, r2
 8002e32:	fa00 f203 	lsl.w	r2, r0, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	695a      	ldr	r2, [r3, #20]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	08db      	lsrs	r3, r3, #3
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	2b03      	cmp	r3, #3
 8002e5e:	d84f      	bhi.n	8002f00 <HAL_ADC_ConfigChannel+0x28c>
 8002e60:	a201      	add	r2, pc, #4	; (adr r2, 8002e68 <HAL_ADC_ConfigChannel+0x1f4>)
 8002e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e66:	bf00      	nop
 8002e68:	08002e79 	.word	0x08002e79
 8002e6c:	08002e9b 	.word	0x08002e9b
 8002e70:	08002ebd 	.word	0x08002ebd
 8002e74:	08002edf 	.word	0x08002edf
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e7e:	4b9f      	ldr	r3, [pc, #636]	; (80030fc <HAL_ADC_ConfigChannel+0x488>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	6812      	ldr	r2, [r2, #0]
 8002e86:	0691      	lsls	r1, r2, #26
 8002e88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e96:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002e98:	e07e      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ea0:	4b96      	ldr	r3, [pc, #600]	; (80030fc <HAL_ADC_ConfigChannel+0x488>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	0691      	lsls	r1, r2, #26
 8002eaa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002eac:	430a      	orrs	r2, r1
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002eb8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002eba:	e06d      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002ec2:	4b8e      	ldr	r3, [pc, #568]	; (80030fc <HAL_ADC_ConfigChannel+0x488>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	6812      	ldr	r2, [r2, #0]
 8002eca:	0691      	lsls	r1, r2, #26
 8002ecc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002eda:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002edc:	e05c      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002ee4:	4b85      	ldr	r3, [pc, #532]	; (80030fc <HAL_ADC_ConfigChannel+0x488>)
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	6812      	ldr	r2, [r2, #0]
 8002eec:	0691      	lsls	r1, r2, #26
 8002eee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002efc:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002efe:	e04b      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	069b      	lsls	r3, r3, #26
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d107      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f22:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	069b      	lsls	r3, r3, #26
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d107      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f46:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	069b      	lsls	r3, r3, #26
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d107      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f6a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	069b      	lsls	r3, r3, #26
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d10a      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f8e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002f90:	e001      	b.n	8002f96 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002f92:	bf00      	nop
 8002f94:	e000      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002f96:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d108      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x344>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x344>
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <HAL_ADC_ConfigChannel+0x346>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f040 8131 	bne.w	8003222 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d00f      	beq.n	8002fe8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43da      	mvns	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	400a      	ands	r2, r1
 8002fe2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002fe6:	e049      	b.n	800307c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	409a      	lsls	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2b09      	cmp	r3, #9
 8003008:	d91c      	bls.n	8003044 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6999      	ldr	r1, [r3, #24]
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	4613      	mov	r3, r2
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	4413      	add	r3, r2
 800301a:	3b1b      	subs	r3, #27
 800301c:	2207      	movs	r2, #7
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	43db      	mvns	r3, r3
 8003024:	4019      	ands	r1, r3
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	6898      	ldr	r0, [r3, #8]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	4613      	mov	r3, r2
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	4413      	add	r3, r2
 8003034:	3b1b      	subs	r3, #27
 8003036:	fa00 f203 	lsl.w	r2, r0, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	430a      	orrs	r2, r1
 8003040:	619a      	str	r2, [r3, #24]
 8003042:	e01b      	b.n	800307c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6959      	ldr	r1, [r3, #20]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	1c5a      	adds	r2, r3, #1
 8003050:	4613      	mov	r3, r2
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	4413      	add	r3, r2
 8003056:	2207      	movs	r2, #7
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	43db      	mvns	r3, r3
 800305e:	4019      	ands	r1, r3
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	6898      	ldr	r0, [r3, #8]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	4613      	mov	r3, r2
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	4413      	add	r3, r2
 8003070:	fa00 f203 	lsl.w	r2, r0, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003084:	d004      	beq.n	8003090 <HAL_ADC_ConfigChannel+0x41c>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a1d      	ldr	r2, [pc, #116]	; (8003100 <HAL_ADC_ConfigChannel+0x48c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d101      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x420>
 8003090:	4b1c      	ldr	r3, [pc, #112]	; (8003104 <HAL_ADC_ConfigChannel+0x490>)
 8003092:	e000      	b.n	8003096 <HAL_ADC_ConfigChannel+0x422>
 8003094:	4b1c      	ldr	r3, [pc, #112]	; (8003108 <HAL_ADC_ConfigChannel+0x494>)
 8003096:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b10      	cmp	r3, #16
 800309e:	d105      	bne.n	80030ac <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80030a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d015      	beq.n	80030d8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80030b0:	2b11      	cmp	r3, #17
 80030b2:	d105      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80030b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00b      	beq.n	80030d8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80030c4:	2b12      	cmp	r3, #18
 80030c6:	f040 80ac 	bne.w	8003222 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80030ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f040 80a5 	bne.w	8003222 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030e0:	d102      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x474>
 80030e2:	4b07      	ldr	r3, [pc, #28]	; (8003100 <HAL_ADC_ConfigChannel+0x48c>)
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	e023      	b.n	8003130 <HAL_ADC_ConfigChannel+0x4bc>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a04      	ldr	r2, [pc, #16]	; (8003100 <HAL_ADC_ConfigChannel+0x48c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d10c      	bne.n	800310c <HAL_ADC_ConfigChannel+0x498>
 80030f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	e01a      	b.n	8003130 <HAL_ADC_ConfigChannel+0x4bc>
 80030fa:	bf00      	nop
 80030fc:	83fff000 	.word	0x83fff000
 8003100:	50000100 	.word	0x50000100
 8003104:	50000300 	.word	0x50000300
 8003108:	50000700 	.word	0x50000700
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a4a      	ldr	r2, [pc, #296]	; (800323c <HAL_ADC_ConfigChannel+0x5c8>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d102      	bne.n	800311c <HAL_ADC_ConfigChannel+0x4a8>
 8003116:	4b4a      	ldr	r3, [pc, #296]	; (8003240 <HAL_ADC_ConfigChannel+0x5cc>)
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	e009      	b.n	8003130 <HAL_ADC_ConfigChannel+0x4bc>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a47      	ldr	r2, [pc, #284]	; (8003240 <HAL_ADC_ConfigChannel+0x5cc>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d102      	bne.n	800312c <HAL_ADC_ConfigChannel+0x4b8>
 8003126:	4b45      	ldr	r3, [pc, #276]	; (800323c <HAL_ADC_ConfigChannel+0x5c8>)
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	e001      	b.n	8003130 <HAL_ADC_ConfigChannel+0x4bc>
 800312c:	2300      	movs	r3, #0
 800312e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	2b01      	cmp	r3, #1
 800313c:	d108      	bne.n	8003150 <HAL_ADC_ConfigChannel+0x4dc>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b01      	cmp	r3, #1
 800314a:	d101      	bne.n	8003150 <HAL_ADC_ConfigChannel+0x4dc>
 800314c:	2301      	movs	r3, #1
 800314e:	e000      	b.n	8003152 <HAL_ADC_ConfigChannel+0x4de>
 8003150:	2300      	movs	r3, #0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d150      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003156:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003158:	2b00      	cmp	r3, #0
 800315a:	d010      	beq.n	800317e <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f003 0303 	and.w	r3, r3, #3
 8003164:	2b01      	cmp	r3, #1
 8003166:	d107      	bne.n	8003178 <HAL_ADC_ConfigChannel+0x504>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b01      	cmp	r3, #1
 8003172:	d101      	bne.n	8003178 <HAL_ADC_ConfigChannel+0x504>
 8003174:	2301      	movs	r3, #1
 8003176:	e000      	b.n	800317a <HAL_ADC_ConfigChannel+0x506>
 8003178:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800317a:	2b00      	cmp	r3, #0
 800317c:	d13c      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2b10      	cmp	r3, #16
 8003184:	d11d      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x54e>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800318e:	d118      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003190:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003198:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800319a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800319c:	4b29      	ldr	r3, [pc, #164]	; (8003244 <HAL_ADC_ConfigChannel+0x5d0>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a29      	ldr	r2, [pc, #164]	; (8003248 <HAL_ADC_ConfigChannel+0x5d4>)
 80031a2:	fba2 2303 	umull	r2, r3, r2, r3
 80031a6:	0c9a      	lsrs	r2, r3, #18
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031b2:	e002      	b.n	80031ba <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1f9      	bne.n	80031b4 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80031c0:	e02e      	b.n	8003220 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2b11      	cmp	r3, #17
 80031c8:	d10b      	bne.n	80031e2 <HAL_ADC_ConfigChannel+0x56e>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031d2:	d106      	bne.n	80031e2 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80031d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80031dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031de:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80031e0:	e01e      	b.n	8003220 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b12      	cmp	r3, #18
 80031e8:	d11a      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80031ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80031f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031f4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80031f6:	e013      	b.n	8003220 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fc:	f043 0220 	orr.w	r2, r3, #32
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800320a:	e00a      	b.n	8003222 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	f043 0220 	orr.w	r2, r3, #32
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800321e:	e000      	b.n	8003222 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003220:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800322a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800322e:	4618      	mov	r0, r3
 8003230:	376c      	adds	r7, #108	; 0x6c
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	50000400 	.word	0x50000400
 8003240:	50000500 	.word	0x50000500
 8003244:	20000010 	.word	0x20000010
 8003248:	431bde83 	.word	0x431bde83

0800324c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800324c:	b480      	push	{r7}
 800324e:	b099      	sub	sp, #100	; 0x64
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003256:	2300      	movs	r3, #0
 8003258:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003264:	d102      	bne.n	800326c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8003266:	4b6d      	ldr	r3, [pc, #436]	; (800341c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003268:	60bb      	str	r3, [r7, #8]
 800326a:	e01a      	b.n	80032a2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a6a      	ldr	r2, [pc, #424]	; (800341c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d103      	bne.n	800327e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8003276:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800327a:	60bb      	str	r3, [r7, #8]
 800327c:	e011      	b.n	80032a2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a67      	ldr	r2, [pc, #412]	; (8003420 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d102      	bne.n	800328e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003288:	4b66      	ldr	r3, [pc, #408]	; (8003424 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800328a:	60bb      	str	r3, [r7, #8]
 800328c:	e009      	b.n	80032a2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a64      	ldr	r2, [pc, #400]	; (8003424 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d102      	bne.n	800329e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003298:	4b61      	ldr	r3, [pc, #388]	; (8003420 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800329a:	60bb      	str	r3, [r7, #8]
 800329c:	e001      	b.n	80032a2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800329e:	2300      	movs	r3, #0
 80032a0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e0b0      	b.n	800340e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d101      	bne.n	80032ba <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80032b6:	2302      	movs	r3, #2
 80032b8:	e0a9      	b.n	800340e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f040 808d 	bne.w	80033ec <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 0304 	and.w	r3, r3, #4
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f040 8086 	bne.w	80033ec <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032e8:	d004      	beq.n	80032f4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a4b      	ldr	r2, [pc, #300]	; (800341c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d101      	bne.n	80032f8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80032f4:	4b4c      	ldr	r3, [pc, #304]	; (8003428 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80032f6:	e000      	b.n	80032fa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80032f8:	4b4c      	ldr	r3, [pc, #304]	; (800342c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80032fa:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d040      	beq.n	8003386 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003304:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	6859      	ldr	r1, [r3, #4]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003316:	035b      	lsls	r3, r3, #13
 8003318:	430b      	orrs	r3, r1
 800331a:	431a      	orrs	r2, r3
 800331c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800331e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 0303 	and.w	r3, r3, #3
 800332a:	2b01      	cmp	r3, #1
 800332c:	d108      	bne.n	8003340 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b01      	cmp	r3, #1
 800333a:	d101      	bne.n	8003340 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800333c:	2301      	movs	r3, #1
 800333e:	e000      	b.n	8003342 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003340:	2300      	movs	r3, #0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d15c      	bne.n	8003400 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	2b01      	cmp	r3, #1
 8003350:	d107      	bne.n	8003362 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b01      	cmp	r3, #1
 800335c:	d101      	bne.n	8003362 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800335e:	2301      	movs	r3, #1
 8003360:	e000      	b.n	8003364 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8003362:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003364:	2b00      	cmp	r3, #0
 8003366:	d14b      	bne.n	8003400 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003368:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003370:	f023 030f 	bic.w	r3, r3, #15
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	6811      	ldr	r1, [r2, #0]
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	6892      	ldr	r2, [r2, #8]
 800337c:	430a      	orrs	r2, r1
 800337e:	431a      	orrs	r2, r3
 8003380:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003382:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003384:	e03c      	b.n	8003400 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003386:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800338e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003390:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 0303 	and.w	r3, r3, #3
 800339c:	2b01      	cmp	r3, #1
 800339e:	d108      	bne.n	80033b2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d101      	bne.n	80033b2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80033ae:	2301      	movs	r3, #1
 80033b0:	e000      	b.n	80033b4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80033b2:	2300      	movs	r3, #0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d123      	bne.n	8003400 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 0303 	and.w	r3, r3, #3
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d107      	bne.n	80033d4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80033d0:	2301      	movs	r3, #1
 80033d2:	e000      	b.n	80033d6 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80033d4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d112      	bne.n	8003400 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80033da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80033e2:	f023 030f 	bic.w	r3, r3, #15
 80033e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033e8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80033ea:	e009      	b.n	8003400 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	f043 0220 	orr.w	r2, r3, #32
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80033fe:	e000      	b.n	8003402 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003400:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800340a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800340e:	4618      	mov	r0, r3
 8003410:	3764      	adds	r7, #100	; 0x64
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	50000100 	.word	0x50000100
 8003420:	50000400 	.word	0x50000400
 8003424:	50000500 	.word	0x50000500
 8003428:	50000300 	.word	0x50000300
 800342c:	50000700 	.word	0x50000700

08003430 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	2b01      	cmp	r3, #1
 8003448:	d108      	bne.n	800345c <ADC_Enable+0x2c>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <ADC_Enable+0x2c>
 8003458:	2301      	movs	r3, #1
 800345a:	e000      	b.n	800345e <ADC_Enable+0x2e>
 800345c:	2300      	movs	r3, #0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d143      	bne.n	80034ea <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	4b22      	ldr	r3, [pc, #136]	; (80034f4 <ADC_Enable+0xc4>)
 800346a:	4013      	ands	r3, r2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00d      	beq.n	800348c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003474:	f043 0210 	orr.w	r2, r3, #16
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003480:	f043 0201 	orr.w	r2, r3, #1
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e02f      	b.n	80034ec <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0201 	orr.w	r2, r2, #1
 800349a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800349c:	f7fe ff66 	bl	800236c <HAL_GetTick>
 80034a0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80034a2:	e01b      	b.n	80034dc <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80034a4:	f7fe ff62 	bl	800236c <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d914      	bls.n	80034dc <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d00d      	beq.n	80034dc <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	f043 0210 	orr.w	r2, r3, #16
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d0:	f043 0201 	orr.w	r2, r3, #1
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e007      	b.n	80034ec <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d1dc      	bne.n	80034a4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	8000003f 	.word	0x8000003f

080034f8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003500:	2300      	movs	r3, #0
 8003502:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	2b01      	cmp	r3, #1
 8003510:	d108      	bne.n	8003524 <ADC_Disable+0x2c>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b01      	cmp	r3, #1
 800351e:	d101      	bne.n	8003524 <ADC_Disable+0x2c>
 8003520:	2301      	movs	r3, #1
 8003522:	e000      	b.n	8003526 <ADC_Disable+0x2e>
 8003524:	2300      	movs	r3, #0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d047      	beq.n	80035ba <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 030d 	and.w	r3, r3, #13
 8003534:	2b01      	cmp	r3, #1
 8003536:	d10f      	bne.n	8003558 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0202 	orr.w	r2, r2, #2
 8003546:	609a      	str	r2, [r3, #8]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2203      	movs	r2, #3
 800354e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003550:	f7fe ff0c 	bl	800236c <HAL_GetTick>
 8003554:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003556:	e029      	b.n	80035ac <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	f043 0210 	orr.w	r2, r3, #16
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003568:	f043 0201 	orr.w	r2, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e023      	b.n	80035bc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003574:	f7fe fefa 	bl	800236c <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d914      	bls.n	80035ac <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b01      	cmp	r3, #1
 800358e:	d10d      	bne.n	80035ac <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	f043 0210 	orr.w	r2, r3, #16
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a0:	f043 0201 	orr.w	r2, r3, #1
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e007      	b.n	80035bc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d0dc      	beq.n	8003574 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80035d2:	2300      	movs	r3, #0
 80035d4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80035d6:	2300      	movs	r3, #0
 80035d8:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f003 030c 	and.w	r3, r3, #12
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 809a 	beq.w	800371e <ADC_ConversionStop+0x15a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035f8:	d12a      	bne.n	8003650 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d126      	bne.n	8003650 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8003606:	2b01      	cmp	r3, #1
 8003608:	d122      	bne.n	8003650 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 800360a:	230c      	movs	r3, #12
 800360c:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800360e:	e014      	b.n	800363a <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	4a45      	ldr	r2, [pc, #276]	; (8003728 <ADC_ConversionStop+0x164>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d90d      	bls.n	8003634 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	f043 0210 	orr.w	r2, r3, #16
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003628:	f043 0201 	orr.w	r2, r3, #1
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e075      	b.n	8003720 <ADC_ConversionStop+0x15c>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	3301      	adds	r3, #1
 8003638:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003644:	2b40      	cmp	r3, #64	; 0x40
 8003646:	d1e3      	bne.n	8003610 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2240      	movs	r2, #64	; 0x40
 800364e:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	2b60      	cmp	r3, #96	; 0x60
 8003654:	d015      	beq.n	8003682 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b04      	cmp	r3, #4
 8003662:	d10e      	bne.n	8003682 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800366e:	2b00      	cmp	r3, #0
 8003670:	d107      	bne.n	8003682 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f042 0210 	orr.w	r2, r2, #16
 8003680:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	2b0c      	cmp	r3, #12
 8003686:	d015      	beq.n	80036b4 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 0308 	and.w	r3, r3, #8
 8003692:	2b08      	cmp	r3, #8
 8003694:	d10e      	bne.n	80036b4 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d107      	bne.n	80036b4 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f042 0220 	orr.w	r2, r2, #32
 80036b2:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	2b60      	cmp	r3, #96	; 0x60
 80036b8:	d004      	beq.n	80036c4 <ADC_ConversionStop+0x100>
 80036ba:	2b6c      	cmp	r3, #108	; 0x6c
 80036bc:	d105      	bne.n	80036ca <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80036be:	230c      	movs	r3, #12
 80036c0:	617b      	str	r3, [r7, #20]
        break;
 80036c2:	e005      	b.n	80036d0 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80036c4:	2308      	movs	r3, #8
 80036c6:	617b      	str	r3, [r7, #20]
        break;
 80036c8:	e002      	b.n	80036d0 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80036ca:	2304      	movs	r3, #4
 80036cc:	617b      	str	r3, [r7, #20]
        break;
 80036ce:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80036d0:	f7fe fe4c 	bl	800236c <HAL_GetTick>
 80036d4:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80036d6:	e01b      	b.n	8003710 <ADC_ConversionStop+0x14c>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80036d8:	f7fe fe48 	bl	800236c <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b0b      	cmp	r3, #11
 80036e4:	d914      	bls.n	8003710 <ADC_ConversionStop+0x14c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	4013      	ands	r3, r2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00d      	beq.n	8003710 <ADC_ConversionStop+0x14c>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	f043 0210 	orr.w	r2, r3, #16
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003704:	f043 0201 	orr.w	r2, r3, #1
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e007      	b.n	8003720 <ADC_ConversionStop+0x15c>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	4013      	ands	r3, r2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1dc      	bne.n	80036d8 <ADC_ConversionStop+0x114>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3718      	adds	r7, #24
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	000993ff 	.word	0x000993ff

0800372c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800373c:	4b0c      	ldr	r3, [pc, #48]	; (8003770 <__NVIC_SetPriorityGrouping+0x44>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003748:	4013      	ands	r3, r2
 800374a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003754:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800375c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800375e:	4a04      	ldr	r2, [pc, #16]	; (8003770 <__NVIC_SetPriorityGrouping+0x44>)
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	60d3      	str	r3, [r2, #12]
}
 8003764:	bf00      	nop
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	e000ed00 	.word	0xe000ed00

08003774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003778:	4b04      	ldr	r3, [pc, #16]	; (800378c <__NVIC_GetPriorityGrouping+0x18>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	0a1b      	lsrs	r3, r3, #8
 800377e:	f003 0307 	and.w	r3, r3, #7
}
 8003782:	4618      	mov	r0, r3
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	e000ed00 	.word	0xe000ed00

08003790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	4603      	mov	r3, r0
 8003798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800379a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	db0b      	blt.n	80037ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037a2:	79fb      	ldrb	r3, [r7, #7]
 80037a4:	f003 021f 	and.w	r2, r3, #31
 80037a8:	4907      	ldr	r1, [pc, #28]	; (80037c8 <__NVIC_EnableIRQ+0x38>)
 80037aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ae:	095b      	lsrs	r3, r3, #5
 80037b0:	2001      	movs	r0, #1
 80037b2:	fa00 f202 	lsl.w	r2, r0, r2
 80037b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	e000e100 	.word	0xe000e100

080037cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	4603      	mov	r3, r0
 80037d4:	6039      	str	r1, [r7, #0]
 80037d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	db0a      	blt.n	80037f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	490c      	ldr	r1, [pc, #48]	; (8003818 <__NVIC_SetPriority+0x4c>)
 80037e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ea:	0112      	lsls	r2, r2, #4
 80037ec:	b2d2      	uxtb	r2, r2
 80037ee:	440b      	add	r3, r1
 80037f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037f4:	e00a      	b.n	800380c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	4908      	ldr	r1, [pc, #32]	; (800381c <__NVIC_SetPriority+0x50>)
 80037fc:	79fb      	ldrb	r3, [r7, #7]
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	3b04      	subs	r3, #4
 8003804:	0112      	lsls	r2, r2, #4
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	440b      	add	r3, r1
 800380a:	761a      	strb	r2, [r3, #24]
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	e000e100 	.word	0xe000e100
 800381c:	e000ed00 	.word	0xe000ed00

08003820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003820:	b480      	push	{r7}
 8003822:	b089      	sub	sp, #36	; 0x24
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f1c3 0307 	rsb	r3, r3, #7
 800383a:	2b04      	cmp	r3, #4
 800383c:	bf28      	it	cs
 800383e:	2304      	movcs	r3, #4
 8003840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	3304      	adds	r3, #4
 8003846:	2b06      	cmp	r3, #6
 8003848:	d902      	bls.n	8003850 <NVIC_EncodePriority+0x30>
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	3b03      	subs	r3, #3
 800384e:	e000      	b.n	8003852 <NVIC_EncodePriority+0x32>
 8003850:	2300      	movs	r3, #0
 8003852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003854:	f04f 32ff 	mov.w	r2, #4294967295
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	43da      	mvns	r2, r3
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	401a      	ands	r2, r3
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003868:	f04f 31ff 	mov.w	r1, #4294967295
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	fa01 f303 	lsl.w	r3, r1, r3
 8003872:	43d9      	mvns	r1, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003878:	4313      	orrs	r3, r2
         );
}
 800387a:	4618      	mov	r0, r3
 800387c:	3724      	adds	r7, #36	; 0x24
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
	...

08003888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3b01      	subs	r3, #1
 8003894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003898:	d301      	bcc.n	800389e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800389a:	2301      	movs	r3, #1
 800389c:	e00f      	b.n	80038be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800389e:	4a0a      	ldr	r2, [pc, #40]	; (80038c8 <SysTick_Config+0x40>)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038a6:	210f      	movs	r1, #15
 80038a8:	f04f 30ff 	mov.w	r0, #4294967295
 80038ac:	f7ff ff8e 	bl	80037cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038b0:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <SysTick_Config+0x40>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038b6:	4b04      	ldr	r3, [pc, #16]	; (80038c8 <SysTick_Config+0x40>)
 80038b8:	2207      	movs	r2, #7
 80038ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	e000e010 	.word	0xe000e010

080038cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f7ff ff29 	bl	800372c <__NVIC_SetPriorityGrouping>
}
 80038da:	bf00      	nop
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b086      	sub	sp, #24
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	4603      	mov	r3, r0
 80038ea:	60b9      	str	r1, [r7, #8]
 80038ec:	607a      	str	r2, [r7, #4]
 80038ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038f4:	f7ff ff3e 	bl	8003774 <__NVIC_GetPriorityGrouping>
 80038f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	68b9      	ldr	r1, [r7, #8]
 80038fe:	6978      	ldr	r0, [r7, #20]
 8003900:	f7ff ff8e 	bl	8003820 <NVIC_EncodePriority>
 8003904:	4602      	mov	r2, r0
 8003906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800390a:	4611      	mov	r1, r2
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff ff5d 	bl	80037cc <__NVIC_SetPriority>
}
 8003912:	bf00      	nop
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b082      	sub	sp, #8
 800391e:	af00      	add	r7, sp, #0
 8003920:	4603      	mov	r3, r0
 8003922:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff ff31 	bl	8003790 <__NVIC_EnableIRQ>
}
 800392e:	bf00      	nop
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b082      	sub	sp, #8
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7ff ffa2 	bl	8003888 <SysTick_Config>
 8003944:	4603      	mov	r3, r0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800394e:	b580      	push	{r7, lr}
 8003950:	b082      	sub	sp, #8
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d101      	bne.n	8003960 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e014      	b.n	800398a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	791b      	ldrb	r3, [r3, #4]
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d105      	bne.n	8003976 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7fd ffa7 	bl	80018c4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2202      	movs	r2, #2
 800397a:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003992:	b480      	push	{r7}
 8003994:	b087      	sub	sp, #28
 8003996:	af00      	add	r7, sp, #0
 8003998:	60f8      	str	r0, [r7, #12]
 800399a:	60b9      	str	r1, [r7, #8]
 800399c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800399e:	2300      	movs	r3, #0
 80039a0:	617b      	str	r3, [r7, #20]
 80039a2:	2300      	movs	r3, #0
 80039a4:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	795b      	ldrb	r3, [r3, #5]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d101      	bne.n	80039b2 <HAL_DAC_ConfigChannel+0x20>
 80039ae:	2302      	movs	r3, #2
 80039b0:	e036      	b.n	8003a20 <HAL_DAC_ConfigChannel+0x8e>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2201      	movs	r2, #1
 80039b6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2202      	movs	r2, #2
 80039bc:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80039c6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	43db      	mvns	r3, r3
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	4013      	ands	r3, r2
 80039d6:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6819      	ldr	r1, [r3, #0]
 8003a00:	22c0      	movs	r2, #192	; 0xc0
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	43da      	mvns	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	400a      	ands	r2, r1
 8003a10:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2201      	movs	r2, #1
 8003a16:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	371c      	adds	r7, #28
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a34:	2300      	movs	r3, #0
 8003a36:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e037      	b.n	8003ab2 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2202      	movs	r2, #2
 8003a46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003a58:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003a5c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003a66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f92b 	bl	8003cf0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}  
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b083      	sub	sp, #12
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d008      	beq.n	8003ade <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2204      	movs	r2, #4
 8003ad0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e020      	b.n	8003b20 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 020e 	bic.w	r2, r2, #14
 8003aec:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 0201 	bic.w	r2, r2, #1
 8003afc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b06:	2101      	movs	r1, #1
 8003b08:	fa01 f202 	lsl.w	r2, r1, r2
 8003b0c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b34:	2300      	movs	r3, #0
 8003b36:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d005      	beq.n	8003b4e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2204      	movs	r2, #4
 8003b46:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	73fb      	strb	r3, [r7, #15]
 8003b4c:	e027      	b.n	8003b9e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 020e 	bic.w	r2, r2, #14
 8003b5c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0201 	bic.w	r2, r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b76:	2101      	movs	r1, #1
 8003b78:	fa01 f202 	lsl.w	r2, r1, r2
 8003b7c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	4798      	blx	r3
    } 
  }
  return status;
 8003b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	2204      	movs	r2, #4
 8003bc6:	409a      	lsls	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d024      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x72>
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f003 0304 	and.w	r3, r3, #4
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d01f      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0320 	and.w	r3, r3, #32
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d107      	bne.n	8003bf8 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0204 	bic.w	r2, r2, #4
 8003bf6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c00:	2104      	movs	r1, #4
 8003c02:	fa01 f202 	lsl.w	r2, r1, r2
 8003c06:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d06a      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003c18:	e065      	b.n	8003ce6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	2202      	movs	r2, #2
 8003c20:	409a      	lsls	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4013      	ands	r3, r2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d02c      	beq.n	8003c84 <HAL_DMA_IRQHandler+0xdc>
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d027      	beq.n	8003c84 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0320 	and.w	r3, r3, #32
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10b      	bne.n	8003c5a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 020a 	bic.w	r2, r2, #10
 8003c50:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c62:	2102      	movs	r1, #2
 8003c64:	fa01 f202 	lsl.w	r2, r1, r2
 8003c68:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d035      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003c82:	e030      	b.n	8003ce6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c88:	2208      	movs	r2, #8
 8003c8a:	409a      	lsls	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d028      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x13e>
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	f003 0308 	and.w	r3, r3, #8
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d023      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 020e 	bic.w	r2, r2, #14
 8003cac:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cbc:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d004      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	4798      	blx	r3
    }
  }
}  
 8003ce4:	e7ff      	b.n	8003ce6 <HAL_DMA_IRQHandler+0x13e>
 8003ce6:	bf00      	nop
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	4b14      	ldr	r3, [pc, #80]	; (8003d50 <DMA_CalcBaseAndBitshift+0x60>)
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d80f      	bhi.n	8003d24 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	461a      	mov	r2, r3
 8003d0a:	4b12      	ldr	r3, [pc, #72]	; (8003d54 <DMA_CalcBaseAndBitshift+0x64>)
 8003d0c:	4413      	add	r3, r2
 8003d0e:	4a12      	ldr	r2, [pc, #72]	; (8003d58 <DMA_CalcBaseAndBitshift+0x68>)
 8003d10:	fba2 2303 	umull	r2, r3, r2, r3
 8003d14:	091b      	lsrs	r3, r3, #4
 8003d16:	009a      	lsls	r2, r3, #2
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a0f      	ldr	r2, [pc, #60]	; (8003d5c <DMA_CalcBaseAndBitshift+0x6c>)
 8003d20:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003d22:	e00e      	b.n	8003d42 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	461a      	mov	r2, r3
 8003d2a:	4b0d      	ldr	r3, [pc, #52]	; (8003d60 <DMA_CalcBaseAndBitshift+0x70>)
 8003d2c:	4413      	add	r3, r2
 8003d2e:	4a0a      	ldr	r2, [pc, #40]	; (8003d58 <DMA_CalcBaseAndBitshift+0x68>)
 8003d30:	fba2 2303 	umull	r2, r3, r2, r3
 8003d34:	091b      	lsrs	r3, r3, #4
 8003d36:	009a      	lsls	r2, r3, #2
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a09      	ldr	r2, [pc, #36]	; (8003d64 <DMA_CalcBaseAndBitshift+0x74>)
 8003d40:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40020407 	.word	0x40020407
 8003d54:	bffdfff8 	.word	0xbffdfff8
 8003d58:	cccccccd 	.word	0xcccccccd
 8003d5c:	40020000 	.word	0x40020000
 8003d60:	bffdfbf8 	.word	0xbffdfbf8
 8003d64:	40020400 	.word	0x40020400

08003d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d72:	2300      	movs	r3, #0
 8003d74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d76:	e160      	b.n	800403a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	fa01 f303 	lsl.w	r3, r1, r3
 8003d84:	4013      	ands	r3, r2
 8003d86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 8152 	beq.w	8004034 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f003 0303 	and.w	r3, r3, #3
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d005      	beq.n	8003da8 <HAL_GPIO_Init+0x40>
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f003 0303 	and.w	r3, r3, #3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d130      	bne.n	8003e0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	2203      	movs	r2, #3
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	43db      	mvns	r3, r3
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	68da      	ldr	r2, [r3, #12]
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dde:	2201      	movs	r2, #1
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	fa02 f303 	lsl.w	r3, r2, r3
 8003de6:	43db      	mvns	r3, r3
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4013      	ands	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	091b      	lsrs	r3, r3, #4
 8003df4:	f003 0201 	and.w	r2, r3, #1
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f003 0303 	and.w	r3, r3, #3
 8003e12:	2b03      	cmp	r3, #3
 8003e14:	d017      	beq.n	8003e46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	005b      	lsls	r3, r3, #1
 8003e20:	2203      	movs	r2, #3
 8003e22:	fa02 f303 	lsl.w	r3, r2, r3
 8003e26:	43db      	mvns	r3, r3
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d123      	bne.n	8003e9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	08da      	lsrs	r2, r3, #3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	3208      	adds	r2, #8
 8003e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	f003 0307 	and.w	r3, r3, #7
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	220f      	movs	r2, #15
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	43db      	mvns	r3, r3
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	4013      	ands	r3, r2
 8003e74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	691a      	ldr	r2, [r3, #16]
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	08da      	lsrs	r2, r3, #3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3208      	adds	r2, #8
 8003e94:	6939      	ldr	r1, [r7, #16]
 8003e96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	2203      	movs	r2, #3
 8003ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eaa:	43db      	mvns	r3, r3
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f003 0203 	and.w	r2, r3, #3
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 80ac 	beq.w	8004034 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003edc:	4b5e      	ldr	r3, [pc, #376]	; (8004058 <HAL_GPIO_Init+0x2f0>)
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	4a5d      	ldr	r2, [pc, #372]	; (8004058 <HAL_GPIO_Init+0x2f0>)
 8003ee2:	f043 0301 	orr.w	r3, r3, #1
 8003ee6:	6193      	str	r3, [r2, #24]
 8003ee8:	4b5b      	ldr	r3, [pc, #364]	; (8004058 <HAL_GPIO_Init+0x2f0>)
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	60bb      	str	r3, [r7, #8]
 8003ef2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ef4:	4a59      	ldr	r2, [pc, #356]	; (800405c <HAL_GPIO_Init+0x2f4>)
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	089b      	lsrs	r3, r3, #2
 8003efa:	3302      	adds	r3, #2
 8003efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f003 0303 	and.w	r3, r3, #3
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	220f      	movs	r2, #15
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	43db      	mvns	r3, r3
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	4013      	ands	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f1e:	d025      	beq.n	8003f6c <HAL_GPIO_Init+0x204>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a4f      	ldr	r2, [pc, #316]	; (8004060 <HAL_GPIO_Init+0x2f8>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d01f      	beq.n	8003f68 <HAL_GPIO_Init+0x200>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a4e      	ldr	r2, [pc, #312]	; (8004064 <HAL_GPIO_Init+0x2fc>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d019      	beq.n	8003f64 <HAL_GPIO_Init+0x1fc>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a4d      	ldr	r2, [pc, #308]	; (8004068 <HAL_GPIO_Init+0x300>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d013      	beq.n	8003f60 <HAL_GPIO_Init+0x1f8>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a4c      	ldr	r2, [pc, #304]	; (800406c <HAL_GPIO_Init+0x304>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00d      	beq.n	8003f5c <HAL_GPIO_Init+0x1f4>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a4b      	ldr	r2, [pc, #300]	; (8004070 <HAL_GPIO_Init+0x308>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d007      	beq.n	8003f58 <HAL_GPIO_Init+0x1f0>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a4a      	ldr	r2, [pc, #296]	; (8004074 <HAL_GPIO_Init+0x30c>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d101      	bne.n	8003f54 <HAL_GPIO_Init+0x1ec>
 8003f50:	2306      	movs	r3, #6
 8003f52:	e00c      	b.n	8003f6e <HAL_GPIO_Init+0x206>
 8003f54:	2307      	movs	r3, #7
 8003f56:	e00a      	b.n	8003f6e <HAL_GPIO_Init+0x206>
 8003f58:	2305      	movs	r3, #5
 8003f5a:	e008      	b.n	8003f6e <HAL_GPIO_Init+0x206>
 8003f5c:	2304      	movs	r3, #4
 8003f5e:	e006      	b.n	8003f6e <HAL_GPIO_Init+0x206>
 8003f60:	2303      	movs	r3, #3
 8003f62:	e004      	b.n	8003f6e <HAL_GPIO_Init+0x206>
 8003f64:	2302      	movs	r3, #2
 8003f66:	e002      	b.n	8003f6e <HAL_GPIO_Init+0x206>
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e000      	b.n	8003f6e <HAL_GPIO_Init+0x206>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	f002 0203 	and.w	r2, r2, #3
 8003f74:	0092      	lsls	r2, r2, #2
 8003f76:	4093      	lsls	r3, r2
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f7e:	4937      	ldr	r1, [pc, #220]	; (800405c <HAL_GPIO_Init+0x2f4>)
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	089b      	lsrs	r3, r3, #2
 8003f84:	3302      	adds	r3, #2
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f8c:	4b3a      	ldr	r3, [pc, #232]	; (8004078 <HAL_GPIO_Init+0x310>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	43db      	mvns	r3, r3
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003fb0:	4a31      	ldr	r2, [pc, #196]	; (8004078 <HAL_GPIO_Init+0x310>)
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003fb6:	4b30      	ldr	r3, [pc, #192]	; (8004078 <HAL_GPIO_Init+0x310>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003fda:	4a27      	ldr	r2, [pc, #156]	; (8004078 <HAL_GPIO_Init+0x310>)
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fe0:	4b25      	ldr	r3, [pc, #148]	; (8004078 <HAL_GPIO_Init+0x310>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	4013      	ands	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	4313      	orrs	r3, r2
 8004002:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004004:	4a1c      	ldr	r2, [pc, #112]	; (8004078 <HAL_GPIO_Init+0x310>)
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800400a:	4b1b      	ldr	r3, [pc, #108]	; (8004078 <HAL_GPIO_Init+0x310>)
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	43db      	mvns	r3, r3
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4013      	ands	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4313      	orrs	r3, r2
 800402c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800402e:	4a12      	ldr	r2, [pc, #72]	; (8004078 <HAL_GPIO_Init+0x310>)
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	3301      	adds	r3, #1
 8004038:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	fa22 f303 	lsr.w	r3, r2, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	f47f ae97 	bne.w	8003d78 <HAL_GPIO_Init+0x10>
  }
}
 800404a:	bf00      	nop
 800404c:	371c      	adds	r7, #28
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	40021000 	.word	0x40021000
 800405c:	40010000 	.word	0x40010000
 8004060:	48000400 	.word	0x48000400
 8004064:	48000800 	.word	0x48000800
 8004068:	48000c00 	.word	0x48000c00
 800406c:	48001000 	.word	0x48001000
 8004070:	48001400 	.word	0x48001400
 8004074:	48001800 	.word	0x48001800
 8004078:	40010400 	.word	0x40010400

0800407c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	460b      	mov	r3, r1
 8004086:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691a      	ldr	r2, [r3, #16]
 800408c:	887b      	ldrh	r3, [r7, #2]
 800408e:	4013      	ands	r3, r2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004094:	2301      	movs	r3, #1
 8004096:	73fb      	strb	r3, [r7, #15]
 8004098:	e001      	b.n	800409e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800409a:	2300      	movs	r3, #0
 800409c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800409e:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3714      	adds	r7, #20
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	460b      	mov	r3, r1
 80040b6:	807b      	strh	r3, [r7, #2]
 80040b8:	4613      	mov	r3, r2
 80040ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040bc:	787b      	ldrb	r3, [r7, #1]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040c2:	887a      	ldrh	r2, [r7, #2]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040c8:	e002      	b.n	80040d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040ca:	887a      	ldrh	r2, [r7, #2]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	460b      	mov	r3, r1
 80040e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040ee:	887a      	ldrh	r2, [r7, #2]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4013      	ands	r3, r2
 80040f4:	041a      	lsls	r2, r3, #16
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	43d9      	mvns	r1, r3
 80040fa:	887b      	ldrh	r3, [r7, #2]
 80040fc:	400b      	ands	r3, r1
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	619a      	str	r2, [r3, #24]
}
 8004104:	bf00      	nop
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	4603      	mov	r3, r0
 8004118:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800411a:	4b08      	ldr	r3, [pc, #32]	; (800413c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800411c:	695a      	ldr	r2, [r3, #20]
 800411e:	88fb      	ldrh	r3, [r7, #6]
 8004120:	4013      	ands	r3, r2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d006      	beq.n	8004134 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004126:	4a05      	ldr	r2, [pc, #20]	; (800413c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004128:	88fb      	ldrh	r3, [r7, #6]
 800412a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800412c:	88fb      	ldrh	r3, [r7, #6]
 800412e:	4618      	mov	r0, r3
 8004130:	f7fc ff1e 	bl	8000f70 <HAL_GPIO_EXTI_Callback>
  }
}
 8004134:	bf00      	nop
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40010400 	.word	0x40010400

08004140 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8004146:	af00      	add	r7, sp, #0
 8004148:	1d3b      	adds	r3, r7, #4
 800414a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800414c:	1d3b      	adds	r3, r7, #4
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d102      	bne.n	800415a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	f000 bf01 	b.w	8004f5c <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800415a:	1d3b      	adds	r3, r7, #4
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 8160 	beq.w	800442a <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800416a:	4bae      	ldr	r3, [pc, #696]	; (8004424 <HAL_RCC_OscConfig+0x2e4>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f003 030c 	and.w	r3, r3, #12
 8004172:	2b04      	cmp	r3, #4
 8004174:	d00c      	beq.n	8004190 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004176:	4bab      	ldr	r3, [pc, #684]	; (8004424 <HAL_RCC_OscConfig+0x2e4>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f003 030c 	and.w	r3, r3, #12
 800417e:	2b08      	cmp	r3, #8
 8004180:	d159      	bne.n	8004236 <HAL_RCC_OscConfig+0xf6>
 8004182:	4ba8      	ldr	r3, [pc, #672]	; (8004424 <HAL_RCC_OscConfig+0x2e4>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800418a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800418e:	d152      	bne.n	8004236 <HAL_RCC_OscConfig+0xf6>
 8004190:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004194:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004198:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800419c:	fa93 f3a3 	rbit	r3, r3
 80041a0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80041a4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a8:	fab3 f383 	clz	r3, r3
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	095b      	lsrs	r3, r3, #5
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	f043 0301 	orr.w	r3, r3, #1
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d102      	bne.n	80041c2 <HAL_RCC_OscConfig+0x82>
 80041bc:	4b99      	ldr	r3, [pc, #612]	; (8004424 <HAL_RCC_OscConfig+0x2e4>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	e015      	b.n	80041ee <HAL_RCC_OscConfig+0xae>
 80041c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041c6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ca:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80041ce:	fa93 f3a3 	rbit	r3, r3
 80041d2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80041d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041da:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80041de:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80041e2:	fa93 f3a3 	rbit	r3, r3
 80041e6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80041ea:	4b8e      	ldr	r3, [pc, #568]	; (8004424 <HAL_RCC_OscConfig+0x2e4>)
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80041f2:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80041f6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80041fa:	fa92 f2a2 	rbit	r2, r2
 80041fe:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8004202:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004206:	fab2 f282 	clz	r2, r2
 800420a:	b2d2      	uxtb	r2, r2
 800420c:	f042 0220 	orr.w	r2, r2, #32
 8004210:	b2d2      	uxtb	r2, r2
 8004212:	f002 021f 	and.w	r2, r2, #31
 8004216:	2101      	movs	r1, #1
 8004218:	fa01 f202 	lsl.w	r2, r1, r2
 800421c:	4013      	ands	r3, r2
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 8102 	beq.w	8004428 <HAL_RCC_OscConfig+0x2e8>
 8004224:	1d3b      	adds	r3, r7, #4
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	f040 80fc 	bne.w	8004428 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	f000 be93 	b.w	8004f5c <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004236:	1d3b      	adds	r3, r7, #4
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004240:	d106      	bne.n	8004250 <HAL_RCC_OscConfig+0x110>
 8004242:	4b78      	ldr	r3, [pc, #480]	; (8004424 <HAL_RCC_OscConfig+0x2e4>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a77      	ldr	r2, [pc, #476]	; (8004424 <HAL_RCC_OscConfig+0x2e4>)
 8004248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800424c:	6013      	str	r3, [r2, #0]
 800424e:	e030      	b.n	80042b2 <HAL_RCC_OscConfig+0x172>
 8004250:	1d3b      	adds	r3, r7, #4
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10c      	bne.n	8004274 <HAL_RCC_OscConfig+0x134>
 800425a:	4b72      	ldr	r3, [pc, #456]	; (8004424 <HAL_RCC_OscConfig+0x2e4>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a71      	ldr	r2, [pc, #452]	; (8004424 <HAL_RCC_OscConfig+0x2e4>)
 8004260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004264:	6013      	str	r3, [r2, #0]
 8004266:	4b6f      	ldr	r3, [pc, #444]	; (8004424 <HAL_RCC_OscConfig+0x2e4>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a6e      	ldr	r2, [pc, #440]	; (8004424 <HAL_RCC_OscConfig+0x2e4>)
 800426c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004270:	6013      	str	r3, [r2, #0]
 8004272:	e01e      	b.n	80042b2 <HAL_RCC_OscConfig+0x172>
 8004274:	1d3b      	adds	r3, r7, #4
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800427e:	d10c      	bne.n	800429a <HAL_RCC_OscConfig+0x15a>
 8004280:	4b68      	ldr	r3, [pc, #416]	; (8004424 <HAL_RCC_OscConfig+0x2e4>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a67      	ldr	r2, [pc, #412]	; (8004424 <HAL_RCC_OscConfig+0x2e4>)
 8004286:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800428a:	6013      	str	r3, [r2, #0]
 800428c:	4b65      	ldr	r3, [pc, #404]	; (8004424 <HAL_RCC_OscConfig+0x2e4>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a64      	ldr	r2, [pc, #400]	; (8004424 <HAL_RCC_OscConfig+0x2e4>)
 8004292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004296:	6013      	str	r3, [r2, #0]
 8004298:	e00b      	b.n	80042b2 <HAL_RCC_OscConfig+0x172>
 800429a:	4b62      	ldr	r3, [pc, #392]	; (8004424 <HAL_RCC_OscConfig+0x2e4>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a61      	ldr	r2, [pc, #388]	; (8004424 <HAL_RCC_OscConfig+0x2e4>)
 80042a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	4b5f      	ldr	r3, [pc, #380]	; (8004424 <HAL_RCC_OscConfig+0x2e4>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a5e      	ldr	r2, [pc, #376]	; (8004424 <HAL_RCC_OscConfig+0x2e4>)
 80042ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042b0:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042b2:	1d3b      	adds	r3, r7, #4
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d059      	beq.n	8004370 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042bc:	f7fe f856 	bl	800236c <HAL_GetTick>
 80042c0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c4:	e00a      	b.n	80042dc <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042c6:	f7fe f851 	bl	800236c <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b64      	cmp	r3, #100	; 0x64
 80042d4:	d902      	bls.n	80042dc <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	f000 be40 	b.w	8004f5c <HAL_RCC_OscConfig+0xe1c>
 80042dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042e0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80042e8:	fa93 f3a3 	rbit	r3, r3
 80042ec:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80042f0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f4:	fab3 f383 	clz	r3, r3
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	095b      	lsrs	r3, r3, #5
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	f043 0301 	orr.w	r3, r3, #1
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b01      	cmp	r3, #1
 8004306:	d102      	bne.n	800430e <HAL_RCC_OscConfig+0x1ce>
 8004308:	4b46      	ldr	r3, [pc, #280]	; (8004424 <HAL_RCC_OscConfig+0x2e4>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	e015      	b.n	800433a <HAL_RCC_OscConfig+0x1fa>
 800430e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004312:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004316:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800431a:	fa93 f3a3 	rbit	r3, r3
 800431e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004322:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004326:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800432a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800432e:	fa93 f3a3 	rbit	r3, r3
 8004332:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004336:	4b3b      	ldr	r3, [pc, #236]	; (8004424 <HAL_RCC_OscConfig+0x2e4>)
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800433e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8004342:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8004346:	fa92 f2a2 	rbit	r2, r2
 800434a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800434e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004352:	fab2 f282 	clz	r2, r2
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	f042 0220 	orr.w	r2, r2, #32
 800435c:	b2d2      	uxtb	r2, r2
 800435e:	f002 021f 	and.w	r2, r2, #31
 8004362:	2101      	movs	r1, #1
 8004364:	fa01 f202 	lsl.w	r2, r1, r2
 8004368:	4013      	ands	r3, r2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0ab      	beq.n	80042c6 <HAL_RCC_OscConfig+0x186>
 800436e:	e05c      	b.n	800442a <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004370:	f7fd fffc 	bl	800236c <HAL_GetTick>
 8004374:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004378:	e00a      	b.n	8004390 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800437a:	f7fd fff7 	bl	800236c <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b64      	cmp	r3, #100	; 0x64
 8004388:	d902      	bls.n	8004390 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	f000 bde6 	b.w	8004f5c <HAL_RCC_OscConfig+0xe1c>
 8004390:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004394:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004398:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800439c:	fa93 f3a3 	rbit	r3, r3
 80043a0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80043a4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043a8:	fab3 f383 	clz	r3, r3
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	095b      	lsrs	r3, r3, #5
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	f043 0301 	orr.w	r3, r3, #1
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d102      	bne.n	80043c2 <HAL_RCC_OscConfig+0x282>
 80043bc:	4b19      	ldr	r3, [pc, #100]	; (8004424 <HAL_RCC_OscConfig+0x2e4>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	e015      	b.n	80043ee <HAL_RCC_OscConfig+0x2ae>
 80043c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043c6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80043ce:	fa93 f3a3 	rbit	r3, r3
 80043d2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80043d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043da:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80043de:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80043e2:	fa93 f3a3 	rbit	r3, r3
 80043e6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80043ea:	4b0e      	ldr	r3, [pc, #56]	; (8004424 <HAL_RCC_OscConfig+0x2e4>)
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043f2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80043f6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80043fa:	fa92 f2a2 	rbit	r2, r2
 80043fe:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8004402:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004406:	fab2 f282 	clz	r2, r2
 800440a:	b2d2      	uxtb	r2, r2
 800440c:	f042 0220 	orr.w	r2, r2, #32
 8004410:	b2d2      	uxtb	r2, r2
 8004412:	f002 021f 	and.w	r2, r2, #31
 8004416:	2101      	movs	r1, #1
 8004418:	fa01 f202 	lsl.w	r2, r1, r2
 800441c:	4013      	ands	r3, r2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1ab      	bne.n	800437a <HAL_RCC_OscConfig+0x23a>
 8004422:	e002      	b.n	800442a <HAL_RCC_OscConfig+0x2ea>
 8004424:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800442a:	1d3b      	adds	r3, r7, #4
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 8170 	beq.w	800471a <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800443a:	4bd0      	ldr	r3, [pc, #832]	; (800477c <HAL_RCC_OscConfig+0x63c>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f003 030c 	and.w	r3, r3, #12
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00c      	beq.n	8004460 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004446:	4bcd      	ldr	r3, [pc, #820]	; (800477c <HAL_RCC_OscConfig+0x63c>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f003 030c 	and.w	r3, r3, #12
 800444e:	2b08      	cmp	r3, #8
 8004450:	d16d      	bne.n	800452e <HAL_RCC_OscConfig+0x3ee>
 8004452:	4bca      	ldr	r3, [pc, #808]	; (800477c <HAL_RCC_OscConfig+0x63c>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800445a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800445e:	d166      	bne.n	800452e <HAL_RCC_OscConfig+0x3ee>
 8004460:	2302      	movs	r3, #2
 8004462:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004466:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800446a:	fa93 f3a3 	rbit	r3, r3
 800446e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8004472:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004476:	fab3 f383 	clz	r3, r3
 800447a:	b2db      	uxtb	r3, r3
 800447c:	095b      	lsrs	r3, r3, #5
 800447e:	b2db      	uxtb	r3, r3
 8004480:	f043 0301 	orr.w	r3, r3, #1
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b01      	cmp	r3, #1
 8004488:	d102      	bne.n	8004490 <HAL_RCC_OscConfig+0x350>
 800448a:	4bbc      	ldr	r3, [pc, #752]	; (800477c <HAL_RCC_OscConfig+0x63c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	e013      	b.n	80044b8 <HAL_RCC_OscConfig+0x378>
 8004490:	2302      	movs	r3, #2
 8004492:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004496:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800449a:	fa93 f3a3 	rbit	r3, r3
 800449e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80044a2:	2302      	movs	r3, #2
 80044a4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80044a8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80044ac:	fa93 f3a3 	rbit	r3, r3
 80044b0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80044b4:	4bb1      	ldr	r3, [pc, #708]	; (800477c <HAL_RCC_OscConfig+0x63c>)
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	2202      	movs	r2, #2
 80044ba:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80044be:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80044c2:	fa92 f2a2 	rbit	r2, r2
 80044c6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80044ca:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80044ce:	fab2 f282 	clz	r2, r2
 80044d2:	b2d2      	uxtb	r2, r2
 80044d4:	f042 0220 	orr.w	r2, r2, #32
 80044d8:	b2d2      	uxtb	r2, r2
 80044da:	f002 021f 	and.w	r2, r2, #31
 80044de:	2101      	movs	r1, #1
 80044e0:	fa01 f202 	lsl.w	r2, r1, r2
 80044e4:	4013      	ands	r3, r2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d007      	beq.n	80044fa <HAL_RCC_OscConfig+0x3ba>
 80044ea:	1d3b      	adds	r3, r7, #4
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d002      	beq.n	80044fa <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	f000 bd31 	b.w	8004f5c <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044fa:	4ba0      	ldr	r3, [pc, #640]	; (800477c <HAL_RCC_OscConfig+0x63c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004502:	1d3b      	adds	r3, r7, #4
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	21f8      	movs	r1, #248	; 0xf8
 800450a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800450e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004512:	fa91 f1a1 	rbit	r1, r1
 8004516:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800451a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800451e:	fab1 f181 	clz	r1, r1
 8004522:	b2c9      	uxtb	r1, r1
 8004524:	408b      	lsls	r3, r1
 8004526:	4995      	ldr	r1, [pc, #596]	; (800477c <HAL_RCC_OscConfig+0x63c>)
 8004528:	4313      	orrs	r3, r2
 800452a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800452c:	e0f5      	b.n	800471a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800452e:	1d3b      	adds	r3, r7, #4
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 8085 	beq.w	8004644 <HAL_RCC_OscConfig+0x504>
 800453a:	2301      	movs	r3, #1
 800453c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004540:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004544:	fa93 f3a3 	rbit	r3, r3
 8004548:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800454c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004550:	fab3 f383 	clz	r3, r3
 8004554:	b2db      	uxtb	r3, r3
 8004556:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800455a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	461a      	mov	r2, r3
 8004562:	2301      	movs	r3, #1
 8004564:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004566:	f7fd ff01 	bl	800236c <HAL_GetTick>
 800456a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800456e:	e00a      	b.n	8004586 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004570:	f7fd fefc 	bl	800236c <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d902      	bls.n	8004586 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	f000 bceb 	b.w	8004f5c <HAL_RCC_OscConfig+0xe1c>
 8004586:	2302      	movs	r3, #2
 8004588:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004590:	fa93 f3a3 	rbit	r3, r3
 8004594:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8004598:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800459c:	fab3 f383 	clz	r3, r3
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	095b      	lsrs	r3, r3, #5
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	f043 0301 	orr.w	r3, r3, #1
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d102      	bne.n	80045b6 <HAL_RCC_OscConfig+0x476>
 80045b0:	4b72      	ldr	r3, [pc, #456]	; (800477c <HAL_RCC_OscConfig+0x63c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	e013      	b.n	80045de <HAL_RCC_OscConfig+0x49e>
 80045b6:	2302      	movs	r3, #2
 80045b8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045bc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80045c0:	fa93 f3a3 	rbit	r3, r3
 80045c4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80045c8:	2302      	movs	r3, #2
 80045ca:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80045ce:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80045d2:	fa93 f3a3 	rbit	r3, r3
 80045d6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80045da:	4b68      	ldr	r3, [pc, #416]	; (800477c <HAL_RCC_OscConfig+0x63c>)
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	2202      	movs	r2, #2
 80045e0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80045e4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80045e8:	fa92 f2a2 	rbit	r2, r2
 80045ec:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80045f0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80045f4:	fab2 f282 	clz	r2, r2
 80045f8:	b2d2      	uxtb	r2, r2
 80045fa:	f042 0220 	orr.w	r2, r2, #32
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	f002 021f 	and.w	r2, r2, #31
 8004604:	2101      	movs	r1, #1
 8004606:	fa01 f202 	lsl.w	r2, r1, r2
 800460a:	4013      	ands	r3, r2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0af      	beq.n	8004570 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004610:	4b5a      	ldr	r3, [pc, #360]	; (800477c <HAL_RCC_OscConfig+0x63c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004618:	1d3b      	adds	r3, r7, #4
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	21f8      	movs	r1, #248	; 0xf8
 8004620:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004624:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8004628:	fa91 f1a1 	rbit	r1, r1
 800462c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8004630:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004634:	fab1 f181 	clz	r1, r1
 8004638:	b2c9      	uxtb	r1, r1
 800463a:	408b      	lsls	r3, r1
 800463c:	494f      	ldr	r1, [pc, #316]	; (800477c <HAL_RCC_OscConfig+0x63c>)
 800463e:	4313      	orrs	r3, r2
 8004640:	600b      	str	r3, [r1, #0]
 8004642:	e06a      	b.n	800471a <HAL_RCC_OscConfig+0x5da>
 8004644:	2301      	movs	r3, #1
 8004646:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800464e:	fa93 f3a3 	rbit	r3, r3
 8004652:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8004656:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800465a:	fab3 f383 	clz	r3, r3
 800465e:	b2db      	uxtb	r3, r3
 8004660:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004664:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	461a      	mov	r2, r3
 800466c:	2300      	movs	r3, #0
 800466e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004670:	f7fd fe7c 	bl	800236c <HAL_GetTick>
 8004674:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004678:	e00a      	b.n	8004690 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800467a:	f7fd fe77 	bl	800236c <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d902      	bls.n	8004690 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	f000 bc66 	b.w	8004f5c <HAL_RCC_OscConfig+0xe1c>
 8004690:	2302      	movs	r3, #2
 8004692:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004696:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800469a:	fa93 f3a3 	rbit	r3, r3
 800469e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80046a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046a6:	fab3 f383 	clz	r3, r3
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	095b      	lsrs	r3, r3, #5
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	f043 0301 	orr.w	r3, r3, #1
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d102      	bne.n	80046c0 <HAL_RCC_OscConfig+0x580>
 80046ba:	4b30      	ldr	r3, [pc, #192]	; (800477c <HAL_RCC_OscConfig+0x63c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	e013      	b.n	80046e8 <HAL_RCC_OscConfig+0x5a8>
 80046c0:	2302      	movs	r3, #2
 80046c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046ca:	fa93 f3a3 	rbit	r3, r3
 80046ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80046d2:	2302      	movs	r3, #2
 80046d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80046d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80046dc:	fa93 f3a3 	rbit	r3, r3
 80046e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80046e4:	4b25      	ldr	r3, [pc, #148]	; (800477c <HAL_RCC_OscConfig+0x63c>)
 80046e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e8:	2202      	movs	r2, #2
 80046ea:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80046ee:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80046f2:	fa92 f2a2 	rbit	r2, r2
 80046f6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80046fa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80046fe:	fab2 f282 	clz	r2, r2
 8004702:	b2d2      	uxtb	r2, r2
 8004704:	f042 0220 	orr.w	r2, r2, #32
 8004708:	b2d2      	uxtb	r2, r2
 800470a:	f002 021f 	and.w	r2, r2, #31
 800470e:	2101      	movs	r1, #1
 8004710:	fa01 f202 	lsl.w	r2, r1, r2
 8004714:	4013      	ands	r3, r2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1af      	bne.n	800467a <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800471a:	1d3b      	adds	r3, r7, #4
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0308 	and.w	r3, r3, #8
 8004724:	2b00      	cmp	r3, #0
 8004726:	f000 80da 	beq.w	80048de <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800472a:	1d3b      	adds	r3, r7, #4
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d069      	beq.n	8004808 <HAL_RCC_OscConfig+0x6c8>
 8004734:	2301      	movs	r3, #1
 8004736:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800473a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800473e:	fa93 f3a3 	rbit	r3, r3
 8004742:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8004746:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800474a:	fab3 f383 	clz	r3, r3
 800474e:	b2db      	uxtb	r3, r3
 8004750:	461a      	mov	r2, r3
 8004752:	4b0b      	ldr	r3, [pc, #44]	; (8004780 <HAL_RCC_OscConfig+0x640>)
 8004754:	4413      	add	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	461a      	mov	r2, r3
 800475a:	2301      	movs	r3, #1
 800475c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800475e:	f7fd fe05 	bl	800236c <HAL_GetTick>
 8004762:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004766:	e00d      	b.n	8004784 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004768:	f7fd fe00 	bl	800236c <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d905      	bls.n	8004784 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e3ef      	b.n	8004f5c <HAL_RCC_OscConfig+0xe1c>
 800477c:	40021000 	.word	0x40021000
 8004780:	10908120 	.word	0x10908120
 8004784:	2302      	movs	r3, #2
 8004786:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800478e:	fa93 f2a3 	rbit	r2, r3
 8004792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800479c:	2202      	movs	r2, #2
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	fa93 f2a3 	rbit	r2, r3
 80047aa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80047ae:	601a      	str	r2, [r3, #0]
 80047b0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80047b4:	2202      	movs	r2, #2
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	fa93 f2a3 	rbit	r2, r3
 80047c2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80047c6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047c8:	4ba4      	ldr	r3, [pc, #656]	; (8004a5c <HAL_RCC_OscConfig+0x91c>)
 80047ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047cc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80047d0:	2102      	movs	r1, #2
 80047d2:	6019      	str	r1, [r3, #0]
 80047d4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	fa93 f1a3 	rbit	r1, r3
 80047de:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80047e2:	6019      	str	r1, [r3, #0]
  return result;
 80047e4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	fab3 f383 	clz	r3, r3
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	f003 031f 	and.w	r3, r3, #31
 80047fa:	2101      	movs	r1, #1
 80047fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004800:	4013      	ands	r3, r2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0b0      	beq.n	8004768 <HAL_RCC_OscConfig+0x628>
 8004806:	e06a      	b.n	80048de <HAL_RCC_OscConfig+0x79e>
 8004808:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800480c:	2201      	movs	r2, #1
 800480e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004810:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	fa93 f2a3 	rbit	r2, r3
 800481a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800481e:	601a      	str	r2, [r3, #0]
  return result;
 8004820:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004824:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004826:	fab3 f383 	clz	r3, r3
 800482a:	b2db      	uxtb	r3, r3
 800482c:	461a      	mov	r2, r3
 800482e:	4b8c      	ldr	r3, [pc, #560]	; (8004a60 <HAL_RCC_OscConfig+0x920>)
 8004830:	4413      	add	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	461a      	mov	r2, r3
 8004836:	2300      	movs	r3, #0
 8004838:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800483a:	f7fd fd97 	bl	800236c <HAL_GetTick>
 800483e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004842:	e009      	b.n	8004858 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004844:	f7fd fd92 	bl	800236c <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	2b02      	cmp	r3, #2
 8004852:	d901      	bls.n	8004858 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e381      	b.n	8004f5c <HAL_RCC_OscConfig+0xe1c>
 8004858:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800485c:	2202      	movs	r2, #2
 800485e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004860:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	fa93 f2a3 	rbit	r2, r3
 800486a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800486e:	601a      	str	r2, [r3, #0]
 8004870:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004874:	2202      	movs	r2, #2
 8004876:	601a      	str	r2, [r3, #0]
 8004878:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	fa93 f2a3 	rbit	r2, r3
 8004882:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004886:	601a      	str	r2, [r3, #0]
 8004888:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800488c:	2202      	movs	r2, #2
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	fa93 f2a3 	rbit	r2, r3
 800489a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800489e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048a0:	4b6e      	ldr	r3, [pc, #440]	; (8004a5c <HAL_RCC_OscConfig+0x91c>)
 80048a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80048a8:	2102      	movs	r1, #2
 80048aa:	6019      	str	r1, [r3, #0]
 80048ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	fa93 f1a3 	rbit	r1, r3
 80048b6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80048ba:	6019      	str	r1, [r3, #0]
  return result;
 80048bc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	fab3 f383 	clz	r3, r3
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	f003 031f 	and.w	r3, r3, #31
 80048d2:	2101      	movs	r1, #1
 80048d4:	fa01 f303 	lsl.w	r3, r1, r3
 80048d8:	4013      	ands	r3, r2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1b2      	bne.n	8004844 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048de:	1d3b      	adds	r3, r7, #4
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 8157 	beq.w	8004b9c <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048ee:	2300      	movs	r3, #0
 80048f0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048f4:	4b59      	ldr	r3, [pc, #356]	; (8004a5c <HAL_RCC_OscConfig+0x91c>)
 80048f6:	69db      	ldr	r3, [r3, #28]
 80048f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d112      	bne.n	8004926 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004900:	4b56      	ldr	r3, [pc, #344]	; (8004a5c <HAL_RCC_OscConfig+0x91c>)
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	4a55      	ldr	r2, [pc, #340]	; (8004a5c <HAL_RCC_OscConfig+0x91c>)
 8004906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800490a:	61d3      	str	r3, [r2, #28]
 800490c:	4b53      	ldr	r3, [pc, #332]	; (8004a5c <HAL_RCC_OscConfig+0x91c>)
 800490e:	69db      	ldr	r3, [r3, #28]
 8004910:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004914:	f107 030c 	add.w	r3, r7, #12
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	f107 030c 	add.w	r3, r7, #12
 800491e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004920:	2301      	movs	r3, #1
 8004922:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004926:	4b4f      	ldr	r3, [pc, #316]	; (8004a64 <HAL_RCC_OscConfig+0x924>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492e:	2b00      	cmp	r3, #0
 8004930:	d11a      	bne.n	8004968 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004932:	4b4c      	ldr	r3, [pc, #304]	; (8004a64 <HAL_RCC_OscConfig+0x924>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a4b      	ldr	r2, [pc, #300]	; (8004a64 <HAL_RCC_OscConfig+0x924>)
 8004938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800493c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800493e:	f7fd fd15 	bl	800236c <HAL_GetTick>
 8004942:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004946:	e009      	b.n	800495c <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004948:	f7fd fd10 	bl	800236c <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b64      	cmp	r3, #100	; 0x64
 8004956:	d901      	bls.n	800495c <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e2ff      	b.n	8004f5c <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800495c:	4b41      	ldr	r3, [pc, #260]	; (8004a64 <HAL_RCC_OscConfig+0x924>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004964:	2b00      	cmp	r3, #0
 8004966:	d0ef      	beq.n	8004948 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004968:	1d3b      	adds	r3, r7, #4
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d106      	bne.n	8004980 <HAL_RCC_OscConfig+0x840>
 8004972:	4b3a      	ldr	r3, [pc, #232]	; (8004a5c <HAL_RCC_OscConfig+0x91c>)
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	4a39      	ldr	r2, [pc, #228]	; (8004a5c <HAL_RCC_OscConfig+0x91c>)
 8004978:	f043 0301 	orr.w	r3, r3, #1
 800497c:	6213      	str	r3, [r2, #32]
 800497e:	e02f      	b.n	80049e0 <HAL_RCC_OscConfig+0x8a0>
 8004980:	1d3b      	adds	r3, r7, #4
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10c      	bne.n	80049a4 <HAL_RCC_OscConfig+0x864>
 800498a:	4b34      	ldr	r3, [pc, #208]	; (8004a5c <HAL_RCC_OscConfig+0x91c>)
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	4a33      	ldr	r2, [pc, #204]	; (8004a5c <HAL_RCC_OscConfig+0x91c>)
 8004990:	f023 0301 	bic.w	r3, r3, #1
 8004994:	6213      	str	r3, [r2, #32]
 8004996:	4b31      	ldr	r3, [pc, #196]	; (8004a5c <HAL_RCC_OscConfig+0x91c>)
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	4a30      	ldr	r2, [pc, #192]	; (8004a5c <HAL_RCC_OscConfig+0x91c>)
 800499c:	f023 0304 	bic.w	r3, r3, #4
 80049a0:	6213      	str	r3, [r2, #32]
 80049a2:	e01d      	b.n	80049e0 <HAL_RCC_OscConfig+0x8a0>
 80049a4:	1d3b      	adds	r3, r7, #4
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	2b05      	cmp	r3, #5
 80049ac:	d10c      	bne.n	80049c8 <HAL_RCC_OscConfig+0x888>
 80049ae:	4b2b      	ldr	r3, [pc, #172]	; (8004a5c <HAL_RCC_OscConfig+0x91c>)
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	4a2a      	ldr	r2, [pc, #168]	; (8004a5c <HAL_RCC_OscConfig+0x91c>)
 80049b4:	f043 0304 	orr.w	r3, r3, #4
 80049b8:	6213      	str	r3, [r2, #32]
 80049ba:	4b28      	ldr	r3, [pc, #160]	; (8004a5c <HAL_RCC_OscConfig+0x91c>)
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	4a27      	ldr	r2, [pc, #156]	; (8004a5c <HAL_RCC_OscConfig+0x91c>)
 80049c0:	f043 0301 	orr.w	r3, r3, #1
 80049c4:	6213      	str	r3, [r2, #32]
 80049c6:	e00b      	b.n	80049e0 <HAL_RCC_OscConfig+0x8a0>
 80049c8:	4b24      	ldr	r3, [pc, #144]	; (8004a5c <HAL_RCC_OscConfig+0x91c>)
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	4a23      	ldr	r2, [pc, #140]	; (8004a5c <HAL_RCC_OscConfig+0x91c>)
 80049ce:	f023 0301 	bic.w	r3, r3, #1
 80049d2:	6213      	str	r3, [r2, #32]
 80049d4:	4b21      	ldr	r3, [pc, #132]	; (8004a5c <HAL_RCC_OscConfig+0x91c>)
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	4a20      	ldr	r2, [pc, #128]	; (8004a5c <HAL_RCC_OscConfig+0x91c>)
 80049da:	f023 0304 	bic.w	r3, r3, #4
 80049de:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049e0:	1d3b      	adds	r3, r7, #4
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d06a      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ea:	f7fd fcbf 	bl	800236c <HAL_GetTick>
 80049ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049f2:	e00b      	b.n	8004a0c <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049f4:	f7fd fcba 	bl	800236c <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d901      	bls.n	8004a0c <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e2a7      	b.n	8004f5c <HAL_RCC_OscConfig+0xe1c>
 8004a0c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004a10:	2202      	movs	r2, #2
 8004a12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a14:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	fa93 f2a3 	rbit	r2, r3
 8004a1e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004a28:	2202      	movs	r2, #2
 8004a2a:	601a      	str	r2, [r3, #0]
 8004a2c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	fa93 f2a3 	rbit	r2, r3
 8004a36:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004a3a:	601a      	str	r2, [r3, #0]
  return result;
 8004a3c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004a40:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a42:	fab3 f383 	clz	r3, r3
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	095b      	lsrs	r3, r3, #5
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	f043 0302 	orr.w	r3, r3, #2
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d108      	bne.n	8004a68 <HAL_RCC_OscConfig+0x928>
 8004a56:	4b01      	ldr	r3, [pc, #4]	; (8004a5c <HAL_RCC_OscConfig+0x91c>)
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	e013      	b.n	8004a84 <HAL_RCC_OscConfig+0x944>
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	10908120 	.word	0x10908120
 8004a64:	40007000 	.word	0x40007000
 8004a68:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004a6c:	2202      	movs	r2, #2
 8004a6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a70:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	fa93 f2a3 	rbit	r2, r3
 8004a7a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	4bc0      	ldr	r3, [pc, #768]	; (8004d84 <HAL_RCC_OscConfig+0xc44>)
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004a88:	2102      	movs	r1, #2
 8004a8a:	6011      	str	r1, [r2, #0]
 8004a8c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004a90:	6812      	ldr	r2, [r2, #0]
 8004a92:	fa92 f1a2 	rbit	r1, r2
 8004a96:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004a9a:	6011      	str	r1, [r2, #0]
  return result;
 8004a9c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004aa0:	6812      	ldr	r2, [r2, #0]
 8004aa2:	fab2 f282 	clz	r2, r2
 8004aa6:	b2d2      	uxtb	r2, r2
 8004aa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004aac:	b2d2      	uxtb	r2, r2
 8004aae:	f002 021f 	and.w	r2, r2, #31
 8004ab2:	2101      	movs	r1, #1
 8004ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ab8:	4013      	ands	r3, r2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d09a      	beq.n	80049f4 <HAL_RCC_OscConfig+0x8b4>
 8004abe:	e063      	b.n	8004b88 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ac0:	f7fd fc54 	bl	800236c <HAL_GetTick>
 8004ac4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ac8:	e00b      	b.n	8004ae2 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aca:	f7fd fc4f 	bl	800236c <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e23c      	b.n	8004f5c <HAL_RCC_OscConfig+0xe1c>
 8004ae2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	fa93 f2a3 	rbit	r2, r3
 8004af4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004af8:	601a      	str	r2, [r3, #0]
 8004afa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004afe:	2202      	movs	r2, #2
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	fa93 f2a3 	rbit	r2, r3
 8004b0c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004b10:	601a      	str	r2, [r3, #0]
  return result;
 8004b12:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004b16:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b18:	fab3 f383 	clz	r3, r3
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	095b      	lsrs	r3, r3, #5
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	f043 0302 	orr.w	r3, r3, #2
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d102      	bne.n	8004b32 <HAL_RCC_OscConfig+0x9f2>
 8004b2c:	4b95      	ldr	r3, [pc, #596]	; (8004d84 <HAL_RCC_OscConfig+0xc44>)
 8004b2e:	6a1b      	ldr	r3, [r3, #32]
 8004b30:	e00d      	b.n	8004b4e <HAL_RCC_OscConfig+0xa0e>
 8004b32:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004b36:	2202      	movs	r2, #2
 8004b38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b3a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	fa93 f2a3 	rbit	r2, r3
 8004b44:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	4b8e      	ldr	r3, [pc, #568]	; (8004d84 <HAL_RCC_OscConfig+0xc44>)
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8004b52:	2102      	movs	r1, #2
 8004b54:	6011      	str	r1, [r2, #0]
 8004b56:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8004b5a:	6812      	ldr	r2, [r2, #0]
 8004b5c:	fa92 f1a2 	rbit	r1, r2
 8004b60:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004b64:	6011      	str	r1, [r2, #0]
  return result;
 8004b66:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004b6a:	6812      	ldr	r2, [r2, #0]
 8004b6c:	fab2 f282 	clz	r2, r2
 8004b70:	b2d2      	uxtb	r2, r2
 8004b72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b76:	b2d2      	uxtb	r2, r2
 8004b78:	f002 021f 	and.w	r2, r2, #31
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8004b82:	4013      	ands	r3, r2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1a0      	bne.n	8004aca <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b88:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d105      	bne.n	8004b9c <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b90:	4b7c      	ldr	r3, [pc, #496]	; (8004d84 <HAL_RCC_OscConfig+0xc44>)
 8004b92:	69db      	ldr	r3, [r3, #28]
 8004b94:	4a7b      	ldr	r2, [pc, #492]	; (8004d84 <HAL_RCC_OscConfig+0xc44>)
 8004b96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b9a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b9c:	1d3b      	adds	r3, r7, #4
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f000 81d9 	beq.w	8004f5a <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ba8:	4b76      	ldr	r3, [pc, #472]	; (8004d84 <HAL_RCC_OscConfig+0xc44>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f003 030c 	and.w	r3, r3, #12
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	f000 81a6 	beq.w	8004f02 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bb6:	1d3b      	adds	r3, r7, #4
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	f040 811e 	bne.w	8004dfe <HAL_RCC_OscConfig+0xcbe>
 8004bc2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004bc6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004bca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bcc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	fa93 f2a3 	rbit	r2, r3
 8004bd6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004bda:	601a      	str	r2, [r3, #0]
  return result;
 8004bdc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004be0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004be2:	fab3 f383 	clz	r3, r3
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004bec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf8:	f7fd fbb8 	bl	800236c <HAL_GetTick>
 8004bfc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c00:	e009      	b.n	8004c16 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c02:	f7fd fbb3 	bl	800236c <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e1a2      	b.n	8004f5c <HAL_RCC_OscConfig+0xe1c>
 8004c16:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004c1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c20:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	fa93 f2a3 	rbit	r2, r3
 8004c2a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004c2e:	601a      	str	r2, [r3, #0]
  return result;
 8004c30:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004c34:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c36:	fab3 f383 	clz	r3, r3
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	095b      	lsrs	r3, r3, #5
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	f043 0301 	orr.w	r3, r3, #1
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d102      	bne.n	8004c50 <HAL_RCC_OscConfig+0xb10>
 8004c4a:	4b4e      	ldr	r3, [pc, #312]	; (8004d84 <HAL_RCC_OscConfig+0xc44>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	e01b      	b.n	8004c88 <HAL_RCC_OscConfig+0xb48>
 8004c50:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004c54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c5a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	fa93 f2a3 	rbit	r2, r3
 8004c64:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004c68:	601a      	str	r2, [r3, #0]
 8004c6a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004c6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	fa93 f2a3 	rbit	r2, r3
 8004c7e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	4b3f      	ldr	r3, [pc, #252]	; (8004d84 <HAL_RCC_OscConfig+0xc44>)
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004c8c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004c90:	6011      	str	r1, [r2, #0]
 8004c92:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004c96:	6812      	ldr	r2, [r2, #0]
 8004c98:	fa92 f1a2 	rbit	r1, r2
 8004c9c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004ca0:	6011      	str	r1, [r2, #0]
  return result;
 8004ca2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004ca6:	6812      	ldr	r2, [r2, #0]
 8004ca8:	fab2 f282 	clz	r2, r2
 8004cac:	b2d2      	uxtb	r2, r2
 8004cae:	f042 0220 	orr.w	r2, r2, #32
 8004cb2:	b2d2      	uxtb	r2, r2
 8004cb4:	f002 021f 	and.w	r2, r2, #31
 8004cb8:	2101      	movs	r1, #1
 8004cba:	fa01 f202 	lsl.w	r2, r1, r2
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d19e      	bne.n	8004c02 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cc4:	4b2f      	ldr	r3, [pc, #188]	; (8004d84 <HAL_RCC_OscConfig+0xc44>)
 8004cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc8:	f023 020f 	bic.w	r2, r3, #15
 8004ccc:	1d3b      	adds	r3, r7, #4
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd2:	492c      	ldr	r1, [pc, #176]	; (8004d84 <HAL_RCC_OscConfig+0xc44>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004cd8:	4b2a      	ldr	r3, [pc, #168]	; (8004d84 <HAL_RCC_OscConfig+0xc44>)
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004ce0:	1d3b      	adds	r3, r7, #4
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6a19      	ldr	r1, [r3, #32]
 8004ce6:	1d3b      	adds	r3, r7, #4
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	69db      	ldr	r3, [r3, #28]
 8004cec:	430b      	orrs	r3, r1
 8004cee:	4925      	ldr	r1, [pc, #148]	; (8004d84 <HAL_RCC_OscConfig+0xc44>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	604b      	str	r3, [r1, #4]
 8004cf4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004cf8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004cfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cfe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	fa93 f2a3 	rbit	r2, r3
 8004d08:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004d0c:	601a      	str	r2, [r3, #0]
  return result;
 8004d0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004d12:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d14:	fab3 f383 	clz	r3, r3
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d1e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	461a      	mov	r2, r3
 8004d26:	2301      	movs	r3, #1
 8004d28:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d2a:	f7fd fb1f 	bl	800236c <HAL_GetTick>
 8004d2e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d32:	e009      	b.n	8004d48 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d34:	f7fd fb1a 	bl	800236c <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d901      	bls.n	8004d48 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e109      	b.n	8004f5c <HAL_RCC_OscConfig+0xe1c>
 8004d48:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004d4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d52:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	fa93 f2a3 	rbit	r2, r3
 8004d5c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004d60:	601a      	str	r2, [r3, #0]
  return result;
 8004d62:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004d66:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d68:	fab3 f383 	clz	r3, r3
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	095b      	lsrs	r3, r3, #5
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	f043 0301 	orr.w	r3, r3, #1
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d105      	bne.n	8004d88 <HAL_RCC_OscConfig+0xc48>
 8004d7c:	4b01      	ldr	r3, [pc, #4]	; (8004d84 <HAL_RCC_OscConfig+0xc44>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	e01e      	b.n	8004dc0 <HAL_RCC_OscConfig+0xc80>
 8004d82:	bf00      	nop
 8004d84:	40021000 	.word	0x40021000
 8004d88:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004d8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d92:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	fa93 f2a3 	rbit	r2, r3
 8004d9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004da0:	601a      	str	r2, [r3, #0]
 8004da2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004da6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	fa93 f2a3 	rbit	r2, r3
 8004db6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	4b6a      	ldr	r3, [pc, #424]	; (8004f68 <HAL_RCC_OscConfig+0xe28>)
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004dc4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004dc8:	6011      	str	r1, [r2, #0]
 8004dca:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004dce:	6812      	ldr	r2, [r2, #0]
 8004dd0:	fa92 f1a2 	rbit	r1, r2
 8004dd4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004dd8:	6011      	str	r1, [r2, #0]
  return result;
 8004dda:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004dde:	6812      	ldr	r2, [r2, #0]
 8004de0:	fab2 f282 	clz	r2, r2
 8004de4:	b2d2      	uxtb	r2, r2
 8004de6:	f042 0220 	orr.w	r2, r2, #32
 8004dea:	b2d2      	uxtb	r2, r2
 8004dec:	f002 021f 	and.w	r2, r2, #31
 8004df0:	2101      	movs	r1, #1
 8004df2:	fa01 f202 	lsl.w	r2, r1, r2
 8004df6:	4013      	ands	r3, r2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d09b      	beq.n	8004d34 <HAL_RCC_OscConfig+0xbf4>
 8004dfc:	e0ad      	b.n	8004f5a <HAL_RCC_OscConfig+0xe1a>
 8004dfe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004e02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e08:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	fa93 f2a3 	rbit	r2, r3
 8004e12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004e16:	601a      	str	r2, [r3, #0]
  return result;
 8004e18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004e1c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e1e:	fab3 f383 	clz	r3, r3
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	461a      	mov	r2, r3
 8004e30:	2300      	movs	r3, #0
 8004e32:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e34:	f7fd fa9a 	bl	800236c <HAL_GetTick>
 8004e38:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e3c:	e009      	b.n	8004e52 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e3e:	f7fd fa95 	bl	800236c <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d901      	bls.n	8004e52 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e084      	b.n	8004f5c <HAL_RCC_OscConfig+0xe1c>
 8004e52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	fa93 f2a3 	rbit	r2, r3
 8004e66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e6a:	601a      	str	r2, [r3, #0]
  return result;
 8004e6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e70:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e72:	fab3 f383 	clz	r3, r3
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	095b      	lsrs	r3, r3, #5
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	f043 0301 	orr.w	r3, r3, #1
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d102      	bne.n	8004e8c <HAL_RCC_OscConfig+0xd4c>
 8004e86:	4b38      	ldr	r3, [pc, #224]	; (8004f68 <HAL_RCC_OscConfig+0xe28>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	e01b      	b.n	8004ec4 <HAL_RCC_OscConfig+0xd84>
 8004e8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	fa93 f2a3 	rbit	r2, r3
 8004ea0:	f107 0320 	add.w	r3, r7, #32
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	f107 031c 	add.w	r3, r7, #28
 8004eaa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	f107 031c 	add.w	r3, r7, #28
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	fa93 f2a3 	rbit	r2, r3
 8004eba:	f107 0318 	add.w	r3, r7, #24
 8004ebe:	601a      	str	r2, [r3, #0]
 8004ec0:	4b29      	ldr	r3, [pc, #164]	; (8004f68 <HAL_RCC_OscConfig+0xe28>)
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec4:	f107 0214 	add.w	r2, r7, #20
 8004ec8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004ecc:	6011      	str	r1, [r2, #0]
 8004ece:	f107 0214 	add.w	r2, r7, #20
 8004ed2:	6812      	ldr	r2, [r2, #0]
 8004ed4:	fa92 f1a2 	rbit	r1, r2
 8004ed8:	f107 0210 	add.w	r2, r7, #16
 8004edc:	6011      	str	r1, [r2, #0]
  return result;
 8004ede:	f107 0210 	add.w	r2, r7, #16
 8004ee2:	6812      	ldr	r2, [r2, #0]
 8004ee4:	fab2 f282 	clz	r2, r2
 8004ee8:	b2d2      	uxtb	r2, r2
 8004eea:	f042 0220 	orr.w	r2, r2, #32
 8004eee:	b2d2      	uxtb	r2, r2
 8004ef0:	f002 021f 	and.w	r2, r2, #31
 8004ef4:	2101      	movs	r1, #1
 8004ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8004efa:	4013      	ands	r3, r2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d19e      	bne.n	8004e3e <HAL_RCC_OscConfig+0xcfe>
 8004f00:	e02b      	b.n	8004f5a <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f02:	1d3b      	adds	r3, r7, #4
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d101      	bne.n	8004f10 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e025      	b.n	8004f5c <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f10:	4b15      	ldr	r3, [pc, #84]	; (8004f68 <HAL_RCC_OscConfig+0xe28>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004f18:	4b13      	ldr	r3, [pc, #76]	; (8004f68 <HAL_RCC_OscConfig+0xe28>)
 8004f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004f20:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f24:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004f28:	1d3b      	adds	r3, r7, #4
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	69db      	ldr	r3, [r3, #28]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d111      	bne.n	8004f56 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004f32:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004f3a:	1d3b      	adds	r3, r7, #4
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d108      	bne.n	8004f56 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004f44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f48:	f003 020f 	and.w	r2, r3, #15
 8004f4c:	1d3b      	adds	r3, r7, #4
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d001      	beq.n	8004f5a <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e000      	b.n	8004f5c <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	40021000 	.word	0x40021000

08004f6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b09e      	sub	sp, #120	; 0x78
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d101      	bne.n	8004f84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e162      	b.n	800524a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f84:	4b90      	ldr	r3, [pc, #576]	; (80051c8 <HAL_RCC_ClockConfig+0x25c>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0307 	and.w	r3, r3, #7
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d910      	bls.n	8004fb4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f92:	4b8d      	ldr	r3, [pc, #564]	; (80051c8 <HAL_RCC_ClockConfig+0x25c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f023 0207 	bic.w	r2, r3, #7
 8004f9a:	498b      	ldr	r1, [pc, #556]	; (80051c8 <HAL_RCC_ClockConfig+0x25c>)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fa2:	4b89      	ldr	r3, [pc, #548]	; (80051c8 <HAL_RCC_ClockConfig+0x25c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0307 	and.w	r3, r3, #7
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d001      	beq.n	8004fb4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e14a      	b.n	800524a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d008      	beq.n	8004fd2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fc0:	4b82      	ldr	r3, [pc, #520]	; (80051cc <HAL_RCC_ClockConfig+0x260>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	497f      	ldr	r1, [pc, #508]	; (80051cc <HAL_RCC_ClockConfig+0x260>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f000 80dc 	beq.w	8005198 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d13c      	bne.n	8005062 <HAL_RCC_ClockConfig+0xf6>
 8004fe8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ff0:	fa93 f3a3 	rbit	r3, r3
 8004ff4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ff8:	fab3 f383 	clz	r3, r3
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	095b      	lsrs	r3, r3, #5
 8005000:	b2db      	uxtb	r3, r3
 8005002:	f043 0301 	orr.w	r3, r3, #1
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b01      	cmp	r3, #1
 800500a:	d102      	bne.n	8005012 <HAL_RCC_ClockConfig+0xa6>
 800500c:	4b6f      	ldr	r3, [pc, #444]	; (80051cc <HAL_RCC_ClockConfig+0x260>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	e00f      	b.n	8005032 <HAL_RCC_ClockConfig+0xc6>
 8005012:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005016:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005018:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800501a:	fa93 f3a3 	rbit	r3, r3
 800501e:	667b      	str	r3, [r7, #100]	; 0x64
 8005020:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005024:	663b      	str	r3, [r7, #96]	; 0x60
 8005026:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005028:	fa93 f3a3 	rbit	r3, r3
 800502c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800502e:	4b67      	ldr	r3, [pc, #412]	; (80051cc <HAL_RCC_ClockConfig+0x260>)
 8005030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005032:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005036:	65ba      	str	r2, [r7, #88]	; 0x58
 8005038:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800503a:	fa92 f2a2 	rbit	r2, r2
 800503e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005040:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005042:	fab2 f282 	clz	r2, r2
 8005046:	b2d2      	uxtb	r2, r2
 8005048:	f042 0220 	orr.w	r2, r2, #32
 800504c:	b2d2      	uxtb	r2, r2
 800504e:	f002 021f 	and.w	r2, r2, #31
 8005052:	2101      	movs	r1, #1
 8005054:	fa01 f202 	lsl.w	r2, r1, r2
 8005058:	4013      	ands	r3, r2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d17b      	bne.n	8005156 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e0f3      	b.n	800524a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	2b02      	cmp	r3, #2
 8005068:	d13c      	bne.n	80050e4 <HAL_RCC_ClockConfig+0x178>
 800506a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800506e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005070:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005072:	fa93 f3a3 	rbit	r3, r3
 8005076:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800507a:	fab3 f383 	clz	r3, r3
 800507e:	b2db      	uxtb	r3, r3
 8005080:	095b      	lsrs	r3, r3, #5
 8005082:	b2db      	uxtb	r3, r3
 8005084:	f043 0301 	orr.w	r3, r3, #1
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b01      	cmp	r3, #1
 800508c:	d102      	bne.n	8005094 <HAL_RCC_ClockConfig+0x128>
 800508e:	4b4f      	ldr	r3, [pc, #316]	; (80051cc <HAL_RCC_ClockConfig+0x260>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	e00f      	b.n	80050b4 <HAL_RCC_ClockConfig+0x148>
 8005094:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005098:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800509a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800509c:	fa93 f3a3 	rbit	r3, r3
 80050a0:	647b      	str	r3, [r7, #68]	; 0x44
 80050a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050a6:	643b      	str	r3, [r7, #64]	; 0x40
 80050a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050aa:	fa93 f3a3 	rbit	r3, r3
 80050ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050b0:	4b46      	ldr	r3, [pc, #280]	; (80051cc <HAL_RCC_ClockConfig+0x260>)
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050b8:	63ba      	str	r2, [r7, #56]	; 0x38
 80050ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050bc:	fa92 f2a2 	rbit	r2, r2
 80050c0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80050c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050c4:	fab2 f282 	clz	r2, r2
 80050c8:	b2d2      	uxtb	r2, r2
 80050ca:	f042 0220 	orr.w	r2, r2, #32
 80050ce:	b2d2      	uxtb	r2, r2
 80050d0:	f002 021f 	and.w	r2, r2, #31
 80050d4:	2101      	movs	r1, #1
 80050d6:	fa01 f202 	lsl.w	r2, r1, r2
 80050da:	4013      	ands	r3, r2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d13a      	bne.n	8005156 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e0b2      	b.n	800524a <HAL_RCC_ClockConfig+0x2de>
 80050e4:	2302      	movs	r3, #2
 80050e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ea:	fa93 f3a3 	rbit	r3, r3
 80050ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80050f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050f2:	fab3 f383 	clz	r3, r3
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	095b      	lsrs	r3, r3, #5
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	f043 0301 	orr.w	r3, r3, #1
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b01      	cmp	r3, #1
 8005104:	d102      	bne.n	800510c <HAL_RCC_ClockConfig+0x1a0>
 8005106:	4b31      	ldr	r3, [pc, #196]	; (80051cc <HAL_RCC_ClockConfig+0x260>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	e00d      	b.n	8005128 <HAL_RCC_ClockConfig+0x1bc>
 800510c:	2302      	movs	r3, #2
 800510e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005112:	fa93 f3a3 	rbit	r3, r3
 8005116:	627b      	str	r3, [r7, #36]	; 0x24
 8005118:	2302      	movs	r3, #2
 800511a:	623b      	str	r3, [r7, #32]
 800511c:	6a3b      	ldr	r3, [r7, #32]
 800511e:	fa93 f3a3 	rbit	r3, r3
 8005122:	61fb      	str	r3, [r7, #28]
 8005124:	4b29      	ldr	r3, [pc, #164]	; (80051cc <HAL_RCC_ClockConfig+0x260>)
 8005126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005128:	2202      	movs	r2, #2
 800512a:	61ba      	str	r2, [r7, #24]
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	fa92 f2a2 	rbit	r2, r2
 8005132:	617a      	str	r2, [r7, #20]
  return result;
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	fab2 f282 	clz	r2, r2
 800513a:	b2d2      	uxtb	r2, r2
 800513c:	f042 0220 	orr.w	r2, r2, #32
 8005140:	b2d2      	uxtb	r2, r2
 8005142:	f002 021f 	and.w	r2, r2, #31
 8005146:	2101      	movs	r1, #1
 8005148:	fa01 f202 	lsl.w	r2, r1, r2
 800514c:	4013      	ands	r3, r2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e079      	b.n	800524a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005156:	4b1d      	ldr	r3, [pc, #116]	; (80051cc <HAL_RCC_ClockConfig+0x260>)
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f023 0203 	bic.w	r2, r3, #3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	491a      	ldr	r1, [pc, #104]	; (80051cc <HAL_RCC_ClockConfig+0x260>)
 8005164:	4313      	orrs	r3, r2
 8005166:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005168:	f7fd f900 	bl	800236c <HAL_GetTick>
 800516c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800516e:	e00a      	b.n	8005186 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005170:	f7fd f8fc 	bl	800236c <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	f241 3288 	movw	r2, #5000	; 0x1388
 800517e:	4293      	cmp	r3, r2
 8005180:	d901      	bls.n	8005186 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e061      	b.n	800524a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005186:	4b11      	ldr	r3, [pc, #68]	; (80051cc <HAL_RCC_ClockConfig+0x260>)
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f003 020c 	and.w	r2, r3, #12
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	429a      	cmp	r2, r3
 8005196:	d1eb      	bne.n	8005170 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005198:	4b0b      	ldr	r3, [pc, #44]	; (80051c8 <HAL_RCC_ClockConfig+0x25c>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0307 	and.w	r3, r3, #7
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d214      	bcs.n	80051d0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051a6:	4b08      	ldr	r3, [pc, #32]	; (80051c8 <HAL_RCC_ClockConfig+0x25c>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f023 0207 	bic.w	r2, r3, #7
 80051ae:	4906      	ldr	r1, [pc, #24]	; (80051c8 <HAL_RCC_ClockConfig+0x25c>)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051b6:	4b04      	ldr	r3, [pc, #16]	; (80051c8 <HAL_RCC_ClockConfig+0x25c>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0307 	and.w	r3, r3, #7
 80051be:	683a      	ldr	r2, [r7, #0]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d005      	beq.n	80051d0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e040      	b.n	800524a <HAL_RCC_ClockConfig+0x2de>
 80051c8:	40022000 	.word	0x40022000
 80051cc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0304 	and.w	r3, r3, #4
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d008      	beq.n	80051ee <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051dc:	4b1d      	ldr	r3, [pc, #116]	; (8005254 <HAL_RCC_ClockConfig+0x2e8>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	491a      	ldr	r1, [pc, #104]	; (8005254 <HAL_RCC_ClockConfig+0x2e8>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0308 	and.w	r3, r3, #8
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d009      	beq.n	800520e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051fa:	4b16      	ldr	r3, [pc, #88]	; (8005254 <HAL_RCC_ClockConfig+0x2e8>)
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	00db      	lsls	r3, r3, #3
 8005208:	4912      	ldr	r1, [pc, #72]	; (8005254 <HAL_RCC_ClockConfig+0x2e8>)
 800520a:	4313      	orrs	r3, r2
 800520c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800520e:	f000 f829 	bl	8005264 <HAL_RCC_GetSysClockFreq>
 8005212:	4601      	mov	r1, r0
 8005214:	4b0f      	ldr	r3, [pc, #60]	; (8005254 <HAL_RCC_ClockConfig+0x2e8>)
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800521c:	22f0      	movs	r2, #240	; 0xf0
 800521e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	fa92 f2a2 	rbit	r2, r2
 8005226:	60fa      	str	r2, [r7, #12]
  return result;
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	fab2 f282 	clz	r2, r2
 800522e:	b2d2      	uxtb	r2, r2
 8005230:	40d3      	lsrs	r3, r2
 8005232:	4a09      	ldr	r2, [pc, #36]	; (8005258 <HAL_RCC_ClockConfig+0x2ec>)
 8005234:	5cd3      	ldrb	r3, [r2, r3]
 8005236:	fa21 f303 	lsr.w	r3, r1, r3
 800523a:	4a08      	ldr	r2, [pc, #32]	; (800525c <HAL_RCC_ClockConfig+0x2f0>)
 800523c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800523e:	4b08      	ldr	r3, [pc, #32]	; (8005260 <HAL_RCC_ClockConfig+0x2f4>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4618      	mov	r0, r3
 8005244:	f7fd f84e 	bl	80022e4 <HAL_InitTick>
  
  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3778      	adds	r7, #120	; 0x78
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	40021000 	.word	0x40021000
 8005258:	08007810 	.word	0x08007810
 800525c:	20000010 	.word	0x20000010
 8005260:	20000014 	.word	0x20000014

08005264 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005264:	b480      	push	{r7}
 8005266:	b08b      	sub	sp, #44	; 0x2c
 8005268:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800526a:	2300      	movs	r3, #0
 800526c:	61fb      	str	r3, [r7, #28]
 800526e:	2300      	movs	r3, #0
 8005270:	61bb      	str	r3, [r7, #24]
 8005272:	2300      	movs	r3, #0
 8005274:	627b      	str	r3, [r7, #36]	; 0x24
 8005276:	2300      	movs	r3, #0
 8005278:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800527a:	2300      	movs	r3, #0
 800527c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800527e:	4b2a      	ldr	r3, [pc, #168]	; (8005328 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	f003 030c 	and.w	r3, r3, #12
 800528a:	2b04      	cmp	r3, #4
 800528c:	d002      	beq.n	8005294 <HAL_RCC_GetSysClockFreq+0x30>
 800528e:	2b08      	cmp	r3, #8
 8005290:	d003      	beq.n	800529a <HAL_RCC_GetSysClockFreq+0x36>
 8005292:	e03f      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005294:	4b25      	ldr	r3, [pc, #148]	; (800532c <HAL_RCC_GetSysClockFreq+0xc8>)
 8005296:	623b      	str	r3, [r7, #32]
      break;
 8005298:	e03f      	b.n	800531a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80052a0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80052a4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a6:	68ba      	ldr	r2, [r7, #8]
 80052a8:	fa92 f2a2 	rbit	r2, r2
 80052ac:	607a      	str	r2, [r7, #4]
  return result;
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	fab2 f282 	clz	r2, r2
 80052b4:	b2d2      	uxtb	r2, r2
 80052b6:	40d3      	lsrs	r3, r2
 80052b8:	4a1d      	ldr	r2, [pc, #116]	; (8005330 <HAL_RCC_GetSysClockFreq+0xcc>)
 80052ba:	5cd3      	ldrb	r3, [r2, r3]
 80052bc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80052be:	4b1a      	ldr	r3, [pc, #104]	; (8005328 <HAL_RCC_GetSysClockFreq+0xc4>)
 80052c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c2:	f003 030f 	and.w	r3, r3, #15
 80052c6:	220f      	movs	r2, #15
 80052c8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	fa92 f2a2 	rbit	r2, r2
 80052d0:	60fa      	str	r2, [r7, #12]
  return result;
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	fab2 f282 	clz	r2, r2
 80052d8:	b2d2      	uxtb	r2, r2
 80052da:	40d3      	lsrs	r3, r2
 80052dc:	4a15      	ldr	r2, [pc, #84]	; (8005334 <HAL_RCC_GetSysClockFreq+0xd0>)
 80052de:	5cd3      	ldrb	r3, [r2, r3]
 80052e0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d008      	beq.n	80052fe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80052ec:	4a0f      	ldr	r2, [pc, #60]	; (800532c <HAL_RCC_GetSysClockFreq+0xc8>)
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	fb02 f303 	mul.w	r3, r2, r3
 80052fa:	627b      	str	r3, [r7, #36]	; 0x24
 80052fc:	e007      	b.n	800530e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80052fe:	4a0b      	ldr	r2, [pc, #44]	; (800532c <HAL_RCC_GetSysClockFreq+0xc8>)
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	fbb2 f2f3 	udiv	r2, r2, r3
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	fb02 f303 	mul.w	r3, r2, r3
 800530c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	623b      	str	r3, [r7, #32]
      break;
 8005312:	e002      	b.n	800531a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005314:	4b05      	ldr	r3, [pc, #20]	; (800532c <HAL_RCC_GetSysClockFreq+0xc8>)
 8005316:	623b      	str	r3, [r7, #32]
      break;
 8005318:	bf00      	nop
    }
  }
  return sysclockfreq;
 800531a:	6a3b      	ldr	r3, [r7, #32]
}
 800531c:	4618      	mov	r0, r3
 800531e:	372c      	adds	r7, #44	; 0x2c
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr
 8005328:	40021000 	.word	0x40021000
 800532c:	007a1200 	.word	0x007a1200
 8005330:	08007828 	.word	0x08007828
 8005334:	08007838 	.word	0x08007838

08005338 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005338:	b480      	push	{r7}
 800533a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800533c:	4b03      	ldr	r3, [pc, #12]	; (800534c <HAL_RCC_GetHCLKFreq+0x14>)
 800533e:	681b      	ldr	r3, [r3, #0]
}
 8005340:	4618      	mov	r0, r3
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	20000010 	.word	0x20000010

08005350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005356:	f7ff ffef 	bl	8005338 <HAL_RCC_GetHCLKFreq>
 800535a:	4601      	mov	r1, r0
 800535c:	4b0b      	ldr	r3, [pc, #44]	; (800538c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005364:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005368:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	fa92 f2a2 	rbit	r2, r2
 8005370:	603a      	str	r2, [r7, #0]
  return result;
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	fab2 f282 	clz	r2, r2
 8005378:	b2d2      	uxtb	r2, r2
 800537a:	40d3      	lsrs	r3, r2
 800537c:	4a04      	ldr	r2, [pc, #16]	; (8005390 <HAL_RCC_GetPCLK1Freq+0x40>)
 800537e:	5cd3      	ldrb	r3, [r2, r3]
 8005380:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005384:	4618      	mov	r0, r3
 8005386:	3708      	adds	r7, #8
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	40021000 	.word	0x40021000
 8005390:	08007820 	.word	0x08007820

08005394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800539a:	f7ff ffcd 	bl	8005338 <HAL_RCC_GetHCLKFreq>
 800539e:	4601      	mov	r1, r0
 80053a0:	4b0b      	ldr	r3, [pc, #44]	; (80053d0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80053a8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80053ac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	fa92 f2a2 	rbit	r2, r2
 80053b4:	603a      	str	r2, [r7, #0]
  return result;
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	fab2 f282 	clz	r2, r2
 80053bc:	b2d2      	uxtb	r2, r2
 80053be:	40d3      	lsrs	r3, r2
 80053c0:	4a04      	ldr	r2, [pc, #16]	; (80053d4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80053c2:	5cd3      	ldrb	r3, [r2, r3]
 80053c4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80053c8:	4618      	mov	r0, r3
 80053ca:	3708      	adds	r7, #8
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	40021000 	.word	0x40021000
 80053d4:	08007820 	.word	0x08007820

080053d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b092      	sub	sp, #72	; 0x48
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053e0:	2300      	movs	r3, #0
 80053e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80053e8:	2300      	movs	r3, #0
 80053ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f000 80d4 	beq.w	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053fc:	4b4e      	ldr	r3, [pc, #312]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10e      	bne.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005408:	4b4b      	ldr	r3, [pc, #300]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	4a4a      	ldr	r2, [pc, #296]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800540e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005412:	61d3      	str	r3, [r2, #28]
 8005414:	4b48      	ldr	r3, [pc, #288]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800541c:	60bb      	str	r3, [r7, #8]
 800541e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005420:	2301      	movs	r3, #1
 8005422:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005426:	4b45      	ldr	r3, [pc, #276]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542e:	2b00      	cmp	r3, #0
 8005430:	d118      	bne.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005432:	4b42      	ldr	r3, [pc, #264]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a41      	ldr	r2, [pc, #260]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800543c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800543e:	f7fc ff95 	bl	800236c <HAL_GetTick>
 8005442:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005444:	e008      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005446:	f7fc ff91 	bl	800236c <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b64      	cmp	r3, #100	; 0x64
 8005452:	d901      	bls.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e1d6      	b.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005458:	4b38      	ldr	r3, [pc, #224]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005460:	2b00      	cmp	r3, #0
 8005462:	d0f0      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005464:	4b34      	ldr	r3, [pc, #208]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800546c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800546e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005470:	2b00      	cmp	r3, #0
 8005472:	f000 8084 	beq.w	800557e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800547e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005480:	429a      	cmp	r2, r3
 8005482:	d07c      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005484:	4b2c      	ldr	r3, [pc, #176]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005486:	6a1b      	ldr	r3, [r3, #32]
 8005488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800548c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800548e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005492:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005496:	fa93 f3a3 	rbit	r3, r3
 800549a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800549c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800549e:	fab3 f383 	clz	r3, r3
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	461a      	mov	r2, r3
 80054a6:	4b26      	ldr	r3, [pc, #152]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80054a8:	4413      	add	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	461a      	mov	r2, r3
 80054ae:	2301      	movs	r3, #1
 80054b0:	6013      	str	r3, [r2, #0]
 80054b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80054b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ba:	fa93 f3a3 	rbit	r3, r3
 80054be:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80054c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054c2:	fab3 f383 	clz	r3, r3
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	461a      	mov	r2, r3
 80054ca:	4b1d      	ldr	r3, [pc, #116]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80054cc:	4413      	add	r3, r2
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	461a      	mov	r2, r3
 80054d2:	2300      	movs	r3, #0
 80054d4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80054d6:	4a18      	ldr	r2, [pc, #96]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054da:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80054dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d04b      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054e6:	f7fc ff41 	bl	800236c <HAL_GetTick>
 80054ea:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054ec:	e00a      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ee:	f7fc ff3d 	bl	800236c <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d901      	bls.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e180      	b.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005504:	2302      	movs	r3, #2
 8005506:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550a:	fa93 f3a3 	rbit	r3, r3
 800550e:	627b      	str	r3, [r7, #36]	; 0x24
 8005510:	2302      	movs	r3, #2
 8005512:	623b      	str	r3, [r7, #32]
 8005514:	6a3b      	ldr	r3, [r7, #32]
 8005516:	fa93 f3a3 	rbit	r3, r3
 800551a:	61fb      	str	r3, [r7, #28]
  return result;
 800551c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800551e:	fab3 f383 	clz	r3, r3
 8005522:	b2db      	uxtb	r3, r3
 8005524:	095b      	lsrs	r3, r3, #5
 8005526:	b2db      	uxtb	r3, r3
 8005528:	f043 0302 	orr.w	r3, r3, #2
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b02      	cmp	r3, #2
 8005530:	d108      	bne.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005532:	4b01      	ldr	r3, [pc, #4]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	e00d      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005538:	40021000 	.word	0x40021000
 800553c:	40007000 	.word	0x40007000
 8005540:	10908100 	.word	0x10908100
 8005544:	2302      	movs	r3, #2
 8005546:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	fa93 f3a3 	rbit	r3, r3
 800554e:	617b      	str	r3, [r7, #20]
 8005550:	4ba0      	ldr	r3, [pc, #640]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005554:	2202      	movs	r2, #2
 8005556:	613a      	str	r2, [r7, #16]
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	fa92 f2a2 	rbit	r2, r2
 800555e:	60fa      	str	r2, [r7, #12]
  return result;
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	fab2 f282 	clz	r2, r2
 8005566:	b2d2      	uxtb	r2, r2
 8005568:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800556c:	b2d2      	uxtb	r2, r2
 800556e:	f002 021f 	and.w	r2, r2, #31
 8005572:	2101      	movs	r1, #1
 8005574:	fa01 f202 	lsl.w	r2, r1, r2
 8005578:	4013      	ands	r3, r2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d0b7      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800557e:	4b95      	ldr	r3, [pc, #596]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	4992      	ldr	r1, [pc, #584]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800558c:	4313      	orrs	r3, r2
 800558e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005590:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005594:	2b01      	cmp	r3, #1
 8005596:	d105      	bne.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005598:	4b8e      	ldr	r3, [pc, #568]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800559a:	69db      	ldr	r3, [r3, #28]
 800559c:	4a8d      	ldr	r2, [pc, #564]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800559e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d008      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055b0:	4b88      	ldr	r3, [pc, #544]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80055b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b4:	f023 0203 	bic.w	r2, r3, #3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	4985      	ldr	r1, [pc, #532]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d008      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055ce:	4b81      	ldr	r3, [pc, #516]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80055d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	497e      	ldr	r1, [pc, #504]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0304 	and.w	r3, r3, #4
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d008      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055ec:	4b79      	ldr	r3, [pc, #484]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80055ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	4976      	ldr	r1, [pc, #472]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0320 	and.w	r3, r3, #32
 8005606:	2b00      	cmp	r3, #0
 8005608:	d008      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800560a:	4b72      	ldr	r3, [pc, #456]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800560c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560e:	f023 0210 	bic.w	r2, r3, #16
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	496f      	ldr	r1, [pc, #444]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005618:	4313      	orrs	r3, r2
 800561a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d008      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005628:	4b6a      	ldr	r3, [pc, #424]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005634:	4967      	ldr	r1, [pc, #412]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005636:	4313      	orrs	r3, r2
 8005638:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005642:	2b00      	cmp	r3, #0
 8005644:	d008      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005646:	4b63      	ldr	r3, [pc, #396]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564a:	f023 0220 	bic.w	r2, r3, #32
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	4960      	ldr	r1, [pc, #384]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005654:	4313      	orrs	r3, r2
 8005656:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d008      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005664:	4b5b      	ldr	r3, [pc, #364]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005668:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	4958      	ldr	r1, [pc, #352]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005672:	4313      	orrs	r3, r2
 8005674:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0308 	and.w	r3, r3, #8
 800567e:	2b00      	cmp	r3, #0
 8005680:	d008      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005682:	4b54      	ldr	r3, [pc, #336]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005686:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	4951      	ldr	r1, [pc, #324]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005690:	4313      	orrs	r3, r2
 8005692:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0310 	and.w	r3, r3, #16
 800569c:	2b00      	cmp	r3, #0
 800569e:	d008      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80056a0:	4b4c      	ldr	r3, [pc, #304]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80056a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	4949      	ldr	r1, [pc, #292]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d008      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80056be:	4b45      	ldr	r3, [pc, #276]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ca:	4942      	ldr	r1, [pc, #264]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d008      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80056dc:	4b3d      	ldr	r3, [pc, #244]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80056de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e8:	493a      	ldr	r1, [pc, #232]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d008      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80056fa:	4b36      	ldr	r3, [pc, #216]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80056fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fe:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005706:	4933      	ldr	r1, [pc, #204]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005708:	4313      	orrs	r3, r2
 800570a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d008      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005718:	4b2e      	ldr	r3, [pc, #184]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800571a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005724:	492b      	ldr	r1, [pc, #172]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005726:	4313      	orrs	r3, r2
 8005728:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d008      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005736:	4b27      	ldr	r3, [pc, #156]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005742:	4924      	ldr	r1, [pc, #144]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005744:	4313      	orrs	r3, r2
 8005746:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d008      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005754:	4b1f      	ldr	r3, [pc, #124]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005758:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005760:	491c      	ldr	r1, [pc, #112]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005762:	4313      	orrs	r3, r2
 8005764:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d008      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005772:	4b18      	ldr	r3, [pc, #96]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005776:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800577e:	4915      	ldr	r1, [pc, #84]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005780:	4313      	orrs	r3, r2
 8005782:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d008      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005790:	4b10      	ldr	r3, [pc, #64]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005794:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800579c:	490d      	ldr	r1, [pc, #52]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d008      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80057ae:	4b09      	ldr	r3, [pc, #36]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80057b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057ba:	4906      	ldr	r1, [pc, #24]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80057bc:	4313      	orrs	r3, r2
 80057be:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00c      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80057cc:	4b01      	ldr	r3, [pc, #4]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80057ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d0:	e002      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80057d2:	bf00      	nop
 80057d4:	40021000 	.word	0x40021000
 80057d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057e0:	490b      	ldr	r1, [pc, #44]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d008      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80057f2:	4b07      	ldr	r3, [pc, #28]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057fe:	4904      	ldr	r1, [pc, #16]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005800:	4313      	orrs	r3, r2
 8005802:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3748      	adds	r7, #72	; 0x48
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	40021000 	.word	0x40021000

08005814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e049      	b.n	80058ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d106      	bne.n	8005840 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7fc f8b4 	bl	80019a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2202      	movs	r2, #2
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	3304      	adds	r3, #4
 8005850:	4619      	mov	r1, r3
 8005852:	4610      	mov	r0, r2
 8005854:	f000 fb14 	bl	8005e80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3708      	adds	r7, #8
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
	...

080058c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d001      	beq.n	80058dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e047      	b.n	800596c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2202      	movs	r2, #2
 80058e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a23      	ldr	r2, [pc, #140]	; (8005978 <HAL_TIM_Base_Start+0xb4>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d01d      	beq.n	800592a <HAL_TIM_Base_Start+0x66>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058f6:	d018      	beq.n	800592a <HAL_TIM_Base_Start+0x66>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a1f      	ldr	r2, [pc, #124]	; (800597c <HAL_TIM_Base_Start+0xb8>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d013      	beq.n	800592a <HAL_TIM_Base_Start+0x66>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a1e      	ldr	r2, [pc, #120]	; (8005980 <HAL_TIM_Base_Start+0xbc>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d00e      	beq.n	800592a <HAL_TIM_Base_Start+0x66>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a1c      	ldr	r2, [pc, #112]	; (8005984 <HAL_TIM_Base_Start+0xc0>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d009      	beq.n	800592a <HAL_TIM_Base_Start+0x66>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a1b      	ldr	r2, [pc, #108]	; (8005988 <HAL_TIM_Base_Start+0xc4>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d004      	beq.n	800592a <HAL_TIM_Base_Start+0x66>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a19      	ldr	r2, [pc, #100]	; (800598c <HAL_TIM_Base_Start+0xc8>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d115      	bne.n	8005956 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	4b17      	ldr	r3, [pc, #92]	; (8005990 <HAL_TIM_Base_Start+0xcc>)
 8005932:	4013      	ands	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2b06      	cmp	r3, #6
 800593a:	d015      	beq.n	8005968 <HAL_TIM_Base_Start+0xa4>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005942:	d011      	beq.n	8005968 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f042 0201 	orr.w	r2, r2, #1
 8005952:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005954:	e008      	b.n	8005968 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f042 0201 	orr.w	r2, r2, #1
 8005964:	601a      	str	r2, [r3, #0]
 8005966:	e000      	b.n	800596a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005968:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	40012c00 	.word	0x40012c00
 800597c:	40000400 	.word	0x40000400
 8005980:	40000800 	.word	0x40000800
 8005984:	40013400 	.word	0x40013400
 8005988:	40014000 	.word	0x40014000
 800598c:	40015000 	.word	0x40015000
 8005990:	00010007 	.word	0x00010007

08005994 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d001      	beq.n	80059ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e04f      	b.n	8005a4c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68da      	ldr	r2, [r3, #12]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0201 	orr.w	r2, r2, #1
 80059c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a23      	ldr	r2, [pc, #140]	; (8005a58 <HAL_TIM_Base_Start_IT+0xc4>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d01d      	beq.n	8005a0a <HAL_TIM_Base_Start_IT+0x76>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d6:	d018      	beq.n	8005a0a <HAL_TIM_Base_Start_IT+0x76>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a1f      	ldr	r2, [pc, #124]	; (8005a5c <HAL_TIM_Base_Start_IT+0xc8>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d013      	beq.n	8005a0a <HAL_TIM_Base_Start_IT+0x76>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a1e      	ldr	r2, [pc, #120]	; (8005a60 <HAL_TIM_Base_Start_IT+0xcc>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d00e      	beq.n	8005a0a <HAL_TIM_Base_Start_IT+0x76>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a1c      	ldr	r2, [pc, #112]	; (8005a64 <HAL_TIM_Base_Start_IT+0xd0>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d009      	beq.n	8005a0a <HAL_TIM_Base_Start_IT+0x76>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a1b      	ldr	r2, [pc, #108]	; (8005a68 <HAL_TIM_Base_Start_IT+0xd4>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d004      	beq.n	8005a0a <HAL_TIM_Base_Start_IT+0x76>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a19      	ldr	r2, [pc, #100]	; (8005a6c <HAL_TIM_Base_Start_IT+0xd8>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d115      	bne.n	8005a36 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689a      	ldr	r2, [r3, #8]
 8005a10:	4b17      	ldr	r3, [pc, #92]	; (8005a70 <HAL_TIM_Base_Start_IT+0xdc>)
 8005a12:	4013      	ands	r3, r2
 8005a14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2b06      	cmp	r3, #6
 8005a1a:	d015      	beq.n	8005a48 <HAL_TIM_Base_Start_IT+0xb4>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a22:	d011      	beq.n	8005a48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f042 0201 	orr.w	r2, r2, #1
 8005a32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a34:	e008      	b.n	8005a48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f042 0201 	orr.w	r2, r2, #1
 8005a44:	601a      	str	r2, [r3, #0]
 8005a46:	e000      	b.n	8005a4a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a48:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	40012c00 	.word	0x40012c00
 8005a5c:	40000400 	.word	0x40000400
 8005a60:	40000800 	.word	0x40000800
 8005a64:	40013400 	.word	0x40013400
 8005a68:	40014000 	.word	0x40014000
 8005a6c:	40015000 	.word	0x40015000
 8005a70:	00010007 	.word	0x00010007

08005a74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d122      	bne.n	8005ad0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d11b      	bne.n	8005ad0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f06f 0202 	mvn.w	r2, #2
 8005aa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	f003 0303 	and.w	r3, r3, #3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d003      	beq.n	8005abe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f9c3 	bl	8005e42 <HAL_TIM_IC_CaptureCallback>
 8005abc:	e005      	b.n	8005aca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f9b5 	bl	8005e2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 f9c6 	bl	8005e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	f003 0304 	and.w	r3, r3, #4
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	d122      	bne.n	8005b24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f003 0304 	and.w	r3, r3, #4
 8005ae8:	2b04      	cmp	r3, #4
 8005aea:	d11b      	bne.n	8005b24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f06f 0204 	mvn.w	r2, #4
 8005af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2202      	movs	r2, #2
 8005afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f999 	bl	8005e42 <HAL_TIM_IC_CaptureCallback>
 8005b10:	e005      	b.n	8005b1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f98b 	bl	8005e2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 f99c 	bl	8005e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	f003 0308 	and.w	r3, r3, #8
 8005b2e:	2b08      	cmp	r3, #8
 8005b30:	d122      	bne.n	8005b78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	f003 0308 	and.w	r3, r3, #8
 8005b3c:	2b08      	cmp	r3, #8
 8005b3e:	d11b      	bne.n	8005b78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f06f 0208 	mvn.w	r2, #8
 8005b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2204      	movs	r2, #4
 8005b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	f003 0303 	and.w	r3, r3, #3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f96f 	bl	8005e42 <HAL_TIM_IC_CaptureCallback>
 8005b64:	e005      	b.n	8005b72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f961 	bl	8005e2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 f972 	bl	8005e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	f003 0310 	and.w	r3, r3, #16
 8005b82:	2b10      	cmp	r3, #16
 8005b84:	d122      	bne.n	8005bcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	f003 0310 	and.w	r3, r3, #16
 8005b90:	2b10      	cmp	r3, #16
 8005b92:	d11b      	bne.n	8005bcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f06f 0210 	mvn.w	r2, #16
 8005b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2208      	movs	r2, #8
 8005ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	69db      	ldr	r3, [r3, #28]
 8005baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d003      	beq.n	8005bba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f945 	bl	8005e42 <HAL_TIM_IC_CaptureCallback>
 8005bb8:	e005      	b.n	8005bc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f937 	bl	8005e2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 f948 	bl	8005e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d10e      	bne.n	8005bf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	f003 0301 	and.w	r3, r3, #1
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d107      	bne.n	8005bf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f06f 0201 	mvn.w	r2, #1
 8005bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7fb fde8 	bl	80017c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c02:	2b80      	cmp	r3, #128	; 0x80
 8005c04:	d10e      	bne.n	8005c24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c10:	2b80      	cmp	r3, #128	; 0x80
 8005c12:	d107      	bne.n	8005c24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 fafc 	bl	800621c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c32:	d10e      	bne.n	8005c52 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c3e:	2b80      	cmp	r3, #128	; 0x80
 8005c40:	d107      	bne.n	8005c52 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 faef 	bl	8006230 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c5c:	2b40      	cmp	r3, #64	; 0x40
 8005c5e:	d10e      	bne.n	8005c7e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c6a:	2b40      	cmp	r3, #64	; 0x40
 8005c6c:	d107      	bne.n	8005c7e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 f8f6 	bl	8005e6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	f003 0320 	and.w	r3, r3, #32
 8005c88:	2b20      	cmp	r3, #32
 8005c8a:	d10e      	bne.n	8005caa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	f003 0320 	and.w	r3, r3, #32
 8005c96:	2b20      	cmp	r3, #32
 8005c98:	d107      	bne.n	8005caa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f06f 0220 	mvn.w	r2, #32
 8005ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 faaf 	bl	8006208 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005caa:	bf00      	nop
 8005cac:	3708      	adds	r7, #8
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b084      	sub	sp, #16
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d101      	bne.n	8005cce <HAL_TIM_ConfigClockSource+0x1c>
 8005cca:	2302      	movs	r3, #2
 8005ccc:	e0ab      	b.n	8005e26 <HAL_TIM_ConfigClockSource+0x174>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2202      	movs	r2, #2
 8005cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cec:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005cf0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cf8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b40      	cmp	r3, #64	; 0x40
 8005d08:	d067      	beq.n	8005dda <HAL_TIM_ConfigClockSource+0x128>
 8005d0a:	2b40      	cmp	r3, #64	; 0x40
 8005d0c:	d80b      	bhi.n	8005d26 <HAL_TIM_ConfigClockSource+0x74>
 8005d0e:	2b10      	cmp	r3, #16
 8005d10:	d073      	beq.n	8005dfa <HAL_TIM_ConfigClockSource+0x148>
 8005d12:	2b10      	cmp	r3, #16
 8005d14:	d802      	bhi.n	8005d1c <HAL_TIM_ConfigClockSource+0x6a>
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d06f      	beq.n	8005dfa <HAL_TIM_ConfigClockSource+0x148>
 8005d1a:	e077      	b.n	8005e0c <HAL_TIM_ConfigClockSource+0x15a>
 8005d1c:	2b20      	cmp	r3, #32
 8005d1e:	d06c      	beq.n	8005dfa <HAL_TIM_ConfigClockSource+0x148>
 8005d20:	2b30      	cmp	r3, #48	; 0x30
 8005d22:	d06a      	beq.n	8005dfa <HAL_TIM_ConfigClockSource+0x148>
 8005d24:	e072      	b.n	8005e0c <HAL_TIM_ConfigClockSource+0x15a>
 8005d26:	2b70      	cmp	r3, #112	; 0x70
 8005d28:	d00d      	beq.n	8005d46 <HAL_TIM_ConfigClockSource+0x94>
 8005d2a:	2b70      	cmp	r3, #112	; 0x70
 8005d2c:	d804      	bhi.n	8005d38 <HAL_TIM_ConfigClockSource+0x86>
 8005d2e:	2b50      	cmp	r3, #80	; 0x50
 8005d30:	d033      	beq.n	8005d9a <HAL_TIM_ConfigClockSource+0xe8>
 8005d32:	2b60      	cmp	r3, #96	; 0x60
 8005d34:	d041      	beq.n	8005dba <HAL_TIM_ConfigClockSource+0x108>
 8005d36:	e069      	b.n	8005e0c <HAL_TIM_ConfigClockSource+0x15a>
 8005d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d3c:	d069      	beq.n	8005e12 <HAL_TIM_ConfigClockSource+0x160>
 8005d3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d42:	d017      	beq.n	8005d74 <HAL_TIM_ConfigClockSource+0xc2>
 8005d44:	e062      	b.n	8005e0c <HAL_TIM_ConfigClockSource+0x15a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6818      	ldr	r0, [r3, #0]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	6899      	ldr	r1, [r3, #8]
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	685a      	ldr	r2, [r3, #4]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	f000 f9ab 	bl	80060b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	609a      	str	r2, [r3, #8]
      break;
 8005d72:	e04f      	b.n	8005e14 <HAL_TIM_ConfigClockSource+0x162>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6818      	ldr	r0, [r3, #0]
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	6899      	ldr	r1, [r3, #8]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f000 f994 	bl	80060b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689a      	ldr	r2, [r3, #8]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d96:	609a      	str	r2, [r3, #8]
      break;
 8005d98:	e03c      	b.n	8005e14 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6818      	ldr	r0, [r3, #0]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	6859      	ldr	r1, [r3, #4]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	461a      	mov	r2, r3
 8005da8:	f000 f908 	bl	8005fbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2150      	movs	r1, #80	; 0x50
 8005db2:	4618      	mov	r0, r3
 8005db4:	f000 f961 	bl	800607a <TIM_ITRx_SetConfig>
      break;
 8005db8:	e02c      	b.n	8005e14 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6818      	ldr	r0, [r3, #0]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	6859      	ldr	r1, [r3, #4]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	f000 f927 	bl	800601a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2160      	movs	r1, #96	; 0x60
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 f951 	bl	800607a <TIM_ITRx_SetConfig>
      break;
 8005dd8:	e01c      	b.n	8005e14 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6818      	ldr	r0, [r3, #0]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	6859      	ldr	r1, [r3, #4]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	461a      	mov	r2, r3
 8005de8:	f000 f8e8 	bl	8005fbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2140      	movs	r1, #64	; 0x40
 8005df2:	4618      	mov	r0, r3
 8005df4:	f000 f941 	bl	800607a <TIM_ITRx_SetConfig>
      break;
 8005df8:	e00c      	b.n	8005e14 <HAL_TIM_ConfigClockSource+0x162>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4619      	mov	r1, r3
 8005e04:	4610      	mov	r0, r2
 8005e06:	f000 f938 	bl	800607a <TIM_ITRx_SetConfig>
      break;
 8005e0a:	e003      	b.n	8005e14 <HAL_TIM_ConfigClockSource+0x162>
    }

    default:
      status = HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e10:	e000      	b.n	8005e14 <HAL_TIM_ConfigClockSource+0x162>
      break;
 8005e12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3710      	adds	r7, #16
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e2e:	b480      	push	{r7}
 8005e30:	b083      	sub	sp, #12
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e36:	bf00      	nop
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr

08005e42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e42:	b480      	push	{r7}
 8005e44:	b083      	sub	sp, #12
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e4a:	bf00      	nop
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr

08005e56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e56:	b480      	push	{r7}
 8005e58:	b083      	sub	sp, #12
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e5e:	bf00      	nop
 8005e60:	370c      	adds	r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b083      	sub	sp, #12
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e72:	bf00      	nop
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
	...

08005e80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a42      	ldr	r2, [pc, #264]	; (8005f9c <TIM_Base_SetConfig+0x11c>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d013      	beq.n	8005ec0 <TIM_Base_SetConfig+0x40>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e9e:	d00f      	beq.n	8005ec0 <TIM_Base_SetConfig+0x40>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a3f      	ldr	r2, [pc, #252]	; (8005fa0 <TIM_Base_SetConfig+0x120>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d00b      	beq.n	8005ec0 <TIM_Base_SetConfig+0x40>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a3e      	ldr	r2, [pc, #248]	; (8005fa4 <TIM_Base_SetConfig+0x124>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d007      	beq.n	8005ec0 <TIM_Base_SetConfig+0x40>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a3d      	ldr	r2, [pc, #244]	; (8005fa8 <TIM_Base_SetConfig+0x128>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d003      	beq.n	8005ec0 <TIM_Base_SetConfig+0x40>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a3c      	ldr	r2, [pc, #240]	; (8005fac <TIM_Base_SetConfig+0x12c>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d108      	bne.n	8005ed2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a31      	ldr	r2, [pc, #196]	; (8005f9c <TIM_Base_SetConfig+0x11c>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d01f      	beq.n	8005f1a <TIM_Base_SetConfig+0x9a>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee0:	d01b      	beq.n	8005f1a <TIM_Base_SetConfig+0x9a>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a2e      	ldr	r2, [pc, #184]	; (8005fa0 <TIM_Base_SetConfig+0x120>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d017      	beq.n	8005f1a <TIM_Base_SetConfig+0x9a>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a2d      	ldr	r2, [pc, #180]	; (8005fa4 <TIM_Base_SetConfig+0x124>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d013      	beq.n	8005f1a <TIM_Base_SetConfig+0x9a>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a2c      	ldr	r2, [pc, #176]	; (8005fa8 <TIM_Base_SetConfig+0x128>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d00f      	beq.n	8005f1a <TIM_Base_SetConfig+0x9a>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a2c      	ldr	r2, [pc, #176]	; (8005fb0 <TIM_Base_SetConfig+0x130>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d00b      	beq.n	8005f1a <TIM_Base_SetConfig+0x9a>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a2b      	ldr	r2, [pc, #172]	; (8005fb4 <TIM_Base_SetConfig+0x134>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d007      	beq.n	8005f1a <TIM_Base_SetConfig+0x9a>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a2a      	ldr	r2, [pc, #168]	; (8005fb8 <TIM_Base_SetConfig+0x138>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d003      	beq.n	8005f1a <TIM_Base_SetConfig+0x9a>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a25      	ldr	r2, [pc, #148]	; (8005fac <TIM_Base_SetConfig+0x12c>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d108      	bne.n	8005f2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	689a      	ldr	r2, [r3, #8]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a12      	ldr	r2, [pc, #72]	; (8005f9c <TIM_Base_SetConfig+0x11c>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d013      	beq.n	8005f80 <TIM_Base_SetConfig+0x100>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a13      	ldr	r2, [pc, #76]	; (8005fa8 <TIM_Base_SetConfig+0x128>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d00f      	beq.n	8005f80 <TIM_Base_SetConfig+0x100>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a13      	ldr	r2, [pc, #76]	; (8005fb0 <TIM_Base_SetConfig+0x130>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d00b      	beq.n	8005f80 <TIM_Base_SetConfig+0x100>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a12      	ldr	r2, [pc, #72]	; (8005fb4 <TIM_Base_SetConfig+0x134>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d007      	beq.n	8005f80 <TIM_Base_SetConfig+0x100>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a11      	ldr	r2, [pc, #68]	; (8005fb8 <TIM_Base_SetConfig+0x138>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d003      	beq.n	8005f80 <TIM_Base_SetConfig+0x100>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a0c      	ldr	r2, [pc, #48]	; (8005fac <TIM_Base_SetConfig+0x12c>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d103      	bne.n	8005f88 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	691a      	ldr	r2, [r3, #16]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	615a      	str	r2, [r3, #20]
}
 8005f8e:	bf00      	nop
 8005f90:	3714      	adds	r7, #20
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	40012c00 	.word	0x40012c00
 8005fa0:	40000400 	.word	0x40000400
 8005fa4:	40000800 	.word	0x40000800
 8005fa8:	40013400 	.word	0x40013400
 8005fac:	40015000 	.word	0x40015000
 8005fb0:	40014000 	.word	0x40014000
 8005fb4:	40014400 	.word	0x40014400
 8005fb8:	40014800 	.word	0x40014800

08005fbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	f023 0201 	bic.w	r2, r3, #1
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fe6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	011b      	lsls	r3, r3, #4
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	f023 030a 	bic.w	r3, r3, #10
 8005ff8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	621a      	str	r2, [r3, #32]
}
 800600e:	bf00      	nop
 8006010:	371c      	adds	r7, #28
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr

0800601a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800601a:	b480      	push	{r7}
 800601c:	b087      	sub	sp, #28
 800601e:	af00      	add	r7, sp, #0
 8006020:	60f8      	str	r0, [r7, #12]
 8006022:	60b9      	str	r1, [r7, #8]
 8006024:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	f023 0210 	bic.w	r2, r3, #16
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006044:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	031b      	lsls	r3, r3, #12
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	4313      	orrs	r3, r2
 800604e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006056:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	011b      	lsls	r3, r3, #4
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	4313      	orrs	r3, r2
 8006060:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	621a      	str	r2, [r3, #32]
}
 800606e:	bf00      	nop
 8006070:	371c      	adds	r7, #28
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800607a:	b480      	push	{r7}
 800607c:	b085      	sub	sp, #20
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
 8006082:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006090:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	4313      	orrs	r3, r2
 8006098:	f043 0307 	orr.w	r3, r3, #7
 800609c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	609a      	str	r2, [r3, #8]
}
 80060a4:	bf00      	nop
 80060a6:	3714      	adds	r7, #20
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b087      	sub	sp, #28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
 80060bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	021a      	lsls	r2, r3, #8
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	431a      	orrs	r2, r3
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	4313      	orrs	r3, r2
 80060dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	609a      	str	r2, [r3, #8]
}
 80060e4:	bf00      	nop
 80060e6:	371c      	adds	r7, #28
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006100:	2b01      	cmp	r3, #1
 8006102:	d101      	bne.n	8006108 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006104:	2302      	movs	r3, #2
 8006106:	e06d      	b.n	80061e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2202      	movs	r2, #2
 8006114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a30      	ldr	r2, [pc, #192]	; (80061f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d009      	beq.n	8006146 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a2f      	ldr	r2, [pc, #188]	; (80061f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d004      	beq.n	8006146 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a2d      	ldr	r2, [pc, #180]	; (80061f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d108      	bne.n	8006158 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800614c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	4313      	orrs	r3, r2
 8006156:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	4313      	orrs	r3, r2
 8006168:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a1e      	ldr	r2, [pc, #120]	; (80061f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d01d      	beq.n	80061b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006184:	d018      	beq.n	80061b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a1c      	ldr	r2, [pc, #112]	; (80061fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d013      	beq.n	80061b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a1a      	ldr	r2, [pc, #104]	; (8006200 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d00e      	beq.n	80061b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a15      	ldr	r2, [pc, #84]	; (80061f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d009      	beq.n	80061b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a16      	ldr	r2, [pc, #88]	; (8006204 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d004      	beq.n	80061b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a11      	ldr	r2, [pc, #68]	; (80061f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d10c      	bne.n	80061d2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3714      	adds	r7, #20
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr
 80061f0:	40012c00 	.word	0x40012c00
 80061f4:	40013400 	.word	0x40013400
 80061f8:	40015000 	.word	0x40015000
 80061fc:	40000400 	.word	0x40000400
 8006200:	40000800 	.word	0x40000800
 8006204:	40014000 	.word	0x40014000

08006208 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e040      	b.n	80062d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800625a:	2b00      	cmp	r3, #0
 800625c:	d106      	bne.n	800626c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f7fb fbde 	bl	8001a28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2224      	movs	r2, #36	; 0x24
 8006270:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f022 0201 	bic.w	r2, r2, #1
 8006280:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fc0e 	bl	8006aa4 <UART_SetConfig>
 8006288:	4603      	mov	r3, r0
 800628a:	2b01      	cmp	r3, #1
 800628c:	d101      	bne.n	8006292 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e022      	b.n	80062d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006296:	2b00      	cmp	r3, #0
 8006298:	d002      	beq.n	80062a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fdd6 	bl	8006e4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685a      	ldr	r2, [r3, #4]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	689a      	ldr	r2, [r3, #8]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f042 0201 	orr.w	r2, r2, #1
 80062ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 fe5d 	bl	8006f90 <UART_CheckIdleState>
 80062d6:	4603      	mov	r3, r0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b08a      	sub	sp, #40	; 0x28
 80062e4:	af02      	add	r7, sp, #8
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	603b      	str	r3, [r7, #0]
 80062ec:	4613      	mov	r3, r2
 80062ee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062f4:	2b20      	cmp	r3, #32
 80062f6:	f040 8082 	bne.w	80063fe <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d002      	beq.n	8006306 <HAL_UART_Transmit+0x26>
 8006300:	88fb      	ldrh	r3, [r7, #6]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e07a      	b.n	8006400 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006310:	2b01      	cmp	r3, #1
 8006312:	d101      	bne.n	8006318 <HAL_UART_Transmit+0x38>
 8006314:	2302      	movs	r3, #2
 8006316:	e073      	b.n	8006400 <HAL_UART_Transmit+0x120>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2221      	movs	r2, #33	; 0x21
 800632c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800632e:	f7fc f81d 	bl	800236c <HAL_GetTick>
 8006332:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	88fa      	ldrh	r2, [r7, #6]
 8006338:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	88fa      	ldrh	r2, [r7, #6]
 8006340:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800634c:	d108      	bne.n	8006360 <HAL_UART_Transmit+0x80>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d104      	bne.n	8006360 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006356:	2300      	movs	r3, #0
 8006358:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	61bb      	str	r3, [r7, #24]
 800635e:	e003      	b.n	8006368 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006364:	2300      	movs	r3, #0
 8006366:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006370:	e02d      	b.n	80063ce <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	9300      	str	r3, [sp, #0]
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	2200      	movs	r2, #0
 800637a:	2180      	movs	r1, #128	; 0x80
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f000 fe50 	bl	8007022 <UART_WaitOnFlagUntilTimeout>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d001      	beq.n	800638c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e039      	b.n	8006400 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10b      	bne.n	80063aa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	881a      	ldrh	r2, [r3, #0]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800639e:	b292      	uxth	r2, r2
 80063a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	3302      	adds	r3, #2
 80063a6:	61bb      	str	r3, [r7, #24]
 80063a8:	e008      	b.n	80063bc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	781a      	ldrb	r2, [r3, #0]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	b292      	uxth	r2, r2
 80063b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	3301      	adds	r3, #1
 80063ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	3b01      	subs	r3, #1
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1cb      	bne.n	8006372 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	9300      	str	r3, [sp, #0]
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	2200      	movs	r2, #0
 80063e2:	2140      	movs	r1, #64	; 0x40
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f000 fe1c 	bl	8007022 <UART_WaitOnFlagUntilTimeout>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d001      	beq.n	80063f4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80063f0:	2303      	movs	r3, #3
 80063f2:	e005      	b.n	8006400 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2220      	movs	r2, #32
 80063f8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80063fa:	2300      	movs	r3, #0
 80063fc:	e000      	b.n	8006400 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80063fe:	2302      	movs	r3, #2
  }
}
 8006400:	4618      	mov	r0, r3
 8006402:	3720      	adds	r7, #32
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b08a      	sub	sp, #40	; 0x28
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	4613      	mov	r3, r2
 8006414:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800641a:	2b20      	cmp	r3, #32
 800641c:	d13d      	bne.n	800649a <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d002      	beq.n	800642a <HAL_UART_Receive_IT+0x22>
 8006424:	88fb      	ldrh	r3, [r7, #6]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e036      	b.n	800649c <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006434:	2b01      	cmp	r3, #1
 8006436:	d101      	bne.n	800643c <HAL_UART_Receive_IT+0x34>
 8006438:	2302      	movs	r3, #2
 800643a:	e02f      	b.n	800649c <HAL_UART_Receive_IT+0x94>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d018      	beq.n	800648a <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	e853 3f00 	ldrex	r3, [r3]
 8006464:	613b      	str	r3, [r7, #16]
   return(result);
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800646c:	627b      	str	r3, [r7, #36]	; 0x24
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	461a      	mov	r2, r3
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	623b      	str	r3, [r7, #32]
 8006478:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647a:	69f9      	ldr	r1, [r7, #28]
 800647c:	6a3a      	ldr	r2, [r7, #32]
 800647e:	e841 2300 	strex	r3, r2, [r1]
 8006482:	61bb      	str	r3, [r7, #24]
   return(result);
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1e6      	bne.n	8006458 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800648a:	88fb      	ldrh	r3, [r7, #6]
 800648c:	461a      	mov	r2, r3
 800648e:	68b9      	ldr	r1, [r7, #8]
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f000 fe8b 	bl	80071ac <UART_Start_Receive_IT>
 8006496:	4603      	mov	r3, r0
 8006498:	e000      	b.n	800649c <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800649a:	2302      	movs	r3, #2
  }
}
 800649c:	4618      	mov	r0, r3
 800649e:	3728      	adds	r7, #40	; 0x28
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b0ba      	sub	sp, #232	; 0xe8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	69db      	ldr	r3, [r3, #28]
 80064b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80064ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80064ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80064d2:	4013      	ands	r3, r2
 80064d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80064d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d115      	bne.n	800650c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80064e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064e4:	f003 0320 	and.w	r3, r3, #32
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00f      	beq.n	800650c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80064ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064f0:	f003 0320 	and.w	r3, r3, #32
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d009      	beq.n	800650c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f000 82a4 	beq.w	8006a4a <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	4798      	blx	r3
      }
      return;
 800650a:	e29e      	b.n	8006a4a <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800650c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006510:	2b00      	cmp	r3, #0
 8006512:	f000 8117 	beq.w	8006744 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b00      	cmp	r3, #0
 8006520:	d106      	bne.n	8006530 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006522:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006526:	4b85      	ldr	r3, [pc, #532]	; (800673c <HAL_UART_IRQHandler+0x298>)
 8006528:	4013      	ands	r3, r2
 800652a:	2b00      	cmp	r3, #0
 800652c:	f000 810a 	beq.w	8006744 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006534:	f003 0301 	and.w	r3, r3, #1
 8006538:	2b00      	cmp	r3, #0
 800653a:	d011      	beq.n	8006560 <HAL_UART_IRQHandler+0xbc>
 800653c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00b      	beq.n	8006560 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2201      	movs	r2, #1
 800654e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006556:	f043 0201 	orr.w	r2, r3, #1
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006564:	f003 0302 	and.w	r3, r3, #2
 8006568:	2b00      	cmp	r3, #0
 800656a:	d011      	beq.n	8006590 <HAL_UART_IRQHandler+0xec>
 800656c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00b      	beq.n	8006590 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2202      	movs	r2, #2
 800657e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006586:	f043 0204 	orr.w	r2, r3, #4
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006594:	f003 0304 	and.w	r3, r3, #4
 8006598:	2b00      	cmp	r3, #0
 800659a:	d011      	beq.n	80065c0 <HAL_UART_IRQHandler+0x11c>
 800659c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065a0:	f003 0301 	and.w	r3, r3, #1
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00b      	beq.n	80065c0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2204      	movs	r2, #4
 80065ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065b6:	f043 0202 	orr.w	r2, r3, #2
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80065c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065c4:	f003 0308 	and.w	r3, r3, #8
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d017      	beq.n	80065fc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80065cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065d0:	f003 0320 	and.w	r3, r3, #32
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d105      	bne.n	80065e4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80065d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065dc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00b      	beq.n	80065fc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2208      	movs	r2, #8
 80065ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065f2:	f043 0208 	orr.w	r2, r3, #8
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80065fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006600:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006604:	2b00      	cmp	r3, #0
 8006606:	d012      	beq.n	800662e <HAL_UART_IRQHandler+0x18a>
 8006608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800660c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00c      	beq.n	800662e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800661c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006624:	f043 0220 	orr.w	r2, r3, #32
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006634:	2b00      	cmp	r3, #0
 8006636:	f000 820a 	beq.w	8006a4e <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800663a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800663e:	f003 0320 	and.w	r3, r3, #32
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00d      	beq.n	8006662 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800664a:	f003 0320 	and.w	r3, r3, #32
 800664e:	2b00      	cmp	r3, #0
 8006650:	d007      	beq.n	8006662 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006656:	2b00      	cmp	r3, #0
 8006658:	d003      	beq.n	8006662 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006668:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006676:	2b40      	cmp	r3, #64	; 0x40
 8006678:	d005      	beq.n	8006686 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800667a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800667e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006682:	2b00      	cmp	r3, #0
 8006684:	d04f      	beq.n	8006726 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 fe3c 	bl	8007304 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006696:	2b40      	cmp	r3, #64	; 0x40
 8006698:	d141      	bne.n	800671e <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	3308      	adds	r3, #8
 80066a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066a8:	e853 3f00 	ldrex	r3, [r3]
 80066ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80066b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	3308      	adds	r3, #8
 80066c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80066c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80066ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80066d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80066d6:	e841 2300 	strex	r3, r2, [r1]
 80066da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80066de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1d9      	bne.n	800669a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d013      	beq.n	8006716 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066f2:	4a13      	ldr	r2, [pc, #76]	; (8006740 <HAL_UART_IRQHandler+0x29c>)
 80066f4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7fd fa16 	bl	8003b2c <HAL_DMA_Abort_IT>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d017      	beq.n	8006736 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800670a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006710:	4610      	mov	r0, r2
 8006712:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006714:	e00f      	b.n	8006736 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f9ae 	bl	8006a78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800671c:	e00b      	b.n	8006736 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 f9aa 	bl	8006a78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006724:	e007      	b.n	8006736 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f9a6 	bl	8006a78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006734:	e18b      	b.n	8006a4e <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006736:	bf00      	nop
    return;
 8006738:	e189      	b.n	8006a4e <HAL_UART_IRQHandler+0x5aa>
 800673a:	bf00      	nop
 800673c:	04000120 	.word	0x04000120
 8006740:	080073cb 	.word	0x080073cb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006748:	2b01      	cmp	r3, #1
 800674a:	f040 8143 	bne.w	80069d4 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800674e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006752:	f003 0310 	and.w	r3, r3, #16
 8006756:	2b00      	cmp	r3, #0
 8006758:	f000 813c 	beq.w	80069d4 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800675c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006760:	f003 0310 	and.w	r3, r3, #16
 8006764:	2b00      	cmp	r3, #0
 8006766:	f000 8135 	beq.w	80069d4 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2210      	movs	r2, #16
 8006770:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677c:	2b40      	cmp	r3, #64	; 0x40
 800677e:	f040 80b1 	bne.w	80068e4 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800678e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006792:	2b00      	cmp	r3, #0
 8006794:	f000 815d 	beq.w	8006a52 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800679e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067a2:	429a      	cmp	r2, r3
 80067a4:	f080 8155 	bcs.w	8006a52 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	2b20      	cmp	r3, #32
 80067ba:	f000 8085 	beq.w	80068c8 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067ca:	e853 3f00 	ldrex	r3, [r3]
 80067ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80067d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	461a      	mov	r2, r3
 80067e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80067ec:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80067f4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80067f8:	e841 2300 	strex	r3, r2, [r1]
 80067fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006800:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1da      	bne.n	80067be <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	3308      	adds	r3, #8
 800680e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006810:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006812:	e853 3f00 	ldrex	r3, [r3]
 8006816:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006818:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800681a:	f023 0301 	bic.w	r3, r3, #1
 800681e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3308      	adds	r3, #8
 8006828:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800682c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006830:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006832:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006834:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006838:	e841 2300 	strex	r3, r2, [r1]
 800683c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800683e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006840:	2b00      	cmp	r3, #0
 8006842:	d1e1      	bne.n	8006808 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	3308      	adds	r3, #8
 800684a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800684e:	e853 3f00 	ldrex	r3, [r3]
 8006852:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006854:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006856:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800685a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	3308      	adds	r3, #8
 8006864:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006868:	66fa      	str	r2, [r7, #108]	; 0x6c
 800686a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800686e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006870:	e841 2300 	strex	r3, r2, [r1]
 8006874:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006876:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1e3      	bne.n	8006844 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2220      	movs	r2, #32
 8006880:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006890:	e853 3f00 	ldrex	r3, [r3]
 8006894:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006898:	f023 0310 	bic.w	r3, r3, #16
 800689c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	461a      	mov	r2, r3
 80068a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80068ac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80068b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068b2:	e841 2300 	strex	r3, r2, [r1]
 80068b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80068b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1e4      	bne.n	8006888 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7fd f8f9 	bl	8003aba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	b29b      	uxth	r3, r3
 80068da:	4619      	mov	r1, r3
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 f8d5 	bl	8006a8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068e2:	e0b6      	b.n	8006a52 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068fe:	b29b      	uxth	r3, r3
 8006900:	2b00      	cmp	r3, #0
 8006902:	f000 80a8 	beq.w	8006a56 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8006906:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800690a:	2b00      	cmp	r3, #0
 800690c:	f000 80a3 	beq.w	8006a56 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006918:	e853 3f00 	ldrex	r3, [r3]
 800691c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800691e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006920:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006924:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	461a      	mov	r2, r3
 800692e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006932:	647b      	str	r3, [r7, #68]	; 0x44
 8006934:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006936:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006938:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800693a:	e841 2300 	strex	r3, r2, [r1]
 800693e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1e4      	bne.n	8006910 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	3308      	adds	r3, #8
 800694c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006950:	e853 3f00 	ldrex	r3, [r3]
 8006954:	623b      	str	r3, [r7, #32]
   return(result);
 8006956:	6a3b      	ldr	r3, [r7, #32]
 8006958:	f023 0301 	bic.w	r3, r3, #1
 800695c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	3308      	adds	r3, #8
 8006966:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800696a:	633a      	str	r2, [r7, #48]	; 0x30
 800696c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006972:	e841 2300 	strex	r3, r2, [r1]
 8006976:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1e3      	bne.n	8006946 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2220      	movs	r2, #32
 8006982:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	e853 3f00 	ldrex	r3, [r3]
 800699c:	60fb      	str	r3, [r7, #12]
   return(result);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f023 0310 	bic.w	r3, r3, #16
 80069a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	461a      	mov	r2, r3
 80069ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80069b2:	61fb      	str	r3, [r7, #28]
 80069b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b6:	69b9      	ldr	r1, [r7, #24]
 80069b8:	69fa      	ldr	r2, [r7, #28]
 80069ba:	e841 2300 	strex	r3, r2, [r1]
 80069be:	617b      	str	r3, [r7, #20]
   return(result);
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1e4      	bne.n	8006990 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069ca:	4619      	mov	r1, r3
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 f85d 	bl	8006a8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069d2:	e040      	b.n	8006a56 <HAL_UART_IRQHandler+0x5b2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80069d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00e      	beq.n	80069fe <HAL_UART_IRQHandler+0x55a>
 80069e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d008      	beq.n	80069fe <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80069f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 fe83 	bl	8007702 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069fc:	e02e      	b.n	8006a5c <HAL_UART_IRQHandler+0x5b8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80069fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00e      	beq.n	8006a28 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006a0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d008      	beq.n	8006a28 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d01d      	beq.n	8006a5a <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	4798      	blx	r3
    }
    return;
 8006a26:	e018      	b.n	8006a5a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d013      	beq.n	8006a5c <HAL_UART_IRQHandler+0x5b8>
 8006a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00d      	beq.n	8006a5c <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 fcd8 	bl	80073f6 <UART_EndTransmit_IT>
    return;
 8006a46:	bf00      	nop
 8006a48:	e008      	b.n	8006a5c <HAL_UART_IRQHandler+0x5b8>
      return;
 8006a4a:	bf00      	nop
 8006a4c:	e006      	b.n	8006a5c <HAL_UART_IRQHandler+0x5b8>
    return;
 8006a4e:	bf00      	nop
 8006a50:	e004      	b.n	8006a5c <HAL_UART_IRQHandler+0x5b8>
      return;
 8006a52:	bf00      	nop
 8006a54:	e002      	b.n	8006a5c <HAL_UART_IRQHandler+0x5b8>
      return;
 8006a56:	bf00      	nop
 8006a58:	e000      	b.n	8006a5c <HAL_UART_IRQHandler+0x5b8>
    return;
 8006a5a:	bf00      	nop
  }

}
 8006a5c:	37e8      	adds	r7, #232	; 0xe8
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop

08006a64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006a80:	bf00      	nop
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	460b      	mov	r3, r1
 8006a96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a98:	bf00      	nop
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b088      	sub	sp, #32
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006aac:	2300      	movs	r3, #0
 8006aae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	689a      	ldr	r2, [r3, #8]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	431a      	orrs	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	431a      	orrs	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	69db      	ldr	r3, [r3, #28]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	4baa      	ldr	r3, [pc, #680]	; (8006d78 <UART_SetConfig+0x2d4>)
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	6812      	ldr	r2, [r2, #0]
 8006ad6:	6979      	ldr	r1, [r7, #20]
 8006ad8:	430b      	orrs	r3, r1
 8006ada:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68da      	ldr	r2, [r3, #12]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	430a      	orrs	r2, r1
 8006af0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a1b      	ldr	r3, [r3, #32]
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	697a      	ldr	r2, [r7, #20]
 8006b12:	430a      	orrs	r2, r1
 8006b14:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a98      	ldr	r2, [pc, #608]	; (8006d7c <UART_SetConfig+0x2d8>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d121      	bne.n	8006b64 <UART_SetConfig+0xc0>
 8006b20:	4b97      	ldr	r3, [pc, #604]	; (8006d80 <UART_SetConfig+0x2dc>)
 8006b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b24:	f003 0303 	and.w	r3, r3, #3
 8006b28:	2b03      	cmp	r3, #3
 8006b2a:	d817      	bhi.n	8006b5c <UART_SetConfig+0xb8>
 8006b2c:	a201      	add	r2, pc, #4	; (adr r2, 8006b34 <UART_SetConfig+0x90>)
 8006b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b32:	bf00      	nop
 8006b34:	08006b45 	.word	0x08006b45
 8006b38:	08006b51 	.word	0x08006b51
 8006b3c:	08006b57 	.word	0x08006b57
 8006b40:	08006b4b 	.word	0x08006b4b
 8006b44:	2301      	movs	r3, #1
 8006b46:	77fb      	strb	r3, [r7, #31]
 8006b48:	e0b2      	b.n	8006cb0 <UART_SetConfig+0x20c>
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	77fb      	strb	r3, [r7, #31]
 8006b4e:	e0af      	b.n	8006cb0 <UART_SetConfig+0x20c>
 8006b50:	2304      	movs	r3, #4
 8006b52:	77fb      	strb	r3, [r7, #31]
 8006b54:	e0ac      	b.n	8006cb0 <UART_SetConfig+0x20c>
 8006b56:	2308      	movs	r3, #8
 8006b58:	77fb      	strb	r3, [r7, #31]
 8006b5a:	e0a9      	b.n	8006cb0 <UART_SetConfig+0x20c>
 8006b5c:	2310      	movs	r3, #16
 8006b5e:	77fb      	strb	r3, [r7, #31]
 8006b60:	bf00      	nop
 8006b62:	e0a5      	b.n	8006cb0 <UART_SetConfig+0x20c>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a86      	ldr	r2, [pc, #536]	; (8006d84 <UART_SetConfig+0x2e0>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d123      	bne.n	8006bb6 <UART_SetConfig+0x112>
 8006b6e:	4b84      	ldr	r3, [pc, #528]	; (8006d80 <UART_SetConfig+0x2dc>)
 8006b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006b76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b7a:	d012      	beq.n	8006ba2 <UART_SetConfig+0xfe>
 8006b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b80:	d802      	bhi.n	8006b88 <UART_SetConfig+0xe4>
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d007      	beq.n	8006b96 <UART_SetConfig+0xf2>
 8006b86:	e012      	b.n	8006bae <UART_SetConfig+0x10a>
 8006b88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b8c:	d00c      	beq.n	8006ba8 <UART_SetConfig+0x104>
 8006b8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b92:	d003      	beq.n	8006b9c <UART_SetConfig+0xf8>
 8006b94:	e00b      	b.n	8006bae <UART_SetConfig+0x10a>
 8006b96:	2300      	movs	r3, #0
 8006b98:	77fb      	strb	r3, [r7, #31]
 8006b9a:	e089      	b.n	8006cb0 <UART_SetConfig+0x20c>
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	77fb      	strb	r3, [r7, #31]
 8006ba0:	e086      	b.n	8006cb0 <UART_SetConfig+0x20c>
 8006ba2:	2304      	movs	r3, #4
 8006ba4:	77fb      	strb	r3, [r7, #31]
 8006ba6:	e083      	b.n	8006cb0 <UART_SetConfig+0x20c>
 8006ba8:	2308      	movs	r3, #8
 8006baa:	77fb      	strb	r3, [r7, #31]
 8006bac:	e080      	b.n	8006cb0 <UART_SetConfig+0x20c>
 8006bae:	2310      	movs	r3, #16
 8006bb0:	77fb      	strb	r3, [r7, #31]
 8006bb2:	bf00      	nop
 8006bb4:	e07c      	b.n	8006cb0 <UART_SetConfig+0x20c>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a73      	ldr	r2, [pc, #460]	; (8006d88 <UART_SetConfig+0x2e4>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d123      	bne.n	8006c08 <UART_SetConfig+0x164>
 8006bc0:	4b6f      	ldr	r3, [pc, #444]	; (8006d80 <UART_SetConfig+0x2dc>)
 8006bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006bc8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006bcc:	d012      	beq.n	8006bf4 <UART_SetConfig+0x150>
 8006bce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006bd2:	d802      	bhi.n	8006bda <UART_SetConfig+0x136>
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d007      	beq.n	8006be8 <UART_SetConfig+0x144>
 8006bd8:	e012      	b.n	8006c00 <UART_SetConfig+0x15c>
 8006bda:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006bde:	d00c      	beq.n	8006bfa <UART_SetConfig+0x156>
 8006be0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006be4:	d003      	beq.n	8006bee <UART_SetConfig+0x14a>
 8006be6:	e00b      	b.n	8006c00 <UART_SetConfig+0x15c>
 8006be8:	2300      	movs	r3, #0
 8006bea:	77fb      	strb	r3, [r7, #31]
 8006bec:	e060      	b.n	8006cb0 <UART_SetConfig+0x20c>
 8006bee:	2302      	movs	r3, #2
 8006bf0:	77fb      	strb	r3, [r7, #31]
 8006bf2:	e05d      	b.n	8006cb0 <UART_SetConfig+0x20c>
 8006bf4:	2304      	movs	r3, #4
 8006bf6:	77fb      	strb	r3, [r7, #31]
 8006bf8:	e05a      	b.n	8006cb0 <UART_SetConfig+0x20c>
 8006bfa:	2308      	movs	r3, #8
 8006bfc:	77fb      	strb	r3, [r7, #31]
 8006bfe:	e057      	b.n	8006cb0 <UART_SetConfig+0x20c>
 8006c00:	2310      	movs	r3, #16
 8006c02:	77fb      	strb	r3, [r7, #31]
 8006c04:	bf00      	nop
 8006c06:	e053      	b.n	8006cb0 <UART_SetConfig+0x20c>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a5f      	ldr	r2, [pc, #380]	; (8006d8c <UART_SetConfig+0x2e8>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d123      	bne.n	8006c5a <UART_SetConfig+0x1b6>
 8006c12:	4b5b      	ldr	r3, [pc, #364]	; (8006d80 <UART_SetConfig+0x2dc>)
 8006c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c16:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006c1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c1e:	d012      	beq.n	8006c46 <UART_SetConfig+0x1a2>
 8006c20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c24:	d802      	bhi.n	8006c2c <UART_SetConfig+0x188>
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d007      	beq.n	8006c3a <UART_SetConfig+0x196>
 8006c2a:	e012      	b.n	8006c52 <UART_SetConfig+0x1ae>
 8006c2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c30:	d00c      	beq.n	8006c4c <UART_SetConfig+0x1a8>
 8006c32:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c36:	d003      	beq.n	8006c40 <UART_SetConfig+0x19c>
 8006c38:	e00b      	b.n	8006c52 <UART_SetConfig+0x1ae>
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	77fb      	strb	r3, [r7, #31]
 8006c3e:	e037      	b.n	8006cb0 <UART_SetConfig+0x20c>
 8006c40:	2302      	movs	r3, #2
 8006c42:	77fb      	strb	r3, [r7, #31]
 8006c44:	e034      	b.n	8006cb0 <UART_SetConfig+0x20c>
 8006c46:	2304      	movs	r3, #4
 8006c48:	77fb      	strb	r3, [r7, #31]
 8006c4a:	e031      	b.n	8006cb0 <UART_SetConfig+0x20c>
 8006c4c:	2308      	movs	r3, #8
 8006c4e:	77fb      	strb	r3, [r7, #31]
 8006c50:	e02e      	b.n	8006cb0 <UART_SetConfig+0x20c>
 8006c52:	2310      	movs	r3, #16
 8006c54:	77fb      	strb	r3, [r7, #31]
 8006c56:	bf00      	nop
 8006c58:	e02a      	b.n	8006cb0 <UART_SetConfig+0x20c>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a4c      	ldr	r2, [pc, #304]	; (8006d90 <UART_SetConfig+0x2ec>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d123      	bne.n	8006cac <UART_SetConfig+0x208>
 8006c64:	4b46      	ldr	r3, [pc, #280]	; (8006d80 <UART_SetConfig+0x2dc>)
 8006c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c68:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006c6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c70:	d012      	beq.n	8006c98 <UART_SetConfig+0x1f4>
 8006c72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c76:	d802      	bhi.n	8006c7e <UART_SetConfig+0x1da>
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d007      	beq.n	8006c8c <UART_SetConfig+0x1e8>
 8006c7c:	e012      	b.n	8006ca4 <UART_SetConfig+0x200>
 8006c7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c82:	d00c      	beq.n	8006c9e <UART_SetConfig+0x1fa>
 8006c84:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006c88:	d003      	beq.n	8006c92 <UART_SetConfig+0x1ee>
 8006c8a:	e00b      	b.n	8006ca4 <UART_SetConfig+0x200>
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	77fb      	strb	r3, [r7, #31]
 8006c90:	e00e      	b.n	8006cb0 <UART_SetConfig+0x20c>
 8006c92:	2302      	movs	r3, #2
 8006c94:	77fb      	strb	r3, [r7, #31]
 8006c96:	e00b      	b.n	8006cb0 <UART_SetConfig+0x20c>
 8006c98:	2304      	movs	r3, #4
 8006c9a:	77fb      	strb	r3, [r7, #31]
 8006c9c:	e008      	b.n	8006cb0 <UART_SetConfig+0x20c>
 8006c9e:	2308      	movs	r3, #8
 8006ca0:	77fb      	strb	r3, [r7, #31]
 8006ca2:	e005      	b.n	8006cb0 <UART_SetConfig+0x20c>
 8006ca4:	2310      	movs	r3, #16
 8006ca6:	77fb      	strb	r3, [r7, #31]
 8006ca8:	bf00      	nop
 8006caa:	e001      	b.n	8006cb0 <UART_SetConfig+0x20c>
 8006cac:	2310      	movs	r3, #16
 8006cae:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	69db      	ldr	r3, [r3, #28]
 8006cb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cb8:	d16e      	bne.n	8006d98 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8006cba:	7ffb      	ldrb	r3, [r7, #31]
 8006cbc:	2b08      	cmp	r3, #8
 8006cbe:	d828      	bhi.n	8006d12 <UART_SetConfig+0x26e>
 8006cc0:	a201      	add	r2, pc, #4	; (adr r2, 8006cc8 <UART_SetConfig+0x224>)
 8006cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc6:	bf00      	nop
 8006cc8:	08006ced 	.word	0x08006ced
 8006ccc:	08006cf5 	.word	0x08006cf5
 8006cd0:	08006cfd 	.word	0x08006cfd
 8006cd4:	08006d13 	.word	0x08006d13
 8006cd8:	08006d03 	.word	0x08006d03
 8006cdc:	08006d13 	.word	0x08006d13
 8006ce0:	08006d13 	.word	0x08006d13
 8006ce4:	08006d13 	.word	0x08006d13
 8006ce8:	08006d0b 	.word	0x08006d0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cec:	f7fe fb30 	bl	8005350 <HAL_RCC_GetPCLK1Freq>
 8006cf0:	61b8      	str	r0, [r7, #24]
        break;
 8006cf2:	e013      	b.n	8006d1c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cf4:	f7fe fb4e 	bl	8005394 <HAL_RCC_GetPCLK2Freq>
 8006cf8:	61b8      	str	r0, [r7, #24]
        break;
 8006cfa:	e00f      	b.n	8006d1c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cfc:	4b25      	ldr	r3, [pc, #148]	; (8006d94 <UART_SetConfig+0x2f0>)
 8006cfe:	61bb      	str	r3, [r7, #24]
        break;
 8006d00:	e00c      	b.n	8006d1c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d02:	f7fe faaf 	bl	8005264 <HAL_RCC_GetSysClockFreq>
 8006d06:	61b8      	str	r0, [r7, #24]
        break;
 8006d08:	e008      	b.n	8006d1c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d0e:	61bb      	str	r3, [r7, #24]
        break;
 8006d10:	e004      	b.n	8006d1c <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8006d12:	2300      	movs	r3, #0
 8006d14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	77bb      	strb	r3, [r7, #30]
        break;
 8006d1a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f000 8086 	beq.w	8006e30 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	005a      	lsls	r2, r3, #1
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	085b      	lsrs	r3, r3, #1
 8006d2e:	441a      	add	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	2b0f      	cmp	r3, #15
 8006d40:	d916      	bls.n	8006d70 <UART_SetConfig+0x2cc>
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d48:	d212      	bcs.n	8006d70 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	f023 030f 	bic.w	r3, r3, #15
 8006d52:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	085b      	lsrs	r3, r3, #1
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	f003 0307 	and.w	r3, r3, #7
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	89fb      	ldrh	r3, [r7, #14]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	89fa      	ldrh	r2, [r7, #14]
 8006d6c:	60da      	str	r2, [r3, #12]
 8006d6e:	e05f      	b.n	8006e30 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	77bb      	strb	r3, [r7, #30]
 8006d74:	e05c      	b.n	8006e30 <UART_SetConfig+0x38c>
 8006d76:	bf00      	nop
 8006d78:	efff69f3 	.word	0xefff69f3
 8006d7c:	40013800 	.word	0x40013800
 8006d80:	40021000 	.word	0x40021000
 8006d84:	40004400 	.word	0x40004400
 8006d88:	40004800 	.word	0x40004800
 8006d8c:	40004c00 	.word	0x40004c00
 8006d90:	40005000 	.word	0x40005000
 8006d94:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d98:	7ffb      	ldrb	r3, [r7, #31]
 8006d9a:	2b08      	cmp	r3, #8
 8006d9c:	d827      	bhi.n	8006dee <UART_SetConfig+0x34a>
 8006d9e:	a201      	add	r2, pc, #4	; (adr r2, 8006da4 <UART_SetConfig+0x300>)
 8006da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da4:	08006dc9 	.word	0x08006dc9
 8006da8:	08006dd1 	.word	0x08006dd1
 8006dac:	08006dd9 	.word	0x08006dd9
 8006db0:	08006def 	.word	0x08006def
 8006db4:	08006ddf 	.word	0x08006ddf
 8006db8:	08006def 	.word	0x08006def
 8006dbc:	08006def 	.word	0x08006def
 8006dc0:	08006def 	.word	0x08006def
 8006dc4:	08006de7 	.word	0x08006de7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dc8:	f7fe fac2 	bl	8005350 <HAL_RCC_GetPCLK1Freq>
 8006dcc:	61b8      	str	r0, [r7, #24]
        break;
 8006dce:	e013      	b.n	8006df8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dd0:	f7fe fae0 	bl	8005394 <HAL_RCC_GetPCLK2Freq>
 8006dd4:	61b8      	str	r0, [r7, #24]
        break;
 8006dd6:	e00f      	b.n	8006df8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dd8:	4b1b      	ldr	r3, [pc, #108]	; (8006e48 <UART_SetConfig+0x3a4>)
 8006dda:	61bb      	str	r3, [r7, #24]
        break;
 8006ddc:	e00c      	b.n	8006df8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dde:	f7fe fa41 	bl	8005264 <HAL_RCC_GetSysClockFreq>
 8006de2:	61b8      	str	r0, [r7, #24]
        break;
 8006de4:	e008      	b.n	8006df8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006de6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dea:	61bb      	str	r3, [r7, #24]
        break;
 8006dec:	e004      	b.n	8006df8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8006dee:	2300      	movs	r3, #0
 8006df0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	77bb      	strb	r3, [r7, #30]
        break;
 8006df6:	bf00      	nop
    }

    if (pclk != 0U)
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d018      	beq.n	8006e30 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	085a      	lsrs	r2, r3, #1
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	441a      	add	r2, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	2b0f      	cmp	r3, #15
 8006e18:	d908      	bls.n	8006e2c <UART_SetConfig+0x388>
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e20:	d204      	bcs.n	8006e2c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	60da      	str	r2, [r3, #12]
 8006e2a:	e001      	b.n	8006e30 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006e3c:	7fbb      	ldrb	r3, [r7, #30]
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3720      	adds	r7, #32
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	007a1200 	.word	0x007a1200

08006e4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e58:	f003 0301 	and.w	r3, r3, #1
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d00a      	beq.n	8006e76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	430a      	orrs	r2, r1
 8006e74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7a:	f003 0302 	and.w	r3, r3, #2
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00a      	beq.n	8006e98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	430a      	orrs	r2, r1
 8006e96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9c:	f003 0304 	and.w	r3, r3, #4
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00a      	beq.n	8006eba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	430a      	orrs	r2, r1
 8006eb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebe:	f003 0308 	and.w	r3, r3, #8
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00a      	beq.n	8006edc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	430a      	orrs	r2, r1
 8006eda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee0:	f003 0310 	and.w	r3, r3, #16
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00a      	beq.n	8006efe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	430a      	orrs	r2, r1
 8006efc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f02:	f003 0320 	and.w	r3, r3, #32
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00a      	beq.n	8006f20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	430a      	orrs	r2, r1
 8006f1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d01a      	beq.n	8006f62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	430a      	orrs	r2, r1
 8006f40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f4a:	d10a      	bne.n	8006f62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00a      	beq.n	8006f84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	430a      	orrs	r2, r1
 8006f82:	605a      	str	r2, [r3, #4]
  }
}
 8006f84:	bf00      	nop
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af02      	add	r7, sp, #8
 8006f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fa0:	f7fb f9e4 	bl	800236c <HAL_GetTick>
 8006fa4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0308 	and.w	r3, r3, #8
 8006fb0:	2b08      	cmp	r3, #8
 8006fb2:	d10e      	bne.n	8006fd2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 f82d 	bl	8007022 <UART_WaitOnFlagUntilTimeout>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d001      	beq.n	8006fd2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e023      	b.n	800701a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0304 	and.w	r3, r3, #4
 8006fdc:	2b04      	cmp	r3, #4
 8006fde:	d10e      	bne.n	8006ffe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fe0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fe4:	9300      	str	r3, [sp, #0]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f817 	bl	8007022 <UART_WaitOnFlagUntilTimeout>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d001      	beq.n	8006ffe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e00d      	b.n	800701a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2220      	movs	r2, #32
 8007002:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2220      	movs	r2, #32
 8007008:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b09c      	sub	sp, #112	; 0x70
 8007026:	af00      	add	r7, sp, #0
 8007028:	60f8      	str	r0, [r7, #12]
 800702a:	60b9      	str	r1, [r7, #8]
 800702c:	603b      	str	r3, [r7, #0]
 800702e:	4613      	mov	r3, r2
 8007030:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007032:	e0a5      	b.n	8007180 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007034:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800703a:	f000 80a1 	beq.w	8007180 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800703e:	f7fb f995 	bl	800236c <HAL_GetTick>
 8007042:	4602      	mov	r2, r0
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800704a:	429a      	cmp	r2, r3
 800704c:	d302      	bcc.n	8007054 <UART_WaitOnFlagUntilTimeout+0x32>
 800704e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007050:	2b00      	cmp	r3, #0
 8007052:	d13e      	bne.n	80070d2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800705c:	e853 3f00 	ldrex	r3, [r3]
 8007060:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007064:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007068:	667b      	str	r3, [r7, #100]	; 0x64
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	461a      	mov	r2, r3
 8007070:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007072:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007074:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007076:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007078:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800707a:	e841 2300 	strex	r3, r2, [r1]
 800707e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007080:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1e6      	bne.n	8007054 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	3308      	adds	r3, #8
 800708c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007090:	e853 3f00 	ldrex	r3, [r3]
 8007094:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007098:	f023 0301 	bic.w	r3, r3, #1
 800709c:	663b      	str	r3, [r7, #96]	; 0x60
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	3308      	adds	r3, #8
 80070a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80070a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80070a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80070ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070ae:	e841 2300 	strex	r3, r2, [r1]
 80070b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80070b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1e5      	bne.n	8007086 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2220      	movs	r2, #32
 80070be:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2220      	movs	r2, #32
 80070c4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e067      	b.n	80071a2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0304 	and.w	r3, r3, #4
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d04f      	beq.n	8007180 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	69db      	ldr	r3, [r3, #28]
 80070e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070ee:	d147      	bne.n	8007180 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007102:	e853 3f00 	ldrex	r3, [r3]
 8007106:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800710e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	461a      	mov	r2, r3
 8007116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007118:	637b      	str	r3, [r7, #52]	; 0x34
 800711a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800711e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007120:	e841 2300 	strex	r3, r2, [r1]
 8007124:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1e6      	bne.n	80070fa <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	3308      	adds	r3, #8
 8007132:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	e853 3f00 	ldrex	r3, [r3]
 800713a:	613b      	str	r3, [r7, #16]
   return(result);
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	f023 0301 	bic.w	r3, r3, #1
 8007142:	66bb      	str	r3, [r7, #104]	; 0x68
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	3308      	adds	r3, #8
 800714a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800714c:	623a      	str	r2, [r7, #32]
 800714e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007150:	69f9      	ldr	r1, [r7, #28]
 8007152:	6a3a      	ldr	r2, [r7, #32]
 8007154:	e841 2300 	strex	r3, r2, [r1]
 8007158:	61bb      	str	r3, [r7, #24]
   return(result);
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1e5      	bne.n	800712c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2220      	movs	r2, #32
 8007164:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2220      	movs	r2, #32
 800716a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2220      	movs	r2, #32
 8007170:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	e010      	b.n	80071a2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	69da      	ldr	r2, [r3, #28]
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	4013      	ands	r3, r2
 800718a:	68ba      	ldr	r2, [r7, #8]
 800718c:	429a      	cmp	r2, r3
 800718e:	bf0c      	ite	eq
 8007190:	2301      	moveq	r3, #1
 8007192:	2300      	movne	r3, #0
 8007194:	b2db      	uxtb	r3, r3
 8007196:	461a      	mov	r2, r3
 8007198:	79fb      	ldrb	r3, [r7, #7]
 800719a:	429a      	cmp	r2, r3
 800719c:	f43f af4a 	beq.w	8007034 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3770      	adds	r7, #112	; 0x70
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
	...

080071ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b091      	sub	sp, #68	; 0x44
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	4613      	mov	r3, r2
 80071b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	88fa      	ldrh	r2, [r7, #6]
 80071c4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	88fa      	ldrh	r2, [r7, #6]
 80071cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071de:	d10e      	bne.n	80071fe <UART_Start_Receive_IT+0x52>
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d105      	bne.n	80071f4 <UART_Start_Receive_IT+0x48>
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f240 12ff 	movw	r2, #511	; 0x1ff
 80071ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071f2:	e02d      	b.n	8007250 <UART_Start_Receive_IT+0xa4>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	22ff      	movs	r2, #255	; 0xff
 80071f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071fc:	e028      	b.n	8007250 <UART_Start_Receive_IT+0xa4>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10d      	bne.n	8007222 <UART_Start_Receive_IT+0x76>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d104      	bne.n	8007218 <UART_Start_Receive_IT+0x6c>
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	22ff      	movs	r2, #255	; 0xff
 8007212:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007216:	e01b      	b.n	8007250 <UART_Start_Receive_IT+0xa4>
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	227f      	movs	r2, #127	; 0x7f
 800721c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007220:	e016      	b.n	8007250 <UART_Start_Receive_IT+0xa4>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800722a:	d10d      	bne.n	8007248 <UART_Start_Receive_IT+0x9c>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d104      	bne.n	800723e <UART_Start_Receive_IT+0x92>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	227f      	movs	r2, #127	; 0x7f
 8007238:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800723c:	e008      	b.n	8007250 <UART_Start_Receive_IT+0xa4>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	223f      	movs	r2, #63	; 0x3f
 8007242:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007246:	e003      	b.n	8007250 <UART_Start_Receive_IT+0xa4>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2200      	movs	r2, #0
 8007254:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2222      	movs	r2, #34	; 0x22
 800725c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	3308      	adds	r3, #8
 8007264:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007268:	e853 3f00 	ldrex	r3, [r3]
 800726c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800726e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007270:	f043 0301 	orr.w	r3, r3, #1
 8007274:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	3308      	adds	r3, #8
 800727c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800727e:	637a      	str	r2, [r7, #52]	; 0x34
 8007280:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007282:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007284:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007286:	e841 2300 	strex	r3, r2, [r1]
 800728a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800728c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728e:	2b00      	cmp	r3, #0
 8007290:	d1e5      	bne.n	800725e <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800729a:	d107      	bne.n	80072ac <UART_Start_Receive_IT+0x100>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d103      	bne.n	80072ac <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	4a15      	ldr	r2, [pc, #84]	; (80072fc <UART_Start_Receive_IT+0x150>)
 80072a8:	665a      	str	r2, [r3, #100]	; 0x64
 80072aa:	e002      	b.n	80072b2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	4a14      	ldr	r2, [pc, #80]	; (8007300 <UART_Start_Receive_IT+0x154>)
 80072b0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	e853 3f00 	ldrex	r3, [r3]
 80072c6:	613b      	str	r3, [r7, #16]
   return(result);
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80072ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	461a      	mov	r2, r3
 80072d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d8:	623b      	str	r3, [r7, #32]
 80072da:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072dc:	69f9      	ldr	r1, [r7, #28]
 80072de:	6a3a      	ldr	r2, [r7, #32]
 80072e0:	e841 2300 	strex	r3, r2, [r1]
 80072e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d1e6      	bne.n	80072ba <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3744      	adds	r7, #68	; 0x44
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	080075a7 	.word	0x080075a7
 8007300:	0800744b 	.word	0x0800744b

08007304 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007304:	b480      	push	{r7}
 8007306:	b095      	sub	sp, #84	; 0x54
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007314:	e853 3f00 	ldrex	r3, [r3]
 8007318:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800731a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007320:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	461a      	mov	r2, r3
 8007328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800732a:	643b      	str	r3, [r7, #64]	; 0x40
 800732c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007330:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007332:	e841 2300 	strex	r3, r2, [r1]
 8007336:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733a:	2b00      	cmp	r3, #0
 800733c:	d1e6      	bne.n	800730c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	3308      	adds	r3, #8
 8007344:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007346:	6a3b      	ldr	r3, [r7, #32]
 8007348:	e853 3f00 	ldrex	r3, [r3]
 800734c:	61fb      	str	r3, [r7, #28]
   return(result);
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	f023 0301 	bic.w	r3, r3, #1
 8007354:	64bb      	str	r3, [r7, #72]	; 0x48
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	3308      	adds	r3, #8
 800735c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800735e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007360:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007362:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007364:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007366:	e841 2300 	strex	r3, r2, [r1]
 800736a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800736c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1e5      	bne.n	800733e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007376:	2b01      	cmp	r3, #1
 8007378:	d118      	bne.n	80073ac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	e853 3f00 	ldrex	r3, [r3]
 8007386:	60bb      	str	r3, [r7, #8]
   return(result);
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	f023 0310 	bic.w	r3, r3, #16
 800738e:	647b      	str	r3, [r7, #68]	; 0x44
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	461a      	mov	r2, r3
 8007396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007398:	61bb      	str	r3, [r7, #24]
 800739a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739c:	6979      	ldr	r1, [r7, #20]
 800739e:	69ba      	ldr	r2, [r7, #24]
 80073a0:	e841 2300 	strex	r3, r2, [r1]
 80073a4:	613b      	str	r3, [r7, #16]
   return(result);
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1e6      	bne.n	800737a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2220      	movs	r2, #32
 80073b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	665a      	str	r2, [r3, #100]	; 0x64
}
 80073be:	bf00      	nop
 80073c0:	3754      	adds	r7, #84	; 0x54
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b084      	sub	sp, #16
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f7ff fb45 	bl	8006a78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073ee:	bf00      	nop
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b088      	sub	sp, #32
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	e853 3f00 	ldrex	r3, [r3]
 800740a:	60bb      	str	r3, [r7, #8]
   return(result);
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007412:	61fb      	str	r3, [r7, #28]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	461a      	mov	r2, r3
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	61bb      	str	r3, [r7, #24]
 800741e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007420:	6979      	ldr	r1, [r7, #20]
 8007422:	69ba      	ldr	r2, [r7, #24]
 8007424:	e841 2300 	strex	r3, r2, [r1]
 8007428:	613b      	str	r3, [r7, #16]
   return(result);
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d1e6      	bne.n	80073fe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2220      	movs	r2, #32
 8007434:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f7ff fb11 	bl	8006a64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007442:	bf00      	nop
 8007444:	3720      	adds	r7, #32
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b096      	sub	sp, #88	; 0x58
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007458:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007460:	2b22      	cmp	r3, #34	; 0x22
 8007462:	f040 8094 	bne.w	800758e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800746c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007470:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007474:	b2d9      	uxtb	r1, r3
 8007476:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800747a:	b2da      	uxtb	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007480:	400a      	ands	r2, r1
 8007482:	b2d2      	uxtb	r2, r2
 8007484:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800748a:	1c5a      	adds	r2, r3, #1
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007496:	b29b      	uxth	r3, r3
 8007498:	3b01      	subs	r3, #1
 800749a:	b29a      	uxth	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d177      	bne.n	800759e <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b6:	e853 3f00 	ldrex	r3, [r3]
 80074ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074c2:	653b      	str	r3, [r7, #80]	; 0x50
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	461a      	mov	r2, r3
 80074ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074cc:	647b      	str	r3, [r7, #68]	; 0x44
 80074ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074d4:	e841 2300 	strex	r3, r2, [r1]
 80074d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1e6      	bne.n	80074ae <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	3308      	adds	r3, #8
 80074e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ea:	e853 3f00 	ldrex	r3, [r3]
 80074ee:	623b      	str	r3, [r7, #32]
   return(result);
 80074f0:	6a3b      	ldr	r3, [r7, #32]
 80074f2:	f023 0301 	bic.w	r3, r3, #1
 80074f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	3308      	adds	r3, #8
 80074fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007500:	633a      	str	r2, [r7, #48]	; 0x30
 8007502:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007504:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007508:	e841 2300 	strex	r3, r2, [r1]
 800750c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800750e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1e5      	bne.n	80074e0 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2220      	movs	r2, #32
 8007518:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007524:	2b01      	cmp	r3, #1
 8007526:	d12e      	bne.n	8007586 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	e853 3f00 	ldrex	r3, [r3]
 800753a:	60fb      	str	r3, [r7, #12]
   return(result);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f023 0310 	bic.w	r3, r3, #16
 8007542:	64bb      	str	r3, [r7, #72]	; 0x48
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	461a      	mov	r2, r3
 800754a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800754c:	61fb      	str	r3, [r7, #28]
 800754e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007550:	69b9      	ldr	r1, [r7, #24]
 8007552:	69fa      	ldr	r2, [r7, #28]
 8007554:	e841 2300 	strex	r3, r2, [r1]
 8007558:	617b      	str	r3, [r7, #20]
   return(result);
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1e6      	bne.n	800752e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	69db      	ldr	r3, [r3, #28]
 8007566:	f003 0310 	and.w	r3, r3, #16
 800756a:	2b10      	cmp	r3, #16
 800756c:	d103      	bne.n	8007576 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2210      	movs	r2, #16
 8007574:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800757c:	4619      	mov	r1, r3
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f7ff fa84 	bl	8006a8c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007584:	e00b      	b.n	800759e <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f7f9 fce2 	bl	8000f50 <HAL_UART_RxCpltCallback>
}
 800758c:	e007      	b.n	800759e <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	699a      	ldr	r2, [r3, #24]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f042 0208 	orr.w	r2, r2, #8
 800759c:	619a      	str	r2, [r3, #24]
}
 800759e:	bf00      	nop
 80075a0:	3758      	adds	r7, #88	; 0x58
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b096      	sub	sp, #88	; 0x58
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80075b4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075bc:	2b22      	cmp	r3, #34	; 0x22
 80075be:	f040 8094 	bne.w	80076ea <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80075c8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075d0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80075d2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80075d6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80075da:	4013      	ands	r3, r2
 80075dc:	b29a      	uxth	r2, r3
 80075de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075e0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075e6:	1c9a      	adds	r2, r3, #2
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	3b01      	subs	r3, #1
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007604:	b29b      	uxth	r3, r3
 8007606:	2b00      	cmp	r3, #0
 8007608:	d177      	bne.n	80076fa <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007612:	e853 3f00 	ldrex	r3, [r3]
 8007616:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800761e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	461a      	mov	r2, r3
 8007626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007628:	643b      	str	r3, [r7, #64]	; 0x40
 800762a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800762e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007630:	e841 2300 	strex	r3, r2, [r1]
 8007634:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1e6      	bne.n	800760a <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	3308      	adds	r3, #8
 8007642:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007644:	6a3b      	ldr	r3, [r7, #32]
 8007646:	e853 3f00 	ldrex	r3, [r3]
 800764a:	61fb      	str	r3, [r7, #28]
   return(result);
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	f023 0301 	bic.w	r3, r3, #1
 8007652:	64bb      	str	r3, [r7, #72]	; 0x48
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	3308      	adds	r3, #8
 800765a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800765c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800765e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007660:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007662:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007664:	e841 2300 	strex	r3, r2, [r1]
 8007668:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766c:	2b00      	cmp	r3, #0
 800766e:	d1e5      	bne.n	800763c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2220      	movs	r2, #32
 8007674:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007680:	2b01      	cmp	r3, #1
 8007682:	d12e      	bne.n	80076e2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	e853 3f00 	ldrex	r3, [r3]
 8007696:	60bb      	str	r3, [r7, #8]
   return(result);
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	f023 0310 	bic.w	r3, r3, #16
 800769e:	647b      	str	r3, [r7, #68]	; 0x44
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	461a      	mov	r2, r3
 80076a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076a8:	61bb      	str	r3, [r7, #24]
 80076aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ac:	6979      	ldr	r1, [r7, #20]
 80076ae:	69ba      	ldr	r2, [r7, #24]
 80076b0:	e841 2300 	strex	r3, r2, [r1]
 80076b4:	613b      	str	r3, [r7, #16]
   return(result);
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1e6      	bne.n	800768a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	69db      	ldr	r3, [r3, #28]
 80076c2:	f003 0310 	and.w	r3, r3, #16
 80076c6:	2b10      	cmp	r3, #16
 80076c8:	d103      	bne.n	80076d2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2210      	movs	r2, #16
 80076d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80076d8:	4619      	mov	r1, r3
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f7ff f9d6 	bl	8006a8c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076e0:	e00b      	b.n	80076fa <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f7f9 fc34 	bl	8000f50 <HAL_UART_RxCpltCallback>
}
 80076e8:	e007      	b.n	80076fa <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	699a      	ldr	r2, [r3, #24]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f042 0208 	orr.w	r2, r2, #8
 80076f8:	619a      	str	r2, [r3, #24]
}
 80076fa:	bf00      	nop
 80076fc:	3758      	adds	r7, #88	; 0x58
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007702:	b480      	push	{r7}
 8007704:	b083      	sub	sp, #12
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800770a:	bf00      	nop
 800770c:	370c      	adds	r7, #12
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr
	...

08007718 <__libc_init_array>:
 8007718:	b570      	push	{r4, r5, r6, lr}
 800771a:	4e0d      	ldr	r6, [pc, #52]	; (8007750 <__libc_init_array+0x38>)
 800771c:	4c0d      	ldr	r4, [pc, #52]	; (8007754 <__libc_init_array+0x3c>)
 800771e:	1ba4      	subs	r4, r4, r6
 8007720:	10a4      	asrs	r4, r4, #2
 8007722:	2500      	movs	r5, #0
 8007724:	42a5      	cmp	r5, r4
 8007726:	d109      	bne.n	800773c <__libc_init_array+0x24>
 8007728:	4e0b      	ldr	r6, [pc, #44]	; (8007758 <__libc_init_array+0x40>)
 800772a:	4c0c      	ldr	r4, [pc, #48]	; (800775c <__libc_init_array+0x44>)
 800772c:	f000 f820 	bl	8007770 <_init>
 8007730:	1ba4      	subs	r4, r4, r6
 8007732:	10a4      	asrs	r4, r4, #2
 8007734:	2500      	movs	r5, #0
 8007736:	42a5      	cmp	r5, r4
 8007738:	d105      	bne.n	8007746 <__libc_init_array+0x2e>
 800773a:	bd70      	pop	{r4, r5, r6, pc}
 800773c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007740:	4798      	blx	r3
 8007742:	3501      	adds	r5, #1
 8007744:	e7ee      	b.n	8007724 <__libc_init_array+0xc>
 8007746:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800774a:	4798      	blx	r3
 800774c:	3501      	adds	r5, #1
 800774e:	e7f2      	b.n	8007736 <__libc_init_array+0x1e>
 8007750:	08007848 	.word	0x08007848
 8007754:	08007848 	.word	0x08007848
 8007758:	08007848 	.word	0x08007848
 800775c:	0800784c 	.word	0x0800784c

08007760 <memset>:
 8007760:	4402      	add	r2, r0
 8007762:	4603      	mov	r3, r0
 8007764:	4293      	cmp	r3, r2
 8007766:	d100      	bne.n	800776a <memset+0xa>
 8007768:	4770      	bx	lr
 800776a:	f803 1b01 	strb.w	r1, [r3], #1
 800776e:	e7f9      	b.n	8007764 <memset+0x4>

08007770 <_init>:
 8007770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007772:	bf00      	nop
 8007774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007776:	bc08      	pop	{r3}
 8007778:	469e      	mov	lr, r3
 800777a:	4770      	bx	lr

0800777c <_fini>:
 800777c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800777e:	bf00      	nop
 8007780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007782:	bc08      	pop	{r3}
 8007784:	469e      	mov	lr, r3
 8007786:	4770      	bx	lr
