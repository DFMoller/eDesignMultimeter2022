
eDesignMultimeter2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006344  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080064d8  080064d8  000164d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006570  08006570  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08006570  08006570  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006570  08006570  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006570  08006570  00016570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006574  08006574  00016574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08006578  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000001c  08006594  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08006594  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ad1  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002049  00000000  00000000  00032b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ed8  00000000  00000000  00034b68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e10  00000000  00000000  00035a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021b8f  00000000  00000000  00036850  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e66b  00000000  00000000  000583df  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3e1d  00000000  00000000  00066a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013a867  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ed0  00000000  00000000  0013a8e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000001c 	.word	0x2000001c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080064c0 	.word	0x080064c0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000020 	.word	0x20000020
 80001d0:	080064c0 	.word	0x080064c0

080001d4 <HAL_UART_RxCpltCallback>:

uint8_t display_state = 1; // Default of 1 is Measurement Display State
uint8_t output_active = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	message_received = 1;
 80001dc:	4b04      	ldr	r3, [pc, #16]	; (80001f0 <HAL_UART_RxCpltCallback+0x1c>)
 80001de:	2201      	movs	r2, #1
 80001e0:	701a      	strb	r2, [r3, #0]
}
 80001e2:	bf00      	nop
 80001e4:	370c      	adds	r7, #12
 80001e6:	46bd      	mov	sp, r7
 80001e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	20000038 	.word	0x20000038

080001f4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	4603      	mov	r3, r0
 80001fc:	80fb      	strh	r3, [r7, #6]
	last_ticks = HAL_GetTick();
 80001fe:	f001 fb3f 	bl	8001880 <HAL_GetTick>
 8000202:	4602      	mov	r2, r0
 8000204:	4b15      	ldr	r3, [pc, #84]	; (800025c <HAL_GPIO_EXTI_Callback+0x68>)
 8000206:	601a      	str	r2, [r3, #0]
	if(GPIO_Pin == btn_mid_Pin)
 8000208:	88fb      	ldrh	r3, [r7, #6]
 800020a:	2b40      	cmp	r3, #64	; 0x40
 800020c:	d103      	bne.n	8000216 <HAL_GPIO_EXTI_Callback+0x22>
	{
		btn_mid_flag = 1;
 800020e:	4b14      	ldr	r3, [pc, #80]	; (8000260 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000210:	2201      	movs	r2, #1
 8000212:	701a      	strb	r2, [r3, #0]
	}
	else if(GPIO_Pin == btn_down_Pin)
	{
		btn_down_flag = 1;
	}
}
 8000214:	e01d      	b.n	8000252 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_right_Pin)
 8000216:	88fb      	ldrh	r3, [r7, #6]
 8000218:	2b80      	cmp	r3, #128	; 0x80
 800021a:	d103      	bne.n	8000224 <HAL_GPIO_EXTI_Callback+0x30>
		btn_right_flag = 1;
 800021c:	4b11      	ldr	r3, [pc, #68]	; (8000264 <HAL_GPIO_EXTI_Callback+0x70>)
 800021e:	2201      	movs	r2, #1
 8000220:	701a      	strb	r2, [r3, #0]
}
 8000222:	e016      	b.n	8000252 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_up_Pin)
 8000224:	88fb      	ldrh	r3, [r7, #6]
 8000226:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800022a:	d103      	bne.n	8000234 <HAL_GPIO_EXTI_Callback+0x40>
		btn_up_flag = 1;
 800022c:	4b0e      	ldr	r3, [pc, #56]	; (8000268 <HAL_GPIO_EXTI_Callback+0x74>)
 800022e:	2201      	movs	r2, #1
 8000230:	701a      	strb	r2, [r3, #0]
}
 8000232:	e00e      	b.n	8000252 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_left_Pin)
 8000234:	88fb      	ldrh	r3, [r7, #6]
 8000236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800023a:	d103      	bne.n	8000244 <HAL_GPIO_EXTI_Callback+0x50>
		btn_left_flag = 1;
 800023c:	4b0b      	ldr	r3, [pc, #44]	; (800026c <HAL_GPIO_EXTI_Callback+0x78>)
 800023e:	2201      	movs	r2, #1
 8000240:	701a      	strb	r2, [r3, #0]
}
 8000242:	e006      	b.n	8000252 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_down_Pin)
 8000244:	88fb      	ldrh	r3, [r7, #6]
 8000246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800024a:	d102      	bne.n	8000252 <HAL_GPIO_EXTI_Callback+0x5e>
		btn_down_flag = 1;
 800024c:	4b08      	ldr	r3, [pc, #32]	; (8000270 <HAL_GPIO_EXTI_Callback+0x7c>)
 800024e:	2201      	movs	r2, #1
 8000250:	701a      	strb	r2, [r3, #0]
}
 8000252:	bf00      	nop
 8000254:	3708      	adds	r7, #8
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	20000040 	.word	0x20000040
 8000260:	20000039 	.word	0x20000039
 8000264:	2000003a 	.word	0x2000003a
 8000268:	2000003b 	.word	0x2000003b
 800026c:	2000003c 	.word	0x2000003c
 8000270:	2000003d 	.word	0x2000003d

08000274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000274:	b590      	push	{r4, r7, lr}
 8000276:	f6ad 0d14 	subw	sp, sp, #2068	; 0x814
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t raw;
	uint16_t millivolts;
//	char msg[100];
	uint16_t adc_array[1000];
	uint16_t adc_count = 0;
 800027c:	2300      	movs	r3, #0
 800027e:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e


	uint8_t rx_bytes[10] = {0};
 8000282:	f107 0314 	add.w	r3, r7, #20
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	605a      	str	r2, [r3, #4]
 800028c:	811a      	strh	r2, [r3, #8]
	uint8_t rx_bytes_counter = 0;
 800028e:	2300      	movs	r3, #0
 8000290:	f887 380d 	strb.w	r3, [r7, #2061]	; 0x80d
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000294:	f001 fa9a 	bl	80017cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000298:	f000 f9fe 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029c:	f000 fb28 	bl	80008f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002a0:	f000 faf6 	bl	8000890 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80002a4:	f000 face 	bl	8000844 <MX_TIM16_Init>
  MX_ADC1_Init();
 80002a8:	f000 fa5c 	bl	8000764 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, std_num, 13, 10);
 80002ac:	230a      	movs	r3, #10
 80002ae:	220d      	movs	r2, #13
 80002b0:	49be      	ldr	r1, [pc, #760]	; (80005ac <main+0x338>)
 80002b2:	48bf      	ldr	r0, [pc, #764]	; (80005b0 <main+0x33c>)
 80002b4:	f004 febc 	bl	8005030 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 80002b8:	2201      	movs	r2, #1
 80002ba:	49be      	ldr	r1, [pc, #760]	; (80005b4 <main+0x340>)
 80002bc:	48bc      	ldr	r0, [pc, #752]	; (80005b0 <main+0x33c>)
 80002be:	f004 ff4b 	bl	8005158 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 80002c2:	48bd      	ldr	r0, [pc, #756]	; (80005b8 <main+0x344>)
 80002c4:	f004 fbf2 	bl	8004aac <HAL_TIM_Base_Start_IT>


  // Set up the default state of the device
  display_state = changeDisplayState(1); // 1 == Measurement mode
 80002c8:	2001      	movs	r0, #1
 80002ca:	f000 fc23 	bl	8000b14 <changeDisplayState>
 80002ce:	4603      	mov	r3, r0
 80002d0:	461a      	mov	r2, r3
 80002d2:	4bba      	ldr	r3, [pc, #744]	; (80005bc <main+0x348>)
 80002d4:	701a      	strb	r2, [r3, #0]

  // Test register writing
//  lcd_RS_GPIO_Port->ODR |= (1<<lcd_RS_bit);
  LCD_Init();
 80002d6:	f000 ff69 	bl	80011ac <LCD_Init>
  uint8_t screen_message[] = "Hello World!";
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	4ab8      	ldr	r2, [pc, #736]	; (80005c0 <main+0x34c>)
 80002de:	461c      	mov	r4, r3
 80002e0:	4613      	mov	r3, r2
 80002e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002e4:	c407      	stmia	r4!, {r0, r1, r2}
 80002e6:	7023      	strb	r3, [r4, #0]
  LCD_Write_String(screen_message);
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 ffa8 	bl	8001240 <LCD_Write_String>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(message_received && rx_byte[0] != '\n')
 80002f0:	4bb4      	ldr	r3, [pc, #720]	; (80005c4 <main+0x350>)
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d03c      	beq.n	8000372 <main+0xfe>
 80002f8:	4bae      	ldr	r3, [pc, #696]	; (80005b4 <main+0x340>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	2b0a      	cmp	r3, #10
 80002fe:	d038      	beq.n	8000372 <main+0xfe>
	  {
		  rx_bytes[rx_bytes_counter] = rx_byte[0];
 8000300:	f897 380d 	ldrb.w	r3, [r7, #2061]	; 0x80d
 8000304:	4aab      	ldr	r2, [pc, #684]	; (80005b4 <main+0x340>)
 8000306:	7811      	ldrb	r1, [r2, #0]
 8000308:	f107 0214 	add.w	r2, r7, #20
 800030c:	54d1      	strb	r1, [r2, r3]
		  if(rx_bytes_counter == 0 && rx_byte[0] == '@'){
 800030e:	f897 380d 	ldrb.w	r3, [r7, #2061]	; 0x80d
 8000312:	2b00      	cmp	r3, #0
 8000314:	d109      	bne.n	800032a <main+0xb6>
 8000316:	4ba7      	ldr	r3, [pc, #668]	; (80005b4 <main+0x340>)
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	2b40      	cmp	r3, #64	; 0x40
 800031c:	d105      	bne.n	800032a <main+0xb6>
			  rx_bytes_counter++;
 800031e:	f897 380d 	ldrb.w	r3, [r7, #2061]	; 0x80d
 8000322:	3301      	adds	r3, #1
 8000324:	f887 380d 	strb.w	r3, [r7, #2061]	; 0x80d
 8000328:	e01b      	b.n	8000362 <main+0xee>
		  } else if(rx_bytes_counter > 0){
 800032a:	f897 380d 	ldrb.w	r3, [r7, #2061]	; 0x80d
 800032e:	2b00      	cmp	r3, #0
 8000330:	d017      	beq.n	8000362 <main+0xee>
			  rx_bytes_counter++;
 8000332:	f897 380d 	ldrb.w	r3, [r7, #2061]	; 0x80d
 8000336:	3301      	adds	r3, #1
 8000338:	f887 380d 	strb.w	r3, [r7, #2061]	; 0x80d
			  if(uartRxComplete(rx_byte[0]))
 800033c:	4b9d      	ldr	r3, [pc, #628]	; (80005b4 <main+0x340>)
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	4618      	mov	r0, r3
 8000342:	f000 fc59 	bl	8000bf8 <uartRxComplete>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d00a      	beq.n	8000362 <main+0xee>
			  {
				  interpret_rx_message(rx_bytes, rx_bytes_counter);
 800034c:	f897 280d 	ldrb.w	r2, [r7, #2061]	; 0x80d
 8000350:	f107 0314 	add.w	r3, r7, #20
 8000354:	4611      	mov	r1, r2
 8000356:	4618      	mov	r0, r3
 8000358:	f000 fc60 	bl	8000c1c <interpret_rx_message>
				  rx_bytes_counter = 0;
 800035c:	2300      	movs	r3, #0
 800035e:	f887 380d 	strb.w	r3, [r7, #2061]	; 0x80d
			  }
		  }
		  HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 8000362:	2201      	movs	r2, #1
 8000364:	4993      	ldr	r1, [pc, #588]	; (80005b4 <main+0x340>)
 8000366:	4892      	ldr	r0, [pc, #584]	; (80005b0 <main+0x33c>)
 8000368:	f004 fef6 	bl	8005158 <HAL_UART_Receive_IT>
		  message_received = 0;
 800036c:	4b95      	ldr	r3, [pc, #596]	; (80005c4 <main+0x350>)
 800036e:	2200      	movs	r2, #0
 8000370:	701a      	strb	r2, [r3, #0]
	  }
	  if(btn_up_flag)
 8000372:	4b95      	ldr	r3, [pc, #596]	; (80005c8 <main+0x354>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d010      	beq.n	800039c <main+0x128>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 800037a:	f001 fa81 	bl	8001880 <HAL_GetTick>
 800037e:	4602      	mov	r2, r0
 8000380:	4b92      	ldr	r3, [pc, #584]	; (80005cc <main+0x358>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	1ad3      	subs	r3, r2, r3
 8000386:	2b36      	cmp	r3, #54	; 0x36
 8000388:	d96d      	bls.n	8000466 <main+0x1f2>
		  {
			  if(HAL_GPIO_ReadPin(btn_up_GPIO_Port, btn_up_Pin))
 800038a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800038e:	4890      	ldr	r0, [pc, #576]	; (80005d0 <main+0x35c>)
 8000390:	f002 ff68 	bl	8003264 <HAL_GPIO_ReadPin>
			  {
//				  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
			  }
			  btn_up_flag = 0;
 8000394:	4b8c      	ldr	r3, [pc, #560]	; (80005c8 <main+0x354>)
 8000396:	2200      	movs	r2, #0
 8000398:	701a      	strb	r2, [r3, #0]
 800039a:	e064      	b.n	8000466 <main+0x1f2>
		  }
	  }
	  else if(btn_left_flag)
 800039c:	4b8d      	ldr	r3, [pc, #564]	; (80005d4 <main+0x360>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d010      	beq.n	80003c6 <main+0x152>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 80003a4:	f001 fa6c 	bl	8001880 <HAL_GetTick>
 80003a8:	4602      	mov	r2, r0
 80003aa:	4b88      	ldr	r3, [pc, #544]	; (80005cc <main+0x358>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	1ad3      	subs	r3, r2, r3
 80003b0:	2b36      	cmp	r3, #54	; 0x36
 80003b2:	d958      	bls.n	8000466 <main+0x1f2>
		  {
			  if(HAL_GPIO_ReadPin(btn_left_GPIO_Port, btn_left_Pin))
 80003b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003b8:	4885      	ldr	r0, [pc, #532]	; (80005d0 <main+0x35c>)
 80003ba:	f002 ff53 	bl	8003264 <HAL_GPIO_ReadPin>
			  {
//				  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
			  }
			  btn_left_flag = 0;
 80003be:	4b85      	ldr	r3, [pc, #532]	; (80005d4 <main+0x360>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	701a      	strb	r2, [r3, #0]
 80003c4:	e04f      	b.n	8000466 <main+0x1f2>
		  }
	  }
	  else if(btn_down_flag)
 80003c6:	4b84      	ldr	r3, [pc, #528]	; (80005d8 <main+0x364>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d010      	beq.n	80003f0 <main+0x17c>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 80003ce:	f001 fa57 	bl	8001880 <HAL_GetTick>
 80003d2:	4602      	mov	r2, r0
 80003d4:	4b7d      	ldr	r3, [pc, #500]	; (80005cc <main+0x358>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	1ad3      	subs	r3, r2, r3
 80003da:	2b36      	cmp	r3, #54	; 0x36
 80003dc:	d943      	bls.n	8000466 <main+0x1f2>
		  {
			  if(HAL_GPIO_ReadPin(btn_down_GPIO_Port, btn_down_Pin))
 80003de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003e2:	487b      	ldr	r0, [pc, #492]	; (80005d0 <main+0x35c>)
 80003e4:	f002 ff3e 	bl	8003264 <HAL_GPIO_ReadPin>
			  {
//				  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
			  }
			  btn_down_flag = 0;
 80003e8:	4b7b      	ldr	r3, [pc, #492]	; (80005d8 <main+0x364>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	701a      	strb	r2, [r3, #0]
 80003ee:	e03a      	b.n	8000466 <main+0x1f2>
		  }
	  }
	  else if(btn_right_flag)
 80003f0:	4b7a      	ldr	r3, [pc, #488]	; (80005dc <main+0x368>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d010      	beq.n	800041a <main+0x1a6>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 80003f8:	f001 fa42 	bl	8001880 <HAL_GetTick>
 80003fc:	4602      	mov	r2, r0
 80003fe:	4b73      	ldr	r3, [pc, #460]	; (80005cc <main+0x358>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	1ad3      	subs	r3, r2, r3
 8000404:	2b36      	cmp	r3, #54	; 0x36
 8000406:	d92e      	bls.n	8000466 <main+0x1f2>
		  {
			  if(HAL_GPIO_ReadPin(btn_right_GPIO_Port, btn_right_Pin))
 8000408:	2180      	movs	r1, #128	; 0x80
 800040a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800040e:	f002 ff29 	bl	8003264 <HAL_GPIO_ReadPin>
			  {
//				  HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
			  }
			  btn_right_flag = 0;
 8000412:	4b72      	ldr	r3, [pc, #456]	; (80005dc <main+0x368>)
 8000414:	2200      	movs	r2, #0
 8000416:	701a      	strb	r2, [r3, #0]
 8000418:	e025      	b.n	8000466 <main+0x1f2>
		  }
	  }
	  else if(btn_mid_flag)
 800041a:	4b71      	ldr	r3, [pc, #452]	; (80005e0 <main+0x36c>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d021      	beq.n	8000466 <main+0x1f2>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 8000422:	f001 fa2d 	bl	8001880 <HAL_GetTick>
 8000426:	4602      	mov	r2, r0
 8000428:	4b68      	ldr	r3, [pc, #416]	; (80005cc <main+0x358>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	1ad3      	subs	r3, r2, r3
 800042e:	2b36      	cmp	r3, #54	; 0x36
 8000430:	d919      	bls.n	8000466 <main+0x1f2>
		  {
			  if(HAL_GPIO_ReadPin(btn_mid_GPIO_Port, btn_mid_Pin))
 8000432:	2140      	movs	r1, #64	; 0x40
 8000434:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000438:	f002 ff14 	bl	8003264 <HAL_GPIO_ReadPin>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d00e      	beq.n	8000460 <main+0x1ec>
			  {
				  // Toggle Menu Display state
				  if(display_state == 0){
 8000442:	4b5e      	ldr	r3, [pc, #376]	; (80005bc <main+0x348>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d103      	bne.n	8000452 <main+0x1de>
					  changeDisplayState(1);
 800044a:	2001      	movs	r0, #1
 800044c:	f000 fb62 	bl	8000b14 <changeDisplayState>
 8000450:	e006      	b.n	8000460 <main+0x1ec>
				  } else if(display_state == 1){
 8000452:	4b5a      	ldr	r3, [pc, #360]	; (80005bc <main+0x348>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d102      	bne.n	8000460 <main+0x1ec>
					  changeDisplayState(0);
 800045a:	2000      	movs	r0, #0
 800045c:	f000 fb5a 	bl	8000b14 <changeDisplayState>
				  }
//				  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
			  }
			  btn_mid_flag = 0;
 8000460:	4b5f      	ldr	r3, [pc, #380]	; (80005e0 <main+0x36c>)
 8000462:	2200      	movs	r2, #0
 8000464:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  // ADC TIM16 interrupt
	  if(adc_timer_flag)
 8000466:	4b5f      	ldr	r3, [pc, #380]	; (80005e4 <main+0x370>)
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	2b00      	cmp	r3, #0
 800046c:	f43f af40 	beq.w	80002f0 <main+0x7c>
	  {
		  if(adc_count > 999)
 8000470:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 8000474:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000478:	f0c0 80be 	bcc.w	80005f8 <main+0x384>
		  {
			  // Do calculations every 1000 readings
			  adc_count = 0;
 800047c:	2300      	movs	r3, #0
 800047e:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
			  uint32_t total = 0;
 8000482:	2300      	movs	r3, #0
 8000484:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
			  uint16_t max = 0;
 8000488:	2300      	movs	r3, #0
 800048a:	f8a7 3806 	strh.w	r3, [r7, #2054]	; 0x806
			  uint16_t min = adc_array[99]; // arbitrary value
 800048e:	f107 0320 	add.w	r3, r7, #32
 8000492:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8000496:	f8a7 3804 	strh.w	r3, [r7, #2052]	; 0x804
			  int16_t diff = 0;
 800049a:	2300      	movs	r3, #0
 800049c:	f8a7 37f2 	strh.w	r3, [r7, #2034]	; 0x7f2
			  int16_t prev_diff = 0;
 80004a0:	2300      	movs	r3, #0
 80004a2:	f8a7 3802 	strh.w	r3, [r7, #2050]	; 0x802
			  uint16_t mid_passes = 0;
 80004a6:	2300      	movs	r3, #0
 80004a8:	f8a7 3800 	strh.w	r3, [r7, #2048]	; 0x800
			  // 1000 measurements at 5kHz take 200ms
			  for(int x = 0; x < 1000; x++)
 80004ac:	2300      	movs	r3, #0
 80004ae:	f8c7 37fc 	str.w	r3, [r7, #2044]	; 0x7fc
 80004b2:	e035      	b.n	8000520 <main+0x2ac>
			  {
				  total += adc_array[x];
 80004b4:	f107 0320 	add.w	r3, r7, #32
 80004b8:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	; 0x7fc
 80004bc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80004c0:	461a      	mov	r2, r3
 80004c2:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 80004c6:	4413      	add	r3, r2
 80004c8:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
				  if(adc_array[x] > max)
 80004cc:	f107 0320 	add.w	r3, r7, #32
 80004d0:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	; 0x7fc
 80004d4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80004d8:	f8b7 2806 	ldrh.w	r2, [r7, #2054]	; 0x806
 80004dc:	429a      	cmp	r2, r3
 80004de:	d208      	bcs.n	80004f2 <main+0x27e>
				  {
					  max = adc_array[x];
 80004e0:	f107 0320 	add.w	r3, r7, #32
 80004e4:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	; 0x7fc
 80004e8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80004ec:	f8a7 3806 	strh.w	r3, [r7, #2054]	; 0x806
 80004f0:	e011      	b.n	8000516 <main+0x2a2>
				  }
				  else if(adc_array[x] < min)
 80004f2:	f107 0320 	add.w	r3, r7, #32
 80004f6:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	; 0x7fc
 80004fa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80004fe:	f8b7 2804 	ldrh.w	r2, [r7, #2052]	; 0x804
 8000502:	429a      	cmp	r2, r3
 8000504:	d907      	bls.n	8000516 <main+0x2a2>
				  {
					  min = adc_array[x];
 8000506:	f107 0320 	add.w	r3, r7, #32
 800050a:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	; 0x7fc
 800050e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000512:	f8a7 3804 	strh.w	r3, [r7, #2052]	; 0x804
			  for(int x = 0; x < 1000; x++)
 8000516:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	; 0x7fc
 800051a:	3301      	adds	r3, #1
 800051c:	f8c7 37fc 	str.w	r3, [r7, #2044]	; 0x7fc
 8000520:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	; 0x7fc
 8000524:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000528:	dbc4      	blt.n	80004b4 <main+0x240>
				  }
			  }
//			  measured_offset = total/1000;
			  measured_offset = 1000;
 800052a:	4b2f      	ldr	r3, [pc, #188]	; (80005e8 <main+0x374>)
 800052c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000530:	801a      	strh	r2, [r3, #0]
			  for(int x = 0; x < 1000; x++)
 8000532:	2300      	movs	r3, #0
 8000534:	f8c7 37f8 	str.w	r3, [r7, #2040]	; 0x7f8
 8000538:	e021      	b.n	800057e <main+0x30a>
			  {
				  // Calculate frequency
				  diff = adc_array[x] - measured_offset;
 800053a:	f107 0320 	add.w	r3, r7, #32
 800053e:	f8d7 27f8 	ldr.w	r2, [r7, #2040]	; 0x7f8
 8000542:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000546:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <main+0x374>)
 8000548:	881b      	ldrh	r3, [r3, #0]
 800054a:	1ad3      	subs	r3, r2, r3
 800054c:	b29b      	uxth	r3, r3
 800054e:	f8a7 37f2 	strh.w	r3, [r7, #2034]	; 0x7f2
				  if(diff > 0 && prev_diff < 0)
 8000552:	f9b7 37f2 	ldrsh.w	r3, [r7, #2034]	; 0x7f2
 8000556:	2b00      	cmp	r3, #0
 8000558:	dd08      	ble.n	800056c <main+0x2f8>
 800055a:	f9b7 3802 	ldrsh.w	r3, [r7, #2050]	; 0x802
 800055e:	2b00      	cmp	r3, #0
 8000560:	da04      	bge.n	800056c <main+0x2f8>
				  {
					  mid_passes++;
 8000562:	f8b7 3800 	ldrh.w	r3, [r7, #2048]	; 0x800
 8000566:	3301      	adds	r3, #1
 8000568:	f8a7 3800 	strh.w	r3, [r7, #2048]	; 0x800
				  }
				  prev_diff = diff;
 800056c:	f8b7 37f2 	ldrh.w	r3, [r7, #2034]	; 0x7f2
 8000570:	f8a7 3802 	strh.w	r3, [r7, #2050]	; 0x802
			  for(int x = 0; x < 1000; x++)
 8000574:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	; 0x7f8
 8000578:	3301      	adds	r3, #1
 800057a:	f8c7 37f8 	str.w	r3, [r7, #2040]	; 0x7f8
 800057e:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	; 0x7f8
 8000582:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000586:	dbd8      	blt.n	800053a <main+0x2c6>
			  }
			  measured_period = 50000/(mid_passes);
 8000588:	f8b7 3800 	ldrh.w	r3, [r7, #2048]	; 0x800
 800058c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000590:	fb92 f3f3 	sdiv	r3, r2, r3
 8000594:	b29a      	uxth	r2, r3
 8000596:	4b15      	ldr	r3, [pc, #84]	; (80005ec <main+0x378>)
 8000598:	801a      	strh	r2, [r3, #0]
//			  measured_frequency = 1000000/measured_period;
			  measured_frequency = 5250;
 800059a:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <main+0x37c>)
 800059c:	f241 4282 	movw	r2, #5250	; 0x1482
 80005a0:	801a      	strh	r2, [r3, #0]
//			  measured_amplitude = max - min;
			  measured_amplitude = 500;
 80005a2:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <main+0x380>)
 80005a4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005a8:	801a      	strh	r2, [r3, #0]
 80005aa:	e063      	b.n	8000674 <main+0x400>
 80005ac:	20000000 	.word	0x20000000
 80005b0:	200000a8 	.word	0x200000a8
 80005b4:	200000a4 	.word	0x200000a4
 80005b8:	2000012c 	.word	0x2000012c
 80005bc:	2000000e 	.word	0x2000000e
 80005c0:	080064d8 	.word	0x080064d8
 80005c4:	20000038 	.word	0x20000038
 80005c8:	2000003b 	.word	0x2000003b
 80005cc:	20000040 	.word	0x20000040
 80005d0:	48000400 	.word	0x48000400
 80005d4:	2000003c 	.word	0x2000003c
 80005d8:	2000003d 	.word	0x2000003d
 80005dc:	2000003a 	.word	0x2000003a
 80005e0:	20000039 	.word	0x20000039
 80005e4:	2000003e 	.word	0x2000003e
 80005e8:	2000004a 	.word	0x2000004a
 80005ec:	20000048 	.word	0x20000048
 80005f0:	20000046 	.word	0x20000046
 80005f4:	20000044 	.word	0x20000044
//			  sprintf(msg, "Max: %u\nMin: %u\nOffset: %u\nFrequency: %u\nAmplitude: %u\n\n", max, min, offset, frequency, amplitude);
//			  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 10);
		  }
		  else
		  {
			  HAL_ADC_Start(&hadc1);
 80005f8:	4822      	ldr	r0, [pc, #136]	; (8000684 <main+0x410>)
 80005fa:	f001 fb69 	bl	8001cd0 <HAL_ADC_Start>
			  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005fe:	f04f 31ff 	mov.w	r1, #4294967295
 8000602:	4820      	ldr	r0, [pc, #128]	; (8000684 <main+0x410>)
 8000604:	f001 fcb0 	bl	8001f68 <HAL_ADC_PollForConversion>
			  raw = HAL_ADC_GetValue(&hadc1);
 8000608:	481e      	ldr	r0, [pc, #120]	; (8000684 <main+0x410>)
 800060a:	f001 fdaf 	bl	800216c <HAL_ADC_GetValue>
 800060e:	4603      	mov	r3, r0
 8000610:	f8a7 37f6 	strh.w	r3, [r7, #2038]	; 0x7f6
			  HAL_ADC_Stop(&hadc1);
 8000614:	481b      	ldr	r0, [pc, #108]	; (8000684 <main+0x410>)
 8000616:	f001 fc71 	bl	8001efc <HAL_ADC_Stop>
			  millivolts = raw*3300/4095;
 800061a:	f8b7 37f6 	ldrh.w	r3, [r7, #2038]	; 0x7f6
 800061e:	f640 42e4 	movw	r2, #3300	; 0xce4
 8000622:	fb02 f303 	mul.w	r3, r2, r3
 8000626:	4a18      	ldr	r2, [pc, #96]	; (8000688 <main+0x414>)
 8000628:	fb82 1203 	smull	r1, r2, r2, r3
 800062c:	441a      	add	r2, r3
 800062e:	12d2      	asrs	r2, r2, #11
 8000630:	17db      	asrs	r3, r3, #31
 8000632:	1ad3      	subs	r3, r2, r3
 8000634:	f8a7 37f4 	strh.w	r3, [r7, #2036]	; 0x7f4
			  millivolts += 100*millivolts/1000; // Calibration
 8000638:	f8b7 37f4 	ldrh.w	r3, [r7, #2036]	; 0x7f4
 800063c:	2264      	movs	r2, #100	; 0x64
 800063e:	fb02 f303 	mul.w	r3, r2, r3
 8000642:	4a12      	ldr	r2, [pc, #72]	; (800068c <main+0x418>)
 8000644:	fb82 1203 	smull	r1, r2, r2, r3
 8000648:	1192      	asrs	r2, r2, #6
 800064a:	17db      	asrs	r3, r3, #31
 800064c:	1ad3      	subs	r3, r2, r3
 800064e:	b29a      	uxth	r2, r3
 8000650:	f8b7 37f4 	ldrh.w	r3, [r7, #2036]	; 0x7f4
 8000654:	4413      	add	r3, r2
 8000656:	f8a7 37f4 	strh.w	r3, [r7, #2036]	; 0x7f4
			  adc_array[adc_count] = millivolts;
 800065a:	f8b7 280e 	ldrh.w	r2, [r7, #2062]	; 0x80e
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	f8b7 17f4 	ldrh.w	r1, [r7, #2036]	; 0x7f4
 8000666:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			  adc_count++;
 800066a:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 800066e:	3301      	adds	r3, #1
 8000670:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
		  }

		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8000674:	2110      	movs	r1, #16
 8000676:	4806      	ldr	r0, [pc, #24]	; (8000690 <main+0x41c>)
 8000678:	f002 fe24 	bl	80032c4 <HAL_GPIO_TogglePin>
		  adc_timer_flag = 0;
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <main+0x420>)
 800067e:	2200      	movs	r2, #0
 8000680:	701a      	strb	r2, [r3, #0]
	  if(message_received && rx_byte[0] != '\n')
 8000682:	e635      	b.n	80002f0 <main+0x7c>
 8000684:	20000054 	.word	0x20000054
 8000688:	80080081 	.word	0x80080081
 800068c:	10624dd3 	.word	0x10624dd3
 8000690:	48000800 	.word	0x48000800
 8000694:	2000003e 	.word	0x2000003e

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b0a6      	sub	sp, #152	; 0x98
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006a2:	2228      	movs	r2, #40	; 0x28
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f005 ff02 	bl	80064b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2258      	movs	r2, #88	; 0x58
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f005 fef4 	bl	80064b0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c8:	2302      	movs	r3, #2
 80006ca:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006cc:	2301      	movs	r3, #1
 80006ce:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d0:	2310      	movs	r3, #16
 80006d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d6:	2302      	movs	r3, #2
 80006d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006e4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006f6:	4618      	mov	r0, r3
 80006f8:	f002 fe16 	bl	8003328 <HAL_RCC_OscConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000702:	f000 feef 	bl	80014e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000706:	230f      	movs	r3, #15
 8000708:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070a:	2302      	movs	r3, #2
 800070c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000716:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800071c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000720:	2102      	movs	r1, #2
 8000722:	4618      	mov	r0, r3
 8000724:	f003 fd16 	bl	8004154 <HAL_RCC_ClockConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800072e:	f000 fed9 	bl	80014e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM16
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <SystemClock_Config+0xc8>)
 8000734:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800073a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800073e:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8000740:	2300      	movs	r3, #0
 8000742:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	4618      	mov	r0, r3
 8000748:	f003 ff3a 	bl	80045c0 <HAL_RCCEx_PeriphCLKConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000752:	f000 fec7 	bl	80014e4 <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3798      	adds	r7, #152	; 0x98
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	00800082 	.word	0x00800082

08000764 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	; 0x28
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
 8000784:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000786:	4b2e      	ldr	r3, [pc, #184]	; (8000840 <MX_ADC1_Init+0xdc>)
 8000788:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800078c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800078e:	4b2c      	ldr	r3, [pc, #176]	; (8000840 <MX_ADC1_Init+0xdc>)
 8000790:	2200      	movs	r2, #0
 8000792:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000794:	4b2a      	ldr	r3, [pc, #168]	; (8000840 <MX_ADC1_Init+0xdc>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800079a:	4b29      	ldr	r3, [pc, #164]	; (8000840 <MX_ADC1_Init+0xdc>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007a0:	4b27      	ldr	r3, [pc, #156]	; (8000840 <MX_ADC1_Init+0xdc>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007a6:	4b26      	ldr	r3, [pc, #152]	; (8000840 <MX_ADC1_Init+0xdc>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ae:	4b24      	ldr	r3, [pc, #144]	; (8000840 <MX_ADC1_Init+0xdc>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007b4:	4b22      	ldr	r3, [pc, #136]	; (8000840 <MX_ADC1_Init+0xdc>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ba:	4b21      	ldr	r3, [pc, #132]	; (8000840 <MX_ADC1_Init+0xdc>)
 80007bc:	2200      	movs	r2, #0
 80007be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007c0:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <MX_ADC1_Init+0xdc>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007c6:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <MX_ADC1_Init+0xdc>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ce:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <MX_ADC1_Init+0xdc>)
 80007d0:	2204      	movs	r2, #4
 80007d2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007d4:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_ADC1_Init+0xdc>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80007da:	4b19      	ldr	r3, [pc, #100]	; (8000840 <MX_ADC1_Init+0xdc>)
 80007dc:	2200      	movs	r2, #0
 80007de:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007e0:	4817      	ldr	r0, [pc, #92]	; (8000840 <MX_ADC1_Init+0xdc>)
 80007e2:	f001 f87b 	bl	80018dc <HAL_ADC_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80007ec:	f000 fe7a 	bl	80014e4 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4619      	mov	r1, r3
 80007fa:	4811      	ldr	r0, [pc, #68]	; (8000840 <MX_ADC1_Init+0xdc>)
 80007fc:	f001 ffb0 	bl	8002760 <HAL_ADCEx_MultiModeConfigChannel>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000806:	f000 fe6d 	bl	80014e4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800080a:	2301      	movs	r3, #1
 800080c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800080e:	2301      	movs	r3, #1
 8000810:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	4619      	mov	r1, r3
 8000826:	4806      	ldr	r0, [pc, #24]	; (8000840 <MX_ADC1_Init+0xdc>)
 8000828:	f001 fcae 	bl	8002188 <HAL_ADC_ConfigChannel>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000832:	f000 fe57 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	3728      	adds	r7, #40	; 0x28
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000054 	.word	0x20000054

08000844 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_TIM16_Init+0x44>)
 800084a:	4a10      	ldr	r2, [pc, #64]	; (800088c <MX_TIM16_Init+0x48>)
 800084c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 72-1;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_TIM16_Init+0x44>)
 8000850:	2247      	movs	r2, #71	; 0x47
 8000852:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_TIM16_Init+0x44>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 50 - 1;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_TIM16_Init+0x44>)
 800085c:	2231      	movs	r2, #49	; 0x31
 800085e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_TIM16_Init+0x44>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_TIM16_Init+0x44>)
 8000868:	2200      	movs	r2, #0
 800086a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_TIM16_Init+0x44>)
 800086e:	2200      	movs	r2, #0
 8000870:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_TIM16_Init+0x44>)
 8000874:	f004 f8c2 	bl	80049fc <HAL_TIM_Base_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800087e:	f000 fe31 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	2000012c 	.word	0x2000012c
 800088c:	40014400 	.word	0x40014400

08000890 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 8000896:	4a15      	ldr	r2, [pc, #84]	; (80008ec <MX_USART2_UART_Init+0x5c>)
 8000898:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 800089c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008d4:	f004 fb5e 	bl	8004f94 <HAL_UART_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008de:	f000 fe01 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200000a8 	.word	0x200000a8
 80008ec:	40004400 	.word	0x40004400

080008f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	; 0x28
 80008f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000906:	4b75      	ldr	r3, [pc, #468]	; (8000adc <MX_GPIO_Init+0x1ec>)
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	4a74      	ldr	r2, [pc, #464]	; (8000adc <MX_GPIO_Init+0x1ec>)
 800090c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000910:	6153      	str	r3, [r2, #20]
 8000912:	4b72      	ldr	r3, [pc, #456]	; (8000adc <MX_GPIO_Init+0x1ec>)
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800091e:	4b6f      	ldr	r3, [pc, #444]	; (8000adc <MX_GPIO_Init+0x1ec>)
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	4a6e      	ldr	r2, [pc, #440]	; (8000adc <MX_GPIO_Init+0x1ec>)
 8000924:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000928:	6153      	str	r3, [r2, #20]
 800092a:	4b6c      	ldr	r3, [pc, #432]	; (8000adc <MX_GPIO_Init+0x1ec>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	4b69      	ldr	r3, [pc, #420]	; (8000adc <MX_GPIO_Init+0x1ec>)
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	4a68      	ldr	r2, [pc, #416]	; (8000adc <MX_GPIO_Init+0x1ec>)
 800093c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000940:	6153      	str	r3, [r2, #20]
 8000942:	4b66      	ldr	r3, [pc, #408]	; (8000adc <MX_GPIO_Init+0x1ec>)
 8000944:	695b      	ldr	r3, [r3, #20]
 8000946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	4b63      	ldr	r3, [pc, #396]	; (8000adc <MX_GPIO_Init+0x1ec>)
 8000950:	695b      	ldr	r3, [r3, #20]
 8000952:	4a62      	ldr	r2, [pc, #392]	; (8000adc <MX_GPIO_Init+0x1ec>)
 8000954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000958:	6153      	str	r3, [r2, #20]
 800095a:	4b60      	ldr	r3, [pc, #384]	; (8000adc <MX_GPIO_Init+0x1ec>)
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD5_Pin|LD4_Pin|lcd_D6_Pin 
 8000966:	2200      	movs	r2, #0
 8000968:	f44f 51f1 	mov.w	r1, #7712	; 0x1e20
 800096c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000970:	f002 fc90 	bl	8003294 <HAL_GPIO_WritePin>
                          |lcd_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|lcd_D4_Pin|LD3_Pin|lcd_D5_Pin, GPIO_PIN_RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 800097a:	4859      	ldr	r0, [pc, #356]	; (8000ae0 <MX_GPIO_Init+0x1f0>)
 800097c:	f002 fc8a 	bl	8003294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, lcd_blown_Pin|lcd_RS_Pin|lcd_E_Pin, GPIO_PIN_RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8000986:	4857      	ldr	r0, [pc, #348]	; (8000ae4 <MX_GPIO_Init+0x1f4>)
 8000988:	f002 fc84 	bl	8003294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800098c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000992:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4619      	mov	r1, r3
 80009a2:	484f      	ldr	r0, [pc, #316]	; (8000ae0 <MX_GPIO_Init+0x1f0>)
 80009a4:	f002 fad4 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD5_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD5_Pin|LD4_Pin;
 80009a8:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 80009ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c4:	f002 fac4 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_mid_Pin */
  GPIO_InitStruct.Pin = btn_mid_Pin;
 80009c8:	2340      	movs	r3, #64	; 0x40
 80009ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80009cc:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80009d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d2:	2301      	movs	r3, #1
 80009d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn_mid_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4619      	mov	r1, r3
 80009dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e0:	f002 fab6 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_right_Pin */
  GPIO_InitStruct.Pin = btn_right_Pin;
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009e8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn_right_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	4619      	mov	r1, r3
 80009f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fc:	f002 faa8 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD3_Pin;
 8000a00:	2390      	movs	r3, #144	; 0x90
 8000a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	4832      	ldr	r0, [pc, #200]	; (8000ae0 <MX_GPIO_Init+0x1f0>)
 8000a18:	f002 fa9a 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : btn_down_Pin btn_left_Pin btn_up_Pin */
  GPIO_InitStruct.Pin = btn_down_Pin|btn_left_Pin|btn_up_Pin;
 8000a1c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a22:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4619      	mov	r1, r3
 8000a32:	482c      	ldr	r0, [pc, #176]	; (8000ae4 <MX_GPIO_Init+0x1f4>)
 8000a34:	f002 fa8c 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : lcd_blown_Pin */
  GPIO_InitStruct.Pin = lcd_blown_Pin;
 8000a38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a3e:	2311      	movs	r3, #17
 8000a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(lcd_blown_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4824      	ldr	r0, [pc, #144]	; (8000ae4 <MX_GPIO_Init+0x1f4>)
 8000a52:	f002 fa7d 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : lcd_RS_Pin lcd_E_Pin */
  GPIO_InitStruct.Pin = lcd_RS_Pin|lcd_E_Pin;
 8000a56:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	481d      	ldr	r0, [pc, #116]	; (8000ae4 <MX_GPIO_Init+0x1f4>)
 8000a70:	f002 fa6e 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : lcd_D4_Pin lcd_D5_Pin */
  GPIO_InitStruct.Pin = lcd_D4_Pin|lcd_D5_Pin;
 8000a74:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a7a:	2311      	movs	r3, #17
 8000a7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4814      	ldr	r0, [pc, #80]	; (8000ae0 <MX_GPIO_Init+0x1f0>)
 8000a8e:	f002 fa5f 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : lcd_D6_Pin lcd_D7_Pin */
  GPIO_InitStruct.Pin = lcd_D6_Pin|lcd_D7_Pin;
 8000a92:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a98:	2311      	movs	r3, #17
 8000a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aae:	f002 fa4f 	bl	8002f50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	2017      	movs	r0, #23
 8000ab8:	f002 f99d 	bl	8002df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000abc:	2017      	movs	r0, #23
 8000abe:	f002 f9b6 	bl	8002e2e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	2028      	movs	r0, #40	; 0x28
 8000ac8:	f002 f995 	bl	8002df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000acc:	2028      	movs	r0, #40	; 0x28
 8000ace:	f002 f9ae 	bl	8002e2e <HAL_NVIC_EnableIRQ>

}
 8000ad2:	bf00      	nop
 8000ad4:	3728      	adds	r7, #40	; 0x28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	48000800 	.word	0x48000800
 8000ae4:	48000400 	.word	0x48000400

08000ae8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this interrupt
	if(htim == &htim16)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a06      	ldr	r2, [pc, #24]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d102      	bne.n	8000afe <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		adc_timer_flag = 1;
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	701a      	strb	r2, [r3, #0]
	}
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	2000012c 	.word	0x2000012c
 8000b10:	2000003e 	.word	0x2000003e

08000b14 <changeDisplayState>:

uint8_t changeDisplayState(uint8_t code)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
	if (code == 0)
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d11d      	bne.n	8000b60 <changeDisplayState+0x4c>
	{
		// Change to Menu Display State
		display_state = 0;
 8000b24:	4b32      	ldr	r3, [pc, #200]	; (8000bf0 <changeDisplayState+0xdc>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	2120      	movs	r1, #32
 8000b2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b32:	f002 fbaf 	bl	8003294 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2180      	movs	r1, #128	; 0x80
 8000b3a:	482e      	ldr	r0, [pc, #184]	; (8000bf4 <changeDisplayState+0xe0>)
 8000b3c:	f002 fbaa 	bl	8003294 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000b40:	2200      	movs	r2, #0
 8000b42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4a:	f002 fba3 	bl	8003294 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b58:	f002 fb9c 	bl	8003294 <HAL_GPIO_WritePin>
		return 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	e042      	b.n	8000be6 <changeDisplayState+0xd2>
	}
	else if (code == 1)
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d11d      	bne.n	8000ba2 <changeDisplayState+0x8e>
	{
		// Change to Measurement Display State
		display_state = 1;
 8000b66:	4b22      	ldr	r3, [pc, #136]	; (8000bf0 <changeDisplayState+0xdc>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2120      	movs	r1, #32
 8000b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b74:	f002 fb8e 	bl	8003294 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	2180      	movs	r1, #128	; 0x80
 8000b7c:	481d      	ldr	r0, [pc, #116]	; (8000bf4 <changeDisplayState+0xe0>)
 8000b7e:	f002 fb89 	bl	8003294 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8c:	f002 fb82 	bl	8003294 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9a:	f002 fb7b 	bl	8003294 <HAL_GPIO_WritePin>
		return 1;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e021      	b.n	8000be6 <changeDisplayState+0xd2>
	}
	else if (code == 2)
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d11d      	bne.n	8000be4 <changeDisplayState+0xd0>
	{
		// Change to Output Display State
		display_state = 2;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <changeDisplayState+0xdc>)
 8000baa:	2202      	movs	r2, #2
 8000bac:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2120      	movs	r1, #32
 8000bb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb6:	f002 fb6d 	bl	8003294 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2180      	movs	r1, #128	; 0x80
 8000bbe:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <changeDisplayState+0xe0>)
 8000bc0:	f002 fb68 	bl	8003294 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bce:	f002 fb61 	bl	8003294 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bdc:	f002 fb5a 	bl	8003294 <HAL_GPIO_WritePin>
		return 2;
 8000be0:	2302      	movs	r3, #2
 8000be2:	e000      	b.n	8000be6 <changeDisplayState+0xd2>
	}
	else
	{
		// An error has occurred
		return 3;
 8000be4:	2303      	movs	r3, #3
	}
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	2000000e 	.word	0x2000000e
 8000bf4:	48000800 	.word	0x48000800

08000bf8 <uartRxComplete>:

bool uartRxComplete(uint8_t last_byte)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
	if(last_byte == '!')
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b21      	cmp	r3, #33	; 0x21
 8000c06:	d101      	bne.n	8000c0c <uartRxComplete+0x14>
	{
		return true;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	e000      	b.n	8000c0e <uartRxComplete+0x16>
	}
	else
	{
		return false;
 8000c0c:	2300      	movs	r3, #0
	}
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
	...

08000c1c <interpret_rx_message>:

void interpret_rx_message(uint8_t *rx_array, uint8_t length)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	460b      	mov	r3, r1
 8000c26:	70fb      	strb	r3, [r7, #3]

//	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);

	if(length > 7)
 8000c28:	78fb      	ldrb	r3, [r7, #3]
 8000c2a:	2b07      	cmp	r3, #7
 8000c2c:	d96f      	bls.n	8000d0e <interpret_rx_message+0xf2>
	{
		if(rx_array[2] == '*')
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	3302      	adds	r3, #2
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b2a      	cmp	r3, #42	; 0x2a
 8000c36:	d122      	bne.n	8000c7e <interpret_rx_message+0x62>
		{
			// Requests
//			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
			switch(rx_array[4])
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3304      	adds	r3, #4
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b6d      	cmp	r3, #109	; 0x6d
 8000c40:	d002      	beq.n	8000c48 <interpret_rx_message+0x2c>
 8000c42:	2b73      	cmp	r3, #115	; 0x73
 8000c44:	d007      	beq.n	8000c56 <interpret_rx_message+0x3a>
					request_status();
					break;

				default:
					// Problems
					break;
 8000c46:	e062      	b.n	8000d0e <interpret_rx_message+0xf2>
					request_measurement(rx_array[6]);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3306      	adds	r3, #6
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 f866 	bl	8000d20 <request_measurement>
					break;
 8000c54:	e05b      	b.n	8000d0e <interpret_rx_message+0xf2>
					if(rx_array[6] == '0'){
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	3306      	adds	r3, #6
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b30      	cmp	r3, #48	; 0x30
 8000c5e:	d103      	bne.n	8000c68 <interpret_rx_message+0x4c>
						signal_active = 0;
 8000c60:	4b2d      	ldr	r3, [pc, #180]	; (8000d18 <interpret_rx_message+0xfc>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
 8000c66:	e007      	b.n	8000c78 <interpret_rx_message+0x5c>
					} else if(rx_array[6] == '1'){
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3306      	adds	r3, #6
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b31      	cmp	r3, #49	; 0x31
 8000c70:	d102      	bne.n	8000c78 <interpret_rx_message+0x5c>
						signal_active = 1;
 8000c72:	4b29      	ldr	r3, [pc, #164]	; (8000d18 <interpret_rx_message+0xfc>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	701a      	strb	r2, [r3, #0]
					request_status();
 8000c78:	f000 f9a8 	bl	8000fcc <request_status>
					break;
 8000c7c:	e047      	b.n	8000d0e <interpret_rx_message+0xf2>
			}
		}
		else if(rx_array[2] == '$')
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	3302      	adds	r3, #2
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b24      	cmp	r3, #36	; 0x24
 8000c86:	d137      	bne.n	8000cf8 <interpret_rx_message+0xdc>
		{
			// Set
			uint8_t key1 = rx_array[4];
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	791b      	ldrb	r3, [r3, #4]
 8000c8c:	73fb      	strb	r3, [r7, #15]
			uint8_t key2 = rx_array[5];
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	795b      	ldrb	r3, [r3, #5]
 8000c92:	73bb      	strb	r3, [r7, #14]
			if(key1 == 'D' && key2 == 'V'){
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
 8000c96:	2b44      	cmp	r3, #68	; 0x44
 8000c98:	d106      	bne.n	8000ca8 <interpret_rx_message+0x8c>
 8000c9a:	7bbb      	ldrb	r3, [r7, #14]
 8000c9c:	2b56      	cmp	r3, #86	; 0x56
 8000c9e:	d103      	bne.n	8000ca8 <interpret_rx_message+0x8c>
				// DC Voltage
				measurement_mode = 0;
 8000ca0:	4b1e      	ldr	r3, [pc, #120]	; (8000d1c <interpret_rx_message+0x100>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	701a      	strb	r2, [r3, #0]
 8000ca6:	e032      	b.n	8000d0e <interpret_rx_message+0xf2>
			} else if (key1 == 'A' && key2 == 'V'){
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	2b41      	cmp	r3, #65	; 0x41
 8000cac:	d106      	bne.n	8000cbc <interpret_rx_message+0xa0>
 8000cae:	7bbb      	ldrb	r3, [r7, #14]
 8000cb0:	2b56      	cmp	r3, #86	; 0x56
 8000cb2:	d103      	bne.n	8000cbc <interpret_rx_message+0xa0>
				// AC Voltage
				measurement_mode = 1;
 8000cb4:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <interpret_rx_message+0x100>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	701a      	strb	r2, [r3, #0]
 8000cba:	e028      	b.n	8000d0e <interpret_rx_message+0xf2>
			} else if (key1 == 'D' && key2 == 'I'){
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
 8000cbe:	2b44      	cmp	r3, #68	; 0x44
 8000cc0:	d106      	bne.n	8000cd0 <interpret_rx_message+0xb4>
 8000cc2:	7bbb      	ldrb	r3, [r7, #14]
 8000cc4:	2b49      	cmp	r3, #73	; 0x49
 8000cc6:	d103      	bne.n	8000cd0 <interpret_rx_message+0xb4>
				// DC Current
				measurement_mode = 2;
 8000cc8:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <interpret_rx_message+0x100>)
 8000cca:	2202      	movs	r2, #2
 8000ccc:	701a      	strb	r2, [r3, #0]
 8000cce:	e01e      	b.n	8000d0e <interpret_rx_message+0xf2>
			} else if (key1 == 'A' && key2 == 'I'){
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	2b41      	cmp	r3, #65	; 0x41
 8000cd4:	d106      	bne.n	8000ce4 <interpret_rx_message+0xc8>
 8000cd6:	7bbb      	ldrb	r3, [r7, #14]
 8000cd8:	2b49      	cmp	r3, #73	; 0x49
 8000cda:	d103      	bne.n	8000ce4 <interpret_rx_message+0xc8>
				// AC Current
				measurement_mode = 3;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <interpret_rx_message+0x100>)
 8000cde:	2203      	movs	r2, #3
 8000ce0:	701a      	strb	r2, [r3, #0]
 8000ce2:	e014      	b.n	8000d0e <interpret_rx_message+0xf2>
			} else if (key1 == 'T' && key2 == 'C'){
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
 8000ce6:	2b54      	cmp	r3, #84	; 0x54
 8000ce8:	d111      	bne.n	8000d0e <interpret_rx_message+0xf2>
 8000cea:	7bbb      	ldrb	r3, [r7, #14]
 8000cec:	2b43      	cmp	r3, #67	; 0x43
 8000cee:	d10e      	bne.n	8000d0e <interpret_rx_message+0xf2>
				// Temperature
				measurement_mode = 4;
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <interpret_rx_message+0x100>)
 8000cf2:	2204      	movs	r2, #4
 8000cf4:	701a      	strb	r2, [r3, #0]
		else
		{
//			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
		}
	}
}
 8000cf6:	e00a      	b.n	8000d0e <interpret_rx_message+0xf2>
		}else if(rx_array[2] == '^'){
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3302      	adds	r3, #2
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b5e      	cmp	r3, #94	; 0x5e
 8000d00:	d105      	bne.n	8000d0e <interpret_rx_message+0xf2>
			set_output_parameter(rx_array, length);
 8000d02:	78fb      	ldrb	r3, [r7, #3]
 8000d04:	4619      	mov	r1, r3
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f000 f9c2 	bl	8001090 <set_output_parameter>
}
 8000d0c:	e7ff      	b.n	8000d0e <interpret_rx_message+0xf2>
 8000d0e:	bf00      	nop
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	2000004d 	.word	0x2000004d
 8000d1c:	2000004c 	.word	0x2000004c

08000d20 <request_measurement>:

void request_measurement(uint8_t parameter)
{
 8000d20:	b590      	push	{r4, r7, lr}
 8000d22:	b087      	sub	sp, #28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
	uint8_t msg[13] = "@,m,x,xxxx,!\n";
 8000d2a:	4b9f      	ldr	r3, [pc, #636]	; (8000fa8 <request_measurement+0x288>)
 8000d2c:	f107 0408 	add.w	r4, r7, #8
 8000d30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d32:	c407      	stmia	r4!, {r0, r1, r2}
 8000d34:	7023      	strb	r3, [r4, #0]
	switch(parameter){
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	3b61      	subs	r3, #97	; 0x61
 8000d3a:	2b13      	cmp	r3, #19
 8000d3c:	f200 8122 	bhi.w	8000f84 <request_measurement+0x264>
 8000d40:	a201      	add	r2, pc, #4	; (adr r2, 8000d48 <request_measurement+0x28>)
 8000d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d46:	bf00      	nop
 8000d48:	08000d99 	.word	0x08000d99
 8000d4c:	08000f85 	.word	0x08000f85
 8000d50:	08000f85 	.word	0x08000f85
 8000d54:	08000f85 	.word	0x08000f85
 8000d58:	08000f85 	.word	0x08000f85
 8000d5c:	08000ee1 	.word	0x08000ee1
 8000d60:	08000f85 	.word	0x08000f85
 8000d64:	08000f85 	.word	0x08000f85
 8000d68:	08000f85 	.word	0x08000f85
 8000d6c:	08000f85 	.word	0x08000f85
 8000d70:	08000f85 	.word	0x08000f85
 8000d74:	08000f85 	.word	0x08000f85
 8000d78:	08000f85 	.word	0x08000f85
 8000d7c:	08000f85 	.word	0x08000f85
 8000d80:	08000e3d 	.word	0x08000e3d
 8000d84:	08000f85 	.word	0x08000f85
 8000d88:	08000f85 	.word	0x08000f85
 8000d8c:	08000f85 	.word	0x08000f85
 8000d90:	08000f85 	.word	0x08000f85
 8000d94:	08000f85 	.word	0x08000f85
		case 't':
			// Type
			break;
		case 'a':
			// Amplitude (peak-to-peak)
			msg[4] = 'a';
 8000d98:	2361      	movs	r3, #97	; 0x61
 8000d9a:	733b      	strb	r3, [r7, #12]
			msg[6] = ((measured_amplitude/1000) % 10) + 48;
 8000d9c:	4b83      	ldr	r3, [pc, #524]	; (8000fac <request_measurement+0x28c>)
 8000d9e:	881b      	ldrh	r3, [r3, #0]
 8000da0:	4a83      	ldr	r2, [pc, #524]	; (8000fb0 <request_measurement+0x290>)
 8000da2:	fba2 2303 	umull	r2, r3, r2, r3
 8000da6:	099b      	lsrs	r3, r3, #6
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	4b82      	ldr	r3, [pc, #520]	; (8000fb4 <request_measurement+0x294>)
 8000dac:	fba3 1302 	umull	r1, r3, r3, r2
 8000db0:	08d9      	lsrs	r1, r3, #3
 8000db2:	460b      	mov	r3, r1
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	440b      	add	r3, r1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	3330      	adds	r3, #48	; 0x30
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	73bb      	strb	r3, [r7, #14]
			msg[7] = ((measured_amplitude/100) % 10) + 48;
 8000dc6:	4b79      	ldr	r3, [pc, #484]	; (8000fac <request_measurement+0x28c>)
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	4a7b      	ldr	r2, [pc, #492]	; (8000fb8 <request_measurement+0x298>)
 8000dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd0:	095b      	lsrs	r3, r3, #5
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	4b77      	ldr	r3, [pc, #476]	; (8000fb4 <request_measurement+0x294>)
 8000dd6:	fba3 1302 	umull	r1, r3, r3, r2
 8000dda:	08d9      	lsrs	r1, r3, #3
 8000ddc:	460b      	mov	r3, r1
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	440b      	add	r3, r1
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	3330      	adds	r3, #48	; 0x30
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	73fb      	strb	r3, [r7, #15]
			msg[8] = ((measured_amplitude/10) % 10) + 48;
 8000df0:	4b6e      	ldr	r3, [pc, #440]	; (8000fac <request_measurement+0x28c>)
 8000df2:	881b      	ldrh	r3, [r3, #0]
 8000df4:	4a6f      	ldr	r2, [pc, #444]	; (8000fb4 <request_measurement+0x294>)
 8000df6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfa:	08db      	lsrs	r3, r3, #3
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	4b6d      	ldr	r3, [pc, #436]	; (8000fb4 <request_measurement+0x294>)
 8000e00:	fba3 1302 	umull	r1, r3, r3, r2
 8000e04:	08d9      	lsrs	r1, r3, #3
 8000e06:	460b      	mov	r3, r1
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	440b      	add	r3, r1
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	3330      	adds	r3, #48	; 0x30
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	743b      	strb	r3, [r7, #16]
			msg[9] = (measured_amplitude % 10) + 48;
 8000e1a:	4b64      	ldr	r3, [pc, #400]	; (8000fac <request_measurement+0x28c>)
 8000e1c:	881a      	ldrh	r2, [r3, #0]
 8000e1e:	4b65      	ldr	r3, [pc, #404]	; (8000fb4 <request_measurement+0x294>)
 8000e20:	fba3 1302 	umull	r1, r3, r3, r2
 8000e24:	08d9      	lsrs	r1, r3, #3
 8000e26:	460b      	mov	r3, r1
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	440b      	add	r3, r1
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	3330      	adds	r3, #48	; 0x30
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	747b      	strb	r3, [r7, #17]
			break;
 8000e3a:	e0a4      	b.n	8000f86 <request_measurement+0x266>
		case 'o':
			// Offset
			msg[4] = 'o';
 8000e3c:	236f      	movs	r3, #111	; 0x6f
 8000e3e:	733b      	strb	r3, [r7, #12]
			msg[6] = ((measured_offset/1000) % 10) + 48;
 8000e40:	4b5e      	ldr	r3, [pc, #376]	; (8000fbc <request_measurement+0x29c>)
 8000e42:	881b      	ldrh	r3, [r3, #0]
 8000e44:	4a5a      	ldr	r2, [pc, #360]	; (8000fb0 <request_measurement+0x290>)
 8000e46:	fba2 2303 	umull	r2, r3, r2, r3
 8000e4a:	099b      	lsrs	r3, r3, #6
 8000e4c:	b29a      	uxth	r2, r3
 8000e4e:	4b59      	ldr	r3, [pc, #356]	; (8000fb4 <request_measurement+0x294>)
 8000e50:	fba3 1302 	umull	r1, r3, r3, r2
 8000e54:	08d9      	lsrs	r1, r3, #3
 8000e56:	460b      	mov	r3, r1
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	440b      	add	r3, r1
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	3330      	adds	r3, #48	; 0x30
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	73bb      	strb	r3, [r7, #14]
			msg[7] = ((measured_offset/100) % 10) + 48;
 8000e6a:	4b54      	ldr	r3, [pc, #336]	; (8000fbc <request_measurement+0x29c>)
 8000e6c:	881b      	ldrh	r3, [r3, #0]
 8000e6e:	4a52      	ldr	r2, [pc, #328]	; (8000fb8 <request_measurement+0x298>)
 8000e70:	fba2 2303 	umull	r2, r3, r2, r3
 8000e74:	095b      	lsrs	r3, r3, #5
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	4b4e      	ldr	r3, [pc, #312]	; (8000fb4 <request_measurement+0x294>)
 8000e7a:	fba3 1302 	umull	r1, r3, r3, r2
 8000e7e:	08d9      	lsrs	r1, r3, #3
 8000e80:	460b      	mov	r3, r1
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	440b      	add	r3, r1
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	3330      	adds	r3, #48	; 0x30
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	73fb      	strb	r3, [r7, #15]
			msg[8] = ((measured_offset/10) % 10) + 48;
 8000e94:	4b49      	ldr	r3, [pc, #292]	; (8000fbc <request_measurement+0x29c>)
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	4a46      	ldr	r2, [pc, #280]	; (8000fb4 <request_measurement+0x294>)
 8000e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e9e:	08db      	lsrs	r3, r3, #3
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	4b44      	ldr	r3, [pc, #272]	; (8000fb4 <request_measurement+0x294>)
 8000ea4:	fba3 1302 	umull	r1, r3, r3, r2
 8000ea8:	08d9      	lsrs	r1, r3, #3
 8000eaa:	460b      	mov	r3, r1
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	440b      	add	r3, r1
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	3330      	adds	r3, #48	; 0x30
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	743b      	strb	r3, [r7, #16]
			msg[9] = (measured_offset % 10) + 48;
 8000ebe:	4b3f      	ldr	r3, [pc, #252]	; (8000fbc <request_measurement+0x29c>)
 8000ec0:	881a      	ldrh	r2, [r3, #0]
 8000ec2:	4b3c      	ldr	r3, [pc, #240]	; (8000fb4 <request_measurement+0x294>)
 8000ec4:	fba3 1302 	umull	r1, r3, r3, r2
 8000ec8:	08d9      	lsrs	r1, r3, #3
 8000eca:	460b      	mov	r3, r1
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	440b      	add	r3, r1
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	3330      	adds	r3, #48	; 0x30
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	747b      	strb	r3, [r7, #17]
			break;
 8000ede:	e052      	b.n	8000f86 <request_measurement+0x266>
		case 'f':
			// Frequency
			msg[4] = 'f';
 8000ee0:	2366      	movs	r3, #102	; 0x66
 8000ee2:	733b      	strb	r3, [r7, #12]
			msg[6] = ((measured_frequency/1000) % 10) + 48;
 8000ee4:	4b36      	ldr	r3, [pc, #216]	; (8000fc0 <request_measurement+0x2a0>)
 8000ee6:	881b      	ldrh	r3, [r3, #0]
 8000ee8:	4a31      	ldr	r2, [pc, #196]	; (8000fb0 <request_measurement+0x290>)
 8000eea:	fba2 2303 	umull	r2, r3, r2, r3
 8000eee:	099b      	lsrs	r3, r3, #6
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	4b30      	ldr	r3, [pc, #192]	; (8000fb4 <request_measurement+0x294>)
 8000ef4:	fba3 1302 	umull	r1, r3, r3, r2
 8000ef8:	08d9      	lsrs	r1, r3, #3
 8000efa:	460b      	mov	r3, r1
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	440b      	add	r3, r1
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	3330      	adds	r3, #48	; 0x30
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	73bb      	strb	r3, [r7, #14]
			msg[7] = ((measured_frequency/100) % 10) + 48;
 8000f0e:	4b2c      	ldr	r3, [pc, #176]	; (8000fc0 <request_measurement+0x2a0>)
 8000f10:	881b      	ldrh	r3, [r3, #0]
 8000f12:	4a29      	ldr	r2, [pc, #164]	; (8000fb8 <request_measurement+0x298>)
 8000f14:	fba2 2303 	umull	r2, r3, r2, r3
 8000f18:	095b      	lsrs	r3, r3, #5
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	4b25      	ldr	r3, [pc, #148]	; (8000fb4 <request_measurement+0x294>)
 8000f1e:	fba3 1302 	umull	r1, r3, r3, r2
 8000f22:	08d9      	lsrs	r1, r3, #3
 8000f24:	460b      	mov	r3, r1
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	440b      	add	r3, r1
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	3330      	adds	r3, #48	; 0x30
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	73fb      	strb	r3, [r7, #15]
			msg[8] = ((measured_frequency/10) % 10) + 48;
 8000f38:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <request_measurement+0x2a0>)
 8000f3a:	881b      	ldrh	r3, [r3, #0]
 8000f3c:	4a1d      	ldr	r2, [pc, #116]	; (8000fb4 <request_measurement+0x294>)
 8000f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f42:	08db      	lsrs	r3, r3, #3
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <request_measurement+0x294>)
 8000f48:	fba3 1302 	umull	r1, r3, r3, r2
 8000f4c:	08d9      	lsrs	r1, r3, #3
 8000f4e:	460b      	mov	r3, r1
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	440b      	add	r3, r1
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	3330      	adds	r3, #48	; 0x30
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	743b      	strb	r3, [r7, #16]
			msg[9] = (measured_frequency % 10) + 48;
 8000f62:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <request_measurement+0x2a0>)
 8000f64:	881a      	ldrh	r2, [r3, #0]
 8000f66:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <request_measurement+0x294>)
 8000f68:	fba3 1302 	umull	r1, r3, r3, r2
 8000f6c:	08d9      	lsrs	r1, r3, #3
 8000f6e:	460b      	mov	r3, r1
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	440b      	add	r3, r1
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	3330      	adds	r3, #48	; 0x30
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	747b      	strb	r3, [r7, #17]
			break;
 8000f82:	e000      	b.n	8000f86 <request_measurement+0x266>
		case 'c':
			// Temperature
			break;
		default:
			// Problems
			break;
 8000f84:	bf00      	nop
	}
	HAL_UART_Transmit(&huart2, msg, 13, 10);
 8000f86:	f107 0108 	add.w	r1, r7, #8
 8000f8a:	230a      	movs	r3, #10
 8000f8c:	220d      	movs	r2, #13
 8000f8e:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <request_measurement+0x2a4>)
 8000f90:	f004 f84e 	bl	8005030 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 8000f94:	2201      	movs	r2, #1
 8000f96:	490c      	ldr	r1, [pc, #48]	; (8000fc8 <request_measurement+0x2a8>)
 8000f98:	480a      	ldr	r0, [pc, #40]	; (8000fc4 <request_measurement+0x2a4>)
 8000f9a:	f004 f8dd 	bl	8005158 <HAL_UART_Receive_IT>
}
 8000f9e:	bf00      	nop
 8000fa0:	371c      	adds	r7, #28
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd90      	pop	{r4, r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	080064e8 	.word	0x080064e8
 8000fac:	20000044 	.word	0x20000044
 8000fb0:	10624dd3 	.word	0x10624dd3
 8000fb4:	cccccccd 	.word	0xcccccccd
 8000fb8:	51eb851f 	.word	0x51eb851f
 8000fbc:	2000004a 	.word	0x2000004a
 8000fc0:	20000046 	.word	0x20000046
 8000fc4:	200000a8 	.word	0x200000a8
 8000fc8:	200000a4 	.word	0x200000a4

08000fcc <request_status>:

void request_status()
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
	uint8_t msg[11] = "@,xx,x,x,!\n";
 8000fd2:	4a29      	ldr	r2, [pc, #164]	; (8001078 <request_status+0xac>)
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fd8:	c303      	stmia	r3!, {r0, r1}
 8000fda:	801a      	strh	r2, [r3, #0]
 8000fdc:	3302      	adds	r3, #2
 8000fde:	0c12      	lsrs	r2, r2, #16
 8000fe0:	701a      	strb	r2, [r3, #0]
	switch(measurement_mode){
 8000fe2:	4b26      	ldr	r3, [pc, #152]	; (800107c <request_status+0xb0>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	d825      	bhi.n	8001036 <request_status+0x6a>
 8000fea:	a201      	add	r2, pc, #4	; (adr r2, 8000ff0 <request_status+0x24>)
 8000fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff0:	08001005 	.word	0x08001005
 8000ff4:	0800100f 	.word	0x0800100f
 8000ff8:	08001019 	.word	0x08001019
 8000ffc:	08001023 	.word	0x08001023
 8001000:	0800102d 	.word	0x0800102d
		case 0:
			// DV
			msg[2] = 'D';
 8001004:	2344      	movs	r3, #68	; 0x44
 8001006:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'V';
 8001008:	2356      	movs	r3, #86	; 0x56
 800100a:	71fb      	strb	r3, [r7, #7]
			break;
 800100c:	e014      	b.n	8001038 <request_status+0x6c>
		case 1:
			// AV
			msg[2] = 'A';
 800100e:	2341      	movs	r3, #65	; 0x41
 8001010:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'V';
 8001012:	2356      	movs	r3, #86	; 0x56
 8001014:	71fb      	strb	r3, [r7, #7]
			break;
 8001016:	e00f      	b.n	8001038 <request_status+0x6c>
		case 2:
			// DI
			msg[2] = 'D';
 8001018:	2344      	movs	r3, #68	; 0x44
 800101a:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'I';
 800101c:	2349      	movs	r3, #73	; 0x49
 800101e:	71fb      	strb	r3, [r7, #7]
			break;
 8001020:	e00a      	b.n	8001038 <request_status+0x6c>
		case 3:
			// AI
			msg[2] = 'A';
 8001022:	2341      	movs	r3, #65	; 0x41
 8001024:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'I';
 8001026:	2349      	movs	r3, #73	; 0x49
 8001028:	71fb      	strb	r3, [r7, #7]
			break;
 800102a:	e005      	b.n	8001038 <request_status+0x6c>
		case 4:
			// TC
			msg[2] = 'T';
 800102c:	2354      	movs	r3, #84	; 0x54
 800102e:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'C';
 8001030:	2343      	movs	r3, #67	; 0x43
 8001032:	71fb      	strb	r3, [r7, #7]
			break;
 8001034:	e000      	b.n	8001038 <request_status+0x6c>
		default:
			// Problems
			break;
 8001036:	bf00      	nop
	}
	msg[5] = signal_type;
 8001038:	4b11      	ldr	r3, [pc, #68]	; (8001080 <request_status+0xb4>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	727b      	strb	r3, [r7, #9]
	switch(signal_active){
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <request_status+0xb8>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d002      	beq.n	800104c <request_status+0x80>
 8001046:	2b01      	cmp	r3, #1
 8001048:	d003      	beq.n	8001052 <request_status+0x86>
			// Output on
			msg[7] = '1';
			break;
		default:
			// Problems
			break;
 800104a:	e005      	b.n	8001058 <request_status+0x8c>
			msg[7] = '0';
 800104c:	2330      	movs	r3, #48	; 0x30
 800104e:	72fb      	strb	r3, [r7, #11]
			break;
 8001050:	e002      	b.n	8001058 <request_status+0x8c>
			msg[7] = '1';
 8001052:	2331      	movs	r3, #49	; 0x31
 8001054:	72fb      	strb	r3, [r7, #11]
			break;
 8001056:	bf00      	nop
	}
	HAL_UART_Transmit(&huart2, msg, 11, 10);
 8001058:	1d39      	adds	r1, r7, #4
 800105a:	230a      	movs	r3, #10
 800105c:	220b      	movs	r2, #11
 800105e:	480a      	ldr	r0, [pc, #40]	; (8001088 <request_status+0xbc>)
 8001060:	f003 ffe6 	bl	8005030 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 8001064:	2201      	movs	r2, #1
 8001066:	4909      	ldr	r1, [pc, #36]	; (800108c <request_status+0xc0>)
 8001068:	4807      	ldr	r0, [pc, #28]	; (8001088 <request_status+0xbc>)
 800106a:	f004 f875 	bl	8005158 <HAL_UART_Receive_IT>

}
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	080064f8 	.word	0x080064f8
 800107c:	2000004c 	.word	0x2000004c
 8001080:	2000000d 	.word	0x2000000d
 8001084:	2000004d 	.word	0x2000004d
 8001088:	200000a8 	.word	0x200000a8
 800108c:	200000a4 	.word	0x200000a4

08001090 <set_output_parameter>:

void set_output_parameter(uint8_t *rx_array, uint8_t length)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	70fb      	strb	r3, [r7, #3]
	uint8_t param = rx_array[4];
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	791b      	ldrb	r3, [r3, #4]
 80010a0:	73bb      	strb	r3, [r7, #14]
	uint8_t val0 = rx_array[6];
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	799b      	ldrb	r3, [r3, #6]
 80010a6:	737b      	strb	r3, [r7, #13]
	uint8_t received_value = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	73fb      	strb	r3, [r7, #15]
	if(length > 9){
 80010ac:	78fb      	ldrb	r3, [r7, #3]
 80010ae:	2b09      	cmp	r3, #9
 80010b0:	d92c      	bls.n	800110c <set_output_parameter+0x7c>
		uint8_t val1 = rx_array[7];
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	79db      	ldrb	r3, [r3, #7]
 80010b6:	733b      	strb	r3, [r7, #12]
		uint8_t val2 = rx_array[8];
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	7a1b      	ldrb	r3, [r3, #8]
 80010bc:	72fb      	strb	r3, [r7, #11]
		uint8_t val3 = rx_array[9];
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	7a5b      	ldrb	r3, [r3, #9]
 80010c2:	72bb      	strb	r3, [r7, #10]
		received_value += val0*1000;
 80010c4:	7b7b      	ldrb	r3, [r7, #13]
 80010c6:	461a      	mov	r2, r3
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	4413      	add	r3, r2
 80010d4:	73fb      	strb	r3, [r7, #15]
		received_value += val1*100;
 80010d6:	7b3b      	ldrb	r3, [r7, #12]
 80010d8:	461a      	mov	r2, r3
 80010da:	0092      	lsls	r2, r2, #2
 80010dc:	4413      	add	r3, r2
 80010de:	461a      	mov	r2, r3
 80010e0:	0091      	lsls	r1, r2, #2
 80010e2:	461a      	mov	r2, r3
 80010e4:	460b      	mov	r3, r1
 80010e6:	4413      	add	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
 80010ee:	4413      	add	r3, r2
 80010f0:	73fb      	strb	r3, [r7, #15]
		received_value += val2*10;
 80010f2:	7afb      	ldrb	r3, [r7, #11]
 80010f4:	461a      	mov	r2, r3
 80010f6:	0092      	lsls	r2, r2, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	4413      	add	r3, r2
 8001102:	73fb      	strb	r3, [r7, #15]
		received_value += val3;
 8001104:	7bfa      	ldrb	r2, [r7, #15]
 8001106:	7abb      	ldrb	r3, [r7, #10]
 8001108:	4413      	add	r3, r2
 800110a:	73fb      	strb	r3, [r7, #15]
	}
	switch(param){
 800110c:	7bbb      	ldrb	r3, [r7, #14]
 800110e:	3b61      	subs	r3, #97	; 0x61
 8001110:	2b13      	cmp	r3, #19
 8001112:	d83b      	bhi.n	800118c <set_output_parameter+0xfc>
 8001114:	a201      	add	r2, pc, #4	; (adr r2, 800111c <set_output_parameter+0x8c>)
 8001116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800111a:	bf00      	nop
 800111c:	08001175 	.word	0x08001175
 8001120:	0800118d 	.word	0x0800118d
 8001124:	0800118d 	.word	0x0800118d
 8001128:	0800118d 	.word	0x0800118d
 800112c:	0800118d 	.word	0x0800118d
 8001130:	08001185 	.word	0x08001185
 8001134:	0800118d 	.word	0x0800118d
 8001138:	0800118d 	.word	0x0800118d
 800113c:	0800118d 	.word	0x0800118d
 8001140:	0800118d 	.word	0x0800118d
 8001144:	0800118d 	.word	0x0800118d
 8001148:	0800118d 	.word	0x0800118d
 800114c:	0800118d 	.word	0x0800118d
 8001150:	0800118d 	.word	0x0800118d
 8001154:	0800117d 	.word	0x0800117d
 8001158:	0800118d 	.word	0x0800118d
 800115c:	0800118d 	.word	0x0800118d
 8001160:	0800118d 	.word	0x0800118d
 8001164:	0800118d 	.word	0x0800118d
 8001168:	0800116d 	.word	0x0800116d
		case 't':
			// Type
			signal_type = val0;
 800116c:	4a0b      	ldr	r2, [pc, #44]	; (800119c <set_output_parameter+0x10c>)
 800116e:	7b7b      	ldrb	r3, [r7, #13]
 8001170:	7013      	strb	r3, [r2, #0]
			break;
 8001172:	e00c      	b.n	800118e <set_output_parameter+0xfe>
		case 'a':
			// Amplitude
			signal_amplitude = received_value;
 8001174:	4a0a      	ldr	r2, [pc, #40]	; (80011a0 <set_output_parameter+0x110>)
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	7013      	strb	r3, [r2, #0]
			break;
 800117a:	e008      	b.n	800118e <set_output_parameter+0xfe>
		case 'o':
			// Offset
			signal_offset = received_value;
 800117c:	4a09      	ldr	r2, [pc, #36]	; (80011a4 <set_output_parameter+0x114>)
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	7013      	strb	r3, [r2, #0]
			break;
 8001182:	e004      	b.n	800118e <set_output_parameter+0xfe>
		case 'f':
			// Frequency
			signal_frequency = received_value;
 8001184:	4a08      	ldr	r2, [pc, #32]	; (80011a8 <set_output_parameter+0x118>)
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	7013      	strb	r3, [r2, #0]
			break;
 800118a:	e000      	b.n	800118e <set_output_parameter+0xfe>
		case 'c':
			// Temperature
			break;
		default:
			// Problems
			break;
 800118c:	bf00      	nop
	}
}
 800118e:	bf00      	nop
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	2000000d 	.word	0x2000000d
 80011a0:	2000004e 	.word	0x2000004e
 80011a4:	20000050 	.word	0x20000050
 80011a8:	2000004f 	.word	0x2000004f

080011ac <LCD_Init>:

// LCD Functions #################

void LCD_Init()
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0

	HAL_UART_Transmit(&huart2, (uint8_t*)"\nStart of Init Function:\n", 25, 10);
 80011b0:	230a      	movs	r3, #10
 80011b2:	2219      	movs	r2, #25
 80011b4:	491f      	ldr	r1, [pc, #124]	; (8001234 <LCD_Init+0x88>)
 80011b6:	4820      	ldr	r0, [pc, #128]	; (8001238 <LCD_Init+0x8c>)
 80011b8:	f003 ff3a 	bl	8005030 <HAL_UART_Transmit>

	HAL_Delay(20);
 80011bc:	2014      	movs	r0, #20
 80011be:	f000 fb6b 	bl	8001898 <HAL_Delay>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionReset);
 80011c2:	2030      	movs	r0, #48	; 0x30
 80011c4:	f000 f914 	bl	80013f0 <LCD_Write_8bitInstruction>
	HAL_Delay(10);
 80011c8:	200a      	movs	r0, #10
 80011ca:	f000 fb65 	bl	8001898 <HAL_Delay>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionReset);
 80011ce:	2030      	movs	r0, #48	; 0x30
 80011d0:	f000 f90e 	bl	80013f0 <LCD_Write_8bitInstruction>
	HAL_Delay(1);
 80011d4:	2001      	movs	r0, #1
 80011d6:	f000 fb5f 	bl	8001898 <HAL_Delay>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionReset);
 80011da:	2030      	movs	r0, #48	; 0x30
 80011dc:	f000 f908 	bl	80013f0 <LCD_Write_8bitInstruction>
	HAL_Delay(10);
 80011e0:	200a      	movs	r0, #10
 80011e2:	f000 fb59 	bl	8001898 <HAL_Delay>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionSet4bit);
 80011e6:	2028      	movs	r0, #40	; 0x28
 80011e8:	f000 f902 	bl	80013f0 <LCD_Write_8bitInstruction>
	HAL_Delay(1);
 80011ec:	2001      	movs	r0, #1
 80011ee:	f000 fb53 	bl	8001898 <HAL_Delay>

	LCD_Write_Instruction(lcd_instruction_FunctionSet4bit);
 80011f2:	2028      	movs	r0, #40	; 0x28
 80011f4:	f000 f858 	bl	80012a8 <LCD_Write_Instruction>
	HAL_Delay(1);
 80011f8:	2001      	movs	r0, #1
 80011fa:	f000 fb4d 	bl	8001898 <HAL_Delay>

	LCD_Write_Instruction(lcd_instruction_DisplayOn);
 80011fe:	200f      	movs	r0, #15
 8001200:	f000 f852 	bl	80012a8 <LCD_Write_Instruction>
	HAL_Delay(1);
 8001204:	2001      	movs	r0, #1
 8001206:	f000 fb47 	bl	8001898 <HAL_Delay>

	LCD_Write_Instruction(lcd_instruction_ClearDisplay);
 800120a:	2001      	movs	r0, #1
 800120c:	f000 f84c 	bl	80012a8 <LCD_Write_Instruction>
	HAL_Delay(3);
 8001210:	2003      	movs	r0, #3
 8001212:	f000 fb41 	bl	8001898 <HAL_Delay>

	LCD_Write_Instruction(lcd_instruction_EntryMode);
 8001216:	2006      	movs	r0, #6
 8001218:	f000 f846 	bl	80012a8 <LCD_Write_Instruction>
	HAL_Delay(1);
 800121c:	2001      	movs	r0, #1
 800121e:	f000 fb3b 	bl	8001898 <HAL_Delay>

	HAL_UART_Transmit(&huart2, (uint8_t*)"\nEnd of Init Function:\n", 23, 10);
 8001222:	230a      	movs	r3, #10
 8001224:	2217      	movs	r2, #23
 8001226:	4905      	ldr	r1, [pc, #20]	; (800123c <LCD_Init+0x90>)
 8001228:	4803      	ldr	r0, [pc, #12]	; (8001238 <LCD_Init+0x8c>)
 800122a:	f003 ff01 	bl	8005030 <HAL_UART_Transmit>

}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	08006504 	.word	0x08006504
 8001238:	200000a8 	.word	0x200000a8
 800123c:	08006520 	.word	0x08006520

08001240 <LCD_Write_String>:

void LCD_Write_String(uint8_t string[])
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	int i = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
	while (string[i] != 0)
 800124c:	e00c      	b.n	8001268 <LCD_Write_String+0x28>
	{
		LCD_Write_Character(string[i]);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	4413      	add	r3, r2
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f810 	bl	800127c <LCD_Write_Character>
		i++;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	3301      	adds	r3, #1
 8001260:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1);
 8001262:	2001      	movs	r0, #1
 8001264:	f000 fb18 	bl	8001898 <HAL_Delay>
	while (string[i] != 0)
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1ec      	bne.n	800124e <LCD_Write_String+0xe>
	}
}
 8001274:	bf00      	nop
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <LCD_Write_Character>:

void LCD_Write_Character(uint8_t character)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
	lcd_RS_GPIO_Port->ODR |= (1<<lcd_RS_bit);			// select data register (RS High)
 8001286:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <LCD_Write_Character+0x28>)
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	4a06      	ldr	r2, [pc, #24]	; (80012a4 <LCD_Write_Character+0x28>)
 800128c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001290:	6153      	str	r3, [r2, #20]
	LCD_Write_Nibbles(character);
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	4618      	mov	r0, r3
 8001296:	f000 f81d 	bl	80012d4 <LCD_Write_Nibbles>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	48000400 	.word	0x48000400

080012a8 <LCD_Write_Instruction>:

void LCD_Write_Instruction(uint8_t instruction)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
	lcd_RS_GPIO_Port->ODR &= ~(1<<lcd_RS_bit);			// select the Instruction Register (RS low)
 80012b2:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <LCD_Write_Instruction+0x28>)
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	4a06      	ldr	r2, [pc, #24]	; (80012d0 <LCD_Write_Instruction+0x28>)
 80012b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80012bc:	6153      	str	r3, [r2, #20]
	LCD_Write_Nibbles(instruction);
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 f807 	bl	80012d4 <LCD_Write_Nibbles>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	48000400 	.word	0x48000400

080012d4 <LCD_Write_Nibbles>:

void LCD_Write_Nibbles(uint8_t byte)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
	lcd_E_GPIO_Port->ODR |= (1<<lcd_E_bit);			// set E high
 80012de:	4b42      	ldr	r3, [pc, #264]	; (80013e8 <LCD_Write_Nibbles+0x114>)
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	4a41      	ldr	r2, [pc, #260]	; (80013e8 <LCD_Write_Nibbles+0x114>)
 80012e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012e8:	6153      	str	r3, [r2, #20]
	LCD_ZeroPins();
 80012ea:	f000 f8d5 	bl	8001498 <LCD_ZeroPins>

	// Write first (most significant) nibble
	if(byte & 1<<7)	lcd_D7_GPIO_Port->ODR |= (1<<lcd_D7_bit);
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	da07      	bge.n	8001306 <LCD_Write_Nibbles+0x32>
 80012f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012fa:	695b      	ldr	r3, [r3, #20]
 80012fc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001300:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001304:	6153      	str	r3, [r2, #20]
	if(byte & 1<<6)	lcd_D6_GPIO_Port->ODR |= (1<<lcd_D6_bit);
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800130c:	2b00      	cmp	r3, #0
 800130e:	d007      	beq.n	8001320 <LCD_Write_Nibbles+0x4c>
 8001310:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800131a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800131e:	6153      	str	r3, [r2, #20]
	if(byte & 1<<5)	lcd_D5_GPIO_Port->ODR |= (1<<lcd_D5_bit);
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	f003 0320 	and.w	r3, r3, #32
 8001326:	2b00      	cmp	r3, #0
 8001328:	d005      	beq.n	8001336 <LCD_Write_Nibbles+0x62>
 800132a:	4b30      	ldr	r3, [pc, #192]	; (80013ec <LCD_Write_Nibbles+0x118>)
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	4a2f      	ldr	r2, [pc, #188]	; (80013ec <LCD_Write_Nibbles+0x118>)
 8001330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001334:	6153      	str	r3, [r2, #20]
	if(byte & 1<<4)	lcd_D4_GPIO_Port->ODR |= (1<<lcd_D4_bit);
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	f003 0310 	and.w	r3, r3, #16
 800133c:	2b00      	cmp	r3, #0
 800133e:	d005      	beq.n	800134c <LCD_Write_Nibbles+0x78>
 8001340:	4b2a      	ldr	r3, [pc, #168]	; (80013ec <LCD_Write_Nibbles+0x118>)
 8001342:	695b      	ldr	r3, [r3, #20]
 8001344:	4a29      	ldr	r2, [pc, #164]	; (80013ec <LCD_Write_Nibbles+0x118>)
 8001346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800134a:	6153      	str	r3, [r2, #20]


	// Pulse Enable
	HAL_Delay(1);
 800134c:	2001      	movs	r0, #1
 800134e:	f000 faa3 	bl	8001898 <HAL_Delay>
	lcd_E_GPIO_Port->ODR &= ~(1<<lcd_E_bit);			// Set to 0
 8001352:	4b25      	ldr	r3, [pc, #148]	; (80013e8 <LCD_Write_Nibbles+0x114>)
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	4a24      	ldr	r2, [pc, #144]	; (80013e8 <LCD_Write_Nibbles+0x114>)
 8001358:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800135c:	6153      	str	r3, [r2, #20]
	lcd_E_GPIO_Port->ODR |= (1<<lcd_E_bit);				// Set to 1
 800135e:	4b22      	ldr	r3, [pc, #136]	; (80013e8 <LCD_Write_Nibbles+0x114>)
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	4a21      	ldr	r2, [pc, #132]	; (80013e8 <LCD_Write_Nibbles+0x114>)
 8001364:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001368:	6153      	str	r3, [r2, #20]

	LCD_ZeroPins();
 800136a:	f000 f895 	bl	8001498 <LCD_ZeroPins>
	if(byte & 1<<3)	lcd_D7_GPIO_Port->ODR |= (1<<lcd_D7_bit);
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	2b00      	cmp	r3, #0
 8001376:	d007      	beq.n	8001388 <LCD_Write_Nibbles+0xb4>
 8001378:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001382:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001386:	6153      	str	r3, [r2, #20]
	if(byte & 1<<2)	lcd_D6_GPIO_Port->ODR |= (1<<lcd_D6_bit);
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	f003 0304 	and.w	r3, r3, #4
 800138e:	2b00      	cmp	r3, #0
 8001390:	d007      	beq.n	80013a2 <LCD_Write_Nibbles+0xce>
 8001392:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001396:	695b      	ldr	r3, [r3, #20]
 8001398:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800139c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013a0:	6153      	str	r3, [r2, #20]
	if(byte & 1<<1)	lcd_D5_GPIO_Port->ODR |= (1<<lcd_D5_bit);
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d005      	beq.n	80013b8 <LCD_Write_Nibbles+0xe4>
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <LCD_Write_Nibbles+0x118>)
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	4a0e      	ldr	r2, [pc, #56]	; (80013ec <LCD_Write_Nibbles+0x118>)
 80013b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b6:	6153      	str	r3, [r2, #20]
	if(byte & 1<<0)	lcd_D4_GPIO_Port->ODR |= (1<<lcd_D4_bit);
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d005      	beq.n	80013ce <LCD_Write_Nibbles+0xfa>
 80013c2:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <LCD_Write_Nibbles+0x118>)
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	4a09      	ldr	r2, [pc, #36]	; (80013ec <LCD_Write_Nibbles+0x118>)
 80013c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013cc:	6153      	str	r3, [r2, #20]

	// Drop Enable
	HAL_Delay(1);
 80013ce:	2001      	movs	r0, #1
 80013d0:	f000 fa62 	bl	8001898 <HAL_Delay>
	lcd_E_GPIO_Port->ODR &= ~(1<<lcd_E_bit);		// Set to 0
 80013d4:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <LCD_Write_Nibbles+0x114>)
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	4a03      	ldr	r2, [pc, #12]	; (80013e8 <LCD_Write_Nibbles+0x114>)
 80013da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80013de:	6153      	str	r3, [r2, #20]
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	48000400 	.word	0x48000400
 80013ec:	48000800 	.word	0x48000800

080013f0 <LCD_Write_8bitInstruction>:

void LCD_Write_8bitInstruction(uint8_t byte)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
	lcd_RS_GPIO_Port->ODR &= ~(1<<lcd_RS_bit);			// Set RS to 0
 80013fa:	4b25      	ldr	r3, [pc, #148]	; (8001490 <LCD_Write_8bitInstruction+0xa0>)
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	4a24      	ldr	r2, [pc, #144]	; (8001490 <LCD_Write_8bitInstruction+0xa0>)
 8001400:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001404:	6153      	str	r3, [r2, #20]
	lcd_E_GPIO_Port->ODR |= (1<<lcd_E_bit);				// Set E to 1
 8001406:	4b22      	ldr	r3, [pc, #136]	; (8001490 <LCD_Write_8bitInstruction+0xa0>)
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	4a21      	ldr	r2, [pc, #132]	; (8001490 <LCD_Write_8bitInstruction+0xa0>)
 800140c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001410:	6153      	str	r3, [r2, #20]
	LCD_ZeroPins();
 8001412:	f000 f841 	bl	8001498 <LCD_ZeroPins>

	 // Set to zero first
	if(byte & 1<<7)	lcd_D7_GPIO_Port->ODR |= (1<<lcd_D7_bit);
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	2b00      	cmp	r3, #0
 800141c:	da07      	bge.n	800142e <LCD_Write_8bitInstruction+0x3e>
 800141e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001422:	695b      	ldr	r3, [r3, #20]
 8001424:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001428:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800142c:	6153      	str	r3, [r2, #20]
	if(byte & 1<<6)	lcd_D6_GPIO_Port->ODR |= (1<<lcd_D6_bit);
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001434:	2b00      	cmp	r3, #0
 8001436:	d007      	beq.n	8001448 <LCD_Write_8bitInstruction+0x58>
 8001438:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001442:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001446:	6153      	str	r3, [r2, #20]
	if(byte & 1<<5)	lcd_D5_GPIO_Port->ODR |= (1<<lcd_D5_bit);
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	f003 0320 	and.w	r3, r3, #32
 800144e:	2b00      	cmp	r3, #0
 8001450:	d005      	beq.n	800145e <LCD_Write_8bitInstruction+0x6e>
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <LCD_Write_8bitInstruction+0xa4>)
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	4a0f      	ldr	r2, [pc, #60]	; (8001494 <LCD_Write_8bitInstruction+0xa4>)
 8001458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800145c:	6153      	str	r3, [r2, #20]
	if(byte & 1<<4)	lcd_D4_GPIO_Port->ODR |= (1<<lcd_D4_bit);
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	f003 0310 	and.w	r3, r3, #16
 8001464:	2b00      	cmp	r3, #0
 8001466:	d005      	beq.n	8001474 <LCD_Write_8bitInstruction+0x84>
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <LCD_Write_8bitInstruction+0xa4>)
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	4a09      	ldr	r2, [pc, #36]	; (8001494 <LCD_Write_8bitInstruction+0xa4>)
 800146e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001472:	6153      	str	r3, [r2, #20]

	HAL_Delay(1);
 8001474:	2001      	movs	r0, #1
 8001476:	f000 fa0f 	bl	8001898 <HAL_Delay>
	lcd_E_GPIO_Port->ODR &= ~(1<<lcd_E_bit);		// Set E to 0
 800147a:	4b05      	ldr	r3, [pc, #20]	; (8001490 <LCD_Write_8bitInstruction+0xa0>)
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	4a04      	ldr	r2, [pc, #16]	; (8001490 <LCD_Write_8bitInstruction+0xa0>)
 8001480:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001484:	6153      	str	r3, [r2, #20]
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	48000400 	.word	0x48000400
 8001494:	48000800 	.word	0x48000800

08001498 <LCD_ZeroPins>:

void LCD_ZeroPins()
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
	lcd_D7_GPIO_Port->ODR &= ~(1<<lcd_D7_bit);
 800149c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80014a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014aa:	6153      	str	r3, [r2, #20]
	lcd_D6_GPIO_Port->ODR &= ~(1<<lcd_D6_bit);
 80014ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80014b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80014ba:	6153      	str	r3, [r2, #20]
	lcd_D5_GPIO_Port->ODR &= ~(1<<lcd_D5_bit);
 80014bc:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <LCD_ZeroPins+0x48>)
 80014be:	695b      	ldr	r3, [r3, #20]
 80014c0:	4a07      	ldr	r2, [pc, #28]	; (80014e0 <LCD_ZeroPins+0x48>)
 80014c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014c6:	6153      	str	r3, [r2, #20]
	lcd_D4_GPIO_Port->ODR &= ~(1<<lcd_D4_bit);
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <LCD_ZeroPins+0x48>)
 80014ca:	695b      	ldr	r3, [r3, #20]
 80014cc:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <LCD_ZeroPins+0x48>)
 80014ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80014d2:	6153      	str	r3, [r2, #20]
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	48000800 	.word	0x48000800

080014e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fa:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <HAL_MspInit+0x44>)
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	4a0e      	ldr	r2, [pc, #56]	; (8001538 <HAL_MspInit+0x44>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6193      	str	r3, [r2, #24]
 8001506:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <HAL_MspInit+0x44>)
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <HAL_MspInit+0x44>)
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	4a08      	ldr	r2, [pc, #32]	; (8001538 <HAL_MspInit+0x44>)
 8001518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151c:	61d3      	str	r3, [r2, #28]
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_MspInit+0x44>)
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800152a:	2007      	movs	r0, #7
 800152c:	f001 fc58 	bl	8002de0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40021000 	.word	0x40021000

0800153c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800155c:	d124      	bne.n	80015a8 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800155e:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <HAL_ADC_MspInit+0x74>)
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	4a13      	ldr	r2, [pc, #76]	; (80015b0 <HAL_ADC_MspInit+0x74>)
 8001564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001568:	6153      	str	r3, [r2, #20]
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <HAL_ADC_MspInit+0x74>)
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <HAL_ADC_MspInit+0x74>)
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	4a0d      	ldr	r2, [pc, #52]	; (80015b0 <HAL_ADC_MspInit+0x74>)
 800157c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001580:	6153      	str	r3, [r2, #20]
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_ADC_MspInit+0x74>)
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800158e:	2301      	movs	r3, #1
 8001590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001592:	2303      	movs	r3, #3
 8001594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	4619      	mov	r1, r3
 80015a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a4:	f001 fcd4 	bl	8002f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015a8:	bf00      	nop
 80015aa:	3728      	adds	r7, #40	; 0x28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40021000 	.word	0x40021000

080015b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a0d      	ldr	r2, [pc, #52]	; (80015f8 <HAL_TIM_Base_MspInit+0x44>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d113      	bne.n	80015ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80015c6:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <HAL_TIM_Base_MspInit+0x48>)
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	4a0c      	ldr	r2, [pc, #48]	; (80015fc <HAL_TIM_Base_MspInit+0x48>)
 80015cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d0:	6193      	str	r3, [r2, #24]
 80015d2:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <HAL_TIM_Base_MspInit+0x48>)
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	2100      	movs	r1, #0
 80015e2:	2019      	movs	r0, #25
 80015e4:	f001 fc07 	bl	8002df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80015e8:	2019      	movs	r0, #25
 80015ea:	f001 fc20 	bl	8002e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80015ee:	bf00      	nop
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40014400 	.word	0x40014400
 80015fc:	40021000 	.word	0x40021000

08001600 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a1b      	ldr	r2, [pc, #108]	; (800168c <HAL_UART_MspInit+0x8c>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d130      	bne.n	8001684 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001622:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <HAL_UART_MspInit+0x90>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	4a1a      	ldr	r2, [pc, #104]	; (8001690 <HAL_UART_MspInit+0x90>)
 8001628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800162c:	61d3      	str	r3, [r2, #28]
 800162e:	4b18      	ldr	r3, [pc, #96]	; (8001690 <HAL_UART_MspInit+0x90>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <HAL_UART_MspInit+0x90>)
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	4a14      	ldr	r2, [pc, #80]	; (8001690 <HAL_UART_MspInit+0x90>)
 8001640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001644:	6153      	str	r3, [r2, #20]
 8001646:	4b12      	ldr	r3, [pc, #72]	; (8001690 <HAL_UART_MspInit+0x90>)
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001652:	230c      	movs	r3, #12
 8001654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001662:	2307      	movs	r3, #7
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4619      	mov	r1, r3
 800166c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001670:	f001 fc6e 	bl	8002f50 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001674:	2200      	movs	r2, #0
 8001676:	2100      	movs	r1, #0
 8001678:	2026      	movs	r0, #38	; 0x26
 800167a:	f001 fbbc 	bl	8002df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800167e:	2026      	movs	r0, #38	; 0x26
 8001680:	f001 fbd5 	bl	8002e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001684:	bf00      	nop
 8001686:	3728      	adds	r7, #40	; 0x28
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40004400 	.word	0x40004400
 8001690:	40021000 	.word	0x40021000

08001694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a6:	e7fe      	b.n	80016a6 <HardFault_Handler+0x4>

080016a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <MemManage_Handler+0x4>

080016ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <BusFault_Handler+0x4>

080016b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <UsageFault_Handler+0x4>

080016ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e8:	f000 f8b6 	bl	8001858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80016f4:	2040      	movs	r0, #64	; 0x40
 80016f6:	f001 fdff 	bl	80032f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80016fa:	2080      	movs	r0, #128	; 0x80
 80016fc:	f001 fdfc 	bl	80032f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001700:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001704:	f001 fdf8 	bl	80032f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001708:	f44f 7000 	mov.w	r0, #512	; 0x200
 800170c:	f001 fdf4 	bl	80032f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}

08001714 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800171a:	f003 fa37 	bl	8004b8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	2000012c 	.word	0x2000012c

08001728 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800172c:	4802      	ldr	r0, [pc, #8]	; (8001738 <USART2_IRQHandler+0x10>)
 800172e:	f003 fd61 	bl	80051f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200000a8 	.word	0x200000a8

0800173c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001740:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001744:	f001 fdd8 	bl	80032f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001748:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800174c:	f001 fdd4 	bl	80032f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}

08001754 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <SystemInit+0x20>)
 800175a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800175e:	4a05      	ldr	r2, [pc, #20]	; (8001774 <SystemInit+0x20>)
 8001760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001764:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001778:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017b0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800177c:	480d      	ldr	r0, [pc, #52]	; (80017b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800177e:	490e      	ldr	r1, [pc, #56]	; (80017b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001780:	4a0e      	ldr	r2, [pc, #56]	; (80017bc <LoopForever+0xe>)
  movs r3, #0
 8001782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001784:	e002      	b.n	800178c <LoopCopyDataInit>

08001786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800178a:	3304      	adds	r3, #4

0800178c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800178c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800178e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001790:	d3f9      	bcc.n	8001786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001792:	4a0b      	ldr	r2, [pc, #44]	; (80017c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001794:	4c0b      	ldr	r4, [pc, #44]	; (80017c4 <LoopForever+0x16>)
  movs r3, #0
 8001796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001798:	e001      	b.n	800179e <LoopFillZerobss>

0800179a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800179a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800179c:	3204      	adds	r2, #4

0800179e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800179e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a0:	d3fb      	bcc.n	800179a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017a2:	f7ff ffd7 	bl	8001754 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017a6:	f004 fe5f 	bl	8006468 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017aa:	f7fe fd63 	bl	8000274 <main>

080017ae <LoopForever>:

LoopForever:
    b LoopForever
 80017ae:	e7fe      	b.n	80017ae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80017b0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80017b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80017bc:	08006578 	.word	0x08006578
  ldr r2, =_sbss
 80017c0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80017c4:	2000017c 	.word	0x2000017c

080017c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017c8:	e7fe      	b.n	80017c8 <ADC1_2_IRQHandler>
	...

080017cc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <HAL_Init+0x28>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a07      	ldr	r2, [pc, #28]	; (80017f4 <HAL_Init+0x28>)
 80017d6:	f043 0310 	orr.w	r3, r3, #16
 80017da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017dc:	2003      	movs	r0, #3
 80017de:	f001 faff 	bl	8002de0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017e2:	2000      	movs	r0, #0
 80017e4:	f000 f808 	bl	80017f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017e8:	f7ff fe84 	bl	80014f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40022000 	.word	0x40022000

080017f8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <HAL_InitTick+0x54>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <HAL_InitTick+0x58>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	4619      	mov	r1, r3
 800180a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800180e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001812:	fbb2 f3f3 	udiv	r3, r2, r3
 8001816:	4618      	mov	r0, r3
 8001818:	f001 fb17 	bl	8002e4a <HAL_SYSTICK_Config>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e00e      	b.n	8001844 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b0f      	cmp	r3, #15
 800182a:	d80a      	bhi.n	8001842 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800182c:	2200      	movs	r2, #0
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	f04f 30ff 	mov.w	r0, #4294967295
 8001834:	f001 fadf 	bl	8002df6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001838:	4a06      	ldr	r2, [pc, #24]	; (8001854 <HAL_InitTick+0x5c>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800183e:	2300      	movs	r3, #0
 8001840:	e000      	b.n	8001844 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
}
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000010 	.word	0x20000010
 8001850:	20000018 	.word	0x20000018
 8001854:	20000014 	.word	0x20000014

08001858 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <HAL_IncTick+0x20>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	461a      	mov	r2, r3
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_IncTick+0x24>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4413      	add	r3, r2
 8001868:	4a04      	ldr	r2, [pc, #16]	; (800187c <HAL_IncTick+0x24>)
 800186a:	6013      	str	r3, [r2, #0]
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	20000018 	.word	0x20000018
 800187c:	20000178 	.word	0x20000178

08001880 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return uwTick;  
 8001884:	4b03      	ldr	r3, [pc, #12]	; (8001894 <HAL_GetTick+0x14>)
 8001886:	681b      	ldr	r3, [r3, #0]
}
 8001888:	4618      	mov	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20000178 	.word	0x20000178

08001898 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018a0:	f7ff ffee 	bl	8001880 <HAL_GetTick>
 80018a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b0:	d005      	beq.n	80018be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <HAL_Delay+0x40>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	461a      	mov	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4413      	add	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80018be:	bf00      	nop
 80018c0:	f7ff ffde 	bl	8001880 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d8f7      	bhi.n	80018c0 <HAL_Delay+0x28>
  {
  }
}
 80018d0:	bf00      	nop
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000018 	.word	0x20000018

080018dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b09a      	sub	sp, #104	; 0x68
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018e4:	2300      	movs	r3, #0
 80018e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e1e3      	b.n	8001cc4 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	f003 0310 	and.w	r3, r3, #16
 800190a:	2b00      	cmp	r3, #0
 800190c:	d176      	bne.n	80019fc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	2b00      	cmp	r3, #0
 8001914:	d152      	bne.n	80019bc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff fe03 	bl	800153c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d13b      	bne.n	80019bc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f001 f861 	bl	8002a0c <ADC_Disable>
 800194a:	4603      	mov	r3, r0
 800194c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	f003 0310 	and.w	r3, r3, #16
 8001958:	2b00      	cmp	r3, #0
 800195a:	d12f      	bne.n	80019bc <HAL_ADC_Init+0xe0>
 800195c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001960:	2b00      	cmp	r3, #0
 8001962:	d12b      	bne.n	80019bc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800196c:	f023 0302 	bic.w	r3, r3, #2
 8001970:	f043 0202 	orr.w	r2, r3, #2
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001986:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689a      	ldr	r2, [r3, #8]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001996:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001998:	4b92      	ldr	r3, [pc, #584]	; (8001be4 <HAL_ADC_Init+0x308>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a92      	ldr	r2, [pc, #584]	; (8001be8 <HAL_ADC_Init+0x30c>)
 800199e:	fba2 2303 	umull	r2, r3, r2, r3
 80019a2:	0c9a      	lsrs	r2, r3, #18
 80019a4:	4613      	mov	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019ae:	e002      	b.n	80019b6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1f9      	bne.n	80019b0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d007      	beq.n	80019da <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80019d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019d8:	d110      	bne.n	80019fc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	f023 0312 	bic.w	r3, r3, #18
 80019e2:	f043 0210 	orr.w	r2, r3, #16
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	f043 0201 	orr.w	r2, r3, #1
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	f003 0310 	and.w	r3, r3, #16
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f040 8150 	bne.w	8001caa <HAL_ADC_Init+0x3ce>
 8001a0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f040 814b 	bne.w	8001caa <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f040 8143 	bne.w	8001caa <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001a2c:	f043 0202 	orr.w	r2, r3, #2
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a3c:	d004      	beq.n	8001a48 <HAL_ADC_Init+0x16c>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a6a      	ldr	r2, [pc, #424]	; (8001bec <HAL_ADC_Init+0x310>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d101      	bne.n	8001a4c <HAL_ADC_Init+0x170>
 8001a48:	4b69      	ldr	r3, [pc, #420]	; (8001bf0 <HAL_ADC_Init+0x314>)
 8001a4a:	e000      	b.n	8001a4e <HAL_ADC_Init+0x172>
 8001a4c:	4b69      	ldr	r3, [pc, #420]	; (8001bf4 <HAL_ADC_Init+0x318>)
 8001a4e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a58:	d102      	bne.n	8001a60 <HAL_ADC_Init+0x184>
 8001a5a:	4b64      	ldr	r3, [pc, #400]	; (8001bec <HAL_ADC_Init+0x310>)
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	e01a      	b.n	8001a96 <HAL_ADC_Init+0x1ba>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a61      	ldr	r2, [pc, #388]	; (8001bec <HAL_ADC_Init+0x310>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d103      	bne.n	8001a72 <HAL_ADC_Init+0x196>
 8001a6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	e011      	b.n	8001a96 <HAL_ADC_Init+0x1ba>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a60      	ldr	r2, [pc, #384]	; (8001bf8 <HAL_ADC_Init+0x31c>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d102      	bne.n	8001a82 <HAL_ADC_Init+0x1a6>
 8001a7c:	4b5f      	ldr	r3, [pc, #380]	; (8001bfc <HAL_ADC_Init+0x320>)
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	e009      	b.n	8001a96 <HAL_ADC_Init+0x1ba>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a5d      	ldr	r2, [pc, #372]	; (8001bfc <HAL_ADC_Init+0x320>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d102      	bne.n	8001a92 <HAL_ADC_Init+0x1b6>
 8001a8c:	4b5a      	ldr	r3, [pc, #360]	; (8001bf8 <HAL_ADC_Init+0x31c>)
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	e001      	b.n	8001a96 <HAL_ADC_Init+0x1ba>
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d108      	bne.n	8001ab6 <HAL_ADC_Init+0x1da>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d101      	bne.n	8001ab6 <HAL_ADC_Init+0x1da>
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <HAL_ADC_Init+0x1dc>
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d11c      	bne.n	8001af6 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001abc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d010      	beq.n	8001ae4 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d107      	bne.n	8001ade <HAL_ADC_Init+0x202>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d101      	bne.n	8001ade <HAL_ADC_Init+0x202>
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <HAL_ADC_Init+0x204>
 8001ade:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d108      	bne.n	8001af6 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001ae4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	431a      	orrs	r2, r3
 8001af2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001af4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	7e5b      	ldrb	r3, [r3, #25]
 8001afa:	035b      	lsls	r3, r3, #13
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b00:	2a01      	cmp	r2, #1
 8001b02:	d002      	beq.n	8001b0a <HAL_ADC_Init+0x22e>
 8001b04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b08:	e000      	b.n	8001b0c <HAL_ADC_Init+0x230>
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d11b      	bne.n	8001b62 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	7e5b      	ldrb	r3, [r3, #25]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d109      	bne.n	8001b46 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	3b01      	subs	r3, #1
 8001b38:	045a      	lsls	r2, r3, #17
 8001b3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b42:	663b      	str	r3, [r7, #96]	; 0x60
 8001b44:	e00d      	b.n	8001b62 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001b4e:	f043 0220 	orr.w	r2, r3, #32
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	f043 0201 	orr.w	r2, r3, #1
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d054      	beq.n	8001c14 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a22      	ldr	r2, [pc, #136]	; (8001bf8 <HAL_ADC_Init+0x31c>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d004      	beq.n	8001b7e <HAL_ADC_Init+0x2a2>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a20      	ldr	r2, [pc, #128]	; (8001bfc <HAL_ADC_Init+0x320>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d140      	bne.n	8001c00 <HAL_ADC_Init+0x324>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b82:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001b86:	d02a      	beq.n	8001bde <HAL_ADC_Init+0x302>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b90:	d022      	beq.n	8001bd8 <HAL_ADC_Init+0x2fc>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b96:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001b9a:	d01a      	beq.n	8001bd2 <HAL_ADC_Init+0x2f6>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba0:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8001ba4:	d012      	beq.n	8001bcc <HAL_ADC_Init+0x2f0>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001baa:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8001bae:	d00a      	beq.n	8001bc6 <HAL_ADC_Init+0x2ea>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb4:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8001bb8:	d002      	beq.n	8001bc0 <HAL_ADC_Init+0x2e4>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bbe:	e023      	b.n	8001c08 <HAL_ADC_Init+0x32c>
 8001bc0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001bc4:	e020      	b.n	8001c08 <HAL_ADC_Init+0x32c>
 8001bc6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001bca:	e01d      	b.n	8001c08 <HAL_ADC_Init+0x32c>
 8001bcc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001bd0:	e01a      	b.n	8001c08 <HAL_ADC_Init+0x32c>
 8001bd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bd6:	e017      	b.n	8001c08 <HAL_ADC_Init+0x32c>
 8001bd8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001bdc:	e014      	b.n	8001c08 <HAL_ADC_Init+0x32c>
 8001bde:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001be2:	e011      	b.n	8001c08 <HAL_ADC_Init+0x32c>
 8001be4:	20000010 	.word	0x20000010
 8001be8:	431bde83 	.word	0x431bde83
 8001bec:	50000100 	.word	0x50000100
 8001bf0:	50000300 	.word	0x50000300
 8001bf4:	50000700 	.word	0x50000700
 8001bf8:	50000400 	.word	0x50000400
 8001bfc:	50000500 	.word	0x50000500
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c10:	4313      	orrs	r3, r2
 8001c12:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 030c 	and.w	r3, r3, #12
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d114      	bne.n	8001c4c <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6812      	ldr	r2, [r2, #0]
 8001c2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c30:	f023 0302 	bic.w	r3, r3, #2
 8001c34:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	7e1b      	ldrb	r3, [r3, #24]
 8001c3a:	039a      	lsls	r2, r3, #14
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	4313      	orrs	r3, r2
 8001c46:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	4b1e      	ldr	r3, [pc, #120]	; (8001ccc <HAL_ADC_Init+0x3f0>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6812      	ldr	r2, [r2, #0]
 8001c5a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001c5c:	430b      	orrs	r3, r1
 8001c5e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d10c      	bne.n	8001c82 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	f023 010f 	bic.w	r1, r3, #15
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	1e5a      	subs	r2, r3, #1
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	631a      	str	r2, [r3, #48]	; 0x30
 8001c80:	e007      	b.n	8001c92 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 020f 	bic.w	r2, r2, #15
 8001c90:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	f023 0303 	bic.w	r3, r3, #3
 8001ca0:	f043 0201 	orr.w	r2, r3, #1
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	641a      	str	r2, [r3, #64]	; 0x40
 8001ca8:	e00a      	b.n	8001cc0 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	f023 0312 	bic.w	r3, r3, #18
 8001cb2:	f043 0210 	orr.w	r2, r3, #16
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001cba:	2301      	movs	r3, #1
 8001cbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001cc0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3768      	adds	r7, #104	; 0x68
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	fff0c007 	.word	0xfff0c007

08001cd0 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f040 80f9 	bne.w	8001ede <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d101      	bne.n	8001cfa <HAL_ADC_Start+0x2a>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	e0f4      	b.n	8001ee4 <HAL_ADC_Start+0x214>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 fe1e 	bl	8002944 <ADC_Enable>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f040 80e0 	bne.w	8001ed4 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d1c:	f023 0301 	bic.w	r3, r3, #1
 8001d20:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d30:	d004      	beq.n	8001d3c <HAL_ADC_Start+0x6c>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a6d      	ldr	r2, [pc, #436]	; (8001eec <HAL_ADC_Start+0x21c>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d106      	bne.n	8001d4a <HAL_ADC_Start+0x7a>
 8001d3c:	4b6c      	ldr	r3, [pc, #432]	; (8001ef0 <HAL_ADC_Start+0x220>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 031f 	and.w	r3, r3, #31
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d010      	beq.n	8001d6a <HAL_ADC_Start+0x9a>
 8001d48:	e005      	b.n	8001d56 <HAL_ADC_Start+0x86>
 8001d4a:	4b6a      	ldr	r3, [pc, #424]	; (8001ef4 <HAL_ADC_Start+0x224>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 031f 	and.w	r3, r3, #31
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d009      	beq.n	8001d6a <HAL_ADC_Start+0x9a>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d5e:	d004      	beq.n	8001d6a <HAL_ADC_Start+0x9a>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a64      	ldr	r2, [pc, #400]	; (8001ef8 <HAL_ADC_Start+0x228>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d115      	bne.n	8001d96 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d036      	beq.n	8001df2 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d8c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001d94:	e02d      	b.n	8001df2 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001daa:	d004      	beq.n	8001db6 <HAL_ADC_Start+0xe6>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a4e      	ldr	r2, [pc, #312]	; (8001eec <HAL_ADC_Start+0x21c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d10a      	bne.n	8001dcc <HAL_ADC_Start+0xfc>
 8001db6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	bf14      	ite	ne
 8001dc4:	2301      	movne	r3, #1
 8001dc6:	2300      	moveq	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	e008      	b.n	8001dde <HAL_ADC_Start+0x10e>
 8001dcc:	4b4a      	ldr	r3, [pc, #296]	; (8001ef8 <HAL_ADC_Start+0x228>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	bf14      	ite	ne
 8001dd8:	2301      	movne	r3, #1
 8001dda:	2300      	moveq	r3, #0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d007      	beq.n	8001df2 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dfe:	d106      	bne.n	8001e0e <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e04:	f023 0206 	bic.w	r2, r3, #6
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	645a      	str	r2, [r3, #68]	; 0x44
 8001e0c:	e002      	b.n	8001e14 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	221c      	movs	r2, #28
 8001e22:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e2c:	d004      	beq.n	8001e38 <HAL_ADC_Start+0x168>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a2e      	ldr	r2, [pc, #184]	; (8001eec <HAL_ADC_Start+0x21c>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d106      	bne.n	8001e46 <HAL_ADC_Start+0x176>
 8001e38:	4b2d      	ldr	r3, [pc, #180]	; (8001ef0 <HAL_ADC_Start+0x220>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 031f 	and.w	r3, r3, #31
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d03e      	beq.n	8001ec2 <HAL_ADC_Start+0x1f2>
 8001e44:	e005      	b.n	8001e52 <HAL_ADC_Start+0x182>
 8001e46:	4b2b      	ldr	r3, [pc, #172]	; (8001ef4 <HAL_ADC_Start+0x224>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 031f 	and.w	r3, r3, #31
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d037      	beq.n	8001ec2 <HAL_ADC_Start+0x1f2>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e5a:	d004      	beq.n	8001e66 <HAL_ADC_Start+0x196>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a22      	ldr	r2, [pc, #136]	; (8001eec <HAL_ADC_Start+0x21c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d106      	bne.n	8001e74 <HAL_ADC_Start+0x1a4>
 8001e66:	4b22      	ldr	r3, [pc, #136]	; (8001ef0 <HAL_ADC_Start+0x220>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 031f 	and.w	r3, r3, #31
 8001e6e:	2b05      	cmp	r3, #5
 8001e70:	d027      	beq.n	8001ec2 <HAL_ADC_Start+0x1f2>
 8001e72:	e005      	b.n	8001e80 <HAL_ADC_Start+0x1b0>
 8001e74:	4b1f      	ldr	r3, [pc, #124]	; (8001ef4 <HAL_ADC_Start+0x224>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 031f 	and.w	r3, r3, #31
 8001e7c:	2b05      	cmp	r3, #5
 8001e7e:	d020      	beq.n	8001ec2 <HAL_ADC_Start+0x1f2>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e88:	d004      	beq.n	8001e94 <HAL_ADC_Start+0x1c4>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a17      	ldr	r2, [pc, #92]	; (8001eec <HAL_ADC_Start+0x21c>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d106      	bne.n	8001ea2 <HAL_ADC_Start+0x1d2>
 8001e94:	4b16      	ldr	r3, [pc, #88]	; (8001ef0 <HAL_ADC_Start+0x220>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 031f 	and.w	r3, r3, #31
 8001e9c:	2b09      	cmp	r3, #9
 8001e9e:	d010      	beq.n	8001ec2 <HAL_ADC_Start+0x1f2>
 8001ea0:	e005      	b.n	8001eae <HAL_ADC_Start+0x1de>
 8001ea2:	4b14      	ldr	r3, [pc, #80]	; (8001ef4 <HAL_ADC_Start+0x224>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 031f 	and.w	r3, r3, #31
 8001eaa:	2b09      	cmp	r3, #9
 8001eac:	d009      	beq.n	8001ec2 <HAL_ADC_Start+0x1f2>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001eb6:	d004      	beq.n	8001ec2 <HAL_ADC_Start+0x1f2>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a0e      	ldr	r2, [pc, #56]	; (8001ef8 <HAL_ADC_Start+0x228>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d10f      	bne.n	8001ee2 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f042 0204 	orr.w	r2, r2, #4
 8001ed0:	609a      	str	r2, [r3, #8]
 8001ed2:	e006      	b.n	8001ee2 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001edc:	e001      	b.n	8001ee2 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	50000100 	.word	0x50000100
 8001ef0:	50000300 	.word	0x50000300
 8001ef4:	50000700 	.word	0x50000700
 8001ef8:	50000400 	.word	0x50000400

08001efc <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d101      	bne.n	8001f16 <HAL_ADC_Stop+0x1a>
 8001f12:	2302      	movs	r3, #2
 8001f14:	e023      	b.n	8001f5e <HAL_ADC_Stop+0x62>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001f1e:	216c      	movs	r1, #108	; 0x6c
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 fdd9 	bl	8002ad8 <ADC_ConversionStop>
 8001f26:	4603      	mov	r3, r0
 8001f28:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d111      	bne.n	8001f54 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 fd6b 	bl	8002a0c <ADC_Disable>
 8001f36:	4603      	mov	r3, r0
 8001f38:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d109      	bne.n	8001f54 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f48:	f023 0301 	bic.w	r3, r3, #1
 8001f4c:	f043 0201 	orr.w	r2, r3, #1
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d102      	bne.n	8001f84 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001f7e:	2308      	movs	r3, #8
 8001f80:	617b      	str	r3, [r7, #20]
 8001f82:	e03a      	b.n	8001ffa <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f8c:	d004      	beq.n	8001f98 <HAL_ADC_PollForConversion+0x30>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a72      	ldr	r2, [pc, #456]	; (800215c <HAL_ADC_PollForConversion+0x1f4>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d101      	bne.n	8001f9c <HAL_ADC_PollForConversion+0x34>
 8001f98:	4b71      	ldr	r3, [pc, #452]	; (8002160 <HAL_ADC_PollForConversion+0x1f8>)
 8001f9a:	e000      	b.n	8001f9e <HAL_ADC_PollForConversion+0x36>
 8001f9c:	4b71      	ldr	r3, [pc, #452]	; (8002164 <HAL_ADC_PollForConversion+0x1fc>)
 8001f9e:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 031f 	and.w	r3, r3, #31
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d112      	bne.n	8001fd2 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d11d      	bne.n	8001ff6 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	f043 0220 	orr.w	r2, r3, #32
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e0bf      	b.n	8002152 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00b      	beq.n	8001ff6 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	f043 0220 	orr.w	r2, r3, #32
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e0ad      	b.n	8002152 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001ff6:	230c      	movs	r3, #12
 8001ff8:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002002:	d004      	beq.n	800200e <HAL_ADC_PollForConversion+0xa6>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a54      	ldr	r2, [pc, #336]	; (800215c <HAL_ADC_PollForConversion+0x1f4>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d106      	bne.n	800201c <HAL_ADC_PollForConversion+0xb4>
 800200e:	4b54      	ldr	r3, [pc, #336]	; (8002160 <HAL_ADC_PollForConversion+0x1f8>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 031f 	and.w	r3, r3, #31
 8002016:	2b00      	cmp	r3, #0
 8002018:	d010      	beq.n	800203c <HAL_ADC_PollForConversion+0xd4>
 800201a:	e005      	b.n	8002028 <HAL_ADC_PollForConversion+0xc0>
 800201c:	4b51      	ldr	r3, [pc, #324]	; (8002164 <HAL_ADC_PollForConversion+0x1fc>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f003 031f 	and.w	r3, r3, #31
 8002024:	2b00      	cmp	r3, #0
 8002026:	d009      	beq.n	800203c <HAL_ADC_PollForConversion+0xd4>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002030:	d004      	beq.n	800203c <HAL_ADC_PollForConversion+0xd4>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a4c      	ldr	r2, [pc, #304]	; (8002168 <HAL_ADC_PollForConversion+0x200>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d104      	bne.n	8002046 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	e00f      	b.n	8002066 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800204e:	d004      	beq.n	800205a <HAL_ADC_PollForConversion+0xf2>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a41      	ldr	r2, [pc, #260]	; (800215c <HAL_ADC_PollForConversion+0x1f4>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d102      	bne.n	8002060 <HAL_ADC_PollForConversion+0xf8>
 800205a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800205e:	e000      	b.n	8002062 <HAL_ADC_PollForConversion+0xfa>
 8002060:	4b41      	ldr	r3, [pc, #260]	; (8002168 <HAL_ADC_PollForConversion+0x200>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002066:	f7ff fc0b 	bl	8001880 <HAL_GetTick>
 800206a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800206c:	e021      	b.n	80020b2 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002074:	d01d      	beq.n	80020b2 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d007      	beq.n	800208c <HAL_ADC_PollForConversion+0x124>
 800207c:	f7ff fc00 	bl	8001880 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	429a      	cmp	r2, r3
 800208a:	d212      	bcs.n	80020b2 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	4013      	ands	r3, r2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10b      	bne.n	80020b2 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f043 0204 	orr.w	r2, r3, #4
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e04f      	b.n	8002152 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0d6      	beq.n	800206e <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d131      	bne.n	800213e <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d12c      	bne.n	800213e <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	2b08      	cmp	r3, #8
 80020f0:	d125      	bne.n	800213e <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d112      	bne.n	8002126 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d112      	bne.n	800213e <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211c:	f043 0201 	orr.w	r2, r3, #1
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	641a      	str	r2, [r3, #64]	; 0x40
 8002124:	e00b      	b.n	800213e <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f043 0220 	orr.w	r2, r3, #32
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	f043 0201 	orr.w	r2, r3, #1
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d103      	bne.n	8002150 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	50000100 	.word	0x50000100
 8002160:	50000300 	.word	0x50000300
 8002164:	50000700 	.word	0x50000700
 8002168:	50000400 	.word	0x50000400

0800216c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
	...

08002188 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002188:	b480      	push	{r7}
 800218a:	b09b      	sub	sp, #108	; 0x6c
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002192:	2300      	movs	r3, #0
 8002194:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002198:	2300      	movs	r3, #0
 800219a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d101      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x22>
 80021a6:	2302      	movs	r3, #2
 80021a8:	e2cb      	b.n	8002742 <HAL_ADC_ConfigChannel+0x5ba>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f040 82af 	bne.w	8002720 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d81c      	bhi.n	8002204 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	4613      	mov	r3, r2
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	4413      	add	r3, r2
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	461a      	mov	r2, r3
 80021de:	231f      	movs	r3, #31
 80021e0:	4093      	lsls	r3, r2
 80021e2:	43db      	mvns	r3, r3
 80021e4:	4019      	ands	r1, r3
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	6818      	ldr	r0, [r3, #0]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	4413      	add	r3, r2
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	fa00 f203 	lsl.w	r2, r0, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	631a      	str	r2, [r3, #48]	; 0x30
 8002202:	e063      	b.n	80022cc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b09      	cmp	r3, #9
 800220a:	d81e      	bhi.n	800224a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	4413      	add	r3, r2
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	3b1e      	subs	r3, #30
 8002220:	221f      	movs	r2, #31
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43db      	mvns	r3, r3
 8002228:	4019      	ands	r1, r3
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	6818      	ldr	r0, [r3, #0]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	4413      	add	r3, r2
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	3b1e      	subs	r3, #30
 800223c:	fa00 f203 	lsl.w	r2, r0, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	430a      	orrs	r2, r1
 8002246:	635a      	str	r2, [r3, #52]	; 0x34
 8002248:	e040      	b.n	80022cc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b0e      	cmp	r3, #14
 8002250:	d81e      	bhi.n	8002290 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	4413      	add	r3, r2
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	3b3c      	subs	r3, #60	; 0x3c
 8002266:	221f      	movs	r2, #31
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	4019      	ands	r1, r3
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	6818      	ldr	r0, [r3, #0]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	4613      	mov	r3, r2
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	4413      	add	r3, r2
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	3b3c      	subs	r3, #60	; 0x3c
 8002282:	fa00 f203 	lsl.w	r2, r0, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	639a      	str	r2, [r3, #56]	; 0x38
 800228e:	e01d      	b.n	80022cc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	4413      	add	r3, r2
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	3b5a      	subs	r3, #90	; 0x5a
 80022a4:	221f      	movs	r2, #31
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	4019      	ands	r1, r3
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	6818      	ldr	r0, [r3, #0]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	4413      	add	r3, r2
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	3b5a      	subs	r3, #90	; 0x5a
 80022c0:	fa00 f203 	lsl.w	r2, r0, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 030c 	and.w	r3, r3, #12
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f040 80e5 	bne.w	80024a6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2b09      	cmp	r3, #9
 80022e2:	d91c      	bls.n	800231e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6999      	ldr	r1, [r3, #24]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	4613      	mov	r3, r2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4413      	add	r3, r2
 80022f4:	3b1e      	subs	r3, #30
 80022f6:	2207      	movs	r2, #7
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	4019      	ands	r1, r3
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	6898      	ldr	r0, [r3, #8]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	4613      	mov	r3, r2
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	4413      	add	r3, r2
 800230e:	3b1e      	subs	r3, #30
 8002310:	fa00 f203 	lsl.w	r2, r0, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	430a      	orrs	r2, r1
 800231a:	619a      	str	r2, [r3, #24]
 800231c:	e019      	b.n	8002352 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6959      	ldr	r1, [r3, #20]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	4613      	mov	r3, r2
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	4413      	add	r3, r2
 800232e:	2207      	movs	r2, #7
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	4019      	ands	r1, r3
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	6898      	ldr	r0, [r3, #8]
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4613      	mov	r3, r2
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	4413      	add	r3, r2
 8002346:	fa00 f203 	lsl.w	r2, r0, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	695a      	ldr	r2, [r3, #20]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	08db      	lsrs	r3, r3, #3
 800235e:	f003 0303 	and.w	r3, r3, #3
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	3b01      	subs	r3, #1
 8002370:	2b03      	cmp	r3, #3
 8002372:	d84f      	bhi.n	8002414 <HAL_ADC_ConfigChannel+0x28c>
 8002374:	a201      	add	r2, pc, #4	; (adr r2, 800237c <HAL_ADC_ConfigChannel+0x1f4>)
 8002376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800237a:	bf00      	nop
 800237c:	0800238d 	.word	0x0800238d
 8002380:	080023af 	.word	0x080023af
 8002384:	080023d1 	.word	0x080023d1
 8002388:	080023f3 	.word	0x080023f3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002392:	4b9f      	ldr	r3, [pc, #636]	; (8002610 <HAL_ADC_ConfigChannel+0x488>)
 8002394:	4013      	ands	r3, r2
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	6812      	ldr	r2, [r2, #0]
 800239a:	0691      	lsls	r1, r2, #26
 800239c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800239e:	430a      	orrs	r2, r1
 80023a0:	431a      	orrs	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80023aa:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80023ac:	e07e      	b.n	80024ac <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80023b4:	4b96      	ldr	r3, [pc, #600]	; (8002610 <HAL_ADC_ConfigChannel+0x488>)
 80023b6:	4013      	ands	r3, r2
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	0691      	lsls	r1, r2, #26
 80023be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023c0:	430a      	orrs	r2, r1
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80023cc:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80023ce:	e06d      	b.n	80024ac <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80023d6:	4b8e      	ldr	r3, [pc, #568]	; (8002610 <HAL_ADC_ConfigChannel+0x488>)
 80023d8:	4013      	ands	r3, r2
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	6812      	ldr	r2, [r2, #0]
 80023de:	0691      	lsls	r1, r2, #26
 80023e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023e2:	430a      	orrs	r2, r1
 80023e4:	431a      	orrs	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80023ee:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80023f0:	e05c      	b.n	80024ac <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80023f8:	4b85      	ldr	r3, [pc, #532]	; (8002610 <HAL_ADC_ConfigChannel+0x488>)
 80023fa:	4013      	ands	r3, r2
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	6812      	ldr	r2, [r2, #0]
 8002400:	0691      	lsls	r1, r2, #26
 8002402:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002404:	430a      	orrs	r2, r1
 8002406:	431a      	orrs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002410:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002412:	e04b      	b.n	80024ac <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800241a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	069b      	lsls	r3, r3, #26
 8002424:	429a      	cmp	r2, r3
 8002426:	d107      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002436:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800243e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	069b      	lsls	r3, r3, #26
 8002448:	429a      	cmp	r2, r3
 800244a:	d107      	bne.n	800245c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800245a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002462:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	069b      	lsls	r3, r3, #26
 800246c:	429a      	cmp	r2, r3
 800246e:	d107      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800247e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002486:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	069b      	lsls	r3, r3, #26
 8002490:	429a      	cmp	r2, r3
 8002492:	d10a      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024a2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80024a4:	e001      	b.n	80024aa <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80024a6:	bf00      	nop
 80024a8:	e000      	b.n	80024ac <HAL_ADC_ConfigChannel+0x324>
      break;
 80024aa:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d108      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x344>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x344>
 80024c8:	2301      	movs	r3, #1
 80024ca:	e000      	b.n	80024ce <HAL_ADC_ConfigChannel+0x346>
 80024cc:	2300      	movs	r3, #0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f040 8131 	bne.w	8002736 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d00f      	beq.n	80024fc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2201      	movs	r2, #1
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43da      	mvns	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	400a      	ands	r2, r1
 80024f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80024fa:	e049      	b.n	8002590 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2201      	movs	r2, #1
 800250a:	409a      	lsls	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2b09      	cmp	r3, #9
 800251c:	d91c      	bls.n	8002558 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6999      	ldr	r1, [r3, #24]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4613      	mov	r3, r2
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	4413      	add	r3, r2
 800252e:	3b1b      	subs	r3, #27
 8002530:	2207      	movs	r2, #7
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	4019      	ands	r1, r3
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	6898      	ldr	r0, [r3, #8]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	4613      	mov	r3, r2
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	4413      	add	r3, r2
 8002548:	3b1b      	subs	r3, #27
 800254a:	fa00 f203 	lsl.w	r2, r0, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	619a      	str	r2, [r3, #24]
 8002556:	e01b      	b.n	8002590 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6959      	ldr	r1, [r3, #20]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	1c5a      	adds	r2, r3, #1
 8002564:	4613      	mov	r3, r2
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	4413      	add	r3, r2
 800256a:	2207      	movs	r2, #7
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	4019      	ands	r1, r3
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	6898      	ldr	r0, [r3, #8]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	4613      	mov	r3, r2
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	4413      	add	r3, r2
 8002584:	fa00 f203 	lsl.w	r2, r0, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	430a      	orrs	r2, r1
 800258e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002598:	d004      	beq.n	80025a4 <HAL_ADC_ConfigChannel+0x41c>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a1d      	ldr	r2, [pc, #116]	; (8002614 <HAL_ADC_ConfigChannel+0x48c>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d101      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x420>
 80025a4:	4b1c      	ldr	r3, [pc, #112]	; (8002618 <HAL_ADC_ConfigChannel+0x490>)
 80025a6:	e000      	b.n	80025aa <HAL_ADC_ConfigChannel+0x422>
 80025a8:	4b1c      	ldr	r3, [pc, #112]	; (800261c <HAL_ADC_ConfigChannel+0x494>)
 80025aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b10      	cmp	r3, #16
 80025b2:	d105      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80025b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d015      	beq.n	80025ec <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80025c4:	2b11      	cmp	r3, #17
 80025c6:	d105      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80025c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00b      	beq.n	80025ec <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80025d8:	2b12      	cmp	r3, #18
 80025da:	f040 80ac 	bne.w	8002736 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80025de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f040 80a5 	bne.w	8002736 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025f4:	d102      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x474>
 80025f6:	4b07      	ldr	r3, [pc, #28]	; (8002614 <HAL_ADC_ConfigChannel+0x48c>)
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	e023      	b.n	8002644 <HAL_ADC_ConfigChannel+0x4bc>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a04      	ldr	r2, [pc, #16]	; (8002614 <HAL_ADC_ConfigChannel+0x48c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d10c      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x498>
 8002606:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	e01a      	b.n	8002644 <HAL_ADC_ConfigChannel+0x4bc>
 800260e:	bf00      	nop
 8002610:	83fff000 	.word	0x83fff000
 8002614:	50000100 	.word	0x50000100
 8002618:	50000300 	.word	0x50000300
 800261c:	50000700 	.word	0x50000700
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a4a      	ldr	r2, [pc, #296]	; (8002750 <HAL_ADC_ConfigChannel+0x5c8>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d102      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x4a8>
 800262a:	4b4a      	ldr	r3, [pc, #296]	; (8002754 <HAL_ADC_ConfigChannel+0x5cc>)
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	e009      	b.n	8002644 <HAL_ADC_ConfigChannel+0x4bc>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a47      	ldr	r2, [pc, #284]	; (8002754 <HAL_ADC_ConfigChannel+0x5cc>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d102      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x4b8>
 800263a:	4b45      	ldr	r3, [pc, #276]	; (8002750 <HAL_ADC_ConfigChannel+0x5c8>)
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	e001      	b.n	8002644 <HAL_ADC_ConfigChannel+0x4bc>
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	2b01      	cmp	r3, #1
 8002650:	d108      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x4dc>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x4dc>
 8002660:	2301      	movs	r3, #1
 8002662:	e000      	b.n	8002666 <HAL_ADC_ConfigChannel+0x4de>
 8002664:	2300      	movs	r3, #0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d150      	bne.n	800270c <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800266a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800266c:	2b00      	cmp	r3, #0
 800266e:	d010      	beq.n	8002692 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 0303 	and.w	r3, r3, #3
 8002678:	2b01      	cmp	r3, #1
 800267a:	d107      	bne.n	800268c <HAL_ADC_ConfigChannel+0x504>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b01      	cmp	r3, #1
 8002686:	d101      	bne.n	800268c <HAL_ADC_ConfigChannel+0x504>
 8002688:	2301      	movs	r3, #1
 800268a:	e000      	b.n	800268e <HAL_ADC_ConfigChannel+0x506>
 800268c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800268e:	2b00      	cmp	r3, #0
 8002690:	d13c      	bne.n	800270c <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2b10      	cmp	r3, #16
 8002698:	d11d      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0x54e>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026a2:	d118      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80026a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80026ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026ae:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026b0:	4b29      	ldr	r3, [pc, #164]	; (8002758 <HAL_ADC_ConfigChannel+0x5d0>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a29      	ldr	r2, [pc, #164]	; (800275c <HAL_ADC_ConfigChannel+0x5d4>)
 80026b6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ba:	0c9a      	lsrs	r2, r3, #18
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026c6:	e002      	b.n	80026ce <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1f9      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80026d4:	e02e      	b.n	8002734 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2b11      	cmp	r3, #17
 80026dc:	d10b      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x56e>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026e6:	d106      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80026e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80026f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026f2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80026f4:	e01e      	b.n	8002734 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2b12      	cmp	r3, #18
 80026fc:	d11a      	bne.n	8002734 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80026fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002706:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002708:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800270a:	e013      	b.n	8002734 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	f043 0220 	orr.w	r2, r3, #32
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800271e:	e00a      	b.n	8002736 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002724:	f043 0220 	orr.w	r2, r3, #32
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002732:	e000      	b.n	8002736 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002734:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800273e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002742:	4618      	mov	r0, r3
 8002744:	376c      	adds	r7, #108	; 0x6c
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	50000400 	.word	0x50000400
 8002754:	50000500 	.word	0x50000500
 8002758:	20000010 	.word	0x20000010
 800275c:	431bde83 	.word	0x431bde83

08002760 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002760:	b480      	push	{r7}
 8002762:	b099      	sub	sp, #100	; 0x64
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002778:	d102      	bne.n	8002780 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800277a:	4b6d      	ldr	r3, [pc, #436]	; (8002930 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	e01a      	b.n	80027b6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a6a      	ldr	r2, [pc, #424]	; (8002930 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d103      	bne.n	8002792 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800278a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800278e:	60bb      	str	r3, [r7, #8]
 8002790:	e011      	b.n	80027b6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a67      	ldr	r2, [pc, #412]	; (8002934 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d102      	bne.n	80027a2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800279c:	4b66      	ldr	r3, [pc, #408]	; (8002938 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800279e:	60bb      	str	r3, [r7, #8]
 80027a0:	e009      	b.n	80027b6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a64      	ldr	r2, [pc, #400]	; (8002938 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d102      	bne.n	80027b2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80027ac:	4b61      	ldr	r3, [pc, #388]	; (8002934 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	e001      	b.n	80027b6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80027b2:	2300      	movs	r3, #0
 80027b4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e0b0      	b.n	8002922 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e0a9      	b.n	8002922 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f040 808d 	bne.w	8002900 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 0304 	and.w	r3, r3, #4
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f040 8086 	bne.w	8002900 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027fc:	d004      	beq.n	8002808 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a4b      	ldr	r2, [pc, #300]	; (8002930 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d101      	bne.n	800280c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002808:	4b4c      	ldr	r3, [pc, #304]	; (800293c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800280a:	e000      	b.n	800280e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800280c:	4b4c      	ldr	r3, [pc, #304]	; (8002940 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800280e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d040      	beq.n	800289a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002818:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	6859      	ldr	r1, [r3, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800282a:	035b      	lsls	r3, r3, #13
 800282c:	430b      	orrs	r3, r1
 800282e:	431a      	orrs	r2, r3
 8002830:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002832:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	2b01      	cmp	r3, #1
 8002840:	d108      	bne.n	8002854 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b01      	cmp	r3, #1
 800284e:	d101      	bne.n	8002854 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002850:	2301      	movs	r3, #1
 8002852:	e000      	b.n	8002856 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002854:	2300      	movs	r3, #0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d15c      	bne.n	8002914 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	2b01      	cmp	r3, #1
 8002864:	d107      	bne.n	8002876 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b01      	cmp	r3, #1
 8002870:	d101      	bne.n	8002876 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002876:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002878:	2b00      	cmp	r3, #0
 800287a:	d14b      	bne.n	8002914 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800287c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002884:	f023 030f 	bic.w	r3, r3, #15
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	6811      	ldr	r1, [r2, #0]
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	6892      	ldr	r2, [r2, #8]
 8002890:	430a      	orrs	r2, r1
 8002892:	431a      	orrs	r2, r3
 8002894:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002896:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002898:	e03c      	b.n	8002914 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800289a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028a4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d108      	bne.n	80028c6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d101      	bne.n	80028c6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80028c6:	2300      	movs	r3, #0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d123      	bne.n	8002914 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 0303 	and.w	r3, r3, #3
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d107      	bne.n	80028e8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80028e4:	2301      	movs	r3, #1
 80028e6:	e000      	b.n	80028ea <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80028e8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d112      	bne.n	8002914 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80028ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80028f6:	f023 030f 	bic.w	r3, r3, #15
 80028fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028fc:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80028fe:	e009      	b.n	8002914 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002904:	f043 0220 	orr.w	r2, r3, #32
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002912:	e000      	b.n	8002916 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002914:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800291e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002922:	4618      	mov	r0, r3
 8002924:	3764      	adds	r7, #100	; 0x64
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	50000100 	.word	0x50000100
 8002934:	50000400 	.word	0x50000400
 8002938:	50000500 	.word	0x50000500
 800293c:	50000300 	.word	0x50000300
 8002940:	50000700 	.word	0x50000700

08002944 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	2b01      	cmp	r3, #1
 800295c:	d108      	bne.n	8002970 <ADC_Enable+0x2c>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b01      	cmp	r3, #1
 800296a:	d101      	bne.n	8002970 <ADC_Enable+0x2c>
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <ADC_Enable+0x2e>
 8002970:	2300      	movs	r3, #0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d143      	bne.n	80029fe <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	4b22      	ldr	r3, [pc, #136]	; (8002a08 <ADC_Enable+0xc4>)
 800297e:	4013      	ands	r3, r2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00d      	beq.n	80029a0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	f043 0210 	orr.w	r2, r3, #16
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002994:	f043 0201 	orr.w	r2, r3, #1
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e02f      	b.n	8002a00 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80029b0:	f7fe ff66 	bl	8001880 <HAL_GetTick>
 80029b4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80029b6:	e01b      	b.n	80029f0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029b8:	f7fe ff62 	bl	8001880 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d914      	bls.n	80029f0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d00d      	beq.n	80029f0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d8:	f043 0210 	orr.w	r2, r3, #16
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e4:	f043 0201 	orr.w	r2, r3, #1
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e007      	b.n	8002a00 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d1dc      	bne.n	80029b8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	8000003f 	.word	0x8000003f

08002a0c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a14:	2300      	movs	r3, #0
 8002a16:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d108      	bne.n	8002a38 <ADC_Disable+0x2c>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d101      	bne.n	8002a38 <ADC_Disable+0x2c>
 8002a34:	2301      	movs	r3, #1
 8002a36:	e000      	b.n	8002a3a <ADC_Disable+0x2e>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d047      	beq.n	8002ace <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 030d 	and.w	r3, r3, #13
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d10f      	bne.n	8002a6c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0202 	orr.w	r2, r2, #2
 8002a5a:	609a      	str	r2, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2203      	movs	r2, #3
 8002a62:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002a64:	f7fe ff0c 	bl	8001880 <HAL_GetTick>
 8002a68:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002a6a:	e029      	b.n	8002ac0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	f043 0210 	orr.w	r2, r3, #16
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7c:	f043 0201 	orr.w	r2, r3, #1
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e023      	b.n	8002ad0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a88:	f7fe fefa 	bl	8001880 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d914      	bls.n	8002ac0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d10d      	bne.n	8002ac0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	f043 0210 	orr.w	r2, r3, #16
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab4:	f043 0201 	orr.w	r2, r3, #1
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e007      	b.n	8002ad0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d0dc      	beq.n	8002a88 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 030c 	and.w	r3, r3, #12
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 809a 	beq.w	8002c32 <ADC_ConversionStop+0x15a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b0c:	d12a      	bne.n	8002b64 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d126      	bne.n	8002b64 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d122      	bne.n	8002b64 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8002b1e:	230c      	movs	r3, #12
 8002b20:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002b22:	e014      	b.n	8002b4e <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	4a45      	ldr	r2, [pc, #276]	; (8002c3c <ADC_ConversionStop+0x164>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d90d      	bls.n	8002b48 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b30:	f043 0210 	orr.w	r2, r3, #16
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3c:	f043 0201 	orr.w	r2, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e075      	b.n	8002c34 <ADC_ConversionStop+0x15c>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b58:	2b40      	cmp	r3, #64	; 0x40
 8002b5a:	d1e3      	bne.n	8002b24 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2240      	movs	r2, #64	; 0x40
 8002b62:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	2b60      	cmp	r3, #96	; 0x60
 8002b68:	d015      	beq.n	8002b96 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d10e      	bne.n	8002b96 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d107      	bne.n	8002b96 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f042 0210 	orr.w	r2, r2, #16
 8002b94:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	2b0c      	cmp	r3, #12
 8002b9a:	d015      	beq.n	8002bc8 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 0308 	and.w	r3, r3, #8
 8002ba6:	2b08      	cmp	r3, #8
 8002ba8:	d10e      	bne.n	8002bc8 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d107      	bne.n	8002bc8 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0220 	orr.w	r2, r2, #32
 8002bc6:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	2b60      	cmp	r3, #96	; 0x60
 8002bcc:	d004      	beq.n	8002bd8 <ADC_ConversionStop+0x100>
 8002bce:	2b6c      	cmp	r3, #108	; 0x6c
 8002bd0:	d105      	bne.n	8002bde <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002bd2:	230c      	movs	r3, #12
 8002bd4:	617b      	str	r3, [r7, #20]
        break;
 8002bd6:	e005      	b.n	8002be4 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002bd8:	2308      	movs	r3, #8
 8002bda:	617b      	str	r3, [r7, #20]
        break;
 8002bdc:	e002      	b.n	8002be4 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002bde:	2304      	movs	r3, #4
 8002be0:	617b      	str	r3, [r7, #20]
        break;
 8002be2:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002be4:	f7fe fe4c 	bl	8001880 <HAL_GetTick>
 8002be8:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002bea:	e01b      	b.n	8002c24 <ADC_ConversionStop+0x14c>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002bec:	f7fe fe48 	bl	8001880 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b0b      	cmp	r3, #11
 8002bf8:	d914      	bls.n	8002c24 <ADC_ConversionStop+0x14c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	4013      	ands	r3, r2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00d      	beq.n	8002c24 <ADC_ConversionStop+0x14c>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	f043 0210 	orr.w	r2, r3, #16
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c18:	f043 0201 	orr.w	r2, r3, #1
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e007      	b.n	8002c34 <ADC_ConversionStop+0x15c>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1dc      	bne.n	8002bec <ADC_ConversionStop+0x114>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	000993ff 	.word	0x000993ff

08002c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c50:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <__NVIC_SetPriorityGrouping+0x44>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c72:	4a04      	ldr	r2, [pc, #16]	; (8002c84 <__NVIC_SetPriorityGrouping+0x44>)
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	60d3      	str	r3, [r2, #12]
}
 8002c78:	bf00      	nop
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	e000ed00 	.word	0xe000ed00

08002c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c8c:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	0a1b      	lsrs	r3, r3, #8
 8002c92:	f003 0307 	and.w	r3, r3, #7
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	e000ed00 	.word	0xe000ed00

08002ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	db0b      	blt.n	8002cce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	f003 021f 	and.w	r2, r3, #31
 8002cbc:	4907      	ldr	r1, [pc, #28]	; (8002cdc <__NVIC_EnableIRQ+0x38>)
 8002cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc2:	095b      	lsrs	r3, r3, #5
 8002cc4:	2001      	movs	r0, #1
 8002cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	e000e100 	.word	0xe000e100

08002ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	6039      	str	r1, [r7, #0]
 8002cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	db0a      	blt.n	8002d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	490c      	ldr	r1, [pc, #48]	; (8002d2c <__NVIC_SetPriority+0x4c>)
 8002cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfe:	0112      	lsls	r2, r2, #4
 8002d00:	b2d2      	uxtb	r2, r2
 8002d02:	440b      	add	r3, r1
 8002d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d08:	e00a      	b.n	8002d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	4908      	ldr	r1, [pc, #32]	; (8002d30 <__NVIC_SetPriority+0x50>)
 8002d10:	79fb      	ldrb	r3, [r7, #7]
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	3b04      	subs	r3, #4
 8002d18:	0112      	lsls	r2, r2, #4
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	761a      	strb	r2, [r3, #24]
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	e000e100 	.word	0xe000e100
 8002d30:	e000ed00 	.word	0xe000ed00

08002d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b089      	sub	sp, #36	; 0x24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f1c3 0307 	rsb	r3, r3, #7
 8002d4e:	2b04      	cmp	r3, #4
 8002d50:	bf28      	it	cs
 8002d52:	2304      	movcs	r3, #4
 8002d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	3304      	adds	r3, #4
 8002d5a:	2b06      	cmp	r3, #6
 8002d5c:	d902      	bls.n	8002d64 <NVIC_EncodePriority+0x30>
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	3b03      	subs	r3, #3
 8002d62:	e000      	b.n	8002d66 <NVIC_EncodePriority+0x32>
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d68:	f04f 32ff 	mov.w	r2, #4294967295
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	43da      	mvns	r2, r3
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	401a      	ands	r2, r3
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	fa01 f303 	lsl.w	r3, r1, r3
 8002d86:	43d9      	mvns	r1, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d8c:	4313      	orrs	r3, r2
         );
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3724      	adds	r7, #36	; 0x24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
	...

08002d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dac:	d301      	bcc.n	8002db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dae:	2301      	movs	r3, #1
 8002db0:	e00f      	b.n	8002dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002db2:	4a0a      	ldr	r2, [pc, #40]	; (8002ddc <SysTick_Config+0x40>)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dba:	210f      	movs	r1, #15
 8002dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc0:	f7ff ff8e 	bl	8002ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dc4:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <SysTick_Config+0x40>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dca:	4b04      	ldr	r3, [pc, #16]	; (8002ddc <SysTick_Config+0x40>)
 8002dcc:	2207      	movs	r2, #7
 8002dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	e000e010 	.word	0xe000e010

08002de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f7ff ff29 	bl	8002c40 <__NVIC_SetPriorityGrouping>
}
 8002dee:	bf00      	nop
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b086      	sub	sp, #24
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	60b9      	str	r1, [r7, #8]
 8002e00:	607a      	str	r2, [r7, #4]
 8002e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e08:	f7ff ff3e 	bl	8002c88 <__NVIC_GetPriorityGrouping>
 8002e0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	68b9      	ldr	r1, [r7, #8]
 8002e12:	6978      	ldr	r0, [r7, #20]
 8002e14:	f7ff ff8e 	bl	8002d34 <NVIC_EncodePriority>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e1e:	4611      	mov	r1, r2
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff ff5d 	bl	8002ce0 <__NVIC_SetPriority>
}
 8002e26:	bf00      	nop
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	4603      	mov	r3, r0
 8002e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff ff31 	bl	8002ca4 <__NVIC_EnableIRQ>
}
 8002e42:	bf00      	nop
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b082      	sub	sp, #8
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7ff ffa2 	bl	8002d9c <SysTick_Config>
 8002e58:	4603      	mov	r3, r0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d008      	beq.n	8002e86 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2204      	movs	r2, #4
 8002e78:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e020      	b.n	8002ec8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 020e 	bic.w	r2, r2, #14
 8002e94:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0201 	bic.w	r2, r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eae:	2101      	movs	r1, #1
 8002eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002edc:	2300      	movs	r3, #0
 8002ede:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d005      	beq.n	8002ef6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2204      	movs	r2, #4
 8002eee:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	73fb      	strb	r3, [r7, #15]
 8002ef4:	e027      	b.n	8002f46 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 020e 	bic.w	r2, r2, #14
 8002f04:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0201 	bic.w	r2, r2, #1
 8002f14:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1e:	2101      	movs	r1, #1
 8002f20:	fa01 f202 	lsl.w	r2, r1, r2
 8002f24:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	4798      	blx	r3
    } 
  }
  return status;
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b087      	sub	sp, #28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f5e:	e160      	b.n	8003222 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	2101      	movs	r1, #1
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 8152 	beq.w	800321c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f003 0303 	and.w	r3, r3, #3
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d005      	beq.n	8002f90 <HAL_GPIO_Init+0x40>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 0303 	and.w	r3, r3, #3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d130      	bne.n	8002ff2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	2203      	movs	r2, #3
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	091b      	lsrs	r3, r3, #4
 8002fdc:	f003 0201 	and.w	r2, r3, #1
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d017      	beq.n	800302e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	2203      	movs	r2, #3
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	43db      	mvns	r3, r3
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	4013      	ands	r3, r2
 8003014:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	4313      	orrs	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d123      	bne.n	8003082 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	08da      	lsrs	r2, r3, #3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	3208      	adds	r2, #8
 8003042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003046:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f003 0307 	and.w	r3, r3, #7
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	220f      	movs	r2, #15
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43db      	mvns	r3, r3
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	4013      	ands	r3, r2
 800305c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	691a      	ldr	r2, [r3, #16]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	4313      	orrs	r3, r2
 8003072:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	08da      	lsrs	r2, r3, #3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3208      	adds	r2, #8
 800307c:	6939      	ldr	r1, [r7, #16]
 800307e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	2203      	movs	r2, #3
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43db      	mvns	r3, r3
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	4013      	ands	r3, r2
 8003098:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f003 0203 	and.w	r2, r3, #3
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 80ac 	beq.w	800321c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030c4:	4b5e      	ldr	r3, [pc, #376]	; (8003240 <HAL_GPIO_Init+0x2f0>)
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	4a5d      	ldr	r2, [pc, #372]	; (8003240 <HAL_GPIO_Init+0x2f0>)
 80030ca:	f043 0301 	orr.w	r3, r3, #1
 80030ce:	6193      	str	r3, [r2, #24]
 80030d0:	4b5b      	ldr	r3, [pc, #364]	; (8003240 <HAL_GPIO_Init+0x2f0>)
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	60bb      	str	r3, [r7, #8]
 80030da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030dc:	4a59      	ldr	r2, [pc, #356]	; (8003244 <HAL_GPIO_Init+0x2f4>)
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	089b      	lsrs	r3, r3, #2
 80030e2:	3302      	adds	r3, #2
 80030e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f003 0303 	and.w	r3, r3, #3
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	220f      	movs	r2, #15
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	43db      	mvns	r3, r3
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	4013      	ands	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003106:	d025      	beq.n	8003154 <HAL_GPIO_Init+0x204>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a4f      	ldr	r2, [pc, #316]	; (8003248 <HAL_GPIO_Init+0x2f8>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d01f      	beq.n	8003150 <HAL_GPIO_Init+0x200>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a4e      	ldr	r2, [pc, #312]	; (800324c <HAL_GPIO_Init+0x2fc>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d019      	beq.n	800314c <HAL_GPIO_Init+0x1fc>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a4d      	ldr	r2, [pc, #308]	; (8003250 <HAL_GPIO_Init+0x300>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d013      	beq.n	8003148 <HAL_GPIO_Init+0x1f8>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a4c      	ldr	r2, [pc, #304]	; (8003254 <HAL_GPIO_Init+0x304>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d00d      	beq.n	8003144 <HAL_GPIO_Init+0x1f4>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a4b      	ldr	r2, [pc, #300]	; (8003258 <HAL_GPIO_Init+0x308>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d007      	beq.n	8003140 <HAL_GPIO_Init+0x1f0>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a4a      	ldr	r2, [pc, #296]	; (800325c <HAL_GPIO_Init+0x30c>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d101      	bne.n	800313c <HAL_GPIO_Init+0x1ec>
 8003138:	2306      	movs	r3, #6
 800313a:	e00c      	b.n	8003156 <HAL_GPIO_Init+0x206>
 800313c:	2307      	movs	r3, #7
 800313e:	e00a      	b.n	8003156 <HAL_GPIO_Init+0x206>
 8003140:	2305      	movs	r3, #5
 8003142:	e008      	b.n	8003156 <HAL_GPIO_Init+0x206>
 8003144:	2304      	movs	r3, #4
 8003146:	e006      	b.n	8003156 <HAL_GPIO_Init+0x206>
 8003148:	2303      	movs	r3, #3
 800314a:	e004      	b.n	8003156 <HAL_GPIO_Init+0x206>
 800314c:	2302      	movs	r3, #2
 800314e:	e002      	b.n	8003156 <HAL_GPIO_Init+0x206>
 8003150:	2301      	movs	r3, #1
 8003152:	e000      	b.n	8003156 <HAL_GPIO_Init+0x206>
 8003154:	2300      	movs	r3, #0
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	f002 0203 	and.w	r2, r2, #3
 800315c:	0092      	lsls	r2, r2, #2
 800315e:	4093      	lsls	r3, r2
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	4313      	orrs	r3, r2
 8003164:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003166:	4937      	ldr	r1, [pc, #220]	; (8003244 <HAL_GPIO_Init+0x2f4>)
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	089b      	lsrs	r3, r3, #2
 800316c:	3302      	adds	r3, #2
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003174:	4b3a      	ldr	r3, [pc, #232]	; (8003260 <HAL_GPIO_Init+0x310>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	43db      	mvns	r3, r3
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4013      	ands	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	4313      	orrs	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003198:	4a31      	ldr	r2, [pc, #196]	; (8003260 <HAL_GPIO_Init+0x310>)
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800319e:	4b30      	ldr	r3, [pc, #192]	; (8003260 <HAL_GPIO_Init+0x310>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	43db      	mvns	r3, r3
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	4013      	ands	r3, r2
 80031ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4313      	orrs	r3, r2
 80031c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80031c2:	4a27      	ldr	r2, [pc, #156]	; (8003260 <HAL_GPIO_Init+0x310>)
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031c8:	4b25      	ldr	r3, [pc, #148]	; (8003260 <HAL_GPIO_Init+0x310>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	43db      	mvns	r3, r3
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	4013      	ands	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d003      	beq.n	80031ec <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80031ec:	4a1c      	ldr	r2, [pc, #112]	; (8003260 <HAL_GPIO_Init+0x310>)
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031f2:	4b1b      	ldr	r3, [pc, #108]	; (8003260 <HAL_GPIO_Init+0x310>)
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	43db      	mvns	r3, r3
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	4013      	ands	r3, r2
 8003200:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4313      	orrs	r3, r2
 8003214:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003216:	4a12      	ldr	r2, [pc, #72]	; (8003260 <HAL_GPIO_Init+0x310>)
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	3301      	adds	r3, #1
 8003220:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	fa22 f303 	lsr.w	r3, r2, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	f47f ae97 	bne.w	8002f60 <HAL_GPIO_Init+0x10>
  }
}
 8003232:	bf00      	nop
 8003234:	371c      	adds	r7, #28
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	40021000 	.word	0x40021000
 8003244:	40010000 	.word	0x40010000
 8003248:	48000400 	.word	0x48000400
 800324c:	48000800 	.word	0x48000800
 8003250:	48000c00 	.word	0x48000c00
 8003254:	48001000 	.word	0x48001000
 8003258:	48001400 	.word	0x48001400
 800325c:	48001800 	.word	0x48001800
 8003260:	40010400 	.word	0x40010400

08003264 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691a      	ldr	r2, [r3, #16]
 8003274:	887b      	ldrh	r3, [r7, #2]
 8003276:	4013      	ands	r3, r2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d002      	beq.n	8003282 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800327c:	2301      	movs	r3, #1
 800327e:	73fb      	strb	r3, [r7, #15]
 8003280:	e001      	b.n	8003286 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003282:	2300      	movs	r3, #0
 8003284:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003286:	7bfb      	ldrb	r3, [r7, #15]
}
 8003288:	4618      	mov	r0, r3
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	460b      	mov	r3, r1
 800329e:	807b      	strh	r3, [r7, #2]
 80032a0:	4613      	mov	r3, r2
 80032a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032a4:	787b      	ldrb	r3, [r7, #1]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032aa:	887a      	ldrh	r2, [r7, #2]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032b0:	e002      	b.n	80032b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032b2:	887a      	ldrh	r2, [r7, #2]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	460b      	mov	r3, r1
 80032ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032d6:	887a      	ldrh	r2, [r7, #2]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4013      	ands	r3, r2
 80032dc:	041a      	lsls	r2, r3, #16
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	43d9      	mvns	r1, r3
 80032e2:	887b      	ldrh	r3, [r7, #2]
 80032e4:	400b      	ands	r3, r1
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	619a      	str	r2, [r3, #24]
}
 80032ec:	bf00      	nop
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003302:	4b08      	ldr	r3, [pc, #32]	; (8003324 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003304:	695a      	ldr	r2, [r3, #20]
 8003306:	88fb      	ldrh	r3, [r7, #6]
 8003308:	4013      	ands	r3, r2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d006      	beq.n	800331c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800330e:	4a05      	ldr	r2, [pc, #20]	; (8003324 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003310:	88fb      	ldrh	r3, [r7, #6]
 8003312:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003314:	88fb      	ldrh	r3, [r7, #6]
 8003316:	4618      	mov	r0, r3
 8003318:	f7fc ff6c 	bl	80001f4 <HAL_GPIO_EXTI_Callback>
  }
}
 800331c:	bf00      	nop
 800331e:	3708      	adds	r7, #8
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40010400 	.word	0x40010400

08003328 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800332e:	af00      	add	r7, sp, #0
 8003330:	1d3b      	adds	r3, r7, #4
 8003332:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003334:	1d3b      	adds	r3, r7, #4
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d102      	bne.n	8003342 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	f000 bf01 	b.w	8004144 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003342:	1d3b      	adds	r3, r7, #4
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 8160 	beq.w	8003612 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003352:	4bae      	ldr	r3, [pc, #696]	; (800360c <HAL_RCC_OscConfig+0x2e4>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f003 030c 	and.w	r3, r3, #12
 800335a:	2b04      	cmp	r3, #4
 800335c:	d00c      	beq.n	8003378 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800335e:	4bab      	ldr	r3, [pc, #684]	; (800360c <HAL_RCC_OscConfig+0x2e4>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f003 030c 	and.w	r3, r3, #12
 8003366:	2b08      	cmp	r3, #8
 8003368:	d159      	bne.n	800341e <HAL_RCC_OscConfig+0xf6>
 800336a:	4ba8      	ldr	r3, [pc, #672]	; (800360c <HAL_RCC_OscConfig+0x2e4>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003376:	d152      	bne.n	800341e <HAL_RCC_OscConfig+0xf6>
 8003378:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800337c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003380:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003384:	fa93 f3a3 	rbit	r3, r3
 8003388:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800338c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003390:	fab3 f383 	clz	r3, r3
 8003394:	b2db      	uxtb	r3, r3
 8003396:	095b      	lsrs	r3, r3, #5
 8003398:	b2db      	uxtb	r3, r3
 800339a:	f043 0301 	orr.w	r3, r3, #1
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d102      	bne.n	80033aa <HAL_RCC_OscConfig+0x82>
 80033a4:	4b99      	ldr	r3, [pc, #612]	; (800360c <HAL_RCC_OscConfig+0x2e4>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	e015      	b.n	80033d6 <HAL_RCC_OscConfig+0xae>
 80033aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033ae:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80033b6:	fa93 f3a3 	rbit	r3, r3
 80033ba:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80033be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033c2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80033c6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80033ca:	fa93 f3a3 	rbit	r3, r3
 80033ce:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80033d2:	4b8e      	ldr	r3, [pc, #568]	; (800360c <HAL_RCC_OscConfig+0x2e4>)
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033da:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80033de:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80033e2:	fa92 f2a2 	rbit	r2, r2
 80033e6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80033ea:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80033ee:	fab2 f282 	clz	r2, r2
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	f042 0220 	orr.w	r2, r2, #32
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	f002 021f 	and.w	r2, r2, #31
 80033fe:	2101      	movs	r1, #1
 8003400:	fa01 f202 	lsl.w	r2, r1, r2
 8003404:	4013      	ands	r3, r2
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 8102 	beq.w	8003610 <HAL_RCC_OscConfig+0x2e8>
 800340c:	1d3b      	adds	r3, r7, #4
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	f040 80fc 	bne.w	8003610 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	f000 be93 	b.w	8004144 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800341e:	1d3b      	adds	r3, r7, #4
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003428:	d106      	bne.n	8003438 <HAL_RCC_OscConfig+0x110>
 800342a:	4b78      	ldr	r3, [pc, #480]	; (800360c <HAL_RCC_OscConfig+0x2e4>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a77      	ldr	r2, [pc, #476]	; (800360c <HAL_RCC_OscConfig+0x2e4>)
 8003430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	e030      	b.n	800349a <HAL_RCC_OscConfig+0x172>
 8003438:	1d3b      	adds	r3, r7, #4
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10c      	bne.n	800345c <HAL_RCC_OscConfig+0x134>
 8003442:	4b72      	ldr	r3, [pc, #456]	; (800360c <HAL_RCC_OscConfig+0x2e4>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a71      	ldr	r2, [pc, #452]	; (800360c <HAL_RCC_OscConfig+0x2e4>)
 8003448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	4b6f      	ldr	r3, [pc, #444]	; (800360c <HAL_RCC_OscConfig+0x2e4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a6e      	ldr	r2, [pc, #440]	; (800360c <HAL_RCC_OscConfig+0x2e4>)
 8003454:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	e01e      	b.n	800349a <HAL_RCC_OscConfig+0x172>
 800345c:	1d3b      	adds	r3, r7, #4
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003466:	d10c      	bne.n	8003482 <HAL_RCC_OscConfig+0x15a>
 8003468:	4b68      	ldr	r3, [pc, #416]	; (800360c <HAL_RCC_OscConfig+0x2e4>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a67      	ldr	r2, [pc, #412]	; (800360c <HAL_RCC_OscConfig+0x2e4>)
 800346e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003472:	6013      	str	r3, [r2, #0]
 8003474:	4b65      	ldr	r3, [pc, #404]	; (800360c <HAL_RCC_OscConfig+0x2e4>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a64      	ldr	r2, [pc, #400]	; (800360c <HAL_RCC_OscConfig+0x2e4>)
 800347a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	e00b      	b.n	800349a <HAL_RCC_OscConfig+0x172>
 8003482:	4b62      	ldr	r3, [pc, #392]	; (800360c <HAL_RCC_OscConfig+0x2e4>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a61      	ldr	r2, [pc, #388]	; (800360c <HAL_RCC_OscConfig+0x2e4>)
 8003488:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	4b5f      	ldr	r3, [pc, #380]	; (800360c <HAL_RCC_OscConfig+0x2e4>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a5e      	ldr	r2, [pc, #376]	; (800360c <HAL_RCC_OscConfig+0x2e4>)
 8003494:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003498:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800349a:	1d3b      	adds	r3, r7, #4
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d059      	beq.n	8003558 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a4:	f7fe f9ec 	bl	8001880 <HAL_GetTick>
 80034a8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ac:	e00a      	b.n	80034c4 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034ae:	f7fe f9e7 	bl	8001880 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b64      	cmp	r3, #100	; 0x64
 80034bc:	d902      	bls.n	80034c4 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	f000 be40 	b.w	8004144 <HAL_RCC_OscConfig+0xe1c>
 80034c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034c8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034cc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80034d0:	fa93 f3a3 	rbit	r3, r3
 80034d4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80034d8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034dc:	fab3 f383 	clz	r3, r3
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	095b      	lsrs	r3, r3, #5
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	f043 0301 	orr.w	r3, r3, #1
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d102      	bne.n	80034f6 <HAL_RCC_OscConfig+0x1ce>
 80034f0:	4b46      	ldr	r3, [pc, #280]	; (800360c <HAL_RCC_OscConfig+0x2e4>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	e015      	b.n	8003522 <HAL_RCC_OscConfig+0x1fa>
 80034f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034fa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003502:	fa93 f3a3 	rbit	r3, r3
 8003506:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800350a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800350e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003512:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003516:	fa93 f3a3 	rbit	r3, r3
 800351a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800351e:	4b3b      	ldr	r3, [pc, #236]	; (800360c <HAL_RCC_OscConfig+0x2e4>)
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003526:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800352a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800352e:	fa92 f2a2 	rbit	r2, r2
 8003532:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003536:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800353a:	fab2 f282 	clz	r2, r2
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	f042 0220 	orr.w	r2, r2, #32
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	f002 021f 	and.w	r2, r2, #31
 800354a:	2101      	movs	r1, #1
 800354c:	fa01 f202 	lsl.w	r2, r1, r2
 8003550:	4013      	ands	r3, r2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0ab      	beq.n	80034ae <HAL_RCC_OscConfig+0x186>
 8003556:	e05c      	b.n	8003612 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003558:	f7fe f992 	bl	8001880 <HAL_GetTick>
 800355c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003560:	e00a      	b.n	8003578 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003562:	f7fe f98d 	bl	8001880 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b64      	cmp	r3, #100	; 0x64
 8003570:	d902      	bls.n	8003578 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	f000 bde6 	b.w	8004144 <HAL_RCC_OscConfig+0xe1c>
 8003578:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800357c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003580:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003584:	fa93 f3a3 	rbit	r3, r3
 8003588:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800358c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003590:	fab3 f383 	clz	r3, r3
 8003594:	b2db      	uxtb	r3, r3
 8003596:	095b      	lsrs	r3, r3, #5
 8003598:	b2db      	uxtb	r3, r3
 800359a:	f043 0301 	orr.w	r3, r3, #1
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d102      	bne.n	80035aa <HAL_RCC_OscConfig+0x282>
 80035a4:	4b19      	ldr	r3, [pc, #100]	; (800360c <HAL_RCC_OscConfig+0x2e4>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	e015      	b.n	80035d6 <HAL_RCC_OscConfig+0x2ae>
 80035aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035ae:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80035b6:	fa93 f3a3 	rbit	r3, r3
 80035ba:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80035be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035c2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80035c6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80035ca:	fa93 f3a3 	rbit	r3, r3
 80035ce:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80035d2:	4b0e      	ldr	r3, [pc, #56]	; (800360c <HAL_RCC_OscConfig+0x2e4>)
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035da:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80035de:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80035e2:	fa92 f2a2 	rbit	r2, r2
 80035e6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80035ea:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80035ee:	fab2 f282 	clz	r2, r2
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	f042 0220 	orr.w	r2, r2, #32
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	f002 021f 	and.w	r2, r2, #31
 80035fe:	2101      	movs	r1, #1
 8003600:	fa01 f202 	lsl.w	r2, r1, r2
 8003604:	4013      	ands	r3, r2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1ab      	bne.n	8003562 <HAL_RCC_OscConfig+0x23a>
 800360a:	e002      	b.n	8003612 <HAL_RCC_OscConfig+0x2ea>
 800360c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003612:	1d3b      	adds	r3, r7, #4
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 8170 	beq.w	8003902 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003622:	4bd0      	ldr	r3, [pc, #832]	; (8003964 <HAL_RCC_OscConfig+0x63c>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f003 030c 	and.w	r3, r3, #12
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00c      	beq.n	8003648 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800362e:	4bcd      	ldr	r3, [pc, #820]	; (8003964 <HAL_RCC_OscConfig+0x63c>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f003 030c 	and.w	r3, r3, #12
 8003636:	2b08      	cmp	r3, #8
 8003638:	d16d      	bne.n	8003716 <HAL_RCC_OscConfig+0x3ee>
 800363a:	4bca      	ldr	r3, [pc, #808]	; (8003964 <HAL_RCC_OscConfig+0x63c>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003646:	d166      	bne.n	8003716 <HAL_RCC_OscConfig+0x3ee>
 8003648:	2302      	movs	r3, #2
 800364a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003652:	fa93 f3a3 	rbit	r3, r3
 8003656:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800365a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800365e:	fab3 f383 	clz	r3, r3
 8003662:	b2db      	uxtb	r3, r3
 8003664:	095b      	lsrs	r3, r3, #5
 8003666:	b2db      	uxtb	r3, r3
 8003668:	f043 0301 	orr.w	r3, r3, #1
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b01      	cmp	r3, #1
 8003670:	d102      	bne.n	8003678 <HAL_RCC_OscConfig+0x350>
 8003672:	4bbc      	ldr	r3, [pc, #752]	; (8003964 <HAL_RCC_OscConfig+0x63c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	e013      	b.n	80036a0 <HAL_RCC_OscConfig+0x378>
 8003678:	2302      	movs	r3, #2
 800367a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003682:	fa93 f3a3 	rbit	r3, r3
 8003686:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800368a:	2302      	movs	r3, #2
 800368c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003690:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003694:	fa93 f3a3 	rbit	r3, r3
 8003698:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800369c:	4bb1      	ldr	r3, [pc, #708]	; (8003964 <HAL_RCC_OscConfig+0x63c>)
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	2202      	movs	r2, #2
 80036a2:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80036a6:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80036aa:	fa92 f2a2 	rbit	r2, r2
 80036ae:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80036b2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80036b6:	fab2 f282 	clz	r2, r2
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	f042 0220 	orr.w	r2, r2, #32
 80036c0:	b2d2      	uxtb	r2, r2
 80036c2:	f002 021f 	and.w	r2, r2, #31
 80036c6:	2101      	movs	r1, #1
 80036c8:	fa01 f202 	lsl.w	r2, r1, r2
 80036cc:	4013      	ands	r3, r2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d007      	beq.n	80036e2 <HAL_RCC_OscConfig+0x3ba>
 80036d2:	1d3b      	adds	r3, r7, #4
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d002      	beq.n	80036e2 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	f000 bd31 	b.w	8004144 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e2:	4ba0      	ldr	r3, [pc, #640]	; (8003964 <HAL_RCC_OscConfig+0x63c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ea:	1d3b      	adds	r3, r7, #4
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	21f8      	movs	r1, #248	; 0xf8
 80036f2:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f6:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80036fa:	fa91 f1a1 	rbit	r1, r1
 80036fe:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003702:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003706:	fab1 f181 	clz	r1, r1
 800370a:	b2c9      	uxtb	r1, r1
 800370c:	408b      	lsls	r3, r1
 800370e:	4995      	ldr	r1, [pc, #596]	; (8003964 <HAL_RCC_OscConfig+0x63c>)
 8003710:	4313      	orrs	r3, r2
 8003712:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003714:	e0f5      	b.n	8003902 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003716:	1d3b      	adds	r3, r7, #4
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 8085 	beq.w	800382c <HAL_RCC_OscConfig+0x504>
 8003722:	2301      	movs	r3, #1
 8003724:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003728:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800372c:	fa93 f3a3 	rbit	r3, r3
 8003730:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003734:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003738:	fab3 f383 	clz	r3, r3
 800373c:	b2db      	uxtb	r3, r3
 800373e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003742:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	461a      	mov	r2, r3
 800374a:	2301      	movs	r3, #1
 800374c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800374e:	f7fe f897 	bl	8001880 <HAL_GetTick>
 8003752:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003756:	e00a      	b.n	800376e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003758:	f7fe f892 	bl	8001880 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d902      	bls.n	800376e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	f000 bceb 	b.w	8004144 <HAL_RCC_OscConfig+0xe1c>
 800376e:	2302      	movs	r3, #2
 8003770:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003774:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003778:	fa93 f3a3 	rbit	r3, r3
 800377c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003780:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003784:	fab3 f383 	clz	r3, r3
 8003788:	b2db      	uxtb	r3, r3
 800378a:	095b      	lsrs	r3, r3, #5
 800378c:	b2db      	uxtb	r3, r3
 800378e:	f043 0301 	orr.w	r3, r3, #1
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b01      	cmp	r3, #1
 8003796:	d102      	bne.n	800379e <HAL_RCC_OscConfig+0x476>
 8003798:	4b72      	ldr	r3, [pc, #456]	; (8003964 <HAL_RCC_OscConfig+0x63c>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	e013      	b.n	80037c6 <HAL_RCC_OscConfig+0x49e>
 800379e:	2302      	movs	r3, #2
 80037a0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80037a8:	fa93 f3a3 	rbit	r3, r3
 80037ac:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80037b0:	2302      	movs	r3, #2
 80037b2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80037b6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80037ba:	fa93 f3a3 	rbit	r3, r3
 80037be:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80037c2:	4b68      	ldr	r3, [pc, #416]	; (8003964 <HAL_RCC_OscConfig+0x63c>)
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	2202      	movs	r2, #2
 80037c8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80037cc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80037d0:	fa92 f2a2 	rbit	r2, r2
 80037d4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80037d8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80037dc:	fab2 f282 	clz	r2, r2
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	f042 0220 	orr.w	r2, r2, #32
 80037e6:	b2d2      	uxtb	r2, r2
 80037e8:	f002 021f 	and.w	r2, r2, #31
 80037ec:	2101      	movs	r1, #1
 80037ee:	fa01 f202 	lsl.w	r2, r1, r2
 80037f2:	4013      	ands	r3, r2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0af      	beq.n	8003758 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f8:	4b5a      	ldr	r3, [pc, #360]	; (8003964 <HAL_RCC_OscConfig+0x63c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003800:	1d3b      	adds	r3, r7, #4
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	21f8      	movs	r1, #248	; 0xf8
 8003808:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003810:	fa91 f1a1 	rbit	r1, r1
 8003814:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003818:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800381c:	fab1 f181 	clz	r1, r1
 8003820:	b2c9      	uxtb	r1, r1
 8003822:	408b      	lsls	r3, r1
 8003824:	494f      	ldr	r1, [pc, #316]	; (8003964 <HAL_RCC_OscConfig+0x63c>)
 8003826:	4313      	orrs	r3, r2
 8003828:	600b      	str	r3, [r1, #0]
 800382a:	e06a      	b.n	8003902 <HAL_RCC_OscConfig+0x5da>
 800382c:	2301      	movs	r3, #1
 800382e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003832:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003836:	fa93 f3a3 	rbit	r3, r3
 800383a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800383e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003842:	fab3 f383 	clz	r3, r3
 8003846:	b2db      	uxtb	r3, r3
 8003848:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800384c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	461a      	mov	r2, r3
 8003854:	2300      	movs	r3, #0
 8003856:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003858:	f7fe f812 	bl	8001880 <HAL_GetTick>
 800385c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003860:	e00a      	b.n	8003878 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003862:	f7fe f80d 	bl	8001880 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d902      	bls.n	8003878 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	f000 bc66 	b.w	8004144 <HAL_RCC_OscConfig+0xe1c>
 8003878:	2302      	movs	r3, #2
 800387a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003882:	fa93 f3a3 	rbit	r3, r3
 8003886:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800388a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800388e:	fab3 f383 	clz	r3, r3
 8003892:	b2db      	uxtb	r3, r3
 8003894:	095b      	lsrs	r3, r3, #5
 8003896:	b2db      	uxtb	r3, r3
 8003898:	f043 0301 	orr.w	r3, r3, #1
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d102      	bne.n	80038a8 <HAL_RCC_OscConfig+0x580>
 80038a2:	4b30      	ldr	r3, [pc, #192]	; (8003964 <HAL_RCC_OscConfig+0x63c>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	e013      	b.n	80038d0 <HAL_RCC_OscConfig+0x5a8>
 80038a8:	2302      	movs	r3, #2
 80038aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80038b2:	fa93 f3a3 	rbit	r3, r3
 80038b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80038ba:	2302      	movs	r3, #2
 80038bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80038c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80038c4:	fa93 f3a3 	rbit	r3, r3
 80038c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80038cc:	4b25      	ldr	r3, [pc, #148]	; (8003964 <HAL_RCC_OscConfig+0x63c>)
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	2202      	movs	r2, #2
 80038d2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80038d6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80038da:	fa92 f2a2 	rbit	r2, r2
 80038de:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80038e2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80038e6:	fab2 f282 	clz	r2, r2
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	f042 0220 	orr.w	r2, r2, #32
 80038f0:	b2d2      	uxtb	r2, r2
 80038f2:	f002 021f 	and.w	r2, r2, #31
 80038f6:	2101      	movs	r1, #1
 80038f8:	fa01 f202 	lsl.w	r2, r1, r2
 80038fc:	4013      	ands	r3, r2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1af      	bne.n	8003862 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003902:	1d3b      	adds	r3, r7, #4
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0308 	and.w	r3, r3, #8
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 80da 	beq.w	8003ac6 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003912:	1d3b      	adds	r3, r7, #4
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d069      	beq.n	80039f0 <HAL_RCC_OscConfig+0x6c8>
 800391c:	2301      	movs	r3, #1
 800391e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003926:	fa93 f3a3 	rbit	r3, r3
 800392a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800392e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003932:	fab3 f383 	clz	r3, r3
 8003936:	b2db      	uxtb	r3, r3
 8003938:	461a      	mov	r2, r3
 800393a:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <HAL_RCC_OscConfig+0x640>)
 800393c:	4413      	add	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	461a      	mov	r2, r3
 8003942:	2301      	movs	r3, #1
 8003944:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003946:	f7fd ff9b 	bl	8001880 <HAL_GetTick>
 800394a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800394e:	e00d      	b.n	800396c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003950:	f7fd ff96 	bl	8001880 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d905      	bls.n	800396c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e3ef      	b.n	8004144 <HAL_RCC_OscConfig+0xe1c>
 8003964:	40021000 	.word	0x40021000
 8003968:	10908120 	.word	0x10908120
 800396c:	2302      	movs	r3, #2
 800396e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003972:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003976:	fa93 f2a3 	rbit	r2, r3
 800397a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003984:	2202      	movs	r2, #2
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	fa93 f2a3 	rbit	r2, r3
 8003992:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800399c:	2202      	movs	r2, #2
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	fa93 f2a3 	rbit	r2, r3
 80039aa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80039ae:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039b0:	4ba4      	ldr	r3, [pc, #656]	; (8003c44 <HAL_RCC_OscConfig+0x91c>)
 80039b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039b4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80039b8:	2102      	movs	r1, #2
 80039ba:	6019      	str	r1, [r3, #0]
 80039bc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	fa93 f1a3 	rbit	r1, r3
 80039c6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80039ca:	6019      	str	r1, [r3, #0]
  return result;
 80039cc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	fab3 f383 	clz	r3, r3
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	f003 031f 	and.w	r3, r3, #31
 80039e2:	2101      	movs	r1, #1
 80039e4:	fa01 f303 	lsl.w	r3, r1, r3
 80039e8:	4013      	ands	r3, r2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d0b0      	beq.n	8003950 <HAL_RCC_OscConfig+0x628>
 80039ee:	e06a      	b.n	8003ac6 <HAL_RCC_OscConfig+0x79e>
 80039f0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80039f4:	2201      	movs	r2, #1
 80039f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	fa93 f2a3 	rbit	r2, r3
 8003a02:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003a06:	601a      	str	r2, [r3, #0]
  return result;
 8003a08:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003a0c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a0e:	fab3 f383 	clz	r3, r3
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	461a      	mov	r2, r3
 8003a16:	4b8c      	ldr	r3, [pc, #560]	; (8003c48 <HAL_RCC_OscConfig+0x920>)
 8003a18:	4413      	add	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	2300      	movs	r3, #0
 8003a20:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a22:	f7fd ff2d 	bl	8001880 <HAL_GetTick>
 8003a26:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a2a:	e009      	b.n	8003a40 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a2c:	f7fd ff28 	bl	8001880 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e381      	b.n	8004144 <HAL_RCC_OscConfig+0xe1c>
 8003a40:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003a44:	2202      	movs	r2, #2
 8003a46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a48:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	fa93 f2a3 	rbit	r2, r3
 8003a52:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	fa93 f2a3 	rbit	r2, r3
 8003a6a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a74:	2202      	movs	r2, #2
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	fa93 f2a3 	rbit	r2, r3
 8003a82:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003a86:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a88:	4b6e      	ldr	r3, [pc, #440]	; (8003c44 <HAL_RCC_OscConfig+0x91c>)
 8003a8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a8c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003a90:	2102      	movs	r1, #2
 8003a92:	6019      	str	r1, [r3, #0]
 8003a94:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	fa93 f1a3 	rbit	r1, r3
 8003a9e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003aa2:	6019      	str	r1, [r3, #0]
  return result;
 8003aa4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	fab3 f383 	clz	r3, r3
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	f003 031f 	and.w	r3, r3, #31
 8003aba:	2101      	movs	r1, #1
 8003abc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1b2      	bne.n	8003a2c <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ac6:	1d3b      	adds	r3, r7, #4
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 8157 	beq.w	8003d84 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003adc:	4b59      	ldr	r3, [pc, #356]	; (8003c44 <HAL_RCC_OscConfig+0x91c>)
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d112      	bne.n	8003b0e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ae8:	4b56      	ldr	r3, [pc, #344]	; (8003c44 <HAL_RCC_OscConfig+0x91c>)
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	4a55      	ldr	r2, [pc, #340]	; (8003c44 <HAL_RCC_OscConfig+0x91c>)
 8003aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003af2:	61d3      	str	r3, [r2, #28]
 8003af4:	4b53      	ldr	r3, [pc, #332]	; (8003c44 <HAL_RCC_OscConfig+0x91c>)
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003afc:	f107 030c 	add.w	r3, r7, #12
 8003b00:	601a      	str	r2, [r3, #0]
 8003b02:	f107 030c 	add.w	r3, r7, #12
 8003b06:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b0e:	4b4f      	ldr	r3, [pc, #316]	; (8003c4c <HAL_RCC_OscConfig+0x924>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d11a      	bne.n	8003b50 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b1a:	4b4c      	ldr	r3, [pc, #304]	; (8003c4c <HAL_RCC_OscConfig+0x924>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a4b      	ldr	r2, [pc, #300]	; (8003c4c <HAL_RCC_OscConfig+0x924>)
 8003b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b24:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b26:	f7fd feab 	bl	8001880 <HAL_GetTick>
 8003b2a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b2e:	e009      	b.n	8003b44 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b30:	f7fd fea6 	bl	8001880 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b64      	cmp	r3, #100	; 0x64
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e2ff      	b.n	8004144 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b44:	4b41      	ldr	r3, [pc, #260]	; (8003c4c <HAL_RCC_OscConfig+0x924>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0ef      	beq.n	8003b30 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b50:	1d3b      	adds	r3, r7, #4
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d106      	bne.n	8003b68 <HAL_RCC_OscConfig+0x840>
 8003b5a:	4b3a      	ldr	r3, [pc, #232]	; (8003c44 <HAL_RCC_OscConfig+0x91c>)
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	4a39      	ldr	r2, [pc, #228]	; (8003c44 <HAL_RCC_OscConfig+0x91c>)
 8003b60:	f043 0301 	orr.w	r3, r3, #1
 8003b64:	6213      	str	r3, [r2, #32]
 8003b66:	e02f      	b.n	8003bc8 <HAL_RCC_OscConfig+0x8a0>
 8003b68:	1d3b      	adds	r3, r7, #4
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10c      	bne.n	8003b8c <HAL_RCC_OscConfig+0x864>
 8003b72:	4b34      	ldr	r3, [pc, #208]	; (8003c44 <HAL_RCC_OscConfig+0x91c>)
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	4a33      	ldr	r2, [pc, #204]	; (8003c44 <HAL_RCC_OscConfig+0x91c>)
 8003b78:	f023 0301 	bic.w	r3, r3, #1
 8003b7c:	6213      	str	r3, [r2, #32]
 8003b7e:	4b31      	ldr	r3, [pc, #196]	; (8003c44 <HAL_RCC_OscConfig+0x91c>)
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	4a30      	ldr	r2, [pc, #192]	; (8003c44 <HAL_RCC_OscConfig+0x91c>)
 8003b84:	f023 0304 	bic.w	r3, r3, #4
 8003b88:	6213      	str	r3, [r2, #32]
 8003b8a:	e01d      	b.n	8003bc8 <HAL_RCC_OscConfig+0x8a0>
 8003b8c:	1d3b      	adds	r3, r7, #4
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	2b05      	cmp	r3, #5
 8003b94:	d10c      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x888>
 8003b96:	4b2b      	ldr	r3, [pc, #172]	; (8003c44 <HAL_RCC_OscConfig+0x91c>)
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	4a2a      	ldr	r2, [pc, #168]	; (8003c44 <HAL_RCC_OscConfig+0x91c>)
 8003b9c:	f043 0304 	orr.w	r3, r3, #4
 8003ba0:	6213      	str	r3, [r2, #32]
 8003ba2:	4b28      	ldr	r3, [pc, #160]	; (8003c44 <HAL_RCC_OscConfig+0x91c>)
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	4a27      	ldr	r2, [pc, #156]	; (8003c44 <HAL_RCC_OscConfig+0x91c>)
 8003ba8:	f043 0301 	orr.w	r3, r3, #1
 8003bac:	6213      	str	r3, [r2, #32]
 8003bae:	e00b      	b.n	8003bc8 <HAL_RCC_OscConfig+0x8a0>
 8003bb0:	4b24      	ldr	r3, [pc, #144]	; (8003c44 <HAL_RCC_OscConfig+0x91c>)
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	4a23      	ldr	r2, [pc, #140]	; (8003c44 <HAL_RCC_OscConfig+0x91c>)
 8003bb6:	f023 0301 	bic.w	r3, r3, #1
 8003bba:	6213      	str	r3, [r2, #32]
 8003bbc:	4b21      	ldr	r3, [pc, #132]	; (8003c44 <HAL_RCC_OscConfig+0x91c>)
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	4a20      	ldr	r2, [pc, #128]	; (8003c44 <HAL_RCC_OscConfig+0x91c>)
 8003bc2:	f023 0304 	bic.w	r3, r3, #4
 8003bc6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bc8:	1d3b      	adds	r3, r7, #4
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d06a      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bd2:	f7fd fe55 	bl	8001880 <HAL_GetTick>
 8003bd6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bda:	e00b      	b.n	8003bf4 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bdc:	f7fd fe50 	bl	8001880 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e2a7      	b.n	8004144 <HAL_RCC_OscConfig+0xe1c>
 8003bf4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	fa93 f2a3 	rbit	r2, r3
 8003c06:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003c10:	2202      	movs	r2, #2
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	fa93 f2a3 	rbit	r2, r3
 8003c1e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003c22:	601a      	str	r2, [r3, #0]
  return result;
 8003c24:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003c28:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c2a:	fab3 f383 	clz	r3, r3
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	095b      	lsrs	r3, r3, #5
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	f043 0302 	orr.w	r3, r3, #2
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d108      	bne.n	8003c50 <HAL_RCC_OscConfig+0x928>
 8003c3e:	4b01      	ldr	r3, [pc, #4]	; (8003c44 <HAL_RCC_OscConfig+0x91c>)
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	e013      	b.n	8003c6c <HAL_RCC_OscConfig+0x944>
 8003c44:	40021000 	.word	0x40021000
 8003c48:	10908120 	.word	0x10908120
 8003c4c:	40007000 	.word	0x40007000
 8003c50:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003c54:	2202      	movs	r2, #2
 8003c56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c58:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	fa93 f2a3 	rbit	r2, r3
 8003c62:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	4bc0      	ldr	r3, [pc, #768]	; (8003f6c <HAL_RCC_OscConfig+0xc44>)
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003c70:	2102      	movs	r1, #2
 8003c72:	6011      	str	r1, [r2, #0]
 8003c74:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003c78:	6812      	ldr	r2, [r2, #0]
 8003c7a:	fa92 f1a2 	rbit	r1, r2
 8003c7e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003c82:	6011      	str	r1, [r2, #0]
  return result;
 8003c84:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003c88:	6812      	ldr	r2, [r2, #0]
 8003c8a:	fab2 f282 	clz	r2, r2
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c94:	b2d2      	uxtb	r2, r2
 8003c96:	f002 021f 	and.w	r2, r2, #31
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d09a      	beq.n	8003bdc <HAL_RCC_OscConfig+0x8b4>
 8003ca6:	e063      	b.n	8003d70 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca8:	f7fd fdea 	bl	8001880 <HAL_GetTick>
 8003cac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cb0:	e00b      	b.n	8003cca <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cb2:	f7fd fde5 	bl	8001880 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e23c      	b.n	8004144 <HAL_RCC_OscConfig+0xe1c>
 8003cca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003cce:	2202      	movs	r2, #2
 8003cd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	fa93 f2a3 	rbit	r2, r3
 8003cdc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	fa93 f2a3 	rbit	r2, r3
 8003cf4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003cf8:	601a      	str	r2, [r3, #0]
  return result;
 8003cfa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003cfe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d00:	fab3 f383 	clz	r3, r3
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	095b      	lsrs	r3, r3, #5
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	f043 0302 	orr.w	r3, r3, #2
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d102      	bne.n	8003d1a <HAL_RCC_OscConfig+0x9f2>
 8003d14:	4b95      	ldr	r3, [pc, #596]	; (8003f6c <HAL_RCC_OscConfig+0xc44>)
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	e00d      	b.n	8003d36 <HAL_RCC_OscConfig+0xa0e>
 8003d1a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003d1e:	2202      	movs	r2, #2
 8003d20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d22:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	fa93 f2a3 	rbit	r2, r3
 8003d2c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	4b8e      	ldr	r3, [pc, #568]	; (8003f6c <HAL_RCC_OscConfig+0xc44>)
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003d3a:	2102      	movs	r1, #2
 8003d3c:	6011      	str	r1, [r2, #0]
 8003d3e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003d42:	6812      	ldr	r2, [r2, #0]
 8003d44:	fa92 f1a2 	rbit	r1, r2
 8003d48:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003d4c:	6011      	str	r1, [r2, #0]
  return result;
 8003d4e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003d52:	6812      	ldr	r2, [r2, #0]
 8003d54:	fab2 f282 	clz	r2, r2
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d5e:	b2d2      	uxtb	r2, r2
 8003d60:	f002 021f 	and.w	r2, r2, #31
 8003d64:	2101      	movs	r1, #1
 8003d66:	fa01 f202 	lsl.w	r2, r1, r2
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1a0      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d70:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d105      	bne.n	8003d84 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d78:	4b7c      	ldr	r3, [pc, #496]	; (8003f6c <HAL_RCC_OscConfig+0xc44>)
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	4a7b      	ldr	r2, [pc, #492]	; (8003f6c <HAL_RCC_OscConfig+0xc44>)
 8003d7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d82:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d84:	1d3b      	adds	r3, r7, #4
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 81d9 	beq.w	8004142 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d90:	4b76      	ldr	r3, [pc, #472]	; (8003f6c <HAL_RCC_OscConfig+0xc44>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f003 030c 	and.w	r3, r3, #12
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	f000 81a6 	beq.w	80040ea <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d9e:	1d3b      	adds	r3, r7, #4
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	f040 811e 	bne.w	8003fe6 <HAL_RCC_OscConfig+0xcbe>
 8003daa:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003dae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003db2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	fa93 f2a3 	rbit	r2, r3
 8003dbe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003dc2:	601a      	str	r2, [r3, #0]
  return result;
 8003dc4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003dc8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dca:	fab3 f383 	clz	r3, r3
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003dd4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	461a      	mov	r2, r3
 8003ddc:	2300      	movs	r3, #0
 8003dde:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de0:	f7fd fd4e 	bl	8001880 <HAL_GetTick>
 8003de4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003de8:	e009      	b.n	8003dfe <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dea:	f7fd fd49 	bl	8001880 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e1a2      	b.n	8004144 <HAL_RCC_OscConfig+0xe1c>
 8003dfe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003e02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e08:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	fa93 f2a3 	rbit	r2, r3
 8003e12:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003e16:	601a      	str	r2, [r3, #0]
  return result;
 8003e18:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003e1c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e1e:	fab3 f383 	clz	r3, r3
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	095b      	lsrs	r3, r3, #5
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	f043 0301 	orr.w	r3, r3, #1
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d102      	bne.n	8003e38 <HAL_RCC_OscConfig+0xb10>
 8003e32:	4b4e      	ldr	r3, [pc, #312]	; (8003f6c <HAL_RCC_OscConfig+0xc44>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	e01b      	b.n	8003e70 <HAL_RCC_OscConfig+0xb48>
 8003e38:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003e3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e42:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	fa93 f2a3 	rbit	r2, r3
 8003e4c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003e56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e5a:	601a      	str	r2, [r3, #0]
 8003e5c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	fa93 f2a3 	rbit	r2, r3
 8003e66:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	4b3f      	ldr	r3, [pc, #252]	; (8003f6c <HAL_RCC_OscConfig+0xc44>)
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003e74:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003e78:	6011      	str	r1, [r2, #0]
 8003e7a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003e7e:	6812      	ldr	r2, [r2, #0]
 8003e80:	fa92 f1a2 	rbit	r1, r2
 8003e84:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003e88:	6011      	str	r1, [r2, #0]
  return result;
 8003e8a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003e8e:	6812      	ldr	r2, [r2, #0]
 8003e90:	fab2 f282 	clz	r2, r2
 8003e94:	b2d2      	uxtb	r2, r2
 8003e96:	f042 0220 	orr.w	r2, r2, #32
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	f002 021f 	and.w	r2, r2, #31
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d19e      	bne.n	8003dea <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eac:	4b2f      	ldr	r3, [pc, #188]	; (8003f6c <HAL_RCC_OscConfig+0xc44>)
 8003eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb0:	f023 020f 	bic.w	r2, r3, #15
 8003eb4:	1d3b      	adds	r3, r7, #4
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	492c      	ldr	r1, [pc, #176]	; (8003f6c <HAL_RCC_OscConfig+0xc44>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003ec0:	4b2a      	ldr	r3, [pc, #168]	; (8003f6c <HAL_RCC_OscConfig+0xc44>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003ec8:	1d3b      	adds	r3, r7, #4
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6a19      	ldr	r1, [r3, #32]
 8003ece:	1d3b      	adds	r3, r7, #4
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	430b      	orrs	r3, r1
 8003ed6:	4925      	ldr	r1, [pc, #148]	; (8003f6c <HAL_RCC_OscConfig+0xc44>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	604b      	str	r3, [r1, #4]
 8003edc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003ee0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ee4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	fa93 f2a3 	rbit	r2, r3
 8003ef0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003ef4:	601a      	str	r2, [r3, #0]
  return result;
 8003ef6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003efa:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003efc:	fab3 f383 	clz	r3, r3
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f06:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	2301      	movs	r3, #1
 8003f10:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f12:	f7fd fcb5 	bl	8001880 <HAL_GetTick>
 8003f16:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f1a:	e009      	b.n	8003f30 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f1c:	f7fd fcb0 	bl	8001880 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e109      	b.n	8004144 <HAL_RCC_OscConfig+0xe1c>
 8003f30:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	fa93 f2a3 	rbit	r2, r3
 8003f44:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003f48:	601a      	str	r2, [r3, #0]
  return result;
 8003f4a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003f4e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f50:	fab3 f383 	clz	r3, r3
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	095b      	lsrs	r3, r3, #5
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	f043 0301 	orr.w	r3, r3, #1
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d105      	bne.n	8003f70 <HAL_RCC_OscConfig+0xc48>
 8003f64:	4b01      	ldr	r3, [pc, #4]	; (8003f6c <HAL_RCC_OscConfig+0xc44>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	e01e      	b.n	8003fa8 <HAL_RCC_OscConfig+0xc80>
 8003f6a:	bf00      	nop
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	fa93 f2a3 	rbit	r2, r3
 8003f84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003f8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	fa93 f2a3 	rbit	r2, r3
 8003f9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	4b6a      	ldr	r3, [pc, #424]	; (8004150 <HAL_RCC_OscConfig+0xe28>)
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003fac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003fb0:	6011      	str	r1, [r2, #0]
 8003fb2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003fb6:	6812      	ldr	r2, [r2, #0]
 8003fb8:	fa92 f1a2 	rbit	r1, r2
 8003fbc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003fc0:	6011      	str	r1, [r2, #0]
  return result;
 8003fc2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003fc6:	6812      	ldr	r2, [r2, #0]
 8003fc8:	fab2 f282 	clz	r2, r2
 8003fcc:	b2d2      	uxtb	r2, r2
 8003fce:	f042 0220 	orr.w	r2, r2, #32
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	f002 021f 	and.w	r2, r2, #31
 8003fd8:	2101      	movs	r1, #1
 8003fda:	fa01 f202 	lsl.w	r2, r1, r2
 8003fde:	4013      	ands	r3, r2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d09b      	beq.n	8003f1c <HAL_RCC_OscConfig+0xbf4>
 8003fe4:	e0ad      	b.n	8004142 <HAL_RCC_OscConfig+0xe1a>
 8003fe6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003fea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	fa93 f2a3 	rbit	r2, r3
 8003ffa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ffe:	601a      	str	r2, [r3, #0]
  return result;
 8004000:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004004:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004006:	fab3 f383 	clz	r3, r3
 800400a:	b2db      	uxtb	r3, r3
 800400c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004010:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	461a      	mov	r2, r3
 8004018:	2300      	movs	r3, #0
 800401a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401c:	f7fd fc30 	bl	8001880 <HAL_GetTick>
 8004020:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004024:	e009      	b.n	800403a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004026:	f7fd fc2b 	bl	8001880 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e084      	b.n	8004144 <HAL_RCC_OscConfig+0xe1c>
 800403a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800403e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004042:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004044:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	fa93 f2a3 	rbit	r2, r3
 800404e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004052:	601a      	str	r2, [r3, #0]
  return result;
 8004054:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004058:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800405a:	fab3 f383 	clz	r3, r3
 800405e:	b2db      	uxtb	r3, r3
 8004060:	095b      	lsrs	r3, r3, #5
 8004062:	b2db      	uxtb	r3, r3
 8004064:	f043 0301 	orr.w	r3, r3, #1
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b01      	cmp	r3, #1
 800406c:	d102      	bne.n	8004074 <HAL_RCC_OscConfig+0xd4c>
 800406e:	4b38      	ldr	r3, [pc, #224]	; (8004150 <HAL_RCC_OscConfig+0xe28>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	e01b      	b.n	80040ac <HAL_RCC_OscConfig+0xd84>
 8004074:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004078:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800407c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	fa93 f2a3 	rbit	r2, r3
 8004088:	f107 0320 	add.w	r3, r7, #32
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	f107 031c 	add.w	r3, r7, #28
 8004092:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	f107 031c 	add.w	r3, r7, #28
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	fa93 f2a3 	rbit	r2, r3
 80040a2:	f107 0318 	add.w	r3, r7, #24
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	4b29      	ldr	r3, [pc, #164]	; (8004150 <HAL_RCC_OscConfig+0xe28>)
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	f107 0214 	add.w	r2, r7, #20
 80040b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80040b4:	6011      	str	r1, [r2, #0]
 80040b6:	f107 0214 	add.w	r2, r7, #20
 80040ba:	6812      	ldr	r2, [r2, #0]
 80040bc:	fa92 f1a2 	rbit	r1, r2
 80040c0:	f107 0210 	add.w	r2, r7, #16
 80040c4:	6011      	str	r1, [r2, #0]
  return result;
 80040c6:	f107 0210 	add.w	r2, r7, #16
 80040ca:	6812      	ldr	r2, [r2, #0]
 80040cc:	fab2 f282 	clz	r2, r2
 80040d0:	b2d2      	uxtb	r2, r2
 80040d2:	f042 0220 	orr.w	r2, r2, #32
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	f002 021f 	and.w	r2, r2, #31
 80040dc:	2101      	movs	r1, #1
 80040de:	fa01 f202 	lsl.w	r2, r1, r2
 80040e2:	4013      	ands	r3, r2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d19e      	bne.n	8004026 <HAL_RCC_OscConfig+0xcfe>
 80040e8:	e02b      	b.n	8004142 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040ea:	1d3b      	adds	r3, r7, #4
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d101      	bne.n	80040f8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e025      	b.n	8004144 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040f8:	4b15      	ldr	r3, [pc, #84]	; (8004150 <HAL_RCC_OscConfig+0xe28>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004100:	4b13      	ldr	r3, [pc, #76]	; (8004150 <HAL_RCC_OscConfig+0xe28>)
 8004102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004104:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004108:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800410c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004110:	1d3b      	adds	r3, r7, #4
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	429a      	cmp	r2, r3
 8004118:	d111      	bne.n	800413e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800411a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800411e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004122:	1d3b      	adds	r3, r7, #4
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004128:	429a      	cmp	r2, r3
 800412a:	d108      	bne.n	800413e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800412c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004130:	f003 020f 	and.w	r2, r3, #15
 8004134:	1d3b      	adds	r3, r7, #4
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800413a:	429a      	cmp	r2, r3
 800413c:	d001      	beq.n	8004142 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e000      	b.n	8004144 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	40021000 	.word	0x40021000

08004154 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b09e      	sub	sp, #120	; 0x78
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800415e:	2300      	movs	r3, #0
 8004160:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e162      	b.n	8004432 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800416c:	4b90      	ldr	r3, [pc, #576]	; (80043b0 <HAL_RCC_ClockConfig+0x25c>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	429a      	cmp	r2, r3
 8004178:	d910      	bls.n	800419c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800417a:	4b8d      	ldr	r3, [pc, #564]	; (80043b0 <HAL_RCC_ClockConfig+0x25c>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f023 0207 	bic.w	r2, r3, #7
 8004182:	498b      	ldr	r1, [pc, #556]	; (80043b0 <HAL_RCC_ClockConfig+0x25c>)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	4313      	orrs	r3, r2
 8004188:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800418a:	4b89      	ldr	r3, [pc, #548]	; (80043b0 <HAL_RCC_ClockConfig+0x25c>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	429a      	cmp	r2, r3
 8004196:	d001      	beq.n	800419c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e14a      	b.n	8004432 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d008      	beq.n	80041ba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a8:	4b82      	ldr	r3, [pc, #520]	; (80043b4 <HAL_RCC_ClockConfig+0x260>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	497f      	ldr	r1, [pc, #508]	; (80043b4 <HAL_RCC_ClockConfig+0x260>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 80dc 	beq.w	8004380 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d13c      	bne.n	800424a <HAL_RCC_ClockConfig+0xf6>
 80041d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041d8:	fa93 f3a3 	rbit	r3, r3
 80041dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80041de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041e0:	fab3 f383 	clz	r3, r3
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	095b      	lsrs	r3, r3, #5
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	f043 0301 	orr.w	r3, r3, #1
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d102      	bne.n	80041fa <HAL_RCC_ClockConfig+0xa6>
 80041f4:	4b6f      	ldr	r3, [pc, #444]	; (80043b4 <HAL_RCC_ClockConfig+0x260>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	e00f      	b.n	800421a <HAL_RCC_ClockConfig+0xc6>
 80041fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004200:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004202:	fa93 f3a3 	rbit	r3, r3
 8004206:	667b      	str	r3, [r7, #100]	; 0x64
 8004208:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800420c:	663b      	str	r3, [r7, #96]	; 0x60
 800420e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004210:	fa93 f3a3 	rbit	r3, r3
 8004214:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004216:	4b67      	ldr	r3, [pc, #412]	; (80043b4 <HAL_RCC_ClockConfig+0x260>)
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800421e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004220:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004222:	fa92 f2a2 	rbit	r2, r2
 8004226:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004228:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800422a:	fab2 f282 	clz	r2, r2
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	f042 0220 	orr.w	r2, r2, #32
 8004234:	b2d2      	uxtb	r2, r2
 8004236:	f002 021f 	and.w	r2, r2, #31
 800423a:	2101      	movs	r1, #1
 800423c:	fa01 f202 	lsl.w	r2, r1, r2
 8004240:	4013      	ands	r3, r2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d17b      	bne.n	800433e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e0f3      	b.n	8004432 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	2b02      	cmp	r3, #2
 8004250:	d13c      	bne.n	80042cc <HAL_RCC_ClockConfig+0x178>
 8004252:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004256:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800425a:	fa93 f3a3 	rbit	r3, r3
 800425e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004262:	fab3 f383 	clz	r3, r3
 8004266:	b2db      	uxtb	r3, r3
 8004268:	095b      	lsrs	r3, r3, #5
 800426a:	b2db      	uxtb	r3, r3
 800426c:	f043 0301 	orr.w	r3, r3, #1
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b01      	cmp	r3, #1
 8004274:	d102      	bne.n	800427c <HAL_RCC_ClockConfig+0x128>
 8004276:	4b4f      	ldr	r3, [pc, #316]	; (80043b4 <HAL_RCC_ClockConfig+0x260>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	e00f      	b.n	800429c <HAL_RCC_ClockConfig+0x148>
 800427c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004280:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004284:	fa93 f3a3 	rbit	r3, r3
 8004288:	647b      	str	r3, [r7, #68]	; 0x44
 800428a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800428e:	643b      	str	r3, [r7, #64]	; 0x40
 8004290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004292:	fa93 f3a3 	rbit	r3, r3
 8004296:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004298:	4b46      	ldr	r3, [pc, #280]	; (80043b4 <HAL_RCC_ClockConfig+0x260>)
 800429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042a0:	63ba      	str	r2, [r7, #56]	; 0x38
 80042a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042a4:	fa92 f2a2 	rbit	r2, r2
 80042a8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80042aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042ac:	fab2 f282 	clz	r2, r2
 80042b0:	b2d2      	uxtb	r2, r2
 80042b2:	f042 0220 	orr.w	r2, r2, #32
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	f002 021f 	and.w	r2, r2, #31
 80042bc:	2101      	movs	r1, #1
 80042be:	fa01 f202 	lsl.w	r2, r1, r2
 80042c2:	4013      	ands	r3, r2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d13a      	bne.n	800433e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e0b2      	b.n	8004432 <HAL_RCC_ClockConfig+0x2de>
 80042cc:	2302      	movs	r3, #2
 80042ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d2:	fa93 f3a3 	rbit	r3, r3
 80042d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80042d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042da:	fab3 f383 	clz	r3, r3
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	095b      	lsrs	r3, r3, #5
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	f043 0301 	orr.w	r3, r3, #1
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d102      	bne.n	80042f4 <HAL_RCC_ClockConfig+0x1a0>
 80042ee:	4b31      	ldr	r3, [pc, #196]	; (80043b4 <HAL_RCC_ClockConfig+0x260>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	e00d      	b.n	8004310 <HAL_RCC_ClockConfig+0x1bc>
 80042f4:	2302      	movs	r3, #2
 80042f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fa:	fa93 f3a3 	rbit	r3, r3
 80042fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004300:	2302      	movs	r3, #2
 8004302:	623b      	str	r3, [r7, #32]
 8004304:	6a3b      	ldr	r3, [r7, #32]
 8004306:	fa93 f3a3 	rbit	r3, r3
 800430a:	61fb      	str	r3, [r7, #28]
 800430c:	4b29      	ldr	r3, [pc, #164]	; (80043b4 <HAL_RCC_ClockConfig+0x260>)
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	2202      	movs	r2, #2
 8004312:	61ba      	str	r2, [r7, #24]
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	fa92 f2a2 	rbit	r2, r2
 800431a:	617a      	str	r2, [r7, #20]
  return result;
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	fab2 f282 	clz	r2, r2
 8004322:	b2d2      	uxtb	r2, r2
 8004324:	f042 0220 	orr.w	r2, r2, #32
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	f002 021f 	and.w	r2, r2, #31
 800432e:	2101      	movs	r1, #1
 8004330:	fa01 f202 	lsl.w	r2, r1, r2
 8004334:	4013      	ands	r3, r2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e079      	b.n	8004432 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800433e:	4b1d      	ldr	r3, [pc, #116]	; (80043b4 <HAL_RCC_ClockConfig+0x260>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f023 0203 	bic.w	r2, r3, #3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	491a      	ldr	r1, [pc, #104]	; (80043b4 <HAL_RCC_ClockConfig+0x260>)
 800434c:	4313      	orrs	r3, r2
 800434e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004350:	f7fd fa96 	bl	8001880 <HAL_GetTick>
 8004354:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004356:	e00a      	b.n	800436e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004358:	f7fd fa92 	bl	8001880 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	f241 3288 	movw	r2, #5000	; 0x1388
 8004366:	4293      	cmp	r3, r2
 8004368:	d901      	bls.n	800436e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e061      	b.n	8004432 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800436e:	4b11      	ldr	r3, [pc, #68]	; (80043b4 <HAL_RCC_ClockConfig+0x260>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f003 020c 	and.w	r2, r3, #12
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	429a      	cmp	r2, r3
 800437e:	d1eb      	bne.n	8004358 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004380:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <HAL_RCC_ClockConfig+0x25c>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0307 	and.w	r3, r3, #7
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d214      	bcs.n	80043b8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800438e:	4b08      	ldr	r3, [pc, #32]	; (80043b0 <HAL_RCC_ClockConfig+0x25c>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f023 0207 	bic.w	r2, r3, #7
 8004396:	4906      	ldr	r1, [pc, #24]	; (80043b0 <HAL_RCC_ClockConfig+0x25c>)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	4313      	orrs	r3, r2
 800439c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800439e:	4b04      	ldr	r3, [pc, #16]	; (80043b0 <HAL_RCC_ClockConfig+0x25c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0307 	and.w	r3, r3, #7
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d005      	beq.n	80043b8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e040      	b.n	8004432 <HAL_RCC_ClockConfig+0x2de>
 80043b0:	40022000 	.word	0x40022000
 80043b4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0304 	and.w	r3, r3, #4
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d008      	beq.n	80043d6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043c4:	4b1d      	ldr	r3, [pc, #116]	; (800443c <HAL_RCC_ClockConfig+0x2e8>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	491a      	ldr	r1, [pc, #104]	; (800443c <HAL_RCC_ClockConfig+0x2e8>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0308 	and.w	r3, r3, #8
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d009      	beq.n	80043f6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043e2:	4b16      	ldr	r3, [pc, #88]	; (800443c <HAL_RCC_ClockConfig+0x2e8>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	4912      	ldr	r1, [pc, #72]	; (800443c <HAL_RCC_ClockConfig+0x2e8>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80043f6:	f000 f829 	bl	800444c <HAL_RCC_GetSysClockFreq>
 80043fa:	4601      	mov	r1, r0
 80043fc:	4b0f      	ldr	r3, [pc, #60]	; (800443c <HAL_RCC_ClockConfig+0x2e8>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004404:	22f0      	movs	r2, #240	; 0xf0
 8004406:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	fa92 f2a2 	rbit	r2, r2
 800440e:	60fa      	str	r2, [r7, #12]
  return result;
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	fab2 f282 	clz	r2, r2
 8004416:	b2d2      	uxtb	r2, r2
 8004418:	40d3      	lsrs	r3, r2
 800441a:	4a09      	ldr	r2, [pc, #36]	; (8004440 <HAL_RCC_ClockConfig+0x2ec>)
 800441c:	5cd3      	ldrb	r3, [r2, r3]
 800441e:	fa21 f303 	lsr.w	r3, r1, r3
 8004422:	4a08      	ldr	r2, [pc, #32]	; (8004444 <HAL_RCC_ClockConfig+0x2f0>)
 8004424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004426:	4b08      	ldr	r3, [pc, #32]	; (8004448 <HAL_RCC_ClockConfig+0x2f4>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4618      	mov	r0, r3
 800442c:	f7fd f9e4 	bl	80017f8 <HAL_InitTick>
  
  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3778      	adds	r7, #120	; 0x78
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	40021000 	.word	0x40021000
 8004440:	08006538 	.word	0x08006538
 8004444:	20000010 	.word	0x20000010
 8004448:	20000014 	.word	0x20000014

0800444c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800444c:	b480      	push	{r7}
 800444e:	b08b      	sub	sp, #44	; 0x2c
 8004450:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004452:	2300      	movs	r3, #0
 8004454:	61fb      	str	r3, [r7, #28]
 8004456:	2300      	movs	r3, #0
 8004458:	61bb      	str	r3, [r7, #24]
 800445a:	2300      	movs	r3, #0
 800445c:	627b      	str	r3, [r7, #36]	; 0x24
 800445e:	2300      	movs	r3, #0
 8004460:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004462:	2300      	movs	r3, #0
 8004464:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004466:	4b2a      	ldr	r3, [pc, #168]	; (8004510 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	f003 030c 	and.w	r3, r3, #12
 8004472:	2b04      	cmp	r3, #4
 8004474:	d002      	beq.n	800447c <HAL_RCC_GetSysClockFreq+0x30>
 8004476:	2b08      	cmp	r3, #8
 8004478:	d003      	beq.n	8004482 <HAL_RCC_GetSysClockFreq+0x36>
 800447a:	e03f      	b.n	80044fc <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800447c:	4b25      	ldr	r3, [pc, #148]	; (8004514 <HAL_RCC_GetSysClockFreq+0xc8>)
 800447e:	623b      	str	r3, [r7, #32]
      break;
 8004480:	e03f      	b.n	8004502 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004488:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800448c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	fa92 f2a2 	rbit	r2, r2
 8004494:	607a      	str	r2, [r7, #4]
  return result;
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	fab2 f282 	clz	r2, r2
 800449c:	b2d2      	uxtb	r2, r2
 800449e:	40d3      	lsrs	r3, r2
 80044a0:	4a1d      	ldr	r2, [pc, #116]	; (8004518 <HAL_RCC_GetSysClockFreq+0xcc>)
 80044a2:	5cd3      	ldrb	r3, [r2, r3]
 80044a4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80044a6:	4b1a      	ldr	r3, [pc, #104]	; (8004510 <HAL_RCC_GetSysClockFreq+0xc4>)
 80044a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044aa:	f003 030f 	and.w	r3, r3, #15
 80044ae:	220f      	movs	r2, #15
 80044b0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	fa92 f2a2 	rbit	r2, r2
 80044b8:	60fa      	str	r2, [r7, #12]
  return result;
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	fab2 f282 	clz	r2, r2
 80044c0:	b2d2      	uxtb	r2, r2
 80044c2:	40d3      	lsrs	r3, r2
 80044c4:	4a15      	ldr	r2, [pc, #84]	; (800451c <HAL_RCC_GetSysClockFreq+0xd0>)
 80044c6:	5cd3      	ldrb	r3, [r2, r3]
 80044c8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d008      	beq.n	80044e6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80044d4:	4a0f      	ldr	r2, [pc, #60]	; (8004514 <HAL_RCC_GetSysClockFreq+0xc8>)
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	fb02 f303 	mul.w	r3, r2, r3
 80044e2:	627b      	str	r3, [r7, #36]	; 0x24
 80044e4:	e007      	b.n	80044f6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80044e6:	4a0b      	ldr	r2, [pc, #44]	; (8004514 <HAL_RCC_GetSysClockFreq+0xc8>)
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	fb02 f303 	mul.w	r3, r2, r3
 80044f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	623b      	str	r3, [r7, #32]
      break;
 80044fa:	e002      	b.n	8004502 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044fc:	4b05      	ldr	r3, [pc, #20]	; (8004514 <HAL_RCC_GetSysClockFreq+0xc8>)
 80044fe:	623b      	str	r3, [r7, #32]
      break;
 8004500:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004502:	6a3b      	ldr	r3, [r7, #32]
}
 8004504:	4618      	mov	r0, r3
 8004506:	372c      	adds	r7, #44	; 0x2c
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr
 8004510:	40021000 	.word	0x40021000
 8004514:	007a1200 	.word	0x007a1200
 8004518:	08006550 	.word	0x08006550
 800451c:	08006560 	.word	0x08006560

08004520 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004524:	4b03      	ldr	r3, [pc, #12]	; (8004534 <HAL_RCC_GetHCLKFreq+0x14>)
 8004526:	681b      	ldr	r3, [r3, #0]
}
 8004528:	4618      	mov	r0, r3
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	20000010 	.word	0x20000010

08004538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800453e:	f7ff ffef 	bl	8004520 <HAL_RCC_GetHCLKFreq>
 8004542:	4601      	mov	r1, r0
 8004544:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800454c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004550:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	fa92 f2a2 	rbit	r2, r2
 8004558:	603a      	str	r2, [r7, #0]
  return result;
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	fab2 f282 	clz	r2, r2
 8004560:	b2d2      	uxtb	r2, r2
 8004562:	40d3      	lsrs	r3, r2
 8004564:	4a04      	ldr	r2, [pc, #16]	; (8004578 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004566:	5cd3      	ldrb	r3, [r2, r3]
 8004568:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800456c:	4618      	mov	r0, r3
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40021000 	.word	0x40021000
 8004578:	08006548 	.word	0x08006548

0800457c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004582:	f7ff ffcd 	bl	8004520 <HAL_RCC_GetHCLKFreq>
 8004586:	4601      	mov	r1, r0
 8004588:	4b0b      	ldr	r3, [pc, #44]	; (80045b8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004590:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004594:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	fa92 f2a2 	rbit	r2, r2
 800459c:	603a      	str	r2, [r7, #0]
  return result;
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	fab2 f282 	clz	r2, r2
 80045a4:	b2d2      	uxtb	r2, r2
 80045a6:	40d3      	lsrs	r3, r2
 80045a8:	4a04      	ldr	r2, [pc, #16]	; (80045bc <HAL_RCC_GetPCLK2Freq+0x40>)
 80045aa:	5cd3      	ldrb	r3, [r2, r3]
 80045ac:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80045b0:	4618      	mov	r0, r3
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40021000 	.word	0x40021000
 80045bc:	08006548 	.word	0x08006548

080045c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b092      	sub	sp, #72	; 0x48
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045c8:	2300      	movs	r3, #0
 80045ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80045d0:	2300      	movs	r3, #0
 80045d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 80d4 	beq.w	800478c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045e4:	4b4e      	ldr	r3, [pc, #312]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10e      	bne.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045f0:	4b4b      	ldr	r3, [pc, #300]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	4a4a      	ldr	r2, [pc, #296]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045fa:	61d3      	str	r3, [r2, #28]
 80045fc:	4b48      	ldr	r3, [pc, #288]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045fe:	69db      	ldr	r3, [r3, #28]
 8004600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004604:	60bb      	str	r3, [r7, #8]
 8004606:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004608:	2301      	movs	r3, #1
 800460a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800460e:	4b45      	ldr	r3, [pc, #276]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004616:	2b00      	cmp	r3, #0
 8004618:	d118      	bne.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800461a:	4b42      	ldr	r3, [pc, #264]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a41      	ldr	r2, [pc, #260]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004624:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004626:	f7fd f92b 	bl	8001880 <HAL_GetTick>
 800462a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800462c:	e008      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800462e:	f7fd f927 	bl	8001880 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b64      	cmp	r3, #100	; 0x64
 800463a:	d901      	bls.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e1d6      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004640:	4b38      	ldr	r3, [pc, #224]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0f0      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800464c:	4b34      	ldr	r3, [pc, #208]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004654:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 8084 	beq.w	8004766 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004666:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004668:	429a      	cmp	r2, r3
 800466a:	d07c      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800466c:	4b2c      	ldr	r3, [pc, #176]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004674:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004676:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800467a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800467c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467e:	fa93 f3a3 	rbit	r3, r3
 8004682:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004686:	fab3 f383 	clz	r3, r3
 800468a:	b2db      	uxtb	r3, r3
 800468c:	461a      	mov	r2, r3
 800468e:	4b26      	ldr	r3, [pc, #152]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004690:	4413      	add	r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	461a      	mov	r2, r3
 8004696:	2301      	movs	r3, #1
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800469e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a2:	fa93 f3a3 	rbit	r3, r3
 80046a6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80046a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046aa:	fab3 f383 	clz	r3, r3
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	461a      	mov	r2, r3
 80046b2:	4b1d      	ldr	r3, [pc, #116]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046b4:	4413      	add	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	461a      	mov	r2, r3
 80046ba:	2300      	movs	r3, #0
 80046bc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80046be:	4a18      	ldr	r2, [pc, #96]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d04b      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ce:	f7fd f8d7 	bl	8001880 <HAL_GetTick>
 80046d2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d4:	e00a      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046d6:	f7fd f8d3 	bl	8001880 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d901      	bls.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e180      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80046ec:	2302      	movs	r3, #2
 80046ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f2:	fa93 f3a3 	rbit	r3, r3
 80046f6:	627b      	str	r3, [r7, #36]	; 0x24
 80046f8:	2302      	movs	r3, #2
 80046fa:	623b      	str	r3, [r7, #32]
 80046fc:	6a3b      	ldr	r3, [r7, #32]
 80046fe:	fa93 f3a3 	rbit	r3, r3
 8004702:	61fb      	str	r3, [r7, #28]
  return result;
 8004704:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004706:	fab3 f383 	clz	r3, r3
 800470a:	b2db      	uxtb	r3, r3
 800470c:	095b      	lsrs	r3, r3, #5
 800470e:	b2db      	uxtb	r3, r3
 8004710:	f043 0302 	orr.w	r3, r3, #2
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d108      	bne.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800471a:	4b01      	ldr	r3, [pc, #4]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	e00d      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004720:	40021000 	.word	0x40021000
 8004724:	40007000 	.word	0x40007000
 8004728:	10908100 	.word	0x10908100
 800472c:	2302      	movs	r3, #2
 800472e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	fa93 f3a3 	rbit	r3, r3
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	4ba0      	ldr	r3, [pc, #640]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473c:	2202      	movs	r2, #2
 800473e:	613a      	str	r2, [r7, #16]
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	fa92 f2a2 	rbit	r2, r2
 8004746:	60fa      	str	r2, [r7, #12]
  return result;
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	fab2 f282 	clz	r2, r2
 800474e:	b2d2      	uxtb	r2, r2
 8004750:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004754:	b2d2      	uxtb	r2, r2
 8004756:	f002 021f 	and.w	r2, r2, #31
 800475a:	2101      	movs	r1, #1
 800475c:	fa01 f202 	lsl.w	r2, r1, r2
 8004760:	4013      	ands	r3, r2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d0b7      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004766:	4b95      	ldr	r3, [pc, #596]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	4992      	ldr	r1, [pc, #584]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004774:	4313      	orrs	r3, r2
 8004776:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004778:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800477c:	2b01      	cmp	r3, #1
 800477e:	d105      	bne.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004780:	4b8e      	ldr	r3, [pc, #568]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004782:	69db      	ldr	r3, [r3, #28]
 8004784:	4a8d      	ldr	r2, [pc, #564]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004786:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800478a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b00      	cmp	r3, #0
 8004796:	d008      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004798:	4b88      	ldr	r3, [pc, #544]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800479a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479c:	f023 0203 	bic.w	r2, r3, #3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	4985      	ldr	r1, [pc, #532]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d008      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047b6:	4b81      	ldr	r3, [pc, #516]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80047b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	497e      	ldr	r1, [pc, #504]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0304 	and.w	r3, r3, #4
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d008      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047d4:	4b79      	ldr	r3, [pc, #484]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80047d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	4976      	ldr	r1, [pc, #472]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0320 	and.w	r3, r3, #32
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d008      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047f2:	4b72      	ldr	r3, [pc, #456]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80047f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f6:	f023 0210 	bic.w	r2, r3, #16
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	496f      	ldr	r1, [pc, #444]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004800:	4313      	orrs	r3, r2
 8004802:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d008      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004810:	4b6a      	ldr	r3, [pc, #424]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481c:	4967      	ldr	r1, [pc, #412]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800481e:	4313      	orrs	r3, r2
 8004820:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482a:	2b00      	cmp	r3, #0
 800482c:	d008      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800482e:	4b63      	ldr	r3, [pc, #396]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004832:	f023 0220 	bic.w	r2, r3, #32
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	4960      	ldr	r1, [pc, #384]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800483c:	4313      	orrs	r3, r2
 800483e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d008      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800484c:	4b5b      	ldr	r3, [pc, #364]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800484e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004850:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004858:	4958      	ldr	r1, [pc, #352]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800485a:	4313      	orrs	r3, r2
 800485c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0308 	and.w	r3, r3, #8
 8004866:	2b00      	cmp	r3, #0
 8004868:	d008      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800486a:	4b54      	ldr	r3, [pc, #336]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800486c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	4951      	ldr	r1, [pc, #324]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004878:	4313      	orrs	r3, r2
 800487a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0310 	and.w	r3, r3, #16
 8004884:	2b00      	cmp	r3, #0
 8004886:	d008      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004888:	4b4c      	ldr	r3, [pc, #304]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800488a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	4949      	ldr	r1, [pc, #292]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004896:	4313      	orrs	r3, r2
 8004898:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d008      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80048a6:	4b45      	ldr	r3, [pc, #276]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b2:	4942      	ldr	r1, [pc, #264]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d008      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80048c4:	4b3d      	ldr	r3, [pc, #244]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80048c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d0:	493a      	ldr	r1, [pc, #232]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d008      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80048e2:	4b36      	ldr	r3, [pc, #216]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80048e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ee:	4933      	ldr	r1, [pc, #204]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d008      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004900:	4b2e      	ldr	r3, [pc, #184]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004904:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490c:	492b      	ldr	r1, [pc, #172]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800490e:	4313      	orrs	r3, r2
 8004910:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d008      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800491e:	4b27      	ldr	r3, [pc, #156]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004922:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	4924      	ldr	r1, [pc, #144]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800492c:	4313      	orrs	r3, r2
 800492e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d008      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800493c:	4b1f      	ldr	r3, [pc, #124]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800493e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004940:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004948:	491c      	ldr	r1, [pc, #112]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800494a:	4313      	orrs	r3, r2
 800494c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d008      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800495a:	4b18      	ldr	r3, [pc, #96]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800495c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004966:	4915      	ldr	r1, [pc, #84]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004968:	4313      	orrs	r3, r2
 800496a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d008      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004978:	4b10      	ldr	r3, [pc, #64]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800497a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004984:	490d      	ldr	r1, [pc, #52]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004986:	4313      	orrs	r3, r2
 8004988:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d008      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004996:	4b09      	ldr	r3, [pc, #36]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049a2:	4906      	ldr	r1, [pc, #24]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00c      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80049b4:	4b01      	ldr	r3, [pc, #4]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80049b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b8:	e002      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80049ba:	bf00      	nop
 80049bc:	40021000 	.word	0x40021000
 80049c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c8:	490b      	ldr	r1, [pc, #44]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d008      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80049da:	4b07      	ldr	r3, [pc, #28]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049de:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049e6:	4904      	ldr	r1, [pc, #16]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3748      	adds	r7, #72	; 0x48
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	40021000 	.word	0x40021000

080049fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e049      	b.n	8004aa2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d106      	bne.n	8004a28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7fc fdc6 	bl	80015b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	3304      	adds	r3, #4
 8004a38:	4619      	mov	r1, r3
 8004a3a:	4610      	mov	r0, r2
 8004a3c:	f000 f9ee 	bl	8004e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
	...

08004aac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d001      	beq.n	8004ac4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e04f      	b.n	8004b64 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68da      	ldr	r2, [r3, #12]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0201 	orr.w	r2, r2, #1
 8004ada:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a23      	ldr	r2, [pc, #140]	; (8004b70 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d01d      	beq.n	8004b22 <HAL_TIM_Base_Start_IT+0x76>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aee:	d018      	beq.n	8004b22 <HAL_TIM_Base_Start_IT+0x76>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a1f      	ldr	r2, [pc, #124]	; (8004b74 <HAL_TIM_Base_Start_IT+0xc8>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d013      	beq.n	8004b22 <HAL_TIM_Base_Start_IT+0x76>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a1e      	ldr	r2, [pc, #120]	; (8004b78 <HAL_TIM_Base_Start_IT+0xcc>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d00e      	beq.n	8004b22 <HAL_TIM_Base_Start_IT+0x76>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a1c      	ldr	r2, [pc, #112]	; (8004b7c <HAL_TIM_Base_Start_IT+0xd0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d009      	beq.n	8004b22 <HAL_TIM_Base_Start_IT+0x76>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a1b      	ldr	r2, [pc, #108]	; (8004b80 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d004      	beq.n	8004b22 <HAL_TIM_Base_Start_IT+0x76>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a19      	ldr	r2, [pc, #100]	; (8004b84 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d115      	bne.n	8004b4e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	689a      	ldr	r2, [r3, #8]
 8004b28:	4b17      	ldr	r3, [pc, #92]	; (8004b88 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2b06      	cmp	r3, #6
 8004b32:	d015      	beq.n	8004b60 <HAL_TIM_Base_Start_IT+0xb4>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b3a:	d011      	beq.n	8004b60 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f042 0201 	orr.w	r2, r2, #1
 8004b4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b4c:	e008      	b.n	8004b60 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f042 0201 	orr.w	r2, r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]
 8004b5e:	e000      	b.n	8004b62 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b60:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	40012c00 	.word	0x40012c00
 8004b74:	40000400 	.word	0x40000400
 8004b78:	40000800 	.word	0x40000800
 8004b7c:	40013400 	.word	0x40013400
 8004b80:	40014000 	.word	0x40014000
 8004b84:	40015000 	.word	0x40015000
 8004b88:	00010007 	.word	0x00010007

08004b8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d122      	bne.n	8004be8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d11b      	bne.n	8004be8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f06f 0202 	mvn.w	r2, #2
 8004bb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	f003 0303 	and.w	r3, r3, #3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f905 	bl	8004dde <HAL_TIM_IC_CaptureCallback>
 8004bd4:	e005      	b.n	8004be2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f8f7 	bl	8004dca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 f908 	bl	8004df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	f003 0304 	and.w	r3, r3, #4
 8004bf2:	2b04      	cmp	r3, #4
 8004bf4:	d122      	bne.n	8004c3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b04      	cmp	r3, #4
 8004c02:	d11b      	bne.n	8004c3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f06f 0204 	mvn.w	r2, #4
 8004c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2202      	movs	r2, #2
 8004c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f8db 	bl	8004dde <HAL_TIM_IC_CaptureCallback>
 8004c28:	e005      	b.n	8004c36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f8cd 	bl	8004dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f8de 	bl	8004df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	f003 0308 	and.w	r3, r3, #8
 8004c46:	2b08      	cmp	r3, #8
 8004c48:	d122      	bne.n	8004c90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f003 0308 	and.w	r3, r3, #8
 8004c54:	2b08      	cmp	r3, #8
 8004c56:	d11b      	bne.n	8004c90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f06f 0208 	mvn.w	r2, #8
 8004c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2204      	movs	r2, #4
 8004c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	f003 0303 	and.w	r3, r3, #3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d003      	beq.n	8004c7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f8b1 	bl	8004dde <HAL_TIM_IC_CaptureCallback>
 8004c7c:	e005      	b.n	8004c8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f8a3 	bl	8004dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 f8b4 	bl	8004df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	f003 0310 	and.w	r3, r3, #16
 8004c9a:	2b10      	cmp	r3, #16
 8004c9c:	d122      	bne.n	8004ce4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	f003 0310 	and.w	r3, r3, #16
 8004ca8:	2b10      	cmp	r3, #16
 8004caa:	d11b      	bne.n	8004ce4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f06f 0210 	mvn.w	r2, #16
 8004cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2208      	movs	r2, #8
 8004cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f887 	bl	8004dde <HAL_TIM_IC_CaptureCallback>
 8004cd0:	e005      	b.n	8004cde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f879 	bl	8004dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 f88a 	bl	8004df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d10e      	bne.n	8004d10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d107      	bne.n	8004d10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f06f 0201 	mvn.w	r2, #1
 8004d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7fb feec 	bl	8000ae8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d1a:	2b80      	cmp	r3, #128	; 0x80
 8004d1c:	d10e      	bne.n	8004d3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d28:	2b80      	cmp	r3, #128	; 0x80
 8004d2a:	d107      	bne.n	8004d3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f918 	bl	8004f6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d4a:	d10e      	bne.n	8004d6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d56:	2b80      	cmp	r3, #128	; 0x80
 8004d58:	d107      	bne.n	8004d6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 f90b 	bl	8004f80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d74:	2b40      	cmp	r3, #64	; 0x40
 8004d76:	d10e      	bne.n	8004d96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d82:	2b40      	cmp	r3, #64	; 0x40
 8004d84:	d107      	bne.n	8004d96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 f838 	bl	8004e06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	f003 0320 	and.w	r3, r3, #32
 8004da0:	2b20      	cmp	r3, #32
 8004da2:	d10e      	bne.n	8004dc2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	f003 0320 	and.w	r3, r3, #32
 8004dae:	2b20      	cmp	r3, #32
 8004db0:	d107      	bne.n	8004dc2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f06f 0220 	mvn.w	r2, #32
 8004dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f8cb 	bl	8004f58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dc2:	bf00      	nop
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b083      	sub	sp, #12
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dd2:	bf00      	nop
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b083      	sub	sp, #12
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004de6:	bf00      	nop
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b083      	sub	sp, #12
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dfa:	bf00      	nop
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b083      	sub	sp, #12
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
	...

08004e1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a42      	ldr	r2, [pc, #264]	; (8004f38 <TIM_Base_SetConfig+0x11c>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d013      	beq.n	8004e5c <TIM_Base_SetConfig+0x40>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e3a:	d00f      	beq.n	8004e5c <TIM_Base_SetConfig+0x40>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a3f      	ldr	r2, [pc, #252]	; (8004f3c <TIM_Base_SetConfig+0x120>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d00b      	beq.n	8004e5c <TIM_Base_SetConfig+0x40>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a3e      	ldr	r2, [pc, #248]	; (8004f40 <TIM_Base_SetConfig+0x124>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d007      	beq.n	8004e5c <TIM_Base_SetConfig+0x40>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a3d      	ldr	r2, [pc, #244]	; (8004f44 <TIM_Base_SetConfig+0x128>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d003      	beq.n	8004e5c <TIM_Base_SetConfig+0x40>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a3c      	ldr	r2, [pc, #240]	; (8004f48 <TIM_Base_SetConfig+0x12c>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d108      	bne.n	8004e6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a31      	ldr	r2, [pc, #196]	; (8004f38 <TIM_Base_SetConfig+0x11c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d01f      	beq.n	8004eb6 <TIM_Base_SetConfig+0x9a>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e7c:	d01b      	beq.n	8004eb6 <TIM_Base_SetConfig+0x9a>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a2e      	ldr	r2, [pc, #184]	; (8004f3c <TIM_Base_SetConfig+0x120>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d017      	beq.n	8004eb6 <TIM_Base_SetConfig+0x9a>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a2d      	ldr	r2, [pc, #180]	; (8004f40 <TIM_Base_SetConfig+0x124>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d013      	beq.n	8004eb6 <TIM_Base_SetConfig+0x9a>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a2c      	ldr	r2, [pc, #176]	; (8004f44 <TIM_Base_SetConfig+0x128>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00f      	beq.n	8004eb6 <TIM_Base_SetConfig+0x9a>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a2c      	ldr	r2, [pc, #176]	; (8004f4c <TIM_Base_SetConfig+0x130>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d00b      	beq.n	8004eb6 <TIM_Base_SetConfig+0x9a>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a2b      	ldr	r2, [pc, #172]	; (8004f50 <TIM_Base_SetConfig+0x134>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d007      	beq.n	8004eb6 <TIM_Base_SetConfig+0x9a>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a2a      	ldr	r2, [pc, #168]	; (8004f54 <TIM_Base_SetConfig+0x138>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d003      	beq.n	8004eb6 <TIM_Base_SetConfig+0x9a>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a25      	ldr	r2, [pc, #148]	; (8004f48 <TIM_Base_SetConfig+0x12c>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d108      	bne.n	8004ec8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ebc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a12      	ldr	r2, [pc, #72]	; (8004f38 <TIM_Base_SetConfig+0x11c>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d013      	beq.n	8004f1c <TIM_Base_SetConfig+0x100>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a13      	ldr	r2, [pc, #76]	; (8004f44 <TIM_Base_SetConfig+0x128>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d00f      	beq.n	8004f1c <TIM_Base_SetConfig+0x100>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a13      	ldr	r2, [pc, #76]	; (8004f4c <TIM_Base_SetConfig+0x130>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d00b      	beq.n	8004f1c <TIM_Base_SetConfig+0x100>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a12      	ldr	r2, [pc, #72]	; (8004f50 <TIM_Base_SetConfig+0x134>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d007      	beq.n	8004f1c <TIM_Base_SetConfig+0x100>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a11      	ldr	r2, [pc, #68]	; (8004f54 <TIM_Base_SetConfig+0x138>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d003      	beq.n	8004f1c <TIM_Base_SetConfig+0x100>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a0c      	ldr	r2, [pc, #48]	; (8004f48 <TIM_Base_SetConfig+0x12c>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d103      	bne.n	8004f24 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	691a      	ldr	r2, [r3, #16]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	615a      	str	r2, [r3, #20]
}
 8004f2a:	bf00      	nop
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	40012c00 	.word	0x40012c00
 8004f3c:	40000400 	.word	0x40000400
 8004f40:	40000800 	.word	0x40000800
 8004f44:	40013400 	.word	0x40013400
 8004f48:	40015000 	.word	0x40015000
 8004f4c:	40014000 	.word	0x40014000
 8004f50:	40014400 	.word	0x40014400
 8004f54:	40014800 	.word	0x40014800

08004f58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e040      	b.n	8005028 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d106      	bne.n	8004fbc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7fc fb22 	bl	8001600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2224      	movs	r2, #36	; 0x24
 8004fc0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 0201 	bic.w	r2, r2, #1
 8004fd0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 fc0e 	bl	80057f4 <UART_SetConfig>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d101      	bne.n	8004fe2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e022      	b.n	8005028 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d002      	beq.n	8004ff0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 fdd6 	bl	8005b9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ffe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689a      	ldr	r2, [r3, #8]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800500e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0201 	orr.w	r2, r2, #1
 800501e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 fe5d 	bl	8005ce0 <UART_CheckIdleState>
 8005026:	4603      	mov	r3, r0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3708      	adds	r7, #8
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b08a      	sub	sp, #40	; 0x28
 8005034:	af02      	add	r7, sp, #8
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	603b      	str	r3, [r7, #0]
 800503c:	4613      	mov	r3, r2
 800503e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005044:	2b20      	cmp	r3, #32
 8005046:	f040 8082 	bne.w	800514e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d002      	beq.n	8005056 <HAL_UART_Transmit+0x26>
 8005050:	88fb      	ldrh	r3, [r7, #6]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e07a      	b.n	8005150 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005060:	2b01      	cmp	r3, #1
 8005062:	d101      	bne.n	8005068 <HAL_UART_Transmit+0x38>
 8005064:	2302      	movs	r3, #2
 8005066:	e073      	b.n	8005150 <HAL_UART_Transmit+0x120>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2221      	movs	r2, #33	; 0x21
 800507c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800507e:	f7fc fbff 	bl	8001880 <HAL_GetTick>
 8005082:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	88fa      	ldrh	r2, [r7, #6]
 8005088:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	88fa      	ldrh	r2, [r7, #6]
 8005090:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800509c:	d108      	bne.n	80050b0 <HAL_UART_Transmit+0x80>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d104      	bne.n	80050b0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80050a6:	2300      	movs	r3, #0
 80050a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	61bb      	str	r3, [r7, #24]
 80050ae:	e003      	b.n	80050b8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050b4:	2300      	movs	r3, #0
 80050b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80050c0:	e02d      	b.n	800511e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	2200      	movs	r2, #0
 80050ca:	2180      	movs	r1, #128	; 0x80
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 fe50 	bl	8005d72 <UART_WaitOnFlagUntilTimeout>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e039      	b.n	8005150 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10b      	bne.n	80050fa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	881a      	ldrh	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050ee:	b292      	uxth	r2, r2
 80050f0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	3302      	adds	r3, #2
 80050f6:	61bb      	str	r3, [r7, #24]
 80050f8:	e008      	b.n	800510c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	781a      	ldrb	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	b292      	uxth	r2, r2
 8005104:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	3301      	adds	r3, #1
 800510a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005112:	b29b      	uxth	r3, r3
 8005114:	3b01      	subs	r3, #1
 8005116:	b29a      	uxth	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005124:	b29b      	uxth	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1cb      	bne.n	80050c2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2200      	movs	r2, #0
 8005132:	2140      	movs	r1, #64	; 0x40
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 fe1c 	bl	8005d72 <UART_WaitOnFlagUntilTimeout>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e005      	b.n	8005150 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2220      	movs	r2, #32
 8005148:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800514a:	2300      	movs	r3, #0
 800514c:	e000      	b.n	8005150 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800514e:	2302      	movs	r3, #2
  }
}
 8005150:	4618      	mov	r0, r3
 8005152:	3720      	adds	r7, #32
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b08a      	sub	sp, #40	; 0x28
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	4613      	mov	r3, r2
 8005164:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800516a:	2b20      	cmp	r3, #32
 800516c:	d13d      	bne.n	80051ea <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <HAL_UART_Receive_IT+0x22>
 8005174:	88fb      	ldrh	r3, [r7, #6]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e036      	b.n	80051ec <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005184:	2b01      	cmp	r3, #1
 8005186:	d101      	bne.n	800518c <HAL_UART_Receive_IT+0x34>
 8005188:	2302      	movs	r3, #2
 800518a:	e02f      	b.n	80051ec <HAL_UART_Receive_IT+0x94>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d018      	beq.n	80051da <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	e853 3f00 	ldrex	r3, [r3]
 80051b4:	613b      	str	r3, [r7, #16]
   return(result);
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051bc:	627b      	str	r3, [r7, #36]	; 0x24
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	461a      	mov	r2, r3
 80051c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c6:	623b      	str	r3, [r7, #32]
 80051c8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ca:	69f9      	ldr	r1, [r7, #28]
 80051cc:	6a3a      	ldr	r2, [r7, #32]
 80051ce:	e841 2300 	strex	r3, r2, [r1]
 80051d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1e6      	bne.n	80051a8 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80051da:	88fb      	ldrh	r3, [r7, #6]
 80051dc:	461a      	mov	r2, r3
 80051de:	68b9      	ldr	r1, [r7, #8]
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f000 fe8b 	bl	8005efc <UART_Start_Receive_IT>
 80051e6:	4603      	mov	r3, r0
 80051e8:	e000      	b.n	80051ec <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80051ea:	2302      	movs	r3, #2
  }
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3728      	adds	r7, #40	; 0x28
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b0ba      	sub	sp, #232	; 0xe8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800521a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800521e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005222:	4013      	ands	r3, r2
 8005224:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005228:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800522c:	2b00      	cmp	r3, #0
 800522e:	d115      	bne.n	800525c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005234:	f003 0320 	and.w	r3, r3, #32
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00f      	beq.n	800525c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800523c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005240:	f003 0320 	and.w	r3, r3, #32
 8005244:	2b00      	cmp	r3, #0
 8005246:	d009      	beq.n	800525c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 82a4 	beq.w	800579a <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	4798      	blx	r3
      }
      return;
 800525a:	e29e      	b.n	800579a <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800525c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005260:	2b00      	cmp	r3, #0
 8005262:	f000 8117 	beq.w	8005494 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b00      	cmp	r3, #0
 8005270:	d106      	bne.n	8005280 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005272:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005276:	4b85      	ldr	r3, [pc, #532]	; (800548c <HAL_UART_IRQHandler+0x298>)
 8005278:	4013      	ands	r3, r2
 800527a:	2b00      	cmp	r3, #0
 800527c:	f000 810a 	beq.w	8005494 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	2b00      	cmp	r3, #0
 800528a:	d011      	beq.n	80052b0 <HAL_UART_IRQHandler+0xbc>
 800528c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00b      	beq.n	80052b0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2201      	movs	r2, #1
 800529e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052a6:	f043 0201 	orr.w	r2, r3, #1
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d011      	beq.n	80052e0 <HAL_UART_IRQHandler+0xec>
 80052bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00b      	beq.n	80052e0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2202      	movs	r2, #2
 80052ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052d6:	f043 0204 	orr.w	r2, r3, #4
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052e4:	f003 0304 	and.w	r3, r3, #4
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d011      	beq.n	8005310 <HAL_UART_IRQHandler+0x11c>
 80052ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00b      	beq.n	8005310 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2204      	movs	r2, #4
 80052fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005306:	f043 0202 	orr.w	r2, r3, #2
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005314:	f003 0308 	and.w	r3, r3, #8
 8005318:	2b00      	cmp	r3, #0
 800531a:	d017      	beq.n	800534c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800531c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005320:	f003 0320 	and.w	r3, r3, #32
 8005324:	2b00      	cmp	r3, #0
 8005326:	d105      	bne.n	8005334 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005328:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800532c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00b      	beq.n	800534c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2208      	movs	r2, #8
 800533a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005342:	f043 0208 	orr.w	r2, r3, #8
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800534c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005354:	2b00      	cmp	r3, #0
 8005356:	d012      	beq.n	800537e <HAL_UART_IRQHandler+0x18a>
 8005358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800535c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00c      	beq.n	800537e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800536c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005374:	f043 0220 	orr.w	r2, r3, #32
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005384:	2b00      	cmp	r3, #0
 8005386:	f000 820a 	beq.w	800579e <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800538a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800538e:	f003 0320 	and.w	r3, r3, #32
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00d      	beq.n	80053b2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005396:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800539a:	f003 0320 	and.w	r3, r3, #32
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d007      	beq.n	80053b2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c6:	2b40      	cmp	r3, #64	; 0x40
 80053c8:	d005      	beq.n	80053d6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80053ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d04f      	beq.n	8005476 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fe3c 	bl	8006054 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e6:	2b40      	cmp	r3, #64	; 0x40
 80053e8:	d141      	bne.n	800546e <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	3308      	adds	r3, #8
 80053f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053f8:	e853 3f00 	ldrex	r3, [r3]
 80053fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005400:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005404:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005408:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	3308      	adds	r3, #8
 8005412:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005416:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800541a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005422:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005426:	e841 2300 	strex	r3, r2, [r1]
 800542a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800542e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1d9      	bne.n	80053ea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800543a:	2b00      	cmp	r3, #0
 800543c:	d013      	beq.n	8005466 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005442:	4a13      	ldr	r2, [pc, #76]	; (8005490 <HAL_UART_IRQHandler+0x29c>)
 8005444:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800544a:	4618      	mov	r0, r3
 800544c:	f7fd fd42 	bl	8002ed4 <HAL_DMA_Abort_IT>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d017      	beq.n	8005486 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800545a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005460:	4610      	mov	r0, r2
 8005462:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005464:	e00f      	b.n	8005486 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f9ae 	bl	80057c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800546c:	e00b      	b.n	8005486 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f9aa 	bl	80057c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005474:	e007      	b.n	8005486 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f9a6 	bl	80057c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005484:	e18b      	b.n	800579e <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005486:	bf00      	nop
    return;
 8005488:	e189      	b.n	800579e <HAL_UART_IRQHandler+0x5aa>
 800548a:	bf00      	nop
 800548c:	04000120 	.word	0x04000120
 8005490:	0800611b 	.word	0x0800611b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005498:	2b01      	cmp	r3, #1
 800549a:	f040 8143 	bne.w	8005724 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800549e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054a2:	f003 0310 	and.w	r3, r3, #16
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 813c 	beq.w	8005724 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80054ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054b0:	f003 0310 	and.w	r3, r3, #16
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f000 8135 	beq.w	8005724 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2210      	movs	r2, #16
 80054c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054cc:	2b40      	cmp	r3, #64	; 0x40
 80054ce:	f040 80b1 	bne.w	8005634 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054de:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f000 815d 	beq.w	80057a2 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80054ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054f2:	429a      	cmp	r2, r3
 80054f4:	f080 8155 	bcs.w	80057a2 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	2b20      	cmp	r3, #32
 800550a:	f000 8085 	beq.w	8005618 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005516:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800551a:	e853 3f00 	ldrex	r3, [r3]
 800551e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005522:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005526:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800552a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	461a      	mov	r2, r3
 8005534:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005538:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800553c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005540:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005544:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005548:	e841 2300 	strex	r3, r2, [r1]
 800554c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005550:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1da      	bne.n	800550e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3308      	adds	r3, #8
 800555e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005560:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005562:	e853 3f00 	ldrex	r3, [r3]
 8005566:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005568:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800556a:	f023 0301 	bic.w	r3, r3, #1
 800556e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3308      	adds	r3, #8
 8005578:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800557c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005580:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005582:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005584:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005588:	e841 2300 	strex	r3, r2, [r1]
 800558c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800558e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1e1      	bne.n	8005558 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	3308      	adds	r3, #8
 800559a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800559e:	e853 3f00 	ldrex	r3, [r3]
 80055a2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80055a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	3308      	adds	r3, #8
 80055b4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80055b8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80055ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055bc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80055be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80055c0:	e841 2300 	strex	r3, r2, [r1]
 80055c4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80055c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1e3      	bne.n	8005594 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2220      	movs	r2, #32
 80055d0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055e0:	e853 3f00 	ldrex	r3, [r3]
 80055e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80055e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055e8:	f023 0310 	bic.w	r3, r3, #16
 80055ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	461a      	mov	r2, r3
 80055f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80055fc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005600:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005602:	e841 2300 	strex	r3, r2, [r1]
 8005606:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1e4      	bne.n	80055d8 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005612:	4618      	mov	r0, r3
 8005614:	f7fd fc25 	bl	8002e62 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005624:	b29b      	uxth	r3, r3
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	b29b      	uxth	r3, r3
 800562a:	4619      	mov	r1, r3
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 f8d5 	bl	80057dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005632:	e0b6      	b.n	80057a2 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005640:	b29b      	uxth	r3, r3
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800564e:	b29b      	uxth	r3, r3
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 80a8 	beq.w	80057a6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8005656:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800565a:	2b00      	cmp	r3, #0
 800565c:	f000 80a3 	beq.w	80057a6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005668:	e853 3f00 	ldrex	r3, [r3]
 800566c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800566e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005670:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005674:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	461a      	mov	r2, r3
 800567e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005682:	647b      	str	r3, [r7, #68]	; 0x44
 8005684:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005686:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005688:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800568a:	e841 2300 	strex	r3, r2, [r1]
 800568e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1e4      	bne.n	8005660 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	3308      	adds	r3, #8
 800569c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	e853 3f00 	ldrex	r3, [r3]
 80056a4:	623b      	str	r3, [r7, #32]
   return(result);
 80056a6:	6a3b      	ldr	r3, [r7, #32]
 80056a8:	f023 0301 	bic.w	r3, r3, #1
 80056ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	3308      	adds	r3, #8
 80056b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80056ba:	633a      	str	r2, [r7, #48]	; 0x30
 80056bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056c2:	e841 2300 	strex	r3, r2, [r1]
 80056c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1e3      	bne.n	8005696 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2220      	movs	r2, #32
 80056d2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	e853 3f00 	ldrex	r3, [r3]
 80056ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f023 0310 	bic.w	r3, r3, #16
 80056f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	461a      	mov	r2, r3
 80056fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005702:	61fb      	str	r3, [r7, #28]
 8005704:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005706:	69b9      	ldr	r1, [r7, #24]
 8005708:	69fa      	ldr	r2, [r7, #28]
 800570a:	e841 2300 	strex	r3, r2, [r1]
 800570e:	617b      	str	r3, [r7, #20]
   return(result);
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1e4      	bne.n	80056e0 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005716:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800571a:	4619      	mov	r1, r3
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 f85d 	bl	80057dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005722:	e040      	b.n	80057a6 <HAL_UART_IRQHandler+0x5b2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005728:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00e      	beq.n	800574e <HAL_UART_IRQHandler+0x55a>
 8005730:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005734:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d008      	beq.n	800574e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005744:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 fe83 	bl	8006452 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800574c:	e02e      	b.n	80057ac <HAL_UART_IRQHandler+0x5b8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800574e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00e      	beq.n	8005778 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800575a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800575e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005762:	2b00      	cmp	r3, #0
 8005764:	d008      	beq.n	8005778 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800576a:	2b00      	cmp	r3, #0
 800576c:	d01d      	beq.n	80057aa <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	4798      	blx	r3
    }
    return;
 8005776:	e018      	b.n	80057aa <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800577c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005780:	2b00      	cmp	r3, #0
 8005782:	d013      	beq.n	80057ac <HAL_UART_IRQHandler+0x5b8>
 8005784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00d      	beq.n	80057ac <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 fcd8 	bl	8006146 <UART_EndTransmit_IT>
    return;
 8005796:	bf00      	nop
 8005798:	e008      	b.n	80057ac <HAL_UART_IRQHandler+0x5b8>
      return;
 800579a:	bf00      	nop
 800579c:	e006      	b.n	80057ac <HAL_UART_IRQHandler+0x5b8>
    return;
 800579e:	bf00      	nop
 80057a0:	e004      	b.n	80057ac <HAL_UART_IRQHandler+0x5b8>
      return;
 80057a2:	bf00      	nop
 80057a4:	e002      	b.n	80057ac <HAL_UART_IRQHandler+0x5b8>
      return;
 80057a6:	bf00      	nop
 80057a8:	e000      	b.n	80057ac <HAL_UART_IRQHandler+0x5b8>
    return;
 80057aa:	bf00      	nop
  }

}
 80057ac:	37e8      	adds	r7, #232	; 0xe8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop

080057b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	460b      	mov	r3, r1
 80057e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b088      	sub	sp, #32
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057fc:	2300      	movs	r3, #0
 80057fe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	431a      	orrs	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	431a      	orrs	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	69db      	ldr	r3, [r3, #28]
 8005814:	4313      	orrs	r3, r2
 8005816:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	4baa      	ldr	r3, [pc, #680]	; (8005ac8 <UART_SetConfig+0x2d4>)
 8005820:	4013      	ands	r3, r2
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	6812      	ldr	r2, [r2, #0]
 8005826:	6979      	ldr	r1, [r7, #20]
 8005828:	430b      	orrs	r3, r1
 800582a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68da      	ldr	r2, [r3, #12]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	430a      	orrs	r2, r1
 8005840:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a1b      	ldr	r3, [r3, #32]
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	4313      	orrs	r3, r2
 8005850:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	430a      	orrs	r2, r1
 8005864:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a98      	ldr	r2, [pc, #608]	; (8005acc <UART_SetConfig+0x2d8>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d121      	bne.n	80058b4 <UART_SetConfig+0xc0>
 8005870:	4b97      	ldr	r3, [pc, #604]	; (8005ad0 <UART_SetConfig+0x2dc>)
 8005872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005874:	f003 0303 	and.w	r3, r3, #3
 8005878:	2b03      	cmp	r3, #3
 800587a:	d817      	bhi.n	80058ac <UART_SetConfig+0xb8>
 800587c:	a201      	add	r2, pc, #4	; (adr r2, 8005884 <UART_SetConfig+0x90>)
 800587e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005882:	bf00      	nop
 8005884:	08005895 	.word	0x08005895
 8005888:	080058a1 	.word	0x080058a1
 800588c:	080058a7 	.word	0x080058a7
 8005890:	0800589b 	.word	0x0800589b
 8005894:	2301      	movs	r3, #1
 8005896:	77fb      	strb	r3, [r7, #31]
 8005898:	e0b2      	b.n	8005a00 <UART_SetConfig+0x20c>
 800589a:	2302      	movs	r3, #2
 800589c:	77fb      	strb	r3, [r7, #31]
 800589e:	e0af      	b.n	8005a00 <UART_SetConfig+0x20c>
 80058a0:	2304      	movs	r3, #4
 80058a2:	77fb      	strb	r3, [r7, #31]
 80058a4:	e0ac      	b.n	8005a00 <UART_SetConfig+0x20c>
 80058a6:	2308      	movs	r3, #8
 80058a8:	77fb      	strb	r3, [r7, #31]
 80058aa:	e0a9      	b.n	8005a00 <UART_SetConfig+0x20c>
 80058ac:	2310      	movs	r3, #16
 80058ae:	77fb      	strb	r3, [r7, #31]
 80058b0:	bf00      	nop
 80058b2:	e0a5      	b.n	8005a00 <UART_SetConfig+0x20c>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a86      	ldr	r2, [pc, #536]	; (8005ad4 <UART_SetConfig+0x2e0>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d123      	bne.n	8005906 <UART_SetConfig+0x112>
 80058be:	4b84      	ldr	r3, [pc, #528]	; (8005ad0 <UART_SetConfig+0x2dc>)
 80058c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80058c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058ca:	d012      	beq.n	80058f2 <UART_SetConfig+0xfe>
 80058cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058d0:	d802      	bhi.n	80058d8 <UART_SetConfig+0xe4>
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d007      	beq.n	80058e6 <UART_SetConfig+0xf2>
 80058d6:	e012      	b.n	80058fe <UART_SetConfig+0x10a>
 80058d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058dc:	d00c      	beq.n	80058f8 <UART_SetConfig+0x104>
 80058de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80058e2:	d003      	beq.n	80058ec <UART_SetConfig+0xf8>
 80058e4:	e00b      	b.n	80058fe <UART_SetConfig+0x10a>
 80058e6:	2300      	movs	r3, #0
 80058e8:	77fb      	strb	r3, [r7, #31]
 80058ea:	e089      	b.n	8005a00 <UART_SetConfig+0x20c>
 80058ec:	2302      	movs	r3, #2
 80058ee:	77fb      	strb	r3, [r7, #31]
 80058f0:	e086      	b.n	8005a00 <UART_SetConfig+0x20c>
 80058f2:	2304      	movs	r3, #4
 80058f4:	77fb      	strb	r3, [r7, #31]
 80058f6:	e083      	b.n	8005a00 <UART_SetConfig+0x20c>
 80058f8:	2308      	movs	r3, #8
 80058fa:	77fb      	strb	r3, [r7, #31]
 80058fc:	e080      	b.n	8005a00 <UART_SetConfig+0x20c>
 80058fe:	2310      	movs	r3, #16
 8005900:	77fb      	strb	r3, [r7, #31]
 8005902:	bf00      	nop
 8005904:	e07c      	b.n	8005a00 <UART_SetConfig+0x20c>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a73      	ldr	r2, [pc, #460]	; (8005ad8 <UART_SetConfig+0x2e4>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d123      	bne.n	8005958 <UART_SetConfig+0x164>
 8005910:	4b6f      	ldr	r3, [pc, #444]	; (8005ad0 <UART_SetConfig+0x2dc>)
 8005912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005914:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005918:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800591c:	d012      	beq.n	8005944 <UART_SetConfig+0x150>
 800591e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005922:	d802      	bhi.n	800592a <UART_SetConfig+0x136>
 8005924:	2b00      	cmp	r3, #0
 8005926:	d007      	beq.n	8005938 <UART_SetConfig+0x144>
 8005928:	e012      	b.n	8005950 <UART_SetConfig+0x15c>
 800592a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800592e:	d00c      	beq.n	800594a <UART_SetConfig+0x156>
 8005930:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005934:	d003      	beq.n	800593e <UART_SetConfig+0x14a>
 8005936:	e00b      	b.n	8005950 <UART_SetConfig+0x15c>
 8005938:	2300      	movs	r3, #0
 800593a:	77fb      	strb	r3, [r7, #31]
 800593c:	e060      	b.n	8005a00 <UART_SetConfig+0x20c>
 800593e:	2302      	movs	r3, #2
 8005940:	77fb      	strb	r3, [r7, #31]
 8005942:	e05d      	b.n	8005a00 <UART_SetConfig+0x20c>
 8005944:	2304      	movs	r3, #4
 8005946:	77fb      	strb	r3, [r7, #31]
 8005948:	e05a      	b.n	8005a00 <UART_SetConfig+0x20c>
 800594a:	2308      	movs	r3, #8
 800594c:	77fb      	strb	r3, [r7, #31]
 800594e:	e057      	b.n	8005a00 <UART_SetConfig+0x20c>
 8005950:	2310      	movs	r3, #16
 8005952:	77fb      	strb	r3, [r7, #31]
 8005954:	bf00      	nop
 8005956:	e053      	b.n	8005a00 <UART_SetConfig+0x20c>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a5f      	ldr	r2, [pc, #380]	; (8005adc <UART_SetConfig+0x2e8>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d123      	bne.n	80059aa <UART_SetConfig+0x1b6>
 8005962:	4b5b      	ldr	r3, [pc, #364]	; (8005ad0 <UART_SetConfig+0x2dc>)
 8005964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005966:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800596a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800596e:	d012      	beq.n	8005996 <UART_SetConfig+0x1a2>
 8005970:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005974:	d802      	bhi.n	800597c <UART_SetConfig+0x188>
 8005976:	2b00      	cmp	r3, #0
 8005978:	d007      	beq.n	800598a <UART_SetConfig+0x196>
 800597a:	e012      	b.n	80059a2 <UART_SetConfig+0x1ae>
 800597c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005980:	d00c      	beq.n	800599c <UART_SetConfig+0x1a8>
 8005982:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005986:	d003      	beq.n	8005990 <UART_SetConfig+0x19c>
 8005988:	e00b      	b.n	80059a2 <UART_SetConfig+0x1ae>
 800598a:	2300      	movs	r3, #0
 800598c:	77fb      	strb	r3, [r7, #31]
 800598e:	e037      	b.n	8005a00 <UART_SetConfig+0x20c>
 8005990:	2302      	movs	r3, #2
 8005992:	77fb      	strb	r3, [r7, #31]
 8005994:	e034      	b.n	8005a00 <UART_SetConfig+0x20c>
 8005996:	2304      	movs	r3, #4
 8005998:	77fb      	strb	r3, [r7, #31]
 800599a:	e031      	b.n	8005a00 <UART_SetConfig+0x20c>
 800599c:	2308      	movs	r3, #8
 800599e:	77fb      	strb	r3, [r7, #31]
 80059a0:	e02e      	b.n	8005a00 <UART_SetConfig+0x20c>
 80059a2:	2310      	movs	r3, #16
 80059a4:	77fb      	strb	r3, [r7, #31]
 80059a6:	bf00      	nop
 80059a8:	e02a      	b.n	8005a00 <UART_SetConfig+0x20c>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a4c      	ldr	r2, [pc, #304]	; (8005ae0 <UART_SetConfig+0x2ec>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d123      	bne.n	80059fc <UART_SetConfig+0x208>
 80059b4:	4b46      	ldr	r3, [pc, #280]	; (8005ad0 <UART_SetConfig+0x2dc>)
 80059b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80059bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059c0:	d012      	beq.n	80059e8 <UART_SetConfig+0x1f4>
 80059c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059c6:	d802      	bhi.n	80059ce <UART_SetConfig+0x1da>
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d007      	beq.n	80059dc <UART_SetConfig+0x1e8>
 80059cc:	e012      	b.n	80059f4 <UART_SetConfig+0x200>
 80059ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80059d2:	d00c      	beq.n	80059ee <UART_SetConfig+0x1fa>
 80059d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80059d8:	d003      	beq.n	80059e2 <UART_SetConfig+0x1ee>
 80059da:	e00b      	b.n	80059f4 <UART_SetConfig+0x200>
 80059dc:	2300      	movs	r3, #0
 80059de:	77fb      	strb	r3, [r7, #31]
 80059e0:	e00e      	b.n	8005a00 <UART_SetConfig+0x20c>
 80059e2:	2302      	movs	r3, #2
 80059e4:	77fb      	strb	r3, [r7, #31]
 80059e6:	e00b      	b.n	8005a00 <UART_SetConfig+0x20c>
 80059e8:	2304      	movs	r3, #4
 80059ea:	77fb      	strb	r3, [r7, #31]
 80059ec:	e008      	b.n	8005a00 <UART_SetConfig+0x20c>
 80059ee:	2308      	movs	r3, #8
 80059f0:	77fb      	strb	r3, [r7, #31]
 80059f2:	e005      	b.n	8005a00 <UART_SetConfig+0x20c>
 80059f4:	2310      	movs	r3, #16
 80059f6:	77fb      	strb	r3, [r7, #31]
 80059f8:	bf00      	nop
 80059fa:	e001      	b.n	8005a00 <UART_SetConfig+0x20c>
 80059fc:	2310      	movs	r3, #16
 80059fe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	69db      	ldr	r3, [r3, #28]
 8005a04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a08:	d16e      	bne.n	8005ae8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8005a0a:	7ffb      	ldrb	r3, [r7, #31]
 8005a0c:	2b08      	cmp	r3, #8
 8005a0e:	d828      	bhi.n	8005a62 <UART_SetConfig+0x26e>
 8005a10:	a201      	add	r2, pc, #4	; (adr r2, 8005a18 <UART_SetConfig+0x224>)
 8005a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a16:	bf00      	nop
 8005a18:	08005a3d 	.word	0x08005a3d
 8005a1c:	08005a45 	.word	0x08005a45
 8005a20:	08005a4d 	.word	0x08005a4d
 8005a24:	08005a63 	.word	0x08005a63
 8005a28:	08005a53 	.word	0x08005a53
 8005a2c:	08005a63 	.word	0x08005a63
 8005a30:	08005a63 	.word	0x08005a63
 8005a34:	08005a63 	.word	0x08005a63
 8005a38:	08005a5b 	.word	0x08005a5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a3c:	f7fe fd7c 	bl	8004538 <HAL_RCC_GetPCLK1Freq>
 8005a40:	61b8      	str	r0, [r7, #24]
        break;
 8005a42:	e013      	b.n	8005a6c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a44:	f7fe fd9a 	bl	800457c <HAL_RCC_GetPCLK2Freq>
 8005a48:	61b8      	str	r0, [r7, #24]
        break;
 8005a4a:	e00f      	b.n	8005a6c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a4c:	4b25      	ldr	r3, [pc, #148]	; (8005ae4 <UART_SetConfig+0x2f0>)
 8005a4e:	61bb      	str	r3, [r7, #24]
        break;
 8005a50:	e00c      	b.n	8005a6c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a52:	f7fe fcfb 	bl	800444c <HAL_RCC_GetSysClockFreq>
 8005a56:	61b8      	str	r0, [r7, #24]
        break;
 8005a58:	e008      	b.n	8005a6c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a5e:	61bb      	str	r3, [r7, #24]
        break;
 8005a60:	e004      	b.n	8005a6c <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8005a62:	2300      	movs	r3, #0
 8005a64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	77bb      	strb	r3, [r7, #30]
        break;
 8005a6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f000 8086 	beq.w	8005b80 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	005a      	lsls	r2, r3, #1
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	085b      	lsrs	r3, r3, #1
 8005a7e:	441a      	add	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	2b0f      	cmp	r3, #15
 8005a90:	d916      	bls.n	8005ac0 <UART_SetConfig+0x2cc>
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a98:	d212      	bcs.n	8005ac0 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	f023 030f 	bic.w	r3, r3, #15
 8005aa2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	085b      	lsrs	r3, r3, #1
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	f003 0307 	and.w	r3, r3, #7
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	89fb      	ldrh	r3, [r7, #14]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	89fa      	ldrh	r2, [r7, #14]
 8005abc:	60da      	str	r2, [r3, #12]
 8005abe:	e05f      	b.n	8005b80 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	77bb      	strb	r3, [r7, #30]
 8005ac4:	e05c      	b.n	8005b80 <UART_SetConfig+0x38c>
 8005ac6:	bf00      	nop
 8005ac8:	efff69f3 	.word	0xefff69f3
 8005acc:	40013800 	.word	0x40013800
 8005ad0:	40021000 	.word	0x40021000
 8005ad4:	40004400 	.word	0x40004400
 8005ad8:	40004800 	.word	0x40004800
 8005adc:	40004c00 	.word	0x40004c00
 8005ae0:	40005000 	.word	0x40005000
 8005ae4:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ae8:	7ffb      	ldrb	r3, [r7, #31]
 8005aea:	2b08      	cmp	r3, #8
 8005aec:	d827      	bhi.n	8005b3e <UART_SetConfig+0x34a>
 8005aee:	a201      	add	r2, pc, #4	; (adr r2, 8005af4 <UART_SetConfig+0x300>)
 8005af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af4:	08005b19 	.word	0x08005b19
 8005af8:	08005b21 	.word	0x08005b21
 8005afc:	08005b29 	.word	0x08005b29
 8005b00:	08005b3f 	.word	0x08005b3f
 8005b04:	08005b2f 	.word	0x08005b2f
 8005b08:	08005b3f 	.word	0x08005b3f
 8005b0c:	08005b3f 	.word	0x08005b3f
 8005b10:	08005b3f 	.word	0x08005b3f
 8005b14:	08005b37 	.word	0x08005b37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b18:	f7fe fd0e 	bl	8004538 <HAL_RCC_GetPCLK1Freq>
 8005b1c:	61b8      	str	r0, [r7, #24]
        break;
 8005b1e:	e013      	b.n	8005b48 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b20:	f7fe fd2c 	bl	800457c <HAL_RCC_GetPCLK2Freq>
 8005b24:	61b8      	str	r0, [r7, #24]
        break;
 8005b26:	e00f      	b.n	8005b48 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b28:	4b1b      	ldr	r3, [pc, #108]	; (8005b98 <UART_SetConfig+0x3a4>)
 8005b2a:	61bb      	str	r3, [r7, #24]
        break;
 8005b2c:	e00c      	b.n	8005b48 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b2e:	f7fe fc8d 	bl	800444c <HAL_RCC_GetSysClockFreq>
 8005b32:	61b8      	str	r0, [r7, #24]
        break;
 8005b34:	e008      	b.n	8005b48 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b3a:	61bb      	str	r3, [r7, #24]
        break;
 8005b3c:	e004      	b.n	8005b48 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	77bb      	strb	r3, [r7, #30]
        break;
 8005b46:	bf00      	nop
    }

    if (pclk != 0U)
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d018      	beq.n	8005b80 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	085a      	lsrs	r2, r3, #1
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	441a      	add	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	2b0f      	cmp	r3, #15
 8005b68:	d908      	bls.n	8005b7c <UART_SetConfig+0x388>
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b70:	d204      	bcs.n	8005b7c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	60da      	str	r2, [r3, #12]
 8005b7a:	e001      	b.n	8005b80 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005b8c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3720      	adds	r7, #32
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	007a1200 	.word	0x007a1200

08005b9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00a      	beq.n	8005bc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bca:	f003 0302 	and.w	r3, r3, #2
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00a      	beq.n	8005be8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00a      	beq.n	8005c0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0e:	f003 0308 	and.w	r3, r3, #8
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00a      	beq.n	8005c2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c30:	f003 0310 	and.w	r3, r3, #16
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00a      	beq.n	8005c4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c52:	f003 0320 	and.w	r3, r3, #32
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00a      	beq.n	8005c70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d01a      	beq.n	8005cb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c9a:	d10a      	bne.n	8005cb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00a      	beq.n	8005cd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	605a      	str	r2, [r3, #4]
  }
}
 8005cd4:	bf00      	nop
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af02      	add	r7, sp, #8
 8005ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cf0:	f7fb fdc6 	bl	8001880 <HAL_GetTick>
 8005cf4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0308 	and.w	r3, r3, #8
 8005d00:	2b08      	cmp	r3, #8
 8005d02:	d10e      	bne.n	8005d22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f82d 	bl	8005d72 <UART_WaitOnFlagUntilTimeout>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e023      	b.n	8005d6a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0304 	and.w	r3, r3, #4
 8005d2c:	2b04      	cmp	r3, #4
 8005d2e:	d10e      	bne.n	8005d4e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d34:	9300      	str	r3, [sp, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f817 	bl	8005d72 <UART_WaitOnFlagUntilTimeout>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e00d      	b.n	8005d6a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2220      	movs	r2, #32
 8005d52:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2220      	movs	r2, #32
 8005d58:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b09c      	sub	sp, #112	; 0x70
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	60f8      	str	r0, [r7, #12]
 8005d7a:	60b9      	str	r1, [r7, #8]
 8005d7c:	603b      	str	r3, [r7, #0]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d82:	e0a5      	b.n	8005ed0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8a:	f000 80a1 	beq.w	8005ed0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d8e:	f7fb fd77 	bl	8001880 <HAL_GetTick>
 8005d92:	4602      	mov	r2, r0
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d302      	bcc.n	8005da4 <UART_WaitOnFlagUntilTimeout+0x32>
 8005d9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d13e      	bne.n	8005e22 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005daa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dac:	e853 3f00 	ldrex	r3, [r3]
 8005db0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005db4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005db8:	667b      	str	r3, [r7, #100]	; 0x64
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dc4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005dc8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005dca:	e841 2300 	strex	r3, r2, [r1]
 8005dce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005dd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1e6      	bne.n	8005da4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	3308      	adds	r3, #8
 8005ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005de0:	e853 3f00 	ldrex	r3, [r3]
 8005de4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de8:	f023 0301 	bic.w	r3, r3, #1
 8005dec:	663b      	str	r3, [r7, #96]	; 0x60
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	3308      	adds	r3, #8
 8005df4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005df6:	64ba      	str	r2, [r7, #72]	; 0x48
 8005df8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005dfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dfe:	e841 2300 	strex	r3, r2, [r1]
 8005e02:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005e04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1e5      	bne.n	8005dd6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2220      	movs	r2, #32
 8005e0e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2220      	movs	r2, #32
 8005e14:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e067      	b.n	8005ef2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0304 	and.w	r3, r3, #4
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d04f      	beq.n	8005ed0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	69db      	ldr	r3, [r3, #28]
 8005e36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e3e:	d147      	bne.n	8005ed0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e48:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e52:	e853 3f00 	ldrex	r3, [r3]
 8005e56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	461a      	mov	r2, r3
 8005e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e68:	637b      	str	r3, [r7, #52]	; 0x34
 8005e6a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e70:	e841 2300 	strex	r3, r2, [r1]
 8005e74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1e6      	bne.n	8005e4a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	3308      	adds	r3, #8
 8005e82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	e853 3f00 	ldrex	r3, [r3]
 8005e8a:	613b      	str	r3, [r7, #16]
   return(result);
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	f023 0301 	bic.w	r3, r3, #1
 8005e92:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	3308      	adds	r3, #8
 8005e9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e9c:	623a      	str	r2, [r7, #32]
 8005e9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea0:	69f9      	ldr	r1, [r7, #28]
 8005ea2:	6a3a      	ldr	r2, [r7, #32]
 8005ea4:	e841 2300 	strex	r3, r2, [r1]
 8005ea8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1e5      	bne.n	8005e7c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2220      	movs	r2, #32
 8005eb4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2220      	movs	r2, #32
 8005eba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e010      	b.n	8005ef2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	69da      	ldr	r2, [r3, #28]
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	4013      	ands	r3, r2
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	bf0c      	ite	eq
 8005ee0:	2301      	moveq	r3, #1
 8005ee2:	2300      	movne	r3, #0
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	79fb      	ldrb	r3, [r7, #7]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	f43f af4a 	beq.w	8005d84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3770      	adds	r7, #112	; 0x70
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
	...

08005efc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b091      	sub	sp, #68	; 0x44
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	4613      	mov	r3, r2
 8005f08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	88fa      	ldrh	r2, [r7, #6]
 8005f14:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	88fa      	ldrh	r2, [r7, #6]
 8005f1c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f2e:	d10e      	bne.n	8005f4e <UART_Start_Receive_IT+0x52>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d105      	bne.n	8005f44 <UART_Start_Receive_IT+0x48>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005f3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f42:	e02d      	b.n	8005fa0 <UART_Start_Receive_IT+0xa4>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	22ff      	movs	r2, #255	; 0xff
 8005f48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f4c:	e028      	b.n	8005fa0 <UART_Start_Receive_IT+0xa4>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10d      	bne.n	8005f72 <UART_Start_Receive_IT+0x76>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d104      	bne.n	8005f68 <UART_Start_Receive_IT+0x6c>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	22ff      	movs	r2, #255	; 0xff
 8005f62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f66:	e01b      	b.n	8005fa0 <UART_Start_Receive_IT+0xa4>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	227f      	movs	r2, #127	; 0x7f
 8005f6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f70:	e016      	b.n	8005fa0 <UART_Start_Receive_IT+0xa4>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f7a:	d10d      	bne.n	8005f98 <UART_Start_Receive_IT+0x9c>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d104      	bne.n	8005f8e <UART_Start_Receive_IT+0x92>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	227f      	movs	r2, #127	; 0x7f
 8005f88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f8c:	e008      	b.n	8005fa0 <UART_Start_Receive_IT+0xa4>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	223f      	movs	r2, #63	; 0x3f
 8005f92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f96:	e003      	b.n	8005fa0 <UART_Start_Receive_IT+0xa4>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2222      	movs	r2, #34	; 0x22
 8005fac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	3308      	adds	r3, #8
 8005fb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb8:	e853 3f00 	ldrex	r3, [r3]
 8005fbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	f043 0301 	orr.w	r3, r3, #1
 8005fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	3308      	adds	r3, #8
 8005fcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fce:	637a      	str	r2, [r7, #52]	; 0x34
 8005fd0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005fd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fd6:	e841 2300 	strex	r3, r2, [r1]
 8005fda:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1e5      	bne.n	8005fae <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fea:	d107      	bne.n	8005ffc <UART_Start_Receive_IT+0x100>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d103      	bne.n	8005ffc <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	4a15      	ldr	r2, [pc, #84]	; (800604c <UART_Start_Receive_IT+0x150>)
 8005ff8:	665a      	str	r2, [r3, #100]	; 0x64
 8005ffa:	e002      	b.n	8006002 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	4a14      	ldr	r2, [pc, #80]	; (8006050 <UART_Start_Receive_IT+0x154>)
 8006000:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	e853 3f00 	ldrex	r3, [r3]
 8006016:	613b      	str	r3, [r7, #16]
   return(result);
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800601e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	461a      	mov	r2, r3
 8006026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006028:	623b      	str	r3, [r7, #32]
 800602a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602c:	69f9      	ldr	r1, [r7, #28]
 800602e:	6a3a      	ldr	r2, [r7, #32]
 8006030:	e841 2300 	strex	r3, r2, [r1]
 8006034:	61bb      	str	r3, [r7, #24]
   return(result);
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1e6      	bne.n	800600a <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3744      	adds	r7, #68	; 0x44
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	080062f7 	.word	0x080062f7
 8006050:	0800619b 	.word	0x0800619b

08006054 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006054:	b480      	push	{r7}
 8006056:	b095      	sub	sp, #84	; 0x54
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006064:	e853 3f00 	ldrex	r3, [r3]
 8006068:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800606a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006070:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	461a      	mov	r2, r3
 8006078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800607a:	643b      	str	r3, [r7, #64]	; 0x40
 800607c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006080:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006082:	e841 2300 	strex	r3, r2, [r1]
 8006086:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1e6      	bne.n	800605c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	3308      	adds	r3, #8
 8006094:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006096:	6a3b      	ldr	r3, [r7, #32]
 8006098:	e853 3f00 	ldrex	r3, [r3]
 800609c:	61fb      	str	r3, [r7, #28]
   return(result);
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	f023 0301 	bic.w	r3, r3, #1
 80060a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	3308      	adds	r3, #8
 80060ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060b6:	e841 2300 	strex	r3, r2, [r1]
 80060ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1e5      	bne.n	800608e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d118      	bne.n	80060fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	e853 3f00 	ldrex	r3, [r3]
 80060d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	f023 0310 	bic.w	r3, r3, #16
 80060de:	647b      	str	r3, [r7, #68]	; 0x44
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	461a      	mov	r2, r3
 80060e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060e8:	61bb      	str	r3, [r7, #24]
 80060ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ec:	6979      	ldr	r1, [r7, #20]
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	e841 2300 	strex	r3, r2, [r1]
 80060f4:	613b      	str	r3, [r7, #16]
   return(result);
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1e6      	bne.n	80060ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2220      	movs	r2, #32
 8006100:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800610e:	bf00      	nop
 8006110:	3754      	adds	r7, #84	; 0x54
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b084      	sub	sp, #16
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006126:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f7ff fb45 	bl	80057c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800613e:	bf00      	nop
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006146:	b580      	push	{r7, lr}
 8006148:	b088      	sub	sp, #32
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	e853 3f00 	ldrex	r3, [r3]
 800615a:	60bb      	str	r3, [r7, #8]
   return(result);
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006162:	61fb      	str	r3, [r7, #28]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	461a      	mov	r2, r3
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	61bb      	str	r3, [r7, #24]
 800616e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006170:	6979      	ldr	r1, [r7, #20]
 8006172:	69ba      	ldr	r2, [r7, #24]
 8006174:	e841 2300 	strex	r3, r2, [r1]
 8006178:	613b      	str	r3, [r7, #16]
   return(result);
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d1e6      	bne.n	800614e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2220      	movs	r2, #32
 8006184:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f7ff fb11 	bl	80057b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006192:	bf00      	nop
 8006194:	3720      	adds	r7, #32
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b096      	sub	sp, #88	; 0x58
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80061a8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061b0:	2b22      	cmp	r3, #34	; 0x22
 80061b2:	f040 8094 	bne.w	80062de <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80061bc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80061c0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80061c4:	b2d9      	uxtb	r1, r3
 80061c6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80061ca:	b2da      	uxtb	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d0:	400a      	ands	r2, r1
 80061d2:	b2d2      	uxtb	r2, r2
 80061d4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061da:	1c5a      	adds	r2, r3, #1
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	3b01      	subs	r3, #1
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d177      	bne.n	80062ee <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006206:	e853 3f00 	ldrex	r3, [r3]
 800620a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800620c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800620e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006212:	653b      	str	r3, [r7, #80]	; 0x50
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	461a      	mov	r2, r3
 800621a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800621c:	647b      	str	r3, [r7, #68]	; 0x44
 800621e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006220:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006222:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006224:	e841 2300 	strex	r3, r2, [r1]
 8006228:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800622a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1e6      	bne.n	80061fe <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	3308      	adds	r3, #8
 8006236:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623a:	e853 3f00 	ldrex	r3, [r3]
 800623e:	623b      	str	r3, [r7, #32]
   return(result);
 8006240:	6a3b      	ldr	r3, [r7, #32]
 8006242:	f023 0301 	bic.w	r3, r3, #1
 8006246:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	3308      	adds	r3, #8
 800624e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006250:	633a      	str	r2, [r7, #48]	; 0x30
 8006252:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006254:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006258:	e841 2300 	strex	r3, r2, [r1]
 800625c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800625e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1e5      	bne.n	8006230 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2220      	movs	r2, #32
 8006268:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006274:	2b01      	cmp	r3, #1
 8006276:	d12e      	bne.n	80062d6 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	e853 3f00 	ldrex	r3, [r3]
 800628a:	60fb      	str	r3, [r7, #12]
   return(result);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f023 0310 	bic.w	r3, r3, #16
 8006292:	64bb      	str	r3, [r7, #72]	; 0x48
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	461a      	mov	r2, r3
 800629a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800629c:	61fb      	str	r3, [r7, #28]
 800629e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a0:	69b9      	ldr	r1, [r7, #24]
 80062a2:	69fa      	ldr	r2, [r7, #28]
 80062a4:	e841 2300 	strex	r3, r2, [r1]
 80062a8:	617b      	str	r3, [r7, #20]
   return(result);
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1e6      	bne.n	800627e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	69db      	ldr	r3, [r3, #28]
 80062b6:	f003 0310 	and.w	r3, r3, #16
 80062ba:	2b10      	cmp	r3, #16
 80062bc:	d103      	bne.n	80062c6 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2210      	movs	r2, #16
 80062c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80062cc:	4619      	mov	r1, r3
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7ff fa84 	bl	80057dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80062d4:	e00b      	b.n	80062ee <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f7f9 ff7c 	bl	80001d4 <HAL_UART_RxCpltCallback>
}
 80062dc:	e007      	b.n	80062ee <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	699a      	ldr	r2, [r3, #24]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f042 0208 	orr.w	r2, r2, #8
 80062ec:	619a      	str	r2, [r3, #24]
}
 80062ee:	bf00      	nop
 80062f0:	3758      	adds	r7, #88	; 0x58
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b096      	sub	sp, #88	; 0x58
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006304:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800630c:	2b22      	cmp	r3, #34	; 0x22
 800630e:	f040 8094 	bne.w	800643a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006318:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006320:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006322:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006326:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800632a:	4013      	ands	r3, r2
 800632c:	b29a      	uxth	r2, r3
 800632e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006330:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006336:	1c9a      	adds	r2, r3, #2
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006342:	b29b      	uxth	r3, r3
 8006344:	3b01      	subs	r3, #1
 8006346:	b29a      	uxth	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006354:	b29b      	uxth	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d177      	bne.n	800644a <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006362:	e853 3f00 	ldrex	r3, [r3]
 8006366:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800636e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	461a      	mov	r2, r3
 8006376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006378:	643b      	str	r3, [r7, #64]	; 0x40
 800637a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800637e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006380:	e841 2300 	strex	r3, r2, [r1]
 8006384:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1e6      	bne.n	800635a <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	3308      	adds	r3, #8
 8006392:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006394:	6a3b      	ldr	r3, [r7, #32]
 8006396:	e853 3f00 	ldrex	r3, [r3]
 800639a:	61fb      	str	r3, [r7, #28]
   return(result);
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	f023 0301 	bic.w	r3, r3, #1
 80063a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	3308      	adds	r3, #8
 80063aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063b4:	e841 2300 	strex	r3, r2, [r1]
 80063b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1e5      	bne.n	800638c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2220      	movs	r2, #32
 80063c4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d12e      	bne.n	8006432 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	e853 3f00 	ldrex	r3, [r3]
 80063e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	f023 0310 	bic.w	r3, r3, #16
 80063ee:	647b      	str	r3, [r7, #68]	; 0x44
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	461a      	mov	r2, r3
 80063f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063f8:	61bb      	str	r3, [r7, #24]
 80063fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fc:	6979      	ldr	r1, [r7, #20]
 80063fe:	69ba      	ldr	r2, [r7, #24]
 8006400:	e841 2300 	strex	r3, r2, [r1]
 8006404:	613b      	str	r3, [r7, #16]
   return(result);
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1e6      	bne.n	80063da <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	f003 0310 	and.w	r3, r3, #16
 8006416:	2b10      	cmp	r3, #16
 8006418:	d103      	bne.n	8006422 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2210      	movs	r2, #16
 8006420:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006428:	4619      	mov	r1, r3
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7ff f9d6 	bl	80057dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006430:	e00b      	b.n	800644a <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7f9 fece 	bl	80001d4 <HAL_UART_RxCpltCallback>
}
 8006438:	e007      	b.n	800644a <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	699a      	ldr	r2, [r3, #24]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f042 0208 	orr.w	r2, r2, #8
 8006448:	619a      	str	r2, [r3, #24]
}
 800644a:	bf00      	nop
 800644c:	3758      	adds	r7, #88	; 0x58
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006452:	b480      	push	{r7}
 8006454:	b083      	sub	sp, #12
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800645a:	bf00      	nop
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
	...

08006468 <__libc_init_array>:
 8006468:	b570      	push	{r4, r5, r6, lr}
 800646a:	4e0d      	ldr	r6, [pc, #52]	; (80064a0 <__libc_init_array+0x38>)
 800646c:	4c0d      	ldr	r4, [pc, #52]	; (80064a4 <__libc_init_array+0x3c>)
 800646e:	1ba4      	subs	r4, r4, r6
 8006470:	10a4      	asrs	r4, r4, #2
 8006472:	2500      	movs	r5, #0
 8006474:	42a5      	cmp	r5, r4
 8006476:	d109      	bne.n	800648c <__libc_init_array+0x24>
 8006478:	4e0b      	ldr	r6, [pc, #44]	; (80064a8 <__libc_init_array+0x40>)
 800647a:	4c0c      	ldr	r4, [pc, #48]	; (80064ac <__libc_init_array+0x44>)
 800647c:	f000 f820 	bl	80064c0 <_init>
 8006480:	1ba4      	subs	r4, r4, r6
 8006482:	10a4      	asrs	r4, r4, #2
 8006484:	2500      	movs	r5, #0
 8006486:	42a5      	cmp	r5, r4
 8006488:	d105      	bne.n	8006496 <__libc_init_array+0x2e>
 800648a:	bd70      	pop	{r4, r5, r6, pc}
 800648c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006490:	4798      	blx	r3
 8006492:	3501      	adds	r5, #1
 8006494:	e7ee      	b.n	8006474 <__libc_init_array+0xc>
 8006496:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800649a:	4798      	blx	r3
 800649c:	3501      	adds	r5, #1
 800649e:	e7f2      	b.n	8006486 <__libc_init_array+0x1e>
 80064a0:	08006570 	.word	0x08006570
 80064a4:	08006570 	.word	0x08006570
 80064a8:	08006570 	.word	0x08006570
 80064ac:	08006574 	.word	0x08006574

080064b0 <memset>:
 80064b0:	4402      	add	r2, r0
 80064b2:	4603      	mov	r3, r0
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d100      	bne.n	80064ba <memset+0xa>
 80064b8:	4770      	bx	lr
 80064ba:	f803 1b01 	strb.w	r1, [r3], #1
 80064be:	e7f9      	b.n	80064b4 <memset+0x4>

080064c0 <_init>:
 80064c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c2:	bf00      	nop
 80064c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064c6:	bc08      	pop	{r3}
 80064c8:	469e      	mov	lr, r3
 80064ca:	4770      	bx	lr

080064cc <_fini>:
 80064cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ce:	bf00      	nop
 80064d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064d2:	bc08      	pop	{r3}
 80064d4:	469e      	mov	lr, r3
 80064d6:	4770      	bx	lr
