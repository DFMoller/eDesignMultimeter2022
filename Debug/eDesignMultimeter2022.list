
eDesignMultimeter2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbe4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  0800bd80  0800bd80  0001bd80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1a0  0800c1a0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  0800c1a0  0800c1a0  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c1a0  0800c1a0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1a0  0800c1a0  0001c1a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c1a4  0800c1a4  0001c1a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800c1a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c9c  2000001c  0800c1c4  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cb8  0800c1c4  00020cb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bb7a  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000318e  00000000  00000000  0003bbc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014a0  00000000  00000000  0003ed58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001348  00000000  00000000  000401f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022f2b  00000000  00000000  00041540  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014bdf  00000000  00000000  0006446b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d645e  00000000  00000000  0007904a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014f4a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a74  00000000  00000000  0014f524  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000001c 	.word	0x2000001c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800bd64 	.word	0x0800bd64

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000020 	.word	0x20000020
 80001d4:	0800bd64 	.word	0x0800bd64

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <ADC_Main_Function>:
uint16_t millivolts;
uint16_t adc_array[1000];
uint16_t adc_count = 0;

void ADC_Main_Function()
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
	if(adc_count > 999)
 8000b7a:	4b5b      	ldr	r3, [pc, #364]	; (8000ce8 <ADC_Main_Function+0x174>)
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b82:	d37b      	bcc.n	8000c7c <ADC_Main_Function+0x108>
	{
		// Do calculations every 1000 readings
		adc_count = 0;
 8000b84:	4b58      	ldr	r3, [pc, #352]	; (8000ce8 <ADC_Main_Function+0x174>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	801a      	strh	r2, [r3, #0]
		uint32_t total = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
		uint16_t max = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	827b      	strh	r3, [r7, #18]
		uint16_t min = adc_array[99]; // arbitrary value
 8000b92:	4b56      	ldr	r3, [pc, #344]	; (8000cec <ADC_Main_Function+0x178>)
 8000b94:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8000b98:	823b      	strh	r3, [r7, #16]
		int16_t diff = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	807b      	strh	r3, [r7, #2]
		int16_t prev_diff = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	81fb      	strh	r3, [r7, #14]
		uint16_t mid_passes = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	81bb      	strh	r3, [r7, #12]
		// 1000 measurements at 5kHz take 200ms
		for(int x = 0; x < 1000; x++)
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	e023      	b.n	8000bf4 <ADC_Main_Function+0x80>
		{
			total += adc_array[x];
 8000bac:	4a4f      	ldr	r2, [pc, #316]	; (8000cec <ADC_Main_Function+0x178>)
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	4413      	add	r3, r2
 8000bba:	617b      	str	r3, [r7, #20]
			if(adc_array[x] > max)
 8000bbc:	4a4b      	ldr	r2, [pc, #300]	; (8000cec <ADC_Main_Function+0x178>)
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bc4:	8a7a      	ldrh	r2, [r7, #18]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d205      	bcs.n	8000bd6 <ADC_Main_Function+0x62>
			{
			  max = adc_array[x];
 8000bca:	4a48      	ldr	r2, [pc, #288]	; (8000cec <ADC_Main_Function+0x178>)
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bd2:	827b      	strh	r3, [r7, #18]
 8000bd4:	e00b      	b.n	8000bee <ADC_Main_Function+0x7a>
			}
			else if(adc_array[x] < min)
 8000bd6:	4a45      	ldr	r2, [pc, #276]	; (8000cec <ADC_Main_Function+0x178>)
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bde:	8a3a      	ldrh	r2, [r7, #16]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d904      	bls.n	8000bee <ADC_Main_Function+0x7a>
			{
			  min = adc_array[x];
 8000be4:	4a41      	ldr	r2, [pc, #260]	; (8000cec <ADC_Main_Function+0x178>)
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bec:	823b      	strh	r3, [r7, #16]
		for(int x = 0; x < 1000; x++)
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000bfa:	dbd7      	blt.n	8000bac <ADC_Main_Function+0x38>
			}
		}
		MeasurementState.Offset = total/1000;
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	4a3c      	ldr	r2, [pc, #240]	; (8000cf0 <ADC_Main_Function+0x17c>)
 8000c00:	fba2 2303 	umull	r2, r3, r2, r3
 8000c04:	099b      	lsrs	r3, r3, #6
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	4b3a      	ldr	r3, [pc, #232]	; (8000cf4 <ADC_Main_Function+0x180>)
 8000c0a:	811a      	strh	r2, [r3, #8]
		for(int x = 0; x < 1000; x++)
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	e018      	b.n	8000c44 <ADC_Main_Function+0xd0>
		{
			// Calculate frequency
			diff = adc_array[x] - MeasurementState.Offset;
 8000c12:	4a36      	ldr	r2, [pc, #216]	; (8000cec <ADC_Main_Function+0x178>)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000c1a:	4b36      	ldr	r3, [pc, #216]	; (8000cf4 <ADC_Main_Function+0x180>)
 8000c1c:	891b      	ldrh	r3, [r3, #8]
 8000c1e:	1ad3      	subs	r3, r2, r3
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	807b      	strh	r3, [r7, #2]
			if(diff > 0 && prev_diff < 0)
 8000c24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	dd06      	ble.n	8000c3a <ADC_Main_Function+0xc6>
 8000c2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	da02      	bge.n	8000c3a <ADC_Main_Function+0xc6>
			{
			  mid_passes++;
 8000c34:	89bb      	ldrh	r3, [r7, #12]
 8000c36:	3301      	adds	r3, #1
 8000c38:	81bb      	strh	r3, [r7, #12]
			}
			prev_diff = diff;
 8000c3a:	887b      	ldrh	r3, [r7, #2]
 8000c3c:	81fb      	strh	r3, [r7, #14]
		for(int x = 0; x < 1000; x++)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	3301      	adds	r3, #1
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c4a:	dbe2      	blt.n	8000c12 <ADC_Main_Function+0x9e>
		}
		MeasurementState.Period = 50000/(mid_passes);
 8000c4c:	89bb      	ldrh	r3, [r7, #12]
 8000c4e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000c52:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	4b26      	ldr	r3, [pc, #152]	; (8000cf4 <ADC_Main_Function+0x180>)
 8000c5a:	80da      	strh	r2, [r3, #6]
		MeasurementState.Frequency = 1000000/MeasurementState.Period;
 8000c5c:	4b25      	ldr	r3, [pc, #148]	; (8000cf4 <ADC_Main_Function+0x180>)
 8000c5e:	88db      	ldrh	r3, [r3, #6]
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b25      	ldr	r3, [pc, #148]	; (8000cf8 <ADC_Main_Function+0x184>)
 8000c64:	fb93 f3f2 	sdiv	r3, r3, r2
 8000c68:	b29a      	uxth	r2, r3
 8000c6a:	4b22      	ldr	r3, [pc, #136]	; (8000cf4 <ADC_Main_Function+0x180>)
 8000c6c:	809a      	strh	r2, [r3, #4]
		MeasurementState.Amplitude = max - min;
 8000c6e:	8a7a      	ldrh	r2, [r7, #18]
 8000c70:	8a3b      	ldrh	r3, [r7, #16]
 8000c72:	1ad3      	subs	r3, r2, r3
 8000c74:	b29a      	uxth	r2, r3
 8000c76:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <ADC_Main_Function+0x180>)
 8000c78:	805a      	strh	r2, [r3, #2]
		millivolts = raw*3300/4095;
//		millivolts += 100*millivolts/1000; // Calibration
		adc_array[adc_count] = millivolts;
		adc_count++;
	}
}
 8000c7a:	e030      	b.n	8000cde <ADC_Main_Function+0x16a>
		HAL_ADC_Start(&hadc1);
 8000c7c:	481f      	ldr	r0, [pc, #124]	; (8000cfc <ADC_Main_Function+0x188>)
 8000c7e:	f004 f967 	bl	8004f50 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000c82:	f04f 31ff 	mov.w	r1, #4294967295
 8000c86:	481d      	ldr	r0, [pc, #116]	; (8000cfc <ADC_Main_Function+0x188>)
 8000c88:	f004 faae 	bl	80051e8 <HAL_ADC_PollForConversion>
		raw = HAL_ADC_GetValue(&hadc1);
 8000c8c:	481b      	ldr	r0, [pc, #108]	; (8000cfc <ADC_Main_Function+0x188>)
 8000c8e:	f004 fbad 	bl	80053ec <HAL_ADC_GetValue>
 8000c92:	4603      	mov	r3, r0
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <ADC_Main_Function+0x18c>)
 8000c98:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop(&hadc1);
 8000c9a:	4818      	ldr	r0, [pc, #96]	; (8000cfc <ADC_Main_Function+0x188>)
 8000c9c:	f004 fa6e 	bl	800517c <HAL_ADC_Stop>
		millivolts = raw*3300/4095;
 8000ca0:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <ADC_Main_Function+0x18c>)
 8000ca2:	881b      	ldrh	r3, [r3, #0]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	f640 43e4 	movw	r3, #3300	; 0xce4
 8000caa:	fb03 f302 	mul.w	r3, r3, r2
 8000cae:	4a15      	ldr	r2, [pc, #84]	; (8000d04 <ADC_Main_Function+0x190>)
 8000cb0:	fb82 1203 	smull	r1, r2, r2, r3
 8000cb4:	441a      	add	r2, r3
 8000cb6:	12d2      	asrs	r2, r2, #11
 8000cb8:	17db      	asrs	r3, r3, #31
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <ADC_Main_Function+0x194>)
 8000cc0:	801a      	strh	r2, [r3, #0]
		adc_array[adc_count] = millivolts;
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <ADC_Main_Function+0x174>)
 8000cc4:	881b      	ldrh	r3, [r3, #0]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <ADC_Main_Function+0x194>)
 8000cca:	8819      	ldrh	r1, [r3, #0]
 8000ccc:	4b07      	ldr	r3, [pc, #28]	; (8000cec <ADC_Main_Function+0x178>)
 8000cce:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		adc_count++;
 8000cd2:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <ADC_Main_Function+0x174>)
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <ADC_Main_Function+0x174>)
 8000cdc:	801a      	strh	r2, [r3, #0]
}
 8000cde:	bf00      	nop
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000038 	.word	0x20000038
 8000cec:	20000048 	.word	0x20000048
 8000cf0:	10624dd3 	.word	0x10624dd3
 8000cf4:	2000081c 	.word	0x2000081c
 8000cf8:	000f4240 	.word	0x000f4240
 8000cfc:	20000b38 	.word	0x20000b38
 8000d00:	20000818 	.word	0x20000818
 8000d04:	80080081 	.word	0x80080081
 8000d08:	2000081a 	.word	0x2000081a

08000d0c <DAC_Calculate_Buffer>:
extern DAC_HandleTypeDef hdac1;

OutputStateType OutputState;

void DAC_Calculate_Buffer()
{
 8000d0c:	b590      	push	{r4, r7, lr}
 8000d0e:	ed2d 8b02 	vpush	{d8}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
	if(OutputState.Mode == d)
 8000d16:	4b5a      	ldr	r3, [pc, #360]	; (8000e80 <DAC_Calculate_Buffer+0x174>)
 8000d18:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 8000d1c:	2b64      	cmp	r3, #100	; 0x64
 8000d1e:	d11c      	bne.n	8000d5a <DAC_Calculate_Buffer+0x4e>
	{
		for(int i=0; i<100; i++)
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	e015      	b.n	8000d52 <DAC_Calculate_Buffer+0x46>
		{
			OutputState.Buffer[i] = (float)((float)(OutputState.Offset) * (float)(4096/3300) * (float)((float)(1000 / 600) / 2));
 8000d26:	4b56      	ldr	r3, [pc, #344]	; (8000e80 <DAC_Calculate_Buffer+0x174>)
 8000d28:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8000d2c:	ee07 3a90 	vmov	s15, r3
 8000d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d34:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000d38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d40:	ee17 1a90 	vmov	r1, s15
 8000d44:	4a4e      	ldr	r2, [pc, #312]	; (8000e80 <DAC_Calculate_Buffer+0x174>)
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i=0; i<100; i++)
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	2b63      	cmp	r3, #99	; 0x63
 8000d56:	dde6      	ble.n	8000d26 <DAC_Calculate_Buffer+0x1a>
				OutputState.Buffer[i] = OutputState.Offset * 4096/3300;
			}

		}
	}
}
 8000d58:	e08b      	b.n	8000e72 <DAC_Calculate_Buffer+0x166>
	else if (OutputState.Mode == s)
 8000d5a:	4b49      	ldr	r3, [pc, #292]	; (8000e80 <DAC_Calculate_Buffer+0x174>)
 8000d5c:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 8000d60:	2b73      	cmp	r3, #115	; 0x73
 8000d62:	d14b      	bne.n	8000dfc <DAC_Calculate_Buffer+0xf0>
		for(int i=0; i<100; i++)
 8000d64:	2300      	movs	r3, #0
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	e044      	b.n	8000df4 <DAC_Calculate_Buffer+0xe8>
			OutputState.Buffer[i] = ((float)((float)OutputState.Amplitude/2)*(float)sin(i*2*(float)(PI/100)) + (float)((float)OutputState.Offset * (float)0.85))*((float)(4096/3300)) * (float)((float)(1.165) / 2);
 8000d6a:	4b45      	ldr	r3, [pc, #276]	; (8000e80 <DAC_Calculate_Buffer+0x174>)
 8000d6c:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8000d70:	ee07 3a90 	vmov	s15, r3
 8000d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d78:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000d7c:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	ee07 3a90 	vmov	s15, r3
 8000d88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d8c:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8000e84 <DAC_Calculate_Buffer+0x178>
 8000d90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d94:	ee17 0a90 	vmov	r0, s15
 8000d98:	f7ff fb82 	bl	80004a0 <__aeabi_f2d>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	460c      	mov	r4, r1
 8000da0:	ec44 3b10 	vmov	d0, r3, r4
 8000da4:	f009 ffcc 	bl	800ad40 <sin>
 8000da8:	ec54 3b10 	vmov	r3, r4, d0
 8000dac:	4618      	mov	r0, r3
 8000dae:	4621      	mov	r1, r4
 8000db0:	f7ff fe90 	bl	8000ad4 <__aeabi_d2f>
 8000db4:	ee07 0a90 	vmov	s15, r0
 8000db8:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000dbc:	4b30      	ldr	r3, [pc, #192]	; (8000e80 <DAC_Calculate_Buffer+0x174>)
 8000dbe:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8000dc2:	ee07 3a90 	vmov	s15, r3
 8000dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dca:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8000e88 <DAC_Calculate_Buffer+0x17c>
 8000dce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000dd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dd6:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8000e8c <DAC_Calculate_Buffer+0x180>
 8000dda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000de2:	ee17 1a90 	vmov	r1, s15
 8000de6:	4a26      	ldr	r2, [pc, #152]	; (8000e80 <DAC_Calculate_Buffer+0x174>)
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i=0; i<100; i++)
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	3301      	adds	r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	2b63      	cmp	r3, #99	; 0x63
 8000df8:	ddb7      	ble.n	8000d6a <DAC_Calculate_Buffer+0x5e>
}
 8000dfa:	e03a      	b.n	8000e72 <DAC_Calculate_Buffer+0x166>
	else if (OutputState.Mode == p)
 8000dfc:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <DAC_Calculate_Buffer+0x174>)
 8000dfe:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 8000e02:	2b70      	cmp	r3, #112	; 0x70
 8000e04:	d135      	bne.n	8000e72 <DAC_Calculate_Buffer+0x166>
		for(int i=0; i<100; i++)
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	e02f      	b.n	8000e6c <DAC_Calculate_Buffer+0x160>
			if(i < OutputState.DutyCycle)
 8000e0c:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <DAC_Calculate_Buffer+0x174>)
 8000e0e:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8000e12:	461a      	mov	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4293      	cmp	r3, r2
 8000e18:	da15      	bge.n	8000e46 <DAC_Calculate_Buffer+0x13a>
				OutputState.Buffer[i] = (OutputState.Offset + OutputState.Amplitude) * 4096/3300;
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <DAC_Calculate_Buffer+0x174>)
 8000e1c:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <DAC_Calculate_Buffer+0x174>)
 8000e24:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8000e28:	4413      	add	r3, r2
 8000e2a:	031b      	lsls	r3, r3, #12
 8000e2c:	4a18      	ldr	r2, [pc, #96]	; (8000e90 <DAC_Calculate_Buffer+0x184>)
 8000e2e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e32:	441a      	add	r2, r3
 8000e34:	12d2      	asrs	r2, r2, #11
 8000e36:	17db      	asrs	r3, r3, #31
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4a10      	ldr	r2, [pc, #64]	; (8000e80 <DAC_Calculate_Buffer+0x174>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000e44:	e00f      	b.n	8000e66 <DAC_Calculate_Buffer+0x15a>
				OutputState.Buffer[i] = OutputState.Offset * 4096/3300;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <DAC_Calculate_Buffer+0x174>)
 8000e48:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8000e4c:	031b      	lsls	r3, r3, #12
 8000e4e:	4a10      	ldr	r2, [pc, #64]	; (8000e90 <DAC_Calculate_Buffer+0x184>)
 8000e50:	fb82 1203 	smull	r1, r2, r2, r3
 8000e54:	441a      	add	r2, r3
 8000e56:	12d2      	asrs	r2, r2, #11
 8000e58:	17db      	asrs	r3, r3, #31
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4a08      	ldr	r2, [pc, #32]	; (8000e80 <DAC_Calculate_Buffer+0x174>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i=0; i<100; i++)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b63      	cmp	r3, #99	; 0x63
 8000e70:	ddcc      	ble.n	8000e0c <DAC_Calculate_Buffer+0x100>
}
 8000e72:	bf00      	nop
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	ecbd 8b02 	vpop	{d8}
 8000e7c:	bd90      	pop	{r4, r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000828 	.word	0x20000828
 8000e84:	3d00adfc 	.word	0x3d00adfc
 8000e88:	3f59999a 	.word	0x3f59999a
 8000e8c:	3f151eb8 	.word	0x3f151eb8
 8000e90:	9ee009ef 	.word	0x9ee009ef

08000e94 <DAC_Set_Output_Frequency>:

void DAC_Set_Output_Frequency()
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
	OutputState.ARR_Val = OutputState.TIM2_Clock / (OutputState.Frequency*100);
 8000e98:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <DAC_Set_Output_Frequency+0x5c>)
 8000e9a:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8000e9e:	4a14      	ldr	r2, [pc, #80]	; (8000ef0 <DAC_Set_Output_Frequency+0x5c>)
 8000ea0:	f8b2 2198 	ldrh.w	r2, [r2, #408]	; 0x198
 8000ea4:	4611      	mov	r1, r2
 8000ea6:	2264      	movs	r2, #100	; 0x64
 8000ea8:	fb02 f201 	mul.w	r2, r2, r1
 8000eac:	fbb3 f3f2 	udiv	r3, r3, r2
 8000eb0:	4a0f      	ldr	r2, [pc, #60]	; (8000ef0 <DAC_Set_Output_Frequency+0x5c>)
 8000eb2:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
	__HAL_TIM_SET_AUTORELOAD(&htim2, OutputState.ARR_Val);
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <DAC_Set_Output_Frequency+0x60>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a0d      	ldr	r2, [pc, #52]	; (8000ef0 <DAC_Set_Output_Frequency+0x5c>)
 8000ebc:	f8d2 21a0 	ldr.w	r2, [r2, #416]	; 0x1a0
 8000ec0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <DAC_Set_Output_Frequency+0x5c>)
 8000ec4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000ec8:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <DAC_Set_Output_Frequency+0x60>)
 8000eca:	60d3      	str	r3, [r2, #12]
	TIM2->CR1 = 0;				// 	Disable Timer
 8000ecc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
	TIM2->EGR = TIM_EGR_UG;		//	Init registers
 8000ed4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ed8:	2201      	movs	r2, #1
 8000eda:	615a      	str	r2, [r3, #20]
	TIM2->CR1 = 1;				// 	Start
 8000edc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	601a      	str	r2, [r3, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000828 	.word	0x20000828
 8000ef4:	20000b88 	.word	0x20000b88

08000ef8 <DAC_Start>:

void DAC_Start()
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af02      	add	r7, sp, #8

	DAC_Calculate_Buffer();
 8000efe:	f7ff ff05 	bl	8000d0c <DAC_Calculate_Buffer>
	DAC_Set_Output_Frequency();
 8000f02:	f7ff ffc7 	bl	8000e94 <DAC_Set_Output_Frequency>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, OutputState.Buffer, 100, DAC_ALIGN_12B_R);
 8000f06:	2300      	movs	r3, #0
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	2364      	movs	r3, #100	; 0x64
 8000f0c:	4a09      	ldr	r2, [pc, #36]	; (8000f34 <DAC_Start+0x3c>)
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4809      	ldr	r0, [pc, #36]	; (8000f38 <DAC_Start+0x40>)
 8000f12:	f005 f977 	bl	8006204 <HAL_DAC_Start_DMA>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 8000f16:	2201      	movs	r2, #1
 8000f18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f20:	f005 fec2 	bl	8006ca8 <HAL_GPIO_WritePin>
	OutputState.On = true;
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <DAC_Start+0x3c>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000828 	.word	0x20000828
 8000f38:	200009fc 	.word	0x200009fc

08000f3c <DAC_Stop>:

void DAC_Stop()
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	OutputState.On = false;
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <DAC_Stop+0x28>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4807      	ldr	r0, [pc, #28]	; (8000f68 <DAC_Stop+0x2c>)
 8000f4c:	f005 f8eb 	bl	8006126 <HAL_DAC_Stop_DMA>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5a:	f005 fea5 	bl	8006ca8 <HAL_GPIO_WritePin>
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000828 	.word	0x20000828
 8000f68:	200009fc 	.word	0x200009fc

08000f6c <DAC_Update_Output>:

void DAC_Update_Output()
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	DAC_Stop();
 8000f70:	f7ff ffe4 	bl	8000f3c <DAC_Stop>
	DAC_Start();
 8000f74:	f7ff ffc0 	bl	8000ef8 <DAC_Start>
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <Init_Current_Sensor>:

uint8_t i2cdata[10];
HAL_StatusTypeDef res;

void Init_Current_Sensor()
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af02      	add	r7, sp, #8
	i2cdata[0] = ConfigureRegister_Address;
 8000f82:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <Init_Current_Sensor+0x54>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]
	i2cdata[1] = Configuration_Byte1;
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <Init_Current_Sensor+0x54>)
 8000f8a:	2239      	movs	r2, #57	; 0x39
 8000f8c:	705a      	strb	r2, [r3, #1]
	i2cdata[2] = Configuration_Byte2;
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <Init_Current_Sensor+0x54>)
 8000f90:	229f      	movs	r2, #159	; 0x9f
 8000f92:	709a      	strb	r2, [r3, #2]
	res = HAL_I2C_Master_Transmit(&hi2c1, CurrentSensor_Address, i2cdata, 3, 10);
 8000f94:	230a      	movs	r3, #10
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	2303      	movs	r3, #3
 8000f9a:	4a0d      	ldr	r2, [pc, #52]	; (8000fd0 <Init_Current_Sensor+0x54>)
 8000f9c:	2180      	movs	r1, #128	; 0x80
 8000f9e:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <Init_Current_Sensor+0x58>)
 8000fa0:	f005 ff42 	bl	8006e28 <HAL_I2C_Master_Transmit>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <Init_Current_Sensor+0x5c>)
 8000faa:	701a      	strb	r2, [r3, #0]
	if(res != HAL_OK)
 8000fac:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <Init_Current_Sensor+0x5c>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d00a      	beq.n	8000fca <Init_Current_Sensor+0x4e>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)"I2C Configuration Transmit Error!\n", 34, 10);
 8000fb4:	230a      	movs	r3, #10
 8000fb6:	2222      	movs	r2, #34	; 0x22
 8000fb8:	4908      	ldr	r1, [pc, #32]	; (8000fdc <Init_Current_Sensor+0x60>)
 8000fba:	4809      	ldr	r0, [pc, #36]	; (8000fe0 <Init_Current_Sensor+0x64>)
 8000fbc:	f008 fc76 	bl	80098ac <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, UartState.rx_byte, 1);
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4908      	ldr	r1, [pc, #32]	; (8000fe4 <Init_Current_Sensor+0x68>)
 8000fc4:	4806      	ldr	r0, [pc, #24]	; (8000fe0 <Init_Current_Sensor+0x64>)
 8000fc6:	f008 fd05 	bl	80099d4 <HAL_UART_Receive_IT>
	}
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	200009d8 	.word	0x200009d8
 8000fd4:	20000a10 	.word	0x20000a10
 8000fd8:	200009e2 	.word	0x200009e2
 8000fdc:	0800bd80 	.word	0x0800bd80
 8000fe0:	20000bd4 	.word	0x20000bd4
 8000fe4:	20000ca4 	.word	0x20000ca4

08000fe8 <Read_Current>:

void Read_Current()
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af02      	add	r7, sp, #8

		// Set Pointer to Shunt Voltage Register
		i2cdata[0] = ShuntVoltage_Address;
 8000fee:	4b34      	ldr	r3, [pc, #208]	; (80010c0 <Read_Current+0xd8>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	701a      	strb	r2, [r3, #0]
		res = HAL_I2C_Master_Transmit(&hi2c1, CurrentSensor_Address, i2cdata, 1, 10);
 8000ff4:	230a      	movs	r3, #10
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	4a31      	ldr	r2, [pc, #196]	; (80010c0 <Read_Current+0xd8>)
 8000ffc:	2180      	movs	r1, #128	; 0x80
 8000ffe:	4831      	ldr	r0, [pc, #196]	; (80010c4 <Read_Current+0xdc>)
 8001000:	f005 ff12 	bl	8006e28 <HAL_I2C_Master_Transmit>
 8001004:	4603      	mov	r3, r0
 8001006:	461a      	mov	r2, r3
 8001008:	4b2f      	ldr	r3, [pc, #188]	; (80010c8 <Read_Current+0xe0>)
 800100a:	701a      	strb	r2, [r3, #0]
		if(res != HAL_OK)
 800100c:	4b2e      	ldr	r3, [pc, #184]	; (80010c8 <Read_Current+0xe0>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d00a      	beq.n	800102a <Read_Current+0x42>
		{
			HAL_UART_Transmit(&huart2, (uint8_t*)"I2C Transmit Pointer Change Error!\n", 35, 10);
 8001014:	230a      	movs	r3, #10
 8001016:	2223      	movs	r2, #35	; 0x23
 8001018:	492c      	ldr	r1, [pc, #176]	; (80010cc <Read_Current+0xe4>)
 800101a:	482d      	ldr	r0, [pc, #180]	; (80010d0 <Read_Current+0xe8>)
 800101c:	f008 fc46 	bl	80098ac <HAL_UART_Transmit>
			HAL_UART_Receive_IT(&huart2, UartState.rx_byte, 1);
 8001020:	2201      	movs	r2, #1
 8001022:	492c      	ldr	r1, [pc, #176]	; (80010d4 <Read_Current+0xec>)
 8001024:	482a      	ldr	r0, [pc, #168]	; (80010d0 <Read_Current+0xe8>)
 8001026:	f008 fcd5 	bl	80099d4 <HAL_UART_Receive_IT>
		}

		// Read Current
		uint8_t bytes[2] = {0};
 800102a:	2300      	movs	r3, #0
 800102c:	803b      	strh	r3, [r7, #0]
		res = HAL_I2C_Master_Receive(&hi2c1, CurrentSensor_Address, bytes, 2, 10);
 800102e:	463a      	mov	r2, r7
 8001030:	230a      	movs	r3, #10
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2302      	movs	r3, #2
 8001036:	2180      	movs	r1, #128	; 0x80
 8001038:	4822      	ldr	r0, [pc, #136]	; (80010c4 <Read_Current+0xdc>)
 800103a:	f005 ffe9 	bl	8007010 <HAL_I2C_Master_Receive>
 800103e:	4603      	mov	r3, r0
 8001040:	461a      	mov	r2, r3
 8001042:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <Read_Current+0xe0>)
 8001044:	701a      	strb	r2, [r3, #0]
		if(res != HAL_OK)
 8001046:	4b20      	ldr	r3, [pc, #128]	; (80010c8 <Read_Current+0xe0>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00a      	beq.n	8001064 <Read_Current+0x7c>
		{
			HAL_UART_Transmit(&huart2, (uint8_t*)"I2C Receive Error!\n", 19, 10);
 800104e:	230a      	movs	r3, #10
 8001050:	2213      	movs	r2, #19
 8001052:	4921      	ldr	r1, [pc, #132]	; (80010d8 <Read_Current+0xf0>)
 8001054:	481e      	ldr	r0, [pc, #120]	; (80010d0 <Read_Current+0xe8>)
 8001056:	f008 fc29 	bl	80098ac <HAL_UART_Transmit>
			HAL_UART_Receive_IT(&huart2, UartState.rx_byte, 1);
 800105a:	2201      	movs	r2, #1
 800105c:	491d      	ldr	r1, [pc, #116]	; (80010d4 <Read_Current+0xec>)
 800105e:	481c      	ldr	r0, [pc, #112]	; (80010d0 <Read_Current+0xe8>)
 8001060:	f008 fcb8 	bl	80099d4 <HAL_UART_Receive_IT>
		}

		int number;
		uint8_t upper = bytes[0];
 8001064:	783b      	ldrb	r3, [r7, #0]
 8001066:	70fb      	strb	r3, [r7, #3]
		uint8_t lower = bytes[1];
 8001068:	787b      	ldrb	r3, [r7, #1]
 800106a:	70bb      	strb	r3, [r7, #2]
		if(bytes[0] & (1 << 7))
 800106c:	783b      	ldrb	r3, [r7, #0]
 800106e:	b25b      	sxtb	r3, r3
 8001070:	2b00      	cmp	r3, #0
 8001072:	da0e      	bge.n	8001092 <Read_Current+0xaa>
		{
			// Two's complement Negative
			upper = ~upper;
 8001074:	78fb      	ldrb	r3, [r7, #3]
 8001076:	43db      	mvns	r3, r3
 8001078:	70fb      	strb	r3, [r7, #3]
			lower = ~lower;
 800107a:	78bb      	ldrb	r3, [r7, #2]
 800107c:	43db      	mvns	r3, r3
 800107e:	70bb      	strb	r3, [r7, #2]
			number = -1 * (((upper << 8) | lower) + 1);
 8001080:	78fb      	ldrb	r3, [r7, #3]
 8001082:	021a      	lsls	r2, r3, #8
 8001084:	78bb      	ldrb	r3, [r7, #2]
 8001086:	4313      	orrs	r3, r2
 8001088:	43db      	mvns	r3, r3
 800108a:	607b      	str	r3, [r7, #4]
			number = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	e004      	b.n	800109c <Read_Current+0xb4>
		}
		else
		{
			number = (upper << 8) | lower;
 8001092:	78fb      	ldrb	r3, [r7, #3]
 8001094:	021a      	lsls	r2, r3, #8
 8001096:	78bb      	ldrb	r3, [r7, #2]
 8001098:	4313      	orrs	r3, r2
 800109a:	607b      	str	r3, [r7, #4]
		}
		CurrentState.Offset = number*100; // uA
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	461a      	mov	r2, r3
 80010a2:	0092      	lsls	r2, r2, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	461a      	mov	r2, r3
 80010a8:	0091      	lsls	r1, r2, #2
 80010aa:	461a      	mov	r2, r3
 80010ac:	460b      	mov	r3, r1
 80010ae:	4413      	add	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <Read_Current+0xf4>)
 80010b6:	811a      	strh	r2, [r3, #8]
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	200009d8 	.word	0x200009d8
 80010c4:	20000a10 	.word	0x20000a10
 80010c8:	200009e2 	.word	0x200009e2
 80010cc:	0800bda4 	.word	0x0800bda4
 80010d0:	20000bd4 	.word	0x20000bd4
 80010d4:	20000ca4 	.word	0x20000ca4
 80010d8:	0800bdc8 	.word	0x0800bdc8
 80010dc:	200009e4 	.word	0x200009e4

080010e0 <LCD_Init>:
#define lcd_D7_bit			12

DisplayStateType DisplayState;

void LCD_Init()
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	HAL_Delay(20);
 80010e4:	2014      	movs	r0, #20
 80010e6:	f003 fd17 	bl	8004b18 <HAL_Delay>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionReset);
 80010ea:	2030      	movs	r0, #48	; 0x30
 80010ec:	f000 f95c 	bl	80013a8 <LCD_Write_8bitInstruction>
	HAL_Delay(5);
 80010f0:	2005      	movs	r0, #5
 80010f2:	f003 fd11 	bl	8004b18 <HAL_Delay>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionReset);
 80010f6:	2030      	movs	r0, #48	; 0x30
 80010f8:	f000 f956 	bl	80013a8 <LCD_Write_8bitInstruction>
	Delay_us_10(11);
 80010fc:	200b      	movs	r0, #11
 80010fe:	f002 fee3 	bl	8003ec8 <Delay_us_10>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionReset);
 8001102:	2030      	movs	r0, #48	; 0x30
 8001104:	f000 f950 	bl	80013a8 <LCD_Write_8bitInstruction>
	Delay_us_10(5);
 8001108:	2005      	movs	r0, #5
 800110a:	f002 fedd 	bl	8003ec8 <Delay_us_10>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionSet4bit);
 800110e:	2028      	movs	r0, #40	; 0x28
 8001110:	f000 f94a 	bl	80013a8 <LCD_Write_8bitInstruction>
	Delay_us_10(5);
 8001114:	2005      	movs	r0, #5
 8001116:	f002 fed7 	bl	8003ec8 <Delay_us_10>

	LCD_Write_Instruction(lcd_instruction_FunctionSet4bit);
 800111a:	2028      	movs	r0, #40	; 0x28
 800111c:	f000 f89c 	bl	8001258 <LCD_Write_Instruction>
	Delay_us_10(5);
 8001120:	2005      	movs	r0, #5
 8001122:	f002 fed1 	bl	8003ec8 <Delay_us_10>

	LCD_Write_Instruction(lcd_instruction_DisplayOn);
 8001126:	200f      	movs	r0, #15
 8001128:	f000 f896 	bl	8001258 <LCD_Write_Instruction>
	Delay_us_10(5);
 800112c:	2005      	movs	r0, #5
 800112e:	f002 fecb 	bl	8003ec8 <Delay_us_10>

	LCD_Write_Instruction(lcd_instruction_ClearDisplay);
 8001132:	2001      	movs	r0, #1
 8001134:	f000 f890 	bl	8001258 <LCD_Write_Instruction>
	HAL_Delay(2);
 8001138:	2002      	movs	r0, #2
 800113a:	f003 fced 	bl	8004b18 <HAL_Delay>

	LCD_Write_Instruction(lcd_instruction_EntryMode);
 800113e:	2006      	movs	r0, #6
 8001140:	f000 f88a 	bl	8001258 <LCD_Write_Instruction>
	Delay_us_10(5);
 8001144:	2005      	movs	r0, #5
 8001146:	f002 febf 	bl	8003ec8 <Delay_us_10>
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}

0800114e <LCD_Write_String>:

void LCD_Write_String(uint8_t string[])
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b084      	sub	sp, #16
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
//	HAL_Delay(1);
	int i = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
	while (string[i] != 0)
 800115a:	e009      	b.n	8001170 <LCD_Write_String+0x22>
	{
		LCD_Write_Character(string[i]);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	4618      	mov	r0, r3
 8001166:	f000 f84b 	bl	8001200 <LCD_Write_Character>
		i++;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	3301      	adds	r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
	while (string[i] != 0)
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1ef      	bne.n	800115c <LCD_Write_String+0xe>
//		HAL_Delay(1);
	}
}
 800117c:	bf00      	nop
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <LCD_Write_Character_Shift>:

void LCD_Write_Character_Shift(uint8_t character)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
	lcd_RS_GPIO_Port->ODR |= (1<<lcd_RS_bit);			// select data register (RS High)
 800118e:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <LCD_Write_Character_Shift+0x74>)
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	4a19      	ldr	r2, [pc, #100]	; (80011f8 <LCD_Write_Character_Shift+0x74>)
 8001194:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001198:	6153      	str	r3, [r2, #20]
	LCD_Write_Nibbles(character);
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	4618      	mov	r0, r3
 800119e:	f000 f871 	bl	8001284 <LCD_Write_Nibbles>
	if(DisplayState.CurrentLine == Topline){
 80011a2:	4b16      	ldr	r3, [pc, #88]	; (80011fc <LCD_Write_Character_Shift+0x78>)
 80011a4:	789b      	ldrb	r3, [r3, #2]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d106      	bne.n	80011b8 <LCD_Write_Character_Shift+0x34>
		DisplayState.ToplineCharacters ++;
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <LCD_Write_Character_Shift+0x78>)
 80011ac:	791b      	ldrb	r3, [r3, #4]
 80011ae:	3301      	adds	r3, #1
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <LCD_Write_Character_Shift+0x78>)
 80011b4:	711a      	strb	r2, [r3, #4]
 80011b6:	e009      	b.n	80011cc <LCD_Write_Character_Shift+0x48>
	} else if (DisplayState.CurrentLine == Bottomline){
 80011b8:	4b10      	ldr	r3, [pc, #64]	; (80011fc <LCD_Write_Character_Shift+0x78>)
 80011ba:	789b      	ldrb	r3, [r3, #2]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d105      	bne.n	80011cc <LCD_Write_Character_Shift+0x48>
		DisplayState.BottomlineCharacters ++;
 80011c0:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <LCD_Write_Character_Shift+0x78>)
 80011c2:	795b      	ldrb	r3, [r3, #5]
 80011c4:	3301      	adds	r3, #1
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <LCD_Write_Character_Shift+0x78>)
 80011ca:	715a      	strb	r2, [r3, #5]
	}
	if((DisplayState.CurrentLine == Topline && DisplayState.ToplineCharacters > 15)
 80011cc:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <LCD_Write_Character_Shift+0x78>)
 80011ce:	789b      	ldrb	r3, [r3, #2]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d103      	bne.n	80011dc <LCD_Write_Character_Shift+0x58>
 80011d4:	4b09      	ldr	r3, [pc, #36]	; (80011fc <LCD_Write_Character_Shift+0x78>)
 80011d6:	791b      	ldrb	r3, [r3, #4]
 80011d8:	2b0f      	cmp	r3, #15
 80011da:	d807      	bhi.n	80011ec <LCD_Write_Character_Shift+0x68>
			|| (DisplayState.CurrentLine == Bottomline && DisplayState.BottomlineCharacters > 15))
 80011dc:	4b07      	ldr	r3, [pc, #28]	; (80011fc <LCD_Write_Character_Shift+0x78>)
 80011de:	789b      	ldrb	r3, [r3, #2]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d105      	bne.n	80011f0 <LCD_Write_Character_Shift+0x6c>
 80011e4:	4b05      	ldr	r3, [pc, #20]	; (80011fc <LCD_Write_Character_Shift+0x78>)
 80011e6:	795b      	ldrb	r3, [r3, #5]
 80011e8:	2b0f      	cmp	r3, #15
 80011ea:	d901      	bls.n	80011f0 <LCD_Write_Character_Shift+0x6c>
	{
		// Scroll Screen
		LCD_Shift_Left();
 80011ec:	f000 f9ac 	bl	8001548 <LCD_Shift_Left>
	}
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	48000400 	.word	0x48000400
 80011fc:	200009f0 	.word	0x200009f0

08001200 <LCD_Write_Character>:

void LCD_Write_Character(uint8_t character)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
	lcd_RS_GPIO_Port->ODR |= (1<<lcd_RS_bit);			// select data register (RS High)
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <LCD_Write_Character+0x50>)
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	4a10      	ldr	r2, [pc, #64]	; (8001250 <LCD_Write_Character+0x50>)
 8001210:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001214:	6153      	str	r3, [r2, #20]
	LCD_Write_Nibbles(character);
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	4618      	mov	r0, r3
 800121a:	f000 f833 	bl	8001284 <LCD_Write_Nibbles>
	if(DisplayState.CurrentLine == Topline){
 800121e:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <LCD_Write_Character+0x54>)
 8001220:	789b      	ldrb	r3, [r3, #2]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d106      	bne.n	8001234 <LCD_Write_Character+0x34>
		DisplayState.ToplineCharacters ++;
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <LCD_Write_Character+0x54>)
 8001228:	791b      	ldrb	r3, [r3, #4]
 800122a:	3301      	adds	r3, #1
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <LCD_Write_Character+0x54>)
 8001230:	711a      	strb	r2, [r3, #4]
	} else if (DisplayState.CurrentLine == Bottomline){
		DisplayState.BottomlineCharacters ++;
	}
}
 8001232:	e009      	b.n	8001248 <LCD_Write_Character+0x48>
	} else if (DisplayState.CurrentLine == Bottomline){
 8001234:	4b07      	ldr	r3, [pc, #28]	; (8001254 <LCD_Write_Character+0x54>)
 8001236:	789b      	ldrb	r3, [r3, #2]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d105      	bne.n	8001248 <LCD_Write_Character+0x48>
		DisplayState.BottomlineCharacters ++;
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <LCD_Write_Character+0x54>)
 800123e:	795b      	ldrb	r3, [r3, #5]
 8001240:	3301      	adds	r3, #1
 8001242:	b2da      	uxtb	r2, r3
 8001244:	4b03      	ldr	r3, [pc, #12]	; (8001254 <LCD_Write_Character+0x54>)
 8001246:	715a      	strb	r2, [r3, #5]
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	48000400 	.word	0x48000400
 8001254:	200009f0 	.word	0x200009f0

08001258 <LCD_Write_Instruction>:

void LCD_Write_Instruction(uint8_t instruction)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
	lcd_RS_GPIO_Port->ODR &= ~(1<<lcd_RS_bit);			// select the Instruction Register (RS low)
 8001262:	4b07      	ldr	r3, [pc, #28]	; (8001280 <LCD_Write_Instruction+0x28>)
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	4a06      	ldr	r2, [pc, #24]	; (8001280 <LCD_Write_Instruction+0x28>)
 8001268:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800126c:	6153      	str	r3, [r2, #20]
	LCD_Write_Nibbles(instruction);
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	4618      	mov	r0, r3
 8001272:	f000 f807 	bl	8001284 <LCD_Write_Nibbles>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	48000400 	.word	0x48000400

08001284 <LCD_Write_Nibbles>:

void LCD_Write_Nibbles(uint8_t byte)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
	Delay_us_10(1); // tsu1 > 40ns
 800128e:	2001      	movs	r0, #1
 8001290:	f002 fe1a 	bl	8003ec8 <Delay_us_10>
	lcd_E_GPIO_Port->ODR |= (1<<lcd_E_bit);			// set E high
 8001294:	4b42      	ldr	r3, [pc, #264]	; (80013a0 <LCD_Write_Nibbles+0x11c>)
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	4a41      	ldr	r2, [pc, #260]	; (80013a0 <LCD_Write_Nibbles+0x11c>)
 800129a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800129e:	6153      	str	r3, [r2, #20]
	LCD_ZeroPins();
 80012a0:	f000 f8d8 	bl	8001454 <LCD_ZeroPins>

	// Write first (most significant) nibble
	if(byte & 1<<7)	lcd_D7_GPIO_Port->ODR |= (1<<lcd_D7_bit);
 80012a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	da07      	bge.n	80012bc <LCD_Write_Nibbles+0x38>
 80012ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012ba:	6153      	str	r3, [r2, #20]
	if(byte & 1<<6)	lcd_D6_GPIO_Port->ODR |= (1<<lcd_D6_bit);
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d007      	beq.n	80012d6 <LCD_Write_Nibbles+0x52>
 80012c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012d4:	6153      	str	r3, [r2, #20]
	if(byte & 1<<5)	lcd_D5_GPIO_Port->ODR |= (1<<lcd_D5_bit);
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	f003 0320 	and.w	r3, r3, #32
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d005      	beq.n	80012ec <LCD_Write_Nibbles+0x68>
 80012e0:	4b30      	ldr	r3, [pc, #192]	; (80013a4 <LCD_Write_Nibbles+0x120>)
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	4a2f      	ldr	r2, [pc, #188]	; (80013a4 <LCD_Write_Nibbles+0x120>)
 80012e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ea:	6153      	str	r3, [r2, #20]
	if(byte & 1<<4)	lcd_D4_GPIO_Port->ODR |= (1<<lcd_D4_bit);
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	f003 0310 	and.w	r3, r3, #16
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d005      	beq.n	8001302 <LCD_Write_Nibbles+0x7e>
 80012f6:	4b2b      	ldr	r3, [pc, #172]	; (80013a4 <LCD_Write_Nibbles+0x120>)
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	4a2a      	ldr	r2, [pc, #168]	; (80013a4 <LCD_Write_Nibbles+0x120>)
 80012fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001300:	6153      	str	r3, [r2, #20]


	// Pulse Enable
//	HAL_Delay(1);
	Delay_us_10(10);
 8001302:	200a      	movs	r0, #10
 8001304:	f002 fde0 	bl	8003ec8 <Delay_us_10>
	lcd_E_GPIO_Port->ODR &= ~(1<<lcd_E_bit);			// Set to 0
 8001308:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <LCD_Write_Nibbles+0x11c>)
 800130a:	695b      	ldr	r3, [r3, #20]
 800130c:	4a24      	ldr	r2, [pc, #144]	; (80013a0 <LCD_Write_Nibbles+0x11c>)
 800130e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001312:	6153      	str	r3, [r2, #20]
	lcd_E_GPIO_Port->ODR |= (1<<lcd_E_bit);				// Set to 1
 8001314:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <LCD_Write_Nibbles+0x11c>)
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	4a21      	ldr	r2, [pc, #132]	; (80013a0 <LCD_Write_Nibbles+0x11c>)
 800131a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800131e:	6153      	str	r3, [r2, #20]

	LCD_ZeroPins();
 8001320:	f000 f898 	bl	8001454 <LCD_ZeroPins>
	if(byte & 1<<3)	lcd_D7_GPIO_Port->ODR |= (1<<lcd_D7_bit);
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	2b00      	cmp	r3, #0
 800132c:	d007      	beq.n	800133e <LCD_Write_Nibbles+0xba>
 800132e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001332:	695b      	ldr	r3, [r3, #20]
 8001334:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001338:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800133c:	6153      	str	r3, [r2, #20]
	if(byte & 1<<2)	lcd_D6_GPIO_Port->ODR |= (1<<lcd_D6_bit);
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	2b00      	cmp	r3, #0
 8001346:	d007      	beq.n	8001358 <LCD_Write_Nibbles+0xd4>
 8001348:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001352:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001356:	6153      	str	r3, [r2, #20]
	if(byte & 1<<1)	lcd_D5_GPIO_Port->ODR |= (1<<lcd_D5_bit);
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d005      	beq.n	800136e <LCD_Write_Nibbles+0xea>
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <LCD_Write_Nibbles+0x120>)
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	4a0f      	ldr	r2, [pc, #60]	; (80013a4 <LCD_Write_Nibbles+0x120>)
 8001368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800136c:	6153      	str	r3, [r2, #20]
	if(byte & 1<<0)	lcd_D4_GPIO_Port->ODR |= (1<<lcd_D4_bit);
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	2b00      	cmp	r3, #0
 8001376:	d005      	beq.n	8001384 <LCD_Write_Nibbles+0x100>
 8001378:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <LCD_Write_Nibbles+0x120>)
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	4a09      	ldr	r2, [pc, #36]	; (80013a4 <LCD_Write_Nibbles+0x120>)
 800137e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001382:	6153      	str	r3, [r2, #20]

	// Drop Enable
//	HAL_Delay(1);
	Delay_us_10(10);
 8001384:	200a      	movs	r0, #10
 8001386:	f002 fd9f 	bl	8003ec8 <Delay_us_10>
	lcd_E_GPIO_Port->ODR &= ~(1<<lcd_E_bit);		// Set to 0
 800138a:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <LCD_Write_Nibbles+0x11c>)
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <LCD_Write_Nibbles+0x11c>)
 8001390:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001394:	6153      	str	r3, [r2, #20]
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	48000400 	.word	0x48000400
 80013a4:	48000800 	.word	0x48000800

080013a8 <LCD_Write_8bitInstruction>:

void LCD_Write_8bitInstruction(uint8_t byte)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
	lcd_RS_GPIO_Port->ODR &= ~(1<<lcd_RS_bit);			// Set RS to 0
 80013b2:	4b26      	ldr	r3, [pc, #152]	; (800144c <LCD_Write_8bitInstruction+0xa4>)
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	4a25      	ldr	r2, [pc, #148]	; (800144c <LCD_Write_8bitInstruction+0xa4>)
 80013b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80013bc:	6153      	str	r3, [r2, #20]
	Delay_us_10(1); // tsu1 > 40ns
 80013be:	2001      	movs	r0, #1
 80013c0:	f002 fd82 	bl	8003ec8 <Delay_us_10>
	lcd_E_GPIO_Port->ODR |= (1<<lcd_E_bit);				// Set E to 1
 80013c4:	4b21      	ldr	r3, [pc, #132]	; (800144c <LCD_Write_8bitInstruction+0xa4>)
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	4a20      	ldr	r2, [pc, #128]	; (800144c <LCD_Write_8bitInstruction+0xa4>)
 80013ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013ce:	6153      	str	r3, [r2, #20]
	LCD_ZeroPins();
 80013d0:	f000 f840 	bl	8001454 <LCD_ZeroPins>

	// Set to zero first
	if(byte & 1<<7)	lcd_D7_GPIO_Port->ODR |= (1<<lcd_D7_bit);
 80013d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	da07      	bge.n	80013ec <LCD_Write_8bitInstruction+0x44>
 80013dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80013e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013ea:	6153      	str	r3, [r2, #20]
	if(byte & 1<<6)	lcd_D6_GPIO_Port->ODR |= (1<<lcd_D6_bit);
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d007      	beq.n	8001406 <LCD_Write_8bitInstruction+0x5e>
 80013f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80013fa:	695b      	ldr	r3, [r3, #20]
 80013fc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001400:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001404:	6153      	str	r3, [r2, #20]
	if(byte & 1<<5)	lcd_D5_GPIO_Port->ODR |= (1<<lcd_D5_bit);
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	f003 0320 	and.w	r3, r3, #32
 800140c:	2b00      	cmp	r3, #0
 800140e:	d005      	beq.n	800141c <LCD_Write_8bitInstruction+0x74>
 8001410:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <LCD_Write_8bitInstruction+0xa8>)
 8001412:	695b      	ldr	r3, [r3, #20]
 8001414:	4a0e      	ldr	r2, [pc, #56]	; (8001450 <LCD_Write_8bitInstruction+0xa8>)
 8001416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141a:	6153      	str	r3, [r2, #20]
	if(byte & 1<<4)	lcd_D4_GPIO_Port->ODR |= (1<<lcd_D4_bit);
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	f003 0310 	and.w	r3, r3, #16
 8001422:	2b00      	cmp	r3, #0
 8001424:	d005      	beq.n	8001432 <LCD_Write_8bitInstruction+0x8a>
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <LCD_Write_8bitInstruction+0xa8>)
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	4a09      	ldr	r2, [pc, #36]	; (8001450 <LCD_Write_8bitInstruction+0xa8>)
 800142c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001430:	6153      	str	r3, [r2, #20]

//	HAL_Delay(1);
	Delay_us_10(1);
 8001432:	2001      	movs	r0, #1
 8001434:	f002 fd48 	bl	8003ec8 <Delay_us_10>
	lcd_E_GPIO_Port->ODR &= ~(1<<lcd_E_bit);		// Set E to 0
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <LCD_Write_8bitInstruction+0xa4>)
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	4a03      	ldr	r2, [pc, #12]	; (800144c <LCD_Write_8bitInstruction+0xa4>)
 800143e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001442:	6153      	str	r3, [r2, #20]
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	48000400 	.word	0x48000400
 8001450:	48000800 	.word	0x48000800

08001454 <LCD_ZeroPins>:

void LCD_ZeroPins()
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
	lcd_D7_GPIO_Port->ODR &= ~(1<<lcd_D7_bit);
 8001458:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001462:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001466:	6153      	str	r3, [r2, #20]
	lcd_D6_GPIO_Port->ODR &= ~(1<<lcd_D6_bit);
 8001468:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001472:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001476:	6153      	str	r3, [r2, #20]
	lcd_D5_GPIO_Port->ODR &= ~(1<<lcd_D5_bit);
 8001478:	4b08      	ldr	r3, [pc, #32]	; (800149c <LCD_ZeroPins+0x48>)
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	4a07      	ldr	r2, [pc, #28]	; (800149c <LCD_ZeroPins+0x48>)
 800147e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001482:	6153      	str	r3, [r2, #20]
	lcd_D4_GPIO_Port->ODR &= ~(1<<lcd_D4_bit);
 8001484:	4b05      	ldr	r3, [pc, #20]	; (800149c <LCD_ZeroPins+0x48>)
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	4a04      	ldr	r2, [pc, #16]	; (800149c <LCD_ZeroPins+0x48>)
 800148a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800148e:	6153      	str	r3, [r2, #20]
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	48000800 	.word	0x48000800

080014a0 <LCD_Clear_Display>:

void LCD_Clear_Display()
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
	LCD_Write_Instruction(lcd_instruction_ReturnHome);
 80014a4:	2002      	movs	r0, #2
 80014a6:	f7ff fed7 	bl	8001258 <LCD_Write_Instruction>
	Delay_us_10(200); // 2ms
 80014aa:	20c8      	movs	r0, #200	; 0xc8
 80014ac:	f002 fd0c 	bl	8003ec8 <Delay_us_10>
	LCD_Write_Instruction(lcd_instruction_ClearDisplay);
 80014b0:	2001      	movs	r0, #1
 80014b2:	f7ff fed1 	bl	8001258 <LCD_Write_Instruction>
	Delay_us_10(200); // 2ms
 80014b6:	20c8      	movs	r0, #200	; 0xc8
 80014b8:	f002 fd06 	bl	8003ec8 <Delay_us_10>
	DisplayState.ToplineCharacters = 0;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <LCD_Clear_Display+0x38>)
 80014be:	2200      	movs	r2, #0
 80014c0:	711a      	strb	r2, [r3, #4]
	DisplayState.BottomlineCharacters = 0;
 80014c2:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <LCD_Clear_Display+0x38>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	715a      	strb	r2, [r3, #5]
	DisplayState.CurrentLine = Topline;
 80014c8:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <LCD_Clear_Display+0x38>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	709a      	strb	r2, [r3, #2]
	DisplayState.DisplayPosition = 0;
 80014ce:	4b02      	ldr	r3, [pc, #8]	; (80014d8 <LCD_Clear_Display+0x38>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	729a      	strb	r2, [r3, #10]
}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	200009f0 	.word	0x200009f0

080014dc <LCD_NewLine>:

void LCD_NewLine()
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
	LCD_Write_Instruction(lcd_instruction_CursorNewLine);
 80014e0:	20c0      	movs	r0, #192	; 0xc0
 80014e2:	f7ff feb9 	bl	8001258 <LCD_Write_Instruction>
	Delay_us_10(5);
 80014e6:	2005      	movs	r0, #5
 80014e8:	f002 fcee 	bl	8003ec8 <Delay_us_10>
	DisplayState.CurrentLine = Bottomline;
 80014ec:	4b02      	ldr	r3, [pc, #8]	; (80014f8 <LCD_NewLine+0x1c>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	709a      	strb	r2, [r3, #2]
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200009f0 	.word	0x200009f0

080014fc <LCD_AutoScroll>:

void LCD_AutoScroll()
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
	uint8_t returnflag = DisplayState.DisplayPosition + 12;
 8001502:	4b10      	ldr	r3, [pc, #64]	; (8001544 <LCD_AutoScroll+0x48>)
 8001504:	7a9b      	ldrb	r3, [r3, #10]
 8001506:	330c      	adds	r3, #12
 8001508:	71bb      	strb	r3, [r7, #6]
	uint8_t longestline;
	if(DisplayState.ToplineCharacters >= DisplayState.BottomlineCharacters) longestline = DisplayState.ToplineCharacters;
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <LCD_AutoScroll+0x48>)
 800150c:	791a      	ldrb	r2, [r3, #4]
 800150e:	4b0d      	ldr	r3, [pc, #52]	; (8001544 <LCD_AutoScroll+0x48>)
 8001510:	795b      	ldrb	r3, [r3, #5]
 8001512:	429a      	cmp	r2, r3
 8001514:	d303      	bcc.n	800151e <LCD_AutoScroll+0x22>
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <LCD_AutoScroll+0x48>)
 8001518:	791b      	ldrb	r3, [r3, #4]
 800151a:	71fb      	strb	r3, [r7, #7]
 800151c:	e002      	b.n	8001524 <LCD_AutoScroll+0x28>
	else longestline = DisplayState.BottomlineCharacters;
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <LCD_AutoScroll+0x48>)
 8001520:	795b      	ldrb	r3, [r3, #5]
 8001522:	71fb      	strb	r3, [r7, #7]
	if(longestline > 16)
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	2b10      	cmp	r3, #16
 8001528:	d908      	bls.n	800153c <LCD_AutoScroll+0x40>
	{
		if(returnflag > longestline)
 800152a:	79ba      	ldrb	r2, [r7, #6]
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	429a      	cmp	r2, r3
 8001530:	d902      	bls.n	8001538 <LCD_AutoScroll+0x3c>
		{
			LCD_Shift_Home();
 8001532:	f000 f82d 	bl	8001590 <LCD_Shift_Home>
		else
		{
			LCD_Shift_Left();
		}
	}
}
 8001536:	e001      	b.n	800153c <LCD_AutoScroll+0x40>
			LCD_Shift_Left();
 8001538:	f000 f806 	bl	8001548 <LCD_Shift_Left>
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	200009f0 	.word	0x200009f0

08001548 <LCD_Shift_Left>:

void LCD_Shift_Left()
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
	LCD_Write_Instruction(lcd_instruction_DisplayShiftLeft);
 800154c:	2018      	movs	r0, #24
 800154e:	f7ff fe83 	bl	8001258 <LCD_Write_Instruction>
	Delay_us_10(5);
 8001552:	2005      	movs	r0, #5
 8001554:	f002 fcb8 	bl	8003ec8 <Delay_us_10>
	DisplayState.DisplayPosition ++;
 8001558:	4b03      	ldr	r3, [pc, #12]	; (8001568 <LCD_Shift_Left+0x20>)
 800155a:	7a9b      	ldrb	r3, [r3, #10]
 800155c:	3301      	adds	r3, #1
 800155e:	b2da      	uxtb	r2, r3
 8001560:	4b01      	ldr	r3, [pc, #4]	; (8001568 <LCD_Shift_Left+0x20>)
 8001562:	729a      	strb	r2, [r3, #10]
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	200009f0 	.word	0x200009f0

0800156c <LCD_Shift_Right>:

void LCD_Shift_Right()
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
	LCD_Write_Instruction(lcd_instruction_DisplayShiftRight);
 8001570:	201c      	movs	r0, #28
 8001572:	f7ff fe71 	bl	8001258 <LCD_Write_Instruction>
	Delay_us_10(5);
 8001576:	2005      	movs	r0, #5
 8001578:	f002 fca6 	bl	8003ec8 <Delay_us_10>
	DisplayState.DisplayPosition -= 1;
 800157c:	4b03      	ldr	r3, [pc, #12]	; (800158c <LCD_Shift_Right+0x20>)
 800157e:	7a9b      	ldrb	r3, [r3, #10]
 8001580:	3b01      	subs	r3, #1
 8001582:	b2da      	uxtb	r2, r3
 8001584:	4b01      	ldr	r3, [pc, #4]	; (800158c <LCD_Shift_Right+0x20>)
 8001586:	729a      	strb	r2, [r3, #10]
}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200009f0 	.word	0x200009f0

08001590 <LCD_Shift_Home>:

void LCD_Shift_Home()
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
	uint8_t num_shifted = DisplayState.DisplayPosition;
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <LCD_Shift_Home+0x2c>)
 8001598:	7a9b      	ldrb	r3, [r3, #10]
 800159a:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < num_shifted; i++)
 800159c:	2300      	movs	r3, #0
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	e004      	b.n	80015ac <LCD_Shift_Home+0x1c>
	{
		LCD_Shift_Right();
 80015a2:	f7ff ffe3 	bl	800156c <LCD_Shift_Right>
	for(int i = 0; i < num_shifted; i++)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	3301      	adds	r3, #1
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	78fb      	ldrb	r3, [r7, #3]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	dbf6      	blt.n	80015a2 <LCD_Shift_Home+0x12>
	}
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200009f0 	.word	0x200009f0

080015c0 <LCD_Cursor_Home>:

void LCD_Cursor_Home()
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
	LCD_Write_Instruction(lcd_instruction_CursorHome);
 80015c4:	2080      	movs	r0, #128	; 0x80
 80015c6:	f7ff fe47 	bl	8001258 <LCD_Write_Instruction>
	Delay_us_10(5);
 80015ca:	2005      	movs	r0, #5
 80015cc:	f002 fc7c 	bl	8003ec8 <Delay_us_10>
	DisplayState.ToplineCharacters = 0;
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <LCD_Cursor_Home+0x28>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	711a      	strb	r2, [r3, #4]
	DisplayState.BottomlineCharacters = 0;
 80015d6:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <LCD_Cursor_Home+0x28>)
 80015d8:	2200      	movs	r2, #0
 80015da:	715a      	strb	r2, [r3, #5]
	DisplayState.CurrentLine = Topline;
 80015dc:	4b02      	ldr	r3, [pc, #8]	; (80015e8 <LCD_Cursor_Home+0x28>)
 80015de:	2200      	movs	r2, #0
 80015e0:	709a      	strb	r2, [r3, #2]
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200009f0 	.word	0x200009f0

080015ec <LCD_changeDisplayMode>:

void LCD_changeDisplayMode(DisplayMode newDisplayMode)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
	LCD_Clear_Display();
 80015f6:	f7ff ff53 	bl	80014a0 <LCD_Clear_Display>
	if (newDisplayMode == Menu)
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d11b      	bne.n	8001638 <LCD_changeDisplayMode+0x4c>
	{
		// Change to Menu Display State
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001600:	2201      	movs	r2, #1
 8001602:	2120      	movs	r1, #32
 8001604:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001608:	f005 fb4e 	bl	8006ca8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800160c:	2200      	movs	r2, #0
 800160e:	2180      	movs	r1, #128	; 0x80
 8001610:	4829      	ldr	r0, [pc, #164]	; (80016b8 <LCD_changeDisplayMode+0xcc>)
 8001612:	f005 fb49 	bl	8006ca8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001616:	2200      	movs	r2, #0
 8001618:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800161c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001620:	f005 fb42 	bl	8006ca8 <HAL_GPIO_WritePin>
		LCD_Display_Menu();
 8001624:	f000 f84c 	bl	80016c0 <LCD_Display_Menu>
		DisplayState.LastMode = DisplayState.Mode;
 8001628:	4b24      	ldr	r3, [pc, #144]	; (80016bc <LCD_changeDisplayMode+0xd0>)
 800162a:	781a      	ldrb	r2, [r3, #0]
 800162c:	4b23      	ldr	r3, [pc, #140]	; (80016bc <LCD_changeDisplayMode+0xd0>)
 800162e:	705a      	strb	r2, [r3, #1]
		DisplayState.Mode = Menu;
 8001630:	4b22      	ldr	r3, [pc, #136]	; (80016bc <LCD_changeDisplayMode+0xd0>)
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
		DisplayState.LastMode = DisplayState.Mode;
		DisplayState.Mode = Output;
	}
}
 8001636:	e03a      	b.n	80016ae <LCD_changeDisplayMode+0xc2>
	else if (newDisplayMode == Measurement)
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d11b      	bne.n	8001676 <LCD_changeDisplayMode+0x8a>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	2120      	movs	r1, #32
 8001642:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001646:	f005 fb2f 	bl	8006ca8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800164a:	2201      	movs	r2, #1
 800164c:	2180      	movs	r1, #128	; 0x80
 800164e:	481a      	ldr	r0, [pc, #104]	; (80016b8 <LCD_changeDisplayMode+0xcc>)
 8001650:	f005 fb2a 	bl	8006ca8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001654:	2200      	movs	r2, #0
 8001656:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800165a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800165e:	f005 fb23 	bl	8006ca8 <HAL_GPIO_WritePin>
		LCD_Display_Measurement();
 8001662:	f000 fd31 	bl	80020c8 <LCD_Display_Measurement>
		DisplayState.LastMode = DisplayState.Mode;
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <LCD_changeDisplayMode+0xd0>)
 8001668:	781a      	ldrb	r2, [r3, #0]
 800166a:	4b14      	ldr	r3, [pc, #80]	; (80016bc <LCD_changeDisplayMode+0xd0>)
 800166c:	705a      	strb	r2, [r3, #1]
		DisplayState.Mode = Measurement;
 800166e:	4b13      	ldr	r3, [pc, #76]	; (80016bc <LCD_changeDisplayMode+0xd0>)
 8001670:	2201      	movs	r2, #1
 8001672:	701a      	strb	r2, [r3, #0]
}
 8001674:	e01b      	b.n	80016ae <LCD_changeDisplayMode+0xc2>
	else if (newDisplayMode == Output)
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	2b02      	cmp	r3, #2
 800167a:	d118      	bne.n	80016ae <LCD_changeDisplayMode+0xc2>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800167c:	2200      	movs	r2, #0
 800167e:	2120      	movs	r1, #32
 8001680:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001684:	f005 fb10 	bl	8006ca8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001688:	2200      	movs	r2, #0
 800168a:	2180      	movs	r1, #128	; 0x80
 800168c:	480a      	ldr	r0, [pc, #40]	; (80016b8 <LCD_changeDisplayMode+0xcc>)
 800168e:	f005 fb0b 	bl	8006ca8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8001692:	2201      	movs	r2, #1
 8001694:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001698:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169c:	f005 fb04 	bl	8006ca8 <HAL_GPIO_WritePin>
		DisplayState.LastMode = DisplayState.Mode;
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <LCD_changeDisplayMode+0xd0>)
 80016a2:	781a      	ldrb	r2, [r3, #0]
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <LCD_changeDisplayMode+0xd0>)
 80016a6:	705a      	strb	r2, [r3, #1]
		DisplayState.Mode = Output;
 80016a8:	4b04      	ldr	r3, [pc, #16]	; (80016bc <LCD_changeDisplayMode+0xd0>)
 80016aa:	2202      	movs	r2, #2
 80016ac:	701a      	strb	r2, [r3, #0]
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	48000800 	.word	0x48000800
 80016bc:	200009f0 	.word	0x200009f0

080016c0 <LCD_Display_Menu>:

void LCD_Display_Menu()
{
 80016c0:	b5b0      	push	{r4, r5, r7, lr}
 80016c2:	b0f6      	sub	sp, #472	; 0x1d8
 80016c4:	af00      	add	r7, sp, #0
	LCD_Clear_Display();
 80016c6:	f7ff feeb 	bl	80014a0 <LCD_Clear_Display>
	switch(DisplayState.CurrentBranch)
 80016ca:	4bc9      	ldr	r3, [pc, #804]	; (80019f0 <LCD_Display_Menu+0x330>)
 80016cc:	78db      	ldrb	r3, [r3, #3]
 80016ce:	2b16      	cmp	r3, #22
 80016d0:	f200 84d9 	bhi.w	8002086 <LCD_Display_Menu+0x9c6>
 80016d4:	a201      	add	r2, pc, #4	; (adr r2, 80016dc <LCD_Display_Menu+0x1c>)
 80016d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016da:	bf00      	nop
 80016dc:	08001739 	.word	0x08001739
 80016e0:	0800175b 	.word	0x0800175b
 80016e4:	08001797 	.word	0x08001797
 80016e8:	080017d7 	.word	0x080017d7
 80016ec:	08001817 	.word	0x08001817
 80016f0:	08001857 	.word	0x08001857
 80016f4:	08001895 	.word	0x08001895
 80016f8:	080018d3 	.word	0x080018d3
 80016fc:	080018ed 	.word	0x080018ed
 8001700:	0800190b 	.word	0x0800190b
 8001704:	08001fbd 	.word	0x08001fbd
 8001708:	08002027 	.word	0x08002027
 800170c:	08001925 	.word	0x08001925
 8001710:	0800198b 	.word	0x0800198b
 8001714:	08001a39 	.word	0x08001a39
 8001718:	08001aa1 	.word	0x08001aa1
 800171c:	08001b19 	.word	0x08001b19
 8001720:	08001abb 	.word	0x08001abb
 8001724:	08001c33 	.word	0x08001c33
 8001728:	08001adf 	.word	0x08001adf
 800172c:	08001d89 	.word	0x08001d89
 8001730:	08001af9 	.word	0x08001af9
 8001734:	08001ea3 	.word	0x08001ea3
	{
		case Top:
		{
			uint8_t lcd_string[] = "Menu Top Level";
 8001738:	4bae      	ldr	r3, [pc, #696]	; (80019f4 <LCD_Display_Menu+0x334>)
 800173a:	f507 74e4 	add.w	r4, r7, #456	; 0x1c8
 800173e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001740:	c407      	stmia	r4!, {r0, r1, r2}
 8001742:	8023      	strh	r3, [r4, #0]
 8001744:	3402      	adds	r4, #2
 8001746:	0c1b      	lsrs	r3, r3, #16
 8001748:	7023      	strb	r3, [r4, #0]
			LCD_Write_String(lcd_string);
 800174a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fcfd 	bl	800114e <LCD_Write_String>
			break;
 8001754:	bf00      	nop
 8001756:	f000 bc96 	b.w	8002086 <LCD_Display_Menu+0x9c6>
		}
		case Measure:
		{
			uint8_t topline[] = "Multimeter";
 800175a:	4aa7      	ldr	r2, [pc, #668]	; (80019f8 <LCD_Display_Menu+0x338>)
 800175c:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001760:	ca07      	ldmia	r2, {r0, r1, r2}
 8001762:	c303      	stmia	r3!, {r0, r1}
 8001764:	801a      	strh	r2, [r3, #0]
 8001766:	3302      	adds	r3, #2
 8001768:	0c12      	lsrs	r2, r2, #16
 800176a:	701a      	strb	r2, [r3, #0]
			uint8_t bottomline[] = "Measurement";
 800176c:	4aa3      	ldr	r2, [pc, #652]	; (80019fc <LCD_Display_Menu+0x33c>)
 800176e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001772:	ca07      	ldmia	r2, {r0, r1, r2}
 8001774:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			LCD_Write_String(topline);
 8001778:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff fce6 	bl	800114e <LCD_Write_String>
			LCD_NewLine();
 8001782:	f7ff feab 	bl	80014dc <LCD_NewLine>
			LCD_Write_String(bottomline);
 8001786:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff fcdf 	bl	800114e <LCD_Write_String>
			break;
 8001790:	bf00      	nop
 8001792:	f000 bc78 	b.w	8002086 <LCD_Display_Menu+0x9c6>
		}
		case Signal:
		{
			uint8_t topline[] = "Signal";
 8001796:	4a9a      	ldr	r2, [pc, #616]	; (8001a00 <LCD_Display_Menu+0x340>)
 8001798:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800179c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017a0:	6018      	str	r0, [r3, #0]
 80017a2:	3304      	adds	r3, #4
 80017a4:	8019      	strh	r1, [r3, #0]
 80017a6:	3302      	adds	r3, #2
 80017a8:	0c0a      	lsrs	r2, r1, #16
 80017aa:	701a      	strb	r2, [r3, #0]
			uint8_t bottomline[] = "Generator";
 80017ac:	4a95      	ldr	r2, [pc, #596]	; (8001a04 <LCD_Display_Menu+0x344>)
 80017ae:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80017b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80017b4:	c303      	stmia	r3!, {r0, r1}
 80017b6:	801a      	strh	r2, [r3, #0]
			LCD_Write_String(topline);
 80017b8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fcc6 	bl	800114e <LCD_Write_String>
			LCD_NewLine();
 80017c2:	f7ff fe8b 	bl	80014dc <LCD_NewLine>
			LCD_Write_String(bottomline);
 80017c6:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff fcbf 	bl	800114e <LCD_Write_String>
			break;
 80017d0:	bf00      	nop
 80017d2:	f000 bc58 	b.w	8002086 <LCD_Display_Menu+0x9c6>
		}
		case DC_V:
		{
			uint8_t topline[] = "DC Voltage";
 80017d6:	4a8c      	ldr	r2, [pc, #560]	; (8001a08 <LCD_Display_Menu+0x348>)
 80017d8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80017dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80017de:	c303      	stmia	r3!, {r0, r1}
 80017e0:	801a      	strh	r2, [r3, #0]
 80017e2:	3302      	adds	r3, #2
 80017e4:	0c12      	lsrs	r2, r2, #16
 80017e6:	701a      	strb	r2, [r3, #0]
			uint8_t bottomline[] = "Mode";
 80017e8:	4a88      	ldr	r2, [pc, #544]	; (8001a0c <LCD_Display_Menu+0x34c>)
 80017ea:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80017ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017f2:	6018      	str	r0, [r3, #0]
 80017f4:	3304      	adds	r3, #4
 80017f6:	7019      	strb	r1, [r3, #0]
			LCD_Write_String(topline);
 80017f8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fca6 	bl	800114e <LCD_Write_String>
			LCD_NewLine();
 8001802:	f7ff fe6b 	bl	80014dc <LCD_NewLine>
			LCD_Write_String(bottomline);
 8001806:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fc9f 	bl	800114e <LCD_Write_String>
			break;
 8001810:	bf00      	nop
 8001812:	f000 bc38 	b.w	8002086 <LCD_Display_Menu+0x9c6>
		}
		case DC_I:
		{
			uint8_t topline[] = "DC Current";
 8001816:	4a7e      	ldr	r2, [pc, #504]	; (8001a10 <LCD_Display_Menu+0x350>)
 8001818:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800181c:	ca07      	ldmia	r2, {r0, r1, r2}
 800181e:	c303      	stmia	r3!, {r0, r1}
 8001820:	801a      	strh	r2, [r3, #0]
 8001822:	3302      	adds	r3, #2
 8001824:	0c12      	lsrs	r2, r2, #16
 8001826:	701a      	strb	r2, [r3, #0]
			uint8_t bottomline[] = "Mode";
 8001828:	4a78      	ldr	r2, [pc, #480]	; (8001a0c <LCD_Display_Menu+0x34c>)
 800182a:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800182e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001832:	6018      	str	r0, [r3, #0]
 8001834:	3304      	adds	r3, #4
 8001836:	7019      	strb	r1, [r3, #0]
			LCD_Write_String(topline);
 8001838:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fc86 	bl	800114e <LCD_Write_String>
			LCD_NewLine();
 8001842:	f7ff fe4b 	bl	80014dc <LCD_NewLine>
			LCD_Write_String(bottomline);
 8001846:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fc7f 	bl	800114e <LCD_Write_String>
			break;
 8001850:	bf00      	nop
 8001852:	f000 bc18 	b.w	8002086 <LCD_Display_Menu+0x9c6>
		}
		case AC_V:
		{
			uint8_t topline[] = "AC Voltage";
 8001856:	4a6f      	ldr	r2, [pc, #444]	; (8001a14 <LCD_Display_Menu+0x354>)
 8001858:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800185c:	ca07      	ldmia	r2, {r0, r1, r2}
 800185e:	c303      	stmia	r3!, {r0, r1}
 8001860:	801a      	strh	r2, [r3, #0]
 8001862:	3302      	adds	r3, #2
 8001864:	0c12      	lsrs	r2, r2, #16
 8001866:	701a      	strb	r2, [r3, #0]
			uint8_t bottomline[] = "Mode";
 8001868:	4a68      	ldr	r2, [pc, #416]	; (8001a0c <LCD_Display_Menu+0x34c>)
 800186a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800186e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001872:	6018      	str	r0, [r3, #0]
 8001874:	3304      	adds	r3, #4
 8001876:	7019      	strb	r1, [r3, #0]
			LCD_Write_String(topline);
 8001878:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fc66 	bl	800114e <LCD_Write_String>
			LCD_NewLine();
 8001882:	f7ff fe2b 	bl	80014dc <LCD_NewLine>
			LCD_Write_String(bottomline);
 8001886:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff fc5f 	bl	800114e <LCD_Write_String>
			break;
 8001890:	bf00      	nop
 8001892:	e3f8      	b.n	8002086 <LCD_Display_Menu+0x9c6>
		}
		case AC_I:
		{
			uint8_t topline[] = "AC Current";
 8001894:	4a60      	ldr	r2, [pc, #384]	; (8001a18 <LCD_Display_Menu+0x358>)
 8001896:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800189a:	ca07      	ldmia	r2, {r0, r1, r2}
 800189c:	c303      	stmia	r3!, {r0, r1}
 800189e:	801a      	strh	r2, [r3, #0]
 80018a0:	3302      	adds	r3, #2
 80018a2:	0c12      	lsrs	r2, r2, #16
 80018a4:	701a      	strb	r2, [r3, #0]
			uint8_t bottomline[] = "Mode";
 80018a6:	4a59      	ldr	r2, [pc, #356]	; (8001a0c <LCD_Display_Menu+0x34c>)
 80018a8:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80018ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018b0:	6018      	str	r0, [r3, #0]
 80018b2:	3304      	adds	r3, #4
 80018b4:	7019      	strb	r1, [r3, #0]
			LCD_Write_String(topline);
 80018b6:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fc47 	bl	800114e <LCD_Write_String>
			LCD_NewLine();
 80018c0:	f7ff fe0c 	bl	80014dc <LCD_NewLine>
			LCD_Write_String(bottomline);
 80018c4:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fc40 	bl	800114e <LCD_Write_String>
			break;
 80018ce:	bf00      	nop
 80018d0:	e3d9      	b.n	8002086 <LCD_Display_Menu+0x9c6>
		}
		case Type:
		{
			uint8_t lcd_string[] = "Signal Type";
 80018d2:	4a52      	ldr	r2, [pc, #328]	; (8001a1c <LCD_Display_Menu+0x35c>)
 80018d4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80018d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80018da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			LCD_Write_String(lcd_string);
 80018de:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fc33 	bl	800114e <LCD_Write_String>
			break;
 80018e8:	bf00      	nop
 80018ea:	e3cc      	b.n	8002086 <LCD_Display_Menu+0x9c6>
		}
		case Parameter:
		{
			uint8_t lcd_string[] = "Signal Parameter";
 80018ec:	4b4c      	ldr	r3, [pc, #304]	; (8001a20 <LCD_Display_Menu+0x360>)
 80018ee:	f507 7496 	add.w	r4, r7, #300	; 0x12c
 80018f2:	461d      	mov	r5, r3
 80018f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018f8:	682b      	ldr	r3, [r5, #0]
 80018fa:	7023      	strb	r3, [r4, #0]
			LCD_Write_String(lcd_string);
 80018fc:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fc24 	bl	800114e <LCD_Write_String>
			break;
 8001906:	bf00      	nop
 8001908:	e3bd      	b.n	8002086 <LCD_Display_Menu+0x9c6>
		}
		case OnOff:
		{
			uint8_t lcd_string[] = "Signal ON/OFF";
 800190a:	4b46      	ldr	r3, [pc, #280]	; (8001a24 <LCD_Display_Menu+0x364>)
 800190c:	f507 748e 	add.w	r4, r7, #284	; 0x11c
 8001910:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001912:	c407      	stmia	r4!, {r0, r1, r2}
 8001914:	8023      	strh	r3, [r4, #0]
			LCD_Write_String(lcd_string);
 8001916:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fc17 	bl	800114e <LCD_Write_String>
			break;
 8001920:	bf00      	nop
 8001922:	e3b0      	b.n	8002086 <LCD_Display_Menu+0x9c6>
		}
		case DC_OUT:
		{
			uint8_t topline[] = "DC";
 8001924:	4a40      	ldr	r2, [pc, #256]	; (8001a28 <LCD_Display_Menu+0x368>)
 8001926:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800192a:	6812      	ldr	r2, [r2, #0]
 800192c:	4611      	mov	r1, r2
 800192e:	8019      	strh	r1, [r3, #0]
 8001930:	3302      	adds	r3, #2
 8001932:	0c12      	lsrs	r2, r2, #16
 8001934:	701a      	strb	r2, [r3, #0]
			LCD_Write_String(topline);
 8001936:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fc07 	bl	800114e <LCD_Write_String>
			LCD_NewLine();
 8001940:	f7ff fdcc 	bl	80014dc <LCD_NewLine>
			if(OutputState.Mode == d)
 8001944:	4b39      	ldr	r3, [pc, #228]	; (8001a2c <LCD_Display_Menu+0x36c>)
 8001946:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 800194a:	2b64      	cmp	r3, #100	; 0x64
 800194c:	d10b      	bne.n	8001966 <LCD_Display_Menu+0x2a6>
			{
				uint8_t bottomline[] = "Signal - Active";
 800194e:	4b38      	ldr	r3, [pc, #224]	; (8001a30 <LCD_Display_Menu+0x370>)
 8001950:	f507 7484 	add.w	r4, r7, #264	; 0x108
 8001954:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001956:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				LCD_Write_String(bottomline);
 800195a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fbf5 	bl	800114e <LCD_Write_String>
			} else {
				uint8_t bottomline[] = "Signal";
				LCD_Write_String(bottomline);
			}
			break;
 8001964:	e38f      	b.n	8002086 <LCD_Display_Menu+0x9c6>
				uint8_t bottomline[] = "Signal";
 8001966:	4a26      	ldr	r2, [pc, #152]	; (8001a00 <LCD_Display_Menu+0x340>)
 8001968:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800196c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001970:	6018      	str	r0, [r3, #0]
 8001972:	3304      	adds	r3, #4
 8001974:	8019      	strh	r1, [r3, #0]
 8001976:	3302      	adds	r3, #2
 8001978:	0c0a      	lsrs	r2, r1, #16
 800197a:	701a      	strb	r2, [r3, #0]
				LCD_Write_String(bottomline);
 800197c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fbe4 	bl	800114e <LCD_Write_String>
			break;
 8001986:	bf00      	nop
 8001988:	e37d      	b.n	8002086 <LCD_Display_Menu+0x9c6>
		}
		case SINUSOIDAL_OUT:
		{
			uint8_t topline[] = "Sinusoidal";
 800198a:	4a2a      	ldr	r2, [pc, #168]	; (8001a34 <LCD_Display_Menu+0x374>)
 800198c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001990:	ca07      	ldmia	r2, {r0, r1, r2}
 8001992:	c303      	stmia	r3!, {r0, r1}
 8001994:	801a      	strh	r2, [r3, #0]
 8001996:	3302      	adds	r3, #2
 8001998:	0c12      	lsrs	r2, r2, #16
 800199a:	701a      	strb	r2, [r3, #0]
			LCD_Write_String(topline);
 800199c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff fbd4 	bl	800114e <LCD_Write_String>
			LCD_NewLine();
 80019a6:	f7ff fd99 	bl	80014dc <LCD_NewLine>
			if(OutputState.Mode == s)
 80019aa:	4b20      	ldr	r3, [pc, #128]	; (8001a2c <LCD_Display_Menu+0x36c>)
 80019ac:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 80019b0:	2b73      	cmp	r3, #115	; 0x73
 80019b2:	d10b      	bne.n	80019cc <LCD_Display_Menu+0x30c>
			{
				uint8_t bottomline[] = "Signal - Active";
 80019b4:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <LCD_Display_Menu+0x370>)
 80019b6:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 80019ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				LCD_Write_String(bottomline);
 80019c0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fbc2 	bl	800114e <LCD_Write_String>
			} else {
				uint8_t bottomline[] = "Signal";
				LCD_Write_String(bottomline);
			}
			break;
 80019ca:	e35c      	b.n	8002086 <LCD_Display_Menu+0x9c6>
				uint8_t bottomline[] = "Signal";
 80019cc:	4a0c      	ldr	r2, [pc, #48]	; (8001a00 <LCD_Display_Menu+0x340>)
 80019ce:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80019d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019d6:	6018      	str	r0, [r3, #0]
 80019d8:	3304      	adds	r3, #4
 80019da:	8019      	strh	r1, [r3, #0]
 80019dc:	3302      	adds	r3, #2
 80019de:	0c0a      	lsrs	r2, r1, #16
 80019e0:	701a      	strb	r2, [r3, #0]
				LCD_Write_String(bottomline);
 80019e2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fbb1 	bl	800114e <LCD_Write_String>
			break;
 80019ec:	bf00      	nop
 80019ee:	e34a      	b.n	8002086 <LCD_Display_Menu+0x9c6>
 80019f0:	200009f0 	.word	0x200009f0
 80019f4:	0800bddc 	.word	0x0800bddc
 80019f8:	0800bdec 	.word	0x0800bdec
 80019fc:	0800bdf8 	.word	0x0800bdf8
 8001a00:	0800be04 	.word	0x0800be04
 8001a04:	0800be0c 	.word	0x0800be0c
 8001a08:	0800be18 	.word	0x0800be18
 8001a0c:	0800be24 	.word	0x0800be24
 8001a10:	0800be2c 	.word	0x0800be2c
 8001a14:	0800be38 	.word	0x0800be38
 8001a18:	0800be44 	.word	0x0800be44
 8001a1c:	0800be50 	.word	0x0800be50
 8001a20:	0800be5c 	.word	0x0800be5c
 8001a24:	0800be70 	.word	0x0800be70
 8001a28:	0800be80 	.word	0x0800be80
 8001a2c:	20000828 	.word	0x20000828
 8001a30:	0800be84 	.word	0x0800be84
 8001a34:	0800be94 	.word	0x0800be94
		}
		case PULSE_OUT:
		{
			uint8_t topline[] = "Pulse";
 8001a38:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a3c:	4ac6      	ldr	r2, [pc, #792]	; (8001d58 <LCD_Display_Menu+0x698>)
 8001a3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a42:	6018      	str	r0, [r3, #0]
 8001a44:	3304      	adds	r3, #4
 8001a46:	8019      	strh	r1, [r3, #0]
			LCD_Write_String(topline);
 8001a48:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff fb7e 	bl	800114e <LCD_Write_String>
			LCD_NewLine();
 8001a52:	f7ff fd43 	bl	80014dc <LCD_NewLine>
			if(OutputState.Mode == p)
 8001a56:	4bc1      	ldr	r3, [pc, #772]	; (8001d5c <LCD_Display_Menu+0x69c>)
 8001a58:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 8001a5c:	2b70      	cmp	r3, #112	; 0x70
 8001a5e:	d10d      	bne.n	8001a7c <LCD_Display_Menu+0x3bc>
			{
				uint8_t bottomline[] = "Signal - Active";
 8001a60:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a64:	4abe      	ldr	r2, [pc, #760]	; (8001d60 <LCD_Display_Menu+0x6a0>)
 8001a66:	461c      	mov	r4, r3
 8001a68:	4613      	mov	r3, r2
 8001a6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				LCD_Write_String(bottomline);
 8001a70:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fb6a 	bl	800114e <LCD_Write_String>
			} else {
				uint8_t bottomline[] = "Signal";
				LCD_Write_String(bottomline);
			}
			break;
 8001a7a:	e304      	b.n	8002086 <LCD_Display_Menu+0x9c6>
				uint8_t bottomline[] = "Signal";
 8001a7c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001a80:	4ab8      	ldr	r2, [pc, #736]	; (8001d64 <LCD_Display_Menu+0x6a4>)
 8001a82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a86:	6018      	str	r0, [r3, #0]
 8001a88:	3304      	adds	r3, #4
 8001a8a:	8019      	strh	r1, [r3, #0]
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	0c0a      	lsrs	r2, r1, #16
 8001a90:	701a      	strb	r2, [r3, #0]
				LCD_Write_String(bottomline);
 8001a92:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff fb59 	bl	800114e <LCD_Write_String>
			break;
 8001a9c:	bf00      	nop
 8001a9e:	e2f2      	b.n	8002086 <LCD_Display_Menu+0x9c6>
		}
		case Amp:
		{
			uint8_t topline[] = "Amplitude";
 8001aa0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001aa4:	4ab0      	ldr	r2, [pc, #704]	; (8001d68 <LCD_Display_Menu+0x6a8>)
 8001aa6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001aa8:	c303      	stmia	r3!, {r0, r1}
 8001aaa:	801a      	strh	r2, [r3, #0]
			LCD_Write_String(topline);
 8001aac:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fb4c 	bl	800114e <LCD_Write_String>
			break;
 8001ab6:	bf00      	nop
 8001ab8:	e2e5      	b.n	8002086 <LCD_Display_Menu+0x9c6>
		}
		case Offset:
		{
			uint8_t topline[] = "Offset";
 8001aba:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001abe:	4aab      	ldr	r2, [pc, #684]	; (8001d6c <LCD_Display_Menu+0x6ac>)
 8001ac0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ac4:	6018      	str	r0, [r3, #0]
 8001ac6:	3304      	adds	r3, #4
 8001ac8:	8019      	strh	r1, [r3, #0]
 8001aca:	3302      	adds	r3, #2
 8001acc:	0c0a      	lsrs	r2, r1, #16
 8001ace:	701a      	strb	r2, [r3, #0]
			LCD_Write_String(topline);
 8001ad0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff fb3a 	bl	800114e <LCD_Write_String>
			break;
 8001ada:	bf00      	nop
 8001adc:	e2d3      	b.n	8002086 <LCD_Display_Menu+0x9c6>
		}
		case Freq:
		{
			uint8_t topline[] = "Frequency";
 8001ade:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ae2:	4aa3      	ldr	r2, [pc, #652]	; (8001d70 <LCD_Display_Menu+0x6b0>)
 8001ae4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ae6:	c303      	stmia	r3!, {r0, r1}
 8001ae8:	801a      	strh	r2, [r3, #0]
			LCD_Write_String(topline);
 8001aea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff fb2d 	bl	800114e <LCD_Write_String>
			break;
 8001af4:	bf00      	nop
 8001af6:	e2c6      	b.n	8002086 <LCD_Display_Menu+0x9c6>
		}
		case Duty:
		{
			uint8_t topline[] = "Duty Cycle";
 8001af8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001afc:	4a9d      	ldr	r2, [pc, #628]	; (8001d74 <LCD_Display_Menu+0x6b4>)
 8001afe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b00:	c303      	stmia	r3!, {r0, r1}
 8001b02:	801a      	strh	r2, [r3, #0]
 8001b04:	3302      	adds	r3, #2
 8001b06:	0c12      	lsrs	r2, r2, #16
 8001b08:	701a      	strb	r2, [r3, #0]
			LCD_Write_String(topline);
 8001b0a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fb1d 	bl	800114e <LCD_Write_String>
			break;
 8001b14:	bf00      	nop
 8001b16:	e2b6      	b.n	8002086 <LCD_Display_Menu+0x9c6>
		}
		case Amp_Val:
		{
			uint8_t topline[] = "Amplitude";
 8001b18:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b1c:	4a92      	ldr	r2, [pc, #584]	; (8001d68 <LCD_Display_Menu+0x6a8>)
 8001b1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b20:	c303      	stmia	r3!, {r0, r1}
 8001b22:	801a      	strh	r2, [r3, #0]
			uint8_t bottomline[] = "xxxx mV ";
 8001b24:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b28:	4a93      	ldr	r2, [pc, #588]	; (8001d78 <LCD_Display_Menu+0x6b8>)
 8001b2a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b2c:	c303      	stmia	r3!, {r0, r1}
 8001b2e:	701a      	strb	r2, [r3, #0]
			if (OutputState.Amplitude_Temp < 0) OutputState.Amplitude_Temp = 0;
			if (OutputState.Amplitude_Temp > 3300) OutputState.Amplitude_Temp = 3300;
 8001b30:	4b8a      	ldr	r3, [pc, #552]	; (8001d5c <LCD_Display_Menu+0x69c>)
 8001b32:	f8b3 31a6 	ldrh.w	r3, [r3, #422]	; 0x1a6
 8001b36:	f640 42e4 	movw	r2, #3300	; 0xce4
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d904      	bls.n	8001b48 <LCD_Display_Menu+0x488>
 8001b3e:	4b87      	ldr	r3, [pc, #540]	; (8001d5c <LCD_Display_Menu+0x69c>)
 8001b40:	f640 42e4 	movw	r2, #3300	; 0xce4
 8001b44:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6
			if(OutputState.Amplitude_Temp != OutputState.Amplitude) bottomline[7] = '*';
 8001b48:	4b84      	ldr	r3, [pc, #528]	; (8001d5c <LCD_Display_Menu+0x69c>)
 8001b4a:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	; 0x1a6
 8001b4e:	4b83      	ldr	r3, [pc, #524]	; (8001d5c <LCD_Display_Menu+0x69c>)
 8001b50:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d003      	beq.n	8001b60 <LCD_Display_Menu+0x4a0>
 8001b58:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b5c:	222a      	movs	r2, #42	; 0x2a
 8001b5e:	71da      	strb	r2, [r3, #7]
			bottomline[0] = (OutputState.Amplitude_Temp/1000) % 10 + 48;
 8001b60:	4b7e      	ldr	r3, [pc, #504]	; (8001d5c <LCD_Display_Menu+0x69c>)
 8001b62:	f8b3 31a6 	ldrh.w	r3, [r3, #422]	; 0x1a6
 8001b66:	4a85      	ldr	r2, [pc, #532]	; (8001d7c <LCD_Display_Menu+0x6bc>)
 8001b68:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6c:	099b      	lsrs	r3, r3, #6
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	4b83      	ldr	r3, [pc, #524]	; (8001d80 <LCD_Display_Menu+0x6c0>)
 8001b72:	fba3 1302 	umull	r1, r3, r3, r2
 8001b76:	08d9      	lsrs	r1, r3, #3
 8001b78:	460b      	mov	r3, r1
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	3330      	adds	r3, #48	; 0x30
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b8e:	701a      	strb	r2, [r3, #0]
			bottomline[1] = (OutputState.Amplitude_Temp/100) % 10 + 48;
 8001b90:	4b72      	ldr	r3, [pc, #456]	; (8001d5c <LCD_Display_Menu+0x69c>)
 8001b92:	f8b3 31a6 	ldrh.w	r3, [r3, #422]	; 0x1a6
 8001b96:	4a7b      	ldr	r2, [pc, #492]	; (8001d84 <LCD_Display_Menu+0x6c4>)
 8001b98:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9c:	095b      	lsrs	r3, r3, #5
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	4b77      	ldr	r3, [pc, #476]	; (8001d80 <LCD_Display_Menu+0x6c0>)
 8001ba2:	fba3 1302 	umull	r1, r3, r3, r2
 8001ba6:	08d9      	lsrs	r1, r3, #3
 8001ba8:	460b      	mov	r3, r1
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	440b      	add	r3, r1
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	3330      	adds	r3, #48	; 0x30
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001bbe:	705a      	strb	r2, [r3, #1]
			bottomline[2] = (OutputState.Amplitude_Temp/10) % 10 + 48;
 8001bc0:	4b66      	ldr	r3, [pc, #408]	; (8001d5c <LCD_Display_Menu+0x69c>)
 8001bc2:	f8b3 31a6 	ldrh.w	r3, [r3, #422]	; 0x1a6
 8001bc6:	4a6e      	ldr	r2, [pc, #440]	; (8001d80 <LCD_Display_Menu+0x6c0>)
 8001bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bcc:	08db      	lsrs	r3, r3, #3
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	4b6b      	ldr	r3, [pc, #428]	; (8001d80 <LCD_Display_Menu+0x6c0>)
 8001bd2:	fba3 1302 	umull	r1, r3, r3, r2
 8001bd6:	08d9      	lsrs	r1, r3, #3
 8001bd8:	460b      	mov	r3, r1
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	440b      	add	r3, r1
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	3330      	adds	r3, #48	; 0x30
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001bee:	709a      	strb	r2, [r3, #2]
			bottomline[3] = (OutputState.Amplitude_Temp) % 10 + 48;
 8001bf0:	4b5a      	ldr	r3, [pc, #360]	; (8001d5c <LCD_Display_Menu+0x69c>)
 8001bf2:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	; 0x1a6
 8001bf6:	4b62      	ldr	r3, [pc, #392]	; (8001d80 <LCD_Display_Menu+0x6c0>)
 8001bf8:	fba3 1302 	umull	r1, r3, r3, r2
 8001bfc:	08d9      	lsrs	r1, r3, #3
 8001bfe:	460b      	mov	r3, r1
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	440b      	add	r3, r1
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	3330      	adds	r3, #48	; 0x30
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c14:	70da      	strb	r2, [r3, #3]
			LCD_Write_String(topline);
 8001c16:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fa97 	bl	800114e <LCD_Write_String>
			LCD_NewLine();
 8001c20:	f7ff fc5c 	bl	80014dc <LCD_NewLine>
			LCD_Write_String(bottomline);
 8001c24:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff fa90 	bl	800114e <LCD_Write_String>
			break;
 8001c2e:	bf00      	nop
 8001c30:	e229      	b.n	8002086 <LCD_Display_Menu+0x9c6>
		}
		case Offset_Val:
		{
			uint8_t topline[] = "Offset";
 8001c32:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c36:	4a4d      	ldr	r2, [pc, #308]	; (8001d6c <LCD_Display_Menu+0x6ac>)
 8001c38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c3c:	6018      	str	r0, [r3, #0]
 8001c3e:	3304      	adds	r3, #4
 8001c40:	8019      	strh	r1, [r3, #0]
 8001c42:	3302      	adds	r3, #2
 8001c44:	0c0a      	lsrs	r2, r1, #16
 8001c46:	701a      	strb	r2, [r3, #0]
			uint8_t bottomline[] = "xxxx mV ";
 8001c48:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c4c:	4a4a      	ldr	r2, [pc, #296]	; (8001d78 <LCD_Display_Menu+0x6b8>)
 8001c4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c50:	c303      	stmia	r3!, {r0, r1}
 8001c52:	701a      	strb	r2, [r3, #0]
			if (OutputState.Offset_Temp < 0) OutputState.Offset_Temp = 0;
			if (OutputState.Offset_Temp > 3300) OutputState.Offset_Temp = 3300;
 8001c54:	4b41      	ldr	r3, [pc, #260]	; (8001d5c <LCD_Display_Menu+0x69c>)
 8001c56:	f8b3 31a8 	ldrh.w	r3, [r3, #424]	; 0x1a8
 8001c5a:	f640 42e4 	movw	r2, #3300	; 0xce4
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d904      	bls.n	8001c6c <LCD_Display_Menu+0x5ac>
 8001c62:	4b3e      	ldr	r3, [pc, #248]	; (8001d5c <LCD_Display_Menu+0x69c>)
 8001c64:	f640 42e4 	movw	r2, #3300	; 0xce4
 8001c68:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
			if(OutputState.Offset_Temp != OutputState.Offset) bottomline[7] = '*';
 8001c6c:	4b3b      	ldr	r3, [pc, #236]	; (8001d5c <LCD_Display_Menu+0x69c>)
 8001c6e:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	; 0x1a8
 8001c72:	4b3a      	ldr	r3, [pc, #232]	; (8001d5c <LCD_Display_Menu+0x69c>)
 8001c74:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d003      	beq.n	8001c84 <LCD_Display_Menu+0x5c4>
 8001c7c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c80:	222a      	movs	r2, #42	; 0x2a
 8001c82:	71da      	strb	r2, [r3, #7]
			bottomline[0] = (OutputState.Offset_Temp/1000) % 10 + 48;
 8001c84:	4b35      	ldr	r3, [pc, #212]	; (8001d5c <LCD_Display_Menu+0x69c>)
 8001c86:	f8b3 31a8 	ldrh.w	r3, [r3, #424]	; 0x1a8
 8001c8a:	4a3c      	ldr	r2, [pc, #240]	; (8001d7c <LCD_Display_Menu+0x6bc>)
 8001c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c90:	099b      	lsrs	r3, r3, #6
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	4b3a      	ldr	r3, [pc, #232]	; (8001d80 <LCD_Display_Menu+0x6c0>)
 8001c96:	fba3 1302 	umull	r1, r3, r3, r2
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	3330      	adds	r3, #48	; 0x30
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001cb2:	701a      	strb	r2, [r3, #0]
			bottomline[1] = (OutputState.Offset_Temp/100) % 10 + 48;
 8001cb4:	4b29      	ldr	r3, [pc, #164]	; (8001d5c <LCD_Display_Menu+0x69c>)
 8001cb6:	f8b3 31a8 	ldrh.w	r3, [r3, #424]	; 0x1a8
 8001cba:	4a32      	ldr	r2, [pc, #200]	; (8001d84 <LCD_Display_Menu+0x6c4>)
 8001cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc0:	095b      	lsrs	r3, r3, #5
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	4b2e      	ldr	r3, [pc, #184]	; (8001d80 <LCD_Display_Menu+0x6c0>)
 8001cc6:	fba3 1302 	umull	r1, r3, r3, r2
 8001cca:	08d9      	lsrs	r1, r3, #3
 8001ccc:	460b      	mov	r3, r1
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	3330      	adds	r3, #48	; 0x30
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ce2:	705a      	strb	r2, [r3, #1]
			bottomline[2] = (OutputState.Offset_Temp/10) % 10 + 48;
 8001ce4:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <LCD_Display_Menu+0x69c>)
 8001ce6:	f8b3 31a8 	ldrh.w	r3, [r3, #424]	; 0x1a8
 8001cea:	4a25      	ldr	r2, [pc, #148]	; (8001d80 <LCD_Display_Menu+0x6c0>)
 8001cec:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf0:	08db      	lsrs	r3, r3, #3
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	4b22      	ldr	r3, [pc, #136]	; (8001d80 <LCD_Display_Menu+0x6c0>)
 8001cf6:	fba3 1302 	umull	r1, r3, r3, r2
 8001cfa:	08d9      	lsrs	r1, r3, #3
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	3330      	adds	r3, #48	; 0x30
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d12:	709a      	strb	r2, [r3, #2]
			bottomline[3] = (OutputState.Offset_Temp) % 10 + 48;
 8001d14:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <LCD_Display_Menu+0x69c>)
 8001d16:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	; 0x1a8
 8001d1a:	4b19      	ldr	r3, [pc, #100]	; (8001d80 <LCD_Display_Menu+0x6c0>)
 8001d1c:	fba3 1302 	umull	r1, r3, r3, r2
 8001d20:	08d9      	lsrs	r1, r3, #3
 8001d22:	460b      	mov	r3, r1
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	440b      	add	r3, r1
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	3330      	adds	r3, #48	; 0x30
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d38:	70da      	strb	r2, [r3, #3]
			LCD_Write_String(topline);
 8001d3a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fa05 	bl	800114e <LCD_Write_String>
			LCD_NewLine();
 8001d44:	f7ff fbca 	bl	80014dc <LCD_NewLine>
			LCD_Write_String(bottomline);
 8001d48:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff f9fe 	bl	800114e <LCD_Write_String>
			break;
 8001d52:	bf00      	nop
 8001d54:	e197      	b.n	8002086 <LCD_Display_Menu+0x9c6>
 8001d56:	bf00      	nop
 8001d58:	0800bea0 	.word	0x0800bea0
 8001d5c:	20000828 	.word	0x20000828
 8001d60:	0800be84 	.word	0x0800be84
 8001d64:	0800be04 	.word	0x0800be04
 8001d68:	0800bea8 	.word	0x0800bea8
 8001d6c:	0800beb4 	.word	0x0800beb4
 8001d70:	0800bebc 	.word	0x0800bebc
 8001d74:	0800bec8 	.word	0x0800bec8
 8001d78:	0800bed4 	.word	0x0800bed4
 8001d7c:	10624dd3 	.word	0x10624dd3
 8001d80:	cccccccd 	.word	0xcccccccd
 8001d84:	51eb851f 	.word	0x51eb851f
		}
		case Freq_Val:
		{
			uint8_t topline[] = "Frequency";
 8001d88:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d8c:	4ac0      	ldr	r2, [pc, #768]	; (8002090 <LCD_Display_Menu+0x9d0>)
 8001d8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d90:	c303      	stmia	r3!, {r0, r1}
 8001d92:	801a      	strh	r2, [r3, #0]
			uint8_t bottomline[] = "xxxx Hz ";
 8001d94:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d98:	4abe      	ldr	r2, [pc, #760]	; (8002094 <LCD_Display_Menu+0x9d4>)
 8001d9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d9c:	c303      	stmia	r3!, {r0, r1}
 8001d9e:	701a      	strb	r2, [r3, #0]
			if (OutputState.Frequency_Temp < 0) OutputState.Frequency_Temp = 0;
			if (OutputState.Frequency_Temp > 3300) OutputState.Frequency_Temp = 3300;
 8001da0:	4bbd      	ldr	r3, [pc, #756]	; (8002098 <LCD_Display_Menu+0x9d8>)
 8001da2:	f8b3 31aa 	ldrh.w	r3, [r3, #426]	; 0x1aa
 8001da6:	f640 42e4 	movw	r2, #3300	; 0xce4
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d904      	bls.n	8001db8 <LCD_Display_Menu+0x6f8>
 8001dae:	4bba      	ldr	r3, [pc, #744]	; (8002098 <LCD_Display_Menu+0x9d8>)
 8001db0:	f640 42e4 	movw	r2, #3300	; 0xce4
 8001db4:	f8a3 21aa 	strh.w	r2, [r3, #426]	; 0x1aa
			if(OutputState.Frequency_Temp != OutputState.Frequency) bottomline[7] = '*';
 8001db8:	4bb7      	ldr	r3, [pc, #732]	; (8002098 <LCD_Display_Menu+0x9d8>)
 8001dba:	f8b3 21aa 	ldrh.w	r2, [r3, #426]	; 0x1aa
 8001dbe:	4bb6      	ldr	r3, [pc, #728]	; (8002098 <LCD_Display_Menu+0x9d8>)
 8001dc0:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d003      	beq.n	8001dd0 <LCD_Display_Menu+0x710>
 8001dc8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001dcc:	222a      	movs	r2, #42	; 0x2a
 8001dce:	71da      	strb	r2, [r3, #7]
			bottomline[0] = (OutputState.Frequency_Temp/1000) % 10 + 48;
 8001dd0:	4bb1      	ldr	r3, [pc, #708]	; (8002098 <LCD_Display_Menu+0x9d8>)
 8001dd2:	f8b3 31aa 	ldrh.w	r3, [r3, #426]	; 0x1aa
 8001dd6:	4ab1      	ldr	r2, [pc, #708]	; (800209c <LCD_Display_Menu+0x9dc>)
 8001dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ddc:	099b      	lsrs	r3, r3, #6
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	4baf      	ldr	r3, [pc, #700]	; (80020a0 <LCD_Display_Menu+0x9e0>)
 8001de2:	fba3 1302 	umull	r1, r3, r3, r2
 8001de6:	08d9      	lsrs	r1, r3, #3
 8001de8:	460b      	mov	r3, r1
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	3330      	adds	r3, #48	; 0x30
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001dfe:	701a      	strb	r2, [r3, #0]
			bottomline[1] = (OutputState.Frequency_Temp/100) % 10 + 48;
 8001e00:	4ba5      	ldr	r3, [pc, #660]	; (8002098 <LCD_Display_Menu+0x9d8>)
 8001e02:	f8b3 31aa 	ldrh.w	r3, [r3, #426]	; 0x1aa
 8001e06:	4aa7      	ldr	r2, [pc, #668]	; (80020a4 <LCD_Display_Menu+0x9e4>)
 8001e08:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0c:	095b      	lsrs	r3, r3, #5
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	4ba3      	ldr	r3, [pc, #652]	; (80020a0 <LCD_Display_Menu+0x9e0>)
 8001e12:	fba3 1302 	umull	r1, r3, r3, r2
 8001e16:	08d9      	lsrs	r1, r3, #3
 8001e18:	460b      	mov	r3, r1
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	3330      	adds	r3, #48	; 0x30
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e2e:	705a      	strb	r2, [r3, #1]
			bottomline[2] = (OutputState.Frequency_Temp/10) % 10 + 48;
 8001e30:	4b99      	ldr	r3, [pc, #612]	; (8002098 <LCD_Display_Menu+0x9d8>)
 8001e32:	f8b3 31aa 	ldrh.w	r3, [r3, #426]	; 0x1aa
 8001e36:	4a9a      	ldr	r2, [pc, #616]	; (80020a0 <LCD_Display_Menu+0x9e0>)
 8001e38:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3c:	08db      	lsrs	r3, r3, #3
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	4b97      	ldr	r3, [pc, #604]	; (80020a0 <LCD_Display_Menu+0x9e0>)
 8001e42:	fba3 1302 	umull	r1, r3, r3, r2
 8001e46:	08d9      	lsrs	r1, r3, #3
 8001e48:	460b      	mov	r3, r1
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	3330      	adds	r3, #48	; 0x30
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e5e:	709a      	strb	r2, [r3, #2]
			bottomline[3] = (OutputState.Frequency_Temp) % 10 + 48;
 8001e60:	4b8d      	ldr	r3, [pc, #564]	; (8002098 <LCD_Display_Menu+0x9d8>)
 8001e62:	f8b3 21aa 	ldrh.w	r2, [r3, #426]	; 0x1aa
 8001e66:	4b8e      	ldr	r3, [pc, #568]	; (80020a0 <LCD_Display_Menu+0x9e0>)
 8001e68:	fba3 1302 	umull	r1, r3, r3, r2
 8001e6c:	08d9      	lsrs	r1, r3, #3
 8001e6e:	460b      	mov	r3, r1
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	440b      	add	r3, r1
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	3330      	adds	r3, #48	; 0x30
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e84:	70da      	strb	r2, [r3, #3]
			LCD_Write_String(topline);
 8001e86:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff f95f 	bl	800114e <LCD_Write_String>
			LCD_NewLine();
 8001e90:	f7ff fb24 	bl	80014dc <LCD_NewLine>
			LCD_Write_String(bottomline);
 8001e94:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff f958 	bl	800114e <LCD_Write_String>
			break;
 8001e9e:	bf00      	nop
 8001ea0:	e0f1      	b.n	8002086 <LCD_Display_Menu+0x9c6>
		}
		case Duty_Val:
		{
			uint8_t topline[] = "Duty Cycle";
 8001ea2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ea6:	4a80      	ldr	r2, [pc, #512]	; (80020a8 <LCD_Display_Menu+0x9e8>)
 8001ea8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001eaa:	c303      	stmia	r3!, {r0, r1}
 8001eac:	801a      	strh	r2, [r3, #0]
 8001eae:	3302      	adds	r3, #2
 8001eb0:	0c12      	lsrs	r2, r2, #16
 8001eb2:	701a      	strb	r2, [r3, #0]
			uint8_t bottomline[] = "xxxx % ";
 8001eb4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001eb8:	4a7c      	ldr	r2, [pc, #496]	; (80020ac <LCD_Display_Menu+0x9ec>)
 8001eba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ebe:	e883 0003 	stmia.w	r3, {r0, r1}
			if (OutputState.DutyCycle_Temp < 0) OutputState.DutyCycle_Temp = 0;
			if (OutputState.DutyCycle_Temp > 100) OutputState.DutyCycle_Temp = 100;
 8001ec2:	4b75      	ldr	r3, [pc, #468]	; (8002098 <LCD_Display_Menu+0x9d8>)
 8001ec4:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 8001ec8:	2b64      	cmp	r3, #100	; 0x64
 8001eca:	d903      	bls.n	8001ed4 <LCD_Display_Menu+0x814>
 8001ecc:	4b72      	ldr	r3, [pc, #456]	; (8002098 <LCD_Display_Menu+0x9d8>)
 8001ece:	2264      	movs	r2, #100	; 0x64
 8001ed0:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
			if(OutputState.DutyCycle_Temp != OutputState.DutyCycle) bottomline[6] = '*';
 8001ed4:	4b70      	ldr	r3, [pc, #448]	; (8002098 <LCD_Display_Menu+0x9d8>)
 8001ed6:	f893 21ac 	ldrb.w	r2, [r3, #428]	; 0x1ac
 8001eda:	4b6f      	ldr	r3, [pc, #444]	; (8002098 <LCD_Display_Menu+0x9d8>)
 8001edc:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d003      	beq.n	8001eec <LCD_Display_Menu+0x82c>
 8001ee4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ee8:	222a      	movs	r2, #42	; 0x2a
 8001eea:	719a      	strb	r2, [r3, #6]
			bottomline[0] = (OutputState.DutyCycle_Temp/1000) % 10 + 48;
 8001eec:	4b6a      	ldr	r3, [pc, #424]	; (8002098 <LCD_Display_Menu+0x9d8>)
 8001eee:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 8001ef2:	4a6a      	ldr	r2, [pc, #424]	; (800209c <LCD_Display_Menu+0x9dc>)
 8001ef4:	fb82 1203 	smull	r1, r2, r2, r3
 8001ef8:	1192      	asrs	r2, r2, #6
 8001efa:	17db      	asrs	r3, r3, #31
 8001efc:	1ad2      	subs	r2, r2, r3
 8001efe:	4b6c      	ldr	r3, [pc, #432]	; (80020b0 <LCD_Display_Menu+0x9f0>)
 8001f00:	fb83 1302 	smull	r1, r3, r3, r2
 8001f04:	1099      	asrs	r1, r3, #2
 8001f06:	17d3      	asrs	r3, r2, #31
 8001f08:	1ac9      	subs	r1, r1, r3
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	440b      	add	r3, r1
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	1ad1      	subs	r1, r2, r3
 8001f14:	b2cb      	uxtb	r3, r1
 8001f16:	3330      	adds	r3, #48	; 0x30
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f1e:	701a      	strb	r2, [r3, #0]
			bottomline[1] = (OutputState.DutyCycle_Temp/100) % 10 + 48;
 8001f20:	4b5d      	ldr	r3, [pc, #372]	; (8002098 <LCD_Display_Menu+0x9d8>)
 8001f22:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 8001f26:	4a5f      	ldr	r2, [pc, #380]	; (80020a4 <LCD_Display_Menu+0x9e4>)
 8001f28:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2c:	095b      	lsrs	r3, r3, #5
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	4b5b      	ldr	r3, [pc, #364]	; (80020a0 <LCD_Display_Menu+0x9e0>)
 8001f32:	fba3 1302 	umull	r1, r3, r3, r2
 8001f36:	08d9      	lsrs	r1, r3, #3
 8001f38:	460b      	mov	r3, r1
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	3330      	adds	r3, #48	; 0x30
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f4c:	705a      	strb	r2, [r3, #1]
			bottomline[2] = (OutputState.DutyCycle_Temp/10) % 10 + 48;
 8001f4e:	4b52      	ldr	r3, [pc, #328]	; (8002098 <LCD_Display_Menu+0x9d8>)
 8001f50:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 8001f54:	4a52      	ldr	r2, [pc, #328]	; (80020a0 <LCD_Display_Menu+0x9e0>)
 8001f56:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5a:	08db      	lsrs	r3, r3, #3
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	4b50      	ldr	r3, [pc, #320]	; (80020a0 <LCD_Display_Menu+0x9e0>)
 8001f60:	fba3 1302 	umull	r1, r3, r3, r2
 8001f64:	08d9      	lsrs	r1, r3, #3
 8001f66:	460b      	mov	r3, r1
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	3330      	adds	r3, #48	; 0x30
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f7a:	709a      	strb	r2, [r3, #2]
			bottomline[3] = (OutputState.DutyCycle_Temp) % 10 + 48;
 8001f7c:	4b46      	ldr	r3, [pc, #280]	; (8002098 <LCD_Display_Menu+0x9d8>)
 8001f7e:	f893 21ac 	ldrb.w	r2, [r3, #428]	; 0x1ac
 8001f82:	4b47      	ldr	r3, [pc, #284]	; (80020a0 <LCD_Display_Menu+0x9e0>)
 8001f84:	fba3 1302 	umull	r1, r3, r3, r2
 8001f88:	08d9      	lsrs	r1, r3, #3
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	440b      	add	r3, r1
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	3330      	adds	r3, #48	; 0x30
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f9e:	70da      	strb	r2, [r3, #3]
			LCD_Write_String(topline);
 8001fa0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff f8d2 	bl	800114e <LCD_Write_String>
			LCD_NewLine();
 8001faa:	f7ff fa97 	bl	80014dc <LCD_NewLine>
			LCD_Write_String(bottomline);
 8001fae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff f8cb 	bl	800114e <LCD_Write_String>
			break;
 8001fb8:	bf00      	nop
 8001fba:	e064      	b.n	8002086 <LCD_Display_Menu+0x9c6>
		}
		case OUT_ON:
		{
			uint8_t topline[] = "Signal";
 8001fbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fc0:	4a3c      	ldr	r2, [pc, #240]	; (80020b4 <LCD_Display_Menu+0x9f4>)
 8001fc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fc6:	6018      	str	r0, [r3, #0]
 8001fc8:	3304      	adds	r3, #4
 8001fca:	8019      	strh	r1, [r3, #0]
 8001fcc:	3302      	adds	r3, #2
 8001fce:	0c0a      	lsrs	r2, r1, #16
 8001fd0:	701a      	strb	r2, [r3, #0]
			LCD_Write_String(topline);
 8001fd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff f8b9 	bl	800114e <LCD_Write_String>
			LCD_NewLine();
 8001fdc:	f7ff fa7e 	bl	80014dc <LCD_NewLine>
			if(OutputState.On)
 8001fe0:	4b2d      	ldr	r3, [pc, #180]	; (8002098 <LCD_Display_Menu+0x9d8>)
 8001fe2:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00d      	beq.n	8002006 <LCD_Display_Menu+0x946>
			{
				uint8_t bottomline[] = "ON - Selected";
 8001fea:	f107 0320 	add.w	r3, r7, #32
 8001fee:	4a32      	ldr	r2, [pc, #200]	; (80020b8 <LCD_Display_Menu+0x9f8>)
 8001ff0:	461c      	mov	r4, r3
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ff6:	c407      	stmia	r4!, {r0, r1, r2}
 8001ff8:	8023      	strh	r3, [r4, #0]
				LCD_Write_String(bottomline);
 8001ffa:	f107 0320 	add.w	r3, r7, #32
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff f8a5 	bl	800114e <LCD_Write_String>
			} else {
				uint8_t bottomline[] = "ON";
				LCD_Write_String(bottomline);
			}
			break;
 8002004:	e03f      	b.n	8002086 <LCD_Display_Menu+0x9c6>
				uint8_t bottomline[] = "ON";
 8002006:	f107 031c 	add.w	r3, r7, #28
 800200a:	4a2c      	ldr	r2, [pc, #176]	; (80020bc <LCD_Display_Menu+0x9fc>)
 800200c:	6812      	ldr	r2, [r2, #0]
 800200e:	4611      	mov	r1, r2
 8002010:	8019      	strh	r1, [r3, #0]
 8002012:	3302      	adds	r3, #2
 8002014:	0c12      	lsrs	r2, r2, #16
 8002016:	701a      	strb	r2, [r3, #0]
				LCD_Write_String(bottomline);
 8002018:	f107 031c 	add.w	r3, r7, #28
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff f896 	bl	800114e <LCD_Write_String>
			break;
 8002022:	bf00      	nop
 8002024:	e02f      	b.n	8002086 <LCD_Display_Menu+0x9c6>
		}
		case OUT_OFF:
		{
			uint8_t topline[] = "Signal";
 8002026:	f107 0314 	add.w	r3, r7, #20
 800202a:	4a22      	ldr	r2, [pc, #136]	; (80020b4 <LCD_Display_Menu+0x9f4>)
 800202c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002030:	6018      	str	r0, [r3, #0]
 8002032:	3304      	adds	r3, #4
 8002034:	8019      	strh	r1, [r3, #0]
 8002036:	3302      	adds	r3, #2
 8002038:	0c0a      	lsrs	r2, r1, #16
 800203a:	701a      	strb	r2, [r3, #0]
			LCD_Write_String(topline);
 800203c:	f107 0314 	add.w	r3, r7, #20
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff f884 	bl	800114e <LCD_Write_String>
			LCD_NewLine();
 8002046:	f7ff fa49 	bl	80014dc <LCD_NewLine>
			if(OutputState.On)
 800204a:	4b13      	ldr	r3, [pc, #76]	; (8002098 <LCD_Display_Menu+0x9d8>)
 800204c:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8002050:	2b00      	cmp	r3, #0
 8002052:	d009      	beq.n	8002068 <LCD_Display_Menu+0x9a8>
			{
				uint8_t bottomline[] = "OFF";
 8002054:	f107 0310 	add.w	r3, r7, #16
 8002058:	4a19      	ldr	r2, [pc, #100]	; (80020c0 <LCD_Display_Menu+0xa00>)
 800205a:	601a      	str	r2, [r3, #0]
				LCD_Write_String(bottomline);
 800205c:	f107 0310 	add.w	r3, r7, #16
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff f874 	bl	800114e <LCD_Write_String>
			} else {
				uint8_t bottomline[] = "OFF - Selected";
				LCD_Write_String(bottomline);
			}
			break;
 8002066:	e00e      	b.n	8002086 <LCD_Display_Menu+0x9c6>
				uint8_t bottomline[] = "OFF - Selected";
 8002068:	463b      	mov	r3, r7
 800206a:	4a16      	ldr	r2, [pc, #88]	; (80020c4 <LCD_Display_Menu+0xa04>)
 800206c:	461c      	mov	r4, r3
 800206e:	4613      	mov	r3, r2
 8002070:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002072:	c407      	stmia	r4!, {r0, r1, r2}
 8002074:	8023      	strh	r3, [r4, #0]
 8002076:	3402      	adds	r4, #2
 8002078:	0c1b      	lsrs	r3, r3, #16
 800207a:	7023      	strb	r3, [r4, #0]
				LCD_Write_String(bottomline);
 800207c:	463b      	mov	r3, r7
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff f865 	bl	800114e <LCD_Write_String>
			break;
 8002084:	bf00      	nop
		}
	}
}
 8002086:	bf00      	nop
 8002088:	f507 77ec 	add.w	r7, r7, #472	; 0x1d8
 800208c:	46bd      	mov	sp, r7
 800208e:	bdb0      	pop	{r4, r5, r7, pc}
 8002090:	0800bebc 	.word	0x0800bebc
 8002094:	0800bee0 	.word	0x0800bee0
 8002098:	20000828 	.word	0x20000828
 800209c:	10624dd3 	.word	0x10624dd3
 80020a0:	cccccccd 	.word	0xcccccccd
 80020a4:	51eb851f 	.word	0x51eb851f
 80020a8:	0800bec8 	.word	0x0800bec8
 80020ac:	0800beec 	.word	0x0800beec
 80020b0:	66666667 	.word	0x66666667
 80020b4:	0800be04 	.word	0x0800be04
 80020b8:	0800bef4 	.word	0x0800bef4
 80020bc:	0800bf04 	.word	0x0800bf04
 80020c0:	0046464f 	.word	0x0046464f
 80020c4:	0800bf08 	.word	0x0800bf08

080020c8 <LCD_Display_Measurement>:

void LCD_Display_Measurement()
{
 80020c8:	b5b0      	push	{r4, r5, r7, lr}
 80020ca:	b0a4      	sub	sp, #144	; 0x90
 80020cc:	af00      	add	r7, sp, #0
//	LCD_Clear_Display();
	LCD_Cursor_Home();
 80020ce:	f7ff fa77 	bl	80015c0 <LCD_Cursor_Home>
	switch(MeasurementState.Mode)
 80020d2:	4b6f      	ldr	r3, [pc, #444]	; (8002290 <LCD_Display_Measurement+0x1c8>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b03      	cmp	r3, #3
 80020d8:	f200 8218 	bhi.w	800250c <LCD_Display_Measurement+0x444>
 80020dc:	a201      	add	r2, pc, #4	; (adr r2, 80020e4 <LCD_Display_Measurement+0x1c>)
 80020de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e2:	bf00      	nop
 80020e4:	080020f5 	.word	0x080020f5
 80020e8:	080021bf 	.word	0x080021bf
 80020ec:	080022b9 	.word	0x080022b9
 80020f0:	080024d3 	.word	0x080024d3
	{
		case DV:
		{
			uint8_t topline[] = "x.xxxV";
 80020f4:	4a67      	ldr	r2, [pc, #412]	; (8002294 <LCD_Display_Measurement+0x1cc>)
 80020f6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80020fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020fe:	6018      	str	r0, [r3, #0]
 8002100:	3304      	adds	r3, #4
 8002102:	8019      	strh	r1, [r3, #0]
 8002104:	3302      	adds	r3, #2
 8002106:	0c0a      	lsrs	r2, r1, #16
 8002108:	701a      	strb	r2, [r3, #0]
			topline[0] = ((MeasurementState.Offset/1000) % 10) + 48;
 800210a:	4b61      	ldr	r3, [pc, #388]	; (8002290 <LCD_Display_Measurement+0x1c8>)
 800210c:	891b      	ldrh	r3, [r3, #8]
 800210e:	4a62      	ldr	r2, [pc, #392]	; (8002298 <LCD_Display_Measurement+0x1d0>)
 8002110:	fba2 2303 	umull	r2, r3, r2, r3
 8002114:	099b      	lsrs	r3, r3, #6
 8002116:	b29a      	uxth	r2, r3
 8002118:	4b60      	ldr	r3, [pc, #384]	; (800229c <LCD_Display_Measurement+0x1d4>)
 800211a:	fba3 1302 	umull	r1, r3, r3, r2
 800211e:	08d9      	lsrs	r1, r3, #3
 8002120:	460b      	mov	r3, r1
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	b29b      	uxth	r3, r3
 800212c:	b2db      	uxtb	r3, r3
 800212e:	3330      	adds	r3, #48	; 0x30
 8002130:	b2db      	uxtb	r3, r3
 8002132:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
			topline[2] = ((MeasurementState.Offset/100) % 10) + 48;
 8002136:	4b56      	ldr	r3, [pc, #344]	; (8002290 <LCD_Display_Measurement+0x1c8>)
 8002138:	891b      	ldrh	r3, [r3, #8]
 800213a:	4a59      	ldr	r2, [pc, #356]	; (80022a0 <LCD_Display_Measurement+0x1d8>)
 800213c:	fba2 2303 	umull	r2, r3, r2, r3
 8002140:	095b      	lsrs	r3, r3, #5
 8002142:	b29a      	uxth	r2, r3
 8002144:	4b55      	ldr	r3, [pc, #340]	; (800229c <LCD_Display_Measurement+0x1d4>)
 8002146:	fba3 1302 	umull	r1, r3, r3, r2
 800214a:	08d9      	lsrs	r1, r3, #3
 800214c:	460b      	mov	r3, r1
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	b29b      	uxth	r3, r3
 8002158:	b2db      	uxtb	r3, r3
 800215a:	3330      	adds	r3, #48	; 0x30
 800215c:	b2db      	uxtb	r3, r3
 800215e:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
			topline[3] = ((MeasurementState.Offset/10) % 10) + 48;
 8002162:	4b4b      	ldr	r3, [pc, #300]	; (8002290 <LCD_Display_Measurement+0x1c8>)
 8002164:	891b      	ldrh	r3, [r3, #8]
 8002166:	4a4d      	ldr	r2, [pc, #308]	; (800229c <LCD_Display_Measurement+0x1d4>)
 8002168:	fba2 2303 	umull	r2, r3, r2, r3
 800216c:	08db      	lsrs	r3, r3, #3
 800216e:	b29a      	uxth	r2, r3
 8002170:	4b4a      	ldr	r3, [pc, #296]	; (800229c <LCD_Display_Measurement+0x1d4>)
 8002172:	fba3 1302 	umull	r1, r3, r3, r2
 8002176:	08d9      	lsrs	r1, r3, #3
 8002178:	460b      	mov	r3, r1
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	b29b      	uxth	r3, r3
 8002184:	b2db      	uxtb	r3, r3
 8002186:	3330      	adds	r3, #48	; 0x30
 8002188:	b2db      	uxtb	r3, r3
 800218a:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			topline[4] = ((MeasurementState.Offset) % 10) + 48;
 800218e:	4b40      	ldr	r3, [pc, #256]	; (8002290 <LCD_Display_Measurement+0x1c8>)
 8002190:	891a      	ldrh	r2, [r3, #8]
 8002192:	4b42      	ldr	r3, [pc, #264]	; (800229c <LCD_Display_Measurement+0x1d4>)
 8002194:	fba3 1302 	umull	r1, r3, r3, r2
 8002198:	08d9      	lsrs	r1, r3, #3
 800219a:	460b      	mov	r3, r1
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	440b      	add	r3, r1
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	3330      	adds	r3, #48	; 0x30
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
			LCD_Write_String(topline);
 80021b0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7fe ffca 	bl	800114e <LCD_Write_String>
			break;
 80021ba:	bf00      	nop
 80021bc:	e1a7      	b.n	800250e <LCD_Display_Measurement+0x446>
		}
		case DI:
		{
			uint8_t topline[] = "xxx.xmA";
 80021be:	4a39      	ldr	r2, [pc, #228]	; (80022a4 <LCD_Display_Measurement+0x1dc>)
 80021c0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80021c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021c8:	e883 0003 	stmia.w	r3, {r0, r1}
			topline[0] = ((CurrentState.Offset/100000) % 10) + 48;
 80021cc:	4b36      	ldr	r3, [pc, #216]	; (80022a8 <LCD_Display_Measurement+0x1e0>)
 80021ce:	891b      	ldrh	r3, [r3, #8]
 80021d0:	4a36      	ldr	r2, [pc, #216]	; (80022ac <LCD_Display_Measurement+0x1e4>)
 80021d2:	fb82 1203 	smull	r1, r2, r2, r3
 80021d6:	1352      	asrs	r2, r2, #13
 80021d8:	17db      	asrs	r3, r3, #31
 80021da:	1ad2      	subs	r2, r2, r3
 80021dc:	4b34      	ldr	r3, [pc, #208]	; (80022b0 <LCD_Display_Measurement+0x1e8>)
 80021de:	fb83 1302 	smull	r1, r3, r3, r2
 80021e2:	1099      	asrs	r1, r3, #2
 80021e4:	17d3      	asrs	r3, r2, #31
 80021e6:	1ac9      	subs	r1, r1, r3
 80021e8:	460b      	mov	r3, r1
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	440b      	add	r3, r1
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	1ad1      	subs	r1, r2, r3
 80021f2:	b2cb      	uxtb	r3, r1
 80021f4:	3330      	adds	r3, #48	; 0x30
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
			topline[1] = ((CurrentState.Offset/10000) % 10) + 48;
 80021fc:	4b2a      	ldr	r3, [pc, #168]	; (80022a8 <LCD_Display_Measurement+0x1e0>)
 80021fe:	891b      	ldrh	r3, [r3, #8]
 8002200:	4a2c      	ldr	r2, [pc, #176]	; (80022b4 <LCD_Display_Measurement+0x1ec>)
 8002202:	fba2 2303 	umull	r2, r3, r2, r3
 8002206:	0b5b      	lsrs	r3, r3, #13
 8002208:	b29a      	uxth	r2, r3
 800220a:	4b24      	ldr	r3, [pc, #144]	; (800229c <LCD_Display_Measurement+0x1d4>)
 800220c:	fba3 1302 	umull	r1, r3, r3, r2
 8002210:	08d9      	lsrs	r1, r3, #3
 8002212:	460b      	mov	r3, r1
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	440b      	add	r3, r1
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	b29b      	uxth	r3, r3
 800221e:	b2db      	uxtb	r3, r3
 8002220:	3330      	adds	r3, #48	; 0x30
 8002222:	b2db      	uxtb	r3, r3
 8002224:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
			topline[2] = ((CurrentState.Offset/1000) % 10) + 48;
 8002228:	4b1f      	ldr	r3, [pc, #124]	; (80022a8 <LCD_Display_Measurement+0x1e0>)
 800222a:	891b      	ldrh	r3, [r3, #8]
 800222c:	4a1a      	ldr	r2, [pc, #104]	; (8002298 <LCD_Display_Measurement+0x1d0>)
 800222e:	fba2 2303 	umull	r2, r3, r2, r3
 8002232:	099b      	lsrs	r3, r3, #6
 8002234:	b29a      	uxth	r2, r3
 8002236:	4b19      	ldr	r3, [pc, #100]	; (800229c <LCD_Display_Measurement+0x1d4>)
 8002238:	fba3 1302 	umull	r1, r3, r3, r2
 800223c:	08d9      	lsrs	r1, r3, #3
 800223e:	460b      	mov	r3, r1
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	440b      	add	r3, r1
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	b29b      	uxth	r3, r3
 800224a:	b2db      	uxtb	r3, r3
 800224c:	3330      	adds	r3, #48	; 0x30
 800224e:	b2db      	uxtb	r3, r3
 8002250:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			topline[4] = ((CurrentState.Offset/100) % 10) + 48;
 8002254:	4b14      	ldr	r3, [pc, #80]	; (80022a8 <LCD_Display_Measurement+0x1e0>)
 8002256:	891b      	ldrh	r3, [r3, #8]
 8002258:	4a11      	ldr	r2, [pc, #68]	; (80022a0 <LCD_Display_Measurement+0x1d8>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	095b      	lsrs	r3, r3, #5
 8002260:	b29a      	uxth	r2, r3
 8002262:	4b0e      	ldr	r3, [pc, #56]	; (800229c <LCD_Display_Measurement+0x1d4>)
 8002264:	fba3 1302 	umull	r1, r3, r3, r2
 8002268:	08d9      	lsrs	r1, r3, #3
 800226a:	460b      	mov	r3, r1
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	440b      	add	r3, r1
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	b29b      	uxth	r3, r3
 8002276:	b2db      	uxtb	r3, r3
 8002278:	3330      	adds	r3, #48	; 0x30
 800227a:	b2db      	uxtb	r3, r3
 800227c:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
			LCD_Write_String(topline);
 8002280:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe ff62 	bl	800114e <LCD_Write_String>
			break;
 800228a:	bf00      	nop
 800228c:	e13f      	b.n	800250e <LCD_Display_Measurement+0x446>
 800228e:	bf00      	nop
 8002290:	2000081c 	.word	0x2000081c
 8002294:	0800bf18 	.word	0x0800bf18
 8002298:	10624dd3 	.word	0x10624dd3
 800229c:	cccccccd 	.word	0xcccccccd
 80022a0:	51eb851f 	.word	0x51eb851f
 80022a4:	0800bf20 	.word	0x0800bf20
 80022a8:	200009e4 	.word	0x200009e4
 80022ac:	14f8b589 	.word	0x14f8b589
 80022b0:	66666667 	.word	0x66666667
 80022b4:	d1b71759 	.word	0xd1b71759
		}
		case AV:
		{
			uint8_t topline[] = "O:x.xxxV,A:x.xxxV,F:xxxxHz";
 80022b8:	4b8e      	ldr	r3, [pc, #568]	; (80024f4 <LCD_Display_Measurement+0x42c>)
 80022ba:	f107 0464 	add.w	r4, r7, #100	; 0x64
 80022be:	461d      	mov	r5, r3
 80022c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022c8:	c403      	stmia	r4!, {r0, r1}
 80022ca:	8022      	strh	r2, [r4, #0]
 80022cc:	3402      	adds	r4, #2
 80022ce:	0c13      	lsrs	r3, r2, #16
 80022d0:	7023      	strb	r3, [r4, #0]
			topline[2] = ((MeasurementState.Offset/1000) % 10) + 48;
 80022d2:	4b89      	ldr	r3, [pc, #548]	; (80024f8 <LCD_Display_Measurement+0x430>)
 80022d4:	891b      	ldrh	r3, [r3, #8]
 80022d6:	4a89      	ldr	r2, [pc, #548]	; (80024fc <LCD_Display_Measurement+0x434>)
 80022d8:	fba2 2303 	umull	r2, r3, r2, r3
 80022dc:	099b      	lsrs	r3, r3, #6
 80022de:	b29a      	uxth	r2, r3
 80022e0:	4b87      	ldr	r3, [pc, #540]	; (8002500 <LCD_Display_Measurement+0x438>)
 80022e2:	fba3 1302 	umull	r1, r3, r3, r2
 80022e6:	08d9      	lsrs	r1, r3, #3
 80022e8:	460b      	mov	r3, r1
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	3330      	adds	r3, #48	; 0x30
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
			topline[4] = ((MeasurementState.Offset/100) % 10) + 48;
 80022fe:	4b7e      	ldr	r3, [pc, #504]	; (80024f8 <LCD_Display_Measurement+0x430>)
 8002300:	891b      	ldrh	r3, [r3, #8]
 8002302:	4a80      	ldr	r2, [pc, #512]	; (8002504 <LCD_Display_Measurement+0x43c>)
 8002304:	fba2 2303 	umull	r2, r3, r2, r3
 8002308:	095b      	lsrs	r3, r3, #5
 800230a:	b29a      	uxth	r2, r3
 800230c:	4b7c      	ldr	r3, [pc, #496]	; (8002500 <LCD_Display_Measurement+0x438>)
 800230e:	fba3 1302 	umull	r1, r3, r3, r2
 8002312:	08d9      	lsrs	r1, r3, #3
 8002314:	460b      	mov	r3, r1
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	b29b      	uxth	r3, r3
 8002320:	b2db      	uxtb	r3, r3
 8002322:	3330      	adds	r3, #48	; 0x30
 8002324:	b2db      	uxtb	r3, r3
 8002326:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
			topline[5] = ((MeasurementState.Offset/10) % 10) + 48;
 800232a:	4b73      	ldr	r3, [pc, #460]	; (80024f8 <LCD_Display_Measurement+0x430>)
 800232c:	891b      	ldrh	r3, [r3, #8]
 800232e:	4a74      	ldr	r2, [pc, #464]	; (8002500 <LCD_Display_Measurement+0x438>)
 8002330:	fba2 2303 	umull	r2, r3, r2, r3
 8002334:	08db      	lsrs	r3, r3, #3
 8002336:	b29a      	uxth	r2, r3
 8002338:	4b71      	ldr	r3, [pc, #452]	; (8002500 <LCD_Display_Measurement+0x438>)
 800233a:	fba3 1302 	umull	r1, r3, r3, r2
 800233e:	08d9      	lsrs	r1, r3, #3
 8002340:	460b      	mov	r3, r1
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	b29b      	uxth	r3, r3
 800234c:	b2db      	uxtb	r3, r3
 800234e:	3330      	adds	r3, #48	; 0x30
 8002350:	b2db      	uxtb	r3, r3
 8002352:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
			topline[6] = ((MeasurementState.Offset) % 10) + 48;
 8002356:	4b68      	ldr	r3, [pc, #416]	; (80024f8 <LCD_Display_Measurement+0x430>)
 8002358:	891a      	ldrh	r2, [r3, #8]
 800235a:	4b69      	ldr	r3, [pc, #420]	; (8002500 <LCD_Display_Measurement+0x438>)
 800235c:	fba3 1302 	umull	r1, r3, r3, r2
 8002360:	08d9      	lsrs	r1, r3, #3
 8002362:	460b      	mov	r3, r1
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	440b      	add	r3, r1
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	b29b      	uxth	r3, r3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	3330      	adds	r3, #48	; 0x30
 8002372:	b2db      	uxtb	r3, r3
 8002374:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
			topline[11] = ((MeasurementState.Amplitude/1000) % 10) + 48;
 8002378:	4b5f      	ldr	r3, [pc, #380]	; (80024f8 <LCD_Display_Measurement+0x430>)
 800237a:	885b      	ldrh	r3, [r3, #2]
 800237c:	4a5f      	ldr	r2, [pc, #380]	; (80024fc <LCD_Display_Measurement+0x434>)
 800237e:	fba2 2303 	umull	r2, r3, r2, r3
 8002382:	099b      	lsrs	r3, r3, #6
 8002384:	b29a      	uxth	r2, r3
 8002386:	4b5e      	ldr	r3, [pc, #376]	; (8002500 <LCD_Display_Measurement+0x438>)
 8002388:	fba3 1302 	umull	r1, r3, r3, r2
 800238c:	08d9      	lsrs	r1, r3, #3
 800238e:	460b      	mov	r3, r1
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	440b      	add	r3, r1
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	b29b      	uxth	r3, r3
 800239a:	b2db      	uxtb	r3, r3
 800239c:	3330      	adds	r3, #48	; 0x30
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			topline[13] = ((MeasurementState.Amplitude/100) % 10) + 48;
 80023a4:	4b54      	ldr	r3, [pc, #336]	; (80024f8 <LCD_Display_Measurement+0x430>)
 80023a6:	885b      	ldrh	r3, [r3, #2]
 80023a8:	4a56      	ldr	r2, [pc, #344]	; (8002504 <LCD_Display_Measurement+0x43c>)
 80023aa:	fba2 2303 	umull	r2, r3, r2, r3
 80023ae:	095b      	lsrs	r3, r3, #5
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	4b53      	ldr	r3, [pc, #332]	; (8002500 <LCD_Display_Measurement+0x438>)
 80023b4:	fba3 1302 	umull	r1, r3, r3, r2
 80023b8:	08d9      	lsrs	r1, r3, #3
 80023ba:	460b      	mov	r3, r1
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	3330      	adds	r3, #48	; 0x30
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
			topline[14] = ((MeasurementState.Amplitude/10) % 10) + 48;
 80023d0:	4b49      	ldr	r3, [pc, #292]	; (80024f8 <LCD_Display_Measurement+0x430>)
 80023d2:	885b      	ldrh	r3, [r3, #2]
 80023d4:	4a4a      	ldr	r2, [pc, #296]	; (8002500 <LCD_Display_Measurement+0x438>)
 80023d6:	fba2 2303 	umull	r2, r3, r2, r3
 80023da:	08db      	lsrs	r3, r3, #3
 80023dc:	b29a      	uxth	r2, r3
 80023de:	4b48      	ldr	r3, [pc, #288]	; (8002500 <LCD_Display_Measurement+0x438>)
 80023e0:	fba3 1302 	umull	r1, r3, r3, r2
 80023e4:	08d9      	lsrs	r1, r3, #3
 80023e6:	460b      	mov	r3, r1
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	440b      	add	r3, r1
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	3330      	adds	r3, #48	; 0x30
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
			topline[15] = ((MeasurementState.Amplitude) % 10) + 48;
 80023fc:	4b3e      	ldr	r3, [pc, #248]	; (80024f8 <LCD_Display_Measurement+0x430>)
 80023fe:	885a      	ldrh	r2, [r3, #2]
 8002400:	4b3f      	ldr	r3, [pc, #252]	; (8002500 <LCD_Display_Measurement+0x438>)
 8002402:	fba3 1302 	umull	r1, r3, r3, r2
 8002406:	08d9      	lsrs	r1, r3, #3
 8002408:	460b      	mov	r3, r1
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	b29b      	uxth	r3, r3
 8002414:	b2db      	uxtb	r3, r3
 8002416:	3330      	adds	r3, #48	; 0x30
 8002418:	b2db      	uxtb	r3, r3
 800241a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
			topline[20] = ((MeasurementState.Frequency/1000) % 10) + 48;
 800241e:	4b36      	ldr	r3, [pc, #216]	; (80024f8 <LCD_Display_Measurement+0x430>)
 8002420:	889b      	ldrh	r3, [r3, #4]
 8002422:	4a36      	ldr	r2, [pc, #216]	; (80024fc <LCD_Display_Measurement+0x434>)
 8002424:	fba2 2303 	umull	r2, r3, r2, r3
 8002428:	099b      	lsrs	r3, r3, #6
 800242a:	b29a      	uxth	r2, r3
 800242c:	4b34      	ldr	r3, [pc, #208]	; (8002500 <LCD_Display_Measurement+0x438>)
 800242e:	fba3 1302 	umull	r1, r3, r3, r2
 8002432:	08d9      	lsrs	r1, r3, #3
 8002434:	460b      	mov	r3, r1
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	b29b      	uxth	r3, r3
 8002440:	b2db      	uxtb	r3, r3
 8002442:	3330      	adds	r3, #48	; 0x30
 8002444:	b2db      	uxtb	r3, r3
 8002446:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
			topline[21] = ((MeasurementState.Frequency/100) % 10) + 48;
 800244a:	4b2b      	ldr	r3, [pc, #172]	; (80024f8 <LCD_Display_Measurement+0x430>)
 800244c:	889b      	ldrh	r3, [r3, #4]
 800244e:	4a2d      	ldr	r2, [pc, #180]	; (8002504 <LCD_Display_Measurement+0x43c>)
 8002450:	fba2 2303 	umull	r2, r3, r2, r3
 8002454:	095b      	lsrs	r3, r3, #5
 8002456:	b29a      	uxth	r2, r3
 8002458:	4b29      	ldr	r3, [pc, #164]	; (8002500 <LCD_Display_Measurement+0x438>)
 800245a:	fba3 1302 	umull	r1, r3, r3, r2
 800245e:	08d9      	lsrs	r1, r3, #3
 8002460:	460b      	mov	r3, r1
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	b29b      	uxth	r3, r3
 800246c:	b2db      	uxtb	r3, r3
 800246e:	3330      	adds	r3, #48	; 0x30
 8002470:	b2db      	uxtb	r3, r3
 8002472:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
			topline[22] = ((MeasurementState.Frequency/10) % 10) + 48;
 8002476:	4b20      	ldr	r3, [pc, #128]	; (80024f8 <LCD_Display_Measurement+0x430>)
 8002478:	889b      	ldrh	r3, [r3, #4]
 800247a:	4a21      	ldr	r2, [pc, #132]	; (8002500 <LCD_Display_Measurement+0x438>)
 800247c:	fba2 2303 	umull	r2, r3, r2, r3
 8002480:	08db      	lsrs	r3, r3, #3
 8002482:	b29a      	uxth	r2, r3
 8002484:	4b1e      	ldr	r3, [pc, #120]	; (8002500 <LCD_Display_Measurement+0x438>)
 8002486:	fba3 1302 	umull	r1, r3, r3, r2
 800248a:	08d9      	lsrs	r1, r3, #3
 800248c:	460b      	mov	r3, r1
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	b29b      	uxth	r3, r3
 8002498:	b2db      	uxtb	r3, r3
 800249a:	3330      	adds	r3, #48	; 0x30
 800249c:	b2db      	uxtb	r3, r3
 800249e:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
			topline[23] = ((MeasurementState.Frequency) % 10) + 48;
 80024a2:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <LCD_Display_Measurement+0x430>)
 80024a4:	889a      	ldrh	r2, [r3, #4]
 80024a6:	4b16      	ldr	r3, [pc, #88]	; (8002500 <LCD_Display_Measurement+0x438>)
 80024a8:	fba3 1302 	umull	r1, r3, r3, r2
 80024ac:	08d9      	lsrs	r1, r3, #3
 80024ae:	460b      	mov	r3, r1
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	440b      	add	r3, r1
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	3330      	adds	r3, #48	; 0x30
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
			LCD_Write_String(topline);
 80024c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fe fe40 	bl	800114e <LCD_Write_String>
			break;
 80024ce:	bf00      	nop
 80024d0:	e01d      	b.n	800250e <LCD_Display_Measurement+0x446>
		}
		case AI:
		{
			uint8_t topline[] = "AC Current";
 80024d2:	4a0d      	ldr	r2, [pc, #52]	; (8002508 <LCD_Display_Measurement+0x440>)
 80024d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80024d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80024da:	c303      	stmia	r3!, {r0, r1}
 80024dc:	801a      	strh	r2, [r3, #0]
 80024de:	3302      	adds	r3, #2
 80024e0:	0c12      	lsrs	r2, r2, #16
 80024e2:	701a      	strb	r2, [r3, #0]
			LCD_Write_String(topline);
 80024e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7fe fe30 	bl	800114e <LCD_Write_String>
			break;
 80024ee:	bf00      	nop
 80024f0:	e00d      	b.n	800250e <LCD_Display_Measurement+0x446>
 80024f2:	bf00      	nop
 80024f4:	0800bf28 	.word	0x0800bf28
 80024f8:	2000081c 	.word	0x2000081c
 80024fc:	10624dd3 	.word	0x10624dd3
 8002500:	cccccccd 	.word	0xcccccccd
 8002504:	51eb851f 	.word	0x51eb851f
 8002508:	0800be44 	.word	0x0800be44
		}
		default:
			// Problems
			break;
 800250c:	bf00      	nop
	}
	LCD_NewLine();
 800250e:	f7fe ffe5 	bl	80014dc <LCD_NewLine>
	if(OutputState.On){
 8002512:	4b39      	ldr	r3, [pc, #228]	; (80025f8 <LCD_Display_Measurement+0x530>)
 8002514:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 82e9 	beq.w	8002af0 <LCD_Display_Measurement+0xa28>
		if(OutputState.Mode == d){
 800251e:	4b36      	ldr	r3, [pc, #216]	; (80025f8 <LCD_Display_Measurement+0x530>)
 8002520:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 8002524:	2b64      	cmp	r3, #100	; 0x64
 8002526:	d171      	bne.n	800260c <LCD_Display_Measurement+0x544>
			uint8_t bottomline[] = "x.xxxV";
 8002528:	4a34      	ldr	r2, [pc, #208]	; (80025fc <LCD_Display_Measurement+0x534>)
 800252a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800252e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002532:	6018      	str	r0, [r3, #0]
 8002534:	3304      	adds	r3, #4
 8002536:	8019      	strh	r1, [r3, #0]
 8002538:	3302      	adds	r3, #2
 800253a:	0c0a      	lsrs	r2, r1, #16
 800253c:	701a      	strb	r2, [r3, #0]
			bottomline[0] = ((OutputState.Offset/1000) % 10) + 48;
 800253e:	4b2e      	ldr	r3, [pc, #184]	; (80025f8 <LCD_Display_Measurement+0x530>)
 8002540:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8002544:	4a2e      	ldr	r2, [pc, #184]	; (8002600 <LCD_Display_Measurement+0x538>)
 8002546:	fba2 2303 	umull	r2, r3, r2, r3
 800254a:	099b      	lsrs	r3, r3, #6
 800254c:	b29a      	uxth	r2, r3
 800254e:	4b2d      	ldr	r3, [pc, #180]	; (8002604 <LCD_Display_Measurement+0x53c>)
 8002550:	fba3 1302 	umull	r1, r3, r3, r2
 8002554:	08d9      	lsrs	r1, r3, #3
 8002556:	460b      	mov	r3, r1
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	440b      	add	r3, r1
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	b29b      	uxth	r3, r3
 8002562:	b2db      	uxtb	r3, r3
 8002564:	3330      	adds	r3, #48	; 0x30
 8002566:	b2db      	uxtb	r3, r3
 8002568:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
			bottomline[2] = ((OutputState.Offset/100) % 10) + 48;
 800256c:	4b22      	ldr	r3, [pc, #136]	; (80025f8 <LCD_Display_Measurement+0x530>)
 800256e:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8002572:	4a25      	ldr	r2, [pc, #148]	; (8002608 <LCD_Display_Measurement+0x540>)
 8002574:	fba2 2303 	umull	r2, r3, r2, r3
 8002578:	095b      	lsrs	r3, r3, #5
 800257a:	b29a      	uxth	r2, r3
 800257c:	4b21      	ldr	r3, [pc, #132]	; (8002604 <LCD_Display_Measurement+0x53c>)
 800257e:	fba3 1302 	umull	r1, r3, r3, r2
 8002582:	08d9      	lsrs	r1, r3, #3
 8002584:	460b      	mov	r3, r1
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	b29b      	uxth	r3, r3
 8002590:	b2db      	uxtb	r3, r3
 8002592:	3330      	adds	r3, #48	; 0x30
 8002594:	b2db      	uxtb	r3, r3
 8002596:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
			bottomline[3] = ((OutputState.Offset/10) % 10) + 48;
 800259a:	4b17      	ldr	r3, [pc, #92]	; (80025f8 <LCD_Display_Measurement+0x530>)
 800259c:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 80025a0:	4a18      	ldr	r2, [pc, #96]	; (8002604 <LCD_Display_Measurement+0x53c>)
 80025a2:	fba2 2303 	umull	r2, r3, r2, r3
 80025a6:	08db      	lsrs	r3, r3, #3
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	4b16      	ldr	r3, [pc, #88]	; (8002604 <LCD_Display_Measurement+0x53c>)
 80025ac:	fba3 1302 	umull	r1, r3, r3, r2
 80025b0:	08d9      	lsrs	r1, r3, #3
 80025b2:	460b      	mov	r3, r1
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	440b      	add	r3, r1
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	b29b      	uxth	r3, r3
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	3330      	adds	r3, #48	; 0x30
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			bottomline[4] = ((OutputState.Offset) % 10) + 48;
 80025c8:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <LCD_Display_Measurement+0x530>)
 80025ca:	f8b3 219c 	ldrh.w	r2, [r3, #412]	; 0x19c
 80025ce:	4b0d      	ldr	r3, [pc, #52]	; (8002604 <LCD_Display_Measurement+0x53c>)
 80025d0:	fba3 1302 	umull	r1, r3, r3, r2
 80025d4:	08d9      	lsrs	r1, r3, #3
 80025d6:	460b      	mov	r3, r1
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	440b      	add	r3, r1
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	3330      	adds	r3, #48	; 0x30
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
			LCD_Write_String(bottomline);
 80025ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fe fdac 	bl	800114e <LCD_Write_String>
		}
	} else {
		uint8_t bottomline[] = "OUTPUT OFF";
		LCD_Write_String(bottomline);
	}
}
 80025f6:	e289      	b.n	8002b0c <LCD_Display_Measurement+0xa44>
 80025f8:	20000828 	.word	0x20000828
 80025fc:	0800bf18 	.word	0x0800bf18
 8002600:	10624dd3 	.word	0x10624dd3
 8002604:	cccccccd 	.word	0xcccccccd
 8002608:	51eb851f 	.word	0x51eb851f
		} else if (OutputState.Mode == s){
 800260c:	4b8e      	ldr	r3, [pc, #568]	; (8002848 <LCD_Display_Measurement+0x780>)
 800260e:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 8002612:	2b73      	cmp	r3, #115	; 0x73
 8002614:	f040 8122 	bne.w	800285c <LCD_Display_Measurement+0x794>
			uint8_t bottomline[] = "O:x.xxxV,A:x.xxxV,F:xxxxHz";
 8002618:	4b8c      	ldr	r3, [pc, #560]	; (800284c <LCD_Display_Measurement+0x784>)
 800261a:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800261e:	461d      	mov	r5, r3
 8002620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002624:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002628:	c403      	stmia	r4!, {r0, r1}
 800262a:	8022      	strh	r2, [r4, #0]
 800262c:	3402      	adds	r4, #2
 800262e:	0c13      	lsrs	r3, r2, #16
 8002630:	7023      	strb	r3, [r4, #0]
			bottomline[2] = ((OutputState.Offset/1000) % 10) + 48;
 8002632:	4b85      	ldr	r3, [pc, #532]	; (8002848 <LCD_Display_Measurement+0x780>)
 8002634:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8002638:	4a85      	ldr	r2, [pc, #532]	; (8002850 <LCD_Display_Measurement+0x788>)
 800263a:	fba2 2303 	umull	r2, r3, r2, r3
 800263e:	099b      	lsrs	r3, r3, #6
 8002640:	b29a      	uxth	r2, r3
 8002642:	4b84      	ldr	r3, [pc, #528]	; (8002854 <LCD_Display_Measurement+0x78c>)
 8002644:	fba3 1302 	umull	r1, r3, r3, r2
 8002648:	08d9      	lsrs	r1, r3, #3
 800264a:	460b      	mov	r3, r1
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	440b      	add	r3, r1
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	b29b      	uxth	r3, r3
 8002656:	b2db      	uxtb	r3, r3
 8002658:	3330      	adds	r3, #48	; 0x30
 800265a:	b2db      	uxtb	r3, r3
 800265c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			bottomline[4] = ((OutputState.Offset/100) % 10) + 48;
 8002660:	4b79      	ldr	r3, [pc, #484]	; (8002848 <LCD_Display_Measurement+0x780>)
 8002662:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8002666:	4a7c      	ldr	r2, [pc, #496]	; (8002858 <LCD_Display_Measurement+0x790>)
 8002668:	fba2 2303 	umull	r2, r3, r2, r3
 800266c:	095b      	lsrs	r3, r3, #5
 800266e:	b29a      	uxth	r2, r3
 8002670:	4b78      	ldr	r3, [pc, #480]	; (8002854 <LCD_Display_Measurement+0x78c>)
 8002672:	fba3 1302 	umull	r1, r3, r3, r2
 8002676:	08d9      	lsrs	r1, r3, #3
 8002678:	460b      	mov	r3, r1
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	b29b      	uxth	r3, r3
 8002684:	b2db      	uxtb	r3, r3
 8002686:	3330      	adds	r3, #48	; 0x30
 8002688:	b2db      	uxtb	r3, r3
 800268a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
			bottomline[5] = ((OutputState.Offset/10) % 10) + 48;
 800268e:	4b6e      	ldr	r3, [pc, #440]	; (8002848 <LCD_Display_Measurement+0x780>)
 8002690:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8002694:	4a6f      	ldr	r2, [pc, #444]	; (8002854 <LCD_Display_Measurement+0x78c>)
 8002696:	fba2 2303 	umull	r2, r3, r2, r3
 800269a:	08db      	lsrs	r3, r3, #3
 800269c:	b29a      	uxth	r2, r3
 800269e:	4b6d      	ldr	r3, [pc, #436]	; (8002854 <LCD_Display_Measurement+0x78c>)
 80026a0:	fba3 1302 	umull	r1, r3, r3, r2
 80026a4:	08d9      	lsrs	r1, r3, #3
 80026a6:	460b      	mov	r3, r1
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	440b      	add	r3, r1
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	3330      	adds	r3, #48	; 0x30
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
			bottomline[6] = ((OutputState.Offset) % 10) + 48;
 80026bc:	4b62      	ldr	r3, [pc, #392]	; (8002848 <LCD_Display_Measurement+0x780>)
 80026be:	f8b3 219c 	ldrh.w	r2, [r3, #412]	; 0x19c
 80026c2:	4b64      	ldr	r3, [pc, #400]	; (8002854 <LCD_Display_Measurement+0x78c>)
 80026c4:	fba3 1302 	umull	r1, r3, r3, r2
 80026c8:	08d9      	lsrs	r1, r3, #3
 80026ca:	460b      	mov	r3, r1
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	440b      	add	r3, r1
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	3330      	adds	r3, #48	; 0x30
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
			bottomline[11] = ((OutputState.Amplitude/1000) % 10) + 48;
 80026e0:	4b59      	ldr	r3, [pc, #356]	; (8002848 <LCD_Display_Measurement+0x780>)
 80026e2:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 80026e6:	4a5a      	ldr	r2, [pc, #360]	; (8002850 <LCD_Display_Measurement+0x788>)
 80026e8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ec:	099b      	lsrs	r3, r3, #6
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	4b58      	ldr	r3, [pc, #352]	; (8002854 <LCD_Display_Measurement+0x78c>)
 80026f2:	fba3 1302 	umull	r1, r3, r3, r2
 80026f6:	08d9      	lsrs	r1, r3, #3
 80026f8:	460b      	mov	r3, r1
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	440b      	add	r3, r1
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	b29b      	uxth	r3, r3
 8002704:	b2db      	uxtb	r3, r3
 8002706:	3330      	adds	r3, #48	; 0x30
 8002708:	b2db      	uxtb	r3, r3
 800270a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			bottomline[13] = ((OutputState.Amplitude/100) % 10) + 48;
 800270e:	4b4e      	ldr	r3, [pc, #312]	; (8002848 <LCD_Display_Measurement+0x780>)
 8002710:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8002714:	4a50      	ldr	r2, [pc, #320]	; (8002858 <LCD_Display_Measurement+0x790>)
 8002716:	fba2 2303 	umull	r2, r3, r2, r3
 800271a:	095b      	lsrs	r3, r3, #5
 800271c:	b29a      	uxth	r2, r3
 800271e:	4b4d      	ldr	r3, [pc, #308]	; (8002854 <LCD_Display_Measurement+0x78c>)
 8002720:	fba3 1302 	umull	r1, r3, r3, r2
 8002724:	08d9      	lsrs	r1, r3, #3
 8002726:	460b      	mov	r3, r1
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	440b      	add	r3, r1
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	b29b      	uxth	r3, r3
 8002732:	b2db      	uxtb	r3, r3
 8002734:	3330      	adds	r3, #48	; 0x30
 8002736:	b2db      	uxtb	r3, r3
 8002738:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
			bottomline[14] = ((OutputState.Amplitude/10) % 10) + 48;
 800273c:	4b42      	ldr	r3, [pc, #264]	; (8002848 <LCD_Display_Measurement+0x780>)
 800273e:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8002742:	4a44      	ldr	r2, [pc, #272]	; (8002854 <LCD_Display_Measurement+0x78c>)
 8002744:	fba2 2303 	umull	r2, r3, r2, r3
 8002748:	08db      	lsrs	r3, r3, #3
 800274a:	b29a      	uxth	r2, r3
 800274c:	4b41      	ldr	r3, [pc, #260]	; (8002854 <LCD_Display_Measurement+0x78c>)
 800274e:	fba3 1302 	umull	r1, r3, r3, r2
 8002752:	08d9      	lsrs	r1, r3, #3
 8002754:	460b      	mov	r3, r1
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	b29b      	uxth	r3, r3
 8002760:	b2db      	uxtb	r3, r3
 8002762:	3330      	adds	r3, #48	; 0x30
 8002764:	b2db      	uxtb	r3, r3
 8002766:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			bottomline[15] = ((OutputState.Amplitude) % 10) + 48;
 800276a:	4b37      	ldr	r3, [pc, #220]	; (8002848 <LCD_Display_Measurement+0x780>)
 800276c:	f8b3 2196 	ldrh.w	r2, [r3, #406]	; 0x196
 8002770:	4b38      	ldr	r3, [pc, #224]	; (8002854 <LCD_Display_Measurement+0x78c>)
 8002772:	fba3 1302 	umull	r1, r3, r3, r2
 8002776:	08d9      	lsrs	r1, r3, #3
 8002778:	460b      	mov	r3, r1
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	b29b      	uxth	r3, r3
 8002784:	b2db      	uxtb	r3, r3
 8002786:	3330      	adds	r3, #48	; 0x30
 8002788:	b2db      	uxtb	r3, r3
 800278a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			bottomline[20] = ((OutputState.Frequency/1000) % 10) + 48;
 800278e:	4b2e      	ldr	r3, [pc, #184]	; (8002848 <LCD_Display_Measurement+0x780>)
 8002790:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8002794:	4a2e      	ldr	r2, [pc, #184]	; (8002850 <LCD_Display_Measurement+0x788>)
 8002796:	fba2 2303 	umull	r2, r3, r2, r3
 800279a:	099b      	lsrs	r3, r3, #6
 800279c:	b29a      	uxth	r2, r3
 800279e:	4b2d      	ldr	r3, [pc, #180]	; (8002854 <LCD_Display_Measurement+0x78c>)
 80027a0:	fba3 1302 	umull	r1, r3, r3, r2
 80027a4:	08d9      	lsrs	r1, r3, #3
 80027a6:	460b      	mov	r3, r1
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	3330      	adds	r3, #48	; 0x30
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
			bottomline[21] = ((OutputState.Frequency/100) % 10) + 48;
 80027bc:	4b22      	ldr	r3, [pc, #136]	; (8002848 <LCD_Display_Measurement+0x780>)
 80027be:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 80027c2:	4a25      	ldr	r2, [pc, #148]	; (8002858 <LCD_Display_Measurement+0x790>)
 80027c4:	fba2 2303 	umull	r2, r3, r2, r3
 80027c8:	095b      	lsrs	r3, r3, #5
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	4b21      	ldr	r3, [pc, #132]	; (8002854 <LCD_Display_Measurement+0x78c>)
 80027ce:	fba3 1302 	umull	r1, r3, r3, r2
 80027d2:	08d9      	lsrs	r1, r3, #3
 80027d4:	460b      	mov	r3, r1
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	b29b      	uxth	r3, r3
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	3330      	adds	r3, #48	; 0x30
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
			bottomline[22] = ((OutputState.Frequency/10) % 10) + 48;
 80027ea:	4b17      	ldr	r3, [pc, #92]	; (8002848 <LCD_Display_Measurement+0x780>)
 80027ec:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 80027f0:	4a18      	ldr	r2, [pc, #96]	; (8002854 <LCD_Display_Measurement+0x78c>)
 80027f2:	fba2 2303 	umull	r2, r3, r2, r3
 80027f6:	08db      	lsrs	r3, r3, #3
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	4b16      	ldr	r3, [pc, #88]	; (8002854 <LCD_Display_Measurement+0x78c>)
 80027fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002800:	08d9      	lsrs	r1, r3, #3
 8002802:	460b      	mov	r3, r1
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	440b      	add	r3, r1
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	b29b      	uxth	r3, r3
 800280e:	b2db      	uxtb	r3, r3
 8002810:	3330      	adds	r3, #48	; 0x30
 8002812:	b2db      	uxtb	r3, r3
 8002814:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
			bottomline[23] = ((OutputState.Frequency) % 10) + 48;
 8002818:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <LCD_Display_Measurement+0x780>)
 800281a:	f8b3 2198 	ldrh.w	r2, [r3, #408]	; 0x198
 800281e:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <LCD_Display_Measurement+0x78c>)
 8002820:	fba3 1302 	umull	r1, r3, r3, r2
 8002824:	08d9      	lsrs	r1, r3, #3
 8002826:	460b      	mov	r3, r1
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	440b      	add	r3, r1
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	b29b      	uxth	r3, r3
 8002832:	b2db      	uxtb	r3, r3
 8002834:	3330      	adds	r3, #48	; 0x30
 8002836:	b2db      	uxtb	r3, r3
 8002838:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			LCD_Write_String(bottomline);
 800283c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002840:	4618      	mov	r0, r3
 8002842:	f7fe fc84 	bl	800114e <LCD_Write_String>
}
 8002846:	e161      	b.n	8002b0c <LCD_Display_Measurement+0xa44>
 8002848:	20000828 	.word	0x20000828
 800284c:	0800bf28 	.word	0x0800bf28
 8002850:	10624dd3 	.word	0x10624dd3
 8002854:	cccccccd 	.word	0xcccccccd
 8002858:	51eb851f 	.word	0x51eb851f
		} else if (OutputState.Mode == p){
 800285c:	4bad      	ldr	r3, [pc, #692]	; (8002b14 <LCD_Display_Measurement+0xa4c>)
 800285e:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 8002862:	2b70      	cmp	r3, #112	; 0x70
 8002864:	f040 8152 	bne.w	8002b0c <LCD_Display_Measurement+0xa44>
			uint8_t bottomline[] = "O:x.xxxV,A:x.xxxV,F:xxxxHz,D:xxx%";
 8002868:	4bab      	ldr	r3, [pc, #684]	; (8002b18 <LCD_Display_Measurement+0xa50>)
 800286a:	1d3c      	adds	r4, r7, #4
 800286c:	461d      	mov	r5, r3
 800286e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002870:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002872:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002874:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002876:	682b      	ldr	r3, [r5, #0]
 8002878:	8023      	strh	r3, [r4, #0]
			bottomline[2] = ((OutputState.Offset/1000) % 10) + 48;
 800287a:	4ba6      	ldr	r3, [pc, #664]	; (8002b14 <LCD_Display_Measurement+0xa4c>)
 800287c:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8002880:	4aa6      	ldr	r2, [pc, #664]	; (8002b1c <LCD_Display_Measurement+0xa54>)
 8002882:	fba2 2303 	umull	r2, r3, r2, r3
 8002886:	099b      	lsrs	r3, r3, #6
 8002888:	b29a      	uxth	r2, r3
 800288a:	4ba5      	ldr	r3, [pc, #660]	; (8002b20 <LCD_Display_Measurement+0xa58>)
 800288c:	fba3 1302 	umull	r1, r3, r3, r2
 8002890:	08d9      	lsrs	r1, r3, #3
 8002892:	460b      	mov	r3, r1
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	440b      	add	r3, r1
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	b29b      	uxth	r3, r3
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	3330      	adds	r3, #48	; 0x30
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	71bb      	strb	r3, [r7, #6]
			bottomline[4] = ((OutputState.Offset/100) % 10) + 48;
 80028a6:	4b9b      	ldr	r3, [pc, #620]	; (8002b14 <LCD_Display_Measurement+0xa4c>)
 80028a8:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 80028ac:	4a9d      	ldr	r2, [pc, #628]	; (8002b24 <LCD_Display_Measurement+0xa5c>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	095b      	lsrs	r3, r3, #5
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	4b9a      	ldr	r3, [pc, #616]	; (8002b20 <LCD_Display_Measurement+0xa58>)
 80028b8:	fba3 1302 	umull	r1, r3, r3, r2
 80028bc:	08d9      	lsrs	r1, r3, #3
 80028be:	460b      	mov	r3, r1
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	440b      	add	r3, r1
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	3330      	adds	r3, #48	; 0x30
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	723b      	strb	r3, [r7, #8]
			bottomline[5] = ((OutputState.Offset/10) % 10) + 48;
 80028d2:	4b90      	ldr	r3, [pc, #576]	; (8002b14 <LCD_Display_Measurement+0xa4c>)
 80028d4:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 80028d8:	4a91      	ldr	r2, [pc, #580]	; (8002b20 <LCD_Display_Measurement+0xa58>)
 80028da:	fba2 2303 	umull	r2, r3, r2, r3
 80028de:	08db      	lsrs	r3, r3, #3
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	4b8f      	ldr	r3, [pc, #572]	; (8002b20 <LCD_Display_Measurement+0xa58>)
 80028e4:	fba3 1302 	umull	r1, r3, r3, r2
 80028e8:	08d9      	lsrs	r1, r3, #3
 80028ea:	460b      	mov	r3, r1
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	3330      	adds	r3, #48	; 0x30
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	727b      	strb	r3, [r7, #9]
			bottomline[6] = ((OutputState.Offset) % 10) + 48;
 80028fe:	4b85      	ldr	r3, [pc, #532]	; (8002b14 <LCD_Display_Measurement+0xa4c>)
 8002900:	f8b3 219c 	ldrh.w	r2, [r3, #412]	; 0x19c
 8002904:	4b86      	ldr	r3, [pc, #536]	; (8002b20 <LCD_Display_Measurement+0xa58>)
 8002906:	fba3 1302 	umull	r1, r3, r3, r2
 800290a:	08d9      	lsrs	r1, r3, #3
 800290c:	460b      	mov	r3, r1
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	b29b      	uxth	r3, r3
 8002918:	b2db      	uxtb	r3, r3
 800291a:	3330      	adds	r3, #48	; 0x30
 800291c:	b2db      	uxtb	r3, r3
 800291e:	72bb      	strb	r3, [r7, #10]
			bottomline[11] = ((OutputState.Amplitude/1000) % 10) + 48;
 8002920:	4b7c      	ldr	r3, [pc, #496]	; (8002b14 <LCD_Display_Measurement+0xa4c>)
 8002922:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8002926:	4a7d      	ldr	r2, [pc, #500]	; (8002b1c <LCD_Display_Measurement+0xa54>)
 8002928:	fba2 2303 	umull	r2, r3, r2, r3
 800292c:	099b      	lsrs	r3, r3, #6
 800292e:	b29a      	uxth	r2, r3
 8002930:	4b7b      	ldr	r3, [pc, #492]	; (8002b20 <LCD_Display_Measurement+0xa58>)
 8002932:	fba3 1302 	umull	r1, r3, r3, r2
 8002936:	08d9      	lsrs	r1, r3, #3
 8002938:	460b      	mov	r3, r1
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	b29b      	uxth	r3, r3
 8002944:	b2db      	uxtb	r3, r3
 8002946:	3330      	adds	r3, #48	; 0x30
 8002948:	b2db      	uxtb	r3, r3
 800294a:	73fb      	strb	r3, [r7, #15]
			bottomline[13] = ((OutputState.Amplitude/100) % 10) + 48;
 800294c:	4b71      	ldr	r3, [pc, #452]	; (8002b14 <LCD_Display_Measurement+0xa4c>)
 800294e:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8002952:	4a74      	ldr	r2, [pc, #464]	; (8002b24 <LCD_Display_Measurement+0xa5c>)
 8002954:	fba2 2303 	umull	r2, r3, r2, r3
 8002958:	095b      	lsrs	r3, r3, #5
 800295a:	b29a      	uxth	r2, r3
 800295c:	4b70      	ldr	r3, [pc, #448]	; (8002b20 <LCD_Display_Measurement+0xa58>)
 800295e:	fba3 1302 	umull	r1, r3, r3, r2
 8002962:	08d9      	lsrs	r1, r3, #3
 8002964:	460b      	mov	r3, r1
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	b29b      	uxth	r3, r3
 8002970:	b2db      	uxtb	r3, r3
 8002972:	3330      	adds	r3, #48	; 0x30
 8002974:	b2db      	uxtb	r3, r3
 8002976:	747b      	strb	r3, [r7, #17]
			bottomline[14] = ((OutputState.Amplitude/10) % 10) + 48;
 8002978:	4b66      	ldr	r3, [pc, #408]	; (8002b14 <LCD_Display_Measurement+0xa4c>)
 800297a:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 800297e:	4a68      	ldr	r2, [pc, #416]	; (8002b20 <LCD_Display_Measurement+0xa58>)
 8002980:	fba2 2303 	umull	r2, r3, r2, r3
 8002984:	08db      	lsrs	r3, r3, #3
 8002986:	b29a      	uxth	r2, r3
 8002988:	4b65      	ldr	r3, [pc, #404]	; (8002b20 <LCD_Display_Measurement+0xa58>)
 800298a:	fba3 1302 	umull	r1, r3, r3, r2
 800298e:	08d9      	lsrs	r1, r3, #3
 8002990:	460b      	mov	r3, r1
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	b29b      	uxth	r3, r3
 800299c:	b2db      	uxtb	r3, r3
 800299e:	3330      	adds	r3, #48	; 0x30
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	74bb      	strb	r3, [r7, #18]
			bottomline[15] = ((OutputState.Amplitude) % 10) + 48;
 80029a4:	4b5b      	ldr	r3, [pc, #364]	; (8002b14 <LCD_Display_Measurement+0xa4c>)
 80029a6:	f8b3 2196 	ldrh.w	r2, [r3, #406]	; 0x196
 80029aa:	4b5d      	ldr	r3, [pc, #372]	; (8002b20 <LCD_Display_Measurement+0xa58>)
 80029ac:	fba3 1302 	umull	r1, r3, r3, r2
 80029b0:	08d9      	lsrs	r1, r3, #3
 80029b2:	460b      	mov	r3, r1
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	440b      	add	r3, r1
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	b29b      	uxth	r3, r3
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	3330      	adds	r3, #48	; 0x30
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	74fb      	strb	r3, [r7, #19]
			bottomline[20] = ((OutputState.Frequency/1000) % 10) + 48;
 80029c6:	4b53      	ldr	r3, [pc, #332]	; (8002b14 <LCD_Display_Measurement+0xa4c>)
 80029c8:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 80029cc:	4a53      	ldr	r2, [pc, #332]	; (8002b1c <LCD_Display_Measurement+0xa54>)
 80029ce:	fba2 2303 	umull	r2, r3, r2, r3
 80029d2:	099b      	lsrs	r3, r3, #6
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	4b52      	ldr	r3, [pc, #328]	; (8002b20 <LCD_Display_Measurement+0xa58>)
 80029d8:	fba3 1302 	umull	r1, r3, r3, r2
 80029dc:	08d9      	lsrs	r1, r3, #3
 80029de:	460b      	mov	r3, r1
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	440b      	add	r3, r1
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	3330      	adds	r3, #48	; 0x30
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	763b      	strb	r3, [r7, #24]
			bottomline[21] = ((OutputState.Frequency/100) % 10) + 48;
 80029f2:	4b48      	ldr	r3, [pc, #288]	; (8002b14 <LCD_Display_Measurement+0xa4c>)
 80029f4:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 80029f8:	4a4a      	ldr	r2, [pc, #296]	; (8002b24 <LCD_Display_Measurement+0xa5c>)
 80029fa:	fba2 2303 	umull	r2, r3, r2, r3
 80029fe:	095b      	lsrs	r3, r3, #5
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	4b47      	ldr	r3, [pc, #284]	; (8002b20 <LCD_Display_Measurement+0xa58>)
 8002a04:	fba3 1302 	umull	r1, r3, r3, r2
 8002a08:	08d9      	lsrs	r1, r3, #3
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	440b      	add	r3, r1
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	3330      	adds	r3, #48	; 0x30
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	767b      	strb	r3, [r7, #25]
			bottomline[22] = ((OutputState.Frequency/10) % 10) + 48;
 8002a1e:	4b3d      	ldr	r3, [pc, #244]	; (8002b14 <LCD_Display_Measurement+0xa4c>)
 8002a20:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8002a24:	4a3e      	ldr	r2, [pc, #248]	; (8002b20 <LCD_Display_Measurement+0xa58>)
 8002a26:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2a:	08db      	lsrs	r3, r3, #3
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	4b3c      	ldr	r3, [pc, #240]	; (8002b20 <LCD_Display_Measurement+0xa58>)
 8002a30:	fba3 1302 	umull	r1, r3, r3, r2
 8002a34:	08d9      	lsrs	r1, r3, #3
 8002a36:	460b      	mov	r3, r1
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	3330      	adds	r3, #48	; 0x30
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	76bb      	strb	r3, [r7, #26]
			bottomline[23] = ((OutputState.Frequency) % 10) + 48;
 8002a4a:	4b32      	ldr	r3, [pc, #200]	; (8002b14 <LCD_Display_Measurement+0xa4c>)
 8002a4c:	f8b3 2198 	ldrh.w	r2, [r3, #408]	; 0x198
 8002a50:	4b33      	ldr	r3, [pc, #204]	; (8002b20 <LCD_Display_Measurement+0xa58>)
 8002a52:	fba3 1302 	umull	r1, r3, r3, r2
 8002a56:	08d9      	lsrs	r1, r3, #3
 8002a58:	460b      	mov	r3, r1
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	3330      	adds	r3, #48	; 0x30
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	76fb      	strb	r3, [r7, #27]
			bottomline[29] = ((OutputState.DutyCycle/100) % 10) + 48;
 8002a6c:	4b29      	ldr	r3, [pc, #164]	; (8002b14 <LCD_Display_Measurement+0xa4c>)
 8002a6e:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8002a72:	4a2c      	ldr	r2, [pc, #176]	; (8002b24 <LCD_Display_Measurement+0xa5c>)
 8002a74:	fba2 2303 	umull	r2, r3, r2, r3
 8002a78:	095b      	lsrs	r3, r3, #5
 8002a7a:	b2da      	uxtb	r2, r3
 8002a7c:	4b28      	ldr	r3, [pc, #160]	; (8002b20 <LCD_Display_Measurement+0xa58>)
 8002a7e:	fba3 1302 	umull	r1, r3, r3, r2
 8002a82:	08d9      	lsrs	r1, r3, #3
 8002a84:	460b      	mov	r3, r1
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	3330      	adds	r3, #48	; 0x30
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			bottomline[30] = ((OutputState.DutyCycle/10) % 10) + 48;
 8002a98:	4b1e      	ldr	r3, [pc, #120]	; (8002b14 <LCD_Display_Measurement+0xa4c>)
 8002a9a:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8002a9e:	4a20      	ldr	r2, [pc, #128]	; (8002b20 <LCD_Display_Measurement+0xa58>)
 8002aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa4:	08db      	lsrs	r3, r3, #3
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	4b1d      	ldr	r3, [pc, #116]	; (8002b20 <LCD_Display_Measurement+0xa58>)
 8002aaa:	fba3 1302 	umull	r1, r3, r3, r2
 8002aae:	08d9      	lsrs	r1, r3, #3
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	3330      	adds	r3, #48	; 0x30
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			bottomline[31] = ((OutputState.DutyCycle) % 10) + 48;
 8002ac4:	4b13      	ldr	r3, [pc, #76]	; (8002b14 <LCD_Display_Measurement+0xa4c>)
 8002ac6:	f893 21a4 	ldrb.w	r2, [r3, #420]	; 0x1a4
 8002aca:	4b15      	ldr	r3, [pc, #84]	; (8002b20 <LCD_Display_Measurement+0xa58>)
 8002acc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ad0:	08d9      	lsrs	r1, r3, #3
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	440b      	add	r3, r1
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	3330      	adds	r3, #48	; 0x30
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			LCD_Write_String(bottomline);
 8002ae6:	1d3b      	adds	r3, r7, #4
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fe fb30 	bl	800114e <LCD_Write_String>
}
 8002aee:	e00d      	b.n	8002b0c <LCD_Display_Measurement+0xa44>
		uint8_t bottomline[] = "OUTPUT OFF";
 8002af0:	4a0d      	ldr	r2, [pc, #52]	; (8002b28 <LCD_Display_Measurement+0xa60>)
 8002af2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002af6:	ca07      	ldmia	r2, {r0, r1, r2}
 8002af8:	c303      	stmia	r3!, {r0, r1}
 8002afa:	801a      	strh	r2, [r3, #0]
 8002afc:	3302      	adds	r3, #2
 8002afe:	0c12      	lsrs	r2, r2, #16
 8002b00:	701a      	strb	r2, [r3, #0]
		LCD_Write_String(bottomline);
 8002b02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fe fb21 	bl	800114e <LCD_Write_String>
}
 8002b0c:	bf00      	nop
 8002b0e:	3790      	adds	r7, #144	; 0x90
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bdb0      	pop	{r4, r5, r7, pc}
 8002b14:	20000828 	.word	0x20000828
 8002b18:	0800bf44 	.word	0x0800bf44
 8002b1c:	10624dd3 	.word	0x10624dd3
 8002b20:	cccccccd 	.word	0xcccccccd
 8002b24:	51eb851f 	.word	0x51eb851f
 8002b28:	0800bf68 	.word	0x0800bf68

08002b2c <LCD_Branch_Action>:

void LCD_Branch_Action(BranchActionType Action)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	71fb      	strb	r3, [r7, #7]
	DisplayBranchType CurrentBranch = DisplayState.CurrentBranch;
 8002b36:	4bc8      	ldr	r3, [pc, #800]	; (8002e58 <LCD_Branch_Action+0x32c>)
 8002b38:	78db      	ldrb	r3, [r3, #3]
 8002b3a:	73bb      	strb	r3, [r7, #14]
	DisplayBranchType NextBranch = DisplayState.CurrentBranch;
 8002b3c:	4bc6      	ldr	r3, [pc, #792]	; (8002e58 <LCD_Branch_Action+0x32c>)
 8002b3e:	78db      	ldrb	r3, [r3, #3]
 8002b40:	73fb      	strb	r3, [r7, #15]
	switch(CurrentBranch)
 8002b42:	7bbb      	ldrb	r3, [r7, #14]
 8002b44:	2b16      	cmp	r3, #22
 8002b46:	f200 8383 	bhi.w	8003250 <LCD_Branch_Action+0x724>
 8002b4a:	a201      	add	r2, pc, #4	; (adr r2, 8002b50 <LCD_Branch_Action+0x24>)
 8002b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b50:	08002bad 	.word	0x08002bad
 8002b54:	08002bdb 	.word	0x08002bdb
 8002b58:	08002c13 	.word	0x08002c13
 8002b5c:	08002c4b 	.word	0x08002c4b
 8002b60:	08002c7d 	.word	0x08002c7d
 8002b64:	08002cb7 	.word	0x08002cb7
 8002b68:	08002cef 	.word	0x08002cef
 8002b6c:	08002d61 	.word	0x08002d61
 8002b70:	08002d21 	.word	0x08002d21
 8002b74:	08002d9b 	.word	0x08002d9b
 8002b78:	08003177 	.word	0x08003177
 8002b7c:	080031b7 	.word	0x080031b7
 8002b80:	08002dd3 	.word	0x08002dd3
 8002b84:	08002e21 	.word	0x08002e21
 8002b88:	08002e81 	.word	0x08002e81
 8002b8c:	08002ed1 	.word	0x08002ed1
 8002b90:	08002ff3 	.word	0x08002ff3
 8002b94:	08002f17 	.word	0x08002f17
 8002b98:	08003051 	.word	0x08003051
 8002b9c:	08002f61 	.word	0x08002f61
 8002ba0:	080030b1 	.word	0x080030b1
 8002ba4:	08002fad 	.word	0x08002fad
 8002ba8:	08003111 	.word	0x08003111
	{
		case Top:
		{
			switch(Action)
 8002bac:	79fb      	ldrb	r3, [r7, #7]
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	f200 8321 	bhi.w	80031f6 <LCD_Branch_Action+0x6ca>
 8002bb4:	a201      	add	r2, pc, #4	; (adr r2, 8002bbc <LCD_Branch_Action+0x90>)
 8002bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bba:	bf00      	nop
 8002bbc:	08002bd7 	.word	0x08002bd7
 8002bc0:	08002bd1 	.word	0x08002bd1
 8002bc4:	08002bd7 	.word	0x08002bd7
 8002bc8:	08002bd7 	.word	0x08002bd7
 8002bcc:	08002bd7 	.word	0x08002bd7
					// Nothing
					break;
				}
				case Down:
				{
					NextBranch = Measure;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]
					break;
 8002bd4:	e000      	b.n	8002bd8 <LCD_Branch_Action+0xac>
					break;
 8002bd6:	bf00      	nop
				{
					// Already implemented
					break;
				}
			}
			break;
 8002bd8:	e30d      	b.n	80031f6 <LCD_Branch_Action+0x6ca>
		}
		case Measure:
		{
			switch(Action)
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	f200 830c 	bhi.w	80031fa <LCD_Branch_Action+0x6ce>
 8002be2:	a201      	add	r2, pc, #4	; (adr r2, 8002be8 <LCD_Branch_Action+0xbc>)
 8002be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be8:	08002bfd 	.word	0x08002bfd
 8002bec:	08002c03 	.word	0x08002c03
 8002bf0:	08002c0f 	.word	0x08002c0f
 8002bf4:	08002c09 	.word	0x08002c09
 8002bf8:	08002c0f 	.word	0x08002c0f
			{
				case Up:
				{
					NextBranch = Top;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	73fb      	strb	r3, [r7, #15]
					break;
 8002c00:	e006      	b.n	8002c10 <LCD_Branch_Action+0xe4>
				}
				case Down:
				{
					NextBranch = DC_V;
 8002c02:	2303      	movs	r3, #3
 8002c04:	73fb      	strb	r3, [r7, #15]
					break;
 8002c06:	e003      	b.n	8002c10 <LCD_Branch_Action+0xe4>
					// Nothing
					break;
				}
				case Right:
				{
					NextBranch = Signal;
 8002c08:	2302      	movs	r3, #2
 8002c0a:	73fb      	strb	r3, [r7, #15]
					break;
 8002c0c:	e000      	b.n	8002c10 <LCD_Branch_Action+0xe4>
					break;
 8002c0e:	bf00      	nop
				{
					// Nothing
					break;
				}
			}
			break;
 8002c10:	e2f3      	b.n	80031fa <LCD_Branch_Action+0x6ce>
		}
		case Signal:
		{
			switch(Action)
 8002c12:	79fb      	ldrb	r3, [r7, #7]
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	f200 82f2 	bhi.w	80031fe <LCD_Branch_Action+0x6d2>
 8002c1a:	a201      	add	r2, pc, #4	; (adr r2, 8002c20 <LCD_Branch_Action+0xf4>)
 8002c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c20:	08002c35 	.word	0x08002c35
 8002c24:	08002c3b 	.word	0x08002c3b
 8002c28:	08002c41 	.word	0x08002c41
 8002c2c:	08002c47 	.word	0x08002c47
 8002c30:	08002c47 	.word	0x08002c47
			{
				case Up:
				{
					NextBranch = Top;
 8002c34:	2300      	movs	r3, #0
 8002c36:	73fb      	strb	r3, [r7, #15]
					break;
 8002c38:	e006      	b.n	8002c48 <LCD_Branch_Action+0x11c>
				}
				case Down:
				{
					NextBranch = Type;
 8002c3a:	2307      	movs	r3, #7
 8002c3c:	73fb      	strb	r3, [r7, #15]
					break;
 8002c3e:	e003      	b.n	8002c48 <LCD_Branch_Action+0x11c>
				}
				case Left:
				{
					NextBranch = Measure;
 8002c40:	2301      	movs	r3, #1
 8002c42:	73fb      	strb	r3, [r7, #15]
					break;
 8002c44:	e000      	b.n	8002c48 <LCD_Branch_Action+0x11c>
				}
				case Right:
				{
					// Nothing
					break;
 8002c46:	bf00      	nop
				{
					// Nothing
					break;
				}
			}
			break;
 8002c48:	e2d9      	b.n	80031fe <LCD_Branch_Action+0x6d2>
		}
		case DC_V:
		{
			switch(Action)
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	2b04      	cmp	r3, #4
 8002c4e:	f200 82d8 	bhi.w	8003202 <LCD_Branch_Action+0x6d6>
 8002c52:	a201      	add	r2, pc, #4	; (adr r2, 8002c58 <LCD_Branch_Action+0x12c>)
 8002c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c58:	08002c6d 	.word	0x08002c6d
 8002c5c:	08002c79 	.word	0x08002c79
 8002c60:	08002c79 	.word	0x08002c79
 8002c64:	08002c73 	.word	0x08002c73
 8002c68:	08002c79 	.word	0x08002c79
			{
				case Up:
				{
					NextBranch = Measure;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	73fb      	strb	r3, [r7, #15]
					break;
 8002c70:	e003      	b.n	8002c7a <LCD_Branch_Action+0x14e>
					// Nothing
					break;
				}
				case Right:
				{
					NextBranch = DC_I;
 8002c72:	2304      	movs	r3, #4
 8002c74:	73fb      	strb	r3, [r7, #15]
					break;
 8002c76:	e000      	b.n	8002c7a <LCD_Branch_Action+0x14e>
					break;
 8002c78:	bf00      	nop
				{
					// Nothing
					break;
				}
			}
			break;
 8002c7a:	e2c2      	b.n	8003202 <LCD_Branch_Action+0x6d6>
		}
		case DC_I:
		{
			switch(Action)
 8002c7c:	79fb      	ldrb	r3, [r7, #7]
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	f200 82c1 	bhi.w	8003206 <LCD_Branch_Action+0x6da>
 8002c84:	a201      	add	r2, pc, #4	; (adr r2, 8002c8c <LCD_Branch_Action+0x160>)
 8002c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c8a:	bf00      	nop
 8002c8c:	08002ca1 	.word	0x08002ca1
 8002c90:	08002cb3 	.word	0x08002cb3
 8002c94:	08002ca7 	.word	0x08002ca7
 8002c98:	08002cad 	.word	0x08002cad
 8002c9c:	08002cb3 	.word	0x08002cb3
			{
				case Up:
				{
					NextBranch = Measure;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	73fb      	strb	r3, [r7, #15]
					break;
 8002ca4:	e006      	b.n	8002cb4 <LCD_Branch_Action+0x188>
					// Nothing
					break;
				}
				case Left:
				{
					NextBranch = DC_V;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	73fb      	strb	r3, [r7, #15]
					break;
 8002caa:	e003      	b.n	8002cb4 <LCD_Branch_Action+0x188>
				}
				case Right:
				{
					NextBranch = AC_V;
 8002cac:	2305      	movs	r3, #5
 8002cae:	73fb      	strb	r3, [r7, #15]
					break;
 8002cb0:	e000      	b.n	8002cb4 <LCD_Branch_Action+0x188>
					break;
 8002cb2:	bf00      	nop
				{
					// Nothing
					break;
				}
			}
			break;
 8002cb4:	e2a7      	b.n	8003206 <LCD_Branch_Action+0x6da>
		}
		case AC_V:
		{
			switch(Action)
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	2b04      	cmp	r3, #4
 8002cba:	f200 82a6 	bhi.w	800320a <LCD_Branch_Action+0x6de>
 8002cbe:	a201      	add	r2, pc, #4	; (adr r2, 8002cc4 <LCD_Branch_Action+0x198>)
 8002cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc4:	08002cd9 	.word	0x08002cd9
 8002cc8:	08002ceb 	.word	0x08002ceb
 8002ccc:	08002cdf 	.word	0x08002cdf
 8002cd0:	08002ce5 	.word	0x08002ce5
 8002cd4:	08002ceb 	.word	0x08002ceb
			{
				case Up:
				{
					NextBranch = Measure;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	73fb      	strb	r3, [r7, #15]
					break;
 8002cdc:	e006      	b.n	8002cec <LCD_Branch_Action+0x1c0>
					// Nothing
					break;
				}
				case Left:
				{
					NextBranch = DC_I;
 8002cde:	2304      	movs	r3, #4
 8002ce0:	73fb      	strb	r3, [r7, #15]
					break;
 8002ce2:	e003      	b.n	8002cec <LCD_Branch_Action+0x1c0>
				}
				case Right:
				{
					NextBranch = AC_I;
 8002ce4:	2306      	movs	r3, #6
 8002ce6:	73fb      	strb	r3, [r7, #15]
					break;
 8002ce8:	e000      	b.n	8002cec <LCD_Branch_Action+0x1c0>
					break;
 8002cea:	bf00      	nop
				{
					// Nothing
					break;
				}
			}
			break;
 8002cec:	e28d      	b.n	800320a <LCD_Branch_Action+0x6de>
		}
		case AC_I:
		{
			switch(Action)
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	f200 828c 	bhi.w	800320e <LCD_Branch_Action+0x6e2>
 8002cf6:	a201      	add	r2, pc, #4	; (adr r2, 8002cfc <LCD_Branch_Action+0x1d0>)
 8002cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cfc:	08002d11 	.word	0x08002d11
 8002d00:	08002d1d 	.word	0x08002d1d
 8002d04:	08002d17 	.word	0x08002d17
 8002d08:	08002d1d 	.word	0x08002d1d
 8002d0c:	08002d1d 	.word	0x08002d1d
			{
				case Up:
				{
					NextBranch = Measure;
 8002d10:	2301      	movs	r3, #1
 8002d12:	73fb      	strb	r3, [r7, #15]
					break;
 8002d14:	e003      	b.n	8002d1e <LCD_Branch_Action+0x1f2>
					// Nothing
					break;
				}
				case Left:
				{
					NextBranch = AC_V;
 8002d16:	2305      	movs	r3, #5
 8002d18:	73fb      	strb	r3, [r7, #15]
					break;
 8002d1a:	e000      	b.n	8002d1e <LCD_Branch_Action+0x1f2>
					break;
 8002d1c:	bf00      	nop
				{
					// Nothing
					break;
				}
			}
			break;
 8002d1e:	e276      	b.n	800320e <LCD_Branch_Action+0x6e2>
		}
		case Parameter:
		{
			switch(Action)
 8002d20:	79fb      	ldrb	r3, [r7, #7]
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	f200 8275 	bhi.w	8003212 <LCD_Branch_Action+0x6e6>
 8002d28:	a201      	add	r2, pc, #4	; (adr r2, 8002d30 <LCD_Branch_Action+0x204>)
 8002d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d2e:	bf00      	nop
 8002d30:	08002d45 	.word	0x08002d45
 8002d34:	08002d4b 	.word	0x08002d4b
 8002d38:	08002d51 	.word	0x08002d51
 8002d3c:	08002d57 	.word	0x08002d57
 8002d40:	08002d5d 	.word	0x08002d5d
			{
				case Up:
				{
					NextBranch = Signal;
 8002d44:	2302      	movs	r3, #2
 8002d46:	73fb      	strb	r3, [r7, #15]
					break;
 8002d48:	e009      	b.n	8002d5e <LCD_Branch_Action+0x232>
				}
				case Down:
				{
					NextBranch = Amp;
 8002d4a:	230f      	movs	r3, #15
 8002d4c:	73fb      	strb	r3, [r7, #15]
					break;
 8002d4e:	e006      	b.n	8002d5e <LCD_Branch_Action+0x232>
				}
				case Left:
				{
					NextBranch = Type;
 8002d50:	2307      	movs	r3, #7
 8002d52:	73fb      	strb	r3, [r7, #15]
					break;
 8002d54:	e003      	b.n	8002d5e <LCD_Branch_Action+0x232>
				}
				case Right:
				{
					NextBranch = OnOff;
 8002d56:	2309      	movs	r3, #9
 8002d58:	73fb      	strb	r3, [r7, #15]
					break;
 8002d5a:	e000      	b.n	8002d5e <LCD_Branch_Action+0x232>
				}
				case Enter:
				{
					// Nothing
					break;
 8002d5c:	bf00      	nop
				}
			}
			break;
 8002d5e:	e258      	b.n	8003212 <LCD_Branch_Action+0x6e6>
		}
		case Type:
		{
			switch(Action)
 8002d60:	79fb      	ldrb	r3, [r7, #7]
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	f200 8257 	bhi.w	8003216 <LCD_Branch_Action+0x6ea>
 8002d68:	a201      	add	r2, pc, #4	; (adr r2, 8002d70 <LCD_Branch_Action+0x244>)
 8002d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6e:	bf00      	nop
 8002d70:	08002d85 	.word	0x08002d85
 8002d74:	08002d8b 	.word	0x08002d8b
 8002d78:	08002d97 	.word	0x08002d97
 8002d7c:	08002d91 	.word	0x08002d91
 8002d80:	08002d97 	.word	0x08002d97
			{
				case Up:
				{
					NextBranch = Signal;
 8002d84:	2302      	movs	r3, #2
 8002d86:	73fb      	strb	r3, [r7, #15]
					break;
 8002d88:	e006      	b.n	8002d98 <LCD_Branch_Action+0x26c>
				}
				case Down:
				{
					NextBranch = DC_OUT;
 8002d8a:	230c      	movs	r3, #12
 8002d8c:	73fb      	strb	r3, [r7, #15]
					break;
 8002d8e:	e003      	b.n	8002d98 <LCD_Branch_Action+0x26c>
					// Nothing
					break;
				}
				case Right:
				{
					NextBranch = Parameter;
 8002d90:	2308      	movs	r3, #8
 8002d92:	73fb      	strb	r3, [r7, #15]
					break;
 8002d94:	e000      	b.n	8002d98 <LCD_Branch_Action+0x26c>
					break;
 8002d96:	bf00      	nop
				{
					// Nothing
					break;
				}
			}
			break;
 8002d98:	e23d      	b.n	8003216 <LCD_Branch_Action+0x6ea>
		}
		case OnOff:
		{
			switch(Action)
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	2b04      	cmp	r3, #4
 8002d9e:	f200 823c 	bhi.w	800321a <LCD_Branch_Action+0x6ee>
 8002da2:	a201      	add	r2, pc, #4	; (adr r2, 8002da8 <LCD_Branch_Action+0x27c>)
 8002da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da8:	08002dbd 	.word	0x08002dbd
 8002dac:	08002dc3 	.word	0x08002dc3
 8002db0:	08002dc9 	.word	0x08002dc9
 8002db4:	08002dcf 	.word	0x08002dcf
 8002db8:	08002dcf 	.word	0x08002dcf
			{
				case Up:
				{
					NextBranch = Signal;
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	73fb      	strb	r3, [r7, #15]
					break;
 8002dc0:	e006      	b.n	8002dd0 <LCD_Branch_Action+0x2a4>
				}
				case Down:
				{
					// Nothing
					NextBranch = OUT_ON;
 8002dc2:	230a      	movs	r3, #10
 8002dc4:	73fb      	strb	r3, [r7, #15]
					break;
 8002dc6:	e003      	b.n	8002dd0 <LCD_Branch_Action+0x2a4>
				}
				case Left:
				{
					NextBranch = Parameter;
 8002dc8:	2308      	movs	r3, #8
 8002dca:	73fb      	strb	r3, [r7, #15]
					break;
 8002dcc:	e000      	b.n	8002dd0 <LCD_Branch_Action+0x2a4>
				}
				case Right:
				{
					// Nothing
					break;
 8002dce:	bf00      	nop
				{
					// Nothing
					break;
				}
			}
			break;
 8002dd0:	e223      	b.n	800321a <LCD_Branch_Action+0x6ee>
		}
		case DC_OUT:
		{
			switch(Action)
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	f200 8222 	bhi.w	800321e <LCD_Branch_Action+0x6f2>
 8002dda:	a201      	add	r2, pc, #4	; (adr r2, 8002de0 <LCD_Branch_Action+0x2b4>)
 8002ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de0:	08002df5 	.word	0x08002df5
 8002de4:	08002e19 	.word	0x08002e19
 8002de8:	08002e19 	.word	0x08002e19
 8002dec:	08002dfb 	.word	0x08002dfb
 8002df0:	08002e01 	.word	0x08002e01
			{
				case Up:
				{
					NextBranch = Type;
 8002df4:	2307      	movs	r3, #7
 8002df6:	73fb      	strb	r3, [r7, #15]
					break;
 8002df8:	e011      	b.n	8002e1e <LCD_Branch_Action+0x2f2>
					// Nothing
					break;
				}
				case Right:
				{
					NextBranch = SINUSOIDAL_OUT;
 8002dfa:	230d      	movs	r3, #13
 8002dfc:	73fb      	strb	r3, [r7, #15]
					break;
 8002dfe:	e00e      	b.n	8002e1e <LCD_Branch_Action+0x2f2>
				}
				case Enter:
				{
					OutputState.Mode = d;
 8002e00:	4b16      	ldr	r3, [pc, #88]	; (8002e5c <LCD_Branch_Action+0x330>)
 8002e02:	2264      	movs	r2, #100	; 0x64
 8002e04:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					if(OutputState.On) DAC_Update_Output();
 8002e08:	4b14      	ldr	r3, [pc, #80]	; (8002e5c <LCD_Branch_Action+0x330>)
 8002e0a:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d004      	beq.n	8002e1c <LCD_Branch_Action+0x2f0>
 8002e12:	f7fe f8ab 	bl	8000f6c <DAC_Update_Output>
					break;
 8002e16:	e001      	b.n	8002e1c <LCD_Branch_Action+0x2f0>
					break;
 8002e18:	bf00      	nop
 8002e1a:	e200      	b.n	800321e <LCD_Branch_Action+0x6f2>
					break;
 8002e1c:	bf00      	nop
				}
			}
			break;
 8002e1e:	e1fe      	b.n	800321e <LCD_Branch_Action+0x6f2>
		}
		case SINUSOIDAL_OUT:
		{
			switch(Action)
 8002e20:	79fb      	ldrb	r3, [r7, #7]
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	f200 81fd 	bhi.w	8003222 <LCD_Branch_Action+0x6f6>
 8002e28:	a201      	add	r2, pc, #4	; (adr r2, 8002e30 <LCD_Branch_Action+0x304>)
 8002e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2e:	bf00      	nop
 8002e30:	08002e45 	.word	0x08002e45
 8002e34:	08002e79 	.word	0x08002e79
 8002e38:	08002e4b 	.word	0x08002e4b
 8002e3c:	08002e51 	.word	0x08002e51
 8002e40:	08002e61 	.word	0x08002e61
			{
				case Up:
				{
					NextBranch = Type;
 8002e44:	2307      	movs	r3, #7
 8002e46:	73fb      	strb	r3, [r7, #15]
					break;
 8002e48:	e019      	b.n	8002e7e <LCD_Branch_Action+0x352>
					// Nothing
					break;
				}
				case Left:
				{
					NextBranch = DC_OUT;
 8002e4a:	230c      	movs	r3, #12
 8002e4c:	73fb      	strb	r3, [r7, #15]
					break;
 8002e4e:	e016      	b.n	8002e7e <LCD_Branch_Action+0x352>
				}
				case Right:
				{
					NextBranch = PULSE_OUT;
 8002e50:	230e      	movs	r3, #14
 8002e52:	73fb      	strb	r3, [r7, #15]
					break;
 8002e54:	e013      	b.n	8002e7e <LCD_Branch_Action+0x352>
 8002e56:	bf00      	nop
 8002e58:	200009f0 	.word	0x200009f0
 8002e5c:	20000828 	.word	0x20000828
				}
				case Enter:
				{
					OutputState.Mode = s;
 8002e60:	4bbf      	ldr	r3, [pc, #764]	; (8003160 <LCD_Branch_Action+0x634>)
 8002e62:	2273      	movs	r2, #115	; 0x73
 8002e64:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					if(OutputState.On) DAC_Update_Output();
 8002e68:	4bbd      	ldr	r3, [pc, #756]	; (8003160 <LCD_Branch_Action+0x634>)
 8002e6a:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d004      	beq.n	8002e7c <LCD_Branch_Action+0x350>
 8002e72:	f7fe f87b 	bl	8000f6c <DAC_Update_Output>
					break;
 8002e76:	e001      	b.n	8002e7c <LCD_Branch_Action+0x350>
					break;
 8002e78:	bf00      	nop
 8002e7a:	e1d2      	b.n	8003222 <LCD_Branch_Action+0x6f6>
					break;
 8002e7c:	bf00      	nop
				}
			}
			break;
 8002e7e:	e1d0      	b.n	8003222 <LCD_Branch_Action+0x6f6>
		}
		case PULSE_OUT:
		{
			switch(Action)
 8002e80:	79fb      	ldrb	r3, [r7, #7]
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	f200 81cf 	bhi.w	8003226 <LCD_Branch_Action+0x6fa>
 8002e88:	a201      	add	r2, pc, #4	; (adr r2, 8002e90 <LCD_Branch_Action+0x364>)
 8002e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8e:	bf00      	nop
 8002e90:	08002ea5 	.word	0x08002ea5
 8002e94:	08002ec9 	.word	0x08002ec9
 8002e98:	08002eab 	.word	0x08002eab
 8002e9c:	08002ec9 	.word	0x08002ec9
 8002ea0:	08002eb1 	.word	0x08002eb1
			{
				case Up:
				{
					NextBranch = Type;
 8002ea4:	2307      	movs	r3, #7
 8002ea6:	73fb      	strb	r3, [r7, #15]
					break;
 8002ea8:	e011      	b.n	8002ece <LCD_Branch_Action+0x3a2>
					// Nothing
					break;
				}
				case Left:
				{
					NextBranch = SINUSOIDAL_OUT;
 8002eaa:	230d      	movs	r3, #13
 8002eac:	73fb      	strb	r3, [r7, #15]
					break;
 8002eae:	e00e      	b.n	8002ece <LCD_Branch_Action+0x3a2>
					// Nothing
					break;
				}
				case Enter:
				{
					OutputState.Mode = p;
 8002eb0:	4bab      	ldr	r3, [pc, #684]	; (8003160 <LCD_Branch_Action+0x634>)
 8002eb2:	2270      	movs	r2, #112	; 0x70
 8002eb4:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					if(OutputState.On) DAC_Update_Output();
 8002eb8:	4ba9      	ldr	r3, [pc, #676]	; (8003160 <LCD_Branch_Action+0x634>)
 8002eba:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d004      	beq.n	8002ecc <LCD_Branch_Action+0x3a0>
 8002ec2:	f7fe f853 	bl	8000f6c <DAC_Update_Output>
					break;
 8002ec6:	e001      	b.n	8002ecc <LCD_Branch_Action+0x3a0>
					break;
 8002ec8:	bf00      	nop
 8002eca:	e1ac      	b.n	8003226 <LCD_Branch_Action+0x6fa>
					break;
 8002ecc:	bf00      	nop
				}
			}
			break;
 8002ece:	e1aa      	b.n	8003226 <LCD_Branch_Action+0x6fa>
		}
		case Amp:
		{
			switch(Action)
 8002ed0:	79fb      	ldrb	r3, [r7, #7]
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	f200 81a9 	bhi.w	800322a <LCD_Branch_Action+0x6fe>
 8002ed8:	a201      	add	r2, pc, #4	; (adr r2, 8002ee0 <LCD_Branch_Action+0x3b4>)
 8002eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ede:	bf00      	nop
 8002ee0:	08002ef5 	.word	0x08002ef5
 8002ee4:	08002efb 	.word	0x08002efb
 8002ee8:	08002f13 	.word	0x08002f13
 8002eec:	08002f0d 	.word	0x08002f0d
 8002ef0:	08002f13 	.word	0x08002f13
			{
				case Up:
				{
					NextBranch = Parameter;
 8002ef4:	2308      	movs	r3, #8
 8002ef6:	73fb      	strb	r3, [r7, #15]
					break;
 8002ef8:	e00c      	b.n	8002f14 <LCD_Branch_Action+0x3e8>
				}
				case Down:
				{
					NextBranch = Amp_Val;
 8002efa:	2310      	movs	r3, #16
 8002efc:	73fb      	strb	r3, [r7, #15]
					OutputState.Amplitude_Temp = OutputState.Amplitude;
 8002efe:	4b98      	ldr	r3, [pc, #608]	; (8003160 <LCD_Branch_Action+0x634>)
 8002f00:	f8b3 2196 	ldrh.w	r2, [r3, #406]	; 0x196
 8002f04:	4b96      	ldr	r3, [pc, #600]	; (8003160 <LCD_Branch_Action+0x634>)
 8002f06:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6
					break;
 8002f0a:	e003      	b.n	8002f14 <LCD_Branch_Action+0x3e8>
					// Nothing
					break;
				}
				case Right:
				{
					NextBranch = Offset;
 8002f0c:	2311      	movs	r3, #17
 8002f0e:	73fb      	strb	r3, [r7, #15]
					break;
 8002f10:	e000      	b.n	8002f14 <LCD_Branch_Action+0x3e8>
					break;
 8002f12:	bf00      	nop
				{
					// Nothing
					break;
				}
			}
			break;
 8002f14:	e189      	b.n	800322a <LCD_Branch_Action+0x6fe>
		}
		case Offset:
		{
			switch(Action)
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	2b04      	cmp	r3, #4
 8002f1a:	f200 8188 	bhi.w	800322e <LCD_Branch_Action+0x702>
 8002f1e:	a201      	add	r2, pc, #4	; (adr r2, 8002f24 <LCD_Branch_Action+0x3f8>)
 8002f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f24:	08002f39 	.word	0x08002f39
 8002f28:	08002f3f 	.word	0x08002f3f
 8002f2c:	08002f51 	.word	0x08002f51
 8002f30:	08002f57 	.word	0x08002f57
 8002f34:	08002f5d 	.word	0x08002f5d
			{
				case Up:
				{
					NextBranch = Parameter;
 8002f38:	2308      	movs	r3, #8
 8002f3a:	73fb      	strb	r3, [r7, #15]
					break;
 8002f3c:	e00f      	b.n	8002f5e <LCD_Branch_Action+0x432>
				}
				case Down:
				{
					NextBranch = Offset_Val;
 8002f3e:	2312      	movs	r3, #18
 8002f40:	73fb      	strb	r3, [r7, #15]
					OutputState.Offset_Temp = OutputState.Offset;
 8002f42:	4b87      	ldr	r3, [pc, #540]	; (8003160 <LCD_Branch_Action+0x634>)
 8002f44:	f8b3 219c 	ldrh.w	r2, [r3, #412]	; 0x19c
 8002f48:	4b85      	ldr	r3, [pc, #532]	; (8003160 <LCD_Branch_Action+0x634>)
 8002f4a:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
					break;
 8002f4e:	e006      	b.n	8002f5e <LCD_Branch_Action+0x432>
				}
				case Left:
				{
					NextBranch = Amp;
 8002f50:	230f      	movs	r3, #15
 8002f52:	73fb      	strb	r3, [r7, #15]
					break;
 8002f54:	e003      	b.n	8002f5e <LCD_Branch_Action+0x432>
				}
				case Right:
				{
					NextBranch = Freq;
 8002f56:	2313      	movs	r3, #19
 8002f58:	73fb      	strb	r3, [r7, #15]
					break;
 8002f5a:	e000      	b.n	8002f5e <LCD_Branch_Action+0x432>
				}
				case Enter:
				{
					// Nothing
					break;
 8002f5c:	bf00      	nop
				}
			}
			break;
 8002f5e:	e166      	b.n	800322e <LCD_Branch_Action+0x702>
		}
		case Freq:
		{
			switch(Action)
 8002f60:	79fb      	ldrb	r3, [r7, #7]
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	f200 8165 	bhi.w	8003232 <LCD_Branch_Action+0x706>
 8002f68:	a201      	add	r2, pc, #4	; (adr r2, 8002f70 <LCD_Branch_Action+0x444>)
 8002f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6e:	bf00      	nop
 8002f70:	08002f85 	.word	0x08002f85
 8002f74:	08002f8b 	.word	0x08002f8b
 8002f78:	08002f9d 	.word	0x08002f9d
 8002f7c:	08002fa3 	.word	0x08002fa3
 8002f80:	08002fa9 	.word	0x08002fa9
			{
				case Up:
				{
					NextBranch = Parameter;
 8002f84:	2308      	movs	r3, #8
 8002f86:	73fb      	strb	r3, [r7, #15]
					break;
 8002f88:	e00f      	b.n	8002faa <LCD_Branch_Action+0x47e>
				}
				case Down:
				{
					NextBranch = Freq_Val;
 8002f8a:	2314      	movs	r3, #20
 8002f8c:	73fb      	strb	r3, [r7, #15]
					OutputState.Frequency_Temp = OutputState.Frequency;
 8002f8e:	4b74      	ldr	r3, [pc, #464]	; (8003160 <LCD_Branch_Action+0x634>)
 8002f90:	f8b3 2198 	ldrh.w	r2, [r3, #408]	; 0x198
 8002f94:	4b72      	ldr	r3, [pc, #456]	; (8003160 <LCD_Branch_Action+0x634>)
 8002f96:	f8a3 21aa 	strh.w	r2, [r3, #426]	; 0x1aa
					break;
 8002f9a:	e006      	b.n	8002faa <LCD_Branch_Action+0x47e>
				}
				case Left:
				{
					NextBranch = Offset;
 8002f9c:	2311      	movs	r3, #17
 8002f9e:	73fb      	strb	r3, [r7, #15]
					break;
 8002fa0:	e003      	b.n	8002faa <LCD_Branch_Action+0x47e>
				}
				case Right:
				{
					NextBranch = Duty;
 8002fa2:	2315      	movs	r3, #21
 8002fa4:	73fb      	strb	r3, [r7, #15]
					break;
 8002fa6:	e000      	b.n	8002faa <LCD_Branch_Action+0x47e>
				}
				case Enter:
				{
					// Nothing
					break;
 8002fa8:	bf00      	nop
				}
			}
			break;
 8002faa:	e142      	b.n	8003232 <LCD_Branch_Action+0x706>
		}
		case Duty:
		{
			switch(Action)
 8002fac:	79fb      	ldrb	r3, [r7, #7]
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	f200 8141 	bhi.w	8003236 <LCD_Branch_Action+0x70a>
 8002fb4:	a201      	add	r2, pc, #4	; (adr r2, 8002fbc <LCD_Branch_Action+0x490>)
 8002fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fba:	bf00      	nop
 8002fbc:	08002fd1 	.word	0x08002fd1
 8002fc0:	08002fd7 	.word	0x08002fd7
 8002fc4:	08002fe9 	.word	0x08002fe9
 8002fc8:	08002fef 	.word	0x08002fef
 8002fcc:	08002fef 	.word	0x08002fef
			{
				case Up:
				{
					NextBranch = Parameter;
 8002fd0:	2308      	movs	r3, #8
 8002fd2:	73fb      	strb	r3, [r7, #15]
					break;
 8002fd4:	e00c      	b.n	8002ff0 <LCD_Branch_Action+0x4c4>
				}
				case Down:
				{
					NextBranch = Duty_Val;
 8002fd6:	2316      	movs	r3, #22
 8002fd8:	73fb      	strb	r3, [r7, #15]
					OutputState.DutyCycle_Temp = OutputState.DutyCycle;
 8002fda:	4b61      	ldr	r3, [pc, #388]	; (8003160 <LCD_Branch_Action+0x634>)
 8002fdc:	f893 21a4 	ldrb.w	r2, [r3, #420]	; 0x1a4
 8002fe0:	4b5f      	ldr	r3, [pc, #380]	; (8003160 <LCD_Branch_Action+0x634>)
 8002fe2:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
					break;
 8002fe6:	e003      	b.n	8002ff0 <LCD_Branch_Action+0x4c4>
				}
				case Left:
				{
					NextBranch = Freq;
 8002fe8:	2313      	movs	r3, #19
 8002fea:	73fb      	strb	r3, [r7, #15]
					break;
 8002fec:	e000      	b.n	8002ff0 <LCD_Branch_Action+0x4c4>
				}
				case Right:
				{
					// Nothing
					break;
 8002fee:	bf00      	nop
				{
					// Nothing
					break;
				}
			}
			break;
 8002ff0:	e121      	b.n	8003236 <LCD_Branch_Action+0x70a>
		}
		case Amp_Val:
		{
			switch(Action)
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	2b04      	cmp	r3, #4
 8002ff6:	f200 8120 	bhi.w	800323a <LCD_Branch_Action+0x70e>
 8002ffa:	a201      	add	r2, pc, #4	; (adr r2, 8003000 <LCD_Branch_Action+0x4d4>)
 8002ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003000:	08003015 	.word	0x08003015
 8003004:	0800304d 	.word	0x0800304d
 8003008:	0800301b 	.word	0x0800301b
 800300c:	0800302d 	.word	0x0800302d
 8003010:	0800303f 	.word	0x0800303f
			{
				case Up:
				{
					NextBranch = Amp;
 8003014:	230f      	movs	r3, #15
 8003016:	73fb      	strb	r3, [r7, #15]
					break;
 8003018:	e019      	b.n	800304e <LCD_Branch_Action+0x522>
					break;
				}
				case Left:
				{
					// Nothing
					OutputState.Amplitude_Temp -= 100;
 800301a:	4b51      	ldr	r3, [pc, #324]	; (8003160 <LCD_Branch_Action+0x634>)
 800301c:	f8b3 31a6 	ldrh.w	r3, [r3, #422]	; 0x1a6
 8003020:	3b64      	subs	r3, #100	; 0x64
 8003022:	b29a      	uxth	r2, r3
 8003024:	4b4e      	ldr	r3, [pc, #312]	; (8003160 <LCD_Branch_Action+0x634>)
 8003026:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6
					break;
 800302a:	e010      	b.n	800304e <LCD_Branch_Action+0x522>
				}
				case Right:
				{
					OutputState.Amplitude_Temp += 100;
 800302c:	4b4c      	ldr	r3, [pc, #304]	; (8003160 <LCD_Branch_Action+0x634>)
 800302e:	f8b3 31a6 	ldrh.w	r3, [r3, #422]	; 0x1a6
 8003032:	3364      	adds	r3, #100	; 0x64
 8003034:	b29a      	uxth	r2, r3
 8003036:	4b4a      	ldr	r3, [pc, #296]	; (8003160 <LCD_Branch_Action+0x634>)
 8003038:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6
					// Nothing
					break;
 800303c:	e007      	b.n	800304e <LCD_Branch_Action+0x522>
				}
				case Enter:
				{
					OutputState.Amplitude = OutputState.Amplitude_Temp;
 800303e:	4b48      	ldr	r3, [pc, #288]	; (8003160 <LCD_Branch_Action+0x634>)
 8003040:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	; 0x1a6
 8003044:	4b46      	ldr	r3, [pc, #280]	; (8003160 <LCD_Branch_Action+0x634>)
 8003046:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196
					break;
 800304a:	e000      	b.n	800304e <LCD_Branch_Action+0x522>
					break;
 800304c:	bf00      	nop
				}
			}
			break;
 800304e:	e0f4      	b.n	800323a <LCD_Branch_Action+0x70e>
		}
		case Offset_Val:
		{
			switch(Action)
 8003050:	79fb      	ldrb	r3, [r7, #7]
 8003052:	2b04      	cmp	r3, #4
 8003054:	f200 80f3 	bhi.w	800323e <LCD_Branch_Action+0x712>
 8003058:	a201      	add	r2, pc, #4	; (adr r2, 8003060 <LCD_Branch_Action+0x534>)
 800305a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305e:	bf00      	nop
 8003060:	08003075 	.word	0x08003075
 8003064:	080030ad 	.word	0x080030ad
 8003068:	0800307b 	.word	0x0800307b
 800306c:	0800308d 	.word	0x0800308d
 8003070:	0800309f 	.word	0x0800309f
			{
				case Up:
				{
					NextBranch = Offset;
 8003074:	2311      	movs	r3, #17
 8003076:	73fb      	strb	r3, [r7, #15]
					break;
 8003078:	e019      	b.n	80030ae <LCD_Branch_Action+0x582>
					// Nothing
					break;
				}
				case Left:
				{
					OutputState.Offset_Temp -= 100;
 800307a:	4b39      	ldr	r3, [pc, #228]	; (8003160 <LCD_Branch_Action+0x634>)
 800307c:	f8b3 31a8 	ldrh.w	r3, [r3, #424]	; 0x1a8
 8003080:	3b64      	subs	r3, #100	; 0x64
 8003082:	b29a      	uxth	r2, r3
 8003084:	4b36      	ldr	r3, [pc, #216]	; (8003160 <LCD_Branch_Action+0x634>)
 8003086:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
					break;
 800308a:	e010      	b.n	80030ae <LCD_Branch_Action+0x582>
				}
				case Right:
				{
					OutputState.Offset_Temp += 100;
 800308c:	4b34      	ldr	r3, [pc, #208]	; (8003160 <LCD_Branch_Action+0x634>)
 800308e:	f8b3 31a8 	ldrh.w	r3, [r3, #424]	; 0x1a8
 8003092:	3364      	adds	r3, #100	; 0x64
 8003094:	b29a      	uxth	r2, r3
 8003096:	4b32      	ldr	r3, [pc, #200]	; (8003160 <LCD_Branch_Action+0x634>)
 8003098:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
					break;
 800309c:	e007      	b.n	80030ae <LCD_Branch_Action+0x582>
				}
				case Enter:
				{
					OutputState.Offset = OutputState.Offset_Temp;
 800309e:	4b30      	ldr	r3, [pc, #192]	; (8003160 <LCD_Branch_Action+0x634>)
 80030a0:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	; 0x1a8
 80030a4:	4b2e      	ldr	r3, [pc, #184]	; (8003160 <LCD_Branch_Action+0x634>)
 80030a6:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
					break;
 80030aa:	e000      	b.n	80030ae <LCD_Branch_Action+0x582>
					break;
 80030ac:	bf00      	nop
				}
			}
			break;
 80030ae:	e0c6      	b.n	800323e <LCD_Branch_Action+0x712>
		}
		case Freq_Val:
		{
			switch(Action)
 80030b0:	79fb      	ldrb	r3, [r7, #7]
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	f200 80c5 	bhi.w	8003242 <LCD_Branch_Action+0x716>
 80030b8:	a201      	add	r2, pc, #4	; (adr r2, 80030c0 <LCD_Branch_Action+0x594>)
 80030ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030be:	bf00      	nop
 80030c0:	080030d5 	.word	0x080030d5
 80030c4:	0800310d 	.word	0x0800310d
 80030c8:	080030db 	.word	0x080030db
 80030cc:	080030ed 	.word	0x080030ed
 80030d0:	080030ff 	.word	0x080030ff
			{
				case Up:
				{
					NextBranch = Freq;
 80030d4:	2313      	movs	r3, #19
 80030d6:	73fb      	strb	r3, [r7, #15]
					break;
 80030d8:	e019      	b.n	800310e <LCD_Branch_Action+0x5e2>
					// Nothing
					break;
				}
				case Left:
				{
					OutputState.Frequency_Temp -= 100;
 80030da:	4b21      	ldr	r3, [pc, #132]	; (8003160 <LCD_Branch_Action+0x634>)
 80030dc:	f8b3 31aa 	ldrh.w	r3, [r3, #426]	; 0x1aa
 80030e0:	3b64      	subs	r3, #100	; 0x64
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	4b1e      	ldr	r3, [pc, #120]	; (8003160 <LCD_Branch_Action+0x634>)
 80030e6:	f8a3 21aa 	strh.w	r2, [r3, #426]	; 0x1aa
					break;
 80030ea:	e010      	b.n	800310e <LCD_Branch_Action+0x5e2>
				}
				case Right:
				{
					OutputState.Frequency_Temp += 100;
 80030ec:	4b1c      	ldr	r3, [pc, #112]	; (8003160 <LCD_Branch_Action+0x634>)
 80030ee:	f8b3 31aa 	ldrh.w	r3, [r3, #426]	; 0x1aa
 80030f2:	3364      	adds	r3, #100	; 0x64
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	4b1a      	ldr	r3, [pc, #104]	; (8003160 <LCD_Branch_Action+0x634>)
 80030f8:	f8a3 21aa 	strh.w	r2, [r3, #426]	; 0x1aa
					break;
 80030fc:	e007      	b.n	800310e <LCD_Branch_Action+0x5e2>
				}
				case Enter:
				{
					OutputState.Frequency = OutputState.Frequency_Temp;
 80030fe:	4b18      	ldr	r3, [pc, #96]	; (8003160 <LCD_Branch_Action+0x634>)
 8003100:	f8b3 21aa 	ldrh.w	r2, [r3, #426]	; 0x1aa
 8003104:	4b16      	ldr	r3, [pc, #88]	; (8003160 <LCD_Branch_Action+0x634>)
 8003106:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
					break;
 800310a:	e000      	b.n	800310e <LCD_Branch_Action+0x5e2>
					break;
 800310c:	bf00      	nop
				}
			}
			break;
 800310e:	e098      	b.n	8003242 <LCD_Branch_Action+0x716>
		}
		case Duty_Val:
		{
			switch(Action)
 8003110:	79fb      	ldrb	r3, [r7, #7]
 8003112:	2b04      	cmp	r3, #4
 8003114:	f200 8097 	bhi.w	8003246 <LCD_Branch_Action+0x71a>
 8003118:	a201      	add	r2, pc, #4	; (adr r2, 8003120 <LCD_Branch_Action+0x5f4>)
 800311a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311e:	bf00      	nop
 8003120:	08003135 	.word	0x08003135
 8003124:	08003173 	.word	0x08003173
 8003128:	0800313b 	.word	0x0800313b
 800312c:	0800314d 	.word	0x0800314d
 8003130:	08003165 	.word	0x08003165
			{
				case Up:
				{
					NextBranch = Duty;
 8003134:	2315      	movs	r3, #21
 8003136:	73fb      	strb	r3, [r7, #15]
					break;
 8003138:	e01c      	b.n	8003174 <LCD_Branch_Action+0x648>
					// Nothing
					break;
				}
				case Left:
				{
					OutputState.DutyCycle_Temp -= 10;
 800313a:	4b09      	ldr	r3, [pc, #36]	; (8003160 <LCD_Branch_Action+0x634>)
 800313c:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 8003140:	3b0a      	subs	r3, #10
 8003142:	b2da      	uxtb	r2, r3
 8003144:	4b06      	ldr	r3, [pc, #24]	; (8003160 <LCD_Branch_Action+0x634>)
 8003146:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
					break;
 800314a:	e013      	b.n	8003174 <LCD_Branch_Action+0x648>
				}
				case Right:
				{
					OutputState.DutyCycle_Temp += 10;
 800314c:	4b04      	ldr	r3, [pc, #16]	; (8003160 <LCD_Branch_Action+0x634>)
 800314e:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 8003152:	330a      	adds	r3, #10
 8003154:	b2da      	uxtb	r2, r3
 8003156:	4b02      	ldr	r3, [pc, #8]	; (8003160 <LCD_Branch_Action+0x634>)
 8003158:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
					break;
 800315c:	e00a      	b.n	8003174 <LCD_Branch_Action+0x648>
 800315e:	bf00      	nop
 8003160:	20000828 	.word	0x20000828
				}
				case Enter:
				{
					OutputState.DutyCycle = OutputState.DutyCycle_Temp;
 8003164:	4b41      	ldr	r3, [pc, #260]	; (800326c <LCD_Branch_Action+0x740>)
 8003166:	f893 21ac 	ldrb.w	r2, [r3, #428]	; 0x1ac
 800316a:	4b40      	ldr	r3, [pc, #256]	; (800326c <LCD_Branch_Action+0x740>)
 800316c:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
					break;
 8003170:	e000      	b.n	8003174 <LCD_Branch_Action+0x648>
					break;
 8003172:	bf00      	nop
				}
			}
			break;
 8003174:	e067      	b.n	8003246 <LCD_Branch_Action+0x71a>
		}
		case OUT_ON:
		{
			switch(Action)
 8003176:	79fb      	ldrb	r3, [r7, #7]
 8003178:	2b04      	cmp	r3, #4
 800317a:	d866      	bhi.n	800324a <LCD_Branch_Action+0x71e>
 800317c:	a201      	add	r2, pc, #4	; (adr r2, 8003184 <LCD_Branch_Action+0x658>)
 800317e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003182:	bf00      	nop
 8003184:	08003199 	.word	0x08003199
 8003188:	080031b3 	.word	0x080031b3
 800318c:	080031b3 	.word	0x080031b3
 8003190:	0800319f 	.word	0x0800319f
 8003194:	080031a5 	.word	0x080031a5
			{
				case Up:
				{
					NextBranch = OnOff;
 8003198:	2309      	movs	r3, #9
 800319a:	73fb      	strb	r3, [r7, #15]
					break;
 800319c:	e00a      	b.n	80031b4 <LCD_Branch_Action+0x688>
					// Nothing
					break;
				}
				case Right:
				{
					NextBranch = OUT_OFF;
 800319e:	230b      	movs	r3, #11
 80031a0:	73fb      	strb	r3, [r7, #15]
					break;
 80031a2:	e007      	b.n	80031b4 <LCD_Branch_Action+0x688>
				}
				case Enter:
				{
					OutputState.On = true;
 80031a4:	4b31      	ldr	r3, [pc, #196]	; (800326c <LCD_Branch_Action+0x740>)
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
					DAC_Update_Output();
 80031ac:	f7fd fede 	bl	8000f6c <DAC_Update_Output>
					break;
 80031b0:	e000      	b.n	80031b4 <LCD_Branch_Action+0x688>
					break;
 80031b2:	bf00      	nop
				}
			}
			break;
 80031b4:	e049      	b.n	800324a <LCD_Branch_Action+0x71e>
		}
		case OUT_OFF:
		{
			switch(Action)
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d848      	bhi.n	800324e <LCD_Branch_Action+0x722>
 80031bc:	a201      	add	r2, pc, #4	; (adr r2, 80031c4 <LCD_Branch_Action+0x698>)
 80031be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c2:	bf00      	nop
 80031c4:	080031d9 	.word	0x080031d9
 80031c8:	080031f3 	.word	0x080031f3
 80031cc:	080031df 	.word	0x080031df
 80031d0:	080031f3 	.word	0x080031f3
 80031d4:	080031e5 	.word	0x080031e5
			{
				case Up:
				{
					NextBranch = OnOff;
 80031d8:	2309      	movs	r3, #9
 80031da:	73fb      	strb	r3, [r7, #15]
					break;
 80031dc:	e00a      	b.n	80031f4 <LCD_Branch_Action+0x6c8>
					// Nothing
					break;
				}
				case Left:
				{
					NextBranch = OUT_ON;
 80031de:	230a      	movs	r3, #10
 80031e0:	73fb      	strb	r3, [r7, #15]
					break;
 80031e2:	e007      	b.n	80031f4 <LCD_Branch_Action+0x6c8>
					// Nothing
					break;
				}
				case Enter:
				{
					OutputState.On = false;
 80031e4:	4b21      	ldr	r3, [pc, #132]	; (800326c <LCD_Branch_Action+0x740>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
					DAC_Stop();
 80031ec:	f7fd fea6 	bl	8000f3c <DAC_Stop>
					break;
 80031f0:	e000      	b.n	80031f4 <LCD_Branch_Action+0x6c8>
					break;
 80031f2:	bf00      	nop
				}
			}
			break;
 80031f4:	e02b      	b.n	800324e <LCD_Branch_Action+0x722>
			break;
 80031f6:	bf00      	nop
 80031f8:	e02a      	b.n	8003250 <LCD_Branch_Action+0x724>
			break;
 80031fa:	bf00      	nop
 80031fc:	e028      	b.n	8003250 <LCD_Branch_Action+0x724>
			break;
 80031fe:	bf00      	nop
 8003200:	e026      	b.n	8003250 <LCD_Branch_Action+0x724>
			break;
 8003202:	bf00      	nop
 8003204:	e024      	b.n	8003250 <LCD_Branch_Action+0x724>
			break;
 8003206:	bf00      	nop
 8003208:	e022      	b.n	8003250 <LCD_Branch_Action+0x724>
			break;
 800320a:	bf00      	nop
 800320c:	e020      	b.n	8003250 <LCD_Branch_Action+0x724>
			break;
 800320e:	bf00      	nop
 8003210:	e01e      	b.n	8003250 <LCD_Branch_Action+0x724>
			break;
 8003212:	bf00      	nop
 8003214:	e01c      	b.n	8003250 <LCD_Branch_Action+0x724>
			break;
 8003216:	bf00      	nop
 8003218:	e01a      	b.n	8003250 <LCD_Branch_Action+0x724>
			break;
 800321a:	bf00      	nop
 800321c:	e018      	b.n	8003250 <LCD_Branch_Action+0x724>
			break;
 800321e:	bf00      	nop
 8003220:	e016      	b.n	8003250 <LCD_Branch_Action+0x724>
			break;
 8003222:	bf00      	nop
 8003224:	e014      	b.n	8003250 <LCD_Branch_Action+0x724>
			break;
 8003226:	bf00      	nop
 8003228:	e012      	b.n	8003250 <LCD_Branch_Action+0x724>
			break;
 800322a:	bf00      	nop
 800322c:	e010      	b.n	8003250 <LCD_Branch_Action+0x724>
			break;
 800322e:	bf00      	nop
 8003230:	e00e      	b.n	8003250 <LCD_Branch_Action+0x724>
			break;
 8003232:	bf00      	nop
 8003234:	e00c      	b.n	8003250 <LCD_Branch_Action+0x724>
			break;
 8003236:	bf00      	nop
 8003238:	e00a      	b.n	8003250 <LCD_Branch_Action+0x724>
			break;
 800323a:	bf00      	nop
 800323c:	e008      	b.n	8003250 <LCD_Branch_Action+0x724>
			break;
 800323e:	bf00      	nop
 8003240:	e006      	b.n	8003250 <LCD_Branch_Action+0x724>
			break;
 8003242:	bf00      	nop
 8003244:	e004      	b.n	8003250 <LCD_Branch_Action+0x724>
			break;
 8003246:	bf00      	nop
 8003248:	e002      	b.n	8003250 <LCD_Branch_Action+0x724>
			break;
 800324a:	bf00      	nop
 800324c:	e000      	b.n	8003250 <LCD_Branch_Action+0x724>
			break;
 800324e:	bf00      	nop
		}
	}
	if(NextBranch != DisplayState.CurrentBranch)
 8003250:	4b07      	ldr	r3, [pc, #28]	; (8003270 <LCD_Branch_Action+0x744>)
 8003252:	78db      	ldrb	r3, [r3, #3]
 8003254:	7bfa      	ldrb	r2, [r7, #15]
 8003256:	429a      	cmp	r2, r3
 8003258:	d002      	beq.n	8003260 <LCD_Branch_Action+0x734>
	{
		DisplayState.CurrentBranch = NextBranch;
 800325a:	4a05      	ldr	r2, [pc, #20]	; (8003270 <LCD_Branch_Action+0x744>)
 800325c:	7bfb      	ldrb	r3, [r7, #15]
 800325e:	70d3      	strb	r3, [r2, #3]
	}
	LCD_Display_Menu();
 8003260:	f7fe fa2e 	bl	80016c0 <LCD_Display_Menu>
}
 8003264:	bf00      	nop
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	20000828 	.word	0x20000828
 8003270:	200009f0 	.word	0x200009f0

08003274 <HAL_UART_RxCpltCallback>:

// Flag set every 10 us
uint8_t us_10 = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
	if((UartState.rx_bytes_counter == 0 && UartState.rx_byte[0] == '@') || UartState.rx_bytes_counter > 0)
 800327c:	4b18      	ldr	r3, [pc, #96]	; (80032e0 <HAL_UART_RxCpltCallback+0x6c>)
 800327e:	7adb      	ldrb	r3, [r3, #11]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d103      	bne.n	800328c <HAL_UART_RxCpltCallback+0x18>
 8003284:	4b16      	ldr	r3, [pc, #88]	; (80032e0 <HAL_UART_RxCpltCallback+0x6c>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	2b40      	cmp	r3, #64	; 0x40
 800328a:	d003      	beq.n	8003294 <HAL_UART_RxCpltCallback+0x20>
 800328c:	4b14      	ldr	r3, [pc, #80]	; (80032e0 <HAL_UART_RxCpltCallback+0x6c>)
 800328e:	7adb      	ldrb	r3, [r3, #11]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d01b      	beq.n	80032cc <HAL_UART_RxCpltCallback+0x58>
	{
		UartState.rx_bytes[UartState.rx_bytes_counter] = UartState.rx_byte[0];
 8003294:	4b12      	ldr	r3, [pc, #72]	; (80032e0 <HAL_UART_RxCpltCallback+0x6c>)
 8003296:	7adb      	ldrb	r3, [r3, #11]
 8003298:	4619      	mov	r1, r3
 800329a:	4b11      	ldr	r3, [pc, #68]	; (80032e0 <HAL_UART_RxCpltCallback+0x6c>)
 800329c:	781a      	ldrb	r2, [r3, #0]
 800329e:	4b10      	ldr	r3, [pc, #64]	; (80032e0 <HAL_UART_RxCpltCallback+0x6c>)
 80032a0:	440b      	add	r3, r1
 80032a2:	705a      	strb	r2, [r3, #1]
		UartState.rx_bytes_counter += 1;
 80032a4:	4b0e      	ldr	r3, [pc, #56]	; (80032e0 <HAL_UART_RxCpltCallback+0x6c>)
 80032a6:	7adb      	ldrb	r3, [r3, #11]
 80032a8:	3301      	adds	r3, #1
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	4b0c      	ldr	r3, [pc, #48]	; (80032e0 <HAL_UART_RxCpltCallback+0x6c>)
 80032ae:	72da      	strb	r2, [r3, #11]

		if(UartState.rx_byte[0] == '!')
 80032b0:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <HAL_UART_RxCpltCallback+0x6c>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b21      	cmp	r3, #33	; 0x21
 80032b6:	d109      	bne.n	80032cc <HAL_UART_RxCpltCallback+0x58>
		{
			UartState.message_received = 1;
 80032b8:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <HAL_UART_RxCpltCallback+0x6c>)
 80032ba:	2201      	movs	r2, #1
 80032bc:	735a      	strb	r2, [r3, #13]
			UartState.rx_bytes_length = UartState.rx_bytes_counter;
 80032be:	4b08      	ldr	r3, [pc, #32]	; (80032e0 <HAL_UART_RxCpltCallback+0x6c>)
 80032c0:	7ada      	ldrb	r2, [r3, #11]
 80032c2:	4b07      	ldr	r3, [pc, #28]	; (80032e0 <HAL_UART_RxCpltCallback+0x6c>)
 80032c4:	731a      	strb	r2, [r3, #12]
			UartState.rx_bytes_counter = 0;
 80032c6:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <HAL_UART_RxCpltCallback+0x6c>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	72da      	strb	r2, [r3, #11]
		}
	}
	HAL_UART_Receive_IT(&huart2, UartState.rx_byte, 1);
 80032cc:	2201      	movs	r2, #1
 80032ce:	4904      	ldr	r1, [pc, #16]	; (80032e0 <HAL_UART_RxCpltCallback+0x6c>)
 80032d0:	4804      	ldr	r0, [pc, #16]	; (80032e4 <HAL_UART_RxCpltCallback+0x70>)
 80032d2:	f006 fb7f 	bl	80099d4 <HAL_UART_Receive_IT>
}
 80032d6:	bf00      	nop
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	20000ca4 	.word	0x20000ca4
 80032e4:	20000bd4 	.word	0x20000bd4

080032e8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	4603      	mov	r3, r0
 80032f0:	80fb      	strh	r3, [r7, #6]
	last_ticks = HAL_GetTick();
 80032f2:	f001 fc05 	bl	8004b00 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	4b15      	ldr	r3, [pc, #84]	; (8003350 <HAL_GPIO_EXTI_Callback+0x68>)
 80032fa:	601a      	str	r2, [r3, #0]
	if(GPIO_Pin == btn_mid_Pin)
 80032fc:	88fb      	ldrh	r3, [r7, #6]
 80032fe:	2b40      	cmp	r3, #64	; 0x40
 8003300:	d103      	bne.n	800330a <HAL_GPIO_EXTI_Callback+0x22>
	{
		btn_mid_flag = 1;
 8003302:	4b14      	ldr	r3, [pc, #80]	; (8003354 <HAL_GPIO_EXTI_Callback+0x6c>)
 8003304:	2201      	movs	r2, #1
 8003306:	701a      	strb	r2, [r3, #0]
	}
	else if(GPIO_Pin == btn_down_Pin)
	{
		btn_down_flag = 1;
	}
}
 8003308:	e01d      	b.n	8003346 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_right_Pin)
 800330a:	88fb      	ldrh	r3, [r7, #6]
 800330c:	2b80      	cmp	r3, #128	; 0x80
 800330e:	d103      	bne.n	8003318 <HAL_GPIO_EXTI_Callback+0x30>
		btn_right_flag = 1;
 8003310:	4b11      	ldr	r3, [pc, #68]	; (8003358 <HAL_GPIO_EXTI_Callback+0x70>)
 8003312:	2201      	movs	r2, #1
 8003314:	701a      	strb	r2, [r3, #0]
}
 8003316:	e016      	b.n	8003346 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_up_Pin)
 8003318:	88fb      	ldrh	r3, [r7, #6]
 800331a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800331e:	d103      	bne.n	8003328 <HAL_GPIO_EXTI_Callback+0x40>
		btn_up_flag = 1;
 8003320:	4b0e      	ldr	r3, [pc, #56]	; (800335c <HAL_GPIO_EXTI_Callback+0x74>)
 8003322:	2201      	movs	r2, #1
 8003324:	701a      	strb	r2, [r3, #0]
}
 8003326:	e00e      	b.n	8003346 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_left_Pin)
 8003328:	88fb      	ldrh	r3, [r7, #6]
 800332a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800332e:	d103      	bne.n	8003338 <HAL_GPIO_EXTI_Callback+0x50>
		btn_left_flag = 1;
 8003330:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <HAL_GPIO_EXTI_Callback+0x78>)
 8003332:	2201      	movs	r2, #1
 8003334:	701a      	strb	r2, [r3, #0]
}
 8003336:	e006      	b.n	8003346 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_down_Pin)
 8003338:	88fb      	ldrh	r3, [r7, #6]
 800333a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800333e:	d102      	bne.n	8003346 <HAL_GPIO_EXTI_Callback+0x5e>
		btn_down_flag = 1;
 8003340:	4b08      	ldr	r3, [pc, #32]	; (8003364 <HAL_GPIO_EXTI_Callback+0x7c>)
 8003342:	2201      	movs	r2, #1
 8003344:	701a      	strb	r2, [r3, #0]
}
 8003346:	bf00      	nop
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	20000040 	.word	0x20000040
 8003354:	2000003a 	.word	0x2000003a
 8003358:	2000003b 	.word	0x2000003b
 800335c:	2000003c 	.word	0x2000003c
 8003360:	2000003d 	.word	0x2000003d
 8003364:	2000003e 	.word	0x2000003e

08003368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	OutputState.TIM2_Clock = 72000000;
 800336c:	4bb2      	ldr	r3, [pc, #712]	; (8003638 <main+0x2d0>)
 800336e:	4ab3      	ldr	r2, [pc, #716]	; (800363c <main+0x2d4>)
 8003370:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OutputState.On = false;
 8003374:	4bb0      	ldr	r3, [pc, #704]	; (8003638 <main+0x2d0>)
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
	OutputState.Mode = d;
 800337c:	4bae      	ldr	r3, [pc, #696]	; (8003638 <main+0x2d0>)
 800337e:	2264      	movs	r2, #100	; 0x64
 8003380:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
	OutputState.Amplitude = 1000;
 8003384:	4bac      	ldr	r3, [pc, #688]	; (8003638 <main+0x2d0>)
 8003386:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800338a:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196
	OutputState.Offset = 1200;
 800338e:	4baa      	ldr	r3, [pc, #680]	; (8003638 <main+0x2d0>)
 8003390:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8003394:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
	OutputState.Frequency = 1000;
 8003398:	4ba7      	ldr	r3, [pc, #668]	; (8003638 <main+0x2d0>)
 800339a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800339e:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
	OutputState.DCValue = 1000;
 80033a2:	4ba5      	ldr	r3, [pc, #660]	; (8003638 <main+0x2d0>)
 80033a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033a8:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
	OutputState.DutyCycle = 25;
 80033ac:	4ba2      	ldr	r3, [pc, #648]	; (8003638 <main+0x2d0>)
 80033ae:	2219      	movs	r2, #25
 80033b0:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4

	MeasurementState.Mode = DV;
 80033b4:	4ba2      	ldr	r3, [pc, #648]	; (8003640 <main+0x2d8>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	701a      	strb	r2, [r3, #0]
	MeasurementState.Amplitude = 0;
 80033ba:	4ba1      	ldr	r3, [pc, #644]	; (8003640 <main+0x2d8>)
 80033bc:	2200      	movs	r2, #0
 80033be:	805a      	strh	r2, [r3, #2]
	MeasurementState.Frequency = 0;
 80033c0:	4b9f      	ldr	r3, [pc, #636]	; (8003640 <main+0x2d8>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	809a      	strh	r2, [r3, #4]
	MeasurementState.Offset = 0;
 80033c6:	4b9e      	ldr	r3, [pc, #632]	; (8003640 <main+0x2d8>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	811a      	strh	r2, [r3, #8]
	MeasurementState.Period = 0;
 80033cc:	4b9c      	ldr	r3, [pc, #624]	; (8003640 <main+0x2d8>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	80da      	strh	r2, [r3, #6]

	CurrentState.Amplitude = 0;
 80033d2:	4b9c      	ldr	r3, [pc, #624]	; (8003644 <main+0x2dc>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	805a      	strh	r2, [r3, #2]
	CurrentState.Frequency = 0;
 80033d8:	4b9a      	ldr	r3, [pc, #616]	; (8003644 <main+0x2dc>)
 80033da:	2200      	movs	r2, #0
 80033dc:	809a      	strh	r2, [r3, #4]
	CurrentState.Offset = 0;
 80033de:	4b99      	ldr	r3, [pc, #612]	; (8003644 <main+0x2dc>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	811a      	strh	r2, [r3, #8]
	CurrentState.Period = 0;
 80033e4:	4b97      	ldr	r3, [pc, #604]	; (8003644 <main+0x2dc>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	80da      	strh	r2, [r3, #6]

	DisplayState.PrintFlag = 0;
 80033ea:	4b97      	ldr	r3, [pc, #604]	; (8003648 <main+0x2e0>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	719a      	strb	r2, [r3, #6]
	DisplayState.RefreshFlag = 0;
 80033f0:	4b95      	ldr	r3, [pc, #596]	; (8003648 <main+0x2e0>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	721a      	strb	r2, [r3, #8]
	DisplayState.AutoScrollCounter = 0;
 80033f6:	4b94      	ldr	r3, [pc, #592]	; (8003648 <main+0x2e0>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	725a      	strb	r2, [r3, #9]
	DisplayState.DisplayPosition = 0;
 80033fc:	4b92      	ldr	r3, [pc, #584]	; (8003648 <main+0x2e0>)
 80033fe:	2200      	movs	r2, #0
 8003400:	729a      	strb	r2, [r3, #10]
	DisplayState.ToplineCharacters = 0;
 8003402:	4b91      	ldr	r3, [pc, #580]	; (8003648 <main+0x2e0>)
 8003404:	2200      	movs	r2, #0
 8003406:	711a      	strb	r2, [r3, #4]
	DisplayState.BottomlineCharacters = 0;
 8003408:	4b8f      	ldr	r3, [pc, #572]	; (8003648 <main+0x2e0>)
 800340a:	2200      	movs	r2, #0
 800340c:	715a      	strb	r2, [r3, #5]
	DisplayState.CurrentLine = Topline;
 800340e:	4b8e      	ldr	r3, [pc, #568]	; (8003648 <main+0x2e0>)
 8003410:	2200      	movs	r2, #0
 8003412:	709a      	strb	r2, [r3, #2]
	DisplayState.LastMode = Menu;
 8003414:	4b8c      	ldr	r3, [pc, #560]	; (8003648 <main+0x2e0>)
 8003416:	2200      	movs	r2, #0
 8003418:	705a      	strb	r2, [r3, #1]
	DisplayState.CurrentBranch = Top;
 800341a:	4b8b      	ldr	r3, [pc, #556]	; (8003648 <main+0x2e0>)
 800341c:	2200      	movs	r2, #0
 800341e:	70da      	strb	r2, [r3, #3]

	// Tempory Measurement Values
	MeasurementState.Offset = 1000;
 8003420:	4b87      	ldr	r3, [pc, #540]	; (8003640 <main+0x2d8>)
 8003422:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003426:	811a      	strh	r2, [r3, #8]
	MeasurementState.Frequency = 5250;
 8003428:	4b85      	ldr	r3, [pc, #532]	; (8003640 <main+0x2d8>)
 800342a:	f241 4282 	movw	r2, #5250	; 0x1482
 800342e:	809a      	strh	r2, [r3, #4]
	MeasurementState.Amplitude = 500;
 8003430:	4b83      	ldr	r3, [pc, #524]	; (8003640 <main+0x2d8>)
 8003432:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003436:	805a      	strh	r2, [r3, #2]

	UartState.rx_bytes_counter = 0;
 8003438:	4b84      	ldr	r3, [pc, #528]	; (800364c <main+0x2e4>)
 800343a:	2200      	movs	r2, #0
 800343c:	72da      	strb	r2, [r3, #11]
	UartState.rx_bytes_length = 0;
 800343e:	4b83      	ldr	r3, [pc, #524]	; (800364c <main+0x2e4>)
 8003440:	2200      	movs	r2, #0
 8003442:	731a      	strb	r2, [r3, #12]
	UartState.message_received = 0;
 8003444:	4b81      	ldr	r3, [pc, #516]	; (800364c <main+0x2e4>)
 8003446:	2200      	movs	r2, #0
 8003448:	735a      	strb	r2, [r3, #13]

	CurrentState.Measure_Flag = 0;
 800344a:	4b7e      	ldr	r3, [pc, #504]	; (8003644 <main+0x2dc>)
 800344c:	2200      	movs	r2, #0
 800344e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003450:	f001 fafc 	bl	8004a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003454:	f000 f988 	bl	8003768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003458:	f000 fc08 	bl	8003c6c <MX_GPIO_Init>
  MX_DMA_Init();
 800345c:	f000 fbe8 	bl	8003c30 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003460:	f000 fbb6 	bl	8003bd0 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8003464:	f000 fb66 	bl	8003b34 <MX_TIM16_Init>
  MX_ADC1_Init();
 8003468:	f000 f9ec 	bl	8003844 <MX_ADC1_Init>
  MX_DAC1_Init();
 800346c:	f000 fa5a 	bl	8003924 <MX_DAC1_Init>
  MX_TIM2_Init();
 8003470:	f000 fac2 	bl	80039f8 <MX_TIM2_Init>
  MX_TIM17_Init();
 8003474:	f000 fb84 	bl	8003b80 <MX_TIM17_Init>
  MX_I2C1_Init();
 8003478:	f000 fa7e 	bl	8003978 <MX_I2C1_Init>
  MX_TIM15_Init();
 800347c:	f000 fb0a 	bl	8003a94 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  	// Transmit Student Number
	HAL_UART_Transmit(&huart2, std_num, 13, 10);
 8003480:	230a      	movs	r3, #10
 8003482:	220d      	movs	r2, #13
 8003484:	4972      	ldr	r1, [pc, #456]	; (8003650 <main+0x2e8>)
 8003486:	4873      	ldr	r0, [pc, #460]	; (8003654 <main+0x2ec>)
 8003488:	f006 fa10 	bl	80098ac <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, UartState.rx_byte, 1);
 800348c:	2201      	movs	r2, #1
 800348e:	496f      	ldr	r1, [pc, #444]	; (800364c <main+0x2e4>)
 8003490:	4870      	ldr	r0, [pc, #448]	; (8003654 <main+0x2ec>)
 8003492:	f006 fa9f 	bl	80099d4 <HAL_UART_Receive_IT>

	// Init ADC Timer
	HAL_TIM_Base_Start_IT(&htim16);
 8003496:	4870      	ldr	r0, [pc, #448]	; (8003658 <main+0x2f0>)
 8003498:	f005 fd62 	bl	8008f60 <HAL_TIM_Base_Start_IT>

	// Init LCD Refresh Timer
	HAL_TIM_Base_Start_IT(&htim17);
 800349c:	486f      	ldr	r0, [pc, #444]	; (800365c <main+0x2f4>)
 800349e:	f005 fd5f 	bl	8008f60 <HAL_TIM_Base_Start_IT>

	// Init 10us Timer
	HAL_TIM_Base_Start_IT(&htim15);
 80034a2:	486f      	ldr	r0, [pc, #444]	; (8003660 <main+0x2f8>)
 80034a4:	f005 fd5c 	bl	8008f60 <HAL_TIM_Base_Start_IT>

	// Init LCD
	LCD_Init();
 80034a8:	f7fd fe1a 	bl	80010e0 <LCD_Init>

	// Init Display State
	HAL_Delay(1);
 80034ac:	2001      	movs	r0, #1
 80034ae:	f001 fb33 	bl	8004b18 <HAL_Delay>
	LCD_changeDisplayMode(Menu);
 80034b2:	2000      	movs	r0, #0
 80034b4:	f7fe f89a 	bl	80015ec <LCD_changeDisplayMode>

	// Init DAC Timer
	HAL_TIM_Base_Start(&htim2);
 80034b8:	486a      	ldr	r0, [pc, #424]	; (8003664 <main+0x2fc>)
 80034ba:	f005 fce9 	bl	8008e90 <HAL_TIM_Base_Start>

	//Testing
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80034be:	2201      	movs	r2, #1
 80034c0:	2110      	movs	r1, #16
 80034c2:	4869      	ldr	r0, [pc, #420]	; (8003668 <main+0x300>)
 80034c4:	f003 fbf0 	bl	8006ca8 <HAL_GPIO_WritePin>

	// Init Current Sensor
	Init_Current_Sensor();
 80034c8:	f7fd fd58 	bl	8000f7c <Init_Current_Sensor>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // LCD Refresh Flag
	  if(DisplayState.RefreshFlag == 1)
 80034cc:	4b5e      	ldr	r3, [pc, #376]	; (8003648 <main+0x2e0>)
 80034ce:	7a1b      	ldrb	r3, [r3, #8]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d125      	bne.n	8003520 <main+0x1b8>
	  {
		  if(DisplayState.Mode == Measurement)
 80034d4:	4b5c      	ldr	r3, [pc, #368]	; (8003648 <main+0x2e0>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d11e      	bne.n	800351a <main+0x1b2>
		  {
			  LCD_Display_Measurement();
 80034dc:	f7fe fdf4 	bl	80020c8 <LCD_Display_Measurement>
//			  if(MeasurementState.Mode == AV || MeasurementState.Mode == AI)
			  if(MeasurementState.Mode == AV || (OutputState.On && OutputState.Mode != 'd'))
 80034e0:	4b57      	ldr	r3, [pc, #348]	; (8003640 <main+0x2d8>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d009      	beq.n	80034fc <main+0x194>
 80034e8:	4b53      	ldr	r3, [pc, #332]	; (8003638 <main+0x2d0>)
 80034ea:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d013      	beq.n	800351a <main+0x1b2>
 80034f2:	4b51      	ldr	r3, [pc, #324]	; (8003638 <main+0x2d0>)
 80034f4:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 80034f8:	2b64      	cmp	r3, #100	; 0x64
 80034fa:	d00e      	beq.n	800351a <main+0x1b2>
			  {
				  DisplayState.AutoScrollCounter ++;
 80034fc:	4b52      	ldr	r3, [pc, #328]	; (8003648 <main+0x2e0>)
 80034fe:	7a5b      	ldrb	r3, [r3, #9]
 8003500:	3301      	adds	r3, #1
 8003502:	b2da      	uxtb	r2, r3
 8003504:	4b50      	ldr	r3, [pc, #320]	; (8003648 <main+0x2e0>)
 8003506:	725a      	strb	r2, [r3, #9]
				  if(DisplayState.AutoScrollCounter > 2)
 8003508:	4b4f      	ldr	r3, [pc, #316]	; (8003648 <main+0x2e0>)
 800350a:	7a5b      	ldrb	r3, [r3, #9]
 800350c:	2b02      	cmp	r3, #2
 800350e:	d904      	bls.n	800351a <main+0x1b2>
				  {
					  LCD_AutoScroll();
 8003510:	f7fd fff4 	bl	80014fc <LCD_AutoScroll>
					  DisplayState.AutoScrollCounter = 0;
 8003514:	4b4c      	ldr	r3, [pc, #304]	; (8003648 <main+0x2e0>)
 8003516:	2200      	movs	r2, #0
 8003518:	725a      	strb	r2, [r3, #9]
				  }
			  }
		  }
		  DisplayState.RefreshFlag = 0;
 800351a:	4b4b      	ldr	r3, [pc, #300]	; (8003648 <main+0x2e0>)
 800351c:	2200      	movs	r2, #0
 800351e:	721a      	strb	r2, [r3, #8]
	  }

	  // LCD UART OUTPUT JOB
	  if(DisplayState.PrintFlag)
 8003520:	4b49      	ldr	r3, [pc, #292]	; (8003648 <main+0x2e0>)
 8003522:	799b      	ldrb	r3, [r3, #6]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00e      	beq.n	8003546 <main+0x1de>
	  {
		  if(DisplayState.Mode != Output)
 8003528:	4b47      	ldr	r3, [pc, #284]	; (8003648 <main+0x2e0>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	2b02      	cmp	r3, #2
 800352e:	d002      	beq.n	8003536 <main+0x1ce>
		  {
			  LCD_changeDisplayMode(Output);
 8003530:	2002      	movs	r0, #2
 8003532:	f7fe f85b 	bl	80015ec <LCD_changeDisplayMode>
		  }
		  LCD_Write_Character_Shift(DisplayState.PrintByte);
 8003536:	4b44      	ldr	r3, [pc, #272]	; (8003648 <main+0x2e0>)
 8003538:	79db      	ldrb	r3, [r3, #7]
 800353a:	4618      	mov	r0, r3
 800353c:	f7fd fe22 	bl	8001184 <LCD_Write_Character_Shift>
		  DisplayState.PrintFlag = 0;
 8003540:	4b41      	ldr	r3, [pc, #260]	; (8003648 <main+0x2e0>)
 8003542:	2200      	movs	r2, #0
 8003544:	719a      	strb	r2, [r3, #6]
	  }

	  // UART JOB
	  if(UartState.message_received)
 8003546:	4b41      	ldr	r3, [pc, #260]	; (800364c <main+0x2e4>)
 8003548:	7b5b      	ldrb	r3, [r3, #13]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d004      	beq.n	8003558 <main+0x1f0>
	  {
		  UART_Interpret_Rx_Message();
 800354e:	f000 ff53 	bl	80043f8 <UART_Interpret_Rx_Message>
		  UartState.message_received = 0;
 8003552:	4b3e      	ldr	r3, [pc, #248]	; (800364c <main+0x2e4>)
 8003554:	2200      	movs	r2, #0
 8003556:	735a      	strb	r2, [r3, #13]
	  }

	  // CURRENT JOB
	  if(CurrentState.Measure_Flag)
 8003558:	4b3a      	ldr	r3, [pc, #232]	; (8003644 <main+0x2dc>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d004      	beq.n	800356a <main+0x202>
	  {
		  Read_Current();
 8003560:	f7fd fd42 	bl	8000fe8 <Read_Current>
		  CurrentState.Measure_Flag = 0;
 8003564:	4b37      	ldr	r3, [pc, #220]	; (8003644 <main+0x2dc>)
 8003566:	2200      	movs	r2, #0
 8003568:	701a      	strb	r2, [r3, #0]
	  }

	  // BUTTONS JOB
	  if(btn_up_flag)
 800356a:	4b40      	ldr	r3, [pc, #256]	; (800366c <main+0x304>)
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d01b      	beq.n	80035aa <main+0x242>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 8003572:	f001 fac5 	bl	8004b00 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	4b3d      	ldr	r3, [pc, #244]	; (8003670 <main+0x308>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b36      	cmp	r3, #54	; 0x36
 8003580:	f240 80dc 	bls.w	800373c <main+0x3d4>
		  {
			  if(HAL_GPIO_ReadPin(btn_up_GPIO_Port, btn_up_Pin))
 8003584:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003588:	483a      	ldr	r0, [pc, #232]	; (8003674 <main+0x30c>)
 800358a:	f003 fb75 	bl	8006c78 <HAL_GPIO_ReadPin>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d006      	beq.n	80035a2 <main+0x23a>
			  {
//				  uint32_t code = HAL_UART_GetError(&huart2);
				  if(DisplayState.Mode == Menu)
 8003594:	4b2c      	ldr	r3, [pc, #176]	; (8003648 <main+0x2e0>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d102      	bne.n	80035a2 <main+0x23a>
				  {
					  LCD_Branch_Action(Up);
 800359c:	2000      	movs	r0, #0
 800359e:	f7ff fac5 	bl	8002b2c <LCD_Branch_Action>
				  }
			  }
			  btn_up_flag = 0;
 80035a2:	4b32      	ldr	r3, [pc, #200]	; (800366c <main+0x304>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	701a      	strb	r2, [r3, #0]
 80035a8:	e0c8      	b.n	800373c <main+0x3d4>
		  }
	  }
	  else if(btn_left_flag)
 80035aa:	4b33      	ldr	r3, [pc, #204]	; (8003678 <main+0x310>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d022      	beq.n	80035f8 <main+0x290>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 80035b2:	f001 faa5 	bl	8004b00 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	4b2d      	ldr	r3, [pc, #180]	; (8003670 <main+0x308>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b36      	cmp	r3, #54	; 0x36
 80035c0:	f240 80bc 	bls.w	800373c <main+0x3d4>
		  {
			  if(HAL_GPIO_ReadPin(btn_left_GPIO_Port, btn_left_Pin))
 80035c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035c8:	482a      	ldr	r0, [pc, #168]	; (8003674 <main+0x30c>)
 80035ca:	f003 fb55 	bl	8006c78 <HAL_GPIO_ReadPin>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00d      	beq.n	80035f0 <main+0x288>
			  {
				  if(DisplayState.Mode == Menu)
 80035d4:	4b1c      	ldr	r3, [pc, #112]	; (8003648 <main+0x2e0>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d103      	bne.n	80035e4 <main+0x27c>
				  {
					  LCD_Branch_Action(Left);
 80035dc:	2002      	movs	r0, #2
 80035de:	f7ff faa5 	bl	8002b2c <LCD_Branch_Action>
 80035e2:	e005      	b.n	80035f0 <main+0x288>
				  }
				  else
				  {
					  LCD_Write_Instruction(0b00011100); // Scroll
 80035e4:	201c      	movs	r0, #28
 80035e6:	f7fd fe37 	bl	8001258 <LCD_Write_Instruction>
					  Delay_us_10(5);
 80035ea:	2005      	movs	r0, #5
 80035ec:	f000 fc6c 	bl	8003ec8 <Delay_us_10>
				  }
			  }
			  btn_left_flag = 0;
 80035f0:	4b21      	ldr	r3, [pc, #132]	; (8003678 <main+0x310>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	701a      	strb	r2, [r3, #0]
 80035f6:	e0a1      	b.n	800373c <main+0x3d4>
		  }
	  }
	  else if(btn_down_flag)
 80035f8:	4b20      	ldr	r3, [pc, #128]	; (800367c <main+0x314>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d03f      	beq.n	8003680 <main+0x318>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 8003600:	f001 fa7e 	bl	8004b00 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	4b1a      	ldr	r3, [pc, #104]	; (8003670 <main+0x308>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b36      	cmp	r3, #54	; 0x36
 800360e:	f240 8095 	bls.w	800373c <main+0x3d4>
		  {
			  if(HAL_GPIO_ReadPin(btn_down_GPIO_Port, btn_down_Pin))
 8003612:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003616:	4817      	ldr	r0, [pc, #92]	; (8003674 <main+0x30c>)
 8003618:	f003 fb2e 	bl	8006c78 <HAL_GPIO_ReadPin>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d006      	beq.n	8003630 <main+0x2c8>
			  {
				  if(DisplayState.Mode == Menu)
 8003622:	4b09      	ldr	r3, [pc, #36]	; (8003648 <main+0x2e0>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d102      	bne.n	8003630 <main+0x2c8>
				  {
					  LCD_Branch_Action(Down);
 800362a:	2001      	movs	r0, #1
 800362c:	f7ff fa7e 	bl	8002b2c <LCD_Branch_Action>
				  }
			  }
			  btn_down_flag = 0;
 8003630:	4b12      	ldr	r3, [pc, #72]	; (800367c <main+0x314>)
 8003632:	2200      	movs	r2, #0
 8003634:	701a      	strb	r2, [r3, #0]
 8003636:	e081      	b.n	800373c <main+0x3d4>
 8003638:	20000828 	.word	0x20000828
 800363c:	044aa200 	.word	0x044aa200
 8003640:	2000081c 	.word	0x2000081c
 8003644:	200009e4 	.word	0x200009e4
 8003648:	200009f0 	.word	0x200009f0
 800364c:	20000ca4 	.word	0x20000ca4
 8003650:	20000000 	.word	0x20000000
 8003654:	20000bd4 	.word	0x20000bd4
 8003658:	20000c58 	.word	0x20000c58
 800365c:	20000aa8 	.word	0x20000aa8
 8003660:	20000a5c 	.word	0x20000a5c
 8003664:	20000b88 	.word	0x20000b88
 8003668:	48000800 	.word	0x48000800
 800366c:	2000003c 	.word	0x2000003c
 8003670:	20000040 	.word	0x20000040
 8003674:	48000400 	.word	0x48000400
 8003678:	2000003d 	.word	0x2000003d
 800367c:	2000003e 	.word	0x2000003e
		  }
	  }
	  else if(btn_right_flag)
 8003680:	4b34      	ldr	r3, [pc, #208]	; (8003754 <main+0x3ec>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d021      	beq.n	80036cc <main+0x364>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 8003688:	f001 fa3a 	bl	8004b00 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	4b32      	ldr	r3, [pc, #200]	; (8003758 <main+0x3f0>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b36      	cmp	r3, #54	; 0x36
 8003696:	d951      	bls.n	800373c <main+0x3d4>
		  {
			  if(HAL_GPIO_ReadPin(btn_right_GPIO_Port, btn_right_Pin))
 8003698:	2180      	movs	r1, #128	; 0x80
 800369a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800369e:	f003 faeb 	bl	8006c78 <HAL_GPIO_ReadPin>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00d      	beq.n	80036c4 <main+0x35c>
			  {
				  if(DisplayState.Mode == Menu)
 80036a8:	4b2c      	ldr	r3, [pc, #176]	; (800375c <main+0x3f4>)
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d103      	bne.n	80036b8 <main+0x350>
				  {
					  LCD_Branch_Action(Right);
 80036b0:	2003      	movs	r0, #3
 80036b2:	f7ff fa3b 	bl	8002b2c <LCD_Branch_Action>
 80036b6:	e005      	b.n	80036c4 <main+0x35c>
				  }
				  else
				  {
					  LCD_Write_Instruction(0b00011000); // Scroll
 80036b8:	2018      	movs	r0, #24
 80036ba:	f7fd fdcd 	bl	8001258 <LCD_Write_Instruction>
					  Delay_us_10(5);
 80036be:	2005      	movs	r0, #5
 80036c0:	f000 fc02 	bl	8003ec8 <Delay_us_10>
				  }
			  }
			  btn_right_flag = 0;
 80036c4:	4b23      	ldr	r3, [pc, #140]	; (8003754 <main+0x3ec>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	701a      	strb	r2, [r3, #0]
 80036ca:	e037      	b.n	800373c <main+0x3d4>
		  }
	  }
	  else if(btn_mid_flag)
 80036cc:	4b24      	ldr	r3, [pc, #144]	; (8003760 <main+0x3f8>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d033      	beq.n	800373c <main+0x3d4>
	  {
		  if(HAL_GetTick() - last_ticks >= 20)
 80036d4:	f001 fa14 	bl	8004b00 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	4b1f      	ldr	r3, [pc, #124]	; (8003758 <main+0x3f0>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b13      	cmp	r3, #19
 80036e2:	d92b      	bls.n	800373c <main+0x3d4>
		  {
			  if(HAL_GPIO_ReadPin(btn_mid_GPIO_Port, btn_mid_Pin))
 80036e4:	2140      	movs	r1, #64	; 0x40
 80036e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036ea:	f003 fac5 	bl	8006c78 <HAL_GPIO_ReadPin>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d020      	beq.n	8003736 <main+0x3ce>
			  {
				  // Toggle Menu Display state
				  if(DisplayState.Mode == Menu)
 80036f4:	4b19      	ldr	r3, [pc, #100]	; (800375c <main+0x3f4>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10b      	bne.n	8003714 <main+0x3ac>
				  {
					  if(DisplayState.CurrentBranch == Top)
 80036fc:	4b17      	ldr	r3, [pc, #92]	; (800375c <main+0x3f4>)
 80036fe:	78db      	ldrb	r3, [r3, #3]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d103      	bne.n	800370c <main+0x3a4>
					  {
						  LCD_changeDisplayMode(Measurement);
 8003704:	2001      	movs	r0, #1
 8003706:	f7fd ff71 	bl	80015ec <LCD_changeDisplayMode>
 800370a:	e014      	b.n	8003736 <main+0x3ce>
					  }
					  else
					  {
						  LCD_Branch_Action(Enter);
 800370c:	2004      	movs	r0, #4
 800370e:	f7ff fa0d 	bl	8002b2c <LCD_Branch_Action>
 8003712:	e010      	b.n	8003736 <main+0x3ce>
					  }
				  }
				  else if(DisplayState.Mode == Measurement)
 8003714:	4b11      	ldr	r3, [pc, #68]	; (800375c <main+0x3f4>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d103      	bne.n	8003724 <main+0x3bc>
				  {
					  LCD_changeDisplayMode(Menu);
 800371c:	2000      	movs	r0, #0
 800371e:	f7fd ff65 	bl	80015ec <LCD_changeDisplayMode>
 8003722:	e008      	b.n	8003736 <main+0x3ce>
				  }
				  else if(DisplayState.Mode == Output)
 8003724:	4b0d      	ldr	r3, [pc, #52]	; (800375c <main+0x3f4>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2b02      	cmp	r3, #2
 800372a:	d104      	bne.n	8003736 <main+0x3ce>
				  {
					  LCD_changeDisplayMode(DisplayState.LastMode);
 800372c:	4b0b      	ldr	r3, [pc, #44]	; (800375c <main+0x3f4>)
 800372e:	785b      	ldrb	r3, [r3, #1]
 8003730:	4618      	mov	r0, r3
 8003732:	f7fd ff5b 	bl	80015ec <LCD_changeDisplayMode>
				  }
			  }
			  btn_mid_flag = 0;
 8003736:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <main+0x3f8>)
 8003738:	2200      	movs	r2, #0
 800373a:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  // ADC JOB
	  if(adc_timer_flag)
 800373c:	4b09      	ldr	r3, [pc, #36]	; (8003764 <main+0x3fc>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	f43f aec3 	beq.w	80034cc <main+0x164>
	  {
		  ADC_Main_Function();
 8003746:	f7fd fa15 	bl	8000b74 <ADC_Main_Function>
		  adc_timer_flag = 0;
 800374a:	4b06      	ldr	r3, [pc, #24]	; (8003764 <main+0x3fc>)
 800374c:	2200      	movs	r2, #0
 800374e:	701a      	strb	r2, [r3, #0]
	  if(DisplayState.RefreshFlag == 1)
 8003750:	e6bc      	b.n	80034cc <main+0x164>
 8003752:	bf00      	nop
 8003754:	2000003b 	.word	0x2000003b
 8003758:	20000040 	.word	0x20000040
 800375c:	200009f0 	.word	0x200009f0
 8003760:	2000003a 	.word	0x2000003a
 8003764:	2000003f 	.word	0x2000003f

08003768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b0a6      	sub	sp, #152	; 0x98
 800376c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800376e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003772:	2228      	movs	r2, #40	; 0x28
 8003774:	2100      	movs	r1, #0
 8003776:	4618      	mov	r0, r3
 8003778:	f007 fad8 	bl	800ad2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800377c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	605a      	str	r2, [r3, #4]
 8003786:	609a      	str	r2, [r3, #8]
 8003788:	60da      	str	r2, [r3, #12]
 800378a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800378c:	1d3b      	adds	r3, r7, #4
 800378e:	2258      	movs	r2, #88	; 0x58
 8003790:	2100      	movs	r1, #0
 8003792:	4618      	mov	r0, r3
 8003794:	f007 faca 	bl	800ad2c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003798:	2302      	movs	r3, #2
 800379a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800379c:	2301      	movs	r3, #1
 800379e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80037a0:	2310      	movs	r3, #16
 80037a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037a6:	2302      	movs	r3, #2
 80037a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80037ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80037b4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80037b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80037bc:	2300      	movs	r3, #0
 80037be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037c2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80037c6:	4618      	mov	r0, r3
 80037c8:	f003 ffa0 	bl	800770c <HAL_RCC_OscConfig>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80037d2:	f000 fb97 	bl	8003f04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037d6:	230f      	movs	r3, #15
 80037d8:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037da:	2302      	movs	r3, #2
 80037dc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037de:	2300      	movs	r3, #0
 80037e0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80037e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037e6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037e8:	2300      	movs	r3, #0
 80037ea:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80037ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80037f0:	2102      	movs	r1, #2
 80037f2:	4618      	mov	r0, r3
 80037f4:	f004 fea0 	bl	8008538 <HAL_RCC_ClockConfig>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80037fe:	f000 fb81 	bl	8003f04 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8003802:	4b0f      	ldr	r3, [pc, #60]	; (8003840 <SystemClock_Config+0xd8>)
 8003804:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM15|RCC_PERIPHCLK_TIM16
                              |RCC_PERIPHCLK_TIM17|RCC_PERIPHCLK_ADC12
                              |RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003806:	2300      	movs	r3, #0
 8003808:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800380a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800380e:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003810:	2300      	movs	r3, #0
 8003812:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8003814:	2300      	movs	r3, #0
 8003816:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8003818:	2300      	movs	r3, #0
 800381a:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 800381c:	2300      	movs	r3, #0
 800381e:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8003820:	2300      	movs	r3, #0
 8003822:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003824:	1d3b      	adds	r3, r7, #4
 8003826:	4618      	mov	r0, r3
 8003828:	f005 f8bc 	bl	80089a4 <HAL_RCCEx_PeriphCLKConfig>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8003832:	f000 fb67 	bl	8003f04 <Error_Handler>
  }
}
 8003836:	bf00      	nop
 8003838:	3798      	adds	r7, #152	; 0x98
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	01d000a2 	.word	0x01d000a2

08003844 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b08a      	sub	sp, #40	; 0x28
 8003848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800384a:	f107 031c 	add.w	r3, r7, #28
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	605a      	str	r2, [r3, #4]
 8003854:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003856:	1d3b      	adds	r3, r7, #4
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	605a      	str	r2, [r3, #4]
 800385e:	609a      	str	r2, [r3, #8]
 8003860:	60da      	str	r2, [r3, #12]
 8003862:	611a      	str	r2, [r3, #16]
 8003864:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8003866:	4b2e      	ldr	r3, [pc, #184]	; (8003920 <MX_ADC1_Init+0xdc>)
 8003868:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800386c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800386e:	4b2c      	ldr	r3, [pc, #176]	; (8003920 <MX_ADC1_Init+0xdc>)
 8003870:	2200      	movs	r2, #0
 8003872:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003874:	4b2a      	ldr	r3, [pc, #168]	; (8003920 <MX_ADC1_Init+0xdc>)
 8003876:	2200      	movs	r2, #0
 8003878:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800387a:	4b29      	ldr	r3, [pc, #164]	; (8003920 <MX_ADC1_Init+0xdc>)
 800387c:	2200      	movs	r2, #0
 800387e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003880:	4b27      	ldr	r3, [pc, #156]	; (8003920 <MX_ADC1_Init+0xdc>)
 8003882:	2200      	movs	r2, #0
 8003884:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003886:	4b26      	ldr	r3, [pc, #152]	; (8003920 <MX_ADC1_Init+0xdc>)
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800388e:	4b24      	ldr	r3, [pc, #144]	; (8003920 <MX_ADC1_Init+0xdc>)
 8003890:	2200      	movs	r2, #0
 8003892:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003894:	4b22      	ldr	r3, [pc, #136]	; (8003920 <MX_ADC1_Init+0xdc>)
 8003896:	2201      	movs	r2, #1
 8003898:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800389a:	4b21      	ldr	r3, [pc, #132]	; (8003920 <MX_ADC1_Init+0xdc>)
 800389c:	2200      	movs	r2, #0
 800389e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80038a0:	4b1f      	ldr	r3, [pc, #124]	; (8003920 <MX_ADC1_Init+0xdc>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80038a6:	4b1e      	ldr	r3, [pc, #120]	; (8003920 <MX_ADC1_Init+0xdc>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80038ae:	4b1c      	ldr	r3, [pc, #112]	; (8003920 <MX_ADC1_Init+0xdc>)
 80038b0:	2204      	movs	r2, #4
 80038b2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80038b4:	4b1a      	ldr	r3, [pc, #104]	; (8003920 <MX_ADC1_Init+0xdc>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80038ba:	4b19      	ldr	r3, [pc, #100]	; (8003920 <MX_ADC1_Init+0xdc>)
 80038bc:	2200      	movs	r2, #0
 80038be:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80038c0:	4817      	ldr	r0, [pc, #92]	; (8003920 <MX_ADC1_Init+0xdc>)
 80038c2:	f001 f94b 	bl	8004b5c <HAL_ADC_Init>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80038cc:	f000 fb1a 	bl	8003f04 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80038d0:	2300      	movs	r3, #0
 80038d2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80038d4:	f107 031c 	add.w	r3, r7, #28
 80038d8:	4619      	mov	r1, r3
 80038da:	4811      	ldr	r0, [pc, #68]	; (8003920 <MX_ADC1_Init+0xdc>)
 80038dc:	f002 f880 	bl	80059e0 <HAL_ADCEx_MultiModeConfigChannel>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80038e6:	f000 fb0d 	bl	8003f04 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80038ea:	2301      	movs	r3, #1
 80038ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80038ee:	2301      	movs	r3, #1
 80038f0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80038f2:	2300      	movs	r3, #0
 80038f4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80038f6:	2300      	movs	r3, #0
 80038f8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80038fa:	2300      	movs	r3, #0
 80038fc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80038fe:	2300      	movs	r3, #0
 8003900:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003902:	1d3b      	adds	r3, r7, #4
 8003904:	4619      	mov	r1, r3
 8003906:	4806      	ldr	r0, [pc, #24]	; (8003920 <MX_ADC1_Init+0xdc>)
 8003908:	f001 fd7e 	bl	8005408 <HAL_ADC_ConfigChannel>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8003912:	f000 faf7 	bl	8003f04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003916:	bf00      	nop
 8003918:	3728      	adds	r7, #40	; 0x28
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	20000b38 	.word	0x20000b38

08003924 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800392a:	1d3b      	adds	r3, r7, #4
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	605a      	str	r2, [r3, #4]
 8003932:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8003934:	4b0e      	ldr	r3, [pc, #56]	; (8003970 <MX_DAC1_Init+0x4c>)
 8003936:	4a0f      	ldr	r2, [pc, #60]	; (8003974 <MX_DAC1_Init+0x50>)
 8003938:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800393a:	480d      	ldr	r0, [pc, #52]	; (8003970 <MX_DAC1_Init+0x4c>)
 800393c:	f002 fbd1 	bl	80060e2 <HAL_DAC_Init>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8003946:	f000 fadd 	bl	8003f04 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800394a:	2324      	movs	r3, #36	; 0x24
 800394c:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800394e:	2300      	movs	r3, #0
 8003950:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003952:	1d3b      	adds	r3, r7, #4
 8003954:	2200      	movs	r2, #0
 8003956:	4619      	mov	r1, r3
 8003958:	4805      	ldr	r0, [pc, #20]	; (8003970 <MX_DAC1_Init+0x4c>)
 800395a:	f002 fd01 	bl	8006360 <HAL_DAC_ConfigChannel>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8003964:	f000 face 	bl	8003f04 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8003968:	bf00      	nop
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	200009fc 	.word	0x200009fc
 8003974:	40007400 	.word	0x40007400

08003978 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800397c:	4b1b      	ldr	r3, [pc, #108]	; (80039ec <MX_I2C1_Init+0x74>)
 800397e:	4a1c      	ldr	r2, [pc, #112]	; (80039f0 <MX_I2C1_Init+0x78>)
 8003980:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8003982:	4b1a      	ldr	r3, [pc, #104]	; (80039ec <MX_I2C1_Init+0x74>)
 8003984:	4a1b      	ldr	r2, [pc, #108]	; (80039f4 <MX_I2C1_Init+0x7c>)
 8003986:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003988:	4b18      	ldr	r3, [pc, #96]	; (80039ec <MX_I2C1_Init+0x74>)
 800398a:	2200      	movs	r2, #0
 800398c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800398e:	4b17      	ldr	r3, [pc, #92]	; (80039ec <MX_I2C1_Init+0x74>)
 8003990:	2201      	movs	r2, #1
 8003992:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003994:	4b15      	ldr	r3, [pc, #84]	; (80039ec <MX_I2C1_Init+0x74>)
 8003996:	2200      	movs	r2, #0
 8003998:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800399a:	4b14      	ldr	r3, [pc, #80]	; (80039ec <MX_I2C1_Init+0x74>)
 800399c:	2200      	movs	r2, #0
 800399e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80039a0:	4b12      	ldr	r3, [pc, #72]	; (80039ec <MX_I2C1_Init+0x74>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80039a6:	4b11      	ldr	r3, [pc, #68]	; (80039ec <MX_I2C1_Init+0x74>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80039ac:	4b0f      	ldr	r3, [pc, #60]	; (80039ec <MX_I2C1_Init+0x74>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80039b2:	480e      	ldr	r0, [pc, #56]	; (80039ec <MX_I2C1_Init+0x74>)
 80039b4:	f003 f9a8 	bl	8006d08 <HAL_I2C_Init>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80039be:	f000 faa1 	bl	8003f04 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80039c2:	2100      	movs	r1, #0
 80039c4:	4809      	ldr	r0, [pc, #36]	; (80039ec <MX_I2C1_Init+0x74>)
 80039c6:	f003 fe09 	bl	80075dc <HAL_I2CEx_ConfigAnalogFilter>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80039d0:	f000 fa98 	bl	8003f04 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80039d4:	2100      	movs	r1, #0
 80039d6:	4805      	ldr	r0, [pc, #20]	; (80039ec <MX_I2C1_Init+0x74>)
 80039d8:	f003 fe4b 	bl	8007672 <HAL_I2CEx_ConfigDigitalFilter>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80039e2:	f000 fa8f 	bl	8003f04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80039e6:	bf00      	nop
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	20000a10 	.word	0x20000a10
 80039f0:	40005400 	.word	0x40005400
 80039f4:	2000090e 	.word	0x2000090e

080039f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039fe:	f107 0310 	add.w	r3, r7, #16
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	605a      	str	r2, [r3, #4]
 8003a08:	609a      	str	r2, [r3, #8]
 8003a0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a0c:	1d3b      	adds	r3, r7, #4
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	605a      	str	r2, [r3, #4]
 8003a14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003a16:	4b1e      	ldr	r3, [pc, #120]	; (8003a90 <MX_TIM2_Init+0x98>)
 8003a18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a1c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003a1e:	4b1c      	ldr	r3, [pc, #112]	; (8003a90 <MX_TIM2_Init+0x98>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a24:	4b1a      	ldr	r3, [pc, #104]	; (8003a90 <MX_TIM2_Init+0x98>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8003a2a:	4b19      	ldr	r3, [pc, #100]	; (8003a90 <MX_TIM2_Init+0x98>)
 8003a2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a30:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a32:	4b17      	ldr	r3, [pc, #92]	; (8003a90 <MX_TIM2_Init+0x98>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a38:	4b15      	ldr	r3, [pc, #84]	; (8003a90 <MX_TIM2_Init+0x98>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003a3e:	4814      	ldr	r0, [pc, #80]	; (8003a90 <MX_TIM2_Init+0x98>)
 8003a40:	f005 f9ce 	bl	8008de0 <HAL_TIM_Base_Init>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003a4a:	f000 fa5b 	bl	8003f04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003a54:	f107 0310 	add.w	r3, r7, #16
 8003a58:	4619      	mov	r1, r3
 8003a5a:	480d      	ldr	r0, [pc, #52]	; (8003a90 <MX_TIM2_Init+0x98>)
 8003a5c:	f005 fc0f 	bl	800927e <HAL_TIM_ConfigClockSource>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003a66:	f000 fa4d 	bl	8003f04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003a6a:	2320      	movs	r3, #32
 8003a6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a72:	1d3b      	adds	r3, r7, #4
 8003a74:	4619      	mov	r1, r3
 8003a76:	4806      	ldr	r0, [pc, #24]	; (8003a90 <MX_TIM2_Init+0x98>)
 8003a78:	f005 fe20 	bl	80096bc <HAL_TIMEx_MasterConfigSynchronization>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003a82:	f000 fa3f 	bl	8003f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003a86:	bf00      	nop
 8003a88:	3720      	adds	r7, #32
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	20000b88 	.word	0x20000b88

08003a94 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b088      	sub	sp, #32
 8003a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a9a:	f107 0310 	add.w	r3, r7, #16
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	605a      	str	r2, [r3, #4]
 8003aa4:	609a      	str	r2, [r3, #8]
 8003aa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003aa8:	1d3b      	adds	r3, r7, #4
 8003aaa:	2200      	movs	r2, #0
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	605a      	str	r2, [r3, #4]
 8003ab0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003ab2:	4b1e      	ldr	r3, [pc, #120]	; (8003b2c <MX_TIM15_Init+0x98>)
 8003ab4:	4a1e      	ldr	r2, [pc, #120]	; (8003b30 <MX_TIM15_Init+0x9c>)
 8003ab6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 72-1;
 8003ab8:	4b1c      	ldr	r3, [pc, #112]	; (8003b2c <MX_TIM15_Init+0x98>)
 8003aba:	2247      	movs	r2, #71	; 0x47
 8003abc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003abe:	4b1b      	ldr	r3, [pc, #108]	; (8003b2c <MX_TIM15_Init+0x98>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 10-1;
 8003ac4:	4b19      	ldr	r3, [pc, #100]	; (8003b2c <MX_TIM15_Init+0x98>)
 8003ac6:	2209      	movs	r2, #9
 8003ac8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003aca:	4b18      	ldr	r3, [pc, #96]	; (8003b2c <MX_TIM15_Init+0x98>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003ad0:	4b16      	ldr	r3, [pc, #88]	; (8003b2c <MX_TIM15_Init+0x98>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ad6:	4b15      	ldr	r3, [pc, #84]	; (8003b2c <MX_TIM15_Init+0x98>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8003adc:	4813      	ldr	r0, [pc, #76]	; (8003b2c <MX_TIM15_Init+0x98>)
 8003ade:	f005 f97f 	bl	8008de0 <HAL_TIM_Base_Init>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8003ae8:	f000 fa0c 	bl	8003f04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003af0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8003af2:	f107 0310 	add.w	r3, r7, #16
 8003af6:	4619      	mov	r1, r3
 8003af8:	480c      	ldr	r0, [pc, #48]	; (8003b2c <MX_TIM15_Init+0x98>)
 8003afa:	f005 fbc0 	bl	800927e <HAL_TIM_ConfigClockSource>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8003b04:	f000 f9fe 	bl	8003f04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003b10:	1d3b      	adds	r3, r7, #4
 8003b12:	4619      	mov	r1, r3
 8003b14:	4805      	ldr	r0, [pc, #20]	; (8003b2c <MX_TIM15_Init+0x98>)
 8003b16:	f005 fdd1 	bl	80096bc <HAL_TIMEx_MasterConfigSynchronization>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8003b20:	f000 f9f0 	bl	8003f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8003b24:	bf00      	nop
 8003b26:	3720      	adds	r7, #32
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	20000a5c 	.word	0x20000a5c
 8003b30:	40014000 	.word	0x40014000

08003b34 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003b38:	4b0f      	ldr	r3, [pc, #60]	; (8003b78 <MX_TIM16_Init+0x44>)
 8003b3a:	4a10      	ldr	r2, [pc, #64]	; (8003b7c <MX_TIM16_Init+0x48>)
 8003b3c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 72-1;
 8003b3e:	4b0e      	ldr	r3, [pc, #56]	; (8003b78 <MX_TIM16_Init+0x44>)
 8003b40:	2247      	movs	r2, #71	; 0x47
 8003b42:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b44:	4b0c      	ldr	r3, [pc, #48]	; (8003b78 <MX_TIM16_Init+0x44>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 50 - 1;
 8003b4a:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <MX_TIM16_Init+0x44>)
 8003b4c:	2231      	movs	r2, #49	; 0x31
 8003b4e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b50:	4b09      	ldr	r3, [pc, #36]	; (8003b78 <MX_TIM16_Init+0x44>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003b56:	4b08      	ldr	r3, [pc, #32]	; (8003b78 <MX_TIM16_Init+0x44>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b5c:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <MX_TIM16_Init+0x44>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003b62:	4805      	ldr	r0, [pc, #20]	; (8003b78 <MX_TIM16_Init+0x44>)
 8003b64:	f005 f93c 	bl	8008de0 <HAL_TIM_Base_Init>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8003b6e:	f000 f9c9 	bl	8003f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003b72:	bf00      	nop
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	20000c58 	.word	0x20000c58
 8003b7c:	40014400 	.word	0x40014400

08003b80 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003b84:	4b10      	ldr	r3, [pc, #64]	; (8003bc8 <MX_TIM17_Init+0x48>)
 8003b86:	4a11      	ldr	r2, [pc, #68]	; (8003bcc <MX_TIM17_Init+0x4c>)
 8003b88:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 7200-1;
 8003b8a:	4b0f      	ldr	r3, [pc, #60]	; (8003bc8 <MX_TIM17_Init+0x48>)
 8003b8c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8003b90:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b92:	4b0d      	ldr	r3, [pc, #52]	; (8003bc8 <MX_TIM17_Init+0x48>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 5000-1;
 8003b98:	4b0b      	ldr	r3, [pc, #44]	; (8003bc8 <MX_TIM17_Init+0x48>)
 8003b9a:	f241 3287 	movw	r2, #4999	; 0x1387
 8003b9e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ba0:	4b09      	ldr	r3, [pc, #36]	; (8003bc8 <MX_TIM17_Init+0x48>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003ba6:	4b08      	ldr	r3, [pc, #32]	; (8003bc8 <MX_TIM17_Init+0x48>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bac:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <MX_TIM17_Init+0x48>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003bb2:	4805      	ldr	r0, [pc, #20]	; (8003bc8 <MX_TIM17_Init+0x48>)
 8003bb4:	f005 f914 	bl	8008de0 <HAL_TIM_Base_Init>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8003bbe:	f000 f9a1 	bl	8003f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8003bc2:	bf00      	nop
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	20000aa8 	.word	0x20000aa8
 8003bcc:	40014800 	.word	0x40014800

08003bd0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003bd4:	4b14      	ldr	r3, [pc, #80]	; (8003c28 <MX_USART2_UART_Init+0x58>)
 8003bd6:	4a15      	ldr	r2, [pc, #84]	; (8003c2c <MX_USART2_UART_Init+0x5c>)
 8003bd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003bda:	4b13      	ldr	r3, [pc, #76]	; (8003c28 <MX_USART2_UART_Init+0x58>)
 8003bdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003be0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003be2:	4b11      	ldr	r3, [pc, #68]	; (8003c28 <MX_USART2_UART_Init+0x58>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003be8:	4b0f      	ldr	r3, [pc, #60]	; (8003c28 <MX_USART2_UART_Init+0x58>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003bee:	4b0e      	ldr	r3, [pc, #56]	; (8003c28 <MX_USART2_UART_Init+0x58>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003bf4:	4b0c      	ldr	r3, [pc, #48]	; (8003c28 <MX_USART2_UART_Init+0x58>)
 8003bf6:	220c      	movs	r2, #12
 8003bf8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bfa:	4b0b      	ldr	r3, [pc, #44]	; (8003c28 <MX_USART2_UART_Init+0x58>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c00:	4b09      	ldr	r3, [pc, #36]	; (8003c28 <MX_USART2_UART_Init+0x58>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c06:	4b08      	ldr	r3, [pc, #32]	; (8003c28 <MX_USART2_UART_Init+0x58>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c0c:	4b06      	ldr	r3, [pc, #24]	; (8003c28 <MX_USART2_UART_Init+0x58>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003c12:	4805      	ldr	r0, [pc, #20]	; (8003c28 <MX_USART2_UART_Init+0x58>)
 8003c14:	f005 fdfc 	bl	8009810 <HAL_UART_Init>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003c1e:	f000 f971 	bl	8003f04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003c22:	bf00      	nop
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	20000bd4 	.word	0x20000bd4
 8003c2c:	40004400 	.word	0x40004400

08003c30 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003c36:	4b0c      	ldr	r3, [pc, #48]	; (8003c68 <MX_DMA_Init+0x38>)
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	4a0b      	ldr	r2, [pc, #44]	; (8003c68 <MX_DMA_Init+0x38>)
 8003c3c:	f043 0301 	orr.w	r3, r3, #1
 8003c40:	6153      	str	r3, [r2, #20]
 8003c42:	4b09      	ldr	r3, [pc, #36]	; (8003c68 <MX_DMA_Init+0x38>)
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	607b      	str	r3, [r7, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003c4e:	2200      	movs	r2, #0
 8003c50:	2100      	movs	r1, #0
 8003c52:	200d      	movs	r0, #13
 8003c54:	f002 fa0f 	bl	8006076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003c58:	200d      	movs	r0, #13
 8003c5a:	f002 fa28 	bl	80060ae <HAL_NVIC_EnableIRQ>

}
 8003c5e:	bf00      	nop
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	40021000 	.word	0x40021000

08003c6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b08a      	sub	sp, #40	; 0x28
 8003c70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c72:	f107 0314 	add.w	r3, r7, #20
 8003c76:	2200      	movs	r2, #0
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	605a      	str	r2, [r3, #4]
 8003c7c:	609a      	str	r2, [r3, #8]
 8003c7e:	60da      	str	r2, [r3, #12]
 8003c80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c82:	4b75      	ldr	r3, [pc, #468]	; (8003e58 <MX_GPIO_Init+0x1ec>)
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	4a74      	ldr	r2, [pc, #464]	; (8003e58 <MX_GPIO_Init+0x1ec>)
 8003c88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c8c:	6153      	str	r3, [r2, #20]
 8003c8e:	4b72      	ldr	r3, [pc, #456]	; (8003e58 <MX_GPIO_Init+0x1ec>)
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c96:	613b      	str	r3, [r7, #16]
 8003c98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c9a:	4b6f      	ldr	r3, [pc, #444]	; (8003e58 <MX_GPIO_Init+0x1ec>)
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	4a6e      	ldr	r2, [pc, #440]	; (8003e58 <MX_GPIO_Init+0x1ec>)
 8003ca0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ca4:	6153      	str	r3, [r2, #20]
 8003ca6:	4b6c      	ldr	r3, [pc, #432]	; (8003e58 <MX_GPIO_Init+0x1ec>)
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cb2:	4b69      	ldr	r3, [pc, #420]	; (8003e58 <MX_GPIO_Init+0x1ec>)
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	4a68      	ldr	r2, [pc, #416]	; (8003e58 <MX_GPIO_Init+0x1ec>)
 8003cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cbc:	6153      	str	r3, [r2, #20]
 8003cbe:	4b66      	ldr	r3, [pc, #408]	; (8003e58 <MX_GPIO_Init+0x1ec>)
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc6:	60bb      	str	r3, [r7, #8]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cca:	4b63      	ldr	r3, [pc, #396]	; (8003e58 <MX_GPIO_Init+0x1ec>)
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	4a62      	ldr	r2, [pc, #392]	; (8003e58 <MX_GPIO_Init+0x1ec>)
 8003cd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cd4:	6153      	str	r3, [r2, #20]
 8003cd6:	4b60      	ldr	r3, [pc, #384]	; (8003e58 <MX_GPIO_Init+0x1ec>)
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cde:	607b      	str	r3, [r7, #4]
 8003ce0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD5_Pin|LD4_Pin|lcd_D6_Pin 
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f44f 51f1 	mov.w	r1, #7712	; 0x1e20
 8003ce8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cec:	f002 ffdc 	bl	8006ca8 <HAL_GPIO_WritePin>
                          |lcd_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|lcd_D4_Pin|LD3_Pin|lcd_D5_Pin, GPIO_PIN_RESET);
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8003cf6:	4859      	ldr	r0, [pc, #356]	; (8003e5c <MX_GPIO_Init+0x1f0>)
 8003cf8:	f002 ffd6 	bl	8006ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, lcd_blown_Pin|lcd_RS_Pin|lcd_E_Pin, GPIO_PIN_RESET);
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8003d02:	4857      	ldr	r0, [pc, #348]	; (8003e60 <MX_GPIO_Init+0x1f4>)
 8003d04:	f002 ffd0 	bl	8006ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003d08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003d0e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003d12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d14:	2300      	movs	r3, #0
 8003d16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003d18:	f107 0314 	add.w	r3, r7, #20
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	484f      	ldr	r0, [pc, #316]	; (8003e5c <MX_GPIO_Init+0x1f0>)
 8003d20:	f002 fe20 	bl	8006964 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD5_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD5_Pin|LD4_Pin;
 8003d24:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 8003d28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d32:	2300      	movs	r3, #0
 8003d34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d36:	f107 0314 	add.w	r3, r7, #20
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d40:	f002 fe10 	bl	8006964 <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_mid_Pin */
  GPIO_InitStruct.Pin = btn_mid_Pin;
 8003d44:	2340      	movs	r3, #64	; 0x40
 8003d46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003d48:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8003d4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn_mid_GPIO_Port, &GPIO_InitStruct);
 8003d52:	f107 0314 	add.w	r3, r7, #20
 8003d56:	4619      	mov	r1, r3
 8003d58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d5c:	f002 fe02 	bl	8006964 <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_right_Pin */
  GPIO_InitStruct.Pin = btn_right_Pin;
 8003d60:	2380      	movs	r3, #128	; 0x80
 8003d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003d64:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003d68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn_right_GPIO_Port, &GPIO_InitStruct);
 8003d6e:	f107 0314 	add.w	r3, r7, #20
 8003d72:	4619      	mov	r1, r3
 8003d74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d78:	f002 fdf4 	bl	8006964 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD3_Pin;
 8003d7c:	2390      	movs	r3, #144	; 0x90
 8003d7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d80:	2301      	movs	r3, #1
 8003d82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d84:	2300      	movs	r3, #0
 8003d86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d8c:	f107 0314 	add.w	r3, r7, #20
 8003d90:	4619      	mov	r1, r3
 8003d92:	4832      	ldr	r0, [pc, #200]	; (8003e5c <MX_GPIO_Init+0x1f0>)
 8003d94:	f002 fde6 	bl	8006964 <HAL_GPIO_Init>

  /*Configure GPIO pins : btn_down_Pin btn_left_Pin btn_up_Pin */
  GPIO_InitStruct.Pin = btn_down_Pin|btn_left_Pin|btn_up_Pin;
 8003d98:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003d9e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003da2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003da4:	2301      	movs	r3, #1
 8003da6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003da8:	f107 0314 	add.w	r3, r7, #20
 8003dac:	4619      	mov	r1, r3
 8003dae:	482c      	ldr	r0, [pc, #176]	; (8003e60 <MX_GPIO_Init+0x1f4>)
 8003db0:	f002 fdd8 	bl	8006964 <HAL_GPIO_Init>

  /*Configure GPIO pin : lcd_blown_Pin */
  GPIO_InitStruct.Pin = lcd_blown_Pin;
 8003db4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003dba:	2311      	movs	r3, #17
 8003dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(lcd_blown_GPIO_Port, &GPIO_InitStruct);
 8003dc6:	f107 0314 	add.w	r3, r7, #20
 8003dca:	4619      	mov	r1, r3
 8003dcc:	4824      	ldr	r0, [pc, #144]	; (8003e60 <MX_GPIO_Init+0x1f4>)
 8003dce:	f002 fdc9 	bl	8006964 <HAL_GPIO_Init>

  /*Configure GPIO pins : lcd_RS_Pin lcd_E_Pin */
  GPIO_InitStruct.Pin = lcd_RS_Pin|lcd_E_Pin;
 8003dd2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003dd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003de0:	2300      	movs	r3, #0
 8003de2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003de4:	f107 0314 	add.w	r3, r7, #20
 8003de8:	4619      	mov	r1, r3
 8003dea:	481d      	ldr	r0, [pc, #116]	; (8003e60 <MX_GPIO_Init+0x1f4>)
 8003dec:	f002 fdba 	bl	8006964 <HAL_GPIO_Init>

  /*Configure GPIO pins : lcd_D4_Pin lcd_D5_Pin */
  GPIO_InitStruct.Pin = lcd_D4_Pin|lcd_D5_Pin;
 8003df0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003df4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003df6:	2311      	movs	r3, #17
 8003df8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e02:	f107 0314 	add.w	r3, r7, #20
 8003e06:	4619      	mov	r1, r3
 8003e08:	4814      	ldr	r0, [pc, #80]	; (8003e5c <MX_GPIO_Init+0x1f0>)
 8003e0a:	f002 fdab 	bl	8006964 <HAL_GPIO_Init>

  /*Configure GPIO pins : lcd_D6_Pin lcd_D7_Pin */
  GPIO_InitStruct.Pin = lcd_D6_Pin|lcd_D7_Pin;
 8003e0e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003e12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003e14:	2311      	movs	r3, #17
 8003e16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e20:	f107 0314 	add.w	r3, r7, #20
 8003e24:	4619      	mov	r1, r3
 8003e26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e2a:	f002 fd9b 	bl	8006964 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003e2e:	2200      	movs	r2, #0
 8003e30:	2100      	movs	r1, #0
 8003e32:	2017      	movs	r0, #23
 8003e34:	f002 f91f 	bl	8006076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003e38:	2017      	movs	r0, #23
 8003e3a:	f002 f938 	bl	80060ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003e3e:	2200      	movs	r2, #0
 8003e40:	2100      	movs	r1, #0
 8003e42:	2028      	movs	r0, #40	; 0x28
 8003e44:	f002 f917 	bl	8006076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003e48:	2028      	movs	r0, #40	; 0x28
 8003e4a:	f002 f930 	bl	80060ae <HAL_NVIC_EnableIRQ>

}
 8003e4e:	bf00      	nop
 8003e50:	3728      	adds	r7, #40	; 0x28
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	48000800 	.word	0x48000800
 8003e60:	48000400 	.word	0x48000400

08003e64 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this interrupt
	if(htim == &htim16){
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a0f      	ldr	r2, [pc, #60]	; (8003eac <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d103      	bne.n	8003e7c <HAL_TIM_PeriodElapsedCallback+0x18>
		adc_timer_flag = 1;
 8003e74:	4b0e      	ldr	r3, [pc, #56]	; (8003eb0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003e76:	2201      	movs	r2, #1
 8003e78:	701a      	strb	r2, [r3, #0]
		DisplayState.RefreshFlag = 1;
		CurrentState.Measure_Flag = 1;
	} else if (htim == &htim15){
		us_10 = 1;
	}
}
 8003e7a:	e011      	b.n	8003ea0 <HAL_TIM_PeriodElapsedCallback+0x3c>
	} else if (htim == &htim17){
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a0d      	ldr	r2, [pc, #52]	; (8003eb4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d106      	bne.n	8003e92 <HAL_TIM_PeriodElapsedCallback+0x2e>
		DisplayState.RefreshFlag = 1;
 8003e84:	4b0c      	ldr	r3, [pc, #48]	; (8003eb8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003e86:	2201      	movs	r2, #1
 8003e88:	721a      	strb	r2, [r3, #8]
		CurrentState.Measure_Flag = 1;
 8003e8a:	4b0c      	ldr	r3, [pc, #48]	; (8003ebc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	701a      	strb	r2, [r3, #0]
}
 8003e90:	e006      	b.n	8003ea0 <HAL_TIM_PeriodElapsedCallback+0x3c>
	} else if (htim == &htim15){
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a0a      	ldr	r2, [pc, #40]	; (8003ec0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d102      	bne.n	8003ea0 <HAL_TIM_PeriodElapsedCallback+0x3c>
		us_10 = 1;
 8003e9a:	4b0a      	ldr	r3, [pc, #40]	; (8003ec4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	701a      	strb	r2, [r3, #0]
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	20000c58 	.word	0x20000c58
 8003eb0:	2000003f 	.word	0x2000003f
 8003eb4:	20000aa8 	.word	0x20000aa8
 8003eb8:	200009f0 	.word	0x200009f0
 8003ebc:	200009e4 	.word	0x200009e4
 8003ec0:	20000a5c 	.word	0x20000a5c
 8003ec4:	20000044 	.word	0x20000044

08003ec8 <Delay_us_10>:

void Delay_us_10(uint8_t tens)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	4603      	mov	r3, r0
 8003ed0:	71fb      	strb	r3, [r7, #7]
	uint8_t us_10_counter = 0;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	73fb      	strb	r3, [r7, #15]
	while(us_10_counter < tens)
 8003ed6:	e009      	b.n	8003eec <Delay_us_10+0x24>
	{
		if(us_10){
 8003ed8:	4b09      	ldr	r3, [pc, #36]	; (8003f00 <Delay_us_10+0x38>)
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d005      	beq.n	8003eec <Delay_us_10+0x24>
			us_10_counter ++;
 8003ee0:	7bfb      	ldrb	r3, [r7, #15]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	73fb      	strb	r3, [r7, #15]
			us_10 = 0;
 8003ee6:	4b06      	ldr	r3, [pc, #24]	; (8003f00 <Delay_us_10+0x38>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	701a      	strb	r2, [r3, #0]
	while(us_10_counter < tens)
 8003eec:	7bfa      	ldrb	r2, [r7, #15]
 8003eee:	79fb      	ldrb	r3, [r7, #7]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d3f1      	bcc.n	8003ed8 <Delay_us_10+0x10>
		}
	}
}
 8003ef4:	bf00      	nop
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	20000044 	.word	0x20000044

08003f04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003f08:	bf00      	nop
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
	...

08003f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f1a:	4b0f      	ldr	r3, [pc, #60]	; (8003f58 <HAL_MspInit+0x44>)
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	4a0e      	ldr	r2, [pc, #56]	; (8003f58 <HAL_MspInit+0x44>)
 8003f20:	f043 0301 	orr.w	r3, r3, #1
 8003f24:	6193      	str	r3, [r2, #24]
 8003f26:	4b0c      	ldr	r3, [pc, #48]	; (8003f58 <HAL_MspInit+0x44>)
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	607b      	str	r3, [r7, #4]
 8003f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f32:	4b09      	ldr	r3, [pc, #36]	; (8003f58 <HAL_MspInit+0x44>)
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	4a08      	ldr	r2, [pc, #32]	; (8003f58 <HAL_MspInit+0x44>)
 8003f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f3c:	61d3      	str	r3, [r2, #28]
 8003f3e:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <HAL_MspInit+0x44>)
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f46:	603b      	str	r3, [r7, #0]
 8003f48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003f4a:	2007      	movs	r0, #7
 8003f4c:	f002 f888 	bl	8006060 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f50:	bf00      	nop
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40021000 	.word	0x40021000

08003f5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08a      	sub	sp, #40	; 0x28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f64:	f107 0314 	add.w	r3, r7, #20
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	605a      	str	r2, [r3, #4]
 8003f6e:	609a      	str	r2, [r3, #8]
 8003f70:	60da      	str	r2, [r3, #12]
 8003f72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f7c:	d124      	bne.n	8003fc8 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003f7e:	4b14      	ldr	r3, [pc, #80]	; (8003fd0 <HAL_ADC_MspInit+0x74>)
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	4a13      	ldr	r2, [pc, #76]	; (8003fd0 <HAL_ADC_MspInit+0x74>)
 8003f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f88:	6153      	str	r3, [r2, #20]
 8003f8a:	4b11      	ldr	r3, [pc, #68]	; (8003fd0 <HAL_ADC_MspInit+0x74>)
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f92:	613b      	str	r3, [r7, #16]
 8003f94:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f96:	4b0e      	ldr	r3, [pc, #56]	; (8003fd0 <HAL_ADC_MspInit+0x74>)
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	4a0d      	ldr	r2, [pc, #52]	; (8003fd0 <HAL_ADC_MspInit+0x74>)
 8003f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fa0:	6153      	str	r3, [r2, #20]
 8003fa2:	4b0b      	ldr	r3, [pc, #44]	; (8003fd0 <HAL_ADC_MspInit+0x74>)
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fba:	f107 0314 	add.w	r3, r7, #20
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fc4:	f002 fcce 	bl	8006964 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003fc8:	bf00      	nop
 8003fca:	3728      	adds	r7, #40	; 0x28
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	40021000 	.word	0x40021000

08003fd4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b08a      	sub	sp, #40	; 0x28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fdc:	f107 0314 	add.w	r3, r7, #20
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	605a      	str	r2, [r3, #4]
 8003fe6:	609a      	str	r2, [r3, #8]
 8003fe8:	60da      	str	r2, [r3, #12]
 8003fea:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a2c      	ldr	r2, [pc, #176]	; (80040a4 <HAL_DAC_MspInit+0xd0>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d152      	bne.n	800409c <HAL_DAC_MspInit+0xc8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003ff6:	4b2c      	ldr	r3, [pc, #176]	; (80040a8 <HAL_DAC_MspInit+0xd4>)
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	4a2b      	ldr	r2, [pc, #172]	; (80040a8 <HAL_DAC_MspInit+0xd4>)
 8003ffc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004000:	61d3      	str	r3, [r2, #28]
 8004002:	4b29      	ldr	r3, [pc, #164]	; (80040a8 <HAL_DAC_MspInit+0xd4>)
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800400a:	613b      	str	r3, [r7, #16]
 800400c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800400e:	4b26      	ldr	r3, [pc, #152]	; (80040a8 <HAL_DAC_MspInit+0xd4>)
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	4a25      	ldr	r2, [pc, #148]	; (80040a8 <HAL_DAC_MspInit+0xd4>)
 8004014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004018:	6153      	str	r3, [r2, #20]
 800401a:	4b23      	ldr	r3, [pc, #140]	; (80040a8 <HAL_DAC_MspInit+0xd4>)
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004022:	60fb      	str	r3, [r7, #12]
 8004024:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004026:	2310      	movs	r3, #16
 8004028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800402a:	2303      	movs	r3, #3
 800402c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800402e:	2300      	movs	r3, #0
 8004030:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004032:	f107 0314 	add.w	r3, r7, #20
 8004036:	4619      	mov	r1, r3
 8004038:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800403c:	f002 fc92 	bl	8006964 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8004040:	4b1a      	ldr	r3, [pc, #104]	; (80040ac <HAL_DAC_MspInit+0xd8>)
 8004042:	4a1b      	ldr	r2, [pc, #108]	; (80040b0 <HAL_DAC_MspInit+0xdc>)
 8004044:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004046:	4b19      	ldr	r3, [pc, #100]	; (80040ac <HAL_DAC_MspInit+0xd8>)
 8004048:	2210      	movs	r2, #16
 800404a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800404c:	4b17      	ldr	r3, [pc, #92]	; (80040ac <HAL_DAC_MspInit+0xd8>)
 800404e:	2200      	movs	r2, #0
 8004050:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004052:	4b16      	ldr	r3, [pc, #88]	; (80040ac <HAL_DAC_MspInit+0xd8>)
 8004054:	2280      	movs	r2, #128	; 0x80
 8004056:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004058:	4b14      	ldr	r3, [pc, #80]	; (80040ac <HAL_DAC_MspInit+0xd8>)
 800405a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800405e:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004060:	4b12      	ldr	r3, [pc, #72]	; (80040ac <HAL_DAC_MspInit+0xd8>)
 8004062:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004066:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8004068:	4b10      	ldr	r3, [pc, #64]	; (80040ac <HAL_DAC_MspInit+0xd8>)
 800406a:	2220      	movs	r2, #32
 800406c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800406e:	4b0f      	ldr	r3, [pc, #60]	; (80040ac <HAL_DAC_MspInit+0xd8>)
 8004070:	2200      	movs	r2, #0
 8004072:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8004074:	480d      	ldr	r0, [pc, #52]	; (80040ac <HAL_DAC_MspInit+0xd8>)
 8004076:	f002 fa4a 	bl	800650e <HAL_DMA_Init>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 8004080:	f7ff ff40 	bl	8003f04 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8004084:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <HAL_DAC_MspInit+0xe0>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a0a      	ldr	r2, [pc, #40]	; (80040b4 <HAL_DAC_MspInit+0xe0>)
 800408a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800408e:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a06      	ldr	r2, [pc, #24]	; (80040ac <HAL_DAC_MspInit+0xd8>)
 8004094:	609a      	str	r2, [r3, #8]
 8004096:	4a05      	ldr	r2, [pc, #20]	; (80040ac <HAL_DAC_MspInit+0xd8>)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800409c:	bf00      	nop
 800409e:	3728      	adds	r7, #40	; 0x28
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40007400 	.word	0x40007400
 80040a8:	40021000 	.word	0x40021000
 80040ac:	20000af4 	.word	0x20000af4
 80040b0:	40020030 	.word	0x40020030
 80040b4:	40010000 	.word	0x40010000

080040b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b08a      	sub	sp, #40	; 0x28
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040c0:	f107 0314 	add.w	r3, r7, #20
 80040c4:	2200      	movs	r2, #0
 80040c6:	601a      	str	r2, [r3, #0]
 80040c8:	605a      	str	r2, [r3, #4]
 80040ca:	609a      	str	r2, [r3, #8]
 80040cc:	60da      	str	r2, [r3, #12]
 80040ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a17      	ldr	r2, [pc, #92]	; (8004134 <HAL_I2C_MspInit+0x7c>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d127      	bne.n	800412a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040da:	4b17      	ldr	r3, [pc, #92]	; (8004138 <HAL_I2C_MspInit+0x80>)
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	4a16      	ldr	r2, [pc, #88]	; (8004138 <HAL_I2C_MspInit+0x80>)
 80040e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040e4:	6153      	str	r3, [r2, #20]
 80040e6:	4b14      	ldr	r3, [pc, #80]	; (8004138 <HAL_I2C_MspInit+0x80>)
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80040f2:	23c0      	movs	r3, #192	; 0xc0
 80040f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040f6:	2312      	movs	r3, #18
 80040f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040fa:	2301      	movs	r3, #1
 80040fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040fe:	2303      	movs	r3, #3
 8004100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004102:	2304      	movs	r3, #4
 8004104:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004106:	f107 0314 	add.w	r3, r7, #20
 800410a:	4619      	mov	r1, r3
 800410c:	480b      	ldr	r0, [pc, #44]	; (800413c <HAL_I2C_MspInit+0x84>)
 800410e:	f002 fc29 	bl	8006964 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004112:	4b09      	ldr	r3, [pc, #36]	; (8004138 <HAL_I2C_MspInit+0x80>)
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	4a08      	ldr	r2, [pc, #32]	; (8004138 <HAL_I2C_MspInit+0x80>)
 8004118:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800411c:	61d3      	str	r3, [r2, #28]
 800411e:	4b06      	ldr	r3, [pc, #24]	; (8004138 <HAL_I2C_MspInit+0x80>)
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800412a:	bf00      	nop
 800412c:	3728      	adds	r7, #40	; 0x28
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	40005400 	.word	0x40005400
 8004138:	40021000 	.word	0x40021000
 800413c:	48000400 	.word	0x48000400

08004140 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004150:	d114      	bne.n	800417c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004152:	4b33      	ldr	r3, [pc, #204]	; (8004220 <HAL_TIM_Base_MspInit+0xe0>)
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	4a32      	ldr	r2, [pc, #200]	; (8004220 <HAL_TIM_Base_MspInit+0xe0>)
 8004158:	f043 0301 	orr.w	r3, r3, #1
 800415c:	61d3      	str	r3, [r2, #28]
 800415e:	4b30      	ldr	r3, [pc, #192]	; (8004220 <HAL_TIM_Base_MspInit+0xe0>)
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800416a:	2200      	movs	r2, #0
 800416c:	2100      	movs	r1, #0
 800416e:	201c      	movs	r0, #28
 8004170:	f001 ff81 	bl	8006076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004174:	201c      	movs	r0, #28
 8004176:	f001 ff9a 	bl	80060ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800417a:	e04c      	b.n	8004216 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM15)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a28      	ldr	r2, [pc, #160]	; (8004224 <HAL_TIM_Base_MspInit+0xe4>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d114      	bne.n	80041b0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004186:	4b26      	ldr	r3, [pc, #152]	; (8004220 <HAL_TIM_Base_MspInit+0xe0>)
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	4a25      	ldr	r2, [pc, #148]	; (8004220 <HAL_TIM_Base_MspInit+0xe0>)
 800418c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004190:	6193      	str	r3, [r2, #24]
 8004192:	4b23      	ldr	r3, [pc, #140]	; (8004220 <HAL_TIM_Base_MspInit+0xe0>)
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800419a:	613b      	str	r3, [r7, #16]
 800419c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800419e:	2200      	movs	r2, #0
 80041a0:	2100      	movs	r1, #0
 80041a2:	2018      	movs	r0, #24
 80041a4:	f001 ff67 	bl	8006076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80041a8:	2018      	movs	r0, #24
 80041aa:	f001 ff80 	bl	80060ae <HAL_NVIC_EnableIRQ>
}
 80041ae:	e032      	b.n	8004216 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM16)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a1c      	ldr	r2, [pc, #112]	; (8004228 <HAL_TIM_Base_MspInit+0xe8>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d114      	bne.n	80041e4 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80041ba:	4b19      	ldr	r3, [pc, #100]	; (8004220 <HAL_TIM_Base_MspInit+0xe0>)
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	4a18      	ldr	r2, [pc, #96]	; (8004220 <HAL_TIM_Base_MspInit+0xe0>)
 80041c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041c4:	6193      	str	r3, [r2, #24]
 80041c6:	4b16      	ldr	r3, [pc, #88]	; (8004220 <HAL_TIM_Base_MspInit+0xe0>)
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80041d2:	2200      	movs	r2, #0
 80041d4:	2100      	movs	r1, #0
 80041d6:	2019      	movs	r0, #25
 80041d8:	f001 ff4d 	bl	8006076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80041dc:	2019      	movs	r0, #25
 80041de:	f001 ff66 	bl	80060ae <HAL_NVIC_EnableIRQ>
}
 80041e2:	e018      	b.n	8004216 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM17)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a10      	ldr	r2, [pc, #64]	; (800422c <HAL_TIM_Base_MspInit+0xec>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d113      	bne.n	8004216 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80041ee:	4b0c      	ldr	r3, [pc, #48]	; (8004220 <HAL_TIM_Base_MspInit+0xe0>)
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	4a0b      	ldr	r2, [pc, #44]	; (8004220 <HAL_TIM_Base_MspInit+0xe0>)
 80041f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041f8:	6193      	str	r3, [r2, #24]
 80041fa:	4b09      	ldr	r3, [pc, #36]	; (8004220 <HAL_TIM_Base_MspInit+0xe0>)
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004202:	60bb      	str	r3, [r7, #8]
 8004204:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8004206:	2200      	movs	r2, #0
 8004208:	2100      	movs	r1, #0
 800420a:	201a      	movs	r0, #26
 800420c:	f001 ff33 	bl	8006076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8004210:	201a      	movs	r0, #26
 8004212:	f001 ff4c 	bl	80060ae <HAL_NVIC_EnableIRQ>
}
 8004216:	bf00      	nop
 8004218:	3718      	adds	r7, #24
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	40021000 	.word	0x40021000
 8004224:	40014000 	.word	0x40014000
 8004228:	40014400 	.word	0x40014400
 800422c:	40014800 	.word	0x40014800

08004230 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b08a      	sub	sp, #40	; 0x28
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004238:	f107 0314 	add.w	r3, r7, #20
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	605a      	str	r2, [r3, #4]
 8004242:	609a      	str	r2, [r3, #8]
 8004244:	60da      	str	r2, [r3, #12]
 8004246:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a1b      	ldr	r2, [pc, #108]	; (80042bc <HAL_UART_MspInit+0x8c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d130      	bne.n	80042b4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004252:	4b1b      	ldr	r3, [pc, #108]	; (80042c0 <HAL_UART_MspInit+0x90>)
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	4a1a      	ldr	r2, [pc, #104]	; (80042c0 <HAL_UART_MspInit+0x90>)
 8004258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800425c:	61d3      	str	r3, [r2, #28]
 800425e:	4b18      	ldr	r3, [pc, #96]	; (80042c0 <HAL_UART_MspInit+0x90>)
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004266:	613b      	str	r3, [r7, #16]
 8004268:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800426a:	4b15      	ldr	r3, [pc, #84]	; (80042c0 <HAL_UART_MspInit+0x90>)
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	4a14      	ldr	r2, [pc, #80]	; (80042c0 <HAL_UART_MspInit+0x90>)
 8004270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004274:	6153      	str	r3, [r2, #20]
 8004276:	4b12      	ldr	r3, [pc, #72]	; (80042c0 <HAL_UART_MspInit+0x90>)
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427e:	60fb      	str	r3, [r7, #12]
 8004280:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004282:	230c      	movs	r3, #12
 8004284:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004286:	2302      	movs	r3, #2
 8004288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800428a:	2300      	movs	r3, #0
 800428c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800428e:	2300      	movs	r3, #0
 8004290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004292:	2307      	movs	r3, #7
 8004294:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004296:	f107 0314 	add.w	r3, r7, #20
 800429a:	4619      	mov	r1, r3
 800429c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042a0:	f002 fb60 	bl	8006964 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80042a4:	2200      	movs	r2, #0
 80042a6:	2100      	movs	r1, #0
 80042a8:	2026      	movs	r0, #38	; 0x26
 80042aa:	f001 fee4 	bl	8006076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80042ae:	2026      	movs	r0, #38	; 0x26
 80042b0:	f001 fefd 	bl	80060ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80042b4:	bf00      	nop
 80042b6:	3728      	adds	r7, #40	; 0x28
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	40004400 	.word	0x40004400
 80042c0:	40021000 	.word	0x40021000

080042c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80042c8:	bf00      	nop
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042d2:	b480      	push	{r7}
 80042d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042d6:	e7fe      	b.n	80042d6 <HardFault_Handler+0x4>

080042d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042dc:	e7fe      	b.n	80042dc <MemManage_Handler+0x4>

080042de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042de:	b480      	push	{r7}
 80042e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042e2:	e7fe      	b.n	80042e2 <BusFault_Handler+0x4>

080042e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042e8:	e7fe      	b.n	80042e8 <UsageFault_Handler+0x4>

080042ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042ea:	b480      	push	{r7}
 80042ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80042ee:	bf00      	nop
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042fc:	bf00      	nop
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004306:	b480      	push	{r7}
 8004308:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800430a:	bf00      	nop
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004318:	f000 fbde 	bl	8004ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800431c:	bf00      	nop
 800431e:	bd80      	pop	{r7, pc}

08004320 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8004324:	4802      	ldr	r0, [pc, #8]	; (8004330 <DMA1_Channel3_IRQHandler+0x10>)
 8004326:	f002 fa0f 	bl	8006748 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800432a:	bf00      	nop
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	20000af4 	.word	0x20000af4

08004334 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8004338:	2040      	movs	r0, #64	; 0x40
 800433a:	f002 fccd 	bl	8006cd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800433e:	2080      	movs	r0, #128	; 0x80
 8004340:	f002 fcca 	bl	8006cd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004344:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004348:	f002 fcc6 	bl	8006cd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800434c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004350:	f002 fcc2 	bl	8006cd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004354:	bf00      	nop
 8004356:	bd80      	pop	{r7, pc}

08004358 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800435c:	4802      	ldr	r0, [pc, #8]	; (8004368 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800435e:	f004 fe6f 	bl	8009040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8004362:	bf00      	nop
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	20000a5c 	.word	0x20000a5c

0800436c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004370:	4802      	ldr	r0, [pc, #8]	; (800437c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8004372:	f004 fe65 	bl	8009040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004376:	bf00      	nop
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	20000c58 	.word	0x20000c58

08004380 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8004384:	4802      	ldr	r0, [pc, #8]	; (8004390 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8004386:	f004 fe5b 	bl	8009040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800438a:	bf00      	nop
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	20000aa8 	.word	0x20000aa8

08004394 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004398:	4802      	ldr	r0, [pc, #8]	; (80043a4 <TIM2_IRQHandler+0x10>)
 800439a:	f004 fe51 	bl	8009040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800439e:	bf00      	nop
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	20000b88 	.word	0x20000b88

080043a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80043ac:	4802      	ldr	r0, [pc, #8]	; (80043b8 <USART2_IRQHandler+0x10>)
 80043ae:	f005 fb5f 	bl	8009a70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80043b2:	bf00      	nop
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	20000bd4 	.word	0x20000bd4

080043bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80043c0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80043c4:	f002 fc88 	bl	8006cd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80043c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80043cc:	f002 fc84 	bl	8006cd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80043d0:	bf00      	nop
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043d8:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <SystemInit+0x20>)
 80043da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043de:	4a05      	ldr	r2, [pc, #20]	; (80043f4 <SystemInit+0x20>)
 80043e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043e8:	bf00      	nop
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	e000ed00 	.word	0xe000ed00

080043f8 <UART_Interpret_Rx_Message>:
extern UART_HandleTypeDef huart2;

UartStructType UartState;

void UART_Interpret_Rx_Message()
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
	if(UartState.rx_bytes_length > 7)
 80043fc:	4b2d      	ldr	r3, [pc, #180]	; (80044b4 <UART_Interpret_Rx_Message+0xbc>)
 80043fe:	7b1b      	ldrb	r3, [r3, #12]
 8004400:	2b07      	cmp	r3, #7
 8004402:	d955      	bls.n	80044b0 <UART_Interpret_Rx_Message+0xb8>
	{
		if(UartState.rx_bytes[2] == '*')
 8004404:	4b2b      	ldr	r3, [pc, #172]	; (80044b4 <UART_Interpret_Rx_Message+0xbc>)
 8004406:	78db      	ldrb	r3, [r3, #3]
 8004408:	2b2a      	cmp	r3, #42	; 0x2a
 800440a:	d12c      	bne.n	8004466 <UART_Interpret_Rx_Message+0x6e>
		{
			// Requests
			switch(UartState.rx_bytes[4])
 800440c:	4b29      	ldr	r3, [pc, #164]	; (80044b4 <UART_Interpret_Rx_Message+0xbc>)
 800440e:	795b      	ldrb	r3, [r3, #5]
 8004410:	2b6d      	cmp	r3, #109	; 0x6d
 8004412:	d002      	beq.n	800441a <UART_Interpret_Rx_Message+0x22>
 8004414:	2b73      	cmp	r3, #115	; 0x73
 8004416:	d006      	beq.n	8004426 <UART_Interpret_Rx_Message+0x2e>
					UART_Request_Status();
					LCD_changeDisplayMode(Measurement);
					break;
				default:
					// Problems
					break;
 8004418:	e04a      	b.n	80044b0 <UART_Interpret_Rx_Message+0xb8>
					UART_Request_Measurement(UartState.rx_bytes[6]);
 800441a:	4b26      	ldr	r3, [pc, #152]	; (80044b4 <UART_Interpret_Rx_Message+0xbc>)
 800441c:	79db      	ldrb	r3, [r3, #7]
 800441e:	4618      	mov	r0, r3
 8004420:	f000 f870 	bl	8004504 <UART_Request_Measurement>
					break;
 8004424:	e044      	b.n	80044b0 <UART_Interpret_Rx_Message+0xb8>
					if(UartState.rx_bytes[6] == '1'){
 8004426:	4b23      	ldr	r3, [pc, #140]	; (80044b4 <UART_Interpret_Rx_Message+0xbc>)
 8004428:	79db      	ldrb	r3, [r3, #7]
 800442a:	2b31      	cmp	r3, #49	; 0x31
 800442c:	d10a      	bne.n	8004444 <UART_Interpret_Rx_Message+0x4c>
						if(!OutputState.On) DAC_Start();
 800442e:	4b22      	ldr	r3, [pc, #136]	; (80044b8 <UART_Interpret_Rx_Message+0xc0>)
 8004430:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8004434:	f083 0301 	eor.w	r3, r3, #1
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00d      	beq.n	800445a <UART_Interpret_Rx_Message+0x62>
 800443e:	f7fc fd5b 	bl	8000ef8 <DAC_Start>
 8004442:	e00a      	b.n	800445a <UART_Interpret_Rx_Message+0x62>
					else if(UartState.rx_bytes[6] == '0'){
 8004444:	4b1b      	ldr	r3, [pc, #108]	; (80044b4 <UART_Interpret_Rx_Message+0xbc>)
 8004446:	79db      	ldrb	r3, [r3, #7]
 8004448:	2b30      	cmp	r3, #48	; 0x30
 800444a:	d106      	bne.n	800445a <UART_Interpret_Rx_Message+0x62>
						if(OutputState.On) DAC_Stop();
 800444c:	4b1a      	ldr	r3, [pc, #104]	; (80044b8 <UART_Interpret_Rx_Message+0xc0>)
 800444e:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <UART_Interpret_Rx_Message+0x62>
 8004456:	f7fc fd71 	bl	8000f3c <DAC_Stop>
					UART_Request_Status();
 800445a:	f000 f993 	bl	8004784 <UART_Request_Status>
					LCD_changeDisplayMode(Measurement);
 800445e:	2001      	movs	r0, #1
 8004460:	f7fd f8c4 	bl	80015ec <LCD_changeDisplayMode>
					break;
 8004464:	e024      	b.n	80044b0 <UART_Interpret_Rx_Message+0xb8>
			}
		}
		else if(UartState.rx_bytes[2] == '$'){
 8004466:	4b13      	ldr	r3, [pc, #76]	; (80044b4 <UART_Interpret_Rx_Message+0xbc>)
 8004468:	78db      	ldrb	r3, [r3, #3]
 800446a:	2b24      	cmp	r3, #36	; 0x24
 800446c:	d108      	bne.n	8004480 <UART_Interpret_Rx_Message+0x88>
			// Set Measurement Mode
			UART_Set_Measurement_Mode(UartState.rx_bytes[4], UartState.rx_bytes[5]);
 800446e:	4b11      	ldr	r3, [pc, #68]	; (80044b4 <UART_Interpret_Rx_Message+0xbc>)
 8004470:	795a      	ldrb	r2, [r3, #5]
 8004472:	4b10      	ldr	r3, [pc, #64]	; (80044b4 <UART_Interpret_Rx_Message+0xbc>)
 8004474:	799b      	ldrb	r3, [r3, #6]
 8004476:	4619      	mov	r1, r3
 8004478:	4610      	mov	r0, r2
 800447a:	f000 f9d9 	bl	8004830 <UART_Set_Measurement_Mode>
		}else if(UartState.rx_bytes[2] == '#'){
			// Display on LCD
			UART_Display_On_LCD(UartState.rx_bytes[4], UartState.rx_bytes[6]);
		}
	}
}
 800447e:	e017      	b.n	80044b0 <UART_Interpret_Rx_Message+0xb8>
		}else if(UartState.rx_bytes[2] == '^'){
 8004480:	4b0c      	ldr	r3, [pc, #48]	; (80044b4 <UART_Interpret_Rx_Message+0xbc>)
 8004482:	78db      	ldrb	r3, [r3, #3]
 8004484:	2b5e      	cmp	r3, #94	; 0x5e
 8004486:	d106      	bne.n	8004496 <UART_Interpret_Rx_Message+0x9e>
			UART_Set_Output_Parameter(UartState.rx_bytes, UartState.rx_bytes_length);
 8004488:	4b0a      	ldr	r3, [pc, #40]	; (80044b4 <UART_Interpret_Rx_Message+0xbc>)
 800448a:	7b1b      	ldrb	r3, [r3, #12]
 800448c:	4619      	mov	r1, r3
 800448e:	480b      	ldr	r0, [pc, #44]	; (80044bc <UART_Interpret_Rx_Message+0xc4>)
 8004490:	f000 fa06 	bl	80048a0 <UART_Set_Output_Parameter>
}
 8004494:	e00c      	b.n	80044b0 <UART_Interpret_Rx_Message+0xb8>
		}else if(UartState.rx_bytes[2] == '#'){
 8004496:	4b07      	ldr	r3, [pc, #28]	; (80044b4 <UART_Interpret_Rx_Message+0xbc>)
 8004498:	78db      	ldrb	r3, [r3, #3]
 800449a:	2b23      	cmp	r3, #35	; 0x23
 800449c:	d108      	bne.n	80044b0 <UART_Interpret_Rx_Message+0xb8>
			UART_Display_On_LCD(UartState.rx_bytes[4], UartState.rx_bytes[6]);
 800449e:	4b05      	ldr	r3, [pc, #20]	; (80044b4 <UART_Interpret_Rx_Message+0xbc>)
 80044a0:	795a      	ldrb	r2, [r3, #5]
 80044a2:	4b04      	ldr	r3, [pc, #16]	; (80044b4 <UART_Interpret_Rx_Message+0xbc>)
 80044a4:	79db      	ldrb	r3, [r3, #7]
 80044a6:	4619      	mov	r1, r3
 80044a8:	4610      	mov	r0, r2
 80044aa:	f000 f809 	bl	80044c0 <UART_Display_On_LCD>
}
 80044ae:	e7ff      	b.n	80044b0 <UART_Interpret_Rx_Message+0xb8>
 80044b0:	bf00      	nop
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	20000ca4 	.word	0x20000ca4
 80044b8:	20000828 	.word	0x20000828
 80044bc:	20000ca5 	.word	0x20000ca5

080044c0 <UART_Display_On_LCD>:

void UART_Display_On_LCD(uint8_t rs, uint8_t byte)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	4603      	mov	r3, r0
 80044c8:	460a      	mov	r2, r1
 80044ca:	71fb      	strb	r3, [r7, #7]
 80044cc:	4613      	mov	r3, r2
 80044ce:	71bb      	strb	r3, [r7, #6]
	if(rs == '1'){
 80044d0:	79fb      	ldrb	r3, [r7, #7]
 80044d2:	2b31      	cmp	r3, #49	; 0x31
 80044d4:	d106      	bne.n	80044e4 <UART_Display_On_LCD+0x24>
		// Set print flag; store rs and byte
		DisplayState.PrintFlag = 1;
 80044d6:	4b0a      	ldr	r3, [pc, #40]	; (8004500 <UART_Display_On_LCD+0x40>)
 80044d8:	2201      	movs	r2, #1
 80044da:	719a      	strb	r2, [r3, #6]
		DisplayState.PrintByte = byte;
 80044dc:	4a08      	ldr	r2, [pc, #32]	; (8004500 <UART_Display_On_LCD+0x40>)
 80044de:	79bb      	ldrb	r3, [r7, #6]
 80044e0:	71d3      	strb	r3, [r2, #7]
	}else if(rs == '0'){
		// Instruction
		LCD_Write_Instruction(byte);
		Delay_us_10(200); // 2ms
	}
}
 80044e2:	e009      	b.n	80044f8 <UART_Display_On_LCD+0x38>
	}else if(rs == '0'){
 80044e4:	79fb      	ldrb	r3, [r7, #7]
 80044e6:	2b30      	cmp	r3, #48	; 0x30
 80044e8:	d106      	bne.n	80044f8 <UART_Display_On_LCD+0x38>
		LCD_Write_Instruction(byte);
 80044ea:	79bb      	ldrb	r3, [r7, #6]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7fc feb3 	bl	8001258 <LCD_Write_Instruction>
		Delay_us_10(200); // 2ms
 80044f2:	20c8      	movs	r0, #200	; 0xc8
 80044f4:	f7ff fce8 	bl	8003ec8 <Delay_us_10>
}
 80044f8:	bf00      	nop
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	200009f0 	.word	0x200009f0

08004504 <UART_Request_Measurement>:

void UART_Request_Measurement(uint8_t parameter)
{
 8004504:	b590      	push	{r4, r7, lr}
 8004506:	b089      	sub	sp, #36	; 0x24
 8004508:	af00      	add	r7, sp, #0
 800450a:	4603      	mov	r3, r0
 800450c:	71fb      	strb	r3, [r7, #7]
	uint8_t msg[13] = "@,m,x,xxxx,!\n";
 800450e:	4b95      	ldr	r3, [pc, #596]	; (8004764 <UART_Request_Measurement+0x260>)
 8004510:	f107 040c 	add.w	r4, r7, #12
 8004514:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004516:	c407      	stmia	r4!, {r0, r1, r2}
 8004518:	7023      	strb	r3, [r4, #0]
	uint16_t a = 0;
 800451a:	2300      	movs	r3, #0
 800451c:	83fb      	strh	r3, [r7, #30]
	uint16_t o = 0;
 800451e:	2300      	movs	r3, #0
 8004520:	83bb      	strh	r3, [r7, #28]
	uint16_t f = 0;
 8004522:	2300      	movs	r3, #0
 8004524:	837b      	strh	r3, [r7, #26]
	if(MeasurementState.Mode == DV || MeasurementState.Mode == AV)
 8004526:	4b90      	ldr	r3, [pc, #576]	; (8004768 <UART_Request_Measurement+0x264>)
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <UART_Request_Measurement+0x32>
 800452e:	4b8e      	ldr	r3, [pc, #568]	; (8004768 <UART_Request_Measurement+0x264>)
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	2b02      	cmp	r3, #2
 8004534:	d109      	bne.n	800454a <UART_Request_Measurement+0x46>
	{
		a = MeasurementState.Amplitude;
 8004536:	4b8c      	ldr	r3, [pc, #560]	; (8004768 <UART_Request_Measurement+0x264>)
 8004538:	885b      	ldrh	r3, [r3, #2]
 800453a:	83fb      	strh	r3, [r7, #30]
		o = MeasurementState.Offset;
 800453c:	4b8a      	ldr	r3, [pc, #552]	; (8004768 <UART_Request_Measurement+0x264>)
 800453e:	891b      	ldrh	r3, [r3, #8]
 8004540:	83bb      	strh	r3, [r7, #28]
		f = MeasurementState.Frequency;
 8004542:	4b89      	ldr	r3, [pc, #548]	; (8004768 <UART_Request_Measurement+0x264>)
 8004544:	889b      	ldrh	r3, [r3, #4]
 8004546:	837b      	strh	r3, [r7, #26]
 8004548:	e008      	b.n	800455c <UART_Request_Measurement+0x58>
	} else {
		a = CurrentState.Amplitude;
 800454a:	4b88      	ldr	r3, [pc, #544]	; (800476c <UART_Request_Measurement+0x268>)
 800454c:	885b      	ldrh	r3, [r3, #2]
 800454e:	83fb      	strh	r3, [r7, #30]
		o = CurrentState.Offset;
 8004550:	4b86      	ldr	r3, [pc, #536]	; (800476c <UART_Request_Measurement+0x268>)
 8004552:	891b      	ldrh	r3, [r3, #8]
 8004554:	83bb      	strh	r3, [r7, #28]
		f = CurrentState.Frequency;
 8004556:	4b85      	ldr	r3, [pc, #532]	; (800476c <UART_Request_Measurement+0x268>)
 8004558:	889b      	ldrh	r3, [r3, #4]
 800455a:	837b      	strh	r3, [r7, #26]
	}
	switch(parameter){
 800455c:	79fb      	ldrb	r3, [r7, #7]
 800455e:	2b66      	cmp	r3, #102	; 0x66
 8004560:	f000 80a1 	beq.w	80046a6 <UART_Request_Measurement+0x1a2>
 8004564:	2b6f      	cmp	r3, #111	; 0x6f
 8004566:	d050      	beq.n	800460a <UART_Request_Measurement+0x106>
 8004568:	2b61      	cmp	r3, #97	; 0x61
 800456a:	d000      	beq.n	800456e <UART_Request_Measurement+0x6a>
			msg[8] = ((f/10) % 10) + 48;
			msg[9] = (f % 10) + 48;
			break;
		default:
			// Problems
			break;
 800456c:	e0e9      	b.n	8004742 <UART_Request_Measurement+0x23e>
			msg[4] = 'a';
 800456e:	2361      	movs	r3, #97	; 0x61
 8004570:	743b      	strb	r3, [r7, #16]
			msg[6] = ((a/1000) % 10) + 48;
 8004572:	8bfb      	ldrh	r3, [r7, #30]
 8004574:	4a7e      	ldr	r2, [pc, #504]	; (8004770 <UART_Request_Measurement+0x26c>)
 8004576:	fba2 2303 	umull	r2, r3, r2, r3
 800457a:	099b      	lsrs	r3, r3, #6
 800457c:	b29a      	uxth	r2, r3
 800457e:	4b7d      	ldr	r3, [pc, #500]	; (8004774 <UART_Request_Measurement+0x270>)
 8004580:	fba3 1302 	umull	r1, r3, r3, r2
 8004584:	08d9      	lsrs	r1, r3, #3
 8004586:	460b      	mov	r3, r1
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	440b      	add	r3, r1
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	b29b      	uxth	r3, r3
 8004592:	b2db      	uxtb	r3, r3
 8004594:	3330      	adds	r3, #48	; 0x30
 8004596:	b2db      	uxtb	r3, r3
 8004598:	74bb      	strb	r3, [r7, #18]
			msg[7] = ((a/100) % 10) + 48;
 800459a:	8bfb      	ldrh	r3, [r7, #30]
 800459c:	4a76      	ldr	r2, [pc, #472]	; (8004778 <UART_Request_Measurement+0x274>)
 800459e:	fba2 2303 	umull	r2, r3, r2, r3
 80045a2:	095b      	lsrs	r3, r3, #5
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	4b73      	ldr	r3, [pc, #460]	; (8004774 <UART_Request_Measurement+0x270>)
 80045a8:	fba3 1302 	umull	r1, r3, r3, r2
 80045ac:	08d9      	lsrs	r1, r3, #3
 80045ae:	460b      	mov	r3, r1
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	440b      	add	r3, r1
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	3330      	adds	r3, #48	; 0x30
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	74fb      	strb	r3, [r7, #19]
			msg[8] = ((a/10) % 10) + 48;
 80045c2:	8bfb      	ldrh	r3, [r7, #30]
 80045c4:	4a6b      	ldr	r2, [pc, #428]	; (8004774 <UART_Request_Measurement+0x270>)
 80045c6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ca:	08db      	lsrs	r3, r3, #3
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	4b69      	ldr	r3, [pc, #420]	; (8004774 <UART_Request_Measurement+0x270>)
 80045d0:	fba3 1302 	umull	r1, r3, r3, r2
 80045d4:	08d9      	lsrs	r1, r3, #3
 80045d6:	460b      	mov	r3, r1
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	440b      	add	r3, r1
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	3330      	adds	r3, #48	; 0x30
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	753b      	strb	r3, [r7, #20]
			msg[9] = (a % 10) + 48;
 80045ea:	8bfa      	ldrh	r2, [r7, #30]
 80045ec:	4b61      	ldr	r3, [pc, #388]	; (8004774 <UART_Request_Measurement+0x270>)
 80045ee:	fba3 1302 	umull	r1, r3, r3, r2
 80045f2:	08d9      	lsrs	r1, r3, #3
 80045f4:	460b      	mov	r3, r1
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	440b      	add	r3, r1
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	b29b      	uxth	r3, r3
 8004600:	b2db      	uxtb	r3, r3
 8004602:	3330      	adds	r3, #48	; 0x30
 8004604:	b2db      	uxtb	r3, r3
 8004606:	757b      	strb	r3, [r7, #21]
			break;
 8004608:	e09b      	b.n	8004742 <UART_Request_Measurement+0x23e>
			msg[4] = 'o';
 800460a:	236f      	movs	r3, #111	; 0x6f
 800460c:	743b      	strb	r3, [r7, #16]
			msg[6] = ((o/1000) % 10) + 48;
 800460e:	8bbb      	ldrh	r3, [r7, #28]
 8004610:	4a57      	ldr	r2, [pc, #348]	; (8004770 <UART_Request_Measurement+0x26c>)
 8004612:	fba2 2303 	umull	r2, r3, r2, r3
 8004616:	099b      	lsrs	r3, r3, #6
 8004618:	b29a      	uxth	r2, r3
 800461a:	4b56      	ldr	r3, [pc, #344]	; (8004774 <UART_Request_Measurement+0x270>)
 800461c:	fba3 1302 	umull	r1, r3, r3, r2
 8004620:	08d9      	lsrs	r1, r3, #3
 8004622:	460b      	mov	r3, r1
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	440b      	add	r3, r1
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	b29b      	uxth	r3, r3
 800462e:	b2db      	uxtb	r3, r3
 8004630:	3330      	adds	r3, #48	; 0x30
 8004632:	b2db      	uxtb	r3, r3
 8004634:	74bb      	strb	r3, [r7, #18]
			msg[7] = ((o/100) % 10) + 48;
 8004636:	8bbb      	ldrh	r3, [r7, #28]
 8004638:	4a4f      	ldr	r2, [pc, #316]	; (8004778 <UART_Request_Measurement+0x274>)
 800463a:	fba2 2303 	umull	r2, r3, r2, r3
 800463e:	095b      	lsrs	r3, r3, #5
 8004640:	b29a      	uxth	r2, r3
 8004642:	4b4c      	ldr	r3, [pc, #304]	; (8004774 <UART_Request_Measurement+0x270>)
 8004644:	fba3 1302 	umull	r1, r3, r3, r2
 8004648:	08d9      	lsrs	r1, r3, #3
 800464a:	460b      	mov	r3, r1
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	440b      	add	r3, r1
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	b29b      	uxth	r3, r3
 8004656:	b2db      	uxtb	r3, r3
 8004658:	3330      	adds	r3, #48	; 0x30
 800465a:	b2db      	uxtb	r3, r3
 800465c:	74fb      	strb	r3, [r7, #19]
			msg[8] = ((o/10) % 10) + 48;
 800465e:	8bbb      	ldrh	r3, [r7, #28]
 8004660:	4a44      	ldr	r2, [pc, #272]	; (8004774 <UART_Request_Measurement+0x270>)
 8004662:	fba2 2303 	umull	r2, r3, r2, r3
 8004666:	08db      	lsrs	r3, r3, #3
 8004668:	b29a      	uxth	r2, r3
 800466a:	4b42      	ldr	r3, [pc, #264]	; (8004774 <UART_Request_Measurement+0x270>)
 800466c:	fba3 1302 	umull	r1, r3, r3, r2
 8004670:	08d9      	lsrs	r1, r3, #3
 8004672:	460b      	mov	r3, r1
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	440b      	add	r3, r1
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	b29b      	uxth	r3, r3
 800467e:	b2db      	uxtb	r3, r3
 8004680:	3330      	adds	r3, #48	; 0x30
 8004682:	b2db      	uxtb	r3, r3
 8004684:	753b      	strb	r3, [r7, #20]
			msg[9] = (o % 10) + 48;
 8004686:	8bba      	ldrh	r2, [r7, #28]
 8004688:	4b3a      	ldr	r3, [pc, #232]	; (8004774 <UART_Request_Measurement+0x270>)
 800468a:	fba3 1302 	umull	r1, r3, r3, r2
 800468e:	08d9      	lsrs	r1, r3, #3
 8004690:	460b      	mov	r3, r1
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	440b      	add	r3, r1
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	b29b      	uxth	r3, r3
 800469c:	b2db      	uxtb	r3, r3
 800469e:	3330      	adds	r3, #48	; 0x30
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	757b      	strb	r3, [r7, #21]
			break;
 80046a4:	e04d      	b.n	8004742 <UART_Request_Measurement+0x23e>
			msg[4] = 'f';
 80046a6:	2366      	movs	r3, #102	; 0x66
 80046a8:	743b      	strb	r3, [r7, #16]
			msg[6] = ((f/1000) % 10) + 48;
 80046aa:	8b7b      	ldrh	r3, [r7, #26]
 80046ac:	4a30      	ldr	r2, [pc, #192]	; (8004770 <UART_Request_Measurement+0x26c>)
 80046ae:	fba2 2303 	umull	r2, r3, r2, r3
 80046b2:	099b      	lsrs	r3, r3, #6
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	4b2f      	ldr	r3, [pc, #188]	; (8004774 <UART_Request_Measurement+0x270>)
 80046b8:	fba3 1302 	umull	r1, r3, r3, r2
 80046bc:	08d9      	lsrs	r1, r3, #3
 80046be:	460b      	mov	r3, r1
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	440b      	add	r3, r1
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	3330      	adds	r3, #48	; 0x30
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	74bb      	strb	r3, [r7, #18]
			msg[7] = ((f/100) % 10) + 48;
 80046d2:	8b7b      	ldrh	r3, [r7, #26]
 80046d4:	4a28      	ldr	r2, [pc, #160]	; (8004778 <UART_Request_Measurement+0x274>)
 80046d6:	fba2 2303 	umull	r2, r3, r2, r3
 80046da:	095b      	lsrs	r3, r3, #5
 80046dc:	b29a      	uxth	r2, r3
 80046de:	4b25      	ldr	r3, [pc, #148]	; (8004774 <UART_Request_Measurement+0x270>)
 80046e0:	fba3 1302 	umull	r1, r3, r3, r2
 80046e4:	08d9      	lsrs	r1, r3, #3
 80046e6:	460b      	mov	r3, r1
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	440b      	add	r3, r1
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	3330      	adds	r3, #48	; 0x30
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	74fb      	strb	r3, [r7, #19]
			msg[8] = ((f/10) % 10) + 48;
 80046fa:	8b7b      	ldrh	r3, [r7, #26]
 80046fc:	4a1d      	ldr	r2, [pc, #116]	; (8004774 <UART_Request_Measurement+0x270>)
 80046fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004702:	08db      	lsrs	r3, r3, #3
 8004704:	b29a      	uxth	r2, r3
 8004706:	4b1b      	ldr	r3, [pc, #108]	; (8004774 <UART_Request_Measurement+0x270>)
 8004708:	fba3 1302 	umull	r1, r3, r3, r2
 800470c:	08d9      	lsrs	r1, r3, #3
 800470e:	460b      	mov	r3, r1
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	440b      	add	r3, r1
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	b29b      	uxth	r3, r3
 800471a:	b2db      	uxtb	r3, r3
 800471c:	3330      	adds	r3, #48	; 0x30
 800471e:	b2db      	uxtb	r3, r3
 8004720:	753b      	strb	r3, [r7, #20]
			msg[9] = (f % 10) + 48;
 8004722:	8b7a      	ldrh	r2, [r7, #26]
 8004724:	4b13      	ldr	r3, [pc, #76]	; (8004774 <UART_Request_Measurement+0x270>)
 8004726:	fba3 1302 	umull	r1, r3, r3, r2
 800472a:	08d9      	lsrs	r1, r3, #3
 800472c:	460b      	mov	r3, r1
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	440b      	add	r3, r1
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	b29b      	uxth	r3, r3
 8004738:	b2db      	uxtb	r3, r3
 800473a:	3330      	adds	r3, #48	; 0x30
 800473c:	b2db      	uxtb	r3, r3
 800473e:	757b      	strb	r3, [r7, #21]
			break;
 8004740:	bf00      	nop
	}
	HAL_UART_Transmit(&huart2, msg, 13, 10);
 8004742:	f107 010c 	add.w	r1, r7, #12
 8004746:	230a      	movs	r3, #10
 8004748:	220d      	movs	r2, #13
 800474a:	480c      	ldr	r0, [pc, #48]	; (800477c <UART_Request_Measurement+0x278>)
 800474c:	f005 f8ae 	bl	80098ac <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, UartState.rx_byte, 1);
 8004750:	2201      	movs	r2, #1
 8004752:	490b      	ldr	r1, [pc, #44]	; (8004780 <UART_Request_Measurement+0x27c>)
 8004754:	4809      	ldr	r0, [pc, #36]	; (800477c <UART_Request_Measurement+0x278>)
 8004756:	f005 f93d 	bl	80099d4 <HAL_UART_Receive_IT>
}
 800475a:	bf00      	nop
 800475c:	3724      	adds	r7, #36	; 0x24
 800475e:	46bd      	mov	sp, r7
 8004760:	bd90      	pop	{r4, r7, pc}
 8004762:	bf00      	nop
 8004764:	0800bf74 	.word	0x0800bf74
 8004768:	2000081c 	.word	0x2000081c
 800476c:	200009e4 	.word	0x200009e4
 8004770:	10624dd3 	.word	0x10624dd3
 8004774:	cccccccd 	.word	0xcccccccd
 8004778:	51eb851f 	.word	0x51eb851f
 800477c:	20000bd4 	.word	0x20000bd4
 8004780:	20000ca4 	.word	0x20000ca4

08004784 <UART_Request_Status>:

void UART_Request_Status()
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
	uint8_t msg[11] = "@,xx,x,x,!\n";
 800478a:	4a24      	ldr	r2, [pc, #144]	; (800481c <UART_Request_Status+0x98>)
 800478c:	1d3b      	adds	r3, r7, #4
 800478e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004790:	c303      	stmia	r3!, {r0, r1}
 8004792:	801a      	strh	r2, [r3, #0]
 8004794:	3302      	adds	r3, #2
 8004796:	0c12      	lsrs	r2, r2, #16
 8004798:	701a      	strb	r2, [r3, #0]
	switch(MeasurementState.Mode){
 800479a:	4b21      	ldr	r3, [pc, #132]	; (8004820 <UART_Request_Status+0x9c>)
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	2b03      	cmp	r3, #3
 80047a0:	d81e      	bhi.n	80047e0 <UART_Request_Status+0x5c>
 80047a2:	a201      	add	r2, pc, #4	; (adr r2, 80047a8 <UART_Request_Status+0x24>)
 80047a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a8:	080047b9 	.word	0x080047b9
 80047ac:	080047cd 	.word	0x080047cd
 80047b0:	080047c3 	.word	0x080047c3
 80047b4:	080047d7 	.word	0x080047d7
		case DV:
			// DV
			msg[2] = 'D';
 80047b8:	2344      	movs	r3, #68	; 0x44
 80047ba:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'V';
 80047bc:	2356      	movs	r3, #86	; 0x56
 80047be:	71fb      	strb	r3, [r7, #7]
			break;
 80047c0:	e00f      	b.n	80047e2 <UART_Request_Status+0x5e>
		case AV:
			// AV
			msg[2] = 'A';
 80047c2:	2341      	movs	r3, #65	; 0x41
 80047c4:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'V';
 80047c6:	2356      	movs	r3, #86	; 0x56
 80047c8:	71fb      	strb	r3, [r7, #7]
			break;
 80047ca:	e00a      	b.n	80047e2 <UART_Request_Status+0x5e>
		case DI:
			// DI
			msg[2] = 'D';
 80047cc:	2344      	movs	r3, #68	; 0x44
 80047ce:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'I';
 80047d0:	2349      	movs	r3, #73	; 0x49
 80047d2:	71fb      	strb	r3, [r7, #7]
			break;
 80047d4:	e005      	b.n	80047e2 <UART_Request_Status+0x5e>
		case AI:
			// AI
			msg[2] = 'A';
 80047d6:	2341      	movs	r3, #65	; 0x41
 80047d8:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'I';
 80047da:	2349      	movs	r3, #73	; 0x49
 80047dc:	71fb      	strb	r3, [r7, #7]
			break;
 80047de:	e000      	b.n	80047e2 <UART_Request_Status+0x5e>
		default:
			// Problems
			break;
 80047e0:	bf00      	nop
	}
	msg[5] = OutputState.Mode;
 80047e2:	4b10      	ldr	r3, [pc, #64]	; (8004824 <UART_Request_Status+0xa0>)
 80047e4:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 80047e8:	727b      	strb	r3, [r7, #9]
	if(OutputState.On){
 80047ea:	4b0e      	ldr	r3, [pc, #56]	; (8004824 <UART_Request_Status+0xa0>)
 80047ec:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d002      	beq.n	80047fa <UART_Request_Status+0x76>
		msg[7] = '1';
 80047f4:	2331      	movs	r3, #49	; 0x31
 80047f6:	72fb      	strb	r3, [r7, #11]
 80047f8:	e001      	b.n	80047fe <UART_Request_Status+0x7a>
	} else {
		msg[7] = '0';
 80047fa:	2330      	movs	r3, #48	; 0x30
 80047fc:	72fb      	strb	r3, [r7, #11]
	}
	HAL_UART_Transmit(&huart2, msg, 11, 10);
 80047fe:	1d39      	adds	r1, r7, #4
 8004800:	230a      	movs	r3, #10
 8004802:	220b      	movs	r2, #11
 8004804:	4808      	ldr	r0, [pc, #32]	; (8004828 <UART_Request_Status+0xa4>)
 8004806:	f005 f851 	bl	80098ac <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, UartState.rx_byte, 1);
 800480a:	2201      	movs	r2, #1
 800480c:	4907      	ldr	r1, [pc, #28]	; (800482c <UART_Request_Status+0xa8>)
 800480e:	4806      	ldr	r0, [pc, #24]	; (8004828 <UART_Request_Status+0xa4>)
 8004810:	f005 f8e0 	bl	80099d4 <HAL_UART_Receive_IT>

}
 8004814:	bf00      	nop
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	0800bf84 	.word	0x0800bf84
 8004820:	2000081c 	.word	0x2000081c
 8004824:	20000828 	.word	0x20000828
 8004828:	20000bd4 	.word	0x20000bd4
 800482c:	20000ca4 	.word	0x20000ca4

08004830 <UART_Set_Measurement_Mode>:

void UART_Set_Measurement_Mode(uint8_t key1, uint8_t key2){
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	4603      	mov	r3, r0
 8004838:	460a      	mov	r2, r1
 800483a:	71fb      	strb	r3, [r7, #7]
 800483c:	4613      	mov	r3, r2
 800483e:	71bb      	strb	r3, [r7, #6]
	if(key1 == 'D' && key2 == 'V'){
 8004840:	79fb      	ldrb	r3, [r7, #7]
 8004842:	2b44      	cmp	r3, #68	; 0x44
 8004844:	d106      	bne.n	8004854 <UART_Set_Measurement_Mode+0x24>
 8004846:	79bb      	ldrb	r3, [r7, #6]
 8004848:	2b56      	cmp	r3, #86	; 0x56
 800484a:	d103      	bne.n	8004854 <UART_Set_Measurement_Mode+0x24>
		// DC Voltage
		MeasurementState.Mode = DV;
 800484c:	4b13      	ldr	r3, [pc, #76]	; (800489c <UART_Set_Measurement_Mode+0x6c>)
 800484e:	2200      	movs	r2, #0
 8004850:	701a      	strb	r2, [r3, #0]
 8004852:	e01c      	b.n	800488e <UART_Set_Measurement_Mode+0x5e>
	} else if (key1 == 'A' && key2 == 'V'){
 8004854:	79fb      	ldrb	r3, [r7, #7]
 8004856:	2b41      	cmp	r3, #65	; 0x41
 8004858:	d106      	bne.n	8004868 <UART_Set_Measurement_Mode+0x38>
 800485a:	79bb      	ldrb	r3, [r7, #6]
 800485c:	2b56      	cmp	r3, #86	; 0x56
 800485e:	d103      	bne.n	8004868 <UART_Set_Measurement_Mode+0x38>
		// AC Voltage
		MeasurementState.Mode = AV;
 8004860:	4b0e      	ldr	r3, [pc, #56]	; (800489c <UART_Set_Measurement_Mode+0x6c>)
 8004862:	2202      	movs	r2, #2
 8004864:	701a      	strb	r2, [r3, #0]
 8004866:	e012      	b.n	800488e <UART_Set_Measurement_Mode+0x5e>
	} else if (key1 == 'D' && key2 == 'I'){
 8004868:	79fb      	ldrb	r3, [r7, #7]
 800486a:	2b44      	cmp	r3, #68	; 0x44
 800486c:	d106      	bne.n	800487c <UART_Set_Measurement_Mode+0x4c>
 800486e:	79bb      	ldrb	r3, [r7, #6]
 8004870:	2b49      	cmp	r3, #73	; 0x49
 8004872:	d103      	bne.n	800487c <UART_Set_Measurement_Mode+0x4c>
		// DC Current
		MeasurementState.Mode = DI;
 8004874:	4b09      	ldr	r3, [pc, #36]	; (800489c <UART_Set_Measurement_Mode+0x6c>)
 8004876:	2201      	movs	r2, #1
 8004878:	701a      	strb	r2, [r3, #0]
 800487a:	e008      	b.n	800488e <UART_Set_Measurement_Mode+0x5e>
	} else if (key1 == 'A' && key2 == 'I'){
 800487c:	79fb      	ldrb	r3, [r7, #7]
 800487e:	2b41      	cmp	r3, #65	; 0x41
 8004880:	d105      	bne.n	800488e <UART_Set_Measurement_Mode+0x5e>
 8004882:	79bb      	ldrb	r3, [r7, #6]
 8004884:	2b49      	cmp	r3, #73	; 0x49
 8004886:	d102      	bne.n	800488e <UART_Set_Measurement_Mode+0x5e>
		// AC Current
		MeasurementState.Mode = AI;
 8004888:	4b04      	ldr	r3, [pc, #16]	; (800489c <UART_Set_Measurement_Mode+0x6c>)
 800488a:	2203      	movs	r2, #3
 800488c:	701a      	strb	r2, [r3, #0]
	}
//	DisplayState.DisplayMeasurementsFlag = true;
	LCD_changeDisplayMode(Measurement);
 800488e:	2001      	movs	r0, #1
 8004890:	f7fc feac 	bl	80015ec <LCD_changeDisplayMode>
}
 8004894:	bf00      	nop
 8004896:	3708      	adds	r7, #8
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	2000081c 	.word	0x2000081c

080048a0 <UART_Set_Output_Parameter>:

void UART_Set_Output_Parameter(uint8_t *rx_array, uint8_t length)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	460b      	mov	r3, r1
 80048aa:	70fb      	strb	r3, [r7, #3]
	uint8_t param = rx_array[4];
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	791b      	ldrb	r3, [r3, #4]
 80048b0:	72fb      	strb	r3, [r7, #11]
	uint8_t val0 = rx_array[6];
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	799b      	ldrb	r3, [r3, #6]
 80048b6:	73fb      	strb	r3, [r7, #15]
	uint16_t received_value = 0;
 80048b8:	2300      	movs	r3, #0
 80048ba:	81bb      	strh	r3, [r7, #12]
	if(rx_array[7] != ','){
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3307      	adds	r3, #7
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	2b2c      	cmp	r3, #44	; 0x2c
 80048c4:	d03d      	beq.n	8004942 <UART_Set_Output_Parameter+0xa2>
		val0 = rx_array[6] - 48;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	3306      	adds	r3, #6
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	3b30      	subs	r3, #48	; 0x30
 80048ce:	73fb      	strb	r3, [r7, #15]
		uint8_t val1 = rx_array[7] - 48;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3307      	adds	r3, #7
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	3b30      	subs	r3, #48	; 0x30
 80048d8:	72bb      	strb	r3, [r7, #10]
		uint8_t val2 = rx_array[8] - 48;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	3308      	adds	r3, #8
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	3b30      	subs	r3, #48	; 0x30
 80048e2:	727b      	strb	r3, [r7, #9]
		uint8_t val3 = rx_array[9] - 48;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	3309      	adds	r3, #9
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	3b30      	subs	r3, #48	; 0x30
 80048ec:	723b      	strb	r3, [r7, #8]
		received_value += val0*1000;
 80048ee:	7bfb      	ldrb	r3, [r7, #15]
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	461a      	mov	r2, r3
 80048f4:	0152      	lsls	r2, r2, #5
 80048f6:	1ad2      	subs	r2, r2, r3
 80048f8:	0092      	lsls	r2, r2, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	00db      	lsls	r3, r3, #3
 80048fe:	b29a      	uxth	r2, r3
 8004900:	89bb      	ldrh	r3, [r7, #12]
 8004902:	4413      	add	r3, r2
 8004904:	81bb      	strh	r3, [r7, #12]
		received_value += val1*100;
 8004906:	7abb      	ldrb	r3, [r7, #10]
 8004908:	b29b      	uxth	r3, r3
 800490a:	461a      	mov	r2, r3
 800490c:	0092      	lsls	r2, r2, #2
 800490e:	4413      	add	r3, r2
 8004910:	461a      	mov	r2, r3
 8004912:	0091      	lsls	r1, r2, #2
 8004914:	461a      	mov	r2, r3
 8004916:	460b      	mov	r3, r1
 8004918:	4413      	add	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	b29a      	uxth	r2, r3
 800491e:	89bb      	ldrh	r3, [r7, #12]
 8004920:	4413      	add	r3, r2
 8004922:	81bb      	strh	r3, [r7, #12]
		received_value += val2*10;
 8004924:	7a7b      	ldrb	r3, [r7, #9]
 8004926:	b29b      	uxth	r3, r3
 8004928:	461a      	mov	r2, r3
 800492a:	0092      	lsls	r2, r2, #2
 800492c:	4413      	add	r3, r2
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	b29a      	uxth	r2, r3
 8004932:	89bb      	ldrh	r3, [r7, #12]
 8004934:	4413      	add	r3, r2
 8004936:	81bb      	strh	r3, [r7, #12]
		received_value += val3;
 8004938:	7a3b      	ldrb	r3, [r7, #8]
 800493a:	b29a      	uxth	r2, r3
 800493c:	89bb      	ldrh	r3, [r7, #12]
 800493e:	4413      	add	r3, r2
 8004940:	81bb      	strh	r3, [r7, #12]
	}
	switch(param){
 8004942:	7afb      	ldrb	r3, [r7, #11]
 8004944:	3b61      	subs	r3, #97	; 0x61
 8004946:	2b13      	cmp	r3, #19
 8004948:	d844      	bhi.n	80049d4 <UART_Set_Output_Parameter+0x134>
 800494a:	a201      	add	r2, pc, #4	; (adr r2, 8004950 <UART_Set_Output_Parameter+0xb0>)
 800494c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004950:	080049ab 	.word	0x080049ab
 8004954:	080049d5 	.word	0x080049d5
 8004958:	080049d5 	.word	0x080049d5
 800495c:	080049c9 	.word	0x080049c9
 8004960:	080049d5 	.word	0x080049d5
 8004964:	080049bf 	.word	0x080049bf
 8004968:	080049d5 	.word	0x080049d5
 800496c:	080049d5 	.word	0x080049d5
 8004970:	080049d5 	.word	0x080049d5
 8004974:	080049d5 	.word	0x080049d5
 8004978:	080049d5 	.word	0x080049d5
 800497c:	080049d5 	.word	0x080049d5
 8004980:	080049d5 	.word	0x080049d5
 8004984:	080049d5 	.word	0x080049d5
 8004988:	080049b5 	.word	0x080049b5
 800498c:	080049d5 	.word	0x080049d5
 8004990:	080049d5 	.word	0x080049d5
 8004994:	080049d5 	.word	0x080049d5
 8004998:	080049d5 	.word	0x080049d5
 800499c:	080049a1 	.word	0x080049a1
		case 't':
			// Type
			OutputState.Mode = val0;
 80049a0:	4a14      	ldr	r2, [pc, #80]	; (80049f4 <UART_Set_Output_Parameter+0x154>)
 80049a2:	7bfb      	ldrb	r3, [r7, #15]
 80049a4:	f882 3195 	strb.w	r3, [r2, #405]	; 0x195
			break;
 80049a8:	e015      	b.n	80049d6 <UART_Set_Output_Parameter+0x136>
		case 'a':
			// Amplitude
			OutputState.Amplitude = received_value;
 80049aa:	4a12      	ldr	r2, [pc, #72]	; (80049f4 <UART_Set_Output_Parameter+0x154>)
 80049ac:	89bb      	ldrh	r3, [r7, #12]
 80049ae:	f8a2 3196 	strh.w	r3, [r2, #406]	; 0x196
			break;
 80049b2:	e010      	b.n	80049d6 <UART_Set_Output_Parameter+0x136>
		case 'o':
			// Offset
			OutputState.Offset = received_value;
 80049b4:	4a0f      	ldr	r2, [pc, #60]	; (80049f4 <UART_Set_Output_Parameter+0x154>)
 80049b6:	89bb      	ldrh	r3, [r7, #12]
 80049b8:	f8a2 319c 	strh.w	r3, [r2, #412]	; 0x19c
			break;
 80049bc:	e00b      	b.n	80049d6 <UART_Set_Output_Parameter+0x136>
		case 'f':
			// Frequency
			OutputState.Frequency = received_value;
 80049be:	4a0d      	ldr	r2, [pc, #52]	; (80049f4 <UART_Set_Output_Parameter+0x154>)
 80049c0:	89bb      	ldrh	r3, [r7, #12]
 80049c2:	f8a2 3198 	strh.w	r3, [r2, #408]	; 0x198
			break;
 80049c6:	e006      	b.n	80049d6 <UART_Set_Output_Parameter+0x136>
		case 'd':
			// Duty Cycle
			OutputState.DutyCycle = received_value;
 80049c8:	89bb      	ldrh	r3, [r7, #12]
 80049ca:	b2da      	uxtb	r2, r3
 80049cc:	4b09      	ldr	r3, [pc, #36]	; (80049f4 <UART_Set_Output_Parameter+0x154>)
 80049ce:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
			break;
 80049d2:	e000      	b.n	80049d6 <UART_Set_Output_Parameter+0x136>
		case 'c':
			// Temperature
			break;
		default:
			// Problems
			break;
 80049d4:	bf00      	nop
	}
	LCD_changeDisplayMode(Measurement);
 80049d6:	2001      	movs	r0, #1
 80049d8:	f7fc fe08 	bl	80015ec <LCD_changeDisplayMode>
	if(OutputState.On) DAC_Update_Output();
 80049dc:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <UART_Set_Output_Parameter+0x154>)
 80049de:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <UART_Set_Output_Parameter+0x14a>
 80049e6:	f7fc fac1 	bl	8000f6c <DAC_Update_Output>
}
 80049ea:	bf00      	nop
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	20000828 	.word	0x20000828

080049f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80049f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a30 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80049fc:	480d      	ldr	r0, [pc, #52]	; (8004a34 <LoopForever+0x6>)
  ldr r1, =_edata
 80049fe:	490e      	ldr	r1, [pc, #56]	; (8004a38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004a00:	4a0e      	ldr	r2, [pc, #56]	; (8004a3c <LoopForever+0xe>)
  movs r3, #0
 8004a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a04:	e002      	b.n	8004a0c <LoopCopyDataInit>

08004a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a0a:	3304      	adds	r3, #4

08004a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a10:	d3f9      	bcc.n	8004a06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a12:	4a0b      	ldr	r2, [pc, #44]	; (8004a40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004a14:	4c0b      	ldr	r4, [pc, #44]	; (8004a44 <LoopForever+0x16>)
  movs r3, #0
 8004a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a18:	e001      	b.n	8004a1e <LoopFillZerobss>

08004a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a1c:	3204      	adds	r2, #4

08004a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a20:	d3fb      	bcc.n	8004a1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004a22:	f7ff fcd7 	bl	80043d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a26:	f006 f95d 	bl	800ace4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004a2a:	f7fe fc9d 	bl	8003368 <main>

08004a2e <LoopForever>:

LoopForever:
    b LoopForever
 8004a2e:	e7fe      	b.n	8004a2e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004a30:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a38:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8004a3c:	0800c1a8 	.word	0x0800c1a8
  ldr r2, =_sbss
 8004a40:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8004a44:	20000cb8 	.word	0x20000cb8

08004a48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004a48:	e7fe      	b.n	8004a48 <ADC1_2_IRQHandler>
	...

08004a4c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a50:	4b08      	ldr	r3, [pc, #32]	; (8004a74 <HAL_Init+0x28>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a07      	ldr	r2, [pc, #28]	; (8004a74 <HAL_Init+0x28>)
 8004a56:	f043 0310 	orr.w	r3, r3, #16
 8004a5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a5c:	2003      	movs	r0, #3
 8004a5e:	f001 faff 	bl	8006060 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a62:	2000      	movs	r0, #0
 8004a64:	f000 f808 	bl	8004a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a68:	f7ff fa54 	bl	8003f14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	40022000 	.word	0x40022000

08004a78 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a80:	4b12      	ldr	r3, [pc, #72]	; (8004acc <HAL_InitTick+0x54>)
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	4b12      	ldr	r3, [pc, #72]	; (8004ad0 <HAL_InitTick+0x58>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	4619      	mov	r1, r3
 8004a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a96:	4618      	mov	r0, r3
 8004a98:	f001 fb17 	bl	80060ca <HAL_SYSTICK_Config>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e00e      	b.n	8004ac4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b0f      	cmp	r3, #15
 8004aaa:	d80a      	bhi.n	8004ac2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004aac:	2200      	movs	r2, #0
 8004aae:	6879      	ldr	r1, [r7, #4]
 8004ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab4:	f001 fadf 	bl	8006076 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ab8:	4a06      	ldr	r2, [pc, #24]	; (8004ad4 <HAL_InitTick+0x5c>)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	e000      	b.n	8004ac4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3708      	adds	r7, #8
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	20000010 	.word	0x20000010
 8004ad0:	20000018 	.word	0x20000018
 8004ad4:	20000014 	.word	0x20000014

08004ad8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004adc:	4b06      	ldr	r3, [pc, #24]	; (8004af8 <HAL_IncTick+0x20>)
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	4b06      	ldr	r3, [pc, #24]	; (8004afc <HAL_IncTick+0x24>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	4a04      	ldr	r2, [pc, #16]	; (8004afc <HAL_IncTick+0x24>)
 8004aea:	6013      	str	r3, [r2, #0]
}
 8004aec:	bf00      	nop
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	20000018 	.word	0x20000018
 8004afc:	20000cb4 	.word	0x20000cb4

08004b00 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b00:	b480      	push	{r7}
 8004b02:	af00      	add	r7, sp, #0
  return uwTick;  
 8004b04:	4b03      	ldr	r3, [pc, #12]	; (8004b14 <HAL_GetTick+0x14>)
 8004b06:	681b      	ldr	r3, [r3, #0]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	20000cb4 	.word	0x20000cb4

08004b18 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b20:	f7ff ffee 	bl	8004b00 <HAL_GetTick>
 8004b24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b30:	d005      	beq.n	8004b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b32:	4b09      	ldr	r3, [pc, #36]	; (8004b58 <HAL_Delay+0x40>)
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	461a      	mov	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004b3e:	bf00      	nop
 8004b40:	f7ff ffde 	bl	8004b00 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d8f7      	bhi.n	8004b40 <HAL_Delay+0x28>
  {
  }
}
 8004b50:	bf00      	nop
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	20000018 	.word	0x20000018

08004b5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b09a      	sub	sp, #104	; 0x68
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b64:	2300      	movs	r3, #0
 8004b66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d101      	bne.n	8004b7c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e1e3      	b.n	8004f44 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	f003 0310 	and.w	r3, r3, #16
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d176      	bne.n	8004c7c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d152      	bne.n	8004c3c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7ff f9d3 	bl	8003f5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d13b      	bne.n	8004c3c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f001 f861 	bl	8005c8c <ADC_Disable>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd4:	f003 0310 	and.w	r3, r3, #16
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d12f      	bne.n	8004c3c <HAL_ADC_Init+0xe0>
 8004bdc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d12b      	bne.n	8004c3c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004bec:	f023 0302 	bic.w	r3, r3, #2
 8004bf0:	f043 0202 	orr.w	r2, r3, #2
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689a      	ldr	r2, [r3, #8]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004c06:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689a      	ldr	r2, [r3, #8]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004c16:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004c18:	4b92      	ldr	r3, [pc, #584]	; (8004e64 <HAL_ADC_Init+0x308>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a92      	ldr	r2, [pc, #584]	; (8004e68 <HAL_ADC_Init+0x30c>)
 8004c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c22:	0c9a      	lsrs	r2, r3, #18
 8004c24:	4613      	mov	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4413      	add	r3, r2
 8004c2a:	005b      	lsls	r3, r3, #1
 8004c2c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004c2e:	e002      	b.n	8004c36 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	3b01      	subs	r3, #1
 8004c34:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1f9      	bne.n	8004c30 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d007      	beq.n	8004c5a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004c54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c58:	d110      	bne.n	8004c7c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5e:	f023 0312 	bic.w	r3, r3, #18
 8004c62:	f043 0210 	orr.w	r2, r3, #16
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6e:	f043 0201 	orr.w	r2, r3, #1
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c80:	f003 0310 	and.w	r3, r3, #16
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f040 8150 	bne.w	8004f2a <HAL_ADC_Init+0x3ce>
 8004c8a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f040 814b 	bne.w	8004f2a <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f040 8143 	bne.w	8004f2a <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004cac:	f043 0202 	orr.w	r2, r3, #2
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cbc:	d004      	beq.n	8004cc8 <HAL_ADC_Init+0x16c>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a6a      	ldr	r2, [pc, #424]	; (8004e6c <HAL_ADC_Init+0x310>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d101      	bne.n	8004ccc <HAL_ADC_Init+0x170>
 8004cc8:	4b69      	ldr	r3, [pc, #420]	; (8004e70 <HAL_ADC_Init+0x314>)
 8004cca:	e000      	b.n	8004cce <HAL_ADC_Init+0x172>
 8004ccc:	4b69      	ldr	r3, [pc, #420]	; (8004e74 <HAL_ADC_Init+0x318>)
 8004cce:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cd8:	d102      	bne.n	8004ce0 <HAL_ADC_Init+0x184>
 8004cda:	4b64      	ldr	r3, [pc, #400]	; (8004e6c <HAL_ADC_Init+0x310>)
 8004cdc:	60fb      	str	r3, [r7, #12]
 8004cde:	e01a      	b.n	8004d16 <HAL_ADC_Init+0x1ba>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a61      	ldr	r2, [pc, #388]	; (8004e6c <HAL_ADC_Init+0x310>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d103      	bne.n	8004cf2 <HAL_ADC_Init+0x196>
 8004cea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004cee:	60fb      	str	r3, [r7, #12]
 8004cf0:	e011      	b.n	8004d16 <HAL_ADC_Init+0x1ba>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a60      	ldr	r2, [pc, #384]	; (8004e78 <HAL_ADC_Init+0x31c>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d102      	bne.n	8004d02 <HAL_ADC_Init+0x1a6>
 8004cfc:	4b5f      	ldr	r3, [pc, #380]	; (8004e7c <HAL_ADC_Init+0x320>)
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	e009      	b.n	8004d16 <HAL_ADC_Init+0x1ba>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a5d      	ldr	r2, [pc, #372]	; (8004e7c <HAL_ADC_Init+0x320>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d102      	bne.n	8004d12 <HAL_ADC_Init+0x1b6>
 8004d0c:	4b5a      	ldr	r3, [pc, #360]	; (8004e78 <HAL_ADC_Init+0x31c>)
 8004d0e:	60fb      	str	r3, [r7, #12]
 8004d10:	e001      	b.n	8004d16 <HAL_ADC_Init+0x1ba>
 8004d12:	2300      	movs	r3, #0
 8004d14:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f003 0303 	and.w	r3, r3, #3
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d108      	bne.n	8004d36 <HAL_ADC_Init+0x1da>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d101      	bne.n	8004d36 <HAL_ADC_Init+0x1da>
 8004d32:	2301      	movs	r3, #1
 8004d34:	e000      	b.n	8004d38 <HAL_ADC_Init+0x1dc>
 8004d36:	2300      	movs	r3, #0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d11c      	bne.n	8004d76 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004d3c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d010      	beq.n	8004d64 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f003 0303 	and.w	r3, r3, #3
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d107      	bne.n	8004d5e <HAL_ADC_Init+0x202>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d101      	bne.n	8004d5e <HAL_ADC_Init+0x202>
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e000      	b.n	8004d60 <HAL_ADC_Init+0x204>
 8004d5e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d108      	bne.n	8004d76 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8004d64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	431a      	orrs	r2, r3
 8004d72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d74:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	7e5b      	ldrb	r3, [r3, #25]
 8004d7a:	035b      	lsls	r3, r3, #13
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d80:	2a01      	cmp	r2, #1
 8004d82:	d002      	beq.n	8004d8a <HAL_ADC_Init+0x22e>
 8004d84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d88:	e000      	b.n	8004d8c <HAL_ADC_Init+0x230>
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	431a      	orrs	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	431a      	orrs	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d11b      	bne.n	8004de2 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	7e5b      	ldrb	r3, [r3, #25]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d109      	bne.n	8004dc6 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	3b01      	subs	r3, #1
 8004db8:	045a      	lsls	r2, r3, #17
 8004dba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dc2:	663b      	str	r3, [r7, #96]	; 0x60
 8004dc4:	e00d      	b.n	8004de2 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004dce:	f043 0220 	orr.w	r2, r3, #32
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dda:	f043 0201 	orr.w	r2, r3, #1
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d054      	beq.n	8004e94 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a22      	ldr	r2, [pc, #136]	; (8004e78 <HAL_ADC_Init+0x31c>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d004      	beq.n	8004dfe <HAL_ADC_Init+0x2a2>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a20      	ldr	r2, [pc, #128]	; (8004e7c <HAL_ADC_Init+0x320>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d140      	bne.n	8004e80 <HAL_ADC_Init+0x324>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e02:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8004e06:	d02a      	beq.n	8004e5e <HAL_ADC_Init+0x302>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e10:	d022      	beq.n	8004e58 <HAL_ADC_Init+0x2fc>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e16:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8004e1a:	d01a      	beq.n	8004e52 <HAL_ADC_Init+0x2f6>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e20:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8004e24:	d012      	beq.n	8004e4c <HAL_ADC_Init+0x2f0>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2a:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8004e2e:	d00a      	beq.n	8004e46 <HAL_ADC_Init+0x2ea>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e34:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8004e38:	d002      	beq.n	8004e40 <HAL_ADC_Init+0x2e4>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3e:	e023      	b.n	8004e88 <HAL_ADC_Init+0x32c>
 8004e40:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004e44:	e020      	b.n	8004e88 <HAL_ADC_Init+0x32c>
 8004e46:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004e4a:	e01d      	b.n	8004e88 <HAL_ADC_Init+0x32c>
 8004e4c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8004e50:	e01a      	b.n	8004e88 <HAL_ADC_Init+0x32c>
 8004e52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e56:	e017      	b.n	8004e88 <HAL_ADC_Init+0x32c>
 8004e58:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8004e5c:	e014      	b.n	8004e88 <HAL_ADC_Init+0x32c>
 8004e5e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8004e62:	e011      	b.n	8004e88 <HAL_ADC_Init+0x32c>
 8004e64:	20000010 	.word	0x20000010
 8004e68:	431bde83 	.word	0x431bde83
 8004e6c:	50000100 	.word	0x50000100
 8004e70:	50000300 	.word	0x50000300
 8004e74:	50000700 	.word	0x50000700
 8004e78:	50000400 	.word	0x50000400
 8004e7c:	50000500 	.word	0x50000500
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e90:	4313      	orrs	r3, r2
 8004e92:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f003 030c 	and.w	r3, r3, #12
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d114      	bne.n	8004ecc <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	6812      	ldr	r2, [r2, #0]
 8004eac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eb0:	f023 0302 	bic.w	r3, r3, #2
 8004eb4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	7e1b      	ldrb	r3, [r3, #24]
 8004eba:	039a      	lsls	r2, r3, #14
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ec2:	005b      	lsls	r3, r3, #1
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68da      	ldr	r2, [r3, #12]
 8004ed2:	4b1e      	ldr	r3, [pc, #120]	; (8004f4c <HAL_ADC_Init+0x3f0>)
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	6812      	ldr	r2, [r2, #0]
 8004eda:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004edc:	430b      	orrs	r3, r1
 8004ede:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d10c      	bne.n	8004f02 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eee:	f023 010f 	bic.w	r1, r3, #15
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	1e5a      	subs	r2, r3, #1
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	631a      	str	r2, [r3, #48]	; 0x30
 8004f00:	e007      	b.n	8004f12 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 020f 	bic.w	r2, r2, #15
 8004f10:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1c:	f023 0303 	bic.w	r3, r3, #3
 8004f20:	f043 0201 	orr.w	r2, r3, #1
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	641a      	str	r2, [r3, #64]	; 0x40
 8004f28:	e00a      	b.n	8004f40 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	f023 0312 	bic.w	r3, r3, #18
 8004f32:	f043 0210 	orr.w	r2, r3, #16
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8004f40:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3768      	adds	r7, #104	; 0x68
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	fff0c007 	.word	0xfff0c007

08004f50 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 0304 	and.w	r3, r3, #4
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f040 80f9 	bne.w	800515e <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d101      	bne.n	8004f7a <HAL_ADC_Start+0x2a>
 8004f76:	2302      	movs	r3, #2
 8004f78:	e0f4      	b.n	8005164 <HAL_ADC_Start+0x214>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 fe1e 	bl	8005bc4 <ADC_Enable>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004f8c:	7bfb      	ldrb	r3, [r7, #15]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f040 80e0 	bne.w	8005154 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f98:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f9c:	f023 0301 	bic.w	r3, r3, #1
 8004fa0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004fb0:	d004      	beq.n	8004fbc <HAL_ADC_Start+0x6c>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a6d      	ldr	r2, [pc, #436]	; (800516c <HAL_ADC_Start+0x21c>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d106      	bne.n	8004fca <HAL_ADC_Start+0x7a>
 8004fbc:	4b6c      	ldr	r3, [pc, #432]	; (8005170 <HAL_ADC_Start+0x220>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f003 031f 	and.w	r3, r3, #31
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d010      	beq.n	8004fea <HAL_ADC_Start+0x9a>
 8004fc8:	e005      	b.n	8004fd6 <HAL_ADC_Start+0x86>
 8004fca:	4b6a      	ldr	r3, [pc, #424]	; (8005174 <HAL_ADC_Start+0x224>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 031f 	and.w	r3, r3, #31
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d009      	beq.n	8004fea <HAL_ADC_Start+0x9a>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004fde:	d004      	beq.n	8004fea <HAL_ADC_Start+0x9a>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a64      	ldr	r2, [pc, #400]	; (8005178 <HAL_ADC_Start+0x228>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d115      	bne.n	8005016 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d036      	beq.n	8005072 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005008:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800500c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8005014:	e02d      	b.n	8005072 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800502a:	d004      	beq.n	8005036 <HAL_ADC_Start+0xe6>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a4e      	ldr	r2, [pc, #312]	; (800516c <HAL_ADC_Start+0x21c>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d10a      	bne.n	800504c <HAL_ADC_Start+0xfc>
 8005036:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005040:	2b00      	cmp	r3, #0
 8005042:	bf14      	ite	ne
 8005044:	2301      	movne	r3, #1
 8005046:	2300      	moveq	r3, #0
 8005048:	b2db      	uxtb	r3, r3
 800504a:	e008      	b.n	800505e <HAL_ADC_Start+0x10e>
 800504c:	4b4a      	ldr	r3, [pc, #296]	; (8005178 <HAL_ADC_Start+0x228>)
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005054:	2b00      	cmp	r3, #0
 8005056:	bf14      	ite	ne
 8005058:	2301      	movne	r3, #1
 800505a:	2300      	moveq	r3, #0
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d007      	beq.n	8005072 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005066:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800506a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800507a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800507e:	d106      	bne.n	800508e <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005084:	f023 0206 	bic.w	r2, r3, #6
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	645a      	str	r2, [r3, #68]	; 0x44
 800508c:	e002      	b.n	8005094 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	221c      	movs	r2, #28
 80050a2:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050ac:	d004      	beq.n	80050b8 <HAL_ADC_Start+0x168>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a2e      	ldr	r2, [pc, #184]	; (800516c <HAL_ADC_Start+0x21c>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d106      	bne.n	80050c6 <HAL_ADC_Start+0x176>
 80050b8:	4b2d      	ldr	r3, [pc, #180]	; (8005170 <HAL_ADC_Start+0x220>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f003 031f 	and.w	r3, r3, #31
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d03e      	beq.n	8005142 <HAL_ADC_Start+0x1f2>
 80050c4:	e005      	b.n	80050d2 <HAL_ADC_Start+0x182>
 80050c6:	4b2b      	ldr	r3, [pc, #172]	; (8005174 <HAL_ADC_Start+0x224>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f003 031f 	and.w	r3, r3, #31
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d037      	beq.n	8005142 <HAL_ADC_Start+0x1f2>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050da:	d004      	beq.n	80050e6 <HAL_ADC_Start+0x196>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a22      	ldr	r2, [pc, #136]	; (800516c <HAL_ADC_Start+0x21c>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d106      	bne.n	80050f4 <HAL_ADC_Start+0x1a4>
 80050e6:	4b22      	ldr	r3, [pc, #136]	; (8005170 <HAL_ADC_Start+0x220>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 031f 	and.w	r3, r3, #31
 80050ee:	2b05      	cmp	r3, #5
 80050f0:	d027      	beq.n	8005142 <HAL_ADC_Start+0x1f2>
 80050f2:	e005      	b.n	8005100 <HAL_ADC_Start+0x1b0>
 80050f4:	4b1f      	ldr	r3, [pc, #124]	; (8005174 <HAL_ADC_Start+0x224>)
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f003 031f 	and.w	r3, r3, #31
 80050fc:	2b05      	cmp	r3, #5
 80050fe:	d020      	beq.n	8005142 <HAL_ADC_Start+0x1f2>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005108:	d004      	beq.n	8005114 <HAL_ADC_Start+0x1c4>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a17      	ldr	r2, [pc, #92]	; (800516c <HAL_ADC_Start+0x21c>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d106      	bne.n	8005122 <HAL_ADC_Start+0x1d2>
 8005114:	4b16      	ldr	r3, [pc, #88]	; (8005170 <HAL_ADC_Start+0x220>)
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f003 031f 	and.w	r3, r3, #31
 800511c:	2b09      	cmp	r3, #9
 800511e:	d010      	beq.n	8005142 <HAL_ADC_Start+0x1f2>
 8005120:	e005      	b.n	800512e <HAL_ADC_Start+0x1de>
 8005122:	4b14      	ldr	r3, [pc, #80]	; (8005174 <HAL_ADC_Start+0x224>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 031f 	and.w	r3, r3, #31
 800512a:	2b09      	cmp	r3, #9
 800512c:	d009      	beq.n	8005142 <HAL_ADC_Start+0x1f2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005136:	d004      	beq.n	8005142 <HAL_ADC_Start+0x1f2>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a0e      	ldr	r2, [pc, #56]	; (8005178 <HAL_ADC_Start+0x228>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d10f      	bne.n	8005162 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	689a      	ldr	r2, [r3, #8]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f042 0204 	orr.w	r2, r2, #4
 8005150:	609a      	str	r2, [r3, #8]
 8005152:	e006      	b.n	8005162 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800515c:	e001      	b.n	8005162 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800515e:	2302      	movs	r3, #2
 8005160:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005162:	7bfb      	ldrb	r3, [r7, #15]
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	50000100 	.word	0x50000100
 8005170:	50000300 	.word	0x50000300
 8005174:	50000700 	.word	0x50000700
 8005178:	50000400 	.word	0x50000400

0800517c <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005184:	2300      	movs	r3, #0
 8005186:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800518e:	2b01      	cmp	r3, #1
 8005190:	d101      	bne.n	8005196 <HAL_ADC_Stop+0x1a>
 8005192:	2302      	movs	r3, #2
 8005194:	e023      	b.n	80051de <HAL_ADC_Stop+0x62>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800519e:	216c      	movs	r1, #108	; 0x6c
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 fdd9 	bl	8005d58 <ADC_ConversionStop>
 80051a6:	4603      	mov	r3, r0
 80051a8:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80051aa:	7bfb      	ldrb	r3, [r7, #15]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d111      	bne.n	80051d4 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 fd6b 	bl	8005c8c <ADC_Disable>
 80051b6:	4603      	mov	r3, r0
 80051b8:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80051ba:	7bfb      	ldrb	r3, [r7, #15]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d109      	bne.n	80051d4 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80051c8:	f023 0301 	bic.w	r3, r3, #1
 80051cc:	f043 0201 	orr.w	r2, r3, #1
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80051dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
	...

080051e8 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80051f2:	2300      	movs	r3, #0
 80051f4:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	2b08      	cmp	r3, #8
 80051fc:	d102      	bne.n	8005204 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80051fe:	2308      	movs	r3, #8
 8005200:	617b      	str	r3, [r7, #20]
 8005202:	e03a      	b.n	800527a <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800520c:	d004      	beq.n	8005218 <HAL_ADC_PollForConversion+0x30>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a72      	ldr	r2, [pc, #456]	; (80053dc <HAL_ADC_PollForConversion+0x1f4>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d101      	bne.n	800521c <HAL_ADC_PollForConversion+0x34>
 8005218:	4b71      	ldr	r3, [pc, #452]	; (80053e0 <HAL_ADC_PollForConversion+0x1f8>)
 800521a:	e000      	b.n	800521e <HAL_ADC_PollForConversion+0x36>
 800521c:	4b71      	ldr	r3, [pc, #452]	; (80053e4 <HAL_ADC_PollForConversion+0x1fc>)
 800521e:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f003 031f 	and.w	r3, r3, #31
 8005228:	2b00      	cmp	r3, #0
 800522a:	d112      	bne.n	8005252 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b01      	cmp	r3, #1
 8005238:	d11d      	bne.n	8005276 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	f043 0220 	orr.w	r2, r3, #32
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e0bf      	b.n	80053d2 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00b      	beq.n	8005276 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005262:	f043 0220 	orr.w	r2, r3, #32
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e0ad      	b.n	80053d2 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8005276:	230c      	movs	r3, #12
 8005278:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005282:	d004      	beq.n	800528e <HAL_ADC_PollForConversion+0xa6>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a54      	ldr	r2, [pc, #336]	; (80053dc <HAL_ADC_PollForConversion+0x1f4>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d106      	bne.n	800529c <HAL_ADC_PollForConversion+0xb4>
 800528e:	4b54      	ldr	r3, [pc, #336]	; (80053e0 <HAL_ADC_PollForConversion+0x1f8>)
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f003 031f 	and.w	r3, r3, #31
 8005296:	2b00      	cmp	r3, #0
 8005298:	d010      	beq.n	80052bc <HAL_ADC_PollForConversion+0xd4>
 800529a:	e005      	b.n	80052a8 <HAL_ADC_PollForConversion+0xc0>
 800529c:	4b51      	ldr	r3, [pc, #324]	; (80053e4 <HAL_ADC_PollForConversion+0x1fc>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f003 031f 	and.w	r3, r3, #31
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d009      	beq.n	80052bc <HAL_ADC_PollForConversion+0xd4>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052b0:	d004      	beq.n	80052bc <HAL_ADC_PollForConversion+0xd4>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a4c      	ldr	r2, [pc, #304]	; (80053e8 <HAL_ADC_PollForConversion+0x200>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d104      	bne.n	80052c6 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	613b      	str	r3, [r7, #16]
 80052c4:	e00f      	b.n	80052e6 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052ce:	d004      	beq.n	80052da <HAL_ADC_PollForConversion+0xf2>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a41      	ldr	r2, [pc, #260]	; (80053dc <HAL_ADC_PollForConversion+0x1f4>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d102      	bne.n	80052e0 <HAL_ADC_PollForConversion+0xf8>
 80052da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80052de:	e000      	b.n	80052e2 <HAL_ADC_PollForConversion+0xfa>
 80052e0:	4b41      	ldr	r3, [pc, #260]	; (80053e8 <HAL_ADC_PollForConversion+0x200>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80052e6:	f7ff fc0b 	bl	8004b00 <HAL_GetTick>
 80052ea:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80052ec:	e021      	b.n	8005332 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f4:	d01d      	beq.n	8005332 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d007      	beq.n	800530c <HAL_ADC_PollForConversion+0x124>
 80052fc:	f7ff fc00 	bl	8004b00 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	429a      	cmp	r2, r3
 800530a:	d212      	bcs.n	8005332 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	4013      	ands	r3, r2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10b      	bne.n	8005332 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531e:	f043 0204 	orr.w	r2, r3, #4
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e04f      	b.n	80053d2 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	4013      	ands	r3, r2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d0d6      	beq.n	80052ee <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005344:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005356:	2b00      	cmp	r3, #0
 8005358:	d131      	bne.n	80053be <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8005360:	2b00      	cmp	r3, #0
 8005362:	d12c      	bne.n	80053be <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0308 	and.w	r3, r3, #8
 800536e:	2b08      	cmp	r3, #8
 8005370:	d125      	bne.n	80053be <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f003 0304 	and.w	r3, r3, #4
 800537c:	2b00      	cmp	r3, #0
 800537e:	d112      	bne.n	80053a6 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005384:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005390:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d112      	bne.n	80053be <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539c:	f043 0201 	orr.w	r2, r3, #1
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	641a      	str	r2, [r3, #64]	; 0x40
 80053a4:	e00b      	b.n	80053be <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	f043 0220 	orr.w	r2, r3, #32
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b6:	f043 0201 	orr.w	r2, r3, #1
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d103      	bne.n	80053d0 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3718      	adds	r7, #24
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	50000100 	.word	0x50000100
 80053e0:	50000300 	.word	0x50000300
 80053e4:	50000700 	.word	0x50000700
 80053e8:	50000400 	.word	0x50000400

080053ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
	...

08005408 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005408:	b480      	push	{r7}
 800540a:	b09b      	sub	sp, #108	; 0x6c
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005412:	2300      	movs	r3, #0
 8005414:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8005418:	2300      	movs	r3, #0
 800541a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005422:	2b01      	cmp	r3, #1
 8005424:	d101      	bne.n	800542a <HAL_ADC_ConfigChannel+0x22>
 8005426:	2302      	movs	r3, #2
 8005428:	e2cb      	b.n	80059c2 <HAL_ADC_ConfigChannel+0x5ba>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f003 0304 	and.w	r3, r3, #4
 800543c:	2b00      	cmp	r3, #0
 800543e:	f040 82af 	bne.w	80059a0 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	2b04      	cmp	r3, #4
 8005448:	d81c      	bhi.n	8005484 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	685a      	ldr	r2, [r3, #4]
 8005454:	4613      	mov	r3, r2
 8005456:	005b      	lsls	r3, r3, #1
 8005458:	4413      	add	r3, r2
 800545a:	005b      	lsls	r3, r3, #1
 800545c:	461a      	mov	r2, r3
 800545e:	231f      	movs	r3, #31
 8005460:	4093      	lsls	r3, r2
 8005462:	43db      	mvns	r3, r3
 8005464:	4019      	ands	r1, r3
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	6818      	ldr	r0, [r3, #0]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685a      	ldr	r2, [r3, #4]
 800546e:	4613      	mov	r3, r2
 8005470:	005b      	lsls	r3, r3, #1
 8005472:	4413      	add	r3, r2
 8005474:	005b      	lsls	r3, r3, #1
 8005476:	fa00 f203 	lsl.w	r2, r0, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	631a      	str	r2, [r3, #48]	; 0x30
 8005482:	e063      	b.n	800554c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	2b09      	cmp	r3, #9
 800548a:	d81e      	bhi.n	80054ca <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	4613      	mov	r3, r2
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	4413      	add	r3, r2
 800549c:	005b      	lsls	r3, r3, #1
 800549e:	3b1e      	subs	r3, #30
 80054a0:	221f      	movs	r2, #31
 80054a2:	fa02 f303 	lsl.w	r3, r2, r3
 80054a6:	43db      	mvns	r3, r3
 80054a8:	4019      	ands	r1, r3
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	6818      	ldr	r0, [r3, #0]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	4613      	mov	r3, r2
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	4413      	add	r3, r2
 80054b8:	005b      	lsls	r3, r3, #1
 80054ba:	3b1e      	subs	r3, #30
 80054bc:	fa00 f203 	lsl.w	r2, r0, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	635a      	str	r2, [r3, #52]	; 0x34
 80054c8:	e040      	b.n	800554c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	2b0e      	cmp	r3, #14
 80054d0:	d81e      	bhi.n	8005510 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	4613      	mov	r3, r2
 80054de:	005b      	lsls	r3, r3, #1
 80054e0:	4413      	add	r3, r2
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	3b3c      	subs	r3, #60	; 0x3c
 80054e6:	221f      	movs	r2, #31
 80054e8:	fa02 f303 	lsl.w	r3, r2, r3
 80054ec:	43db      	mvns	r3, r3
 80054ee:	4019      	ands	r1, r3
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	6818      	ldr	r0, [r3, #0]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	4613      	mov	r3, r2
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	4413      	add	r3, r2
 80054fe:	005b      	lsls	r3, r3, #1
 8005500:	3b3c      	subs	r3, #60	; 0x3c
 8005502:	fa00 f203 	lsl.w	r2, r0, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	430a      	orrs	r2, r1
 800550c:	639a      	str	r2, [r3, #56]	; 0x38
 800550e:	e01d      	b.n	800554c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	4613      	mov	r3, r2
 800551c:	005b      	lsls	r3, r3, #1
 800551e:	4413      	add	r3, r2
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	3b5a      	subs	r3, #90	; 0x5a
 8005524:	221f      	movs	r2, #31
 8005526:	fa02 f303 	lsl.w	r3, r2, r3
 800552a:	43db      	mvns	r3, r3
 800552c:	4019      	ands	r1, r3
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	6818      	ldr	r0, [r3, #0]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	4613      	mov	r3, r2
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	4413      	add	r3, r2
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	3b5a      	subs	r3, #90	; 0x5a
 8005540:	fa00 f203 	lsl.w	r2, r0, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	430a      	orrs	r2, r1
 800554a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f003 030c 	and.w	r3, r3, #12
 8005556:	2b00      	cmp	r3, #0
 8005558:	f040 80e5 	bne.w	8005726 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2b09      	cmp	r3, #9
 8005562:	d91c      	bls.n	800559e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6999      	ldr	r1, [r3, #24]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	4613      	mov	r3, r2
 8005570:	005b      	lsls	r3, r3, #1
 8005572:	4413      	add	r3, r2
 8005574:	3b1e      	subs	r3, #30
 8005576:	2207      	movs	r2, #7
 8005578:	fa02 f303 	lsl.w	r3, r2, r3
 800557c:	43db      	mvns	r3, r3
 800557e:	4019      	ands	r1, r3
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	6898      	ldr	r0, [r3, #8]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	4613      	mov	r3, r2
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	4413      	add	r3, r2
 800558e:	3b1e      	subs	r3, #30
 8005590:	fa00 f203 	lsl.w	r2, r0, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	619a      	str	r2, [r3, #24]
 800559c:	e019      	b.n	80055d2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	6959      	ldr	r1, [r3, #20]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	4613      	mov	r3, r2
 80055aa:	005b      	lsls	r3, r3, #1
 80055ac:	4413      	add	r3, r2
 80055ae:	2207      	movs	r2, #7
 80055b0:	fa02 f303 	lsl.w	r3, r2, r3
 80055b4:	43db      	mvns	r3, r3
 80055b6:	4019      	ands	r1, r3
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	6898      	ldr	r0, [r3, #8]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	4613      	mov	r3, r2
 80055c2:	005b      	lsls	r3, r3, #1
 80055c4:	4413      	add	r3, r2
 80055c6:	fa00 f203 	lsl.w	r2, r0, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	430a      	orrs	r2, r1
 80055d0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	695a      	ldr	r2, [r3, #20]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	08db      	lsrs	r3, r3, #3
 80055de:	f003 0303 	and.w	r3, r3, #3
 80055e2:	005b      	lsls	r3, r3, #1
 80055e4:	fa02 f303 	lsl.w	r3, r2, r3
 80055e8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	3b01      	subs	r3, #1
 80055f0:	2b03      	cmp	r3, #3
 80055f2:	d84f      	bhi.n	8005694 <HAL_ADC_ConfigChannel+0x28c>
 80055f4:	a201      	add	r2, pc, #4	; (adr r2, 80055fc <HAL_ADC_ConfigChannel+0x1f4>)
 80055f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fa:	bf00      	nop
 80055fc:	0800560d 	.word	0x0800560d
 8005600:	0800562f 	.word	0x0800562f
 8005604:	08005651 	.word	0x08005651
 8005608:	08005673 	.word	0x08005673
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005612:	4b9f      	ldr	r3, [pc, #636]	; (8005890 <HAL_ADC_ConfigChannel+0x488>)
 8005614:	4013      	ands	r3, r2
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	6812      	ldr	r2, [r2, #0]
 800561a:	0691      	lsls	r1, r2, #26
 800561c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800561e:	430a      	orrs	r2, r1
 8005620:	431a      	orrs	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800562a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800562c:	e07e      	b.n	800572c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005634:	4b96      	ldr	r3, [pc, #600]	; (8005890 <HAL_ADC_ConfigChannel+0x488>)
 8005636:	4013      	ands	r3, r2
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	6812      	ldr	r2, [r2, #0]
 800563c:	0691      	lsls	r1, r2, #26
 800563e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005640:	430a      	orrs	r2, r1
 8005642:	431a      	orrs	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800564c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800564e:	e06d      	b.n	800572c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005656:	4b8e      	ldr	r3, [pc, #568]	; (8005890 <HAL_ADC_ConfigChannel+0x488>)
 8005658:	4013      	ands	r3, r2
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	6812      	ldr	r2, [r2, #0]
 800565e:	0691      	lsls	r1, r2, #26
 8005660:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005662:	430a      	orrs	r2, r1
 8005664:	431a      	orrs	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800566e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005670:	e05c      	b.n	800572c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005678:	4b85      	ldr	r3, [pc, #532]	; (8005890 <HAL_ADC_ConfigChannel+0x488>)
 800567a:	4013      	ands	r3, r2
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	6812      	ldr	r2, [r2, #0]
 8005680:	0691      	lsls	r1, r2, #26
 8005682:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005684:	430a      	orrs	r2, r1
 8005686:	431a      	orrs	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005690:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005692:	e04b      	b.n	800572c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800569a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	069b      	lsls	r3, r3, #26
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d107      	bne.n	80056b8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80056b6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	069b      	lsls	r3, r3, #26
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d107      	bne.n	80056dc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80056da:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	069b      	lsls	r3, r3, #26
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d107      	bne.n	8005700 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80056fe:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005706:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	069b      	lsls	r3, r3, #26
 8005710:	429a      	cmp	r2, r3
 8005712:	d10a      	bne.n	800572a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005722:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8005724:	e001      	b.n	800572a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8005726:	bf00      	nop
 8005728:	e000      	b.n	800572c <HAL_ADC_ConfigChannel+0x324>
      break;
 800572a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f003 0303 	and.w	r3, r3, #3
 8005736:	2b01      	cmp	r3, #1
 8005738:	d108      	bne.n	800574c <HAL_ADC_ConfigChannel+0x344>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b01      	cmp	r3, #1
 8005746:	d101      	bne.n	800574c <HAL_ADC_ConfigChannel+0x344>
 8005748:	2301      	movs	r3, #1
 800574a:	e000      	b.n	800574e <HAL_ADC_ConfigChannel+0x346>
 800574c:	2300      	movs	r3, #0
 800574e:	2b00      	cmp	r3, #0
 8005750:	f040 8131 	bne.w	80059b6 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d00f      	beq.n	800577c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2201      	movs	r2, #1
 800576a:	fa02 f303 	lsl.w	r3, r2, r3
 800576e:	43da      	mvns	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	400a      	ands	r2, r1
 8005776:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800577a:	e049      	b.n	8005810 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2201      	movs	r2, #1
 800578a:	409a      	lsls	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	430a      	orrs	r2, r1
 8005792:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2b09      	cmp	r3, #9
 800579c:	d91c      	bls.n	80057d8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6999      	ldr	r1, [r3, #24]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	4613      	mov	r3, r2
 80057aa:	005b      	lsls	r3, r3, #1
 80057ac:	4413      	add	r3, r2
 80057ae:	3b1b      	subs	r3, #27
 80057b0:	2207      	movs	r2, #7
 80057b2:	fa02 f303 	lsl.w	r3, r2, r3
 80057b6:	43db      	mvns	r3, r3
 80057b8:	4019      	ands	r1, r3
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	6898      	ldr	r0, [r3, #8]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	4613      	mov	r3, r2
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	4413      	add	r3, r2
 80057c8:	3b1b      	subs	r3, #27
 80057ca:	fa00 f203 	lsl.w	r2, r0, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	619a      	str	r2, [r3, #24]
 80057d6:	e01b      	b.n	8005810 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6959      	ldr	r1, [r3, #20]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	1c5a      	adds	r2, r3, #1
 80057e4:	4613      	mov	r3, r2
 80057e6:	005b      	lsls	r3, r3, #1
 80057e8:	4413      	add	r3, r2
 80057ea:	2207      	movs	r2, #7
 80057ec:	fa02 f303 	lsl.w	r3, r2, r3
 80057f0:	43db      	mvns	r3, r3
 80057f2:	4019      	ands	r1, r3
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	6898      	ldr	r0, [r3, #8]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	1c5a      	adds	r2, r3, #1
 80057fe:	4613      	mov	r3, r2
 8005800:	005b      	lsls	r3, r3, #1
 8005802:	4413      	add	r3, r2
 8005804:	fa00 f203 	lsl.w	r2, r0, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	430a      	orrs	r2, r1
 800580e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005818:	d004      	beq.n	8005824 <HAL_ADC_ConfigChannel+0x41c>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a1d      	ldr	r2, [pc, #116]	; (8005894 <HAL_ADC_ConfigChannel+0x48c>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d101      	bne.n	8005828 <HAL_ADC_ConfigChannel+0x420>
 8005824:	4b1c      	ldr	r3, [pc, #112]	; (8005898 <HAL_ADC_ConfigChannel+0x490>)
 8005826:	e000      	b.n	800582a <HAL_ADC_ConfigChannel+0x422>
 8005828:	4b1c      	ldr	r3, [pc, #112]	; (800589c <HAL_ADC_ConfigChannel+0x494>)
 800582a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b10      	cmp	r3, #16
 8005832:	d105      	bne.n	8005840 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005834:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800583c:	2b00      	cmp	r3, #0
 800583e:	d015      	beq.n	800586c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005844:	2b11      	cmp	r3, #17
 8005846:	d105      	bne.n	8005854 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005848:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00b      	beq.n	800586c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005858:	2b12      	cmp	r3, #18
 800585a:	f040 80ac 	bne.w	80059b6 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800585e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005866:	2b00      	cmp	r3, #0
 8005868:	f040 80a5 	bne.w	80059b6 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005874:	d102      	bne.n	800587c <HAL_ADC_ConfigChannel+0x474>
 8005876:	4b07      	ldr	r3, [pc, #28]	; (8005894 <HAL_ADC_ConfigChannel+0x48c>)
 8005878:	60fb      	str	r3, [r7, #12]
 800587a:	e023      	b.n	80058c4 <HAL_ADC_ConfigChannel+0x4bc>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a04      	ldr	r2, [pc, #16]	; (8005894 <HAL_ADC_ConfigChannel+0x48c>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d10c      	bne.n	80058a0 <HAL_ADC_ConfigChannel+0x498>
 8005886:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800588a:	60fb      	str	r3, [r7, #12]
 800588c:	e01a      	b.n	80058c4 <HAL_ADC_ConfigChannel+0x4bc>
 800588e:	bf00      	nop
 8005890:	83fff000 	.word	0x83fff000
 8005894:	50000100 	.word	0x50000100
 8005898:	50000300 	.word	0x50000300
 800589c:	50000700 	.word	0x50000700
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a4a      	ldr	r2, [pc, #296]	; (80059d0 <HAL_ADC_ConfigChannel+0x5c8>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d102      	bne.n	80058b0 <HAL_ADC_ConfigChannel+0x4a8>
 80058aa:	4b4a      	ldr	r3, [pc, #296]	; (80059d4 <HAL_ADC_ConfigChannel+0x5cc>)
 80058ac:	60fb      	str	r3, [r7, #12]
 80058ae:	e009      	b.n	80058c4 <HAL_ADC_ConfigChannel+0x4bc>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a47      	ldr	r2, [pc, #284]	; (80059d4 <HAL_ADC_ConfigChannel+0x5cc>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d102      	bne.n	80058c0 <HAL_ADC_ConfigChannel+0x4b8>
 80058ba:	4b45      	ldr	r3, [pc, #276]	; (80059d0 <HAL_ADC_ConfigChannel+0x5c8>)
 80058bc:	60fb      	str	r3, [r7, #12]
 80058be:	e001      	b.n	80058c4 <HAL_ADC_ConfigChannel+0x4bc>
 80058c0:	2300      	movs	r3, #0
 80058c2:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f003 0303 	and.w	r3, r3, #3
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d108      	bne.n	80058e4 <HAL_ADC_ConfigChannel+0x4dc>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d101      	bne.n	80058e4 <HAL_ADC_ConfigChannel+0x4dc>
 80058e0:	2301      	movs	r3, #1
 80058e2:	e000      	b.n	80058e6 <HAL_ADC_ConfigChannel+0x4de>
 80058e4:	2300      	movs	r3, #0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d150      	bne.n	800598c <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80058ea:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d010      	beq.n	8005912 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f003 0303 	and.w	r3, r3, #3
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d107      	bne.n	800590c <HAL_ADC_ConfigChannel+0x504>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	2b01      	cmp	r3, #1
 8005906:	d101      	bne.n	800590c <HAL_ADC_ConfigChannel+0x504>
 8005908:	2301      	movs	r3, #1
 800590a:	e000      	b.n	800590e <HAL_ADC_ConfigChannel+0x506>
 800590c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800590e:	2b00      	cmp	r3, #0
 8005910:	d13c      	bne.n	800598c <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b10      	cmp	r3, #16
 8005918:	d11d      	bne.n	8005956 <HAL_ADC_ConfigChannel+0x54e>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005922:	d118      	bne.n	8005956 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800592c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800592e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005930:	4b29      	ldr	r3, [pc, #164]	; (80059d8 <HAL_ADC_ConfigChannel+0x5d0>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a29      	ldr	r2, [pc, #164]	; (80059dc <HAL_ADC_ConfigChannel+0x5d4>)
 8005936:	fba2 2303 	umull	r2, r3, r2, r3
 800593a:	0c9a      	lsrs	r2, r3, #18
 800593c:	4613      	mov	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	005b      	lsls	r3, r3, #1
 8005944:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005946:	e002      	b.n	800594e <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	3b01      	subs	r3, #1
 800594c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1f9      	bne.n	8005948 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005954:	e02e      	b.n	80059b4 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2b11      	cmp	r3, #17
 800595c:	d10b      	bne.n	8005976 <HAL_ADC_ConfigChannel+0x56e>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005966:	d106      	bne.n	8005976 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8005968:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005970:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005972:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005974:	e01e      	b.n	80059b4 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2b12      	cmp	r3, #18
 800597c:	d11a      	bne.n	80059b4 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800597e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005988:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800598a:	e013      	b.n	80059b4 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005990:	f043 0220 	orr.w	r2, r3, #32
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800599e:	e00a      	b.n	80059b6 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a4:	f043 0220 	orr.w	r2, r3, #32
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80059b2:	e000      	b.n	80059b6 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80059b4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80059be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	376c      	adds	r7, #108	; 0x6c
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	50000400 	.word	0x50000400
 80059d4:	50000500 	.word	0x50000500
 80059d8:	20000010 	.word	0x20000010
 80059dc:	431bde83 	.word	0x431bde83

080059e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b099      	sub	sp, #100	; 0x64
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059ea:	2300      	movs	r3, #0
 80059ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059f8:	d102      	bne.n	8005a00 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80059fa:	4b6d      	ldr	r3, [pc, #436]	; (8005bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80059fc:	60bb      	str	r3, [r7, #8]
 80059fe:	e01a      	b.n	8005a36 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a6a      	ldr	r2, [pc, #424]	; (8005bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d103      	bne.n	8005a12 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8005a0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005a0e:	60bb      	str	r3, [r7, #8]
 8005a10:	e011      	b.n	8005a36 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a67      	ldr	r2, [pc, #412]	; (8005bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d102      	bne.n	8005a22 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005a1c:	4b66      	ldr	r3, [pc, #408]	; (8005bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8005a1e:	60bb      	str	r3, [r7, #8]
 8005a20:	e009      	b.n	8005a36 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a64      	ldr	r2, [pc, #400]	; (8005bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d102      	bne.n	8005a32 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005a2c:	4b61      	ldr	r3, [pc, #388]	; (8005bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8005a2e:	60bb      	str	r3, [r7, #8]
 8005a30:	e001      	b.n	8005a36 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005a32:	2300      	movs	r3, #0
 8005a34:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d101      	bne.n	8005a40 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e0b0      	b.n	8005ba2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d101      	bne.n	8005a4e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	e0a9      	b.n	8005ba2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f003 0304 	and.w	r3, r3, #4
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f040 808d 	bne.w	8005b80 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f003 0304 	and.w	r3, r3, #4
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f040 8086 	bne.w	8005b80 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a7c:	d004      	beq.n	8005a88 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a4b      	ldr	r2, [pc, #300]	; (8005bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d101      	bne.n	8005a8c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005a88:	4b4c      	ldr	r3, [pc, #304]	; (8005bbc <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8005a8a:	e000      	b.n	8005a8e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005a8c:	4b4c      	ldr	r3, [pc, #304]	; (8005bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8005a8e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d040      	beq.n	8005b1a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005a98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	6859      	ldr	r1, [r3, #4]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005aaa:	035b      	lsls	r3, r3, #13
 8005aac:	430b      	orrs	r3, r1
 8005aae:	431a      	orrs	r2, r3
 8005ab0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ab2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f003 0303 	and.w	r3, r3, #3
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d108      	bne.n	8005ad4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d101      	bne.n	8005ad4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e000      	b.n	8005ad6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d15c      	bne.n	8005b94 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f003 0303 	and.w	r3, r3, #3
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d107      	bne.n	8005af6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d101      	bne.n	8005af6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8005af2:	2301      	movs	r3, #1
 8005af4:	e000      	b.n	8005af8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8005af6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d14b      	bne.n	8005b94 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005afc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005b04:	f023 030f 	bic.w	r3, r3, #15
 8005b08:	683a      	ldr	r2, [r7, #0]
 8005b0a:	6811      	ldr	r1, [r2, #0]
 8005b0c:	683a      	ldr	r2, [r7, #0]
 8005b0e:	6892      	ldr	r2, [r2, #8]
 8005b10:	430a      	orrs	r2, r1
 8005b12:	431a      	orrs	r2, r3
 8005b14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b16:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005b18:	e03c      	b.n	8005b94 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005b1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b24:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f003 0303 	and.w	r3, r3, #3
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d108      	bne.n	8005b46 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d101      	bne.n	8005b46 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8005b42:	2301      	movs	r3, #1
 8005b44:	e000      	b.n	8005b48 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005b46:	2300      	movs	r3, #0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d123      	bne.n	8005b94 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f003 0303 	and.w	r3, r3, #3
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d107      	bne.n	8005b68 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0301 	and.w	r3, r3, #1
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d101      	bne.n	8005b68 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8005b64:	2301      	movs	r3, #1
 8005b66:	e000      	b.n	8005b6a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8005b68:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d112      	bne.n	8005b94 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8005b6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005b76:	f023 030f 	bic.w	r3, r3, #15
 8005b7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b7c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005b7e:	e009      	b.n	8005b94 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b84:	f043 0220 	orr.w	r2, r3, #32
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005b92:	e000      	b.n	8005b96 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005b94:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005b9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3764      	adds	r7, #100	; 0x64
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	50000100 	.word	0x50000100
 8005bb4:	50000400 	.word	0x50000400
 8005bb8:	50000500 	.word	0x50000500
 8005bbc:	50000300 	.word	0x50000300
 8005bc0:	50000700 	.word	0x50000700

08005bc4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f003 0303 	and.w	r3, r3, #3
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d108      	bne.n	8005bf0 <ADC_Enable+0x2c>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0301 	and.w	r3, r3, #1
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d101      	bne.n	8005bf0 <ADC_Enable+0x2c>
 8005bec:	2301      	movs	r3, #1
 8005bee:	e000      	b.n	8005bf2 <ADC_Enable+0x2e>
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d143      	bne.n	8005c7e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	689a      	ldr	r2, [r3, #8]
 8005bfc:	4b22      	ldr	r3, [pc, #136]	; (8005c88 <ADC_Enable+0xc4>)
 8005bfe:	4013      	ands	r3, r2
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00d      	beq.n	8005c20 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c08:	f043 0210 	orr.w	r2, r3, #16
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c14:	f043 0201 	orr.w	r2, r3, #1
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e02f      	b.n	8005c80 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	689a      	ldr	r2, [r3, #8]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f042 0201 	orr.w	r2, r2, #1
 8005c2e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8005c30:	f7fe ff66 	bl	8004b00 <HAL_GetTick>
 8005c34:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005c36:	e01b      	b.n	8005c70 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005c38:	f7fe ff62 	bl	8004b00 <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d914      	bls.n	8005c70 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0301 	and.w	r3, r3, #1
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d00d      	beq.n	8005c70 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c58:	f043 0210 	orr.w	r2, r3, #16
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c64:	f043 0201 	orr.w	r2, r3, #1
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e007      	b.n	8005c80 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d1dc      	bne.n	8005c38 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	8000003f 	.word	0x8000003f

08005c8c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c94:	2300      	movs	r3, #0
 8005c96:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f003 0303 	and.w	r3, r3, #3
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d108      	bne.n	8005cb8 <ADC_Disable+0x2c>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d101      	bne.n	8005cb8 <ADC_Disable+0x2c>
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e000      	b.n	8005cba <ADC_Disable+0x2e>
 8005cb8:	2300      	movs	r3, #0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d047      	beq.n	8005d4e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f003 030d 	and.w	r3, r3, #13
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d10f      	bne.n	8005cec <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689a      	ldr	r2, [r3, #8]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f042 0202 	orr.w	r2, r2, #2
 8005cda:	609a      	str	r2, [r3, #8]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2203      	movs	r2, #3
 8005ce2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8005ce4:	f7fe ff0c 	bl	8004b00 <HAL_GetTick>
 8005ce8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005cea:	e029      	b.n	8005d40 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf0:	f043 0210 	orr.w	r2, r3, #16
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cfc:	f043 0201 	orr.w	r2, r3, #1
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e023      	b.n	8005d50 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005d08:	f7fe fefa 	bl	8004b00 <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d914      	bls.n	8005d40 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d10d      	bne.n	8005d40 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d28:	f043 0210 	orr.w	r2, r3, #16
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d34:	f043 0201 	orr.w	r2, r3, #1
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e007      	b.n	8005d50 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d0dc      	beq.n	8005d08 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8005d62:	2300      	movs	r3, #0
 8005d64:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8005d66:	2300      	movs	r3, #0
 8005d68:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f003 030c 	and.w	r3, r3, #12
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f000 809a 	beq.w	8005eb2 <ADC_ConversionStop+0x15a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d8c:	d12a      	bne.n	8005de4 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d126      	bne.n	8005de4 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d122      	bne.n	8005de4 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8005d9e:	230c      	movs	r3, #12
 8005da0:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8005da2:	e014      	b.n	8005dce <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	4a45      	ldr	r2, [pc, #276]	; (8005ebc <ADC_ConversionStop+0x164>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d90d      	bls.n	8005dc8 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db0:	f043 0210 	orr.w	r2, r3, #16
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dbc:	f043 0201 	orr.w	r2, r3, #1
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e075      	b.n	8005eb4 <ADC_ConversionStop+0x15c>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd8:	2b40      	cmp	r3, #64	; 0x40
 8005dda:	d1e3      	bne.n	8005da4 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2240      	movs	r2, #64	; 0x40
 8005de2:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	2b60      	cmp	r3, #96	; 0x60
 8005de8:	d015      	beq.n	8005e16 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	f003 0304 	and.w	r3, r3, #4
 8005df4:	2b04      	cmp	r3, #4
 8005df6:	d10e      	bne.n	8005e16 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d107      	bne.n	8005e16 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689a      	ldr	r2, [r3, #8]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f042 0210 	orr.w	r2, r2, #16
 8005e14:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b0c      	cmp	r3, #12
 8005e1a:	d015      	beq.n	8005e48 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f003 0308 	and.w	r3, r3, #8
 8005e26:	2b08      	cmp	r3, #8
 8005e28:	d10e      	bne.n	8005e48 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d107      	bne.n	8005e48 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689a      	ldr	r2, [r3, #8]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f042 0220 	orr.w	r2, r2, #32
 8005e46:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	2b60      	cmp	r3, #96	; 0x60
 8005e4c:	d004      	beq.n	8005e58 <ADC_ConversionStop+0x100>
 8005e4e:	2b6c      	cmp	r3, #108	; 0x6c
 8005e50:	d105      	bne.n	8005e5e <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005e52:	230c      	movs	r3, #12
 8005e54:	617b      	str	r3, [r7, #20]
        break;
 8005e56:	e005      	b.n	8005e64 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005e58:	2308      	movs	r3, #8
 8005e5a:	617b      	str	r3, [r7, #20]
        break;
 8005e5c:	e002      	b.n	8005e64 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005e5e:	2304      	movs	r3, #4
 8005e60:	617b      	str	r3, [r7, #20]
        break;
 8005e62:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005e64:	f7fe fe4c 	bl	8004b00 <HAL_GetTick>
 8005e68:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8005e6a:	e01b      	b.n	8005ea4 <ADC_ConversionStop+0x14c>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005e6c:	f7fe fe48 	bl	8004b00 <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	2b0b      	cmp	r3, #11
 8005e78:	d914      	bls.n	8005ea4 <ADC_ConversionStop+0x14c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	689a      	ldr	r2, [r3, #8]
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	4013      	ands	r3, r2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00d      	beq.n	8005ea4 <ADC_ConversionStop+0x14c>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8c:	f043 0210 	orr.w	r2, r3, #16
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e98:	f043 0201 	orr.w	r2, r3, #1
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e007      	b.n	8005eb4 <ADC_ConversionStop+0x15c>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689a      	ldr	r2, [r3, #8]
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	4013      	ands	r3, r2
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1dc      	bne.n	8005e6c <ADC_ConversionStop+0x114>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3718      	adds	r7, #24
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	000993ff 	.word	0x000993ff

08005ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f003 0307 	and.w	r3, r3, #7
 8005ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ed0:	4b0c      	ldr	r3, [pc, #48]	; (8005f04 <__NVIC_SetPriorityGrouping+0x44>)
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005edc:	4013      	ands	r3, r2
 8005ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ef2:	4a04      	ldr	r2, [pc, #16]	; (8005f04 <__NVIC_SetPriorityGrouping+0x44>)
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	60d3      	str	r3, [r2, #12]
}
 8005ef8:	bf00      	nop
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr
 8005f04:	e000ed00 	.word	0xe000ed00

08005f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f0c:	4b04      	ldr	r3, [pc, #16]	; (8005f20 <__NVIC_GetPriorityGrouping+0x18>)
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	0a1b      	lsrs	r3, r3, #8
 8005f12:	f003 0307 	and.w	r3, r3, #7
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr
 8005f20:	e000ed00 	.word	0xe000ed00

08005f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	db0b      	blt.n	8005f4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f36:	79fb      	ldrb	r3, [r7, #7]
 8005f38:	f003 021f 	and.w	r2, r3, #31
 8005f3c:	4907      	ldr	r1, [pc, #28]	; (8005f5c <__NVIC_EnableIRQ+0x38>)
 8005f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f42:	095b      	lsrs	r3, r3, #5
 8005f44:	2001      	movs	r0, #1
 8005f46:	fa00 f202 	lsl.w	r2, r0, r2
 8005f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005f4e:	bf00      	nop
 8005f50:	370c      	adds	r7, #12
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	e000e100 	.word	0xe000e100

08005f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	4603      	mov	r3, r0
 8005f68:	6039      	str	r1, [r7, #0]
 8005f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	db0a      	blt.n	8005f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	b2da      	uxtb	r2, r3
 8005f78:	490c      	ldr	r1, [pc, #48]	; (8005fac <__NVIC_SetPriority+0x4c>)
 8005f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f7e:	0112      	lsls	r2, r2, #4
 8005f80:	b2d2      	uxtb	r2, r2
 8005f82:	440b      	add	r3, r1
 8005f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f88:	e00a      	b.n	8005fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	4908      	ldr	r1, [pc, #32]	; (8005fb0 <__NVIC_SetPriority+0x50>)
 8005f90:	79fb      	ldrb	r3, [r7, #7]
 8005f92:	f003 030f 	and.w	r3, r3, #15
 8005f96:	3b04      	subs	r3, #4
 8005f98:	0112      	lsls	r2, r2, #4
 8005f9a:	b2d2      	uxtb	r2, r2
 8005f9c:	440b      	add	r3, r1
 8005f9e:	761a      	strb	r2, [r3, #24]
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	e000e100 	.word	0xe000e100
 8005fb0:	e000ed00 	.word	0xe000ed00

08005fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b089      	sub	sp, #36	; 0x24
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f003 0307 	and.w	r3, r3, #7
 8005fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	f1c3 0307 	rsb	r3, r3, #7
 8005fce:	2b04      	cmp	r3, #4
 8005fd0:	bf28      	it	cs
 8005fd2:	2304      	movcs	r3, #4
 8005fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	3304      	adds	r3, #4
 8005fda:	2b06      	cmp	r3, #6
 8005fdc:	d902      	bls.n	8005fe4 <NVIC_EncodePriority+0x30>
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	3b03      	subs	r3, #3
 8005fe2:	e000      	b.n	8005fe6 <NVIC_EncodePriority+0x32>
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff2:	43da      	mvns	r2, r3
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	401a      	ands	r2, r3
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	fa01 f303 	lsl.w	r3, r1, r3
 8006006:	43d9      	mvns	r1, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800600c:	4313      	orrs	r3, r2
         );
}
 800600e:	4618      	mov	r0, r3
 8006010:	3724      	adds	r7, #36	; 0x24
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
	...

0800601c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	3b01      	subs	r3, #1
 8006028:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800602c:	d301      	bcc.n	8006032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800602e:	2301      	movs	r3, #1
 8006030:	e00f      	b.n	8006052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006032:	4a0a      	ldr	r2, [pc, #40]	; (800605c <SysTick_Config+0x40>)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	3b01      	subs	r3, #1
 8006038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800603a:	210f      	movs	r1, #15
 800603c:	f04f 30ff 	mov.w	r0, #4294967295
 8006040:	f7ff ff8e 	bl	8005f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006044:	4b05      	ldr	r3, [pc, #20]	; (800605c <SysTick_Config+0x40>)
 8006046:	2200      	movs	r2, #0
 8006048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800604a:	4b04      	ldr	r3, [pc, #16]	; (800605c <SysTick_Config+0x40>)
 800604c:	2207      	movs	r2, #7
 800604e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3708      	adds	r7, #8
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	e000e010 	.word	0xe000e010

08006060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f7ff ff29 	bl	8005ec0 <__NVIC_SetPriorityGrouping>
}
 800606e:	bf00      	nop
 8006070:	3708      	adds	r7, #8
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b086      	sub	sp, #24
 800607a:	af00      	add	r7, sp, #0
 800607c:	4603      	mov	r3, r0
 800607e:	60b9      	str	r1, [r7, #8]
 8006080:	607a      	str	r2, [r7, #4]
 8006082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006084:	2300      	movs	r3, #0
 8006086:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006088:	f7ff ff3e 	bl	8005f08 <__NVIC_GetPriorityGrouping>
 800608c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	68b9      	ldr	r1, [r7, #8]
 8006092:	6978      	ldr	r0, [r7, #20]
 8006094:	f7ff ff8e 	bl	8005fb4 <NVIC_EncodePriority>
 8006098:	4602      	mov	r2, r0
 800609a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800609e:	4611      	mov	r1, r2
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7ff ff5d 	bl	8005f60 <__NVIC_SetPriority>
}
 80060a6:	bf00      	nop
 80060a8:	3718      	adds	r7, #24
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b082      	sub	sp, #8
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	4603      	mov	r3, r0
 80060b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80060b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060bc:	4618      	mov	r0, r3
 80060be:	f7ff ff31 	bl	8005f24 <__NVIC_EnableIRQ>
}
 80060c2:	bf00      	nop
 80060c4:	3708      	adds	r7, #8
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b082      	sub	sp, #8
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7ff ffa2 	bl	800601c <SysTick_Config>
 80060d8:	4603      	mov	r3, r0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3708      	adds	r7, #8
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b082      	sub	sp, #8
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d101      	bne.n	80060f4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e014      	b.n	800611e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	791b      	ldrb	r3, [r3, #4]
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d105      	bne.n	800610a <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f7fd ff65 	bl	8003fd4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2202      	movs	r2, #2
 800610e:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2201      	movs	r2, #1
 800611a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3708      	adds	r7, #8
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected  
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8006126:	b580      	push	{r7, lr}
 8006128:	b084      	sub	sp, #16
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
 800612e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006130:	2300      	movs	r3, #0
 8006132:	73fb      	strb	r3, [r7, #15]
    
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Disable the selected DAC channel DMA request */
    hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6819      	ldr	r1, [r3, #0]
 800613a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	fa02 f303 	lsl.w	r3, r2, r3
 8006144:	43da      	mvns	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	400a      	ands	r2, r1
 800614c:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	6819      	ldr	r1, [r3, #0]
 8006154:	2201      	movs	r2, #1
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	fa02 f303 	lsl.w	r3, r2, r3
 800615c:	43da      	mvns	r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	400a      	ands	r2, r1
 8006164:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA channel */
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10f      	bne.n	800618c <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);   
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	4618      	mov	r0, r3
 8006172:	f000 fa72 	bl	800665a <HAL_DMA_Abort>
 8006176:	4603      	mov	r3, r0
 8006178:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006188:	601a      	str	r2, [r3, #0]
 800618a:	e00e      	b.n	80061aa <HAL_DAC_Stop_DMA+0x84>
  /* For all products including channel 2U */
  /* DAC channel 2 is available on top of DAC channel 1U */
  else /* Channel2 is used */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);   
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	4618      	mov	r0, r3
 8006192:	f000 fa62 	bl	800665a <HAL_DMA_Abort>
 8006196:	4603      	mov	r3, r0
 8006198:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80061a8:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */
    
  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 80061aa:	7bfb      	ldrb	r3, [r7, #15]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d003      	beq.n	80061b8 <HAL_DAC_Stop_DMA+0x92>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2204      	movs	r2, #4
 80061b4:	711a      	strb	r2, [r3, #4]
 80061b6:	e002      	b.n	80061be <HAL_DAC_Stop_DMA+0x98>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	711a      	strb	r2, [r3, #4]
  }
  
  /* Return function status */
  return status;
 80061be:	7bfb      	ldrb	r3, [r7, #15]
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3710      	adds	r7, #16
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 80061f8:	bf00      	nop
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
 8006210:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8006212:	2300      	movs	r3, #0
 8006214:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	795b      	ldrb	r3, [r3, #5]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d101      	bne.n	8006222 <HAL_DAC_Start_DMA+0x1e>
 800621e:	2302      	movs	r3, #2
 8006220:	e08e      	b.n	8006340 <HAL_DAC_Start_DMA+0x13c>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2201      	movs	r2, #1
 8006226:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2202      	movs	r2, #2
 800622c:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d12a      	bne.n	800628a <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	4a43      	ldr	r2, [pc, #268]	; (8006348 <HAL_DAC_Start_DMA+0x144>)
 800623a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	4a42      	ldr	r2, [pc, #264]	; (800634c <HAL_DAC_Start_DMA+0x148>)
 8006242:	62da      	str	r2, [r3, #44]	; 0x2c
      
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	4a41      	ldr	r2, [pc, #260]	; (8006350 <HAL_DAC_Start_DMA+0x14c>)
 800624a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800625a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1U */
    switch(Alignment)
 800625c:	6a3b      	ldr	r3, [r7, #32]
 800625e:	2b04      	cmp	r3, #4
 8006260:	d009      	beq.n	8006276 <HAL_DAC_Start_DMA+0x72>
 8006262:	2b08      	cmp	r3, #8
 8006264:	d00c      	beq.n	8006280 <HAL_DAC_Start_DMA+0x7c>
 8006266:	2b00      	cmp	r3, #0
 8006268:	d000      	beq.n	800626c <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800626a:	e039      	b.n	80062e0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	3308      	adds	r3, #8
 8006272:	617b      	str	r3, [r7, #20]
        break;
 8006274:	e034      	b.n	80062e0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	330c      	adds	r3, #12
 800627c:	617b      	str	r3, [r7, #20]
        break;
 800627e:	e02f      	b.n	80062e0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	3310      	adds	r3, #16
 8006286:	617b      	str	r3, [r7, #20]
        break;
 8006288:	e02a      	b.n	80062e0 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	4a31      	ldr	r2, [pc, #196]	; (8006354 <HAL_DAC_Start_DMA+0x150>)
 8006290:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	4a30      	ldr	r2, [pc, #192]	; (8006358 <HAL_DAC_Start_DMA+0x154>)
 8006298:	62da      	str	r2, [r3, #44]	; 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	4a2f      	ldr	r2, [pc, #188]	; (800635c <HAL_DAC_Start_DMA+0x158>)
 80062a0:	631a      	str	r2, [r3, #48]	; 0x30
 
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80062b0:	601a      	str	r2, [r3, #0]
   
    /* Case of use of channel 2U */
    switch(Alignment)
 80062b2:	6a3b      	ldr	r3, [r7, #32]
 80062b4:	2b04      	cmp	r3, #4
 80062b6:	d009      	beq.n	80062cc <HAL_DAC_Start_DMA+0xc8>
 80062b8:	2b08      	cmp	r3, #8
 80062ba:	d00c      	beq.n	80062d6 <HAL_DAC_Start_DMA+0xd2>
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d000      	beq.n	80062c2 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80062c0:	e00e      	b.n	80062e0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	3314      	adds	r3, #20
 80062c8:	617b      	str	r3, [r7, #20]
        break;
 80062ca:	e009      	b.n	80062e0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	3318      	adds	r3, #24
 80062d2:	617b      	str	r3, [r7, #20]
        break;
 80062d4:	e004      	b.n	80062e0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	331c      	adds	r3, #28
 80062dc:	617b      	str	r3, [r7, #20]
        break;
 80062de:	bf00      	nop
    }
  }
 
  /* Enable the DMA Channel */
  if(Channel == DAC_CHANNEL_1)
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10f      	bne.n	8006306 <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062f4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6898      	ldr	r0, [r3, #8]
 80062fa:	6879      	ldr	r1, [r7, #4]
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	f000 f94c 	bl	800659c <HAL_DMA_Start_IT>
 8006304:	e00e      	b.n	8006324 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006314:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	68d8      	ldr	r0, [r3, #12]
 800631a:	6879      	ldr	r1, [r7, #4]
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	f000 f93c 	bl	800659c <HAL_DMA_Start_IT>
  }
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6819      	ldr	r1, [r3, #0]
 8006330:	2201      	movs	r2, #1
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	409a      	lsls	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	430a      	orrs	r2, r1
 800633c:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3718      	adds	r7, #24
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	08006437 	.word	0x08006437
 800634c:	08006459 	.word	0x08006459
 8006350:	08006475 	.word	0x08006475
 8006354:	080064a3 	.word	0x080064a3
 8006358:	080064c5 	.word	0x080064c5
 800635c:	080064e1 	.word	0x080064e1

08006360 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8006360:	b480      	push	{r7}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800636c:	2300      	movs	r3, #0
 800636e:	617b      	str	r3, [r7, #20]
 8006370:	2300      	movs	r3, #0
 8006372:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	795b      	ldrb	r3, [r3, #5]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d101      	bne.n	8006380 <HAL_DAC_ConfigChannel+0x20>
 800637c:	2302      	movs	r3, #2
 800637e:	e036      	b.n	80063ee <HAL_DAC_ConfigChannel+0x8e>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2201      	movs	r2, #1
 8006384:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2202      	movs	r2, #2
 800638a:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8006394:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	fa02 f303 	lsl.w	r3, r2, r3
 800639e:	43db      	mvns	r3, r3
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	4013      	ands	r3, r2
 80063a4:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	4313      	orrs	r3, r2
 80063be:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6819      	ldr	r1, [r3, #0]
 80063ce:	22c0      	movs	r2, #192	; 0xc0
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	fa02 f303 	lsl.w	r3, r2, r3
 80063d6:	43da      	mvns	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	400a      	ands	r2, r1
 80063de:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2201      	movs	r2, #1
 80063e4:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	371c      	adds	r7, #28
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b083      	sub	sp, #12
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8006402:	bf00      	nop
 8006404:	370c      	adds	r7, #12
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr

0800640e <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 800640e:	b480      	push	{r7}
 8006410:	b083      	sub	sp, #12
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8006416:	bf00      	nop
 8006418:	370c      	adds	r7, #12
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006422:	b480      	push	{r7}
 8006424:	b083      	sub	sp, #12
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800642a:	bf00      	nop
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b084      	sub	sp, #16
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006442:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f7ff febf 	bl	80061c8 <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2201      	movs	r2, #1
 800644e:	711a      	strb	r2, [r3, #4]
}
 8006450:	bf00      	nop
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006464:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f7ff feb8 	bl	80061dc <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 800646c:	bf00      	nop
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006480:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	f043 0204 	orr.w	r2, r3, #4
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f7ff feae 	bl	80061f0 <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2201      	movs	r2, #1
 8006498:	711a      	strb	r2, [r3, #4]
}
 800649a:	bf00      	nop
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b084      	sub	sp, #16
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ae:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f7ff ffa2 	bl	80063fa <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2201      	movs	r2, #1
 80064ba:	711a      	strb	r2, [r3, #4]
}
 80064bc:	bf00      	nop
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d0:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f7ff ff9b 	bl	800640e <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 80064d8:	bf00      	nop
 80064da:	3710      	adds	r7, #16
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ec:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	f043 0204 	orr.w	r2, r3, #4
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f7ff ff91 	bl	8006422 <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2201      	movs	r2, #1
 8006504:	711a      	strb	r2, [r3, #4]
}
 8006506:	bf00      	nop
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800650e:	b580      	push	{r7, lr}
 8006510:	b084      	sub	sp, #16
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006516:	2300      	movs	r3, #0
 8006518:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d101      	bne.n	8006524 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e037      	b.n	8006594 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2202      	movs	r2, #2
 8006528:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800653a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800653e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006548:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006554:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006560:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	69db      	ldr	r3, [r3, #28]
 8006566:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	4313      	orrs	r3, r2
 800656c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f9b8 	bl	80068ec <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}  
 8006594:	4618      	mov	r0, r3
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
 80065a8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80065aa:	2300      	movs	r3, #0
 80065ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d101      	bne.n	80065bc <HAL_DMA_Start_IT+0x20>
 80065b8:	2302      	movs	r3, #2
 80065ba:	e04a      	b.n	8006652 <HAL_DMA_Start_IT+0xb6>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d13a      	bne.n	8006644 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2202      	movs	r2, #2
 80065d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f022 0201 	bic.w	r2, r2, #1
 80065ea:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	68b9      	ldr	r1, [r7, #8]
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f000 f94b 	bl	800688e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d008      	beq.n	8006612 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f042 020e 	orr.w	r2, r2, #14
 800660e:	601a      	str	r2, [r3, #0]
 8006610:	e00f      	b.n	8006632 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f042 020a 	orr.w	r2, r2, #10
 8006620:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f022 0204 	bic.w	r2, r2, #4
 8006630:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f042 0201 	orr.w	r2, r2, #1
 8006640:	601a      	str	r2, [r3, #0]
 8006642:	e005      	b.n	8006650 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800664c:	2302      	movs	r3, #2
 800664e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8006650:	7dfb      	ldrb	r3, [r7, #23]
} 
 8006652:	4618      	mov	r0, r3
 8006654:	3718      	adds	r7, #24
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800665a:	b480      	push	{r7}
 800665c:	b083      	sub	sp, #12
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006668:	2b02      	cmp	r3, #2
 800666a:	d008      	beq.n	800667e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2204      	movs	r2, #4
 8006670:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e020      	b.n	80066c0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 020e 	bic.w	r2, r2, #14
 800668c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f022 0201 	bic.w	r2, r2, #1
 800669c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066a6:	2101      	movs	r1, #1
 80066a8:	fa01 f202 	lsl.w	r2, r1, r2
 80066ac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066d4:	2300      	movs	r3, #0
 80066d6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d005      	beq.n	80066ee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2204      	movs	r2, #4
 80066e6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	73fb      	strb	r3, [r7, #15]
 80066ec:	e027      	b.n	800673e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f022 020e 	bic.w	r2, r2, #14
 80066fc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f022 0201 	bic.w	r2, r2, #1
 800670c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006716:	2101      	movs	r1, #1
 8006718:	fa01 f202 	lsl.w	r2, r1, r2
 800671c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006732:	2b00      	cmp	r3, #0
 8006734:	d003      	beq.n	800673e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	4798      	blx	r3
    } 
  }
  return status;
 800673e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006740:	4618      	mov	r0, r3
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006764:	2204      	movs	r2, #4
 8006766:	409a      	lsls	r2, r3
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	4013      	ands	r3, r2
 800676c:	2b00      	cmp	r3, #0
 800676e:	d024      	beq.n	80067ba <HAL_DMA_IRQHandler+0x72>
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	f003 0304 	and.w	r3, r3, #4
 8006776:	2b00      	cmp	r3, #0
 8006778:	d01f      	beq.n	80067ba <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0320 	and.w	r3, r3, #32
 8006784:	2b00      	cmp	r3, #0
 8006786:	d107      	bne.n	8006798 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f022 0204 	bic.w	r2, r2, #4
 8006796:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067a0:	2104      	movs	r1, #4
 80067a2:	fa01 f202 	lsl.w	r2, r1, r2
 80067a6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d06a      	beq.n	8006886 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80067b8:	e065      	b.n	8006886 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067be:	2202      	movs	r2, #2
 80067c0:	409a      	lsls	r2, r3
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	4013      	ands	r3, r2
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d02c      	beq.n	8006824 <HAL_DMA_IRQHandler+0xdc>
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	f003 0302 	and.w	r3, r3, #2
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d027      	beq.n	8006824 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 0320 	and.w	r3, r3, #32
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10b      	bne.n	80067fa <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f022 020a 	bic.w	r2, r2, #10
 80067f0:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006802:	2102      	movs	r1, #2
 8006804:	fa01 f202 	lsl.w	r2, r1, r2
 8006808:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006816:	2b00      	cmp	r3, #0
 8006818:	d035      	beq.n	8006886 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8006822:	e030      	b.n	8006886 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006828:	2208      	movs	r2, #8
 800682a:	409a      	lsls	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	4013      	ands	r3, r2
 8006830:	2b00      	cmp	r3, #0
 8006832:	d028      	beq.n	8006886 <HAL_DMA_IRQHandler+0x13e>
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	f003 0308 	and.w	r3, r3, #8
 800683a:	2b00      	cmp	r3, #0
 800683c:	d023      	beq.n	8006886 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f022 020e 	bic.w	r2, r2, #14
 800684c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006856:	2101      	movs	r1, #1
 8006858:	fa01 f202 	lsl.w	r2, r1, r2
 800685c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2201      	movs	r2, #1
 8006862:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006878:	2b00      	cmp	r3, #0
 800687a:	d004      	beq.n	8006886 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	4798      	blx	r3
    }
  }
}  
 8006884:	e7ff      	b.n	8006886 <HAL_DMA_IRQHandler+0x13e>
 8006886:	bf00      	nop
 8006888:	3710      	adds	r7, #16
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800688e:	b480      	push	{r7}
 8006890:	b085      	sub	sp, #20
 8006892:	af00      	add	r7, sp, #0
 8006894:	60f8      	str	r0, [r7, #12]
 8006896:	60b9      	str	r1, [r7, #8]
 8006898:	607a      	str	r2, [r7, #4]
 800689a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068a4:	2101      	movs	r1, #1
 80068a6:	fa01 f202 	lsl.w	r2, r1, r2
 80068aa:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	683a      	ldr	r2, [r7, #0]
 80068b2:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	2b10      	cmp	r3, #16
 80068ba:	d108      	bne.n	80068ce <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80068cc:	e007      	b.n	80068de <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	60da      	str	r2, [r3, #12]
}
 80068de:	bf00      	nop
 80068e0:	3714      	adds	r7, #20
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
	...

080068ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	461a      	mov	r2, r3
 80068fa:	4b14      	ldr	r3, [pc, #80]	; (800694c <DMA_CalcBaseAndBitshift+0x60>)
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d80f      	bhi.n	8006920 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	461a      	mov	r2, r3
 8006906:	4b12      	ldr	r3, [pc, #72]	; (8006950 <DMA_CalcBaseAndBitshift+0x64>)
 8006908:	4413      	add	r3, r2
 800690a:	4a12      	ldr	r2, [pc, #72]	; (8006954 <DMA_CalcBaseAndBitshift+0x68>)
 800690c:	fba2 2303 	umull	r2, r3, r2, r3
 8006910:	091b      	lsrs	r3, r3, #4
 8006912:	009a      	lsls	r2, r3, #2
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a0f      	ldr	r2, [pc, #60]	; (8006958 <DMA_CalcBaseAndBitshift+0x6c>)
 800691c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800691e:	e00e      	b.n	800693e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	461a      	mov	r2, r3
 8006926:	4b0d      	ldr	r3, [pc, #52]	; (800695c <DMA_CalcBaseAndBitshift+0x70>)
 8006928:	4413      	add	r3, r2
 800692a:	4a0a      	ldr	r2, [pc, #40]	; (8006954 <DMA_CalcBaseAndBitshift+0x68>)
 800692c:	fba2 2303 	umull	r2, r3, r2, r3
 8006930:	091b      	lsrs	r3, r3, #4
 8006932:	009a      	lsls	r2, r3, #2
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a09      	ldr	r2, [pc, #36]	; (8006960 <DMA_CalcBaseAndBitshift+0x74>)
 800693c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800693e:	bf00      	nop
 8006940:	370c      	adds	r7, #12
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	40020407 	.word	0x40020407
 8006950:	bffdfff8 	.word	0xbffdfff8
 8006954:	cccccccd 	.word	0xcccccccd
 8006958:	40020000 	.word	0x40020000
 800695c:	bffdfbf8 	.word	0xbffdfbf8
 8006960:	40020400 	.word	0x40020400

08006964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006964:	b480      	push	{r7}
 8006966:	b087      	sub	sp, #28
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800696e:	2300      	movs	r3, #0
 8006970:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006972:	e160      	b.n	8006c36 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	2101      	movs	r1, #1
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	fa01 f303 	lsl.w	r3, r1, r3
 8006980:	4013      	ands	r3, r2
 8006982:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2b00      	cmp	r3, #0
 8006988:	f000 8152 	beq.w	8006c30 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	f003 0303 	and.w	r3, r3, #3
 8006994:	2b01      	cmp	r3, #1
 8006996:	d005      	beq.n	80069a4 <HAL_GPIO_Init+0x40>
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	f003 0303 	and.w	r3, r3, #3
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d130      	bne.n	8006a06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	005b      	lsls	r3, r3, #1
 80069ae:	2203      	movs	r2, #3
 80069b0:	fa02 f303 	lsl.w	r3, r2, r3
 80069b4:	43db      	mvns	r3, r3
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	4013      	ands	r3, r2
 80069ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	68da      	ldr	r2, [r3, #12]
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	005b      	lsls	r3, r3, #1
 80069c4:	fa02 f303 	lsl.w	r3, r2, r3
 80069c8:	693a      	ldr	r2, [r7, #16]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	693a      	ldr	r2, [r7, #16]
 80069d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80069da:	2201      	movs	r2, #1
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	fa02 f303 	lsl.w	r3, r2, r3
 80069e2:	43db      	mvns	r3, r3
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	4013      	ands	r3, r2
 80069e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	091b      	lsrs	r3, r3, #4
 80069f0:	f003 0201 	and.w	r2, r3, #1
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	fa02 f303 	lsl.w	r3, r2, r3
 80069fa:	693a      	ldr	r2, [r7, #16]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	693a      	ldr	r2, [r7, #16]
 8006a04:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f003 0303 	and.w	r3, r3, #3
 8006a0e:	2b03      	cmp	r3, #3
 8006a10:	d017      	beq.n	8006a42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	005b      	lsls	r3, r3, #1
 8006a1c:	2203      	movs	r2, #3
 8006a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a22:	43db      	mvns	r3, r3
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	4013      	ands	r3, r2
 8006a28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	689a      	ldr	r2, [r3, #8]
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	005b      	lsls	r3, r3, #1
 8006a32:	fa02 f303 	lsl.w	r3, r2, r3
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	f003 0303 	and.w	r3, r3, #3
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d123      	bne.n	8006a96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	08da      	lsrs	r2, r3, #3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	3208      	adds	r2, #8
 8006a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	f003 0307 	and.w	r3, r3, #7
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	220f      	movs	r2, #15
 8006a66:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6a:	43db      	mvns	r3, r3
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	4013      	ands	r3, r2
 8006a70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	691a      	ldr	r2, [r3, #16]
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	f003 0307 	and.w	r3, r3, #7
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a82:	693a      	ldr	r2, [r7, #16]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	08da      	lsrs	r2, r3, #3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	3208      	adds	r2, #8
 8006a90:	6939      	ldr	r1, [r7, #16]
 8006a92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	005b      	lsls	r3, r3, #1
 8006aa0:	2203      	movs	r2, #3
 8006aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa6:	43db      	mvns	r3, r3
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	4013      	ands	r3, r2
 8006aac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	f003 0203 	and.w	r2, r3, #3
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	005b      	lsls	r3, r3, #1
 8006aba:	fa02 f303 	lsl.w	r3, r2, r3
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f000 80ac 	beq.w	8006c30 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ad8:	4b5e      	ldr	r3, [pc, #376]	; (8006c54 <HAL_GPIO_Init+0x2f0>)
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	4a5d      	ldr	r2, [pc, #372]	; (8006c54 <HAL_GPIO_Init+0x2f0>)
 8006ade:	f043 0301 	orr.w	r3, r3, #1
 8006ae2:	6193      	str	r3, [r2, #24]
 8006ae4:	4b5b      	ldr	r3, [pc, #364]	; (8006c54 <HAL_GPIO_Init+0x2f0>)
 8006ae6:	699b      	ldr	r3, [r3, #24]
 8006ae8:	f003 0301 	and.w	r3, r3, #1
 8006aec:	60bb      	str	r3, [r7, #8]
 8006aee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006af0:	4a59      	ldr	r2, [pc, #356]	; (8006c58 <HAL_GPIO_Init+0x2f4>)
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	089b      	lsrs	r3, r3, #2
 8006af6:	3302      	adds	r3, #2
 8006af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006afc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	f003 0303 	and.w	r3, r3, #3
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	220f      	movs	r2, #15
 8006b08:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0c:	43db      	mvns	r3, r3
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	4013      	ands	r3, r2
 8006b12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006b1a:	d025      	beq.n	8006b68 <HAL_GPIO_Init+0x204>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a4f      	ldr	r2, [pc, #316]	; (8006c5c <HAL_GPIO_Init+0x2f8>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d01f      	beq.n	8006b64 <HAL_GPIO_Init+0x200>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a4e      	ldr	r2, [pc, #312]	; (8006c60 <HAL_GPIO_Init+0x2fc>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d019      	beq.n	8006b60 <HAL_GPIO_Init+0x1fc>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a4d      	ldr	r2, [pc, #308]	; (8006c64 <HAL_GPIO_Init+0x300>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d013      	beq.n	8006b5c <HAL_GPIO_Init+0x1f8>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a4c      	ldr	r2, [pc, #304]	; (8006c68 <HAL_GPIO_Init+0x304>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d00d      	beq.n	8006b58 <HAL_GPIO_Init+0x1f4>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a4b      	ldr	r2, [pc, #300]	; (8006c6c <HAL_GPIO_Init+0x308>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d007      	beq.n	8006b54 <HAL_GPIO_Init+0x1f0>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a4a      	ldr	r2, [pc, #296]	; (8006c70 <HAL_GPIO_Init+0x30c>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d101      	bne.n	8006b50 <HAL_GPIO_Init+0x1ec>
 8006b4c:	2306      	movs	r3, #6
 8006b4e:	e00c      	b.n	8006b6a <HAL_GPIO_Init+0x206>
 8006b50:	2307      	movs	r3, #7
 8006b52:	e00a      	b.n	8006b6a <HAL_GPIO_Init+0x206>
 8006b54:	2305      	movs	r3, #5
 8006b56:	e008      	b.n	8006b6a <HAL_GPIO_Init+0x206>
 8006b58:	2304      	movs	r3, #4
 8006b5a:	e006      	b.n	8006b6a <HAL_GPIO_Init+0x206>
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e004      	b.n	8006b6a <HAL_GPIO_Init+0x206>
 8006b60:	2302      	movs	r3, #2
 8006b62:	e002      	b.n	8006b6a <HAL_GPIO_Init+0x206>
 8006b64:	2301      	movs	r3, #1
 8006b66:	e000      	b.n	8006b6a <HAL_GPIO_Init+0x206>
 8006b68:	2300      	movs	r3, #0
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	f002 0203 	and.w	r2, r2, #3
 8006b70:	0092      	lsls	r2, r2, #2
 8006b72:	4093      	lsls	r3, r2
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006b7a:	4937      	ldr	r1, [pc, #220]	; (8006c58 <HAL_GPIO_Init+0x2f4>)
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	089b      	lsrs	r3, r3, #2
 8006b80:	3302      	adds	r3, #2
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006b88:	4b3a      	ldr	r3, [pc, #232]	; (8006c74 <HAL_GPIO_Init+0x310>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	43db      	mvns	r3, r3
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	4013      	ands	r3, r2
 8006b96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d003      	beq.n	8006bac <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006bac:	4a31      	ldr	r2, [pc, #196]	; (8006c74 <HAL_GPIO_Init+0x310>)
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006bb2:	4b30      	ldr	r3, [pc, #192]	; (8006c74 <HAL_GPIO_Init+0x310>)
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	43db      	mvns	r3, r3
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d003      	beq.n	8006bd6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006bd6:	4a27      	ldr	r2, [pc, #156]	; (8006c74 <HAL_GPIO_Init+0x310>)
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006bdc:	4b25      	ldr	r3, [pc, #148]	; (8006c74 <HAL_GPIO_Init+0x310>)
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	43db      	mvns	r3, r3
 8006be6:	693a      	ldr	r2, [r7, #16]
 8006be8:	4013      	ands	r3, r2
 8006bea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d003      	beq.n	8006c00 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006c00:	4a1c      	ldr	r2, [pc, #112]	; (8006c74 <HAL_GPIO_Init+0x310>)
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006c06:	4b1b      	ldr	r3, [pc, #108]	; (8006c74 <HAL_GPIO_Init+0x310>)
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	43db      	mvns	r3, r3
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	4013      	ands	r3, r2
 8006c14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d003      	beq.n	8006c2a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8006c22:	693a      	ldr	r2, [r7, #16]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006c2a:	4a12      	ldr	r2, [pc, #72]	; (8006c74 <HAL_GPIO_Init+0x310>)
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	3301      	adds	r3, #1
 8006c34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f47f ae97 	bne.w	8006974 <HAL_GPIO_Init+0x10>
  }
}
 8006c46:	bf00      	nop
 8006c48:	371c      	adds	r7, #28
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	40021000 	.word	0x40021000
 8006c58:	40010000 	.word	0x40010000
 8006c5c:	48000400 	.word	0x48000400
 8006c60:	48000800 	.word	0x48000800
 8006c64:	48000c00 	.word	0x48000c00
 8006c68:	48001000 	.word	0x48001000
 8006c6c:	48001400 	.word	0x48001400
 8006c70:	48001800 	.word	0x48001800
 8006c74:	40010400 	.word	0x40010400

08006c78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b085      	sub	sp, #20
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	460b      	mov	r3, r1
 8006c82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	691a      	ldr	r2, [r3, #16]
 8006c88:	887b      	ldrh	r3, [r7, #2]
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d002      	beq.n	8006c96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006c90:	2301      	movs	r3, #1
 8006c92:	73fb      	strb	r3, [r7, #15]
 8006c94:	e001      	b.n	8006c9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006c96:	2300      	movs	r3, #0
 8006c98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3714      	adds	r7, #20
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	807b      	strh	r3, [r7, #2]
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006cb8:	787b      	ldrb	r3, [r7, #1]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d003      	beq.n	8006cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006cbe:	887a      	ldrh	r2, [r7, #2]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006cc4:	e002      	b.n	8006ccc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006cc6:	887a      	ldrh	r2, [r7, #2]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	4603      	mov	r3, r0
 8006ce0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006ce2:	4b08      	ldr	r3, [pc, #32]	; (8006d04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ce4:	695a      	ldr	r2, [r3, #20]
 8006ce6:	88fb      	ldrh	r3, [r7, #6]
 8006ce8:	4013      	ands	r3, r2
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d006      	beq.n	8006cfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006cee:	4a05      	ldr	r2, [pc, #20]	; (8006d04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006cf0:	88fb      	ldrh	r3, [r7, #6]
 8006cf2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006cf4:	88fb      	ldrh	r3, [r7, #6]
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7fc faf6 	bl	80032e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8006cfc:	bf00      	nop
 8006cfe:	3708      	adds	r7, #8
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	40010400 	.word	0x40010400

08006d08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d101      	bne.n	8006d1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e081      	b.n	8006e1e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d106      	bne.n	8006d34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7fd f9c2 	bl	80040b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2224      	movs	r2, #36	; 0x24
 8006d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f022 0201 	bic.w	r2, r2, #1
 8006d4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	685a      	ldr	r2, [r3, #4]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006d58:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	689a      	ldr	r2, [r3, #8]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d68:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d107      	bne.n	8006d82 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	689a      	ldr	r2, [r3, #8]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d7e:	609a      	str	r2, [r3, #8]
 8006d80:	e006      	b.n	8006d90 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	689a      	ldr	r2, [r3, #8]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006d8e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d104      	bne.n	8006da2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006da0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	6812      	ldr	r2, [r2, #0]
 8006dac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006db0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006db4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68da      	ldr	r2, [r3, #12]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006dc4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	691a      	ldr	r2, [r3, #16]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	699b      	ldr	r3, [r3, #24]
 8006dd6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	430a      	orrs	r2, r1
 8006dde:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	69d9      	ldr	r1, [r3, #28]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a1a      	ldr	r2, [r3, #32]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	430a      	orrs	r2, r1
 8006dee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f042 0201 	orr.w	r2, r2, #1
 8006dfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2220      	movs	r2, #32
 8006e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3708      	adds	r7, #8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
	...

08006e28 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b088      	sub	sp, #32
 8006e2c:	af02      	add	r7, sp, #8
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	607a      	str	r2, [r7, #4]
 8006e32:	461a      	mov	r2, r3
 8006e34:	460b      	mov	r3, r1
 8006e36:	817b      	strh	r3, [r7, #10]
 8006e38:	4613      	mov	r3, r2
 8006e3a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	2b20      	cmp	r3, #32
 8006e46:	f040 80da 	bne.w	8006ffe <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d101      	bne.n	8006e58 <HAL_I2C_Master_Transmit+0x30>
 8006e54:	2302      	movs	r3, #2
 8006e56:	e0d3      	b.n	8007000 <HAL_I2C_Master_Transmit+0x1d8>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006e60:	f7fd fe4e 	bl	8004b00 <HAL_GetTick>
 8006e64:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	2319      	movs	r3, #25
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f000 f9e6 	bl	8007244 <I2C_WaitOnFlagUntilTimeout>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d001      	beq.n	8006e82 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e0be      	b.n	8007000 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2221      	movs	r2, #33	; 0x21
 8006e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2210      	movs	r2, #16
 8006e8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	893a      	ldrh	r2, [r7, #8]
 8006ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	2bff      	cmp	r3, #255	; 0xff
 8006eb2:	d90e      	bls.n	8006ed2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	22ff      	movs	r2, #255	; 0xff
 8006eb8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ebe:	b2da      	uxtb	r2, r3
 8006ec0:	8979      	ldrh	r1, [r7, #10]
 8006ec2:	4b51      	ldr	r3, [pc, #324]	; (8007008 <HAL_I2C_Master_Transmit+0x1e0>)
 8006ec4:	9300      	str	r3, [sp, #0]
 8006ec6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006eca:	68f8      	ldr	r0, [r7, #12]
 8006ecc:	f000 fb58 	bl	8007580 <I2C_TransferConfig>
 8006ed0:	e06c      	b.n	8006fac <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ee0:	b2da      	uxtb	r2, r3
 8006ee2:	8979      	ldrh	r1, [r7, #10]
 8006ee4:	4b48      	ldr	r3, [pc, #288]	; (8007008 <HAL_I2C_Master_Transmit+0x1e0>)
 8006ee6:	9300      	str	r3, [sp, #0]
 8006ee8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f000 fb47 	bl	8007580 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006ef2:	e05b      	b.n	8006fac <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ef4:	697a      	ldr	r2, [r7, #20]
 8006ef6:	6a39      	ldr	r1, [r7, #32]
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f000 f9e3 	bl	80072c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d001      	beq.n	8006f08 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e07b      	b.n	8007000 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0c:	781a      	ldrb	r2, [r3, #0]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f18:	1c5a      	adds	r2, r3, #1
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	3b01      	subs	r3, #1
 8006f26:	b29a      	uxth	r2, r3
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f30:	3b01      	subs	r3, #1
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d034      	beq.n	8006fac <HAL_I2C_Master_Transmit+0x184>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d130      	bne.n	8006fac <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	9300      	str	r3, [sp, #0]
 8006f4e:	6a3b      	ldr	r3, [r7, #32]
 8006f50:	2200      	movs	r2, #0
 8006f52:	2180      	movs	r1, #128	; 0x80
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	f000 f975 	bl	8007244 <I2C_WaitOnFlagUntilTimeout>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d001      	beq.n	8006f64 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	e04d      	b.n	8007000 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	2bff      	cmp	r3, #255	; 0xff
 8006f6c:	d90e      	bls.n	8006f8c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	22ff      	movs	r2, #255	; 0xff
 8006f72:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f78:	b2da      	uxtb	r2, r3
 8006f7a:	8979      	ldrh	r1, [r7, #10]
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	9300      	str	r3, [sp, #0]
 8006f80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f000 fafb 	bl	8007580 <I2C_TransferConfig>
 8006f8a:	e00f      	b.n	8006fac <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f9a:	b2da      	uxtb	r2, r3
 8006f9c:	8979      	ldrh	r1, [r7, #10]
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f000 faea 	bl	8007580 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d19e      	bne.n	8006ef4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	6a39      	ldr	r1, [r7, #32]
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f000 f9c2 	bl	8007344 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d001      	beq.n	8006fca <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e01a      	b.n	8007000 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2220      	movs	r2, #32
 8006fd0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	6859      	ldr	r1, [r3, #4]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	4b0b      	ldr	r3, [pc, #44]	; (800700c <HAL_I2C_Master_Transmit+0x1e4>)
 8006fde:	400b      	ands	r3, r1
 8006fe0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2220      	movs	r2, #32
 8006fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	e000      	b.n	8007000 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006ffe:	2302      	movs	r3, #2
  }
}
 8007000:	4618      	mov	r0, r3
 8007002:	3718      	adds	r7, #24
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}
 8007008:	80002000 	.word	0x80002000
 800700c:	fe00e800 	.word	0xfe00e800

08007010 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b088      	sub	sp, #32
 8007014:	af02      	add	r7, sp, #8
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	607a      	str	r2, [r7, #4]
 800701a:	461a      	mov	r2, r3
 800701c:	460b      	mov	r3, r1
 800701e:	817b      	strh	r3, [r7, #10]
 8007020:	4613      	mov	r3, r2
 8007022:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800702a:	b2db      	uxtb	r3, r3
 800702c:	2b20      	cmp	r3, #32
 800702e:	f040 80db 	bne.w	80071e8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007038:	2b01      	cmp	r3, #1
 800703a:	d101      	bne.n	8007040 <HAL_I2C_Master_Receive+0x30>
 800703c:	2302      	movs	r3, #2
 800703e:	e0d4      	b.n	80071ea <HAL_I2C_Master_Receive+0x1da>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007048:	f7fd fd5a 	bl	8004b00 <HAL_GetTick>
 800704c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	2319      	movs	r3, #25
 8007054:	2201      	movs	r2, #1
 8007056:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	f000 f8f2 	bl	8007244 <I2C_WaitOnFlagUntilTimeout>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d001      	beq.n	800706a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e0bf      	b.n	80071ea <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2222      	movs	r2, #34	; 0x22
 800706e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2210      	movs	r2, #16
 8007076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	893a      	ldrh	r2, [r7, #8]
 800708a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2200      	movs	r2, #0
 8007090:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007096:	b29b      	uxth	r3, r3
 8007098:	2bff      	cmp	r3, #255	; 0xff
 800709a:	d90e      	bls.n	80070ba <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	22ff      	movs	r2, #255	; 0xff
 80070a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070a6:	b2da      	uxtb	r2, r3
 80070a8:	8979      	ldrh	r1, [r7, #10]
 80070aa:	4b52      	ldr	r3, [pc, #328]	; (80071f4 <HAL_I2C_Master_Receive+0x1e4>)
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f000 fa64 	bl	8007580 <I2C_TransferConfig>
 80070b8:	e06d      	b.n	8007196 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070be:	b29a      	uxth	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070c8:	b2da      	uxtb	r2, r3
 80070ca:	8979      	ldrh	r1, [r7, #10]
 80070cc:	4b49      	ldr	r3, [pc, #292]	; (80071f4 <HAL_I2C_Master_Receive+0x1e4>)
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f000 fa53 	bl	8007580 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80070da:	e05c      	b.n	8007196 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070dc:	697a      	ldr	r2, [r7, #20]
 80070de:	6a39      	ldr	r1, [r7, #32]
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f000 f96b 	bl	80073bc <I2C_WaitOnRXNEFlagUntilTimeout>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d001      	beq.n	80070f0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	e07c      	b.n	80071ea <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fa:	b2d2      	uxtb	r2, r2
 80070fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007102:	1c5a      	adds	r2, r3, #1
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800710c:	3b01      	subs	r3, #1
 800710e:	b29a      	uxth	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007118:	b29b      	uxth	r3, r3
 800711a:	3b01      	subs	r3, #1
 800711c:	b29a      	uxth	r2, r3
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007126:	b29b      	uxth	r3, r3
 8007128:	2b00      	cmp	r3, #0
 800712a:	d034      	beq.n	8007196 <HAL_I2C_Master_Receive+0x186>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007130:	2b00      	cmp	r3, #0
 8007132:	d130      	bne.n	8007196 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	9300      	str	r3, [sp, #0]
 8007138:	6a3b      	ldr	r3, [r7, #32]
 800713a:	2200      	movs	r2, #0
 800713c:	2180      	movs	r1, #128	; 0x80
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f000 f880 	bl	8007244 <I2C_WaitOnFlagUntilTimeout>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d001      	beq.n	800714e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e04d      	b.n	80071ea <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007152:	b29b      	uxth	r3, r3
 8007154:	2bff      	cmp	r3, #255	; 0xff
 8007156:	d90e      	bls.n	8007176 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	22ff      	movs	r2, #255	; 0xff
 800715c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007162:	b2da      	uxtb	r2, r3
 8007164:	8979      	ldrh	r1, [r7, #10]
 8007166:	2300      	movs	r3, #0
 8007168:	9300      	str	r3, [sp, #0]
 800716a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f000 fa06 	bl	8007580 <I2C_TransferConfig>
 8007174:	e00f      	b.n	8007196 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800717a:	b29a      	uxth	r2, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007184:	b2da      	uxtb	r2, r3
 8007186:	8979      	ldrh	r1, [r7, #10]
 8007188:	2300      	movs	r3, #0
 800718a:	9300      	str	r3, [sp, #0]
 800718c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f000 f9f5 	bl	8007580 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800719a:	b29b      	uxth	r3, r3
 800719c:	2b00      	cmp	r3, #0
 800719e:	d19d      	bne.n	80070dc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071a0:	697a      	ldr	r2, [r7, #20]
 80071a2:	6a39      	ldr	r1, [r7, #32]
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f000 f8cd 	bl	8007344 <I2C_WaitOnSTOPFlagUntilTimeout>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d001      	beq.n	80071b4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e01a      	b.n	80071ea <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2220      	movs	r2, #32
 80071ba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	6859      	ldr	r1, [r3, #4]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	4b0c      	ldr	r3, [pc, #48]	; (80071f8 <HAL_I2C_Master_Receive+0x1e8>)
 80071c8:	400b      	ands	r3, r1
 80071ca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2220      	movs	r2, #32
 80071d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80071e4:	2300      	movs	r3, #0
 80071e6:	e000      	b.n	80071ea <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80071e8:	2302      	movs	r3, #2
  }
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3718      	adds	r7, #24
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	80002400 	.word	0x80002400
 80071f8:	fe00e800 	.word	0xfe00e800

080071fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	f003 0302 	and.w	r3, r3, #2
 800720e:	2b02      	cmp	r3, #2
 8007210:	d103      	bne.n	800721a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2200      	movs	r2, #0
 8007218:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	f003 0301 	and.w	r3, r3, #1
 8007224:	2b01      	cmp	r3, #1
 8007226:	d007      	beq.n	8007238 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	699a      	ldr	r2, [r3, #24]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f042 0201 	orr.w	r2, r2, #1
 8007236:	619a      	str	r2, [r3, #24]
  }
}
 8007238:	bf00      	nop
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	603b      	str	r3, [r7, #0]
 8007250:	4613      	mov	r3, r2
 8007252:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007254:	e022      	b.n	800729c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800725c:	d01e      	beq.n	800729c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800725e:	f7fd fc4f 	bl	8004b00 <HAL_GetTick>
 8007262:	4602      	mov	r2, r0
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	683a      	ldr	r2, [r7, #0]
 800726a:	429a      	cmp	r2, r3
 800726c:	d302      	bcc.n	8007274 <I2C_WaitOnFlagUntilTimeout+0x30>
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d113      	bne.n	800729c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007278:	f043 0220 	orr.w	r2, r3, #32
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2220      	movs	r2, #32
 8007284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e00f      	b.n	80072bc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	699a      	ldr	r2, [r3, #24]
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	4013      	ands	r3, r2
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	bf0c      	ite	eq
 80072ac:	2301      	moveq	r3, #1
 80072ae:	2300      	movne	r3, #0
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	461a      	mov	r2, r3
 80072b4:	79fb      	ldrb	r3, [r7, #7]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d0cd      	beq.n	8007256 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80072d0:	e02c      	b.n	800732c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	68b9      	ldr	r1, [r7, #8]
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f000 f8dc 	bl	8007494 <I2C_IsAcknowledgeFailed>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d001      	beq.n	80072e6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e02a      	b.n	800733c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ec:	d01e      	beq.n	800732c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072ee:	f7fd fc07 	bl	8004b00 <HAL_GetTick>
 80072f2:	4602      	mov	r2, r0
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d302      	bcc.n	8007304 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d113      	bne.n	800732c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007308:	f043 0220 	orr.w	r2, r3, #32
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2220      	movs	r2, #32
 8007314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	e007      	b.n	800733c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	f003 0302 	and.w	r3, r3, #2
 8007336:	2b02      	cmp	r3, #2
 8007338:	d1cb      	bne.n	80072d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3710      	adds	r7, #16
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007350:	e028      	b.n	80073a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	68b9      	ldr	r1, [r7, #8]
 8007356:	68f8      	ldr	r0, [r7, #12]
 8007358:	f000 f89c 	bl	8007494 <I2C_IsAcknowledgeFailed>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d001      	beq.n	8007366 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e026      	b.n	80073b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007366:	f7fd fbcb 	bl	8004b00 <HAL_GetTick>
 800736a:	4602      	mov	r2, r0
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	68ba      	ldr	r2, [r7, #8]
 8007372:	429a      	cmp	r2, r3
 8007374:	d302      	bcc.n	800737c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d113      	bne.n	80073a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007380:	f043 0220 	orr.w	r2, r3, #32
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2220      	movs	r2, #32
 800738c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	e007      	b.n	80073b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	f003 0320 	and.w	r3, r3, #32
 80073ae:	2b20      	cmp	r3, #32
 80073b0:	d1cf      	bne.n	8007352 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80073c8:	e055      	b.n	8007476 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	68b9      	ldr	r1, [r7, #8]
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f000 f860 	bl	8007494 <I2C_IsAcknowledgeFailed>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d001      	beq.n	80073de <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e053      	b.n	8007486 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	f003 0320 	and.w	r3, r3, #32
 80073e8:	2b20      	cmp	r3, #32
 80073ea:	d129      	bne.n	8007440 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	699b      	ldr	r3, [r3, #24]
 80073f2:	f003 0304 	and.w	r3, r3, #4
 80073f6:	2b04      	cmp	r3, #4
 80073f8:	d105      	bne.n	8007406 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d001      	beq.n	8007406 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007402:	2300      	movs	r3, #0
 8007404:	e03f      	b.n	8007486 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2220      	movs	r2, #32
 800740c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	6859      	ldr	r1, [r3, #4]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	4b1d      	ldr	r3, [pc, #116]	; (8007490 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800741a:	400b      	ands	r3, r1
 800741c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2200      	movs	r2, #0
 8007422:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2220      	movs	r2, #32
 8007428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2200      	movs	r2, #0
 8007430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	e022      	b.n	8007486 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007440:	f7fd fb5e 	bl	8004b00 <HAL_GetTick>
 8007444:	4602      	mov	r2, r0
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	429a      	cmp	r2, r3
 800744e:	d302      	bcc.n	8007456 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d10f      	bne.n	8007476 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800745a:	f043 0220 	orr.w	r2, r3, #32
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2220      	movs	r2, #32
 8007466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	e007      	b.n	8007486 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	699b      	ldr	r3, [r3, #24]
 800747c:	f003 0304 	and.w	r3, r3, #4
 8007480:	2b04      	cmp	r3, #4
 8007482:	d1a2      	bne.n	80073ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	fe00e800 	.word	0xfe00e800

08007494 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	f003 0310 	and.w	r3, r3, #16
 80074aa:	2b10      	cmp	r3, #16
 80074ac:	d161      	bne.n	8007572 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074bc:	d02b      	beq.n	8007516 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	685a      	ldr	r2, [r3, #4]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074cc:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80074ce:	e022      	b.n	8007516 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d6:	d01e      	beq.n	8007516 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074d8:	f7fd fb12 	bl	8004b00 <HAL_GetTick>
 80074dc:	4602      	mov	r2, r0
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d302      	bcc.n	80074ee <I2C_IsAcknowledgeFailed+0x5a>
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d113      	bne.n	8007516 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074f2:	f043 0220 	orr.w	r2, r3, #32
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2220      	movs	r2, #32
 80074fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e02e      	b.n	8007574 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	f003 0320 	and.w	r3, r3, #32
 8007520:	2b20      	cmp	r3, #32
 8007522:	d1d5      	bne.n	80074d0 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2210      	movs	r2, #16
 800752a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2220      	movs	r2, #32
 8007532:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f7ff fe61 	bl	80071fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	6859      	ldr	r1, [r3, #4]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	4b0d      	ldr	r3, [pc, #52]	; (800757c <I2C_IsAcknowledgeFailed+0xe8>)
 8007546:	400b      	ands	r3, r1
 8007548:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800754e:	f043 0204 	orr.w	r2, r3, #4
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2220      	movs	r2, #32
 800755a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2200      	movs	r2, #0
 800756a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e000      	b.n	8007574 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	3710      	adds	r7, #16
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}
 800757c:	fe00e800 	.word	0xfe00e800

08007580 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	607b      	str	r3, [r7, #4]
 800758a:	460b      	mov	r3, r1
 800758c:	817b      	strh	r3, [r7, #10]
 800758e:	4613      	mov	r3, r2
 8007590:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	685a      	ldr	r2, [r3, #4]
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	0d5b      	lsrs	r3, r3, #21
 800759c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80075a0:	4b0d      	ldr	r3, [pc, #52]	; (80075d8 <I2C_TransferConfig+0x58>)
 80075a2:	430b      	orrs	r3, r1
 80075a4:	43db      	mvns	r3, r3
 80075a6:	ea02 0103 	and.w	r1, r2, r3
 80075aa:	897b      	ldrh	r3, [r7, #10]
 80075ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80075b0:	7a7b      	ldrb	r3, [r7, #9]
 80075b2:	041b      	lsls	r3, r3, #16
 80075b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80075b8:	431a      	orrs	r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	431a      	orrs	r2, r3
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	431a      	orrs	r2, r3
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	430a      	orrs	r2, r1
 80075c8:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80075ca:	bf00      	nop
 80075cc:	3714      	adds	r7, #20
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	03ff63ff 	.word	0x03ff63ff

080075dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b20      	cmp	r3, #32
 80075f0:	d138      	bne.n	8007664 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d101      	bne.n	8007600 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80075fc:	2302      	movs	r3, #2
 80075fe:	e032      	b.n	8007666 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2224      	movs	r2, #36	; 0x24
 800760c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f022 0201 	bic.w	r2, r2, #1
 800761e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800762e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	6819      	ldr	r1, [r3, #0]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	683a      	ldr	r2, [r7, #0]
 800763c:	430a      	orrs	r2, r1
 800763e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f042 0201 	orr.w	r2, r2, #1
 800764e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2220      	movs	r2, #32
 8007654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007660:	2300      	movs	r3, #0
 8007662:	e000      	b.n	8007666 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007664:	2302      	movs	r3, #2
  }
}
 8007666:	4618      	mov	r0, r3
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr

08007672 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007672:	b480      	push	{r7}
 8007674:	b085      	sub	sp, #20
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
 800767a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007682:	b2db      	uxtb	r3, r3
 8007684:	2b20      	cmp	r3, #32
 8007686:	d139      	bne.n	80076fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800768e:	2b01      	cmp	r3, #1
 8007690:	d101      	bne.n	8007696 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007692:	2302      	movs	r3, #2
 8007694:	e033      	b.n	80076fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2201      	movs	r2, #1
 800769a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2224      	movs	r2, #36	; 0x24
 80076a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f022 0201 	bic.w	r2, r2, #1
 80076b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80076c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	021b      	lsls	r3, r3, #8
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f042 0201 	orr.w	r2, r2, #1
 80076e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2220      	movs	r2, #32
 80076ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80076f8:	2300      	movs	r3, #0
 80076fa:	e000      	b.n	80076fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80076fc:	2302      	movs	r3, #2
  }
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3714      	adds	r7, #20
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr
	...

0800770c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8007712:	af00      	add	r7, sp, #0
 8007714:	1d3b      	adds	r3, r7, #4
 8007716:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007718:	1d3b      	adds	r3, r7, #4
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d102      	bne.n	8007726 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	f000 bf01 	b.w	8008528 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007726:	1d3b      	adds	r3, r7, #4
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 0301 	and.w	r3, r3, #1
 8007730:	2b00      	cmp	r3, #0
 8007732:	f000 8160 	beq.w	80079f6 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8007736:	4bae      	ldr	r3, [pc, #696]	; (80079f0 <HAL_RCC_OscConfig+0x2e4>)
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	f003 030c 	and.w	r3, r3, #12
 800773e:	2b04      	cmp	r3, #4
 8007740:	d00c      	beq.n	800775c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007742:	4bab      	ldr	r3, [pc, #684]	; (80079f0 <HAL_RCC_OscConfig+0x2e4>)
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	f003 030c 	and.w	r3, r3, #12
 800774a:	2b08      	cmp	r3, #8
 800774c:	d159      	bne.n	8007802 <HAL_RCC_OscConfig+0xf6>
 800774e:	4ba8      	ldr	r3, [pc, #672]	; (80079f0 <HAL_RCC_OscConfig+0x2e4>)
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8007756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800775a:	d152      	bne.n	8007802 <HAL_RCC_OscConfig+0xf6>
 800775c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007760:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007764:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007768:	fa93 f3a3 	rbit	r3, r3
 800776c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007770:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007774:	fab3 f383 	clz	r3, r3
 8007778:	b2db      	uxtb	r3, r3
 800777a:	095b      	lsrs	r3, r3, #5
 800777c:	b2db      	uxtb	r3, r3
 800777e:	f043 0301 	orr.w	r3, r3, #1
 8007782:	b2db      	uxtb	r3, r3
 8007784:	2b01      	cmp	r3, #1
 8007786:	d102      	bne.n	800778e <HAL_RCC_OscConfig+0x82>
 8007788:	4b99      	ldr	r3, [pc, #612]	; (80079f0 <HAL_RCC_OscConfig+0x2e4>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	e015      	b.n	80077ba <HAL_RCC_OscConfig+0xae>
 800778e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007792:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007796:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800779a:	fa93 f3a3 	rbit	r3, r3
 800779e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80077a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80077a6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80077aa:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80077ae:	fa93 f3a3 	rbit	r3, r3
 80077b2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80077b6:	4b8e      	ldr	r3, [pc, #568]	; (80079f0 <HAL_RCC_OscConfig+0x2e4>)
 80077b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80077be:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80077c2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80077c6:	fa92 f2a2 	rbit	r2, r2
 80077ca:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80077ce:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80077d2:	fab2 f282 	clz	r2, r2
 80077d6:	b2d2      	uxtb	r2, r2
 80077d8:	f042 0220 	orr.w	r2, r2, #32
 80077dc:	b2d2      	uxtb	r2, r2
 80077de:	f002 021f 	and.w	r2, r2, #31
 80077e2:	2101      	movs	r1, #1
 80077e4:	fa01 f202 	lsl.w	r2, r1, r2
 80077e8:	4013      	ands	r3, r2
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f000 8102 	beq.w	80079f4 <HAL_RCC_OscConfig+0x2e8>
 80077f0:	1d3b      	adds	r3, r7, #4
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f040 80fc 	bne.w	80079f4 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	f000 be93 	b.w	8008528 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007802:	1d3b      	adds	r3, r7, #4
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800780c:	d106      	bne.n	800781c <HAL_RCC_OscConfig+0x110>
 800780e:	4b78      	ldr	r3, [pc, #480]	; (80079f0 <HAL_RCC_OscConfig+0x2e4>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a77      	ldr	r2, [pc, #476]	; (80079f0 <HAL_RCC_OscConfig+0x2e4>)
 8007814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007818:	6013      	str	r3, [r2, #0]
 800781a:	e030      	b.n	800787e <HAL_RCC_OscConfig+0x172>
 800781c:	1d3b      	adds	r3, r7, #4
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d10c      	bne.n	8007840 <HAL_RCC_OscConfig+0x134>
 8007826:	4b72      	ldr	r3, [pc, #456]	; (80079f0 <HAL_RCC_OscConfig+0x2e4>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a71      	ldr	r2, [pc, #452]	; (80079f0 <HAL_RCC_OscConfig+0x2e4>)
 800782c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007830:	6013      	str	r3, [r2, #0]
 8007832:	4b6f      	ldr	r3, [pc, #444]	; (80079f0 <HAL_RCC_OscConfig+0x2e4>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a6e      	ldr	r2, [pc, #440]	; (80079f0 <HAL_RCC_OscConfig+0x2e4>)
 8007838:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800783c:	6013      	str	r3, [r2, #0]
 800783e:	e01e      	b.n	800787e <HAL_RCC_OscConfig+0x172>
 8007840:	1d3b      	adds	r3, r7, #4
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800784a:	d10c      	bne.n	8007866 <HAL_RCC_OscConfig+0x15a>
 800784c:	4b68      	ldr	r3, [pc, #416]	; (80079f0 <HAL_RCC_OscConfig+0x2e4>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a67      	ldr	r2, [pc, #412]	; (80079f0 <HAL_RCC_OscConfig+0x2e4>)
 8007852:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007856:	6013      	str	r3, [r2, #0]
 8007858:	4b65      	ldr	r3, [pc, #404]	; (80079f0 <HAL_RCC_OscConfig+0x2e4>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a64      	ldr	r2, [pc, #400]	; (80079f0 <HAL_RCC_OscConfig+0x2e4>)
 800785e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007862:	6013      	str	r3, [r2, #0]
 8007864:	e00b      	b.n	800787e <HAL_RCC_OscConfig+0x172>
 8007866:	4b62      	ldr	r3, [pc, #392]	; (80079f0 <HAL_RCC_OscConfig+0x2e4>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a61      	ldr	r2, [pc, #388]	; (80079f0 <HAL_RCC_OscConfig+0x2e4>)
 800786c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007870:	6013      	str	r3, [r2, #0]
 8007872:	4b5f      	ldr	r3, [pc, #380]	; (80079f0 <HAL_RCC_OscConfig+0x2e4>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a5e      	ldr	r2, [pc, #376]	; (80079f0 <HAL_RCC_OscConfig+0x2e4>)
 8007878:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800787c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800787e:	1d3b      	adds	r3, r7, #4
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d059      	beq.n	800793c <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007888:	f7fd f93a 	bl	8004b00 <HAL_GetTick>
 800788c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007890:	e00a      	b.n	80078a8 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007892:	f7fd f935 	bl	8004b00 <HAL_GetTick>
 8007896:	4602      	mov	r2, r0
 8007898:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	2b64      	cmp	r3, #100	; 0x64
 80078a0:	d902      	bls.n	80078a8 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80078a2:	2303      	movs	r3, #3
 80078a4:	f000 be40 	b.w	8008528 <HAL_RCC_OscConfig+0xe1c>
 80078a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80078ac:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078b0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80078b4:	fa93 f3a3 	rbit	r3, r3
 80078b8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80078bc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078c0:	fab3 f383 	clz	r3, r3
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	095b      	lsrs	r3, r3, #5
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	f043 0301 	orr.w	r3, r3, #1
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d102      	bne.n	80078da <HAL_RCC_OscConfig+0x1ce>
 80078d4:	4b46      	ldr	r3, [pc, #280]	; (80079f0 <HAL_RCC_OscConfig+0x2e4>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	e015      	b.n	8007906 <HAL_RCC_OscConfig+0x1fa>
 80078da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80078de:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078e2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80078e6:	fa93 f3a3 	rbit	r3, r3
 80078ea:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80078ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80078f2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80078f6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80078fa:	fa93 f3a3 	rbit	r3, r3
 80078fe:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8007902:	4b3b      	ldr	r3, [pc, #236]	; (80079f0 <HAL_RCC_OscConfig+0x2e4>)
 8007904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007906:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800790a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800790e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8007912:	fa92 f2a2 	rbit	r2, r2
 8007916:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800791a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800791e:	fab2 f282 	clz	r2, r2
 8007922:	b2d2      	uxtb	r2, r2
 8007924:	f042 0220 	orr.w	r2, r2, #32
 8007928:	b2d2      	uxtb	r2, r2
 800792a:	f002 021f 	and.w	r2, r2, #31
 800792e:	2101      	movs	r1, #1
 8007930:	fa01 f202 	lsl.w	r2, r1, r2
 8007934:	4013      	ands	r3, r2
 8007936:	2b00      	cmp	r3, #0
 8007938:	d0ab      	beq.n	8007892 <HAL_RCC_OscConfig+0x186>
 800793a:	e05c      	b.n	80079f6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800793c:	f7fd f8e0 	bl	8004b00 <HAL_GetTick>
 8007940:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007944:	e00a      	b.n	800795c <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007946:	f7fd f8db 	bl	8004b00 <HAL_GetTick>
 800794a:	4602      	mov	r2, r0
 800794c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	2b64      	cmp	r3, #100	; 0x64
 8007954:	d902      	bls.n	800795c <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8007956:	2303      	movs	r3, #3
 8007958:	f000 bde6 	b.w	8008528 <HAL_RCC_OscConfig+0xe1c>
 800795c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007960:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007964:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8007968:	fa93 f3a3 	rbit	r3, r3
 800796c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8007970:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007974:	fab3 f383 	clz	r3, r3
 8007978:	b2db      	uxtb	r3, r3
 800797a:	095b      	lsrs	r3, r3, #5
 800797c:	b2db      	uxtb	r3, r3
 800797e:	f043 0301 	orr.w	r3, r3, #1
 8007982:	b2db      	uxtb	r3, r3
 8007984:	2b01      	cmp	r3, #1
 8007986:	d102      	bne.n	800798e <HAL_RCC_OscConfig+0x282>
 8007988:	4b19      	ldr	r3, [pc, #100]	; (80079f0 <HAL_RCC_OscConfig+0x2e4>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	e015      	b.n	80079ba <HAL_RCC_OscConfig+0x2ae>
 800798e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007992:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007996:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800799a:	fa93 f3a3 	rbit	r3, r3
 800799e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80079a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80079a6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80079aa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80079ae:	fa93 f3a3 	rbit	r3, r3
 80079b2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80079b6:	4b0e      	ldr	r3, [pc, #56]	; (80079f0 <HAL_RCC_OscConfig+0x2e4>)
 80079b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80079be:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80079c2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80079c6:	fa92 f2a2 	rbit	r2, r2
 80079ca:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80079ce:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80079d2:	fab2 f282 	clz	r2, r2
 80079d6:	b2d2      	uxtb	r2, r2
 80079d8:	f042 0220 	orr.w	r2, r2, #32
 80079dc:	b2d2      	uxtb	r2, r2
 80079de:	f002 021f 	and.w	r2, r2, #31
 80079e2:	2101      	movs	r1, #1
 80079e4:	fa01 f202 	lsl.w	r2, r1, r2
 80079e8:	4013      	ands	r3, r2
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d1ab      	bne.n	8007946 <HAL_RCC_OscConfig+0x23a>
 80079ee:	e002      	b.n	80079f6 <HAL_RCC_OscConfig+0x2ea>
 80079f0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80079f6:	1d3b      	adds	r3, r7, #4
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 0302 	and.w	r3, r3, #2
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f000 8170 	beq.w	8007ce6 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007a06:	4bd0      	ldr	r3, [pc, #832]	; (8007d48 <HAL_RCC_OscConfig+0x63c>)
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	f003 030c 	and.w	r3, r3, #12
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00c      	beq.n	8007a2c <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007a12:	4bcd      	ldr	r3, [pc, #820]	; (8007d48 <HAL_RCC_OscConfig+0x63c>)
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f003 030c 	and.w	r3, r3, #12
 8007a1a:	2b08      	cmp	r3, #8
 8007a1c:	d16d      	bne.n	8007afa <HAL_RCC_OscConfig+0x3ee>
 8007a1e:	4bca      	ldr	r3, [pc, #808]	; (8007d48 <HAL_RCC_OscConfig+0x63c>)
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8007a26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a2a:	d166      	bne.n	8007afa <HAL_RCC_OscConfig+0x3ee>
 8007a2c:	2302      	movs	r3, #2
 8007a2e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a32:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8007a36:	fa93 f3a3 	rbit	r3, r3
 8007a3a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8007a3e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a42:	fab3 f383 	clz	r3, r3
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	095b      	lsrs	r3, r3, #5
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	f043 0301 	orr.w	r3, r3, #1
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d102      	bne.n	8007a5c <HAL_RCC_OscConfig+0x350>
 8007a56:	4bbc      	ldr	r3, [pc, #752]	; (8007d48 <HAL_RCC_OscConfig+0x63c>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	e013      	b.n	8007a84 <HAL_RCC_OscConfig+0x378>
 8007a5c:	2302      	movs	r3, #2
 8007a5e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a62:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8007a66:	fa93 f3a3 	rbit	r3, r3
 8007a6a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8007a6e:	2302      	movs	r3, #2
 8007a70:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8007a74:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8007a78:	fa93 f3a3 	rbit	r3, r3
 8007a7c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8007a80:	4bb1      	ldr	r3, [pc, #708]	; (8007d48 <HAL_RCC_OscConfig+0x63c>)
 8007a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a84:	2202      	movs	r2, #2
 8007a86:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8007a8a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8007a8e:	fa92 f2a2 	rbit	r2, r2
 8007a92:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8007a96:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8007a9a:	fab2 f282 	clz	r2, r2
 8007a9e:	b2d2      	uxtb	r2, r2
 8007aa0:	f042 0220 	orr.w	r2, r2, #32
 8007aa4:	b2d2      	uxtb	r2, r2
 8007aa6:	f002 021f 	and.w	r2, r2, #31
 8007aaa:	2101      	movs	r1, #1
 8007aac:	fa01 f202 	lsl.w	r2, r1, r2
 8007ab0:	4013      	ands	r3, r2
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d007      	beq.n	8007ac6 <HAL_RCC_OscConfig+0x3ba>
 8007ab6:	1d3b      	adds	r3, r7, #4
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d002      	beq.n	8007ac6 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	f000 bd31 	b.w	8008528 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ac6:	4ba0      	ldr	r3, [pc, #640]	; (8007d48 <HAL_RCC_OscConfig+0x63c>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ace:	1d3b      	adds	r3, r7, #4
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	21f8      	movs	r1, #248	; 0xf8
 8007ad6:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ada:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8007ade:	fa91 f1a1 	rbit	r1, r1
 8007ae2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8007ae6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8007aea:	fab1 f181 	clz	r1, r1
 8007aee:	b2c9      	uxtb	r1, r1
 8007af0:	408b      	lsls	r3, r1
 8007af2:	4995      	ldr	r1, [pc, #596]	; (8007d48 <HAL_RCC_OscConfig+0x63c>)
 8007af4:	4313      	orrs	r3, r2
 8007af6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007af8:	e0f5      	b.n	8007ce6 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007afa:	1d3b      	adds	r3, r7, #4
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f000 8085 	beq.w	8007c10 <HAL_RCC_OscConfig+0x504>
 8007b06:	2301      	movs	r3, #1
 8007b08:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b0c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8007b10:	fa93 f3a3 	rbit	r3, r3
 8007b14:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8007b18:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b1c:	fab3 f383 	clz	r3, r3
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007b26:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	2301      	movs	r3, #1
 8007b30:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b32:	f7fc ffe5 	bl	8004b00 <HAL_GetTick>
 8007b36:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b3a:	e00a      	b.n	8007b52 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b3c:	f7fc ffe0 	bl	8004b00 <HAL_GetTick>
 8007b40:	4602      	mov	r2, r0
 8007b42:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007b46:	1ad3      	subs	r3, r2, r3
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d902      	bls.n	8007b52 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	f000 bceb 	b.w	8008528 <HAL_RCC_OscConfig+0xe1c>
 8007b52:	2302      	movs	r3, #2
 8007b54:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b58:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8007b5c:	fa93 f3a3 	rbit	r3, r3
 8007b60:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8007b64:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b68:	fab3 f383 	clz	r3, r3
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	095b      	lsrs	r3, r3, #5
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	f043 0301 	orr.w	r3, r3, #1
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d102      	bne.n	8007b82 <HAL_RCC_OscConfig+0x476>
 8007b7c:	4b72      	ldr	r3, [pc, #456]	; (8007d48 <HAL_RCC_OscConfig+0x63c>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	e013      	b.n	8007baa <HAL_RCC_OscConfig+0x49e>
 8007b82:	2302      	movs	r3, #2
 8007b84:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b88:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8007b8c:	fa93 f3a3 	rbit	r3, r3
 8007b90:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8007b94:	2302      	movs	r3, #2
 8007b96:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8007b9a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8007b9e:	fa93 f3a3 	rbit	r3, r3
 8007ba2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007ba6:	4b68      	ldr	r3, [pc, #416]	; (8007d48 <HAL_RCC_OscConfig+0x63c>)
 8007ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007baa:	2202      	movs	r2, #2
 8007bac:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8007bb0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8007bb4:	fa92 f2a2 	rbit	r2, r2
 8007bb8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8007bbc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8007bc0:	fab2 f282 	clz	r2, r2
 8007bc4:	b2d2      	uxtb	r2, r2
 8007bc6:	f042 0220 	orr.w	r2, r2, #32
 8007bca:	b2d2      	uxtb	r2, r2
 8007bcc:	f002 021f 	and.w	r2, r2, #31
 8007bd0:	2101      	movs	r1, #1
 8007bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d0af      	beq.n	8007b3c <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bdc:	4b5a      	ldr	r3, [pc, #360]	; (8007d48 <HAL_RCC_OscConfig+0x63c>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007be4:	1d3b      	adds	r3, r7, #4
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	21f8      	movs	r1, #248	; 0xf8
 8007bec:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bf0:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8007bf4:	fa91 f1a1 	rbit	r1, r1
 8007bf8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8007bfc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007c00:	fab1 f181 	clz	r1, r1
 8007c04:	b2c9      	uxtb	r1, r1
 8007c06:	408b      	lsls	r3, r1
 8007c08:	494f      	ldr	r1, [pc, #316]	; (8007d48 <HAL_RCC_OscConfig+0x63c>)
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	600b      	str	r3, [r1, #0]
 8007c0e:	e06a      	b.n	8007ce6 <HAL_RCC_OscConfig+0x5da>
 8007c10:	2301      	movs	r3, #1
 8007c12:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c16:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8007c1a:	fa93 f3a3 	rbit	r3, r3
 8007c1e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8007c22:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c26:	fab3 f383 	clz	r3, r3
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007c30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	461a      	mov	r2, r3
 8007c38:	2300      	movs	r3, #0
 8007c3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c3c:	f7fc ff60 	bl	8004b00 <HAL_GetTick>
 8007c40:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c44:	e00a      	b.n	8007c5c <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c46:	f7fc ff5b 	bl	8004b00 <HAL_GetTick>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007c50:	1ad3      	subs	r3, r2, r3
 8007c52:	2b02      	cmp	r3, #2
 8007c54:	d902      	bls.n	8007c5c <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8007c56:	2303      	movs	r3, #3
 8007c58:	f000 bc66 	b.w	8008528 <HAL_RCC_OscConfig+0xe1c>
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c62:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007c66:	fa93 f3a3 	rbit	r3, r3
 8007c6a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8007c6e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c72:	fab3 f383 	clz	r3, r3
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	095b      	lsrs	r3, r3, #5
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	f043 0301 	orr.w	r3, r3, #1
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d102      	bne.n	8007c8c <HAL_RCC_OscConfig+0x580>
 8007c86:	4b30      	ldr	r3, [pc, #192]	; (8007d48 <HAL_RCC_OscConfig+0x63c>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	e013      	b.n	8007cb4 <HAL_RCC_OscConfig+0x5a8>
 8007c8c:	2302      	movs	r3, #2
 8007c8e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c96:	fa93 f3a3 	rbit	r3, r3
 8007c9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007c9e:	2302      	movs	r3, #2
 8007ca0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007ca4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007ca8:	fa93 f3a3 	rbit	r3, r3
 8007cac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007cb0:	4b25      	ldr	r3, [pc, #148]	; (8007d48 <HAL_RCC_OscConfig+0x63c>)
 8007cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb4:	2202      	movs	r2, #2
 8007cb6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8007cba:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8007cbe:	fa92 f2a2 	rbit	r2, r2
 8007cc2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8007cc6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007cca:	fab2 f282 	clz	r2, r2
 8007cce:	b2d2      	uxtb	r2, r2
 8007cd0:	f042 0220 	orr.w	r2, r2, #32
 8007cd4:	b2d2      	uxtb	r2, r2
 8007cd6:	f002 021f 	and.w	r2, r2, #31
 8007cda:	2101      	movs	r1, #1
 8007cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8007ce0:	4013      	ands	r3, r2
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d1af      	bne.n	8007c46 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ce6:	1d3b      	adds	r3, r7, #4
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f003 0308 	and.w	r3, r3, #8
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f000 80da 	beq.w	8007eaa <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007cf6:	1d3b      	adds	r3, r7, #4
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	695b      	ldr	r3, [r3, #20]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d069      	beq.n	8007dd4 <HAL_RCC_OscConfig+0x6c8>
 8007d00:	2301      	movs	r3, #1
 8007d02:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d0a:	fa93 f3a3 	rbit	r3, r3
 8007d0e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8007d12:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d16:	fab3 f383 	clz	r3, r3
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	4b0b      	ldr	r3, [pc, #44]	; (8007d4c <HAL_RCC_OscConfig+0x640>)
 8007d20:	4413      	add	r3, r2
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	461a      	mov	r2, r3
 8007d26:	2301      	movs	r3, #1
 8007d28:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d2a:	f7fc fee9 	bl	8004b00 <HAL_GetTick>
 8007d2e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d32:	e00d      	b.n	8007d50 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d34:	f7fc fee4 	bl	8004b00 <HAL_GetTick>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007d3e:	1ad3      	subs	r3, r2, r3
 8007d40:	2b02      	cmp	r3, #2
 8007d42:	d905      	bls.n	8007d50 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8007d44:	2303      	movs	r3, #3
 8007d46:	e3ef      	b.n	8008528 <HAL_RCC_OscConfig+0xe1c>
 8007d48:	40021000 	.word	0x40021000
 8007d4c:	10908120 	.word	0x10908120
 8007d50:	2302      	movs	r3, #2
 8007d52:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d5a:	fa93 f2a3 	rbit	r2, r3
 8007d5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d62:	601a      	str	r2, [r3, #0]
 8007d64:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8007d68:	2202      	movs	r2, #2
 8007d6a:	601a      	str	r2, [r3, #0]
 8007d6c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	fa93 f2a3 	rbit	r2, r3
 8007d76:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8007d7a:	601a      	str	r2, [r3, #0]
 8007d7c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8007d80:	2202      	movs	r2, #2
 8007d82:	601a      	str	r2, [r3, #0]
 8007d84:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	fa93 f2a3 	rbit	r2, r3
 8007d8e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8007d92:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d94:	4ba4      	ldr	r3, [pc, #656]	; (8008028 <HAL_RCC_OscConfig+0x91c>)
 8007d96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d98:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8007d9c:	2102      	movs	r1, #2
 8007d9e:	6019      	str	r1, [r3, #0]
 8007da0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	fa93 f1a3 	rbit	r1, r3
 8007daa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8007dae:	6019      	str	r1, [r3, #0]
  return result;
 8007db0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	fab3 f383 	clz	r3, r3
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	f003 031f 	and.w	r3, r3, #31
 8007dc6:	2101      	movs	r1, #1
 8007dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8007dcc:	4013      	ands	r3, r2
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d0b0      	beq.n	8007d34 <HAL_RCC_OscConfig+0x628>
 8007dd2:	e06a      	b.n	8007eaa <HAL_RCC_OscConfig+0x79e>
 8007dd4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8007dd8:	2201      	movs	r2, #1
 8007dda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ddc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	fa93 f2a3 	rbit	r2, r3
 8007de6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007dea:	601a      	str	r2, [r3, #0]
  return result;
 8007dec:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007df0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007df2:	fab3 f383 	clz	r3, r3
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	461a      	mov	r2, r3
 8007dfa:	4b8c      	ldr	r3, [pc, #560]	; (800802c <HAL_RCC_OscConfig+0x920>)
 8007dfc:	4413      	add	r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	461a      	mov	r2, r3
 8007e02:	2300      	movs	r3, #0
 8007e04:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e06:	f7fc fe7b 	bl	8004b00 <HAL_GetTick>
 8007e0a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e0e:	e009      	b.n	8007e24 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e10:	f7fc fe76 	bl	8004b00 <HAL_GetTick>
 8007e14:	4602      	mov	r2, r0
 8007e16:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007e1a:	1ad3      	subs	r3, r2, r3
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	d901      	bls.n	8007e24 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8007e20:	2303      	movs	r3, #3
 8007e22:	e381      	b.n	8008528 <HAL_RCC_OscConfig+0xe1c>
 8007e24:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8007e28:	2202      	movs	r2, #2
 8007e2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e2c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	fa93 f2a3 	rbit	r2, r3
 8007e36:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8007e3a:	601a      	str	r2, [r3, #0]
 8007e3c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8007e40:	2202      	movs	r2, #2
 8007e42:	601a      	str	r2, [r3, #0]
 8007e44:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	fa93 f2a3 	rbit	r2, r3
 8007e4e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8007e58:	2202      	movs	r2, #2
 8007e5a:	601a      	str	r2, [r3, #0]
 8007e5c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	fa93 f2a3 	rbit	r2, r3
 8007e66:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8007e6a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e6c:	4b6e      	ldr	r3, [pc, #440]	; (8008028 <HAL_RCC_OscConfig+0x91c>)
 8007e6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e70:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007e74:	2102      	movs	r1, #2
 8007e76:	6019      	str	r1, [r3, #0]
 8007e78:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	fa93 f1a3 	rbit	r1, r3
 8007e82:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8007e86:	6019      	str	r1, [r3, #0]
  return result;
 8007e88:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	fab3 f383 	clz	r3, r3
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	f003 031f 	and.w	r3, r3, #31
 8007e9e:	2101      	movs	r1, #1
 8007ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d1b2      	bne.n	8007e10 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007eaa:	1d3b      	adds	r3, r7, #4
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f003 0304 	and.w	r3, r3, #4
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f000 8157 	beq.w	8008168 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ec0:	4b59      	ldr	r3, [pc, #356]	; (8008028 <HAL_RCC_OscConfig+0x91c>)
 8007ec2:	69db      	ldr	r3, [r3, #28]
 8007ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d112      	bne.n	8007ef2 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ecc:	4b56      	ldr	r3, [pc, #344]	; (8008028 <HAL_RCC_OscConfig+0x91c>)
 8007ece:	69db      	ldr	r3, [r3, #28]
 8007ed0:	4a55      	ldr	r2, [pc, #340]	; (8008028 <HAL_RCC_OscConfig+0x91c>)
 8007ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ed6:	61d3      	str	r3, [r2, #28]
 8007ed8:	4b53      	ldr	r3, [pc, #332]	; (8008028 <HAL_RCC_OscConfig+0x91c>)
 8007eda:	69db      	ldr	r3, [r3, #28]
 8007edc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8007ee0:	f107 030c 	add.w	r3, r7, #12
 8007ee4:	601a      	str	r2, [r3, #0]
 8007ee6:	f107 030c 	add.w	r3, r7, #12
 8007eea:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8007eec:	2301      	movs	r3, #1
 8007eee:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ef2:	4b4f      	ldr	r3, [pc, #316]	; (8008030 <HAL_RCC_OscConfig+0x924>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d11a      	bne.n	8007f34 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007efe:	4b4c      	ldr	r3, [pc, #304]	; (8008030 <HAL_RCC_OscConfig+0x924>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a4b      	ldr	r2, [pc, #300]	; (8008030 <HAL_RCC_OscConfig+0x924>)
 8007f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f08:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f0a:	f7fc fdf9 	bl	8004b00 <HAL_GetTick>
 8007f0e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f12:	e009      	b.n	8007f28 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f14:	f7fc fdf4 	bl	8004b00 <HAL_GetTick>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007f1e:	1ad3      	subs	r3, r2, r3
 8007f20:	2b64      	cmp	r3, #100	; 0x64
 8007f22:	d901      	bls.n	8007f28 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8007f24:	2303      	movs	r3, #3
 8007f26:	e2ff      	b.n	8008528 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f28:	4b41      	ldr	r3, [pc, #260]	; (8008030 <HAL_RCC_OscConfig+0x924>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d0ef      	beq.n	8007f14 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f34:	1d3b      	adds	r3, r7, #4
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d106      	bne.n	8007f4c <HAL_RCC_OscConfig+0x840>
 8007f3e:	4b3a      	ldr	r3, [pc, #232]	; (8008028 <HAL_RCC_OscConfig+0x91c>)
 8007f40:	6a1b      	ldr	r3, [r3, #32]
 8007f42:	4a39      	ldr	r2, [pc, #228]	; (8008028 <HAL_RCC_OscConfig+0x91c>)
 8007f44:	f043 0301 	orr.w	r3, r3, #1
 8007f48:	6213      	str	r3, [r2, #32]
 8007f4a:	e02f      	b.n	8007fac <HAL_RCC_OscConfig+0x8a0>
 8007f4c:	1d3b      	adds	r3, r7, #4
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d10c      	bne.n	8007f70 <HAL_RCC_OscConfig+0x864>
 8007f56:	4b34      	ldr	r3, [pc, #208]	; (8008028 <HAL_RCC_OscConfig+0x91c>)
 8007f58:	6a1b      	ldr	r3, [r3, #32]
 8007f5a:	4a33      	ldr	r2, [pc, #204]	; (8008028 <HAL_RCC_OscConfig+0x91c>)
 8007f5c:	f023 0301 	bic.w	r3, r3, #1
 8007f60:	6213      	str	r3, [r2, #32]
 8007f62:	4b31      	ldr	r3, [pc, #196]	; (8008028 <HAL_RCC_OscConfig+0x91c>)
 8007f64:	6a1b      	ldr	r3, [r3, #32]
 8007f66:	4a30      	ldr	r2, [pc, #192]	; (8008028 <HAL_RCC_OscConfig+0x91c>)
 8007f68:	f023 0304 	bic.w	r3, r3, #4
 8007f6c:	6213      	str	r3, [r2, #32]
 8007f6e:	e01d      	b.n	8007fac <HAL_RCC_OscConfig+0x8a0>
 8007f70:	1d3b      	adds	r3, r7, #4
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	2b05      	cmp	r3, #5
 8007f78:	d10c      	bne.n	8007f94 <HAL_RCC_OscConfig+0x888>
 8007f7a:	4b2b      	ldr	r3, [pc, #172]	; (8008028 <HAL_RCC_OscConfig+0x91c>)
 8007f7c:	6a1b      	ldr	r3, [r3, #32]
 8007f7e:	4a2a      	ldr	r2, [pc, #168]	; (8008028 <HAL_RCC_OscConfig+0x91c>)
 8007f80:	f043 0304 	orr.w	r3, r3, #4
 8007f84:	6213      	str	r3, [r2, #32]
 8007f86:	4b28      	ldr	r3, [pc, #160]	; (8008028 <HAL_RCC_OscConfig+0x91c>)
 8007f88:	6a1b      	ldr	r3, [r3, #32]
 8007f8a:	4a27      	ldr	r2, [pc, #156]	; (8008028 <HAL_RCC_OscConfig+0x91c>)
 8007f8c:	f043 0301 	orr.w	r3, r3, #1
 8007f90:	6213      	str	r3, [r2, #32]
 8007f92:	e00b      	b.n	8007fac <HAL_RCC_OscConfig+0x8a0>
 8007f94:	4b24      	ldr	r3, [pc, #144]	; (8008028 <HAL_RCC_OscConfig+0x91c>)
 8007f96:	6a1b      	ldr	r3, [r3, #32]
 8007f98:	4a23      	ldr	r2, [pc, #140]	; (8008028 <HAL_RCC_OscConfig+0x91c>)
 8007f9a:	f023 0301 	bic.w	r3, r3, #1
 8007f9e:	6213      	str	r3, [r2, #32]
 8007fa0:	4b21      	ldr	r3, [pc, #132]	; (8008028 <HAL_RCC_OscConfig+0x91c>)
 8007fa2:	6a1b      	ldr	r3, [r3, #32]
 8007fa4:	4a20      	ldr	r2, [pc, #128]	; (8008028 <HAL_RCC_OscConfig+0x91c>)
 8007fa6:	f023 0304 	bic.w	r3, r3, #4
 8007faa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007fac:	1d3b      	adds	r3, r7, #4
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d06a      	beq.n	800808c <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007fb6:	f7fc fda3 	bl	8004b00 <HAL_GetTick>
 8007fba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fbe:	e00b      	b.n	8007fd8 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fc0:	f7fc fd9e 	bl	8004b00 <HAL_GetTick>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007fca:	1ad3      	subs	r3, r2, r3
 8007fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d901      	bls.n	8007fd8 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	e2a7      	b.n	8008528 <HAL_RCC_OscConfig+0xe1c>
 8007fd8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007fdc:	2202      	movs	r2, #2
 8007fde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fe0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	fa93 f2a3 	rbit	r2, r3
 8007fea:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007fee:	601a      	str	r2, [r3, #0]
 8007ff0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8007ff4:	2202      	movs	r2, #2
 8007ff6:	601a      	str	r2, [r3, #0]
 8007ff8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	fa93 f2a3 	rbit	r2, r3
 8008002:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8008006:	601a      	str	r2, [r3, #0]
  return result;
 8008008:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800800c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800800e:	fab3 f383 	clz	r3, r3
 8008012:	b2db      	uxtb	r3, r3
 8008014:	095b      	lsrs	r3, r3, #5
 8008016:	b2db      	uxtb	r3, r3
 8008018:	f043 0302 	orr.w	r3, r3, #2
 800801c:	b2db      	uxtb	r3, r3
 800801e:	2b02      	cmp	r3, #2
 8008020:	d108      	bne.n	8008034 <HAL_RCC_OscConfig+0x928>
 8008022:	4b01      	ldr	r3, [pc, #4]	; (8008028 <HAL_RCC_OscConfig+0x91c>)
 8008024:	6a1b      	ldr	r3, [r3, #32]
 8008026:	e013      	b.n	8008050 <HAL_RCC_OscConfig+0x944>
 8008028:	40021000 	.word	0x40021000
 800802c:	10908120 	.word	0x10908120
 8008030:	40007000 	.word	0x40007000
 8008034:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8008038:	2202      	movs	r2, #2
 800803a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800803c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	fa93 f2a3 	rbit	r2, r3
 8008046:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800804a:	601a      	str	r2, [r3, #0]
 800804c:	4bc0      	ldr	r3, [pc, #768]	; (8008350 <HAL_RCC_OscConfig+0xc44>)
 800804e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008050:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8008054:	2102      	movs	r1, #2
 8008056:	6011      	str	r1, [r2, #0]
 8008058:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800805c:	6812      	ldr	r2, [r2, #0]
 800805e:	fa92 f1a2 	rbit	r1, r2
 8008062:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8008066:	6011      	str	r1, [r2, #0]
  return result;
 8008068:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800806c:	6812      	ldr	r2, [r2, #0]
 800806e:	fab2 f282 	clz	r2, r2
 8008072:	b2d2      	uxtb	r2, r2
 8008074:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008078:	b2d2      	uxtb	r2, r2
 800807a:	f002 021f 	and.w	r2, r2, #31
 800807e:	2101      	movs	r1, #1
 8008080:	fa01 f202 	lsl.w	r2, r1, r2
 8008084:	4013      	ands	r3, r2
 8008086:	2b00      	cmp	r3, #0
 8008088:	d09a      	beq.n	8007fc0 <HAL_RCC_OscConfig+0x8b4>
 800808a:	e063      	b.n	8008154 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800808c:	f7fc fd38 	bl	8004b00 <HAL_GetTick>
 8008090:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008094:	e00b      	b.n	80080ae <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008096:	f7fc fd33 	bl	8004b00 <HAL_GetTick>
 800809a:	4602      	mov	r2, r0
 800809c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80080a0:	1ad3      	subs	r3, r2, r3
 80080a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d901      	bls.n	80080ae <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80080aa:	2303      	movs	r3, #3
 80080ac:	e23c      	b.n	8008528 <HAL_RCC_OscConfig+0xe1c>
 80080ae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80080b2:	2202      	movs	r2, #2
 80080b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080b6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	fa93 f2a3 	rbit	r2, r3
 80080c0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80080c4:	601a      	str	r2, [r3, #0]
 80080c6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80080ca:	2202      	movs	r2, #2
 80080cc:	601a      	str	r2, [r3, #0]
 80080ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	fa93 f2a3 	rbit	r2, r3
 80080d8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80080dc:	601a      	str	r2, [r3, #0]
  return result;
 80080de:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80080e2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80080e4:	fab3 f383 	clz	r3, r3
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	095b      	lsrs	r3, r3, #5
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	f043 0302 	orr.w	r3, r3, #2
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d102      	bne.n	80080fe <HAL_RCC_OscConfig+0x9f2>
 80080f8:	4b95      	ldr	r3, [pc, #596]	; (8008350 <HAL_RCC_OscConfig+0xc44>)
 80080fa:	6a1b      	ldr	r3, [r3, #32]
 80080fc:	e00d      	b.n	800811a <HAL_RCC_OscConfig+0xa0e>
 80080fe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8008102:	2202      	movs	r2, #2
 8008104:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008106:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	fa93 f2a3 	rbit	r2, r3
 8008110:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008114:	601a      	str	r2, [r3, #0]
 8008116:	4b8e      	ldr	r3, [pc, #568]	; (8008350 <HAL_RCC_OscConfig+0xc44>)
 8008118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800811e:	2102      	movs	r1, #2
 8008120:	6011      	str	r1, [r2, #0]
 8008122:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8008126:	6812      	ldr	r2, [r2, #0]
 8008128:	fa92 f1a2 	rbit	r1, r2
 800812c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8008130:	6011      	str	r1, [r2, #0]
  return result;
 8008132:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8008136:	6812      	ldr	r2, [r2, #0]
 8008138:	fab2 f282 	clz	r2, r2
 800813c:	b2d2      	uxtb	r2, r2
 800813e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008142:	b2d2      	uxtb	r2, r2
 8008144:	f002 021f 	and.w	r2, r2, #31
 8008148:	2101      	movs	r1, #1
 800814a:	fa01 f202 	lsl.w	r2, r1, r2
 800814e:	4013      	ands	r3, r2
 8008150:	2b00      	cmp	r3, #0
 8008152:	d1a0      	bne.n	8008096 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008154:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8008158:	2b01      	cmp	r3, #1
 800815a:	d105      	bne.n	8008168 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800815c:	4b7c      	ldr	r3, [pc, #496]	; (8008350 <HAL_RCC_OscConfig+0xc44>)
 800815e:	69db      	ldr	r3, [r3, #28]
 8008160:	4a7b      	ldr	r2, [pc, #492]	; (8008350 <HAL_RCC_OscConfig+0xc44>)
 8008162:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008166:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008168:	1d3b      	adds	r3, r7, #4
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	699b      	ldr	r3, [r3, #24]
 800816e:	2b00      	cmp	r3, #0
 8008170:	f000 81d9 	beq.w	8008526 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008174:	4b76      	ldr	r3, [pc, #472]	; (8008350 <HAL_RCC_OscConfig+0xc44>)
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	f003 030c 	and.w	r3, r3, #12
 800817c:	2b08      	cmp	r3, #8
 800817e:	f000 81a6 	beq.w	80084ce <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008182:	1d3b      	adds	r3, r7, #4
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	699b      	ldr	r3, [r3, #24]
 8008188:	2b02      	cmp	r3, #2
 800818a:	f040 811e 	bne.w	80083ca <HAL_RCC_OscConfig+0xcbe>
 800818e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8008192:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008196:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008198:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	fa93 f2a3 	rbit	r2, r3
 80081a2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80081a6:	601a      	str	r2, [r3, #0]
  return result;
 80081a8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80081ac:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081ae:	fab3 f383 	clz	r3, r3
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80081b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	461a      	mov	r2, r3
 80081c0:	2300      	movs	r3, #0
 80081c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081c4:	f7fc fc9c 	bl	8004b00 <HAL_GetTick>
 80081c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80081cc:	e009      	b.n	80081e2 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081ce:	f7fc fc97 	bl	8004b00 <HAL_GetTick>
 80081d2:	4602      	mov	r2, r0
 80081d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80081d8:	1ad3      	subs	r3, r2, r3
 80081da:	2b02      	cmp	r3, #2
 80081dc:	d901      	bls.n	80081e2 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80081de:	2303      	movs	r3, #3
 80081e0:	e1a2      	b.n	8008528 <HAL_RCC_OscConfig+0xe1c>
 80081e2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80081e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80081ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081ec:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	fa93 f2a3 	rbit	r2, r3
 80081f6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80081fa:	601a      	str	r2, [r3, #0]
  return result;
 80081fc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008200:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008202:	fab3 f383 	clz	r3, r3
 8008206:	b2db      	uxtb	r3, r3
 8008208:	095b      	lsrs	r3, r3, #5
 800820a:	b2db      	uxtb	r3, r3
 800820c:	f043 0301 	orr.w	r3, r3, #1
 8008210:	b2db      	uxtb	r3, r3
 8008212:	2b01      	cmp	r3, #1
 8008214:	d102      	bne.n	800821c <HAL_RCC_OscConfig+0xb10>
 8008216:	4b4e      	ldr	r3, [pc, #312]	; (8008350 <HAL_RCC_OscConfig+0xc44>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	e01b      	b.n	8008254 <HAL_RCC_OscConfig+0xb48>
 800821c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008220:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008224:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008226:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	fa93 f2a3 	rbit	r2, r3
 8008230:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008234:	601a      	str	r2, [r3, #0]
 8008236:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800823a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800823e:	601a      	str	r2, [r3, #0]
 8008240:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	fa93 f2a3 	rbit	r2, r3
 800824a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800824e:	601a      	str	r2, [r3, #0]
 8008250:	4b3f      	ldr	r3, [pc, #252]	; (8008350 <HAL_RCC_OscConfig+0xc44>)
 8008252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008254:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8008258:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800825c:	6011      	str	r1, [r2, #0]
 800825e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8008262:	6812      	ldr	r2, [r2, #0]
 8008264:	fa92 f1a2 	rbit	r1, r2
 8008268:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800826c:	6011      	str	r1, [r2, #0]
  return result;
 800826e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8008272:	6812      	ldr	r2, [r2, #0]
 8008274:	fab2 f282 	clz	r2, r2
 8008278:	b2d2      	uxtb	r2, r2
 800827a:	f042 0220 	orr.w	r2, r2, #32
 800827e:	b2d2      	uxtb	r2, r2
 8008280:	f002 021f 	and.w	r2, r2, #31
 8008284:	2101      	movs	r1, #1
 8008286:	fa01 f202 	lsl.w	r2, r1, r2
 800828a:	4013      	ands	r3, r2
 800828c:	2b00      	cmp	r3, #0
 800828e:	d19e      	bne.n	80081ce <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008290:	4b2f      	ldr	r3, [pc, #188]	; (8008350 <HAL_RCC_OscConfig+0xc44>)
 8008292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008294:	f023 020f 	bic.w	r2, r3, #15
 8008298:	1d3b      	adds	r3, r7, #4
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829e:	492c      	ldr	r1, [pc, #176]	; (8008350 <HAL_RCC_OscConfig+0xc44>)
 80082a0:	4313      	orrs	r3, r2
 80082a2:	62cb      	str	r3, [r1, #44]	; 0x2c
 80082a4:	4b2a      	ldr	r3, [pc, #168]	; (8008350 <HAL_RCC_OscConfig+0xc44>)
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80082ac:	1d3b      	adds	r3, r7, #4
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	6a19      	ldr	r1, [r3, #32]
 80082b2:	1d3b      	adds	r3, r7, #4
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	69db      	ldr	r3, [r3, #28]
 80082b8:	430b      	orrs	r3, r1
 80082ba:	4925      	ldr	r1, [pc, #148]	; (8008350 <HAL_RCC_OscConfig+0xc44>)
 80082bc:	4313      	orrs	r3, r2
 80082be:	604b      	str	r3, [r1, #4]
 80082c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80082c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80082c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082ca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	fa93 f2a3 	rbit	r2, r3
 80082d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80082d8:	601a      	str	r2, [r3, #0]
  return result;
 80082da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80082de:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80082e0:	fab3 f383 	clz	r3, r3
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80082ea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	461a      	mov	r2, r3
 80082f2:	2301      	movs	r3, #1
 80082f4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082f6:	f7fc fc03 	bl	8004b00 <HAL_GetTick>
 80082fa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80082fe:	e009      	b.n	8008314 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008300:	f7fc fbfe 	bl	8004b00 <HAL_GetTick>
 8008304:	4602      	mov	r2, r0
 8008306:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800830a:	1ad3      	subs	r3, r2, r3
 800830c:	2b02      	cmp	r3, #2
 800830e:	d901      	bls.n	8008314 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8008310:	2303      	movs	r3, #3
 8008312:	e109      	b.n	8008528 <HAL_RCC_OscConfig+0xe1c>
 8008314:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008318:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800831c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800831e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	fa93 f2a3 	rbit	r2, r3
 8008328:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800832c:	601a      	str	r2, [r3, #0]
  return result;
 800832e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008332:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008334:	fab3 f383 	clz	r3, r3
 8008338:	b2db      	uxtb	r3, r3
 800833a:	095b      	lsrs	r3, r3, #5
 800833c:	b2db      	uxtb	r3, r3
 800833e:	f043 0301 	orr.w	r3, r3, #1
 8008342:	b2db      	uxtb	r3, r3
 8008344:	2b01      	cmp	r3, #1
 8008346:	d105      	bne.n	8008354 <HAL_RCC_OscConfig+0xc48>
 8008348:	4b01      	ldr	r3, [pc, #4]	; (8008350 <HAL_RCC_OscConfig+0xc44>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	e01e      	b.n	800838c <HAL_RCC_OscConfig+0xc80>
 800834e:	bf00      	nop
 8008350:	40021000 	.word	0x40021000
 8008354:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008358:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800835c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800835e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	fa93 f2a3 	rbit	r2, r3
 8008368:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800836c:	601a      	str	r2, [r3, #0]
 800836e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008372:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008376:	601a      	str	r2, [r3, #0]
 8008378:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	fa93 f2a3 	rbit	r2, r3
 8008382:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008386:	601a      	str	r2, [r3, #0]
 8008388:	4b6a      	ldr	r3, [pc, #424]	; (8008534 <HAL_RCC_OscConfig+0xe28>)
 800838a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8008390:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008394:	6011      	str	r1, [r2, #0]
 8008396:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800839a:	6812      	ldr	r2, [r2, #0]
 800839c:	fa92 f1a2 	rbit	r1, r2
 80083a0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80083a4:	6011      	str	r1, [r2, #0]
  return result;
 80083a6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80083aa:	6812      	ldr	r2, [r2, #0]
 80083ac:	fab2 f282 	clz	r2, r2
 80083b0:	b2d2      	uxtb	r2, r2
 80083b2:	f042 0220 	orr.w	r2, r2, #32
 80083b6:	b2d2      	uxtb	r2, r2
 80083b8:	f002 021f 	and.w	r2, r2, #31
 80083bc:	2101      	movs	r1, #1
 80083be:	fa01 f202 	lsl.w	r2, r1, r2
 80083c2:	4013      	ands	r3, r2
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d09b      	beq.n	8008300 <HAL_RCC_OscConfig+0xbf4>
 80083c8:	e0ad      	b.n	8008526 <HAL_RCC_OscConfig+0xe1a>
 80083ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80083ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80083d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	fa93 f2a3 	rbit	r2, r3
 80083de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80083e2:	601a      	str	r2, [r3, #0]
  return result;
 80083e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80083e8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083ea:	fab3 f383 	clz	r3, r3
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80083f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	461a      	mov	r2, r3
 80083fc:	2300      	movs	r3, #0
 80083fe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008400:	f7fc fb7e 	bl	8004b00 <HAL_GetTick>
 8008404:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008408:	e009      	b.n	800841e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800840a:	f7fc fb79 	bl	8004b00 <HAL_GetTick>
 800840e:	4602      	mov	r2, r0
 8008410:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008414:	1ad3      	subs	r3, r2, r3
 8008416:	2b02      	cmp	r3, #2
 8008418:	d901      	bls.n	800841e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800841a:	2303      	movs	r3, #3
 800841c:	e084      	b.n	8008528 <HAL_RCC_OscConfig+0xe1c>
 800841e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008422:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008426:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008428:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	fa93 f2a3 	rbit	r2, r3
 8008432:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008436:	601a      	str	r2, [r3, #0]
  return result;
 8008438:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800843c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800843e:	fab3 f383 	clz	r3, r3
 8008442:	b2db      	uxtb	r3, r3
 8008444:	095b      	lsrs	r3, r3, #5
 8008446:	b2db      	uxtb	r3, r3
 8008448:	f043 0301 	orr.w	r3, r3, #1
 800844c:	b2db      	uxtb	r3, r3
 800844e:	2b01      	cmp	r3, #1
 8008450:	d102      	bne.n	8008458 <HAL_RCC_OscConfig+0xd4c>
 8008452:	4b38      	ldr	r3, [pc, #224]	; (8008534 <HAL_RCC_OscConfig+0xe28>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	e01b      	b.n	8008490 <HAL_RCC_OscConfig+0xd84>
 8008458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800845c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008460:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	fa93 f2a3 	rbit	r2, r3
 800846c:	f107 0320 	add.w	r3, r7, #32
 8008470:	601a      	str	r2, [r3, #0]
 8008472:	f107 031c 	add.w	r3, r7, #28
 8008476:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800847a:	601a      	str	r2, [r3, #0]
 800847c:	f107 031c 	add.w	r3, r7, #28
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	fa93 f2a3 	rbit	r2, r3
 8008486:	f107 0318 	add.w	r3, r7, #24
 800848a:	601a      	str	r2, [r3, #0]
 800848c:	4b29      	ldr	r3, [pc, #164]	; (8008534 <HAL_RCC_OscConfig+0xe28>)
 800848e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008490:	f107 0214 	add.w	r2, r7, #20
 8008494:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008498:	6011      	str	r1, [r2, #0]
 800849a:	f107 0214 	add.w	r2, r7, #20
 800849e:	6812      	ldr	r2, [r2, #0]
 80084a0:	fa92 f1a2 	rbit	r1, r2
 80084a4:	f107 0210 	add.w	r2, r7, #16
 80084a8:	6011      	str	r1, [r2, #0]
  return result;
 80084aa:	f107 0210 	add.w	r2, r7, #16
 80084ae:	6812      	ldr	r2, [r2, #0]
 80084b0:	fab2 f282 	clz	r2, r2
 80084b4:	b2d2      	uxtb	r2, r2
 80084b6:	f042 0220 	orr.w	r2, r2, #32
 80084ba:	b2d2      	uxtb	r2, r2
 80084bc:	f002 021f 	and.w	r2, r2, #31
 80084c0:	2101      	movs	r1, #1
 80084c2:	fa01 f202 	lsl.w	r2, r1, r2
 80084c6:	4013      	ands	r3, r2
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d19e      	bne.n	800840a <HAL_RCC_OscConfig+0xcfe>
 80084cc:	e02b      	b.n	8008526 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80084ce:	1d3b      	adds	r3, r7, #4
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	699b      	ldr	r3, [r3, #24]
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d101      	bne.n	80084dc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80084d8:	2301      	movs	r3, #1
 80084da:	e025      	b.n	8008528 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80084dc:	4b15      	ldr	r3, [pc, #84]	; (8008534 <HAL_RCC_OscConfig+0xe28>)
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80084e4:	4b13      	ldr	r3, [pc, #76]	; (8008534 <HAL_RCC_OscConfig+0xe28>)
 80084e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80084ec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80084f0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80084f4:	1d3b      	adds	r3, r7, #4
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	69db      	ldr	r3, [r3, #28]
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d111      	bne.n	8008522 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80084fe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008502:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008506:	1d3b      	adds	r3, r7, #4
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800850c:	429a      	cmp	r2, r3
 800850e:	d108      	bne.n	8008522 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8008510:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008514:	f003 020f 	and.w	r2, r3, #15
 8008518:	1d3b      	adds	r3, r7, #4
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800851e:	429a      	cmp	r2, r3
 8008520:	d001      	beq.n	8008526 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e000      	b.n	8008528 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8008526:	2300      	movs	r3, #0
}
 8008528:	4618      	mov	r0, r3
 800852a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	40021000 	.word	0x40021000

08008538 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b09e      	sub	sp, #120	; 0x78
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8008542:	2300      	movs	r3, #0
 8008544:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d101      	bne.n	8008550 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800854c:	2301      	movs	r3, #1
 800854e:	e162      	b.n	8008816 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008550:	4b90      	ldr	r3, [pc, #576]	; (8008794 <HAL_RCC_ClockConfig+0x25c>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f003 0307 	and.w	r3, r3, #7
 8008558:	683a      	ldr	r2, [r7, #0]
 800855a:	429a      	cmp	r2, r3
 800855c:	d910      	bls.n	8008580 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800855e:	4b8d      	ldr	r3, [pc, #564]	; (8008794 <HAL_RCC_ClockConfig+0x25c>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f023 0207 	bic.w	r2, r3, #7
 8008566:	498b      	ldr	r1, [pc, #556]	; (8008794 <HAL_RCC_ClockConfig+0x25c>)
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	4313      	orrs	r3, r2
 800856c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800856e:	4b89      	ldr	r3, [pc, #548]	; (8008794 <HAL_RCC_ClockConfig+0x25c>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 0307 	and.w	r3, r3, #7
 8008576:	683a      	ldr	r2, [r7, #0]
 8008578:	429a      	cmp	r2, r3
 800857a:	d001      	beq.n	8008580 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	e14a      	b.n	8008816 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 0302 	and.w	r3, r3, #2
 8008588:	2b00      	cmp	r3, #0
 800858a:	d008      	beq.n	800859e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800858c:	4b82      	ldr	r3, [pc, #520]	; (8008798 <HAL_RCC_ClockConfig+0x260>)
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	497f      	ldr	r1, [pc, #508]	; (8008798 <HAL_RCC_ClockConfig+0x260>)
 800859a:	4313      	orrs	r3, r2
 800859c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 0301 	and.w	r3, r3, #1
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	f000 80dc 	beq.w	8008764 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d13c      	bne.n	800862e <HAL_RCC_ClockConfig+0xf6>
 80085b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80085b8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085bc:	fa93 f3a3 	rbit	r3, r3
 80085c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80085c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085c4:	fab3 f383 	clz	r3, r3
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	095b      	lsrs	r3, r3, #5
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	f043 0301 	orr.w	r3, r3, #1
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d102      	bne.n	80085de <HAL_RCC_ClockConfig+0xa6>
 80085d8:	4b6f      	ldr	r3, [pc, #444]	; (8008798 <HAL_RCC_ClockConfig+0x260>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	e00f      	b.n	80085fe <HAL_RCC_ClockConfig+0xc6>
 80085de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80085e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80085e6:	fa93 f3a3 	rbit	r3, r3
 80085ea:	667b      	str	r3, [r7, #100]	; 0x64
 80085ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80085f0:	663b      	str	r3, [r7, #96]	; 0x60
 80085f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085f4:	fa93 f3a3 	rbit	r3, r3
 80085f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085fa:	4b67      	ldr	r3, [pc, #412]	; (8008798 <HAL_RCC_ClockConfig+0x260>)
 80085fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008602:	65ba      	str	r2, [r7, #88]	; 0x58
 8008604:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008606:	fa92 f2a2 	rbit	r2, r2
 800860a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800860c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800860e:	fab2 f282 	clz	r2, r2
 8008612:	b2d2      	uxtb	r2, r2
 8008614:	f042 0220 	orr.w	r2, r2, #32
 8008618:	b2d2      	uxtb	r2, r2
 800861a:	f002 021f 	and.w	r2, r2, #31
 800861e:	2101      	movs	r1, #1
 8008620:	fa01 f202 	lsl.w	r2, r1, r2
 8008624:	4013      	ands	r3, r2
 8008626:	2b00      	cmp	r3, #0
 8008628:	d17b      	bne.n	8008722 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	e0f3      	b.n	8008816 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	2b02      	cmp	r3, #2
 8008634:	d13c      	bne.n	80086b0 <HAL_RCC_ClockConfig+0x178>
 8008636:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800863a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800863c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800863e:	fa93 f3a3 	rbit	r3, r3
 8008642:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008646:	fab3 f383 	clz	r3, r3
 800864a:	b2db      	uxtb	r3, r3
 800864c:	095b      	lsrs	r3, r3, #5
 800864e:	b2db      	uxtb	r3, r3
 8008650:	f043 0301 	orr.w	r3, r3, #1
 8008654:	b2db      	uxtb	r3, r3
 8008656:	2b01      	cmp	r3, #1
 8008658:	d102      	bne.n	8008660 <HAL_RCC_ClockConfig+0x128>
 800865a:	4b4f      	ldr	r3, [pc, #316]	; (8008798 <HAL_RCC_ClockConfig+0x260>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	e00f      	b.n	8008680 <HAL_RCC_ClockConfig+0x148>
 8008660:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008664:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008668:	fa93 f3a3 	rbit	r3, r3
 800866c:	647b      	str	r3, [r7, #68]	; 0x44
 800866e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008672:	643b      	str	r3, [r7, #64]	; 0x40
 8008674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008676:	fa93 f3a3 	rbit	r3, r3
 800867a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800867c:	4b46      	ldr	r3, [pc, #280]	; (8008798 <HAL_RCC_ClockConfig+0x260>)
 800867e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008680:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008684:	63ba      	str	r2, [r7, #56]	; 0x38
 8008686:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008688:	fa92 f2a2 	rbit	r2, r2
 800868c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800868e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008690:	fab2 f282 	clz	r2, r2
 8008694:	b2d2      	uxtb	r2, r2
 8008696:	f042 0220 	orr.w	r2, r2, #32
 800869a:	b2d2      	uxtb	r2, r2
 800869c:	f002 021f 	and.w	r2, r2, #31
 80086a0:	2101      	movs	r1, #1
 80086a2:	fa01 f202 	lsl.w	r2, r1, r2
 80086a6:	4013      	ands	r3, r2
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d13a      	bne.n	8008722 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	e0b2      	b.n	8008816 <HAL_RCC_ClockConfig+0x2de>
 80086b0:	2302      	movs	r3, #2
 80086b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b6:	fa93 f3a3 	rbit	r3, r3
 80086ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80086bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086be:	fab3 f383 	clz	r3, r3
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	095b      	lsrs	r3, r3, #5
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	f043 0301 	orr.w	r3, r3, #1
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d102      	bne.n	80086d8 <HAL_RCC_ClockConfig+0x1a0>
 80086d2:	4b31      	ldr	r3, [pc, #196]	; (8008798 <HAL_RCC_ClockConfig+0x260>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	e00d      	b.n	80086f4 <HAL_RCC_ClockConfig+0x1bc>
 80086d8:	2302      	movs	r3, #2
 80086da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086de:	fa93 f3a3 	rbit	r3, r3
 80086e2:	627b      	str	r3, [r7, #36]	; 0x24
 80086e4:	2302      	movs	r3, #2
 80086e6:	623b      	str	r3, [r7, #32]
 80086e8:	6a3b      	ldr	r3, [r7, #32]
 80086ea:	fa93 f3a3 	rbit	r3, r3
 80086ee:	61fb      	str	r3, [r7, #28]
 80086f0:	4b29      	ldr	r3, [pc, #164]	; (8008798 <HAL_RCC_ClockConfig+0x260>)
 80086f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f4:	2202      	movs	r2, #2
 80086f6:	61ba      	str	r2, [r7, #24]
 80086f8:	69ba      	ldr	r2, [r7, #24]
 80086fa:	fa92 f2a2 	rbit	r2, r2
 80086fe:	617a      	str	r2, [r7, #20]
  return result;
 8008700:	697a      	ldr	r2, [r7, #20]
 8008702:	fab2 f282 	clz	r2, r2
 8008706:	b2d2      	uxtb	r2, r2
 8008708:	f042 0220 	orr.w	r2, r2, #32
 800870c:	b2d2      	uxtb	r2, r2
 800870e:	f002 021f 	and.w	r2, r2, #31
 8008712:	2101      	movs	r1, #1
 8008714:	fa01 f202 	lsl.w	r2, r1, r2
 8008718:	4013      	ands	r3, r2
 800871a:	2b00      	cmp	r3, #0
 800871c:	d101      	bne.n	8008722 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	e079      	b.n	8008816 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008722:	4b1d      	ldr	r3, [pc, #116]	; (8008798 <HAL_RCC_ClockConfig+0x260>)
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	f023 0203 	bic.w	r2, r3, #3
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	491a      	ldr	r1, [pc, #104]	; (8008798 <HAL_RCC_ClockConfig+0x260>)
 8008730:	4313      	orrs	r3, r2
 8008732:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008734:	f7fc f9e4 	bl	8004b00 <HAL_GetTick>
 8008738:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800873a:	e00a      	b.n	8008752 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800873c:	f7fc f9e0 	bl	8004b00 <HAL_GetTick>
 8008740:	4602      	mov	r2, r0
 8008742:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008744:	1ad3      	subs	r3, r2, r3
 8008746:	f241 3288 	movw	r2, #5000	; 0x1388
 800874a:	4293      	cmp	r3, r2
 800874c:	d901      	bls.n	8008752 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800874e:	2303      	movs	r3, #3
 8008750:	e061      	b.n	8008816 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008752:	4b11      	ldr	r3, [pc, #68]	; (8008798 <HAL_RCC_ClockConfig+0x260>)
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	f003 020c 	and.w	r2, r3, #12
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	429a      	cmp	r2, r3
 8008762:	d1eb      	bne.n	800873c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008764:	4b0b      	ldr	r3, [pc, #44]	; (8008794 <HAL_RCC_ClockConfig+0x25c>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 0307 	and.w	r3, r3, #7
 800876c:	683a      	ldr	r2, [r7, #0]
 800876e:	429a      	cmp	r2, r3
 8008770:	d214      	bcs.n	800879c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008772:	4b08      	ldr	r3, [pc, #32]	; (8008794 <HAL_RCC_ClockConfig+0x25c>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f023 0207 	bic.w	r2, r3, #7
 800877a:	4906      	ldr	r1, [pc, #24]	; (8008794 <HAL_RCC_ClockConfig+0x25c>)
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	4313      	orrs	r3, r2
 8008780:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008782:	4b04      	ldr	r3, [pc, #16]	; (8008794 <HAL_RCC_ClockConfig+0x25c>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 0307 	and.w	r3, r3, #7
 800878a:	683a      	ldr	r2, [r7, #0]
 800878c:	429a      	cmp	r2, r3
 800878e:	d005      	beq.n	800879c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	e040      	b.n	8008816 <HAL_RCC_ClockConfig+0x2de>
 8008794:	40022000 	.word	0x40022000
 8008798:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 0304 	and.w	r3, r3, #4
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d008      	beq.n	80087ba <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80087a8:	4b1d      	ldr	r3, [pc, #116]	; (8008820 <HAL_RCC_ClockConfig+0x2e8>)
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	491a      	ldr	r1, [pc, #104]	; (8008820 <HAL_RCC_ClockConfig+0x2e8>)
 80087b6:	4313      	orrs	r3, r2
 80087b8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f003 0308 	and.w	r3, r3, #8
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d009      	beq.n	80087da <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80087c6:	4b16      	ldr	r3, [pc, #88]	; (8008820 <HAL_RCC_ClockConfig+0x2e8>)
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	00db      	lsls	r3, r3, #3
 80087d4:	4912      	ldr	r1, [pc, #72]	; (8008820 <HAL_RCC_ClockConfig+0x2e8>)
 80087d6:	4313      	orrs	r3, r2
 80087d8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80087da:	f000 f829 	bl	8008830 <HAL_RCC_GetSysClockFreq>
 80087de:	4601      	mov	r1, r0
 80087e0:	4b0f      	ldr	r3, [pc, #60]	; (8008820 <HAL_RCC_ClockConfig+0x2e8>)
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087e8:	22f0      	movs	r2, #240	; 0xf0
 80087ea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087ec:	693a      	ldr	r2, [r7, #16]
 80087ee:	fa92 f2a2 	rbit	r2, r2
 80087f2:	60fa      	str	r2, [r7, #12]
  return result;
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	fab2 f282 	clz	r2, r2
 80087fa:	b2d2      	uxtb	r2, r2
 80087fc:	40d3      	lsrs	r3, r2
 80087fe:	4a09      	ldr	r2, [pc, #36]	; (8008824 <HAL_RCC_ClockConfig+0x2ec>)
 8008800:	5cd3      	ldrb	r3, [r2, r3]
 8008802:	fa21 f303 	lsr.w	r3, r1, r3
 8008806:	4a08      	ldr	r2, [pc, #32]	; (8008828 <HAL_RCC_ClockConfig+0x2f0>)
 8008808:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800880a:	4b08      	ldr	r3, [pc, #32]	; (800882c <HAL_RCC_ClockConfig+0x2f4>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4618      	mov	r0, r3
 8008810:	f7fc f932 	bl	8004a78 <HAL_InitTick>
  
  return HAL_OK;
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	3778      	adds	r7, #120	; 0x78
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	40021000 	.word	0x40021000
 8008824:	0800bf90 	.word	0x0800bf90
 8008828:	20000010 	.word	0x20000010
 800882c:	20000014 	.word	0x20000014

08008830 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008830:	b480      	push	{r7}
 8008832:	b08b      	sub	sp, #44	; 0x2c
 8008834:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008836:	2300      	movs	r3, #0
 8008838:	61fb      	str	r3, [r7, #28]
 800883a:	2300      	movs	r3, #0
 800883c:	61bb      	str	r3, [r7, #24]
 800883e:	2300      	movs	r3, #0
 8008840:	627b      	str	r3, [r7, #36]	; 0x24
 8008842:	2300      	movs	r3, #0
 8008844:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008846:	2300      	movs	r3, #0
 8008848:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800884a:	4b2a      	ldr	r3, [pc, #168]	; (80088f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	f003 030c 	and.w	r3, r3, #12
 8008856:	2b04      	cmp	r3, #4
 8008858:	d002      	beq.n	8008860 <HAL_RCC_GetSysClockFreq+0x30>
 800885a:	2b08      	cmp	r3, #8
 800885c:	d003      	beq.n	8008866 <HAL_RCC_GetSysClockFreq+0x36>
 800885e:	e03f      	b.n	80088e0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008860:	4b25      	ldr	r3, [pc, #148]	; (80088f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8008862:	623b      	str	r3, [r7, #32]
      break;
 8008864:	e03f      	b.n	80088e6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800886c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8008870:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008872:	68ba      	ldr	r2, [r7, #8]
 8008874:	fa92 f2a2 	rbit	r2, r2
 8008878:	607a      	str	r2, [r7, #4]
  return result;
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	fab2 f282 	clz	r2, r2
 8008880:	b2d2      	uxtb	r2, r2
 8008882:	40d3      	lsrs	r3, r2
 8008884:	4a1d      	ldr	r2, [pc, #116]	; (80088fc <HAL_RCC_GetSysClockFreq+0xcc>)
 8008886:	5cd3      	ldrb	r3, [r2, r3]
 8008888:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800888a:	4b1a      	ldr	r3, [pc, #104]	; (80088f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800888c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800888e:	f003 030f 	and.w	r3, r3, #15
 8008892:	220f      	movs	r2, #15
 8008894:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008896:	693a      	ldr	r2, [r7, #16]
 8008898:	fa92 f2a2 	rbit	r2, r2
 800889c:	60fa      	str	r2, [r7, #12]
  return result;
 800889e:	68fa      	ldr	r2, [r7, #12]
 80088a0:	fab2 f282 	clz	r2, r2
 80088a4:	b2d2      	uxtb	r2, r2
 80088a6:	40d3      	lsrs	r3, r2
 80088a8:	4a15      	ldr	r2, [pc, #84]	; (8008900 <HAL_RCC_GetSysClockFreq+0xd0>)
 80088aa:	5cd3      	ldrb	r3, [r2, r3]
 80088ac:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d008      	beq.n	80088ca <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80088b8:	4a0f      	ldr	r2, [pc, #60]	; (80088f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	fb02 f303 	mul.w	r3, r2, r3
 80088c6:	627b      	str	r3, [r7, #36]	; 0x24
 80088c8:	e007      	b.n	80088da <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80088ca:	4a0b      	ldr	r2, [pc, #44]	; (80088f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	fb02 f303 	mul.w	r3, r2, r3
 80088d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088dc:	623b      	str	r3, [r7, #32]
      break;
 80088de:	e002      	b.n	80088e6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80088e0:	4b05      	ldr	r3, [pc, #20]	; (80088f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80088e2:	623b      	str	r3, [r7, #32]
      break;
 80088e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80088e6:	6a3b      	ldr	r3, [r7, #32]
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	372c      	adds	r7, #44	; 0x2c
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr
 80088f4:	40021000 	.word	0x40021000
 80088f8:	007a1200 	.word	0x007a1200
 80088fc:	0800bfa8 	.word	0x0800bfa8
 8008900:	0800bfb8 	.word	0x0800bfb8

08008904 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008904:	b480      	push	{r7}
 8008906:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008908:	4b03      	ldr	r3, [pc, #12]	; (8008918 <HAL_RCC_GetHCLKFreq+0x14>)
 800890a:	681b      	ldr	r3, [r3, #0]
}
 800890c:	4618      	mov	r0, r3
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	20000010 	.word	0x20000010

0800891c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8008922:	f7ff ffef 	bl	8008904 <HAL_RCC_GetHCLKFreq>
 8008926:	4601      	mov	r1, r0
 8008928:	4b0b      	ldr	r3, [pc, #44]	; (8008958 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008930:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008934:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	fa92 f2a2 	rbit	r2, r2
 800893c:	603a      	str	r2, [r7, #0]
  return result;
 800893e:	683a      	ldr	r2, [r7, #0]
 8008940:	fab2 f282 	clz	r2, r2
 8008944:	b2d2      	uxtb	r2, r2
 8008946:	40d3      	lsrs	r3, r2
 8008948:	4a04      	ldr	r2, [pc, #16]	; (800895c <HAL_RCC_GetPCLK1Freq+0x40>)
 800894a:	5cd3      	ldrb	r3, [r2, r3]
 800894c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8008950:	4618      	mov	r0, r3
 8008952:	3708      	adds	r7, #8
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}
 8008958:	40021000 	.word	0x40021000
 800895c:	0800bfa0 	.word	0x0800bfa0

08008960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8008966:	f7ff ffcd 	bl	8008904 <HAL_RCC_GetHCLKFreq>
 800896a:	4601      	mov	r1, r0
 800896c:	4b0b      	ldr	r3, [pc, #44]	; (800899c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8008974:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008978:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	fa92 f2a2 	rbit	r2, r2
 8008980:	603a      	str	r2, [r7, #0]
  return result;
 8008982:	683a      	ldr	r2, [r7, #0]
 8008984:	fab2 f282 	clz	r2, r2
 8008988:	b2d2      	uxtb	r2, r2
 800898a:	40d3      	lsrs	r3, r2
 800898c:	4a04      	ldr	r2, [pc, #16]	; (80089a0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800898e:	5cd3      	ldrb	r3, [r2, r3]
 8008990:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8008994:	4618      	mov	r0, r3
 8008996:	3708      	adds	r7, #8
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}
 800899c:	40021000 	.word	0x40021000
 80089a0:	0800bfa0 	.word	0x0800bfa0

080089a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b092      	sub	sp, #72	; 0x48
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80089ac:	2300      	movs	r3, #0
 80089ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80089b0:	2300      	movs	r3, #0
 80089b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80089b4:	2300      	movs	r3, #0
 80089b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	f000 80d4 	beq.w	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80089c8:	4b4e      	ldr	r3, [pc, #312]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80089ca:	69db      	ldr	r3, [r3, #28]
 80089cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d10e      	bne.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80089d4:	4b4b      	ldr	r3, [pc, #300]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80089d6:	69db      	ldr	r3, [r3, #28]
 80089d8:	4a4a      	ldr	r2, [pc, #296]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80089da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089de:	61d3      	str	r3, [r2, #28]
 80089e0:	4b48      	ldr	r3, [pc, #288]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80089e2:	69db      	ldr	r3, [r3, #28]
 80089e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089e8:	60bb      	str	r3, [r7, #8]
 80089ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80089ec:	2301      	movs	r3, #1
 80089ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089f2:	4b45      	ldr	r3, [pc, #276]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d118      	bne.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80089fe:	4b42      	ldr	r3, [pc, #264]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a41      	ldr	r2, [pc, #260]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a08:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a0a:	f7fc f879 	bl	8004b00 <HAL_GetTick>
 8008a0e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a10:	e008      	b.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a12:	f7fc f875 	bl	8004b00 <HAL_GetTick>
 8008a16:	4602      	mov	r2, r0
 8008a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a1a:	1ad3      	subs	r3, r2, r3
 8008a1c:	2b64      	cmp	r3, #100	; 0x64
 8008a1e:	d901      	bls.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8008a20:	2303      	movs	r3, #3
 8008a22:	e1d6      	b.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a24:	4b38      	ldr	r3, [pc, #224]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d0f0      	beq.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008a30:	4b34      	ldr	r3, [pc, #208]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a32:	6a1b      	ldr	r3, [r3, #32]
 8008a34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a38:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	f000 8084 	beq.w	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d07c      	beq.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008a50:	4b2c      	ldr	r3, [pc, #176]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a52:	6a1b      	ldr	r3, [r3, #32]
 8008a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008a5e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a62:	fa93 f3a3 	rbit	r3, r3
 8008a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008a6a:	fab3 f383 	clz	r3, r3
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	461a      	mov	r2, r3
 8008a72:	4b26      	ldr	r3, [pc, #152]	; (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008a74:	4413      	add	r3, r2
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	461a      	mov	r2, r3
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	6013      	str	r3, [r2, #0]
 8008a7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008a82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a86:	fa93 f3a3 	rbit	r3, r3
 8008a8a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008a8e:	fab3 f383 	clz	r3, r3
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	461a      	mov	r2, r3
 8008a96:	4b1d      	ldr	r3, [pc, #116]	; (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008a98:	4413      	add	r3, r2
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008aa2:	4a18      	ldr	r2, [pc, #96]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aa6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aaa:	f003 0301 	and.w	r3, r3, #1
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d04b      	beq.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ab2:	f7fc f825 	bl	8004b00 <HAL_GetTick>
 8008ab6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ab8:	e00a      	b.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008aba:	f7fc f821 	bl	8004b00 <HAL_GetTick>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ac2:	1ad3      	subs	r3, r2, r3
 8008ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d901      	bls.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008acc:	2303      	movs	r3, #3
 8008ace:	e180      	b.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008ad0:	2302      	movs	r3, #2
 8008ad2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad6:	fa93 f3a3 	rbit	r3, r3
 8008ada:	627b      	str	r3, [r7, #36]	; 0x24
 8008adc:	2302      	movs	r3, #2
 8008ade:	623b      	str	r3, [r7, #32]
 8008ae0:	6a3b      	ldr	r3, [r7, #32]
 8008ae2:	fa93 f3a3 	rbit	r3, r3
 8008ae6:	61fb      	str	r3, [r7, #28]
  return result;
 8008ae8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008aea:	fab3 f383 	clz	r3, r3
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	095b      	lsrs	r3, r3, #5
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	f043 0302 	orr.w	r3, r3, #2
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	2b02      	cmp	r3, #2
 8008afc:	d108      	bne.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8008afe:	4b01      	ldr	r3, [pc, #4]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008b00:	6a1b      	ldr	r3, [r3, #32]
 8008b02:	e00d      	b.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8008b04:	40021000 	.word	0x40021000
 8008b08:	40007000 	.word	0x40007000
 8008b0c:	10908100 	.word	0x10908100
 8008b10:	2302      	movs	r3, #2
 8008b12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	fa93 f3a3 	rbit	r3, r3
 8008b1a:	617b      	str	r3, [r7, #20]
 8008b1c:	4ba0      	ldr	r3, [pc, #640]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b20:	2202      	movs	r2, #2
 8008b22:	613a      	str	r2, [r7, #16]
 8008b24:	693a      	ldr	r2, [r7, #16]
 8008b26:	fa92 f2a2 	rbit	r2, r2
 8008b2a:	60fa      	str	r2, [r7, #12]
  return result;
 8008b2c:	68fa      	ldr	r2, [r7, #12]
 8008b2e:	fab2 f282 	clz	r2, r2
 8008b32:	b2d2      	uxtb	r2, r2
 8008b34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b38:	b2d2      	uxtb	r2, r2
 8008b3a:	f002 021f 	and.w	r2, r2, #31
 8008b3e:	2101      	movs	r1, #1
 8008b40:	fa01 f202 	lsl.w	r2, r1, r2
 8008b44:	4013      	ands	r3, r2
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d0b7      	beq.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8008b4a:	4b95      	ldr	r3, [pc, #596]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008b4c:	6a1b      	ldr	r3, [r3, #32]
 8008b4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	4992      	ldr	r1, [pc, #584]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008b5c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d105      	bne.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b64:	4b8e      	ldr	r3, [pc, #568]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008b66:	69db      	ldr	r3, [r3, #28]
 8008b68:	4a8d      	ldr	r2, [pc, #564]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008b6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b6e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f003 0301 	and.w	r3, r3, #1
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d008      	beq.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008b7c:	4b88      	ldr	r3, [pc, #544]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b80:	f023 0203 	bic.w	r2, r3, #3
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	4985      	ldr	r1, [pc, #532]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f003 0302 	and.w	r3, r3, #2
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d008      	beq.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008b9a:	4b81      	ldr	r3, [pc, #516]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b9e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	497e      	ldr	r1, [pc, #504]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 0304 	and.w	r3, r3, #4
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d008      	beq.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008bb8:	4b79      	ldr	r3, [pc, #484]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bbc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	691b      	ldr	r3, [r3, #16]
 8008bc4:	4976      	ldr	r1, [pc, #472]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f003 0320 	and.w	r3, r3, #32
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d008      	beq.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008bd6:	4b72      	ldr	r3, [pc, #456]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bda:	f023 0210 	bic.w	r2, r3, #16
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	69db      	ldr	r3, [r3, #28]
 8008be2:	496f      	ldr	r1, [pc, #444]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008be4:	4313      	orrs	r3, r2
 8008be6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d008      	beq.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8008bf4:	4b6a      	ldr	r3, [pc, #424]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c00:	4967      	ldr	r1, [pc, #412]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008c02:	4313      	orrs	r3, r2
 8008c04:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d008      	beq.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008c12:	4b63      	ldr	r3, [pc, #396]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c16:	f023 0220 	bic.w	r2, r3, #32
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a1b      	ldr	r3, [r3, #32]
 8008c1e:	4960      	ldr	r1, [pc, #384]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008c20:	4313      	orrs	r3, r2
 8008c22:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d008      	beq.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008c30:	4b5b      	ldr	r3, [pc, #364]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c34:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c3c:	4958      	ldr	r1, [pc, #352]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 0308 	and.w	r3, r3, #8
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d008      	beq.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008c4e:	4b54      	ldr	r3, [pc, #336]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c52:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	695b      	ldr	r3, [r3, #20]
 8008c5a:	4951      	ldr	r1, [pc, #324]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f003 0310 	and.w	r3, r3, #16
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d008      	beq.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008c6c:	4b4c      	ldr	r3, [pc, #304]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c70:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	699b      	ldr	r3, [r3, #24]
 8008c78:	4949      	ldr	r1, [pc, #292]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d008      	beq.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008c8a:	4b45      	ldr	r3, [pc, #276]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c96:	4942      	ldr	r1, [pc, #264]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d008      	beq.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008ca8:	4b3d      	ldr	r3, [pc, #244]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cac:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb4:	493a      	ldr	r1, [pc, #232]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d008      	beq.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8008cc6:	4b36      	ldr	r3, [pc, #216]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cca:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd2:	4933      	ldr	r1, [pc, #204]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d008      	beq.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008ce4:	4b2e      	ldr	r3, [pc, #184]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf0:	492b      	ldr	r1, [pc, #172]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d008      	beq.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8008d02:	4b27      	ldr	r3, [pc, #156]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d06:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d0e:	4924      	ldr	r1, [pc, #144]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008d10:	4313      	orrs	r3, r2
 8008d12:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d008      	beq.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8008d20:	4b1f      	ldr	r3, [pc, #124]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d24:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d2c:	491c      	ldr	r1, [pc, #112]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d008      	beq.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8008d3e:	4b18      	ldr	r3, [pc, #96]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d42:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d4a:	4915      	ldr	r1, [pc, #84]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d008      	beq.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8008d5c:	4b10      	ldr	r3, [pc, #64]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d60:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d68:	490d      	ldr	r1, [pc, #52]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d008      	beq.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8008d7a:	4b09      	ldr	r3, [pc, #36]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d7e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d86:	4906      	ldr	r1, [pc, #24]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d00c      	beq.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8008d98:	4b01      	ldr	r3, [pc, #4]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d9c:	e002      	b.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8008d9e:	bf00      	nop
 8008da0:	40021000 	.word	0x40021000
 8008da4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dac:	490b      	ldr	r1, [pc, #44]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008dae:	4313      	orrs	r3, r2
 8008db0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d008      	beq.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8008dbe:	4b07      	ldr	r3, [pc, #28]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dca:	4904      	ldr	r1, [pc, #16]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8008dd0:	2300      	movs	r3, #0
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3748      	adds	r7, #72	; 0x48
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	40021000 	.word	0x40021000

08008de0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d101      	bne.n	8008df2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	e049      	b.n	8008e86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d106      	bne.n	8008e0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f7fb f99a 	bl	8004140 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2202      	movs	r2, #2
 8008e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	3304      	adds	r3, #4
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	4610      	mov	r0, r2
 8008e20:	f000 fb14 	bl	800944c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2201      	movs	r2, #1
 8008e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3708      	adds	r7, #8
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
	...

08008e90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b085      	sub	sp, #20
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d001      	beq.n	8008ea8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	e047      	b.n	8008f38 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2202      	movs	r2, #2
 8008eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a23      	ldr	r2, [pc, #140]	; (8008f44 <HAL_TIM_Base_Start+0xb4>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d01d      	beq.n	8008ef6 <HAL_TIM_Base_Start+0x66>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ec2:	d018      	beq.n	8008ef6 <HAL_TIM_Base_Start+0x66>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a1f      	ldr	r2, [pc, #124]	; (8008f48 <HAL_TIM_Base_Start+0xb8>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d013      	beq.n	8008ef6 <HAL_TIM_Base_Start+0x66>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a1e      	ldr	r2, [pc, #120]	; (8008f4c <HAL_TIM_Base_Start+0xbc>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d00e      	beq.n	8008ef6 <HAL_TIM_Base_Start+0x66>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a1c      	ldr	r2, [pc, #112]	; (8008f50 <HAL_TIM_Base_Start+0xc0>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d009      	beq.n	8008ef6 <HAL_TIM_Base_Start+0x66>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a1b      	ldr	r2, [pc, #108]	; (8008f54 <HAL_TIM_Base_Start+0xc4>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d004      	beq.n	8008ef6 <HAL_TIM_Base_Start+0x66>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a19      	ldr	r2, [pc, #100]	; (8008f58 <HAL_TIM_Base_Start+0xc8>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d115      	bne.n	8008f22 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	689a      	ldr	r2, [r3, #8]
 8008efc:	4b17      	ldr	r3, [pc, #92]	; (8008f5c <HAL_TIM_Base_Start+0xcc>)
 8008efe:	4013      	ands	r3, r2
 8008f00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2b06      	cmp	r3, #6
 8008f06:	d015      	beq.n	8008f34 <HAL_TIM_Base_Start+0xa4>
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f0e:	d011      	beq.n	8008f34 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f042 0201 	orr.w	r2, r2, #1
 8008f1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f20:	e008      	b.n	8008f34 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f042 0201 	orr.w	r2, r2, #1
 8008f30:	601a      	str	r2, [r3, #0]
 8008f32:	e000      	b.n	8008f36 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f34:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008f36:	2300      	movs	r3, #0
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3714      	adds	r7, #20
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr
 8008f44:	40012c00 	.word	0x40012c00
 8008f48:	40000400 	.word	0x40000400
 8008f4c:	40000800 	.word	0x40000800
 8008f50:	40013400 	.word	0x40013400
 8008f54:	40014000 	.word	0x40014000
 8008f58:	40015000 	.word	0x40015000
 8008f5c:	00010007 	.word	0x00010007

08008f60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b085      	sub	sp, #20
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d001      	beq.n	8008f78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	e04f      	b.n	8009018 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2202      	movs	r2, #2
 8008f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	68da      	ldr	r2, [r3, #12]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f042 0201 	orr.w	r2, r2, #1
 8008f8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a23      	ldr	r2, [pc, #140]	; (8009024 <HAL_TIM_Base_Start_IT+0xc4>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d01d      	beq.n	8008fd6 <HAL_TIM_Base_Start_IT+0x76>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fa2:	d018      	beq.n	8008fd6 <HAL_TIM_Base_Start_IT+0x76>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a1f      	ldr	r2, [pc, #124]	; (8009028 <HAL_TIM_Base_Start_IT+0xc8>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d013      	beq.n	8008fd6 <HAL_TIM_Base_Start_IT+0x76>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a1e      	ldr	r2, [pc, #120]	; (800902c <HAL_TIM_Base_Start_IT+0xcc>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d00e      	beq.n	8008fd6 <HAL_TIM_Base_Start_IT+0x76>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a1c      	ldr	r2, [pc, #112]	; (8009030 <HAL_TIM_Base_Start_IT+0xd0>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d009      	beq.n	8008fd6 <HAL_TIM_Base_Start_IT+0x76>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a1b      	ldr	r2, [pc, #108]	; (8009034 <HAL_TIM_Base_Start_IT+0xd4>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d004      	beq.n	8008fd6 <HAL_TIM_Base_Start_IT+0x76>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a19      	ldr	r2, [pc, #100]	; (8009038 <HAL_TIM_Base_Start_IT+0xd8>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d115      	bne.n	8009002 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	689a      	ldr	r2, [r3, #8]
 8008fdc:	4b17      	ldr	r3, [pc, #92]	; (800903c <HAL_TIM_Base_Start_IT+0xdc>)
 8008fde:	4013      	ands	r3, r2
 8008fe0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2b06      	cmp	r3, #6
 8008fe6:	d015      	beq.n	8009014 <HAL_TIM_Base_Start_IT+0xb4>
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fee:	d011      	beq.n	8009014 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f042 0201 	orr.w	r2, r2, #1
 8008ffe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009000:	e008      	b.n	8009014 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f042 0201 	orr.w	r2, r2, #1
 8009010:	601a      	str	r2, [r3, #0]
 8009012:	e000      	b.n	8009016 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009014:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009016:	2300      	movs	r3, #0
}
 8009018:	4618      	mov	r0, r3
 800901a:	3714      	adds	r7, #20
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr
 8009024:	40012c00 	.word	0x40012c00
 8009028:	40000400 	.word	0x40000400
 800902c:	40000800 	.word	0x40000800
 8009030:	40013400 	.word	0x40013400
 8009034:	40014000 	.word	0x40014000
 8009038:	40015000 	.word	0x40015000
 800903c:	00010007 	.word	0x00010007

08009040 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	691b      	ldr	r3, [r3, #16]
 800904e:	f003 0302 	and.w	r3, r3, #2
 8009052:	2b02      	cmp	r3, #2
 8009054:	d122      	bne.n	800909c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	f003 0302 	and.w	r3, r3, #2
 8009060:	2b02      	cmp	r3, #2
 8009062:	d11b      	bne.n	800909c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f06f 0202 	mvn.w	r2, #2
 800906c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2201      	movs	r2, #1
 8009072:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	699b      	ldr	r3, [r3, #24]
 800907a:	f003 0303 	and.w	r3, r3, #3
 800907e:	2b00      	cmp	r3, #0
 8009080:	d003      	beq.n	800908a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 f9c3 	bl	800940e <HAL_TIM_IC_CaptureCallback>
 8009088:	e005      	b.n	8009096 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 f9b5 	bl	80093fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 f9c6 	bl	8009422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	691b      	ldr	r3, [r3, #16]
 80090a2:	f003 0304 	and.w	r3, r3, #4
 80090a6:	2b04      	cmp	r3, #4
 80090a8:	d122      	bne.n	80090f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	68db      	ldr	r3, [r3, #12]
 80090b0:	f003 0304 	and.w	r3, r3, #4
 80090b4:	2b04      	cmp	r3, #4
 80090b6:	d11b      	bne.n	80090f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f06f 0204 	mvn.w	r2, #4
 80090c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2202      	movs	r2, #2
 80090c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	699b      	ldr	r3, [r3, #24]
 80090ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d003      	beq.n	80090de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 f999 	bl	800940e <HAL_TIM_IC_CaptureCallback>
 80090dc:	e005      	b.n	80090ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 f98b 	bl	80093fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 f99c 	bl	8009422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	f003 0308 	and.w	r3, r3, #8
 80090fa:	2b08      	cmp	r3, #8
 80090fc:	d122      	bne.n	8009144 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	f003 0308 	and.w	r3, r3, #8
 8009108:	2b08      	cmp	r3, #8
 800910a:	d11b      	bne.n	8009144 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f06f 0208 	mvn.w	r2, #8
 8009114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2204      	movs	r2, #4
 800911a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	69db      	ldr	r3, [r3, #28]
 8009122:	f003 0303 	and.w	r3, r3, #3
 8009126:	2b00      	cmp	r3, #0
 8009128:	d003      	beq.n	8009132 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 f96f 	bl	800940e <HAL_TIM_IC_CaptureCallback>
 8009130:	e005      	b.n	800913e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 f961 	bl	80093fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 f972 	bl	8009422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	691b      	ldr	r3, [r3, #16]
 800914a:	f003 0310 	and.w	r3, r3, #16
 800914e:	2b10      	cmp	r3, #16
 8009150:	d122      	bne.n	8009198 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	f003 0310 	and.w	r3, r3, #16
 800915c:	2b10      	cmp	r3, #16
 800915e:	d11b      	bne.n	8009198 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f06f 0210 	mvn.w	r2, #16
 8009168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2208      	movs	r2, #8
 800916e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	69db      	ldr	r3, [r3, #28]
 8009176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800917a:	2b00      	cmp	r3, #0
 800917c:	d003      	beq.n	8009186 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f945 	bl	800940e <HAL_TIM_IC_CaptureCallback>
 8009184:	e005      	b.n	8009192 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 f937 	bl	80093fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 f948 	bl	8009422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	691b      	ldr	r3, [r3, #16]
 800919e:	f003 0301 	and.w	r3, r3, #1
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d10e      	bne.n	80091c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	f003 0301 	and.w	r3, r3, #1
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d107      	bne.n	80091c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f06f 0201 	mvn.w	r2, #1
 80091bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f7fa fe50 	bl	8003e64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	691b      	ldr	r3, [r3, #16]
 80091ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091ce:	2b80      	cmp	r3, #128	; 0x80
 80091d0:	d10e      	bne.n	80091f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091dc:	2b80      	cmp	r3, #128	; 0x80
 80091de:	d107      	bne.n	80091f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80091e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 fafc 	bl	80097e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	691b      	ldr	r3, [r3, #16]
 80091f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091fe:	d10e      	bne.n	800921e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	68db      	ldr	r3, [r3, #12]
 8009206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800920a:	2b80      	cmp	r3, #128	; 0x80
 800920c:	d107      	bne.n	800921e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 faef 	bl	80097fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	691b      	ldr	r3, [r3, #16]
 8009224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009228:	2b40      	cmp	r3, #64	; 0x40
 800922a:	d10e      	bne.n	800924a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009236:	2b40      	cmp	r3, #64	; 0x40
 8009238:	d107      	bne.n	800924a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 f8f6 	bl	8009436 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	f003 0320 	and.w	r3, r3, #32
 8009254:	2b20      	cmp	r3, #32
 8009256:	d10e      	bne.n	8009276 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	f003 0320 	and.w	r3, r3, #32
 8009262:	2b20      	cmp	r3, #32
 8009264:	d107      	bne.n	8009276 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f06f 0220 	mvn.w	r2, #32
 800926e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 faaf 	bl	80097d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009276:	bf00      	nop
 8009278:	3708      	adds	r7, #8
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b084      	sub	sp, #16
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
 8009286:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009288:	2300      	movs	r3, #0
 800928a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009292:	2b01      	cmp	r3, #1
 8009294:	d101      	bne.n	800929a <HAL_TIM_ConfigClockSource+0x1c>
 8009296:	2302      	movs	r3, #2
 8009298:	e0ab      	b.n	80093f2 <HAL_TIM_ConfigClockSource+0x174>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2201      	movs	r2, #1
 800929e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2202      	movs	r2, #2
 80092a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092b8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80092bc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80092c4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	68ba      	ldr	r2, [r7, #8]
 80092cc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	2b40      	cmp	r3, #64	; 0x40
 80092d4:	d067      	beq.n	80093a6 <HAL_TIM_ConfigClockSource+0x128>
 80092d6:	2b40      	cmp	r3, #64	; 0x40
 80092d8:	d80b      	bhi.n	80092f2 <HAL_TIM_ConfigClockSource+0x74>
 80092da:	2b10      	cmp	r3, #16
 80092dc:	d073      	beq.n	80093c6 <HAL_TIM_ConfigClockSource+0x148>
 80092de:	2b10      	cmp	r3, #16
 80092e0:	d802      	bhi.n	80092e8 <HAL_TIM_ConfigClockSource+0x6a>
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d06f      	beq.n	80093c6 <HAL_TIM_ConfigClockSource+0x148>
 80092e6:	e077      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x15a>
 80092e8:	2b20      	cmp	r3, #32
 80092ea:	d06c      	beq.n	80093c6 <HAL_TIM_ConfigClockSource+0x148>
 80092ec:	2b30      	cmp	r3, #48	; 0x30
 80092ee:	d06a      	beq.n	80093c6 <HAL_TIM_ConfigClockSource+0x148>
 80092f0:	e072      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x15a>
 80092f2:	2b70      	cmp	r3, #112	; 0x70
 80092f4:	d00d      	beq.n	8009312 <HAL_TIM_ConfigClockSource+0x94>
 80092f6:	2b70      	cmp	r3, #112	; 0x70
 80092f8:	d804      	bhi.n	8009304 <HAL_TIM_ConfigClockSource+0x86>
 80092fa:	2b50      	cmp	r3, #80	; 0x50
 80092fc:	d033      	beq.n	8009366 <HAL_TIM_ConfigClockSource+0xe8>
 80092fe:	2b60      	cmp	r3, #96	; 0x60
 8009300:	d041      	beq.n	8009386 <HAL_TIM_ConfigClockSource+0x108>
 8009302:	e069      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x15a>
 8009304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009308:	d069      	beq.n	80093de <HAL_TIM_ConfigClockSource+0x160>
 800930a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800930e:	d017      	beq.n	8009340 <HAL_TIM_ConfigClockSource+0xc2>
 8009310:	e062      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x15a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6818      	ldr	r0, [r3, #0]
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	6899      	ldr	r1, [r3, #8]
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	685a      	ldr	r2, [r3, #4]
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	f000 f9ab 	bl	800967c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009334:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	68ba      	ldr	r2, [r7, #8]
 800933c:	609a      	str	r2, [r3, #8]
      break;
 800933e:	e04f      	b.n	80093e0 <HAL_TIM_ConfigClockSource+0x162>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6818      	ldr	r0, [r3, #0]
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	6899      	ldr	r1, [r3, #8]
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	685a      	ldr	r2, [r3, #4]
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	f000 f994 	bl	800967c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	689a      	ldr	r2, [r3, #8]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009362:	609a      	str	r2, [r3, #8]
      break;
 8009364:	e03c      	b.n	80093e0 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6818      	ldr	r0, [r3, #0]
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	6859      	ldr	r1, [r3, #4]
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	461a      	mov	r2, r3
 8009374:	f000 f908 	bl	8009588 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2150      	movs	r1, #80	; 0x50
 800937e:	4618      	mov	r0, r3
 8009380:	f000 f961 	bl	8009646 <TIM_ITRx_SetConfig>
      break;
 8009384:	e02c      	b.n	80093e0 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6818      	ldr	r0, [r3, #0]
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	6859      	ldr	r1, [r3, #4]
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	461a      	mov	r2, r3
 8009394:	f000 f927 	bl	80095e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2160      	movs	r1, #96	; 0x60
 800939e:	4618      	mov	r0, r3
 80093a0:	f000 f951 	bl	8009646 <TIM_ITRx_SetConfig>
      break;
 80093a4:	e01c      	b.n	80093e0 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6818      	ldr	r0, [r3, #0]
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	6859      	ldr	r1, [r3, #4]
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	68db      	ldr	r3, [r3, #12]
 80093b2:	461a      	mov	r2, r3
 80093b4:	f000 f8e8 	bl	8009588 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2140      	movs	r1, #64	; 0x40
 80093be:	4618      	mov	r0, r3
 80093c0:	f000 f941 	bl	8009646 <TIM_ITRx_SetConfig>
      break;
 80093c4:	e00c      	b.n	80093e0 <HAL_TIM_ConfigClockSource+0x162>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4619      	mov	r1, r3
 80093d0:	4610      	mov	r0, r2
 80093d2:	f000 f938 	bl	8009646 <TIM_ITRx_SetConfig>
      break;
 80093d6:	e003      	b.n	80093e0 <HAL_TIM_ConfigClockSource+0x162>
    }

    default:
      status = HAL_ERROR;
 80093d8:	2301      	movs	r3, #1
 80093da:	73fb      	strb	r3, [r7, #15]
      break;
 80093dc:	e000      	b.n	80093e0 <HAL_TIM_ConfigClockSource+0x162>
      break;
 80093de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2201      	movs	r2, #1
 80093e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80093f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3710      	adds	r7, #16
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093fa:	b480      	push	{r7}
 80093fc:	b083      	sub	sp, #12
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009402:	bf00      	nop
 8009404:	370c      	adds	r7, #12
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr

0800940e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800940e:	b480      	push	{r7}
 8009410:	b083      	sub	sp, #12
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009416:	bf00      	nop
 8009418:	370c      	adds	r7, #12
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr

08009422 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009422:	b480      	push	{r7}
 8009424:	b083      	sub	sp, #12
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800942a:	bf00      	nop
 800942c:	370c      	adds	r7, #12
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr

08009436 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009436:	b480      	push	{r7}
 8009438:	b083      	sub	sp, #12
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800943e:	bf00      	nop
 8009440:	370c      	adds	r7, #12
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr
	...

0800944c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800944c:	b480      	push	{r7}
 800944e:	b085      	sub	sp, #20
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	4a42      	ldr	r2, [pc, #264]	; (8009568 <TIM_Base_SetConfig+0x11c>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d013      	beq.n	800948c <TIM_Base_SetConfig+0x40>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800946a:	d00f      	beq.n	800948c <TIM_Base_SetConfig+0x40>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	4a3f      	ldr	r2, [pc, #252]	; (800956c <TIM_Base_SetConfig+0x120>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d00b      	beq.n	800948c <TIM_Base_SetConfig+0x40>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	4a3e      	ldr	r2, [pc, #248]	; (8009570 <TIM_Base_SetConfig+0x124>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d007      	beq.n	800948c <TIM_Base_SetConfig+0x40>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	4a3d      	ldr	r2, [pc, #244]	; (8009574 <TIM_Base_SetConfig+0x128>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d003      	beq.n	800948c <TIM_Base_SetConfig+0x40>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	4a3c      	ldr	r2, [pc, #240]	; (8009578 <TIM_Base_SetConfig+0x12c>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d108      	bne.n	800949e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009492:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	4313      	orrs	r3, r2
 800949c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	4a31      	ldr	r2, [pc, #196]	; (8009568 <TIM_Base_SetConfig+0x11c>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d01f      	beq.n	80094e6 <TIM_Base_SetConfig+0x9a>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094ac:	d01b      	beq.n	80094e6 <TIM_Base_SetConfig+0x9a>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	4a2e      	ldr	r2, [pc, #184]	; (800956c <TIM_Base_SetConfig+0x120>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d017      	beq.n	80094e6 <TIM_Base_SetConfig+0x9a>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	4a2d      	ldr	r2, [pc, #180]	; (8009570 <TIM_Base_SetConfig+0x124>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d013      	beq.n	80094e6 <TIM_Base_SetConfig+0x9a>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	4a2c      	ldr	r2, [pc, #176]	; (8009574 <TIM_Base_SetConfig+0x128>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d00f      	beq.n	80094e6 <TIM_Base_SetConfig+0x9a>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	4a2c      	ldr	r2, [pc, #176]	; (800957c <TIM_Base_SetConfig+0x130>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d00b      	beq.n	80094e6 <TIM_Base_SetConfig+0x9a>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	4a2b      	ldr	r2, [pc, #172]	; (8009580 <TIM_Base_SetConfig+0x134>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d007      	beq.n	80094e6 <TIM_Base_SetConfig+0x9a>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	4a2a      	ldr	r2, [pc, #168]	; (8009584 <TIM_Base_SetConfig+0x138>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d003      	beq.n	80094e6 <TIM_Base_SetConfig+0x9a>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	4a25      	ldr	r2, [pc, #148]	; (8009578 <TIM_Base_SetConfig+0x12c>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d108      	bne.n	80094f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	68db      	ldr	r3, [r3, #12]
 80094f2:	68fa      	ldr	r2, [r7, #12]
 80094f4:	4313      	orrs	r3, r2
 80094f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	695b      	ldr	r3, [r3, #20]
 8009502:	4313      	orrs	r3, r2
 8009504:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	68fa      	ldr	r2, [r7, #12]
 800950a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	689a      	ldr	r2, [r3, #8]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	4a12      	ldr	r2, [pc, #72]	; (8009568 <TIM_Base_SetConfig+0x11c>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d013      	beq.n	800954c <TIM_Base_SetConfig+0x100>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	4a13      	ldr	r2, [pc, #76]	; (8009574 <TIM_Base_SetConfig+0x128>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d00f      	beq.n	800954c <TIM_Base_SetConfig+0x100>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	4a13      	ldr	r2, [pc, #76]	; (800957c <TIM_Base_SetConfig+0x130>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d00b      	beq.n	800954c <TIM_Base_SetConfig+0x100>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4a12      	ldr	r2, [pc, #72]	; (8009580 <TIM_Base_SetConfig+0x134>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d007      	beq.n	800954c <TIM_Base_SetConfig+0x100>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	4a11      	ldr	r2, [pc, #68]	; (8009584 <TIM_Base_SetConfig+0x138>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d003      	beq.n	800954c <TIM_Base_SetConfig+0x100>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	4a0c      	ldr	r2, [pc, #48]	; (8009578 <TIM_Base_SetConfig+0x12c>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d103      	bne.n	8009554 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	691a      	ldr	r2, [r3, #16]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2201      	movs	r2, #1
 8009558:	615a      	str	r2, [r3, #20]
}
 800955a:	bf00      	nop
 800955c:	3714      	adds	r7, #20
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr
 8009566:	bf00      	nop
 8009568:	40012c00 	.word	0x40012c00
 800956c:	40000400 	.word	0x40000400
 8009570:	40000800 	.word	0x40000800
 8009574:	40013400 	.word	0x40013400
 8009578:	40015000 	.word	0x40015000
 800957c:	40014000 	.word	0x40014000
 8009580:	40014400 	.word	0x40014400
 8009584:	40014800 	.word	0x40014800

08009588 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009588:	b480      	push	{r7}
 800958a:	b087      	sub	sp, #28
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	6a1b      	ldr	r3, [r3, #32]
 8009598:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	6a1b      	ldr	r3, [r3, #32]
 800959e:	f023 0201 	bic.w	r2, r3, #1
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	699b      	ldr	r3, [r3, #24]
 80095aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80095b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	011b      	lsls	r3, r3, #4
 80095b8:	693a      	ldr	r2, [r7, #16]
 80095ba:	4313      	orrs	r3, r2
 80095bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	f023 030a 	bic.w	r3, r3, #10
 80095c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80095c6:	697a      	ldr	r2, [r7, #20]
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	4313      	orrs	r3, r2
 80095cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	693a      	ldr	r2, [r7, #16]
 80095d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	697a      	ldr	r2, [r7, #20]
 80095d8:	621a      	str	r2, [r3, #32]
}
 80095da:	bf00      	nop
 80095dc:	371c      	adds	r7, #28
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr

080095e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095e6:	b480      	push	{r7}
 80095e8:	b087      	sub	sp, #28
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	60f8      	str	r0, [r7, #12]
 80095ee:	60b9      	str	r1, [r7, #8]
 80095f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6a1b      	ldr	r3, [r3, #32]
 80095f6:	f023 0210 	bic.w	r2, r3, #16
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	699b      	ldr	r3, [r3, #24]
 8009602:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	6a1b      	ldr	r3, [r3, #32]
 8009608:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009610:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	031b      	lsls	r3, r3, #12
 8009616:	697a      	ldr	r2, [r7, #20]
 8009618:	4313      	orrs	r3, r2
 800961a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009622:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	011b      	lsls	r3, r3, #4
 8009628:	693a      	ldr	r2, [r7, #16]
 800962a:	4313      	orrs	r3, r2
 800962c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	697a      	ldr	r2, [r7, #20]
 8009632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	693a      	ldr	r2, [r7, #16]
 8009638:	621a      	str	r2, [r3, #32]
}
 800963a:	bf00      	nop
 800963c:	371c      	adds	r7, #28
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr

08009646 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009646:	b480      	push	{r7}
 8009648:	b085      	sub	sp, #20
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
 800964e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800965c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800965e:	683a      	ldr	r2, [r7, #0]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	4313      	orrs	r3, r2
 8009664:	f043 0307 	orr.w	r3, r3, #7
 8009668:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	68fa      	ldr	r2, [r7, #12]
 800966e:	609a      	str	r2, [r3, #8]
}
 8009670:	bf00      	nop
 8009672:	3714      	adds	r7, #20
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr

0800967c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800967c:	b480      	push	{r7}
 800967e:	b087      	sub	sp, #28
 8009680:	af00      	add	r7, sp, #0
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	60b9      	str	r1, [r7, #8]
 8009686:	607a      	str	r2, [r7, #4]
 8009688:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009696:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	021a      	lsls	r2, r3, #8
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	431a      	orrs	r2, r3
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	697a      	ldr	r2, [r7, #20]
 80096a6:	4313      	orrs	r3, r2
 80096a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	697a      	ldr	r2, [r7, #20]
 80096ae:	609a      	str	r2, [r3, #8]
}
 80096b0:	bf00      	nop
 80096b2:	371c      	adds	r7, #28
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr

080096bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80096bc:	b480      	push	{r7}
 80096be:	b085      	sub	sp, #20
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d101      	bne.n	80096d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80096d0:	2302      	movs	r3, #2
 80096d2:	e06d      	b.n	80097b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2202      	movs	r2, #2
 80096e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a30      	ldr	r2, [pc, #192]	; (80097bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d009      	beq.n	8009712 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a2f      	ldr	r2, [pc, #188]	; (80097c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d004      	beq.n	8009712 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a2d      	ldr	r2, [pc, #180]	; (80097c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d108      	bne.n	8009724 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009718:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	68fa      	ldr	r2, [r7, #12]
 8009720:	4313      	orrs	r3, r2
 8009722:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800972a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	68fa      	ldr	r2, [r7, #12]
 8009732:	4313      	orrs	r3, r2
 8009734:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	68fa      	ldr	r2, [r7, #12]
 800973c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a1e      	ldr	r2, [pc, #120]	; (80097bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d01d      	beq.n	8009784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009750:	d018      	beq.n	8009784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4a1c      	ldr	r2, [pc, #112]	; (80097c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d013      	beq.n	8009784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a1a      	ldr	r2, [pc, #104]	; (80097cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d00e      	beq.n	8009784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4a15      	ldr	r2, [pc, #84]	; (80097c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d009      	beq.n	8009784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a16      	ldr	r2, [pc, #88]	; (80097d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d004      	beq.n	8009784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a11      	ldr	r2, [pc, #68]	; (80097c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d10c      	bne.n	800979e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800978a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	68ba      	ldr	r2, [r7, #8]
 8009792:	4313      	orrs	r3, r2
 8009794:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	68ba      	ldr	r2, [r7, #8]
 800979c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2201      	movs	r2, #1
 80097a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097ae:	2300      	movs	r3, #0
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3714      	adds	r7, #20
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr
 80097bc:	40012c00 	.word	0x40012c00
 80097c0:	40013400 	.word	0x40013400
 80097c4:	40015000 	.word	0x40015000
 80097c8:	40000400 	.word	0x40000400
 80097cc:	40000800 	.word	0x40000800
 80097d0:	40014000 	.word	0x40014000

080097d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b083      	sub	sp, #12
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80097dc:	bf00      	nop
 80097de:	370c      	adds	r7, #12
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80097f0:	bf00      	nop
 80097f2:	370c      	adds	r7, #12
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr

080097fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009804:	bf00      	nop
 8009806:	370c      	adds	r7, #12
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr

08009810 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d101      	bne.n	8009822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800981e:	2301      	movs	r3, #1
 8009820:	e040      	b.n	80098a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009826:	2b00      	cmp	r3, #0
 8009828:	d106      	bne.n	8009838 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2200      	movs	r2, #0
 800982e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f7fa fcfc 	bl	8004230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2224      	movs	r2, #36	; 0x24
 800983c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	681a      	ldr	r2, [r3, #0]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f022 0201 	bic.w	r2, r2, #1
 800984c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 fc0e 	bl	800a070 <UART_SetConfig>
 8009854:	4603      	mov	r3, r0
 8009856:	2b01      	cmp	r3, #1
 8009858:	d101      	bne.n	800985e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800985a:	2301      	movs	r3, #1
 800985c:	e022      	b.n	80098a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009862:	2b00      	cmp	r3, #0
 8009864:	d002      	beq.n	800986c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 fdd6 	bl	800a418 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	685a      	ldr	r2, [r3, #4]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800987a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	689a      	ldr	r2, [r3, #8]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800988a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f042 0201 	orr.w	r2, r2, #1
 800989a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 fe5d 	bl	800a55c <UART_CheckIdleState>
 80098a2:	4603      	mov	r3, r0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3708      	adds	r7, #8
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b08a      	sub	sp, #40	; 0x28
 80098b0:	af02      	add	r7, sp, #8
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	60b9      	str	r1, [r7, #8]
 80098b6:	603b      	str	r3, [r7, #0]
 80098b8:	4613      	mov	r3, r2
 80098ba:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098c0:	2b20      	cmp	r3, #32
 80098c2:	f040 8082 	bne.w	80099ca <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d002      	beq.n	80098d2 <HAL_UART_Transmit+0x26>
 80098cc:	88fb      	ldrh	r3, [r7, #6]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d101      	bne.n	80098d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80098d2:	2301      	movs	r3, #1
 80098d4:	e07a      	b.n	80099cc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d101      	bne.n	80098e4 <HAL_UART_Transmit+0x38>
 80098e0:	2302      	movs	r3, #2
 80098e2:	e073      	b.n	80099cc <HAL_UART_Transmit+0x120>
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2201      	movs	r2, #1
 80098e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2200      	movs	r2, #0
 80098f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2221      	movs	r2, #33	; 0x21
 80098f8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80098fa:	f7fb f901 	bl	8004b00 <HAL_GetTick>
 80098fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	88fa      	ldrh	r2, [r7, #6]
 8009904:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	88fa      	ldrh	r2, [r7, #6]
 800990c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009918:	d108      	bne.n	800992c <HAL_UART_Transmit+0x80>
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	691b      	ldr	r3, [r3, #16]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d104      	bne.n	800992c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8009922:	2300      	movs	r3, #0
 8009924:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	61bb      	str	r3, [r7, #24]
 800992a:	e003      	b.n	8009934 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009930:	2300      	movs	r3, #0
 8009932:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2200      	movs	r2, #0
 8009938:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800993c:	e02d      	b.n	800999a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	9300      	str	r3, [sp, #0]
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	2200      	movs	r2, #0
 8009946:	2180      	movs	r1, #128	; 0x80
 8009948:	68f8      	ldr	r0, [r7, #12]
 800994a:	f000 fe50 	bl	800a5ee <UART_WaitOnFlagUntilTimeout>
 800994e:	4603      	mov	r3, r0
 8009950:	2b00      	cmp	r3, #0
 8009952:	d001      	beq.n	8009958 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009954:	2303      	movs	r3, #3
 8009956:	e039      	b.n	80099cc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8009958:	69fb      	ldr	r3, [r7, #28]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d10b      	bne.n	8009976 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800995e:	69bb      	ldr	r3, [r7, #24]
 8009960:	881a      	ldrh	r2, [r3, #0]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800996a:	b292      	uxth	r2, r2
 800996c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	3302      	adds	r3, #2
 8009972:	61bb      	str	r3, [r7, #24]
 8009974:	e008      	b.n	8009988 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009976:	69fb      	ldr	r3, [r7, #28]
 8009978:	781a      	ldrb	r2, [r3, #0]
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	b292      	uxth	r2, r2
 8009980:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009982:	69fb      	ldr	r3, [r7, #28]
 8009984:	3301      	adds	r3, #1
 8009986:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800998e:	b29b      	uxth	r3, r3
 8009990:	3b01      	subs	r3, #1
 8009992:	b29a      	uxth	r2, r3
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d1cb      	bne.n	800993e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	9300      	str	r3, [sp, #0]
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	2200      	movs	r2, #0
 80099ae:	2140      	movs	r1, #64	; 0x40
 80099b0:	68f8      	ldr	r0, [r7, #12]
 80099b2:	f000 fe1c 	bl	800a5ee <UART_WaitOnFlagUntilTimeout>
 80099b6:	4603      	mov	r3, r0
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d001      	beq.n	80099c0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80099bc:	2303      	movs	r3, #3
 80099be:	e005      	b.n	80099cc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2220      	movs	r2, #32
 80099c4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80099c6:	2300      	movs	r3, #0
 80099c8:	e000      	b.n	80099cc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80099ca:	2302      	movs	r3, #2
  }
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3720      	adds	r7, #32
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b08a      	sub	sp, #40	; 0x28
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	4613      	mov	r3, r2
 80099e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099e6:	2b20      	cmp	r3, #32
 80099e8:	d13d      	bne.n	8009a66 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d002      	beq.n	80099f6 <HAL_UART_Receive_IT+0x22>
 80099f0:	88fb      	ldrh	r3, [r7, #6]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d101      	bne.n	80099fa <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80099f6:	2301      	movs	r3, #1
 80099f8:	e036      	b.n	8009a68 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d101      	bne.n	8009a08 <HAL_UART_Receive_IT+0x34>
 8009a04:	2302      	movs	r3, #2
 8009a06:	e02f      	b.n	8009a68 <HAL_UART_Receive_IT+0x94>
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2200      	movs	r2, #0
 8009a14:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d018      	beq.n	8009a56 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	e853 3f00 	ldrex	r3, [r3]
 8009a30:	613b      	str	r3, [r7, #16]
   return(result);
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009a38:	627b      	str	r3, [r7, #36]	; 0x24
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	461a      	mov	r2, r3
 8009a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a42:	623b      	str	r3, [r7, #32]
 8009a44:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a46:	69f9      	ldr	r1, [r7, #28]
 8009a48:	6a3a      	ldr	r2, [r7, #32]
 8009a4a:	e841 2300 	strex	r3, r2, [r1]
 8009a4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d1e6      	bne.n	8009a24 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009a56:	88fb      	ldrh	r3, [r7, #6]
 8009a58:	461a      	mov	r2, r3
 8009a5a:	68b9      	ldr	r1, [r7, #8]
 8009a5c:	68f8      	ldr	r0, [r7, #12]
 8009a5e:	f000 fe8b 	bl	800a778 <UART_Start_Receive_IT>
 8009a62:	4603      	mov	r3, r0
 8009a64:	e000      	b.n	8009a68 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009a66:	2302      	movs	r3, #2
  }
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3728      	adds	r7, #40	; 0x28
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b0ba      	sub	sp, #232	; 0xe8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	69db      	ldr	r3, [r3, #28]
 8009a7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009a96:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009a9a:	f640 030f 	movw	r3, #2063	; 0x80f
 8009a9e:	4013      	ands	r3, r2
 8009aa0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009aa4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d115      	bne.n	8009ad8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ab0:	f003 0320 	and.w	r3, r3, #32
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d00f      	beq.n	8009ad8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009abc:	f003 0320 	and.w	r3, r3, #32
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d009      	beq.n	8009ad8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	f000 82a4 	beq.w	800a016 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	4798      	blx	r3
      }
      return;
 8009ad6:	e29e      	b.n	800a016 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009ad8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f000 8117 	beq.w	8009d10 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009ae2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ae6:	f003 0301 	and.w	r3, r3, #1
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d106      	bne.n	8009afc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009aee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009af2:	4b85      	ldr	r3, [pc, #532]	; (8009d08 <HAL_UART_IRQHandler+0x298>)
 8009af4:	4013      	ands	r3, r2
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	f000 810a 	beq.w	8009d10 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b00:	f003 0301 	and.w	r3, r3, #1
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d011      	beq.n	8009b2c <HAL_UART_IRQHandler+0xbc>
 8009b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d00b      	beq.n	8009b2c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b22:	f043 0201 	orr.w	r2, r3, #1
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b30:	f003 0302 	and.w	r3, r3, #2
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d011      	beq.n	8009b5c <HAL_UART_IRQHandler+0xec>
 8009b38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b3c:	f003 0301 	and.w	r3, r3, #1
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d00b      	beq.n	8009b5c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2202      	movs	r2, #2
 8009b4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b52:	f043 0204 	orr.w	r2, r3, #4
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b60:	f003 0304 	and.w	r3, r3, #4
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d011      	beq.n	8009b8c <HAL_UART_IRQHandler+0x11c>
 8009b68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b6c:	f003 0301 	and.w	r3, r3, #1
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d00b      	beq.n	8009b8c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2204      	movs	r2, #4
 8009b7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b82:	f043 0202 	orr.w	r2, r3, #2
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b90:	f003 0308 	and.w	r3, r3, #8
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d017      	beq.n	8009bc8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b9c:	f003 0320 	and.w	r3, r3, #32
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d105      	bne.n	8009bb0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009ba4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ba8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d00b      	beq.n	8009bc8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	2208      	movs	r2, #8
 8009bb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bbe:	f043 0208 	orr.w	r2, r3, #8
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d012      	beq.n	8009bfa <HAL_UART_IRQHandler+0x18a>
 8009bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d00c      	beq.n	8009bfa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009be8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bf0:	f043 0220 	orr.w	r2, r3, #32
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	f000 820a 	beq.w	800a01a <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c0a:	f003 0320 	and.w	r3, r3, #32
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d00d      	beq.n	8009c2e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c16:	f003 0320 	and.w	r3, r3, #32
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d007      	beq.n	8009c2e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d003      	beq.n	8009c2e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c42:	2b40      	cmp	r3, #64	; 0x40
 8009c44:	d005      	beq.n	8009c52 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009c46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009c4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d04f      	beq.n	8009cf2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 fe3c 	bl	800a8d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c62:	2b40      	cmp	r3, #64	; 0x40
 8009c64:	d141      	bne.n	8009cea <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	3308      	adds	r3, #8
 8009c6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c74:	e853 3f00 	ldrex	r3, [r3]
 8009c78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009c7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009c80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	3308      	adds	r3, #8
 8009c8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009c92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009c96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009c9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009ca2:	e841 2300 	strex	r3, r2, [r1]
 8009ca6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009caa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d1d9      	bne.n	8009c66 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d013      	beq.n	8009ce2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cbe:	4a13      	ldr	r2, [pc, #76]	; (8009d0c <HAL_UART_IRQHandler+0x29c>)
 8009cc0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7fc fd00 	bl	80066cc <HAL_DMA_Abort_IT>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d017      	beq.n	8009d02 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8009cdc:	4610      	mov	r0, r2
 8009cde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ce0:	e00f      	b.n	8009d02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 f9ae 	bl	800a044 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ce8:	e00b      	b.n	8009d02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 f9aa 	bl	800a044 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cf0:	e007      	b.n	8009d02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 f9a6 	bl	800a044 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8009d00:	e18b      	b.n	800a01a <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d02:	bf00      	nop
    return;
 8009d04:	e189      	b.n	800a01a <HAL_UART_IRQHandler+0x5aa>
 8009d06:	bf00      	nop
 8009d08:	04000120 	.word	0x04000120
 8009d0c:	0800a997 	.word	0x0800a997

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	f040 8143 	bne.w	8009fa0 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d1e:	f003 0310 	and.w	r3, r3, #16
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	f000 813c 	beq.w	8009fa0 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d2c:	f003 0310 	and.w	r3, r3, #16
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	f000 8135 	beq.w	8009fa0 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	2210      	movs	r2, #16
 8009d3c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d48:	2b40      	cmp	r3, #64	; 0x40
 8009d4a:	f040 80b1 	bne.w	8009eb0 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009d5a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	f000 815d 	beq.w	800a01e <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009d6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	f080 8155 	bcs.w	800a01e <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009d7a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d82:	699b      	ldr	r3, [r3, #24]
 8009d84:	2b20      	cmp	r3, #32
 8009d86:	f000 8085 	beq.w	8009e94 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009d96:	e853 3f00 	ldrex	r3, [r3]
 8009d9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009d9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009da2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009da6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	461a      	mov	r2, r3
 8009db0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009db4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009db8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dbc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009dc0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009dc4:	e841 2300 	strex	r3, r2, [r1]
 8009dc8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009dcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d1da      	bne.n	8009d8a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	3308      	adds	r3, #8
 8009dda:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ddc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009dde:	e853 3f00 	ldrex	r3, [r3]
 8009de2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009de4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009de6:	f023 0301 	bic.w	r3, r3, #1
 8009dea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	3308      	adds	r3, #8
 8009df4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009df8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009dfc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dfe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009e00:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009e04:	e841 2300 	strex	r3, r2, [r1]
 8009e08:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009e0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d1e1      	bne.n	8009dd4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	3308      	adds	r3, #8
 8009e16:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e1a:	e853 3f00 	ldrex	r3, [r3]
 8009e1e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009e20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	3308      	adds	r3, #8
 8009e30:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009e34:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009e36:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e38:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009e3a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009e3c:	e841 2300 	strex	r3, r2, [r1]
 8009e40:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009e42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d1e3      	bne.n	8009e10 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2220      	movs	r2, #32
 8009e4c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2200      	movs	r2, #0
 8009e52:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e5c:	e853 3f00 	ldrex	r3, [r3]
 8009e60:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009e62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e64:	f023 0310 	bic.w	r3, r3, #16
 8009e68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	461a      	mov	r2, r3
 8009e72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009e76:	65bb      	str	r3, [r7, #88]	; 0x58
 8009e78:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009e7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009e7e:	e841 2300 	strex	r3, r2, [r1]
 8009e82:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009e84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d1e4      	bne.n	8009e54 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7fc fbe3 	bl	800665a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	1ad3      	subs	r3, r2, r3
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 f8d5 	bl	800a058 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009eae:	e0b6      	b.n	800a01e <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	1ad3      	subs	r3, r2, r3
 8009ec0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	f000 80a8 	beq.w	800a022 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8009ed2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	f000 80a3 	beq.w	800a022 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee4:	e853 3f00 	ldrex	r3, [r3]
 8009ee8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ef0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	461a      	mov	r2, r3
 8009efa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009efe:	647b      	str	r3, [r7, #68]	; 0x44
 8009f00:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009f04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f06:	e841 2300 	strex	r3, r2, [r1]
 8009f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d1e4      	bne.n	8009edc <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	3308      	adds	r3, #8
 8009f18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1c:	e853 3f00 	ldrex	r3, [r3]
 8009f20:	623b      	str	r3, [r7, #32]
   return(result);
 8009f22:	6a3b      	ldr	r3, [r7, #32]
 8009f24:	f023 0301 	bic.w	r3, r3, #1
 8009f28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	3308      	adds	r3, #8
 8009f32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009f36:	633a      	str	r2, [r7, #48]	; 0x30
 8009f38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f3e:	e841 2300 	strex	r3, r2, [r1]
 8009f42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d1e3      	bne.n	8009f12 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2220      	movs	r2, #32
 8009f4e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2200      	movs	r2, #0
 8009f54:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	e853 3f00 	ldrex	r3, [r3]
 8009f68:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f023 0310 	bic.w	r3, r3, #16
 8009f70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	461a      	mov	r2, r3
 8009f7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009f7e:	61fb      	str	r3, [r7, #28]
 8009f80:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f82:	69b9      	ldr	r1, [r7, #24]
 8009f84:	69fa      	ldr	r2, [r7, #28]
 8009f86:	e841 2300 	strex	r3, r2, [r1]
 8009f8a:	617b      	str	r3, [r7, #20]
   return(result);
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d1e4      	bne.n	8009f5c <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009f92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009f96:	4619      	mov	r1, r3
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 f85d 	bl	800a058 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009f9e:	e040      	b.n	800a022 <HAL_UART_IRQHandler+0x5b2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00e      	beq.n	8009fca <HAL_UART_IRQHandler+0x55a>
 8009fac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009fb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d008      	beq.n	8009fca <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009fc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 fe83 	bl	800acce <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009fc8:	e02e      	b.n	800a028 <HAL_UART_IRQHandler+0x5b8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d00e      	beq.n	8009ff4 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d008      	beq.n	8009ff4 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d01d      	beq.n	800a026 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	4798      	blx	r3
    }
    return;
 8009ff2:	e018      	b.n	800a026 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d013      	beq.n	800a028 <HAL_UART_IRQHandler+0x5b8>
 800a000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d00d      	beq.n	800a028 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 fcd8 	bl	800a9c2 <UART_EndTransmit_IT>
    return;
 800a012:	bf00      	nop
 800a014:	e008      	b.n	800a028 <HAL_UART_IRQHandler+0x5b8>
      return;
 800a016:	bf00      	nop
 800a018:	e006      	b.n	800a028 <HAL_UART_IRQHandler+0x5b8>
    return;
 800a01a:	bf00      	nop
 800a01c:	e004      	b.n	800a028 <HAL_UART_IRQHandler+0x5b8>
      return;
 800a01e:	bf00      	nop
 800a020:	e002      	b.n	800a028 <HAL_UART_IRQHandler+0x5b8>
      return;
 800a022:	bf00      	nop
 800a024:	e000      	b.n	800a028 <HAL_UART_IRQHandler+0x5b8>
    return;
 800a026:	bf00      	nop
  }

}
 800a028:	37e8      	adds	r7, #232	; 0xe8
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	bf00      	nop

0800a030 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a030:	b480      	push	{r7}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a038:	bf00      	nop
 800a03a:	370c      	adds	r7, #12
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr

0800a044 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a044:	b480      	push	{r7}
 800a046:	b083      	sub	sp, #12
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a04c:	bf00      	nop
 800a04e:	370c      	adds	r7, #12
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a058:	b480      	push	{r7}
 800a05a:	b083      	sub	sp, #12
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	460b      	mov	r3, r1
 800a062:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a064:	bf00      	nop
 800a066:	370c      	adds	r7, #12
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b088      	sub	sp, #32
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a078:	2300      	movs	r3, #0
 800a07a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	689a      	ldr	r2, [r3, #8]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	691b      	ldr	r3, [r3, #16]
 800a084:	431a      	orrs	r2, r3
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	695b      	ldr	r3, [r3, #20]
 800a08a:	431a      	orrs	r2, r3
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	69db      	ldr	r3, [r3, #28]
 800a090:	4313      	orrs	r3, r2
 800a092:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	4baa      	ldr	r3, [pc, #680]	; (800a344 <UART_SetConfig+0x2d4>)
 800a09c:	4013      	ands	r3, r2
 800a09e:	687a      	ldr	r2, [r7, #4]
 800a0a0:	6812      	ldr	r2, [r2, #0]
 800a0a2:	6979      	ldr	r1, [r7, #20]
 800a0a4:	430b      	orrs	r3, r1
 800a0a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	68da      	ldr	r2, [r3, #12]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	430a      	orrs	r2, r1
 800a0bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	699b      	ldr	r3, [r3, #24]
 800a0c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6a1b      	ldr	r3, [r3, #32]
 800a0c8:	697a      	ldr	r2, [r7, #20]
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	689b      	ldr	r3, [r3, #8]
 800a0d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	697a      	ldr	r2, [r7, #20]
 800a0de:	430a      	orrs	r2, r1
 800a0e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a98      	ldr	r2, [pc, #608]	; (800a348 <UART_SetConfig+0x2d8>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d121      	bne.n	800a130 <UART_SetConfig+0xc0>
 800a0ec:	4b97      	ldr	r3, [pc, #604]	; (800a34c <UART_SetConfig+0x2dc>)
 800a0ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0f0:	f003 0303 	and.w	r3, r3, #3
 800a0f4:	2b03      	cmp	r3, #3
 800a0f6:	d817      	bhi.n	800a128 <UART_SetConfig+0xb8>
 800a0f8:	a201      	add	r2, pc, #4	; (adr r2, 800a100 <UART_SetConfig+0x90>)
 800a0fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0fe:	bf00      	nop
 800a100:	0800a111 	.word	0x0800a111
 800a104:	0800a11d 	.word	0x0800a11d
 800a108:	0800a123 	.word	0x0800a123
 800a10c:	0800a117 	.word	0x0800a117
 800a110:	2301      	movs	r3, #1
 800a112:	77fb      	strb	r3, [r7, #31]
 800a114:	e0b2      	b.n	800a27c <UART_SetConfig+0x20c>
 800a116:	2302      	movs	r3, #2
 800a118:	77fb      	strb	r3, [r7, #31]
 800a11a:	e0af      	b.n	800a27c <UART_SetConfig+0x20c>
 800a11c:	2304      	movs	r3, #4
 800a11e:	77fb      	strb	r3, [r7, #31]
 800a120:	e0ac      	b.n	800a27c <UART_SetConfig+0x20c>
 800a122:	2308      	movs	r3, #8
 800a124:	77fb      	strb	r3, [r7, #31]
 800a126:	e0a9      	b.n	800a27c <UART_SetConfig+0x20c>
 800a128:	2310      	movs	r3, #16
 800a12a:	77fb      	strb	r3, [r7, #31]
 800a12c:	bf00      	nop
 800a12e:	e0a5      	b.n	800a27c <UART_SetConfig+0x20c>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a86      	ldr	r2, [pc, #536]	; (800a350 <UART_SetConfig+0x2e0>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d123      	bne.n	800a182 <UART_SetConfig+0x112>
 800a13a:	4b84      	ldr	r3, [pc, #528]	; (800a34c <UART_SetConfig+0x2dc>)
 800a13c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a13e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a146:	d012      	beq.n	800a16e <UART_SetConfig+0xfe>
 800a148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a14c:	d802      	bhi.n	800a154 <UART_SetConfig+0xe4>
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d007      	beq.n	800a162 <UART_SetConfig+0xf2>
 800a152:	e012      	b.n	800a17a <UART_SetConfig+0x10a>
 800a154:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a158:	d00c      	beq.n	800a174 <UART_SetConfig+0x104>
 800a15a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a15e:	d003      	beq.n	800a168 <UART_SetConfig+0xf8>
 800a160:	e00b      	b.n	800a17a <UART_SetConfig+0x10a>
 800a162:	2300      	movs	r3, #0
 800a164:	77fb      	strb	r3, [r7, #31]
 800a166:	e089      	b.n	800a27c <UART_SetConfig+0x20c>
 800a168:	2302      	movs	r3, #2
 800a16a:	77fb      	strb	r3, [r7, #31]
 800a16c:	e086      	b.n	800a27c <UART_SetConfig+0x20c>
 800a16e:	2304      	movs	r3, #4
 800a170:	77fb      	strb	r3, [r7, #31]
 800a172:	e083      	b.n	800a27c <UART_SetConfig+0x20c>
 800a174:	2308      	movs	r3, #8
 800a176:	77fb      	strb	r3, [r7, #31]
 800a178:	e080      	b.n	800a27c <UART_SetConfig+0x20c>
 800a17a:	2310      	movs	r3, #16
 800a17c:	77fb      	strb	r3, [r7, #31]
 800a17e:	bf00      	nop
 800a180:	e07c      	b.n	800a27c <UART_SetConfig+0x20c>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a73      	ldr	r2, [pc, #460]	; (800a354 <UART_SetConfig+0x2e4>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d123      	bne.n	800a1d4 <UART_SetConfig+0x164>
 800a18c:	4b6f      	ldr	r3, [pc, #444]	; (800a34c <UART_SetConfig+0x2dc>)
 800a18e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a190:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800a194:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a198:	d012      	beq.n	800a1c0 <UART_SetConfig+0x150>
 800a19a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a19e:	d802      	bhi.n	800a1a6 <UART_SetConfig+0x136>
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d007      	beq.n	800a1b4 <UART_SetConfig+0x144>
 800a1a4:	e012      	b.n	800a1cc <UART_SetConfig+0x15c>
 800a1a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a1aa:	d00c      	beq.n	800a1c6 <UART_SetConfig+0x156>
 800a1ac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800a1b0:	d003      	beq.n	800a1ba <UART_SetConfig+0x14a>
 800a1b2:	e00b      	b.n	800a1cc <UART_SetConfig+0x15c>
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	77fb      	strb	r3, [r7, #31]
 800a1b8:	e060      	b.n	800a27c <UART_SetConfig+0x20c>
 800a1ba:	2302      	movs	r3, #2
 800a1bc:	77fb      	strb	r3, [r7, #31]
 800a1be:	e05d      	b.n	800a27c <UART_SetConfig+0x20c>
 800a1c0:	2304      	movs	r3, #4
 800a1c2:	77fb      	strb	r3, [r7, #31]
 800a1c4:	e05a      	b.n	800a27c <UART_SetConfig+0x20c>
 800a1c6:	2308      	movs	r3, #8
 800a1c8:	77fb      	strb	r3, [r7, #31]
 800a1ca:	e057      	b.n	800a27c <UART_SetConfig+0x20c>
 800a1cc:	2310      	movs	r3, #16
 800a1ce:	77fb      	strb	r3, [r7, #31]
 800a1d0:	bf00      	nop
 800a1d2:	e053      	b.n	800a27c <UART_SetConfig+0x20c>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a5f      	ldr	r2, [pc, #380]	; (800a358 <UART_SetConfig+0x2e8>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d123      	bne.n	800a226 <UART_SetConfig+0x1b6>
 800a1de:	4b5b      	ldr	r3, [pc, #364]	; (800a34c <UART_SetConfig+0x2dc>)
 800a1e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1e2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800a1e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1ea:	d012      	beq.n	800a212 <UART_SetConfig+0x1a2>
 800a1ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1f0:	d802      	bhi.n	800a1f8 <UART_SetConfig+0x188>
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d007      	beq.n	800a206 <UART_SetConfig+0x196>
 800a1f6:	e012      	b.n	800a21e <UART_SetConfig+0x1ae>
 800a1f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a1fc:	d00c      	beq.n	800a218 <UART_SetConfig+0x1a8>
 800a1fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a202:	d003      	beq.n	800a20c <UART_SetConfig+0x19c>
 800a204:	e00b      	b.n	800a21e <UART_SetConfig+0x1ae>
 800a206:	2300      	movs	r3, #0
 800a208:	77fb      	strb	r3, [r7, #31]
 800a20a:	e037      	b.n	800a27c <UART_SetConfig+0x20c>
 800a20c:	2302      	movs	r3, #2
 800a20e:	77fb      	strb	r3, [r7, #31]
 800a210:	e034      	b.n	800a27c <UART_SetConfig+0x20c>
 800a212:	2304      	movs	r3, #4
 800a214:	77fb      	strb	r3, [r7, #31]
 800a216:	e031      	b.n	800a27c <UART_SetConfig+0x20c>
 800a218:	2308      	movs	r3, #8
 800a21a:	77fb      	strb	r3, [r7, #31]
 800a21c:	e02e      	b.n	800a27c <UART_SetConfig+0x20c>
 800a21e:	2310      	movs	r3, #16
 800a220:	77fb      	strb	r3, [r7, #31]
 800a222:	bf00      	nop
 800a224:	e02a      	b.n	800a27c <UART_SetConfig+0x20c>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a4c      	ldr	r2, [pc, #304]	; (800a35c <UART_SetConfig+0x2ec>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d123      	bne.n	800a278 <UART_SetConfig+0x208>
 800a230:	4b46      	ldr	r3, [pc, #280]	; (800a34c <UART_SetConfig+0x2dc>)
 800a232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a234:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800a238:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a23c:	d012      	beq.n	800a264 <UART_SetConfig+0x1f4>
 800a23e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a242:	d802      	bhi.n	800a24a <UART_SetConfig+0x1da>
 800a244:	2b00      	cmp	r3, #0
 800a246:	d007      	beq.n	800a258 <UART_SetConfig+0x1e8>
 800a248:	e012      	b.n	800a270 <UART_SetConfig+0x200>
 800a24a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a24e:	d00c      	beq.n	800a26a <UART_SetConfig+0x1fa>
 800a250:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a254:	d003      	beq.n	800a25e <UART_SetConfig+0x1ee>
 800a256:	e00b      	b.n	800a270 <UART_SetConfig+0x200>
 800a258:	2300      	movs	r3, #0
 800a25a:	77fb      	strb	r3, [r7, #31]
 800a25c:	e00e      	b.n	800a27c <UART_SetConfig+0x20c>
 800a25e:	2302      	movs	r3, #2
 800a260:	77fb      	strb	r3, [r7, #31]
 800a262:	e00b      	b.n	800a27c <UART_SetConfig+0x20c>
 800a264:	2304      	movs	r3, #4
 800a266:	77fb      	strb	r3, [r7, #31]
 800a268:	e008      	b.n	800a27c <UART_SetConfig+0x20c>
 800a26a:	2308      	movs	r3, #8
 800a26c:	77fb      	strb	r3, [r7, #31]
 800a26e:	e005      	b.n	800a27c <UART_SetConfig+0x20c>
 800a270:	2310      	movs	r3, #16
 800a272:	77fb      	strb	r3, [r7, #31]
 800a274:	bf00      	nop
 800a276:	e001      	b.n	800a27c <UART_SetConfig+0x20c>
 800a278:	2310      	movs	r3, #16
 800a27a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	69db      	ldr	r3, [r3, #28]
 800a280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a284:	d16e      	bne.n	800a364 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800a286:	7ffb      	ldrb	r3, [r7, #31]
 800a288:	2b08      	cmp	r3, #8
 800a28a:	d828      	bhi.n	800a2de <UART_SetConfig+0x26e>
 800a28c:	a201      	add	r2, pc, #4	; (adr r2, 800a294 <UART_SetConfig+0x224>)
 800a28e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a292:	bf00      	nop
 800a294:	0800a2b9 	.word	0x0800a2b9
 800a298:	0800a2c1 	.word	0x0800a2c1
 800a29c:	0800a2c9 	.word	0x0800a2c9
 800a2a0:	0800a2df 	.word	0x0800a2df
 800a2a4:	0800a2cf 	.word	0x0800a2cf
 800a2a8:	0800a2df 	.word	0x0800a2df
 800a2ac:	0800a2df 	.word	0x0800a2df
 800a2b0:	0800a2df 	.word	0x0800a2df
 800a2b4:	0800a2d7 	.word	0x0800a2d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2b8:	f7fe fb30 	bl	800891c <HAL_RCC_GetPCLK1Freq>
 800a2bc:	61b8      	str	r0, [r7, #24]
        break;
 800a2be:	e013      	b.n	800a2e8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2c0:	f7fe fb4e 	bl	8008960 <HAL_RCC_GetPCLK2Freq>
 800a2c4:	61b8      	str	r0, [r7, #24]
        break;
 800a2c6:	e00f      	b.n	800a2e8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a2c8:	4b25      	ldr	r3, [pc, #148]	; (800a360 <UART_SetConfig+0x2f0>)
 800a2ca:	61bb      	str	r3, [r7, #24]
        break;
 800a2cc:	e00c      	b.n	800a2e8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a2ce:	f7fe faaf 	bl	8008830 <HAL_RCC_GetSysClockFreq>
 800a2d2:	61b8      	str	r0, [r7, #24]
        break;
 800a2d4:	e008      	b.n	800a2e8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2da:	61bb      	str	r3, [r7, #24]
        break;
 800a2dc:	e004      	b.n	800a2e8 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	77bb      	strb	r3, [r7, #30]
        break;
 800a2e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a2e8:	69bb      	ldr	r3, [r7, #24]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	f000 8086 	beq.w	800a3fc <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a2f0:	69bb      	ldr	r3, [r7, #24]
 800a2f2:	005a      	lsls	r2, r3, #1
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	085b      	lsrs	r3, r3, #1
 800a2fa:	441a      	add	r2, r3
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	fbb2 f3f3 	udiv	r3, r2, r3
 800a304:	b29b      	uxth	r3, r3
 800a306:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	2b0f      	cmp	r3, #15
 800a30c:	d916      	bls.n	800a33c <UART_SetConfig+0x2cc>
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a314:	d212      	bcs.n	800a33c <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	b29b      	uxth	r3, r3
 800a31a:	f023 030f 	bic.w	r3, r3, #15
 800a31e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	085b      	lsrs	r3, r3, #1
 800a324:	b29b      	uxth	r3, r3
 800a326:	f003 0307 	and.w	r3, r3, #7
 800a32a:	b29a      	uxth	r2, r3
 800a32c:	89fb      	ldrh	r3, [r7, #14]
 800a32e:	4313      	orrs	r3, r2
 800a330:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	89fa      	ldrh	r2, [r7, #14]
 800a338:	60da      	str	r2, [r3, #12]
 800a33a:	e05f      	b.n	800a3fc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800a33c:	2301      	movs	r3, #1
 800a33e:	77bb      	strb	r3, [r7, #30]
 800a340:	e05c      	b.n	800a3fc <UART_SetConfig+0x38c>
 800a342:	bf00      	nop
 800a344:	efff69f3 	.word	0xefff69f3
 800a348:	40013800 	.word	0x40013800
 800a34c:	40021000 	.word	0x40021000
 800a350:	40004400 	.word	0x40004400
 800a354:	40004800 	.word	0x40004800
 800a358:	40004c00 	.word	0x40004c00
 800a35c:	40005000 	.word	0x40005000
 800a360:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 800a364:	7ffb      	ldrb	r3, [r7, #31]
 800a366:	2b08      	cmp	r3, #8
 800a368:	d827      	bhi.n	800a3ba <UART_SetConfig+0x34a>
 800a36a:	a201      	add	r2, pc, #4	; (adr r2, 800a370 <UART_SetConfig+0x300>)
 800a36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a370:	0800a395 	.word	0x0800a395
 800a374:	0800a39d 	.word	0x0800a39d
 800a378:	0800a3a5 	.word	0x0800a3a5
 800a37c:	0800a3bb 	.word	0x0800a3bb
 800a380:	0800a3ab 	.word	0x0800a3ab
 800a384:	0800a3bb 	.word	0x0800a3bb
 800a388:	0800a3bb 	.word	0x0800a3bb
 800a38c:	0800a3bb 	.word	0x0800a3bb
 800a390:	0800a3b3 	.word	0x0800a3b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a394:	f7fe fac2 	bl	800891c <HAL_RCC_GetPCLK1Freq>
 800a398:	61b8      	str	r0, [r7, #24]
        break;
 800a39a:	e013      	b.n	800a3c4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a39c:	f7fe fae0 	bl	8008960 <HAL_RCC_GetPCLK2Freq>
 800a3a0:	61b8      	str	r0, [r7, #24]
        break;
 800a3a2:	e00f      	b.n	800a3c4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a3a4:	4b1b      	ldr	r3, [pc, #108]	; (800a414 <UART_SetConfig+0x3a4>)
 800a3a6:	61bb      	str	r3, [r7, #24]
        break;
 800a3a8:	e00c      	b.n	800a3c4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a3aa:	f7fe fa41 	bl	8008830 <HAL_RCC_GetSysClockFreq>
 800a3ae:	61b8      	str	r0, [r7, #24]
        break;
 800a3b0:	e008      	b.n	800a3c4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3b6:	61bb      	str	r3, [r7, #24]
        break;
 800a3b8:	e004      	b.n	800a3c4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	77bb      	strb	r3, [r7, #30]
        break;
 800a3c2:	bf00      	nop
    }

    if (pclk != 0U)
 800a3c4:	69bb      	ldr	r3, [r7, #24]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d018      	beq.n	800a3fc <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	085a      	lsrs	r2, r3, #1
 800a3d0:	69bb      	ldr	r3, [r7, #24]
 800a3d2:	441a      	add	r2, r3
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	2b0f      	cmp	r3, #15
 800a3e4:	d908      	bls.n	800a3f8 <UART_SetConfig+0x388>
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3ec:	d204      	bcs.n	800a3f8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	693a      	ldr	r2, [r7, #16]
 800a3f4:	60da      	str	r2, [r3, #12]
 800a3f6:	e001      	b.n	800a3fc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2200      	movs	r2, #0
 800a400:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2200      	movs	r2, #0
 800a406:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a408:	7fbb      	ldrb	r3, [r7, #30]
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3720      	adds	r7, #32
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	007a1200 	.word	0x007a1200

0800a418 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a424:	f003 0301 	and.w	r3, r3, #1
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d00a      	beq.n	800a442 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	430a      	orrs	r2, r1
 800a440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a446:	f003 0302 	and.w	r3, r3, #2
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00a      	beq.n	800a464 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	430a      	orrs	r2, r1
 800a462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a468:	f003 0304 	and.w	r3, r3, #4
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d00a      	beq.n	800a486 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	685b      	ldr	r3, [r3, #4]
 800a476:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	430a      	orrs	r2, r1
 800a484:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a48a:	f003 0308 	and.w	r3, r3, #8
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d00a      	beq.n	800a4a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	430a      	orrs	r2, r1
 800a4a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ac:	f003 0310 	and.w	r3, r3, #16
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d00a      	beq.n	800a4ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	689b      	ldr	r3, [r3, #8]
 800a4ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	430a      	orrs	r2, r1
 800a4c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ce:	f003 0320 	and.w	r3, r3, #32
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00a      	beq.n	800a4ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	689b      	ldr	r3, [r3, #8]
 800a4dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	430a      	orrs	r2, r1
 800a4ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d01a      	beq.n	800a52e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	430a      	orrs	r2, r1
 800a50c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a512:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a516:	d10a      	bne.n	800a52e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	430a      	orrs	r2, r1
 800a52c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a536:	2b00      	cmp	r3, #0
 800a538:	d00a      	beq.n	800a550 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	430a      	orrs	r2, r1
 800a54e:	605a      	str	r2, [r3, #4]
  }
}
 800a550:	bf00      	nop
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b086      	sub	sp, #24
 800a560:	af02      	add	r7, sp, #8
 800a562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2200      	movs	r2, #0
 800a568:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a56c:	f7fa fac8 	bl	8004b00 <HAL_GetTick>
 800a570:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f003 0308 	and.w	r3, r3, #8
 800a57c:	2b08      	cmp	r3, #8
 800a57e:	d10e      	bne.n	800a59e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a580:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a584:	9300      	str	r3, [sp, #0]
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2200      	movs	r2, #0
 800a58a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 f82d 	bl	800a5ee <UART_WaitOnFlagUntilTimeout>
 800a594:	4603      	mov	r3, r0
 800a596:	2b00      	cmp	r3, #0
 800a598:	d001      	beq.n	800a59e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a59a:	2303      	movs	r3, #3
 800a59c:	e023      	b.n	800a5e6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f003 0304 	and.w	r3, r3, #4
 800a5a8:	2b04      	cmp	r3, #4
 800a5aa:	d10e      	bne.n	800a5ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a5b0:	9300      	str	r3, [sp, #0]
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 f817 	bl	800a5ee <UART_WaitOnFlagUntilTimeout>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d001      	beq.n	800a5ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5c6:	2303      	movs	r3, #3
 800a5c8:	e00d      	b.n	800a5e6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2220      	movs	r2, #32
 800a5ce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2220      	movs	r2, #32
 800a5d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a5e4:	2300      	movs	r3, #0
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3710      	adds	r7, #16
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}

0800a5ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a5ee:	b580      	push	{r7, lr}
 800a5f0:	b09c      	sub	sp, #112	; 0x70
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	60f8      	str	r0, [r7, #12]
 800a5f6:	60b9      	str	r1, [r7, #8]
 800a5f8:	603b      	str	r3, [r7, #0]
 800a5fa:	4613      	mov	r3, r2
 800a5fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5fe:	e0a5      	b.n	800a74c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a600:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a602:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a606:	f000 80a1 	beq.w	800a74c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a60a:	f7fa fa79 	bl	8004b00 <HAL_GetTick>
 800a60e:	4602      	mov	r2, r0
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	1ad3      	subs	r3, r2, r3
 800a614:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a616:	429a      	cmp	r2, r3
 800a618:	d302      	bcc.n	800a620 <UART_WaitOnFlagUntilTimeout+0x32>
 800a61a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d13e      	bne.n	800a69e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a628:	e853 3f00 	ldrex	r3, [r3]
 800a62c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a62e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a630:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a634:	667b      	str	r3, [r7, #100]	; 0x64
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	461a      	mov	r2, r3
 800a63c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a63e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a640:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a642:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a644:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a646:	e841 2300 	strex	r3, r2, [r1]
 800a64a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a64c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d1e6      	bne.n	800a620 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	3308      	adds	r3, #8
 800a658:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a65a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a65c:	e853 3f00 	ldrex	r3, [r3]
 800a660:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a664:	f023 0301 	bic.w	r3, r3, #1
 800a668:	663b      	str	r3, [r7, #96]	; 0x60
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	3308      	adds	r3, #8
 800a670:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a672:	64ba      	str	r2, [r7, #72]	; 0x48
 800a674:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a676:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a678:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a67a:	e841 2300 	strex	r3, r2, [r1]
 800a67e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a682:	2b00      	cmp	r3, #0
 800a684:	d1e5      	bne.n	800a652 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2220      	movs	r2, #32
 800a68a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2220      	movs	r2, #32
 800a690:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2200      	movs	r2, #0
 800a696:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a69a:	2303      	movs	r3, #3
 800a69c:	e067      	b.n	800a76e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f003 0304 	and.w	r3, r3, #4
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d04f      	beq.n	800a74c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	69db      	ldr	r3, [r3, #28]
 800a6b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a6b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a6ba:	d147      	bne.n	800a74c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a6c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ce:	e853 3f00 	ldrex	r3, [r3]
 800a6d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a6da:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6e4:	637b      	str	r3, [r7, #52]	; 0x34
 800a6e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a6ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6ec:	e841 2300 	strex	r3, r2, [r1]
 800a6f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d1e6      	bne.n	800a6c6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	3308      	adds	r3, #8
 800a6fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	e853 3f00 	ldrex	r3, [r3]
 800a706:	613b      	str	r3, [r7, #16]
   return(result);
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	f023 0301 	bic.w	r3, r3, #1
 800a70e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	3308      	adds	r3, #8
 800a716:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a718:	623a      	str	r2, [r7, #32]
 800a71a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a71c:	69f9      	ldr	r1, [r7, #28]
 800a71e:	6a3a      	ldr	r2, [r7, #32]
 800a720:	e841 2300 	strex	r3, r2, [r1]
 800a724:	61bb      	str	r3, [r7, #24]
   return(result);
 800a726:	69bb      	ldr	r3, [r7, #24]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d1e5      	bne.n	800a6f8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2220      	movs	r2, #32
 800a730:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2220      	movs	r2, #32
 800a736:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2220      	movs	r2, #32
 800a73c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2200      	movs	r2, #0
 800a744:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a748:	2303      	movs	r3, #3
 800a74a:	e010      	b.n	800a76e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	69da      	ldr	r2, [r3, #28]
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	4013      	ands	r3, r2
 800a756:	68ba      	ldr	r2, [r7, #8]
 800a758:	429a      	cmp	r2, r3
 800a75a:	bf0c      	ite	eq
 800a75c:	2301      	moveq	r3, #1
 800a75e:	2300      	movne	r3, #0
 800a760:	b2db      	uxtb	r3, r3
 800a762:	461a      	mov	r2, r3
 800a764:	79fb      	ldrb	r3, [r7, #7]
 800a766:	429a      	cmp	r2, r3
 800a768:	f43f af4a 	beq.w	800a600 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a76c:	2300      	movs	r3, #0
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3770      	adds	r7, #112	; 0x70
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
	...

0800a778 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a778:	b480      	push	{r7}
 800a77a:	b091      	sub	sp, #68	; 0x44
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	4613      	mov	r3, r2
 800a784:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	68ba      	ldr	r2, [r7, #8]
 800a78a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	88fa      	ldrh	r2, [r7, #6]
 800a790:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	88fa      	ldrh	r2, [r7, #6]
 800a798:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7aa:	d10e      	bne.n	800a7ca <UART_Start_Receive_IT+0x52>
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	691b      	ldr	r3, [r3, #16]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d105      	bne.n	800a7c0 <UART_Start_Receive_IT+0x48>
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a7ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a7be:	e02d      	b.n	800a81c <UART_Start_Receive_IT+0xa4>
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	22ff      	movs	r2, #255	; 0xff
 800a7c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a7c8:	e028      	b.n	800a81c <UART_Start_Receive_IT+0xa4>
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	689b      	ldr	r3, [r3, #8]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d10d      	bne.n	800a7ee <UART_Start_Receive_IT+0x76>
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	691b      	ldr	r3, [r3, #16]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d104      	bne.n	800a7e4 <UART_Start_Receive_IT+0x6c>
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	22ff      	movs	r2, #255	; 0xff
 800a7de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a7e2:	e01b      	b.n	800a81c <UART_Start_Receive_IT+0xa4>
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	227f      	movs	r2, #127	; 0x7f
 800a7e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a7ec:	e016      	b.n	800a81c <UART_Start_Receive_IT+0xa4>
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	689b      	ldr	r3, [r3, #8]
 800a7f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a7f6:	d10d      	bne.n	800a814 <UART_Start_Receive_IT+0x9c>
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	691b      	ldr	r3, [r3, #16]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d104      	bne.n	800a80a <UART_Start_Receive_IT+0x92>
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	227f      	movs	r2, #127	; 0x7f
 800a804:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a808:	e008      	b.n	800a81c <UART_Start_Receive_IT+0xa4>
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	223f      	movs	r2, #63	; 0x3f
 800a80e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a812:	e003      	b.n	800a81c <UART_Start_Receive_IT+0xa4>
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2200      	movs	r2, #0
 800a818:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2200      	movs	r2, #0
 800a820:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2222      	movs	r2, #34	; 0x22
 800a828:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	3308      	adds	r3, #8
 800a830:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a834:	e853 3f00 	ldrex	r3, [r3]
 800a838:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83c:	f043 0301 	orr.w	r3, r3, #1
 800a840:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	3308      	adds	r3, #8
 800a848:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a84a:	637a      	str	r2, [r7, #52]	; 0x34
 800a84c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a84e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a850:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a852:	e841 2300 	strex	r3, r2, [r1]
 800a856:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d1e5      	bne.n	800a82a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a866:	d107      	bne.n	800a878 <UART_Start_Receive_IT+0x100>
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	691b      	ldr	r3, [r3, #16]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d103      	bne.n	800a878 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	4a15      	ldr	r2, [pc, #84]	; (800a8c8 <UART_Start_Receive_IT+0x150>)
 800a874:	665a      	str	r2, [r3, #100]	; 0x64
 800a876:	e002      	b.n	800a87e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	4a14      	ldr	r2, [pc, #80]	; (800a8cc <UART_Start_Receive_IT+0x154>)
 800a87c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2200      	movs	r2, #0
 800a882:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	e853 3f00 	ldrex	r3, [r3]
 800a892:	613b      	str	r3, [r7, #16]
   return(result);
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800a89a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a4:	623b      	str	r3, [r7, #32]
 800a8a6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a8:	69f9      	ldr	r1, [r7, #28]
 800a8aa:	6a3a      	ldr	r2, [r7, #32]
 800a8ac:	e841 2300 	strex	r3, r2, [r1]
 800a8b0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a8b2:	69bb      	ldr	r3, [r7, #24]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d1e6      	bne.n	800a886 <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 800a8b8:	2300      	movs	r3, #0
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3744      	adds	r7, #68	; 0x44
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr
 800a8c6:	bf00      	nop
 800a8c8:	0800ab73 	.word	0x0800ab73
 800a8cc:	0800aa17 	.word	0x0800aa17

0800a8d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b095      	sub	sp, #84	; 0x54
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8e0:	e853 3f00 	ldrex	r3, [r3]
 800a8e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a8ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8f6:	643b      	str	r3, [r7, #64]	; 0x40
 800a8f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a8fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a8fe:	e841 2300 	strex	r3, r2, [r1]
 800a902:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a906:	2b00      	cmp	r3, #0
 800a908:	d1e6      	bne.n	800a8d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	3308      	adds	r3, #8
 800a910:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a912:	6a3b      	ldr	r3, [r7, #32]
 800a914:	e853 3f00 	ldrex	r3, [r3]
 800a918:	61fb      	str	r3, [r7, #28]
   return(result);
 800a91a:	69fb      	ldr	r3, [r7, #28]
 800a91c:	f023 0301 	bic.w	r3, r3, #1
 800a920:	64bb      	str	r3, [r7, #72]	; 0x48
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	3308      	adds	r3, #8
 800a928:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a92a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a92c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a92e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a932:	e841 2300 	strex	r3, r2, [r1]
 800a936:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d1e5      	bne.n	800a90a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a942:	2b01      	cmp	r3, #1
 800a944:	d118      	bne.n	800a978 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	e853 3f00 	ldrex	r3, [r3]
 800a952:	60bb      	str	r3, [r7, #8]
   return(result);
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	f023 0310 	bic.w	r3, r3, #16
 800a95a:	647b      	str	r3, [r7, #68]	; 0x44
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	461a      	mov	r2, r3
 800a962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a964:	61bb      	str	r3, [r7, #24]
 800a966:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a968:	6979      	ldr	r1, [r7, #20]
 800a96a:	69ba      	ldr	r2, [r7, #24]
 800a96c:	e841 2300 	strex	r3, r2, [r1]
 800a970:	613b      	str	r3, [r7, #16]
   return(result);
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d1e6      	bne.n	800a946 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2220      	movs	r2, #32
 800a97c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2200      	movs	r2, #0
 800a982:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2200      	movs	r2, #0
 800a988:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a98a:	bf00      	nop
 800a98c:	3754      	adds	r7, #84	; 0x54
 800a98e:	46bd      	mov	sp, r7
 800a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a994:	4770      	bx	lr

0800a996 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a996:	b580      	push	{r7, lr}
 800a998:	b084      	sub	sp, #16
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a9b4:	68f8      	ldr	r0, [r7, #12]
 800a9b6:	f7ff fb45 	bl	800a044 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9ba:	bf00      	nop
 800a9bc:	3710      	adds	r7, #16
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}

0800a9c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a9c2:	b580      	push	{r7, lr}
 800a9c4:	b088      	sub	sp, #32
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	e853 3f00 	ldrex	r3, [r3]
 800a9d6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9de:	61fb      	str	r3, [r7, #28]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	461a      	mov	r2, r3
 800a9e6:	69fb      	ldr	r3, [r7, #28]
 800a9e8:	61bb      	str	r3, [r7, #24]
 800a9ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ec:	6979      	ldr	r1, [r7, #20]
 800a9ee:	69ba      	ldr	r2, [r7, #24]
 800a9f0:	e841 2300 	strex	r3, r2, [r1]
 800a9f4:	613b      	str	r3, [r7, #16]
   return(result);
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d1e6      	bne.n	800a9ca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2220      	movs	r2, #32
 800aa00:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2200      	movs	r2, #0
 800aa06:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f7ff fb11 	bl	800a030 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa0e:	bf00      	nop
 800aa10:	3720      	adds	r7, #32
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}

0800aa16 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800aa16:	b580      	push	{r7, lr}
 800aa18:	b096      	sub	sp, #88	; 0x58
 800aa1a:	af00      	add	r7, sp, #0
 800aa1c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aa24:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa2c:	2b22      	cmp	r3, #34	; 0x22
 800aa2e:	f040 8094 	bne.w	800ab5a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800aa38:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800aa3c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800aa40:	b2d9      	uxtb	r1, r3
 800aa42:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800aa46:	b2da      	uxtb	r2, r3
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa4c:	400a      	ands	r2, r1
 800aa4e:	b2d2      	uxtb	r2, r2
 800aa50:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa56:	1c5a      	adds	r2, r3, #1
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	3b01      	subs	r3, #1
 800aa66:	b29a      	uxth	r2, r3
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aa74:	b29b      	uxth	r3, r3
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d177      	bne.n	800ab6a <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa82:	e853 3f00 	ldrex	r3, [r3]
 800aa86:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aa88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aa8e:	653b      	str	r3, [r7, #80]	; 0x50
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	461a      	mov	r2, r3
 800aa96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa98:	647b      	str	r3, [r7, #68]	; 0x44
 800aa9a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aa9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aaa0:	e841 2300 	strex	r3, r2, [r1]
 800aaa4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aaa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d1e6      	bne.n	800aa7a <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	3308      	adds	r3, #8
 800aab2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab6:	e853 3f00 	ldrex	r3, [r3]
 800aaba:	623b      	str	r3, [r7, #32]
   return(result);
 800aabc:	6a3b      	ldr	r3, [r7, #32]
 800aabe:	f023 0301 	bic.w	r3, r3, #1
 800aac2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	3308      	adds	r3, #8
 800aaca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aacc:	633a      	str	r2, [r7, #48]	; 0x30
 800aace:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aad2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aad4:	e841 2300 	strex	r3, r2, [r1]
 800aad8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d1e5      	bne.n	800aaac <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2220      	movs	r2, #32
 800aae4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d12e      	bne.n	800ab52 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	e853 3f00 	ldrex	r3, [r3]
 800ab06:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f023 0310 	bic.w	r3, r3, #16
 800ab0e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	461a      	mov	r2, r3
 800ab16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab18:	61fb      	str	r3, [r7, #28]
 800ab1a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab1c:	69b9      	ldr	r1, [r7, #24]
 800ab1e:	69fa      	ldr	r2, [r7, #28]
 800ab20:	e841 2300 	strex	r3, r2, [r1]
 800ab24:	617b      	str	r3, [r7, #20]
   return(result);
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d1e6      	bne.n	800aafa <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	69db      	ldr	r3, [r3, #28]
 800ab32:	f003 0310 	and.w	r3, r3, #16
 800ab36:	2b10      	cmp	r3, #16
 800ab38:	d103      	bne.n	800ab42 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	2210      	movs	r2, #16
 800ab40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ab48:	4619      	mov	r1, r3
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f7ff fa84 	bl	800a058 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ab50:	e00b      	b.n	800ab6a <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f7f8 fb8e 	bl	8003274 <HAL_UART_RxCpltCallback>
}
 800ab58:	e007      	b.n	800ab6a <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	699a      	ldr	r2, [r3, #24]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f042 0208 	orr.w	r2, r2, #8
 800ab68:	619a      	str	r2, [r3, #24]
}
 800ab6a:	bf00      	nop
 800ab6c:	3758      	adds	r7, #88	; 0x58
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}

0800ab72 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ab72:	b580      	push	{r7, lr}
 800ab74:	b096      	sub	sp, #88	; 0x58
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ab80:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab88:	2b22      	cmp	r3, #34	; 0x22
 800ab8a:	f040 8094 	bne.w	800acb6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ab94:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab9c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800ab9e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800aba2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800aba6:	4013      	ands	r3, r2
 800aba8:	b29a      	uxth	r2, r3
 800abaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abb2:	1c9a      	adds	r2, r3, #2
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	3b01      	subs	r3, #1
 800abc2:	b29a      	uxth	r2, r3
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d177      	bne.n	800acc6 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abde:	e853 3f00 	ldrex	r3, [r3]
 800abe2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800abe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800abea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	461a      	mov	r2, r3
 800abf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abf4:	643b      	str	r3, [r7, #64]	; 0x40
 800abf6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abf8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800abfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800abfc:	e841 2300 	strex	r3, r2, [r1]
 800ac00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ac02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d1e6      	bne.n	800abd6 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	3308      	adds	r3, #8
 800ac0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac10:	6a3b      	ldr	r3, [r7, #32]
 800ac12:	e853 3f00 	ldrex	r3, [r3]
 800ac16:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac18:	69fb      	ldr	r3, [r7, #28]
 800ac1a:	f023 0301 	bic.w	r3, r3, #1
 800ac1e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	3308      	adds	r3, #8
 800ac26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac28:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ac2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac30:	e841 2300 	strex	r3, r2, [r1]
 800ac34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d1e5      	bne.n	800ac08 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2220      	movs	r2, #32
 800ac40:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2200      	movs	r2, #0
 800ac46:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	d12e      	bne.n	800acae <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2200      	movs	r2, #0
 800ac54:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	e853 3f00 	ldrex	r3, [r3]
 800ac62:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	f023 0310 	bic.w	r3, r3, #16
 800ac6a:	647b      	str	r3, [r7, #68]	; 0x44
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	461a      	mov	r2, r3
 800ac72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac74:	61bb      	str	r3, [r7, #24]
 800ac76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac78:	6979      	ldr	r1, [r7, #20]
 800ac7a:	69ba      	ldr	r2, [r7, #24]
 800ac7c:	e841 2300 	strex	r3, r2, [r1]
 800ac80:	613b      	str	r3, [r7, #16]
   return(result);
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d1e6      	bne.n	800ac56 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	69db      	ldr	r3, [r3, #28]
 800ac8e:	f003 0310 	and.w	r3, r3, #16
 800ac92:	2b10      	cmp	r3, #16
 800ac94:	d103      	bne.n	800ac9e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	2210      	movs	r2, #16
 800ac9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800aca4:	4619      	mov	r1, r3
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f7ff f9d6 	bl	800a058 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800acac:	e00b      	b.n	800acc6 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f7f8 fae0 	bl	8003274 <HAL_UART_RxCpltCallback>
}
 800acb4:	e007      	b.n	800acc6 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	699a      	ldr	r2, [r3, #24]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f042 0208 	orr.w	r2, r2, #8
 800acc4:	619a      	str	r2, [r3, #24]
}
 800acc6:	bf00      	nop
 800acc8:	3758      	adds	r7, #88	; 0x58
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}

0800acce <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800acce:	b480      	push	{r7}
 800acd0:	b083      	sub	sp, #12
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800acd6:	bf00      	nop
 800acd8:	370c      	adds	r7, #12
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr
	...

0800ace4 <__libc_init_array>:
 800ace4:	b570      	push	{r4, r5, r6, lr}
 800ace6:	4e0d      	ldr	r6, [pc, #52]	; (800ad1c <__libc_init_array+0x38>)
 800ace8:	4c0d      	ldr	r4, [pc, #52]	; (800ad20 <__libc_init_array+0x3c>)
 800acea:	1ba4      	subs	r4, r4, r6
 800acec:	10a4      	asrs	r4, r4, #2
 800acee:	2500      	movs	r5, #0
 800acf0:	42a5      	cmp	r5, r4
 800acf2:	d109      	bne.n	800ad08 <__libc_init_array+0x24>
 800acf4:	4e0b      	ldr	r6, [pc, #44]	; (800ad24 <__libc_init_array+0x40>)
 800acf6:	4c0c      	ldr	r4, [pc, #48]	; (800ad28 <__libc_init_array+0x44>)
 800acf8:	f001 f834 	bl	800bd64 <_init>
 800acfc:	1ba4      	subs	r4, r4, r6
 800acfe:	10a4      	asrs	r4, r4, #2
 800ad00:	2500      	movs	r5, #0
 800ad02:	42a5      	cmp	r5, r4
 800ad04:	d105      	bne.n	800ad12 <__libc_init_array+0x2e>
 800ad06:	bd70      	pop	{r4, r5, r6, pc}
 800ad08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ad0c:	4798      	blx	r3
 800ad0e:	3501      	adds	r5, #1
 800ad10:	e7ee      	b.n	800acf0 <__libc_init_array+0xc>
 800ad12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ad16:	4798      	blx	r3
 800ad18:	3501      	adds	r5, #1
 800ad1a:	e7f2      	b.n	800ad02 <__libc_init_array+0x1e>
 800ad1c:	0800c1a0 	.word	0x0800c1a0
 800ad20:	0800c1a0 	.word	0x0800c1a0
 800ad24:	0800c1a0 	.word	0x0800c1a0
 800ad28:	0800c1a4 	.word	0x0800c1a4

0800ad2c <memset>:
 800ad2c:	4402      	add	r2, r0
 800ad2e:	4603      	mov	r3, r0
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d100      	bne.n	800ad36 <memset+0xa>
 800ad34:	4770      	bx	lr
 800ad36:	f803 1b01 	strb.w	r1, [r3], #1
 800ad3a:	e7f9      	b.n	800ad30 <memset+0x4>
 800ad3c:	0000      	movs	r0, r0
	...

0800ad40 <sin>:
 800ad40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad42:	ec51 0b10 	vmov	r0, r1, d0
 800ad46:	4a20      	ldr	r2, [pc, #128]	; (800adc8 <sin+0x88>)
 800ad48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	dc07      	bgt.n	800ad60 <sin+0x20>
 800ad50:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800adc0 <sin+0x80>
 800ad54:	2000      	movs	r0, #0
 800ad56:	f000 fe37 	bl	800b9c8 <__kernel_sin>
 800ad5a:	ec51 0b10 	vmov	r0, r1, d0
 800ad5e:	e007      	b.n	800ad70 <sin+0x30>
 800ad60:	4a1a      	ldr	r2, [pc, #104]	; (800adcc <sin+0x8c>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	dd09      	ble.n	800ad7a <sin+0x3a>
 800ad66:	ee10 2a10 	vmov	r2, s0
 800ad6a:	460b      	mov	r3, r1
 800ad6c:	f7f5 fa38 	bl	80001e0 <__aeabi_dsub>
 800ad70:	ec41 0b10 	vmov	d0, r0, r1
 800ad74:	b005      	add	sp, #20
 800ad76:	f85d fb04 	ldr.w	pc, [sp], #4
 800ad7a:	4668      	mov	r0, sp
 800ad7c:	f000 f828 	bl	800add0 <__ieee754_rem_pio2>
 800ad80:	f000 0003 	and.w	r0, r0, #3
 800ad84:	2801      	cmp	r0, #1
 800ad86:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ad8a:	ed9d 0b00 	vldr	d0, [sp]
 800ad8e:	d004      	beq.n	800ad9a <sin+0x5a>
 800ad90:	2802      	cmp	r0, #2
 800ad92:	d005      	beq.n	800ada0 <sin+0x60>
 800ad94:	b970      	cbnz	r0, 800adb4 <sin+0x74>
 800ad96:	2001      	movs	r0, #1
 800ad98:	e7dd      	b.n	800ad56 <sin+0x16>
 800ad9a:	f000 fa0d 	bl	800b1b8 <__kernel_cos>
 800ad9e:	e7dc      	b.n	800ad5a <sin+0x1a>
 800ada0:	2001      	movs	r0, #1
 800ada2:	f000 fe11 	bl	800b9c8 <__kernel_sin>
 800ada6:	ec53 2b10 	vmov	r2, r3, d0
 800adaa:	ee10 0a10 	vmov	r0, s0
 800adae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800adb2:	e7dd      	b.n	800ad70 <sin+0x30>
 800adb4:	f000 fa00 	bl	800b1b8 <__kernel_cos>
 800adb8:	e7f5      	b.n	800ada6 <sin+0x66>
 800adba:	bf00      	nop
 800adbc:	f3af 8000 	nop.w
	...
 800adc8:	3fe921fb 	.word	0x3fe921fb
 800adcc:	7fefffff 	.word	0x7fefffff

0800add0 <__ieee754_rem_pio2>:
 800add0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800add4:	ec57 6b10 	vmov	r6, r7, d0
 800add8:	4bc3      	ldr	r3, [pc, #780]	; (800b0e8 <__ieee754_rem_pio2+0x318>)
 800adda:	b08d      	sub	sp, #52	; 0x34
 800addc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ade0:	4598      	cmp	r8, r3
 800ade2:	4604      	mov	r4, r0
 800ade4:	9704      	str	r7, [sp, #16]
 800ade6:	dc07      	bgt.n	800adf8 <__ieee754_rem_pio2+0x28>
 800ade8:	2200      	movs	r2, #0
 800adea:	2300      	movs	r3, #0
 800adec:	ed84 0b00 	vstr	d0, [r4]
 800adf0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800adf4:	2500      	movs	r5, #0
 800adf6:	e027      	b.n	800ae48 <__ieee754_rem_pio2+0x78>
 800adf8:	4bbc      	ldr	r3, [pc, #752]	; (800b0ec <__ieee754_rem_pio2+0x31c>)
 800adfa:	4598      	cmp	r8, r3
 800adfc:	dc75      	bgt.n	800aeea <__ieee754_rem_pio2+0x11a>
 800adfe:	9b04      	ldr	r3, [sp, #16]
 800ae00:	4dbb      	ldr	r5, [pc, #748]	; (800b0f0 <__ieee754_rem_pio2+0x320>)
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	ee10 0a10 	vmov	r0, s0
 800ae08:	a3a9      	add	r3, pc, #676	; (adr r3, 800b0b0 <__ieee754_rem_pio2+0x2e0>)
 800ae0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0e:	4639      	mov	r1, r7
 800ae10:	dd36      	ble.n	800ae80 <__ieee754_rem_pio2+0xb0>
 800ae12:	f7f5 f9e5 	bl	80001e0 <__aeabi_dsub>
 800ae16:	45a8      	cmp	r8, r5
 800ae18:	4606      	mov	r6, r0
 800ae1a:	460f      	mov	r7, r1
 800ae1c:	d018      	beq.n	800ae50 <__ieee754_rem_pio2+0x80>
 800ae1e:	a3a6      	add	r3, pc, #664	; (adr r3, 800b0b8 <__ieee754_rem_pio2+0x2e8>)
 800ae20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae24:	f7f5 f9dc 	bl	80001e0 <__aeabi_dsub>
 800ae28:	4602      	mov	r2, r0
 800ae2a:	460b      	mov	r3, r1
 800ae2c:	e9c4 2300 	strd	r2, r3, [r4]
 800ae30:	4630      	mov	r0, r6
 800ae32:	4639      	mov	r1, r7
 800ae34:	f7f5 f9d4 	bl	80001e0 <__aeabi_dsub>
 800ae38:	a39f      	add	r3, pc, #636	; (adr r3, 800b0b8 <__ieee754_rem_pio2+0x2e8>)
 800ae3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3e:	f7f5 f9cf 	bl	80001e0 <__aeabi_dsub>
 800ae42:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ae46:	2501      	movs	r5, #1
 800ae48:	4628      	mov	r0, r5
 800ae4a:	b00d      	add	sp, #52	; 0x34
 800ae4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae50:	a39b      	add	r3, pc, #620	; (adr r3, 800b0c0 <__ieee754_rem_pio2+0x2f0>)
 800ae52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae56:	f7f5 f9c3 	bl	80001e0 <__aeabi_dsub>
 800ae5a:	a39b      	add	r3, pc, #620	; (adr r3, 800b0c8 <__ieee754_rem_pio2+0x2f8>)
 800ae5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae60:	4606      	mov	r6, r0
 800ae62:	460f      	mov	r7, r1
 800ae64:	f7f5 f9bc 	bl	80001e0 <__aeabi_dsub>
 800ae68:	4602      	mov	r2, r0
 800ae6a:	460b      	mov	r3, r1
 800ae6c:	e9c4 2300 	strd	r2, r3, [r4]
 800ae70:	4630      	mov	r0, r6
 800ae72:	4639      	mov	r1, r7
 800ae74:	f7f5 f9b4 	bl	80001e0 <__aeabi_dsub>
 800ae78:	a393      	add	r3, pc, #588	; (adr r3, 800b0c8 <__ieee754_rem_pio2+0x2f8>)
 800ae7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae7e:	e7de      	b.n	800ae3e <__ieee754_rem_pio2+0x6e>
 800ae80:	f7f5 f9b0 	bl	80001e4 <__adddf3>
 800ae84:	45a8      	cmp	r8, r5
 800ae86:	4606      	mov	r6, r0
 800ae88:	460f      	mov	r7, r1
 800ae8a:	d016      	beq.n	800aeba <__ieee754_rem_pio2+0xea>
 800ae8c:	a38a      	add	r3, pc, #552	; (adr r3, 800b0b8 <__ieee754_rem_pio2+0x2e8>)
 800ae8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae92:	f7f5 f9a7 	bl	80001e4 <__adddf3>
 800ae96:	4602      	mov	r2, r0
 800ae98:	460b      	mov	r3, r1
 800ae9a:	e9c4 2300 	strd	r2, r3, [r4]
 800ae9e:	4630      	mov	r0, r6
 800aea0:	4639      	mov	r1, r7
 800aea2:	f7f5 f99d 	bl	80001e0 <__aeabi_dsub>
 800aea6:	a384      	add	r3, pc, #528	; (adr r3, 800b0b8 <__ieee754_rem_pio2+0x2e8>)
 800aea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeac:	f7f5 f99a 	bl	80001e4 <__adddf3>
 800aeb0:	f04f 35ff 	mov.w	r5, #4294967295
 800aeb4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aeb8:	e7c6      	b.n	800ae48 <__ieee754_rem_pio2+0x78>
 800aeba:	a381      	add	r3, pc, #516	; (adr r3, 800b0c0 <__ieee754_rem_pio2+0x2f0>)
 800aebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec0:	f7f5 f990 	bl	80001e4 <__adddf3>
 800aec4:	a380      	add	r3, pc, #512	; (adr r3, 800b0c8 <__ieee754_rem_pio2+0x2f8>)
 800aec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeca:	4606      	mov	r6, r0
 800aecc:	460f      	mov	r7, r1
 800aece:	f7f5 f989 	bl	80001e4 <__adddf3>
 800aed2:	4602      	mov	r2, r0
 800aed4:	460b      	mov	r3, r1
 800aed6:	e9c4 2300 	strd	r2, r3, [r4]
 800aeda:	4630      	mov	r0, r6
 800aedc:	4639      	mov	r1, r7
 800aede:	f7f5 f97f 	bl	80001e0 <__aeabi_dsub>
 800aee2:	a379      	add	r3, pc, #484	; (adr r3, 800b0c8 <__ieee754_rem_pio2+0x2f8>)
 800aee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee8:	e7e0      	b.n	800aeac <__ieee754_rem_pio2+0xdc>
 800aeea:	4b82      	ldr	r3, [pc, #520]	; (800b0f4 <__ieee754_rem_pio2+0x324>)
 800aeec:	4598      	cmp	r8, r3
 800aeee:	f300 80d0 	bgt.w	800b092 <__ieee754_rem_pio2+0x2c2>
 800aef2:	f000 fe23 	bl	800bb3c <fabs>
 800aef6:	ec57 6b10 	vmov	r6, r7, d0
 800aefa:	ee10 0a10 	vmov	r0, s0
 800aefe:	a374      	add	r3, pc, #464	; (adr r3, 800b0d0 <__ieee754_rem_pio2+0x300>)
 800af00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af04:	4639      	mov	r1, r7
 800af06:	f7f5 fb23 	bl	8000550 <__aeabi_dmul>
 800af0a:	2200      	movs	r2, #0
 800af0c:	4b7a      	ldr	r3, [pc, #488]	; (800b0f8 <__ieee754_rem_pio2+0x328>)
 800af0e:	f7f5 f969 	bl	80001e4 <__adddf3>
 800af12:	f7f5 fdb7 	bl	8000a84 <__aeabi_d2iz>
 800af16:	4605      	mov	r5, r0
 800af18:	f7f5 fab0 	bl	800047c <__aeabi_i2d>
 800af1c:	a364      	add	r3, pc, #400	; (adr r3, 800b0b0 <__ieee754_rem_pio2+0x2e0>)
 800af1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af26:	f7f5 fb13 	bl	8000550 <__aeabi_dmul>
 800af2a:	4602      	mov	r2, r0
 800af2c:	460b      	mov	r3, r1
 800af2e:	4630      	mov	r0, r6
 800af30:	4639      	mov	r1, r7
 800af32:	f7f5 f955 	bl	80001e0 <__aeabi_dsub>
 800af36:	a360      	add	r3, pc, #384	; (adr r3, 800b0b8 <__ieee754_rem_pio2+0x2e8>)
 800af38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af3c:	4682      	mov	sl, r0
 800af3e:	468b      	mov	fp, r1
 800af40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af44:	f7f5 fb04 	bl	8000550 <__aeabi_dmul>
 800af48:	2d1f      	cmp	r5, #31
 800af4a:	4606      	mov	r6, r0
 800af4c:	460f      	mov	r7, r1
 800af4e:	dc0c      	bgt.n	800af6a <__ieee754_rem_pio2+0x19a>
 800af50:	1e6a      	subs	r2, r5, #1
 800af52:	4b6a      	ldr	r3, [pc, #424]	; (800b0fc <__ieee754_rem_pio2+0x32c>)
 800af54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af58:	4543      	cmp	r3, r8
 800af5a:	d006      	beq.n	800af6a <__ieee754_rem_pio2+0x19a>
 800af5c:	4632      	mov	r2, r6
 800af5e:	463b      	mov	r3, r7
 800af60:	4650      	mov	r0, sl
 800af62:	4659      	mov	r1, fp
 800af64:	f7f5 f93c 	bl	80001e0 <__aeabi_dsub>
 800af68:	e00e      	b.n	800af88 <__ieee754_rem_pio2+0x1b8>
 800af6a:	4632      	mov	r2, r6
 800af6c:	463b      	mov	r3, r7
 800af6e:	4650      	mov	r0, sl
 800af70:	4659      	mov	r1, fp
 800af72:	f7f5 f935 	bl	80001e0 <__aeabi_dsub>
 800af76:	ea4f 5328 	mov.w	r3, r8, asr #20
 800af7a:	9305      	str	r3, [sp, #20]
 800af7c:	9a05      	ldr	r2, [sp, #20]
 800af7e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800af82:	1ad3      	subs	r3, r2, r3
 800af84:	2b10      	cmp	r3, #16
 800af86:	dc02      	bgt.n	800af8e <__ieee754_rem_pio2+0x1be>
 800af88:	e9c4 0100 	strd	r0, r1, [r4]
 800af8c:	e039      	b.n	800b002 <__ieee754_rem_pio2+0x232>
 800af8e:	a34c      	add	r3, pc, #304	; (adr r3, 800b0c0 <__ieee754_rem_pio2+0x2f0>)
 800af90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af98:	f7f5 fada 	bl	8000550 <__aeabi_dmul>
 800af9c:	4606      	mov	r6, r0
 800af9e:	460f      	mov	r7, r1
 800afa0:	4602      	mov	r2, r0
 800afa2:	460b      	mov	r3, r1
 800afa4:	4650      	mov	r0, sl
 800afa6:	4659      	mov	r1, fp
 800afa8:	f7f5 f91a 	bl	80001e0 <__aeabi_dsub>
 800afac:	4602      	mov	r2, r0
 800afae:	460b      	mov	r3, r1
 800afb0:	4680      	mov	r8, r0
 800afb2:	4689      	mov	r9, r1
 800afb4:	4650      	mov	r0, sl
 800afb6:	4659      	mov	r1, fp
 800afb8:	f7f5 f912 	bl	80001e0 <__aeabi_dsub>
 800afbc:	4632      	mov	r2, r6
 800afbe:	463b      	mov	r3, r7
 800afc0:	f7f5 f90e 	bl	80001e0 <__aeabi_dsub>
 800afc4:	a340      	add	r3, pc, #256	; (adr r3, 800b0c8 <__ieee754_rem_pio2+0x2f8>)
 800afc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afca:	4606      	mov	r6, r0
 800afcc:	460f      	mov	r7, r1
 800afce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afd2:	f7f5 fabd 	bl	8000550 <__aeabi_dmul>
 800afd6:	4632      	mov	r2, r6
 800afd8:	463b      	mov	r3, r7
 800afda:	f7f5 f901 	bl	80001e0 <__aeabi_dsub>
 800afde:	4602      	mov	r2, r0
 800afe0:	460b      	mov	r3, r1
 800afe2:	4606      	mov	r6, r0
 800afe4:	460f      	mov	r7, r1
 800afe6:	4640      	mov	r0, r8
 800afe8:	4649      	mov	r1, r9
 800afea:	f7f5 f8f9 	bl	80001e0 <__aeabi_dsub>
 800afee:	9a05      	ldr	r2, [sp, #20]
 800aff0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aff4:	1ad3      	subs	r3, r2, r3
 800aff6:	2b31      	cmp	r3, #49	; 0x31
 800aff8:	dc20      	bgt.n	800b03c <__ieee754_rem_pio2+0x26c>
 800affa:	e9c4 0100 	strd	r0, r1, [r4]
 800affe:	46c2      	mov	sl, r8
 800b000:	46cb      	mov	fp, r9
 800b002:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b006:	4650      	mov	r0, sl
 800b008:	4642      	mov	r2, r8
 800b00a:	464b      	mov	r3, r9
 800b00c:	4659      	mov	r1, fp
 800b00e:	f7f5 f8e7 	bl	80001e0 <__aeabi_dsub>
 800b012:	463b      	mov	r3, r7
 800b014:	4632      	mov	r2, r6
 800b016:	f7f5 f8e3 	bl	80001e0 <__aeabi_dsub>
 800b01a:	9b04      	ldr	r3, [sp, #16]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b022:	f6bf af11 	bge.w	800ae48 <__ieee754_rem_pio2+0x78>
 800b026:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b02a:	6063      	str	r3, [r4, #4]
 800b02c:	f8c4 8000 	str.w	r8, [r4]
 800b030:	60a0      	str	r0, [r4, #8]
 800b032:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b036:	60e3      	str	r3, [r4, #12]
 800b038:	426d      	negs	r5, r5
 800b03a:	e705      	b.n	800ae48 <__ieee754_rem_pio2+0x78>
 800b03c:	a326      	add	r3, pc, #152	; (adr r3, 800b0d8 <__ieee754_rem_pio2+0x308>)
 800b03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b042:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b046:	f7f5 fa83 	bl	8000550 <__aeabi_dmul>
 800b04a:	4606      	mov	r6, r0
 800b04c:	460f      	mov	r7, r1
 800b04e:	4602      	mov	r2, r0
 800b050:	460b      	mov	r3, r1
 800b052:	4640      	mov	r0, r8
 800b054:	4649      	mov	r1, r9
 800b056:	f7f5 f8c3 	bl	80001e0 <__aeabi_dsub>
 800b05a:	4602      	mov	r2, r0
 800b05c:	460b      	mov	r3, r1
 800b05e:	4682      	mov	sl, r0
 800b060:	468b      	mov	fp, r1
 800b062:	4640      	mov	r0, r8
 800b064:	4649      	mov	r1, r9
 800b066:	f7f5 f8bb 	bl	80001e0 <__aeabi_dsub>
 800b06a:	4632      	mov	r2, r6
 800b06c:	463b      	mov	r3, r7
 800b06e:	f7f5 f8b7 	bl	80001e0 <__aeabi_dsub>
 800b072:	a31b      	add	r3, pc, #108	; (adr r3, 800b0e0 <__ieee754_rem_pio2+0x310>)
 800b074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b078:	4606      	mov	r6, r0
 800b07a:	460f      	mov	r7, r1
 800b07c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b080:	f7f5 fa66 	bl	8000550 <__aeabi_dmul>
 800b084:	4632      	mov	r2, r6
 800b086:	463b      	mov	r3, r7
 800b088:	f7f5 f8aa 	bl	80001e0 <__aeabi_dsub>
 800b08c:	4606      	mov	r6, r0
 800b08e:	460f      	mov	r7, r1
 800b090:	e764      	b.n	800af5c <__ieee754_rem_pio2+0x18c>
 800b092:	4b1b      	ldr	r3, [pc, #108]	; (800b100 <__ieee754_rem_pio2+0x330>)
 800b094:	4598      	cmp	r8, r3
 800b096:	dd35      	ble.n	800b104 <__ieee754_rem_pio2+0x334>
 800b098:	ee10 2a10 	vmov	r2, s0
 800b09c:	463b      	mov	r3, r7
 800b09e:	4630      	mov	r0, r6
 800b0a0:	4639      	mov	r1, r7
 800b0a2:	f7f5 f89d 	bl	80001e0 <__aeabi_dsub>
 800b0a6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b0aa:	e9c4 0100 	strd	r0, r1, [r4]
 800b0ae:	e6a1      	b.n	800adf4 <__ieee754_rem_pio2+0x24>
 800b0b0:	54400000 	.word	0x54400000
 800b0b4:	3ff921fb 	.word	0x3ff921fb
 800b0b8:	1a626331 	.word	0x1a626331
 800b0bc:	3dd0b461 	.word	0x3dd0b461
 800b0c0:	1a600000 	.word	0x1a600000
 800b0c4:	3dd0b461 	.word	0x3dd0b461
 800b0c8:	2e037073 	.word	0x2e037073
 800b0cc:	3ba3198a 	.word	0x3ba3198a
 800b0d0:	6dc9c883 	.word	0x6dc9c883
 800b0d4:	3fe45f30 	.word	0x3fe45f30
 800b0d8:	2e000000 	.word	0x2e000000
 800b0dc:	3ba3198a 	.word	0x3ba3198a
 800b0e0:	252049c1 	.word	0x252049c1
 800b0e4:	397b839a 	.word	0x397b839a
 800b0e8:	3fe921fb 	.word	0x3fe921fb
 800b0ec:	4002d97b 	.word	0x4002d97b
 800b0f0:	3ff921fb 	.word	0x3ff921fb
 800b0f4:	413921fb 	.word	0x413921fb
 800b0f8:	3fe00000 	.word	0x3fe00000
 800b0fc:	0800bfc8 	.word	0x0800bfc8
 800b100:	7fefffff 	.word	0x7fefffff
 800b104:	ea4f 5528 	mov.w	r5, r8, asr #20
 800b108:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800b10c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800b110:	4630      	mov	r0, r6
 800b112:	460f      	mov	r7, r1
 800b114:	f7f5 fcb6 	bl	8000a84 <__aeabi_d2iz>
 800b118:	f7f5 f9b0 	bl	800047c <__aeabi_i2d>
 800b11c:	4602      	mov	r2, r0
 800b11e:	460b      	mov	r3, r1
 800b120:	4630      	mov	r0, r6
 800b122:	4639      	mov	r1, r7
 800b124:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b128:	f7f5 f85a 	bl	80001e0 <__aeabi_dsub>
 800b12c:	2200      	movs	r2, #0
 800b12e:	4b1f      	ldr	r3, [pc, #124]	; (800b1ac <__ieee754_rem_pio2+0x3dc>)
 800b130:	f7f5 fa0e 	bl	8000550 <__aeabi_dmul>
 800b134:	460f      	mov	r7, r1
 800b136:	4606      	mov	r6, r0
 800b138:	f7f5 fca4 	bl	8000a84 <__aeabi_d2iz>
 800b13c:	f7f5 f99e 	bl	800047c <__aeabi_i2d>
 800b140:	4602      	mov	r2, r0
 800b142:	460b      	mov	r3, r1
 800b144:	4630      	mov	r0, r6
 800b146:	4639      	mov	r1, r7
 800b148:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b14c:	f7f5 f848 	bl	80001e0 <__aeabi_dsub>
 800b150:	2200      	movs	r2, #0
 800b152:	4b16      	ldr	r3, [pc, #88]	; (800b1ac <__ieee754_rem_pio2+0x3dc>)
 800b154:	f7f5 f9fc 	bl	8000550 <__aeabi_dmul>
 800b158:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b15c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800b160:	f04f 0803 	mov.w	r8, #3
 800b164:	2600      	movs	r6, #0
 800b166:	2700      	movs	r7, #0
 800b168:	4632      	mov	r2, r6
 800b16a:	463b      	mov	r3, r7
 800b16c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800b170:	f108 3aff 	add.w	sl, r8, #4294967295
 800b174:	f7f5 fc54 	bl	8000a20 <__aeabi_dcmpeq>
 800b178:	b9b0      	cbnz	r0, 800b1a8 <__ieee754_rem_pio2+0x3d8>
 800b17a:	4b0d      	ldr	r3, [pc, #52]	; (800b1b0 <__ieee754_rem_pio2+0x3e0>)
 800b17c:	9301      	str	r3, [sp, #4]
 800b17e:	2302      	movs	r3, #2
 800b180:	9300      	str	r3, [sp, #0]
 800b182:	462a      	mov	r2, r5
 800b184:	4643      	mov	r3, r8
 800b186:	4621      	mov	r1, r4
 800b188:	a806      	add	r0, sp, #24
 800b18a:	f000 f8dd 	bl	800b348 <__kernel_rem_pio2>
 800b18e:	9b04      	ldr	r3, [sp, #16]
 800b190:	2b00      	cmp	r3, #0
 800b192:	4605      	mov	r5, r0
 800b194:	f6bf ae58 	bge.w	800ae48 <__ieee754_rem_pio2+0x78>
 800b198:	6863      	ldr	r3, [r4, #4]
 800b19a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b19e:	6063      	str	r3, [r4, #4]
 800b1a0:	68e3      	ldr	r3, [r4, #12]
 800b1a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b1a6:	e746      	b.n	800b036 <__ieee754_rem_pio2+0x266>
 800b1a8:	46d0      	mov	r8, sl
 800b1aa:	e7dd      	b.n	800b168 <__ieee754_rem_pio2+0x398>
 800b1ac:	41700000 	.word	0x41700000
 800b1b0:	0800c048 	.word	0x0800c048
 800b1b4:	00000000 	.word	0x00000000

0800b1b8 <__kernel_cos>:
 800b1b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1bc:	ec59 8b10 	vmov	r8, r9, d0
 800b1c0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800b1c4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800b1c8:	ed2d 8b02 	vpush	{d8}
 800b1cc:	eeb0 8a41 	vmov.f32	s16, s2
 800b1d0:	eef0 8a61 	vmov.f32	s17, s3
 800b1d4:	da07      	bge.n	800b1e6 <__kernel_cos+0x2e>
 800b1d6:	ee10 0a10 	vmov	r0, s0
 800b1da:	4649      	mov	r1, r9
 800b1dc:	f7f5 fc52 	bl	8000a84 <__aeabi_d2iz>
 800b1e0:	2800      	cmp	r0, #0
 800b1e2:	f000 8089 	beq.w	800b2f8 <__kernel_cos+0x140>
 800b1e6:	4642      	mov	r2, r8
 800b1e8:	464b      	mov	r3, r9
 800b1ea:	4640      	mov	r0, r8
 800b1ec:	4649      	mov	r1, r9
 800b1ee:	f7f5 f9af 	bl	8000550 <__aeabi_dmul>
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	4b4e      	ldr	r3, [pc, #312]	; (800b330 <__kernel_cos+0x178>)
 800b1f6:	4604      	mov	r4, r0
 800b1f8:	460d      	mov	r5, r1
 800b1fa:	f7f5 f9a9 	bl	8000550 <__aeabi_dmul>
 800b1fe:	a340      	add	r3, pc, #256	; (adr r3, 800b300 <__kernel_cos+0x148>)
 800b200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b204:	4682      	mov	sl, r0
 800b206:	468b      	mov	fp, r1
 800b208:	4620      	mov	r0, r4
 800b20a:	4629      	mov	r1, r5
 800b20c:	f7f5 f9a0 	bl	8000550 <__aeabi_dmul>
 800b210:	a33d      	add	r3, pc, #244	; (adr r3, 800b308 <__kernel_cos+0x150>)
 800b212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b216:	f7f4 ffe5 	bl	80001e4 <__adddf3>
 800b21a:	4622      	mov	r2, r4
 800b21c:	462b      	mov	r3, r5
 800b21e:	f7f5 f997 	bl	8000550 <__aeabi_dmul>
 800b222:	a33b      	add	r3, pc, #236	; (adr r3, 800b310 <__kernel_cos+0x158>)
 800b224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b228:	f7f4 ffda 	bl	80001e0 <__aeabi_dsub>
 800b22c:	4622      	mov	r2, r4
 800b22e:	462b      	mov	r3, r5
 800b230:	f7f5 f98e 	bl	8000550 <__aeabi_dmul>
 800b234:	a338      	add	r3, pc, #224	; (adr r3, 800b318 <__kernel_cos+0x160>)
 800b236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23a:	f7f4 ffd3 	bl	80001e4 <__adddf3>
 800b23e:	4622      	mov	r2, r4
 800b240:	462b      	mov	r3, r5
 800b242:	f7f5 f985 	bl	8000550 <__aeabi_dmul>
 800b246:	a336      	add	r3, pc, #216	; (adr r3, 800b320 <__kernel_cos+0x168>)
 800b248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b24c:	f7f4 ffc8 	bl	80001e0 <__aeabi_dsub>
 800b250:	4622      	mov	r2, r4
 800b252:	462b      	mov	r3, r5
 800b254:	f7f5 f97c 	bl	8000550 <__aeabi_dmul>
 800b258:	a333      	add	r3, pc, #204	; (adr r3, 800b328 <__kernel_cos+0x170>)
 800b25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b25e:	f7f4 ffc1 	bl	80001e4 <__adddf3>
 800b262:	4622      	mov	r2, r4
 800b264:	462b      	mov	r3, r5
 800b266:	f7f5 f973 	bl	8000550 <__aeabi_dmul>
 800b26a:	4622      	mov	r2, r4
 800b26c:	462b      	mov	r3, r5
 800b26e:	f7f5 f96f 	bl	8000550 <__aeabi_dmul>
 800b272:	ec53 2b18 	vmov	r2, r3, d8
 800b276:	4604      	mov	r4, r0
 800b278:	460d      	mov	r5, r1
 800b27a:	4640      	mov	r0, r8
 800b27c:	4649      	mov	r1, r9
 800b27e:	f7f5 f967 	bl	8000550 <__aeabi_dmul>
 800b282:	460b      	mov	r3, r1
 800b284:	4602      	mov	r2, r0
 800b286:	4629      	mov	r1, r5
 800b288:	4620      	mov	r0, r4
 800b28a:	f7f4 ffa9 	bl	80001e0 <__aeabi_dsub>
 800b28e:	4b29      	ldr	r3, [pc, #164]	; (800b334 <__kernel_cos+0x17c>)
 800b290:	429e      	cmp	r6, r3
 800b292:	4680      	mov	r8, r0
 800b294:	4689      	mov	r9, r1
 800b296:	dc11      	bgt.n	800b2bc <__kernel_cos+0x104>
 800b298:	4602      	mov	r2, r0
 800b29a:	460b      	mov	r3, r1
 800b29c:	4650      	mov	r0, sl
 800b29e:	4659      	mov	r1, fp
 800b2a0:	f7f4 ff9e 	bl	80001e0 <__aeabi_dsub>
 800b2a4:	460b      	mov	r3, r1
 800b2a6:	4924      	ldr	r1, [pc, #144]	; (800b338 <__kernel_cos+0x180>)
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	2000      	movs	r0, #0
 800b2ac:	f7f4 ff98 	bl	80001e0 <__aeabi_dsub>
 800b2b0:	ecbd 8b02 	vpop	{d8}
 800b2b4:	ec41 0b10 	vmov	d0, r0, r1
 800b2b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2bc:	4b1f      	ldr	r3, [pc, #124]	; (800b33c <__kernel_cos+0x184>)
 800b2be:	491e      	ldr	r1, [pc, #120]	; (800b338 <__kernel_cos+0x180>)
 800b2c0:	429e      	cmp	r6, r3
 800b2c2:	bfcc      	ite	gt
 800b2c4:	4d1e      	ldrgt	r5, [pc, #120]	; (800b340 <__kernel_cos+0x188>)
 800b2c6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800b2ca:	2400      	movs	r4, #0
 800b2cc:	4622      	mov	r2, r4
 800b2ce:	462b      	mov	r3, r5
 800b2d0:	2000      	movs	r0, #0
 800b2d2:	f7f4 ff85 	bl	80001e0 <__aeabi_dsub>
 800b2d6:	4622      	mov	r2, r4
 800b2d8:	4606      	mov	r6, r0
 800b2da:	460f      	mov	r7, r1
 800b2dc:	462b      	mov	r3, r5
 800b2de:	4650      	mov	r0, sl
 800b2e0:	4659      	mov	r1, fp
 800b2e2:	f7f4 ff7d 	bl	80001e0 <__aeabi_dsub>
 800b2e6:	4642      	mov	r2, r8
 800b2e8:	464b      	mov	r3, r9
 800b2ea:	f7f4 ff79 	bl	80001e0 <__aeabi_dsub>
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	4630      	mov	r0, r6
 800b2f4:	4639      	mov	r1, r7
 800b2f6:	e7d9      	b.n	800b2ac <__kernel_cos+0xf4>
 800b2f8:	2000      	movs	r0, #0
 800b2fa:	490f      	ldr	r1, [pc, #60]	; (800b338 <__kernel_cos+0x180>)
 800b2fc:	e7d8      	b.n	800b2b0 <__kernel_cos+0xf8>
 800b2fe:	bf00      	nop
 800b300:	be8838d4 	.word	0xbe8838d4
 800b304:	bda8fae9 	.word	0xbda8fae9
 800b308:	bdb4b1c4 	.word	0xbdb4b1c4
 800b30c:	3e21ee9e 	.word	0x3e21ee9e
 800b310:	809c52ad 	.word	0x809c52ad
 800b314:	3e927e4f 	.word	0x3e927e4f
 800b318:	19cb1590 	.word	0x19cb1590
 800b31c:	3efa01a0 	.word	0x3efa01a0
 800b320:	16c15177 	.word	0x16c15177
 800b324:	3f56c16c 	.word	0x3f56c16c
 800b328:	5555554c 	.word	0x5555554c
 800b32c:	3fa55555 	.word	0x3fa55555
 800b330:	3fe00000 	.word	0x3fe00000
 800b334:	3fd33332 	.word	0x3fd33332
 800b338:	3ff00000 	.word	0x3ff00000
 800b33c:	3fe90000 	.word	0x3fe90000
 800b340:	3fd20000 	.word	0x3fd20000
 800b344:	00000000 	.word	0x00000000

0800b348 <__kernel_rem_pio2>:
 800b348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b34c:	ed2d 8b02 	vpush	{d8}
 800b350:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800b354:	1ed4      	subs	r4, r2, #3
 800b356:	9308      	str	r3, [sp, #32]
 800b358:	9101      	str	r1, [sp, #4]
 800b35a:	4bc5      	ldr	r3, [pc, #788]	; (800b670 <__kernel_rem_pio2+0x328>)
 800b35c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800b35e:	9009      	str	r0, [sp, #36]	; 0x24
 800b360:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b364:	9304      	str	r3, [sp, #16]
 800b366:	9b08      	ldr	r3, [sp, #32]
 800b368:	3b01      	subs	r3, #1
 800b36a:	9307      	str	r3, [sp, #28]
 800b36c:	2318      	movs	r3, #24
 800b36e:	fb94 f4f3 	sdiv	r4, r4, r3
 800b372:	f06f 0317 	mvn.w	r3, #23
 800b376:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800b37a:	fb04 3303 	mla	r3, r4, r3, r3
 800b37e:	eb03 0a02 	add.w	sl, r3, r2
 800b382:	9b04      	ldr	r3, [sp, #16]
 800b384:	9a07      	ldr	r2, [sp, #28]
 800b386:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800b660 <__kernel_rem_pio2+0x318>
 800b38a:	eb03 0802 	add.w	r8, r3, r2
 800b38e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b390:	1aa7      	subs	r7, r4, r2
 800b392:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b396:	ae22      	add	r6, sp, #136	; 0x88
 800b398:	2500      	movs	r5, #0
 800b39a:	4545      	cmp	r5, r8
 800b39c:	dd13      	ble.n	800b3c6 <__kernel_rem_pio2+0x7e>
 800b39e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800b660 <__kernel_rem_pio2+0x318>
 800b3a2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800b3a6:	2600      	movs	r6, #0
 800b3a8:	9b04      	ldr	r3, [sp, #16]
 800b3aa:	429e      	cmp	r6, r3
 800b3ac:	dc32      	bgt.n	800b414 <__kernel_rem_pio2+0xcc>
 800b3ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3b0:	9302      	str	r3, [sp, #8]
 800b3b2:	9b08      	ldr	r3, [sp, #32]
 800b3b4:	199d      	adds	r5, r3, r6
 800b3b6:	ab22      	add	r3, sp, #136	; 0x88
 800b3b8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b3bc:	9306      	str	r3, [sp, #24]
 800b3be:	ec59 8b18 	vmov	r8, r9, d8
 800b3c2:	2700      	movs	r7, #0
 800b3c4:	e01f      	b.n	800b406 <__kernel_rem_pio2+0xbe>
 800b3c6:	42ef      	cmn	r7, r5
 800b3c8:	d407      	bmi.n	800b3da <__kernel_rem_pio2+0x92>
 800b3ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b3ce:	f7f5 f855 	bl	800047c <__aeabi_i2d>
 800b3d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b3d6:	3501      	adds	r5, #1
 800b3d8:	e7df      	b.n	800b39a <__kernel_rem_pio2+0x52>
 800b3da:	ec51 0b18 	vmov	r0, r1, d8
 800b3de:	e7f8      	b.n	800b3d2 <__kernel_rem_pio2+0x8a>
 800b3e0:	9906      	ldr	r1, [sp, #24]
 800b3e2:	9d02      	ldr	r5, [sp, #8]
 800b3e4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800b3e8:	9106      	str	r1, [sp, #24]
 800b3ea:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800b3ee:	9502      	str	r5, [sp, #8]
 800b3f0:	f7f5 f8ae 	bl	8000550 <__aeabi_dmul>
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	460b      	mov	r3, r1
 800b3f8:	4640      	mov	r0, r8
 800b3fa:	4649      	mov	r1, r9
 800b3fc:	f7f4 fef2 	bl	80001e4 <__adddf3>
 800b400:	3701      	adds	r7, #1
 800b402:	4680      	mov	r8, r0
 800b404:	4689      	mov	r9, r1
 800b406:	9b07      	ldr	r3, [sp, #28]
 800b408:	429f      	cmp	r7, r3
 800b40a:	dde9      	ble.n	800b3e0 <__kernel_rem_pio2+0x98>
 800b40c:	e8eb 8902 	strd	r8, r9, [fp], #8
 800b410:	3601      	adds	r6, #1
 800b412:	e7c9      	b.n	800b3a8 <__kernel_rem_pio2+0x60>
 800b414:	9b04      	ldr	r3, [sp, #16]
 800b416:	aa0e      	add	r2, sp, #56	; 0x38
 800b418:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b41c:	930c      	str	r3, [sp, #48]	; 0x30
 800b41e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b420:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b424:	9c04      	ldr	r4, [sp, #16]
 800b426:	930b      	str	r3, [sp, #44]	; 0x2c
 800b428:	ab9a      	add	r3, sp, #616	; 0x268
 800b42a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800b42e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b432:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b436:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800b43a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800b43e:	ab9a      	add	r3, sp, #616	; 0x268
 800b440:	445b      	add	r3, fp
 800b442:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800b446:	2500      	movs	r5, #0
 800b448:	1b63      	subs	r3, r4, r5
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	dc78      	bgt.n	800b540 <__kernel_rem_pio2+0x1f8>
 800b44e:	4650      	mov	r0, sl
 800b450:	ec49 8b10 	vmov	d0, r8, r9
 800b454:	f000 fc00 	bl	800bc58 <scalbn>
 800b458:	ec57 6b10 	vmov	r6, r7, d0
 800b45c:	2200      	movs	r2, #0
 800b45e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b462:	ee10 0a10 	vmov	r0, s0
 800b466:	4639      	mov	r1, r7
 800b468:	f7f5 f872 	bl	8000550 <__aeabi_dmul>
 800b46c:	ec41 0b10 	vmov	d0, r0, r1
 800b470:	f000 fb6e 	bl	800bb50 <floor>
 800b474:	2200      	movs	r2, #0
 800b476:	ec51 0b10 	vmov	r0, r1, d0
 800b47a:	4b7e      	ldr	r3, [pc, #504]	; (800b674 <__kernel_rem_pio2+0x32c>)
 800b47c:	f7f5 f868 	bl	8000550 <__aeabi_dmul>
 800b480:	4602      	mov	r2, r0
 800b482:	460b      	mov	r3, r1
 800b484:	4630      	mov	r0, r6
 800b486:	4639      	mov	r1, r7
 800b488:	f7f4 feaa 	bl	80001e0 <__aeabi_dsub>
 800b48c:	460f      	mov	r7, r1
 800b48e:	4606      	mov	r6, r0
 800b490:	f7f5 faf8 	bl	8000a84 <__aeabi_d2iz>
 800b494:	9006      	str	r0, [sp, #24]
 800b496:	f7f4 fff1 	bl	800047c <__aeabi_i2d>
 800b49a:	4602      	mov	r2, r0
 800b49c:	460b      	mov	r3, r1
 800b49e:	4630      	mov	r0, r6
 800b4a0:	4639      	mov	r1, r7
 800b4a2:	f7f4 fe9d 	bl	80001e0 <__aeabi_dsub>
 800b4a6:	f1ba 0f00 	cmp.w	sl, #0
 800b4aa:	4606      	mov	r6, r0
 800b4ac:	460f      	mov	r7, r1
 800b4ae:	dd6c      	ble.n	800b58a <__kernel_rem_pio2+0x242>
 800b4b0:	1e62      	subs	r2, r4, #1
 800b4b2:	ab0e      	add	r3, sp, #56	; 0x38
 800b4b4:	f1ca 0118 	rsb	r1, sl, #24
 800b4b8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b4bc:	9d06      	ldr	r5, [sp, #24]
 800b4be:	fa40 f301 	asr.w	r3, r0, r1
 800b4c2:	441d      	add	r5, r3
 800b4c4:	408b      	lsls	r3, r1
 800b4c6:	1ac0      	subs	r0, r0, r3
 800b4c8:	ab0e      	add	r3, sp, #56	; 0x38
 800b4ca:	9506      	str	r5, [sp, #24]
 800b4cc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b4d0:	f1ca 0317 	rsb	r3, sl, #23
 800b4d4:	fa40 f303 	asr.w	r3, r0, r3
 800b4d8:	9302      	str	r3, [sp, #8]
 800b4da:	9b02      	ldr	r3, [sp, #8]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	dd62      	ble.n	800b5a6 <__kernel_rem_pio2+0x25e>
 800b4e0:	9b06      	ldr	r3, [sp, #24]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	9306      	str	r3, [sp, #24]
 800b4e8:	4615      	mov	r5, r2
 800b4ea:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b4ee:	4294      	cmp	r4, r2
 800b4f0:	f300 8095 	bgt.w	800b61e <__kernel_rem_pio2+0x2d6>
 800b4f4:	f1ba 0f00 	cmp.w	sl, #0
 800b4f8:	dd07      	ble.n	800b50a <__kernel_rem_pio2+0x1c2>
 800b4fa:	f1ba 0f01 	cmp.w	sl, #1
 800b4fe:	f000 80a2 	beq.w	800b646 <__kernel_rem_pio2+0x2fe>
 800b502:	f1ba 0f02 	cmp.w	sl, #2
 800b506:	f000 80c1 	beq.w	800b68c <__kernel_rem_pio2+0x344>
 800b50a:	9b02      	ldr	r3, [sp, #8]
 800b50c:	2b02      	cmp	r3, #2
 800b50e:	d14a      	bne.n	800b5a6 <__kernel_rem_pio2+0x25e>
 800b510:	4632      	mov	r2, r6
 800b512:	463b      	mov	r3, r7
 800b514:	2000      	movs	r0, #0
 800b516:	4958      	ldr	r1, [pc, #352]	; (800b678 <__kernel_rem_pio2+0x330>)
 800b518:	f7f4 fe62 	bl	80001e0 <__aeabi_dsub>
 800b51c:	4606      	mov	r6, r0
 800b51e:	460f      	mov	r7, r1
 800b520:	2d00      	cmp	r5, #0
 800b522:	d040      	beq.n	800b5a6 <__kernel_rem_pio2+0x25e>
 800b524:	4650      	mov	r0, sl
 800b526:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800b668 <__kernel_rem_pio2+0x320>
 800b52a:	f000 fb95 	bl	800bc58 <scalbn>
 800b52e:	4630      	mov	r0, r6
 800b530:	4639      	mov	r1, r7
 800b532:	ec53 2b10 	vmov	r2, r3, d0
 800b536:	f7f4 fe53 	bl	80001e0 <__aeabi_dsub>
 800b53a:	4606      	mov	r6, r0
 800b53c:	460f      	mov	r7, r1
 800b53e:	e032      	b.n	800b5a6 <__kernel_rem_pio2+0x25e>
 800b540:	2200      	movs	r2, #0
 800b542:	4b4e      	ldr	r3, [pc, #312]	; (800b67c <__kernel_rem_pio2+0x334>)
 800b544:	4640      	mov	r0, r8
 800b546:	4649      	mov	r1, r9
 800b548:	f7f5 f802 	bl	8000550 <__aeabi_dmul>
 800b54c:	f7f5 fa9a 	bl	8000a84 <__aeabi_d2iz>
 800b550:	f7f4 ff94 	bl	800047c <__aeabi_i2d>
 800b554:	2200      	movs	r2, #0
 800b556:	4b4a      	ldr	r3, [pc, #296]	; (800b680 <__kernel_rem_pio2+0x338>)
 800b558:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b55c:	f7f4 fff8 	bl	8000550 <__aeabi_dmul>
 800b560:	4602      	mov	r2, r0
 800b562:	460b      	mov	r3, r1
 800b564:	4640      	mov	r0, r8
 800b566:	4649      	mov	r1, r9
 800b568:	f7f4 fe3a 	bl	80001e0 <__aeabi_dsub>
 800b56c:	f7f5 fa8a 	bl	8000a84 <__aeabi_d2iz>
 800b570:	ab0e      	add	r3, sp, #56	; 0x38
 800b572:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800b576:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800b57a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b57e:	f7f4 fe31 	bl	80001e4 <__adddf3>
 800b582:	3501      	adds	r5, #1
 800b584:	4680      	mov	r8, r0
 800b586:	4689      	mov	r9, r1
 800b588:	e75e      	b.n	800b448 <__kernel_rem_pio2+0x100>
 800b58a:	d105      	bne.n	800b598 <__kernel_rem_pio2+0x250>
 800b58c:	1e63      	subs	r3, r4, #1
 800b58e:	aa0e      	add	r2, sp, #56	; 0x38
 800b590:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b594:	15c3      	asrs	r3, r0, #23
 800b596:	e79f      	b.n	800b4d8 <__kernel_rem_pio2+0x190>
 800b598:	2200      	movs	r2, #0
 800b59a:	4b3a      	ldr	r3, [pc, #232]	; (800b684 <__kernel_rem_pio2+0x33c>)
 800b59c:	f7f5 fa5e 	bl	8000a5c <__aeabi_dcmpge>
 800b5a0:	2800      	cmp	r0, #0
 800b5a2:	d139      	bne.n	800b618 <__kernel_rem_pio2+0x2d0>
 800b5a4:	9002      	str	r0, [sp, #8]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	4630      	mov	r0, r6
 800b5ac:	4639      	mov	r1, r7
 800b5ae:	f7f5 fa37 	bl	8000a20 <__aeabi_dcmpeq>
 800b5b2:	2800      	cmp	r0, #0
 800b5b4:	f000 80c7 	beq.w	800b746 <__kernel_rem_pio2+0x3fe>
 800b5b8:	1e65      	subs	r5, r4, #1
 800b5ba:	462b      	mov	r3, r5
 800b5bc:	2200      	movs	r2, #0
 800b5be:	9904      	ldr	r1, [sp, #16]
 800b5c0:	428b      	cmp	r3, r1
 800b5c2:	da6a      	bge.n	800b69a <__kernel_rem_pio2+0x352>
 800b5c4:	2a00      	cmp	r2, #0
 800b5c6:	f000 8088 	beq.w	800b6da <__kernel_rem_pio2+0x392>
 800b5ca:	ab0e      	add	r3, sp, #56	; 0x38
 800b5cc:	f1aa 0a18 	sub.w	sl, sl, #24
 800b5d0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	f000 80b4 	beq.w	800b742 <__kernel_rem_pio2+0x3fa>
 800b5da:	4650      	mov	r0, sl
 800b5dc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800b668 <__kernel_rem_pio2+0x320>
 800b5e0:	f000 fb3a 	bl	800bc58 <scalbn>
 800b5e4:	00ec      	lsls	r4, r5, #3
 800b5e6:	ab72      	add	r3, sp, #456	; 0x1c8
 800b5e8:	191e      	adds	r6, r3, r4
 800b5ea:	ec59 8b10 	vmov	r8, r9, d0
 800b5ee:	f106 0a08 	add.w	sl, r6, #8
 800b5f2:	462f      	mov	r7, r5
 800b5f4:	2f00      	cmp	r7, #0
 800b5f6:	f280 80df 	bge.w	800b7b8 <__kernel_rem_pio2+0x470>
 800b5fa:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800b660 <__kernel_rem_pio2+0x318>
 800b5fe:	f04f 0a00 	mov.w	sl, #0
 800b602:	eba5 030a 	sub.w	r3, r5, sl
 800b606:	2b00      	cmp	r3, #0
 800b608:	f2c0 810a 	blt.w	800b820 <__kernel_rem_pio2+0x4d8>
 800b60c:	f8df b078 	ldr.w	fp, [pc, #120]	; 800b688 <__kernel_rem_pio2+0x340>
 800b610:	ec59 8b18 	vmov	r8, r9, d8
 800b614:	2700      	movs	r7, #0
 800b616:	e0f5      	b.n	800b804 <__kernel_rem_pio2+0x4bc>
 800b618:	2302      	movs	r3, #2
 800b61a:	9302      	str	r3, [sp, #8]
 800b61c:	e760      	b.n	800b4e0 <__kernel_rem_pio2+0x198>
 800b61e:	ab0e      	add	r3, sp, #56	; 0x38
 800b620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b624:	b94d      	cbnz	r5, 800b63a <__kernel_rem_pio2+0x2f2>
 800b626:	b12b      	cbz	r3, 800b634 <__kernel_rem_pio2+0x2ec>
 800b628:	a80e      	add	r0, sp, #56	; 0x38
 800b62a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b62e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b632:	2301      	movs	r3, #1
 800b634:	3201      	adds	r2, #1
 800b636:	461d      	mov	r5, r3
 800b638:	e759      	b.n	800b4ee <__kernel_rem_pio2+0x1a6>
 800b63a:	a80e      	add	r0, sp, #56	; 0x38
 800b63c:	1acb      	subs	r3, r1, r3
 800b63e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b642:	462b      	mov	r3, r5
 800b644:	e7f6      	b.n	800b634 <__kernel_rem_pio2+0x2ec>
 800b646:	1e62      	subs	r2, r4, #1
 800b648:	ab0e      	add	r3, sp, #56	; 0x38
 800b64a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b64e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b652:	a90e      	add	r1, sp, #56	; 0x38
 800b654:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b658:	e757      	b.n	800b50a <__kernel_rem_pio2+0x1c2>
 800b65a:	bf00      	nop
 800b65c:	f3af 8000 	nop.w
	...
 800b66c:	3ff00000 	.word	0x3ff00000
 800b670:	0800c190 	.word	0x0800c190
 800b674:	40200000 	.word	0x40200000
 800b678:	3ff00000 	.word	0x3ff00000
 800b67c:	3e700000 	.word	0x3e700000
 800b680:	41700000 	.word	0x41700000
 800b684:	3fe00000 	.word	0x3fe00000
 800b688:	0800c150 	.word	0x0800c150
 800b68c:	1e62      	subs	r2, r4, #1
 800b68e:	ab0e      	add	r3, sp, #56	; 0x38
 800b690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b694:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b698:	e7db      	b.n	800b652 <__kernel_rem_pio2+0x30a>
 800b69a:	a90e      	add	r1, sp, #56	; 0x38
 800b69c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b6a0:	3b01      	subs	r3, #1
 800b6a2:	430a      	orrs	r2, r1
 800b6a4:	e78b      	b.n	800b5be <__kernel_rem_pio2+0x276>
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b6ac:	2900      	cmp	r1, #0
 800b6ae:	d0fa      	beq.n	800b6a6 <__kernel_rem_pio2+0x35e>
 800b6b0:	9a08      	ldr	r2, [sp, #32]
 800b6b2:	4422      	add	r2, r4
 800b6b4:	00d2      	lsls	r2, r2, #3
 800b6b6:	a922      	add	r1, sp, #136	; 0x88
 800b6b8:	18e3      	adds	r3, r4, r3
 800b6ba:	9206      	str	r2, [sp, #24]
 800b6bc:	440a      	add	r2, r1
 800b6be:	9302      	str	r3, [sp, #8]
 800b6c0:	f10b 0108 	add.w	r1, fp, #8
 800b6c4:	f102 0308 	add.w	r3, r2, #8
 800b6c8:	1c66      	adds	r6, r4, #1
 800b6ca:	910a      	str	r1, [sp, #40]	; 0x28
 800b6cc:	2500      	movs	r5, #0
 800b6ce:	930d      	str	r3, [sp, #52]	; 0x34
 800b6d0:	9b02      	ldr	r3, [sp, #8]
 800b6d2:	42b3      	cmp	r3, r6
 800b6d4:	da04      	bge.n	800b6e0 <__kernel_rem_pio2+0x398>
 800b6d6:	461c      	mov	r4, r3
 800b6d8:	e6a6      	b.n	800b428 <__kernel_rem_pio2+0xe0>
 800b6da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b6dc:	2301      	movs	r3, #1
 800b6de:	e7e3      	b.n	800b6a8 <__kernel_rem_pio2+0x360>
 800b6e0:	9b06      	ldr	r3, [sp, #24]
 800b6e2:	18ef      	adds	r7, r5, r3
 800b6e4:	ab22      	add	r3, sp, #136	; 0x88
 800b6e6:	441f      	add	r7, r3
 800b6e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6ea:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b6ee:	f7f4 fec5 	bl	800047c <__aeabi_i2d>
 800b6f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6f4:	461c      	mov	r4, r3
 800b6f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6f8:	e9c7 0100 	strd	r0, r1, [r7]
 800b6fc:	eb03 0b05 	add.w	fp, r3, r5
 800b700:	2700      	movs	r7, #0
 800b702:	f04f 0800 	mov.w	r8, #0
 800b706:	f04f 0900 	mov.w	r9, #0
 800b70a:	9b07      	ldr	r3, [sp, #28]
 800b70c:	429f      	cmp	r7, r3
 800b70e:	dd08      	ble.n	800b722 <__kernel_rem_pio2+0x3da>
 800b710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b712:	aa72      	add	r2, sp, #456	; 0x1c8
 800b714:	18eb      	adds	r3, r5, r3
 800b716:	4413      	add	r3, r2
 800b718:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800b71c:	3601      	adds	r6, #1
 800b71e:	3508      	adds	r5, #8
 800b720:	e7d6      	b.n	800b6d0 <__kernel_rem_pio2+0x388>
 800b722:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b726:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b72a:	f7f4 ff11 	bl	8000550 <__aeabi_dmul>
 800b72e:	4602      	mov	r2, r0
 800b730:	460b      	mov	r3, r1
 800b732:	4640      	mov	r0, r8
 800b734:	4649      	mov	r1, r9
 800b736:	f7f4 fd55 	bl	80001e4 <__adddf3>
 800b73a:	3701      	adds	r7, #1
 800b73c:	4680      	mov	r8, r0
 800b73e:	4689      	mov	r9, r1
 800b740:	e7e3      	b.n	800b70a <__kernel_rem_pio2+0x3c2>
 800b742:	3d01      	subs	r5, #1
 800b744:	e741      	b.n	800b5ca <__kernel_rem_pio2+0x282>
 800b746:	f1ca 0000 	rsb	r0, sl, #0
 800b74a:	ec47 6b10 	vmov	d0, r6, r7
 800b74e:	f000 fa83 	bl	800bc58 <scalbn>
 800b752:	ec57 6b10 	vmov	r6, r7, d0
 800b756:	2200      	movs	r2, #0
 800b758:	4b99      	ldr	r3, [pc, #612]	; (800b9c0 <__kernel_rem_pio2+0x678>)
 800b75a:	ee10 0a10 	vmov	r0, s0
 800b75e:	4639      	mov	r1, r7
 800b760:	f7f5 f97c 	bl	8000a5c <__aeabi_dcmpge>
 800b764:	b1f8      	cbz	r0, 800b7a6 <__kernel_rem_pio2+0x45e>
 800b766:	2200      	movs	r2, #0
 800b768:	4b96      	ldr	r3, [pc, #600]	; (800b9c4 <__kernel_rem_pio2+0x67c>)
 800b76a:	4630      	mov	r0, r6
 800b76c:	4639      	mov	r1, r7
 800b76e:	f7f4 feef 	bl	8000550 <__aeabi_dmul>
 800b772:	f7f5 f987 	bl	8000a84 <__aeabi_d2iz>
 800b776:	4680      	mov	r8, r0
 800b778:	f7f4 fe80 	bl	800047c <__aeabi_i2d>
 800b77c:	2200      	movs	r2, #0
 800b77e:	4b90      	ldr	r3, [pc, #576]	; (800b9c0 <__kernel_rem_pio2+0x678>)
 800b780:	f7f4 fee6 	bl	8000550 <__aeabi_dmul>
 800b784:	460b      	mov	r3, r1
 800b786:	4602      	mov	r2, r0
 800b788:	4639      	mov	r1, r7
 800b78a:	4630      	mov	r0, r6
 800b78c:	f7f4 fd28 	bl	80001e0 <__aeabi_dsub>
 800b790:	f7f5 f978 	bl	8000a84 <__aeabi_d2iz>
 800b794:	1c65      	adds	r5, r4, #1
 800b796:	ab0e      	add	r3, sp, #56	; 0x38
 800b798:	f10a 0a18 	add.w	sl, sl, #24
 800b79c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b7a0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b7a4:	e719      	b.n	800b5da <__kernel_rem_pio2+0x292>
 800b7a6:	4630      	mov	r0, r6
 800b7a8:	4639      	mov	r1, r7
 800b7aa:	f7f5 f96b 	bl	8000a84 <__aeabi_d2iz>
 800b7ae:	ab0e      	add	r3, sp, #56	; 0x38
 800b7b0:	4625      	mov	r5, r4
 800b7b2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b7b6:	e710      	b.n	800b5da <__kernel_rem_pio2+0x292>
 800b7b8:	ab0e      	add	r3, sp, #56	; 0x38
 800b7ba:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800b7be:	f7f4 fe5d 	bl	800047c <__aeabi_i2d>
 800b7c2:	4642      	mov	r2, r8
 800b7c4:	464b      	mov	r3, r9
 800b7c6:	f7f4 fec3 	bl	8000550 <__aeabi_dmul>
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800b7d0:	4b7c      	ldr	r3, [pc, #496]	; (800b9c4 <__kernel_rem_pio2+0x67c>)
 800b7d2:	4640      	mov	r0, r8
 800b7d4:	4649      	mov	r1, r9
 800b7d6:	f7f4 febb 	bl	8000550 <__aeabi_dmul>
 800b7da:	3f01      	subs	r7, #1
 800b7dc:	4680      	mov	r8, r0
 800b7de:	4689      	mov	r9, r1
 800b7e0:	e708      	b.n	800b5f4 <__kernel_rem_pio2+0x2ac>
 800b7e2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800b7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ea:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800b7ee:	f7f4 feaf 	bl	8000550 <__aeabi_dmul>
 800b7f2:	4602      	mov	r2, r0
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	4640      	mov	r0, r8
 800b7f8:	4649      	mov	r1, r9
 800b7fa:	f7f4 fcf3 	bl	80001e4 <__adddf3>
 800b7fe:	3701      	adds	r7, #1
 800b800:	4680      	mov	r8, r0
 800b802:	4689      	mov	r9, r1
 800b804:	9b04      	ldr	r3, [sp, #16]
 800b806:	429f      	cmp	r7, r3
 800b808:	dc01      	bgt.n	800b80e <__kernel_rem_pio2+0x4c6>
 800b80a:	45ba      	cmp	sl, r7
 800b80c:	dae9      	bge.n	800b7e2 <__kernel_rem_pio2+0x49a>
 800b80e:	ab4a      	add	r3, sp, #296	; 0x128
 800b810:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b814:	e9c3 8900 	strd	r8, r9, [r3]
 800b818:	f10a 0a01 	add.w	sl, sl, #1
 800b81c:	3e08      	subs	r6, #8
 800b81e:	e6f0      	b.n	800b602 <__kernel_rem_pio2+0x2ba>
 800b820:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b822:	2b03      	cmp	r3, #3
 800b824:	d85b      	bhi.n	800b8de <__kernel_rem_pio2+0x596>
 800b826:	e8df f003 	tbb	[pc, r3]
 800b82a:	264a      	.short	0x264a
 800b82c:	0226      	.short	0x0226
 800b82e:	ab9a      	add	r3, sp, #616	; 0x268
 800b830:	441c      	add	r4, r3
 800b832:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b836:	46a2      	mov	sl, r4
 800b838:	46ab      	mov	fp, r5
 800b83a:	f1bb 0f00 	cmp.w	fp, #0
 800b83e:	dc6c      	bgt.n	800b91a <__kernel_rem_pio2+0x5d2>
 800b840:	46a2      	mov	sl, r4
 800b842:	46ab      	mov	fp, r5
 800b844:	f1bb 0f01 	cmp.w	fp, #1
 800b848:	f300 8086 	bgt.w	800b958 <__kernel_rem_pio2+0x610>
 800b84c:	2000      	movs	r0, #0
 800b84e:	2100      	movs	r1, #0
 800b850:	2d01      	cmp	r5, #1
 800b852:	f300 80a0 	bgt.w	800b996 <__kernel_rem_pio2+0x64e>
 800b856:	9b02      	ldr	r3, [sp, #8]
 800b858:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800b85c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800b860:	2b00      	cmp	r3, #0
 800b862:	f040 809e 	bne.w	800b9a2 <__kernel_rem_pio2+0x65a>
 800b866:	9b01      	ldr	r3, [sp, #4]
 800b868:	e9c3 7800 	strd	r7, r8, [r3]
 800b86c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800b870:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b874:	e033      	b.n	800b8de <__kernel_rem_pio2+0x596>
 800b876:	3408      	adds	r4, #8
 800b878:	ab4a      	add	r3, sp, #296	; 0x128
 800b87a:	441c      	add	r4, r3
 800b87c:	462e      	mov	r6, r5
 800b87e:	2000      	movs	r0, #0
 800b880:	2100      	movs	r1, #0
 800b882:	2e00      	cmp	r6, #0
 800b884:	da3a      	bge.n	800b8fc <__kernel_rem_pio2+0x5b4>
 800b886:	9b02      	ldr	r3, [sp, #8]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d03d      	beq.n	800b908 <__kernel_rem_pio2+0x5c0>
 800b88c:	4602      	mov	r2, r0
 800b88e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b892:	9c01      	ldr	r4, [sp, #4]
 800b894:	e9c4 2300 	strd	r2, r3, [r4]
 800b898:	4602      	mov	r2, r0
 800b89a:	460b      	mov	r3, r1
 800b89c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b8a0:	f7f4 fc9e 	bl	80001e0 <__aeabi_dsub>
 800b8a4:	ae4c      	add	r6, sp, #304	; 0x130
 800b8a6:	2401      	movs	r4, #1
 800b8a8:	42a5      	cmp	r5, r4
 800b8aa:	da30      	bge.n	800b90e <__kernel_rem_pio2+0x5c6>
 800b8ac:	9b02      	ldr	r3, [sp, #8]
 800b8ae:	b113      	cbz	r3, 800b8b6 <__kernel_rem_pio2+0x56e>
 800b8b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	9b01      	ldr	r3, [sp, #4]
 800b8b8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b8bc:	e00f      	b.n	800b8de <__kernel_rem_pio2+0x596>
 800b8be:	ab9a      	add	r3, sp, #616	; 0x268
 800b8c0:	441c      	add	r4, r3
 800b8c2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b8c6:	2000      	movs	r0, #0
 800b8c8:	2100      	movs	r1, #0
 800b8ca:	2d00      	cmp	r5, #0
 800b8cc:	da10      	bge.n	800b8f0 <__kernel_rem_pio2+0x5a8>
 800b8ce:	9b02      	ldr	r3, [sp, #8]
 800b8d0:	b113      	cbz	r3, 800b8d8 <__kernel_rem_pio2+0x590>
 800b8d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b8d6:	4619      	mov	r1, r3
 800b8d8:	9b01      	ldr	r3, [sp, #4]
 800b8da:	e9c3 0100 	strd	r0, r1, [r3]
 800b8de:	9b06      	ldr	r3, [sp, #24]
 800b8e0:	f003 0007 	and.w	r0, r3, #7
 800b8e4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800b8e8:	ecbd 8b02 	vpop	{d8}
 800b8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8f0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b8f4:	f7f4 fc76 	bl	80001e4 <__adddf3>
 800b8f8:	3d01      	subs	r5, #1
 800b8fa:	e7e6      	b.n	800b8ca <__kernel_rem_pio2+0x582>
 800b8fc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b900:	f7f4 fc70 	bl	80001e4 <__adddf3>
 800b904:	3e01      	subs	r6, #1
 800b906:	e7bc      	b.n	800b882 <__kernel_rem_pio2+0x53a>
 800b908:	4602      	mov	r2, r0
 800b90a:	460b      	mov	r3, r1
 800b90c:	e7c1      	b.n	800b892 <__kernel_rem_pio2+0x54a>
 800b90e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b912:	f7f4 fc67 	bl	80001e4 <__adddf3>
 800b916:	3401      	adds	r4, #1
 800b918:	e7c6      	b.n	800b8a8 <__kernel_rem_pio2+0x560>
 800b91a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800b91e:	ed3a 7b02 	vldmdb	sl!, {d7}
 800b922:	4640      	mov	r0, r8
 800b924:	ec53 2b17 	vmov	r2, r3, d7
 800b928:	4649      	mov	r1, r9
 800b92a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b92e:	f7f4 fc59 	bl	80001e4 <__adddf3>
 800b932:	4602      	mov	r2, r0
 800b934:	460b      	mov	r3, r1
 800b936:	4606      	mov	r6, r0
 800b938:	460f      	mov	r7, r1
 800b93a:	4640      	mov	r0, r8
 800b93c:	4649      	mov	r1, r9
 800b93e:	f7f4 fc4f 	bl	80001e0 <__aeabi_dsub>
 800b942:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b946:	f7f4 fc4d 	bl	80001e4 <__adddf3>
 800b94a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b94e:	e9ca 0100 	strd	r0, r1, [sl]
 800b952:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800b956:	e770      	b.n	800b83a <__kernel_rem_pio2+0x4f2>
 800b958:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800b95c:	ed3a 7b02 	vldmdb	sl!, {d7}
 800b960:	4630      	mov	r0, r6
 800b962:	ec53 2b17 	vmov	r2, r3, d7
 800b966:	4639      	mov	r1, r7
 800b968:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b96c:	f7f4 fc3a 	bl	80001e4 <__adddf3>
 800b970:	4602      	mov	r2, r0
 800b972:	460b      	mov	r3, r1
 800b974:	4680      	mov	r8, r0
 800b976:	4689      	mov	r9, r1
 800b978:	4630      	mov	r0, r6
 800b97a:	4639      	mov	r1, r7
 800b97c:	f7f4 fc30 	bl	80001e0 <__aeabi_dsub>
 800b980:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b984:	f7f4 fc2e 	bl	80001e4 <__adddf3>
 800b988:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b98c:	e9ca 0100 	strd	r0, r1, [sl]
 800b990:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800b994:	e756      	b.n	800b844 <__kernel_rem_pio2+0x4fc>
 800b996:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b99a:	f7f4 fc23 	bl	80001e4 <__adddf3>
 800b99e:	3d01      	subs	r5, #1
 800b9a0:	e756      	b.n	800b850 <__kernel_rem_pio2+0x508>
 800b9a2:	9b01      	ldr	r3, [sp, #4]
 800b9a4:	9a01      	ldr	r2, [sp, #4]
 800b9a6:	601f      	str	r7, [r3, #0]
 800b9a8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800b9ac:	605c      	str	r4, [r3, #4]
 800b9ae:	609d      	str	r5, [r3, #8]
 800b9b0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b9b4:	60d3      	str	r3, [r2, #12]
 800b9b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b9ba:	6110      	str	r0, [r2, #16]
 800b9bc:	6153      	str	r3, [r2, #20]
 800b9be:	e78e      	b.n	800b8de <__kernel_rem_pio2+0x596>
 800b9c0:	41700000 	.word	0x41700000
 800b9c4:	3e700000 	.word	0x3e700000

0800b9c8 <__kernel_sin>:
 800b9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9cc:	ec55 4b10 	vmov	r4, r5, d0
 800b9d0:	b085      	sub	sp, #20
 800b9d2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b9d6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b9da:	ed8d 1b00 	vstr	d1, [sp]
 800b9de:	9002      	str	r0, [sp, #8]
 800b9e0:	da06      	bge.n	800b9f0 <__kernel_sin+0x28>
 800b9e2:	ee10 0a10 	vmov	r0, s0
 800b9e6:	4629      	mov	r1, r5
 800b9e8:	f7f5 f84c 	bl	8000a84 <__aeabi_d2iz>
 800b9ec:	2800      	cmp	r0, #0
 800b9ee:	d051      	beq.n	800ba94 <__kernel_sin+0xcc>
 800b9f0:	4622      	mov	r2, r4
 800b9f2:	462b      	mov	r3, r5
 800b9f4:	4620      	mov	r0, r4
 800b9f6:	4629      	mov	r1, r5
 800b9f8:	f7f4 fdaa 	bl	8000550 <__aeabi_dmul>
 800b9fc:	4682      	mov	sl, r0
 800b9fe:	468b      	mov	fp, r1
 800ba00:	4602      	mov	r2, r0
 800ba02:	460b      	mov	r3, r1
 800ba04:	4620      	mov	r0, r4
 800ba06:	4629      	mov	r1, r5
 800ba08:	f7f4 fda2 	bl	8000550 <__aeabi_dmul>
 800ba0c:	a341      	add	r3, pc, #260	; (adr r3, 800bb14 <__kernel_sin+0x14c>)
 800ba0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba12:	4680      	mov	r8, r0
 800ba14:	4689      	mov	r9, r1
 800ba16:	4650      	mov	r0, sl
 800ba18:	4659      	mov	r1, fp
 800ba1a:	f7f4 fd99 	bl	8000550 <__aeabi_dmul>
 800ba1e:	a33f      	add	r3, pc, #252	; (adr r3, 800bb1c <__kernel_sin+0x154>)
 800ba20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba24:	f7f4 fbdc 	bl	80001e0 <__aeabi_dsub>
 800ba28:	4652      	mov	r2, sl
 800ba2a:	465b      	mov	r3, fp
 800ba2c:	f7f4 fd90 	bl	8000550 <__aeabi_dmul>
 800ba30:	a33c      	add	r3, pc, #240	; (adr r3, 800bb24 <__kernel_sin+0x15c>)
 800ba32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba36:	f7f4 fbd5 	bl	80001e4 <__adddf3>
 800ba3a:	4652      	mov	r2, sl
 800ba3c:	465b      	mov	r3, fp
 800ba3e:	f7f4 fd87 	bl	8000550 <__aeabi_dmul>
 800ba42:	a33a      	add	r3, pc, #232	; (adr r3, 800bb2c <__kernel_sin+0x164>)
 800ba44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba48:	f7f4 fbca 	bl	80001e0 <__aeabi_dsub>
 800ba4c:	4652      	mov	r2, sl
 800ba4e:	465b      	mov	r3, fp
 800ba50:	f7f4 fd7e 	bl	8000550 <__aeabi_dmul>
 800ba54:	a337      	add	r3, pc, #220	; (adr r3, 800bb34 <__kernel_sin+0x16c>)
 800ba56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5a:	f7f4 fbc3 	bl	80001e4 <__adddf3>
 800ba5e:	9b02      	ldr	r3, [sp, #8]
 800ba60:	4606      	mov	r6, r0
 800ba62:	460f      	mov	r7, r1
 800ba64:	b9db      	cbnz	r3, 800ba9e <__kernel_sin+0xd6>
 800ba66:	4602      	mov	r2, r0
 800ba68:	460b      	mov	r3, r1
 800ba6a:	4650      	mov	r0, sl
 800ba6c:	4659      	mov	r1, fp
 800ba6e:	f7f4 fd6f 	bl	8000550 <__aeabi_dmul>
 800ba72:	a325      	add	r3, pc, #148	; (adr r3, 800bb08 <__kernel_sin+0x140>)
 800ba74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba78:	f7f4 fbb2 	bl	80001e0 <__aeabi_dsub>
 800ba7c:	4642      	mov	r2, r8
 800ba7e:	464b      	mov	r3, r9
 800ba80:	f7f4 fd66 	bl	8000550 <__aeabi_dmul>
 800ba84:	4602      	mov	r2, r0
 800ba86:	460b      	mov	r3, r1
 800ba88:	4620      	mov	r0, r4
 800ba8a:	4629      	mov	r1, r5
 800ba8c:	f7f4 fbaa 	bl	80001e4 <__adddf3>
 800ba90:	4604      	mov	r4, r0
 800ba92:	460d      	mov	r5, r1
 800ba94:	ec45 4b10 	vmov	d0, r4, r5
 800ba98:	b005      	add	sp, #20
 800ba9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba9e:	2200      	movs	r2, #0
 800baa0:	4b1b      	ldr	r3, [pc, #108]	; (800bb10 <__kernel_sin+0x148>)
 800baa2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800baa6:	f7f4 fd53 	bl	8000550 <__aeabi_dmul>
 800baaa:	4632      	mov	r2, r6
 800baac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bab0:	463b      	mov	r3, r7
 800bab2:	4640      	mov	r0, r8
 800bab4:	4649      	mov	r1, r9
 800bab6:	f7f4 fd4b 	bl	8000550 <__aeabi_dmul>
 800baba:	4602      	mov	r2, r0
 800babc:	460b      	mov	r3, r1
 800babe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bac2:	f7f4 fb8d 	bl	80001e0 <__aeabi_dsub>
 800bac6:	4652      	mov	r2, sl
 800bac8:	465b      	mov	r3, fp
 800baca:	f7f4 fd41 	bl	8000550 <__aeabi_dmul>
 800bace:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bad2:	f7f4 fb85 	bl	80001e0 <__aeabi_dsub>
 800bad6:	a30c      	add	r3, pc, #48	; (adr r3, 800bb08 <__kernel_sin+0x140>)
 800bad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800badc:	4606      	mov	r6, r0
 800bade:	460f      	mov	r7, r1
 800bae0:	4640      	mov	r0, r8
 800bae2:	4649      	mov	r1, r9
 800bae4:	f7f4 fd34 	bl	8000550 <__aeabi_dmul>
 800bae8:	4602      	mov	r2, r0
 800baea:	460b      	mov	r3, r1
 800baec:	4630      	mov	r0, r6
 800baee:	4639      	mov	r1, r7
 800baf0:	f7f4 fb78 	bl	80001e4 <__adddf3>
 800baf4:	4602      	mov	r2, r0
 800baf6:	460b      	mov	r3, r1
 800baf8:	4620      	mov	r0, r4
 800bafa:	4629      	mov	r1, r5
 800bafc:	f7f4 fb70 	bl	80001e0 <__aeabi_dsub>
 800bb00:	e7c6      	b.n	800ba90 <__kernel_sin+0xc8>
 800bb02:	bf00      	nop
 800bb04:	f3af 8000 	nop.w
 800bb08:	55555549 	.word	0x55555549
 800bb0c:	3fc55555 	.word	0x3fc55555
 800bb10:	3fe00000 	.word	0x3fe00000
 800bb14:	5acfd57c 	.word	0x5acfd57c
 800bb18:	3de5d93a 	.word	0x3de5d93a
 800bb1c:	8a2b9ceb 	.word	0x8a2b9ceb
 800bb20:	3e5ae5e6 	.word	0x3e5ae5e6
 800bb24:	57b1fe7d 	.word	0x57b1fe7d
 800bb28:	3ec71de3 	.word	0x3ec71de3
 800bb2c:	19c161d5 	.word	0x19c161d5
 800bb30:	3f2a01a0 	.word	0x3f2a01a0
 800bb34:	1110f8a6 	.word	0x1110f8a6
 800bb38:	3f811111 	.word	0x3f811111

0800bb3c <fabs>:
 800bb3c:	ec51 0b10 	vmov	r0, r1, d0
 800bb40:	ee10 2a10 	vmov	r2, s0
 800bb44:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bb48:	ec43 2b10 	vmov	d0, r2, r3
 800bb4c:	4770      	bx	lr
	...

0800bb50 <floor>:
 800bb50:	ec51 0b10 	vmov	r0, r1, d0
 800bb54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb58:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800bb5c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800bb60:	2e13      	cmp	r6, #19
 800bb62:	460c      	mov	r4, r1
 800bb64:	ee10 5a10 	vmov	r5, s0
 800bb68:	4680      	mov	r8, r0
 800bb6a:	dc34      	bgt.n	800bbd6 <floor+0x86>
 800bb6c:	2e00      	cmp	r6, #0
 800bb6e:	da16      	bge.n	800bb9e <floor+0x4e>
 800bb70:	a335      	add	r3, pc, #212	; (adr r3, 800bc48 <floor+0xf8>)
 800bb72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb76:	f7f4 fb35 	bl	80001e4 <__adddf3>
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	f7f4 ff77 	bl	8000a70 <__aeabi_dcmpgt>
 800bb82:	b148      	cbz	r0, 800bb98 <floor+0x48>
 800bb84:	2c00      	cmp	r4, #0
 800bb86:	da59      	bge.n	800bc3c <floor+0xec>
 800bb88:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800bb8c:	4a30      	ldr	r2, [pc, #192]	; (800bc50 <floor+0x100>)
 800bb8e:	432b      	orrs	r3, r5
 800bb90:	2500      	movs	r5, #0
 800bb92:	42ab      	cmp	r3, r5
 800bb94:	bf18      	it	ne
 800bb96:	4614      	movne	r4, r2
 800bb98:	4621      	mov	r1, r4
 800bb9a:	4628      	mov	r0, r5
 800bb9c:	e025      	b.n	800bbea <floor+0x9a>
 800bb9e:	4f2d      	ldr	r7, [pc, #180]	; (800bc54 <floor+0x104>)
 800bba0:	4137      	asrs	r7, r6
 800bba2:	ea01 0307 	and.w	r3, r1, r7
 800bba6:	4303      	orrs	r3, r0
 800bba8:	d01f      	beq.n	800bbea <floor+0x9a>
 800bbaa:	a327      	add	r3, pc, #156	; (adr r3, 800bc48 <floor+0xf8>)
 800bbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb0:	f7f4 fb18 	bl	80001e4 <__adddf3>
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	f7f4 ff5a 	bl	8000a70 <__aeabi_dcmpgt>
 800bbbc:	2800      	cmp	r0, #0
 800bbbe:	d0eb      	beq.n	800bb98 <floor+0x48>
 800bbc0:	2c00      	cmp	r4, #0
 800bbc2:	bfbe      	ittt	lt
 800bbc4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800bbc8:	fa43 f606 	asrlt.w	r6, r3, r6
 800bbcc:	19a4      	addlt	r4, r4, r6
 800bbce:	ea24 0407 	bic.w	r4, r4, r7
 800bbd2:	2500      	movs	r5, #0
 800bbd4:	e7e0      	b.n	800bb98 <floor+0x48>
 800bbd6:	2e33      	cmp	r6, #51	; 0x33
 800bbd8:	dd0b      	ble.n	800bbf2 <floor+0xa2>
 800bbda:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bbde:	d104      	bne.n	800bbea <floor+0x9a>
 800bbe0:	ee10 2a10 	vmov	r2, s0
 800bbe4:	460b      	mov	r3, r1
 800bbe6:	f7f4 fafd 	bl	80001e4 <__adddf3>
 800bbea:	ec41 0b10 	vmov	d0, r0, r1
 800bbee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbf2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800bbf6:	f04f 33ff 	mov.w	r3, #4294967295
 800bbfa:	fa23 f707 	lsr.w	r7, r3, r7
 800bbfe:	4207      	tst	r7, r0
 800bc00:	d0f3      	beq.n	800bbea <floor+0x9a>
 800bc02:	a311      	add	r3, pc, #68	; (adr r3, 800bc48 <floor+0xf8>)
 800bc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc08:	f7f4 faec 	bl	80001e4 <__adddf3>
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	2300      	movs	r3, #0
 800bc10:	f7f4 ff2e 	bl	8000a70 <__aeabi_dcmpgt>
 800bc14:	2800      	cmp	r0, #0
 800bc16:	d0bf      	beq.n	800bb98 <floor+0x48>
 800bc18:	2c00      	cmp	r4, #0
 800bc1a:	da02      	bge.n	800bc22 <floor+0xd2>
 800bc1c:	2e14      	cmp	r6, #20
 800bc1e:	d103      	bne.n	800bc28 <floor+0xd8>
 800bc20:	3401      	adds	r4, #1
 800bc22:	ea25 0507 	bic.w	r5, r5, r7
 800bc26:	e7b7      	b.n	800bb98 <floor+0x48>
 800bc28:	2301      	movs	r3, #1
 800bc2a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800bc2e:	fa03 f606 	lsl.w	r6, r3, r6
 800bc32:	4435      	add	r5, r6
 800bc34:	4545      	cmp	r5, r8
 800bc36:	bf38      	it	cc
 800bc38:	18e4      	addcc	r4, r4, r3
 800bc3a:	e7f2      	b.n	800bc22 <floor+0xd2>
 800bc3c:	2500      	movs	r5, #0
 800bc3e:	462c      	mov	r4, r5
 800bc40:	e7aa      	b.n	800bb98 <floor+0x48>
 800bc42:	bf00      	nop
 800bc44:	f3af 8000 	nop.w
 800bc48:	8800759c 	.word	0x8800759c
 800bc4c:	7e37e43c 	.word	0x7e37e43c
 800bc50:	bff00000 	.word	0xbff00000
 800bc54:	000fffff 	.word	0x000fffff

0800bc58 <scalbn>:
 800bc58:	b570      	push	{r4, r5, r6, lr}
 800bc5a:	ec55 4b10 	vmov	r4, r5, d0
 800bc5e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800bc62:	4606      	mov	r6, r0
 800bc64:	462b      	mov	r3, r5
 800bc66:	b9aa      	cbnz	r2, 800bc94 <scalbn+0x3c>
 800bc68:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bc6c:	4323      	orrs	r3, r4
 800bc6e:	d03b      	beq.n	800bce8 <scalbn+0x90>
 800bc70:	4b31      	ldr	r3, [pc, #196]	; (800bd38 <scalbn+0xe0>)
 800bc72:	4629      	mov	r1, r5
 800bc74:	2200      	movs	r2, #0
 800bc76:	ee10 0a10 	vmov	r0, s0
 800bc7a:	f7f4 fc69 	bl	8000550 <__aeabi_dmul>
 800bc7e:	4b2f      	ldr	r3, [pc, #188]	; (800bd3c <scalbn+0xe4>)
 800bc80:	429e      	cmp	r6, r3
 800bc82:	4604      	mov	r4, r0
 800bc84:	460d      	mov	r5, r1
 800bc86:	da12      	bge.n	800bcae <scalbn+0x56>
 800bc88:	a327      	add	r3, pc, #156	; (adr r3, 800bd28 <scalbn+0xd0>)
 800bc8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8e:	f7f4 fc5f 	bl	8000550 <__aeabi_dmul>
 800bc92:	e009      	b.n	800bca8 <scalbn+0x50>
 800bc94:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800bc98:	428a      	cmp	r2, r1
 800bc9a:	d10c      	bne.n	800bcb6 <scalbn+0x5e>
 800bc9c:	ee10 2a10 	vmov	r2, s0
 800bca0:	4620      	mov	r0, r4
 800bca2:	4629      	mov	r1, r5
 800bca4:	f7f4 fa9e 	bl	80001e4 <__adddf3>
 800bca8:	4604      	mov	r4, r0
 800bcaa:	460d      	mov	r5, r1
 800bcac:	e01c      	b.n	800bce8 <scalbn+0x90>
 800bcae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	3a36      	subs	r2, #54	; 0x36
 800bcb6:	4432      	add	r2, r6
 800bcb8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bcbc:	428a      	cmp	r2, r1
 800bcbe:	dd0b      	ble.n	800bcd8 <scalbn+0x80>
 800bcc0:	ec45 4b11 	vmov	d1, r4, r5
 800bcc4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800bd30 <scalbn+0xd8>
 800bcc8:	f000 f83c 	bl	800bd44 <copysign>
 800bccc:	a318      	add	r3, pc, #96	; (adr r3, 800bd30 <scalbn+0xd8>)
 800bcce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd2:	ec51 0b10 	vmov	r0, r1, d0
 800bcd6:	e7da      	b.n	800bc8e <scalbn+0x36>
 800bcd8:	2a00      	cmp	r2, #0
 800bcda:	dd08      	ble.n	800bcee <scalbn+0x96>
 800bcdc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bce0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bce4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bce8:	ec45 4b10 	vmov	d0, r4, r5
 800bcec:	bd70      	pop	{r4, r5, r6, pc}
 800bcee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bcf2:	da0d      	bge.n	800bd10 <scalbn+0xb8>
 800bcf4:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bcf8:	429e      	cmp	r6, r3
 800bcfa:	ec45 4b11 	vmov	d1, r4, r5
 800bcfe:	dce1      	bgt.n	800bcc4 <scalbn+0x6c>
 800bd00:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800bd28 <scalbn+0xd0>
 800bd04:	f000 f81e 	bl	800bd44 <copysign>
 800bd08:	a307      	add	r3, pc, #28	; (adr r3, 800bd28 <scalbn+0xd0>)
 800bd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd0e:	e7e0      	b.n	800bcd2 <scalbn+0x7a>
 800bd10:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bd14:	3236      	adds	r2, #54	; 0x36
 800bd16:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bd1a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bd1e:	4620      	mov	r0, r4
 800bd20:	4629      	mov	r1, r5
 800bd22:	2200      	movs	r2, #0
 800bd24:	4b06      	ldr	r3, [pc, #24]	; (800bd40 <scalbn+0xe8>)
 800bd26:	e7b2      	b.n	800bc8e <scalbn+0x36>
 800bd28:	c2f8f359 	.word	0xc2f8f359
 800bd2c:	01a56e1f 	.word	0x01a56e1f
 800bd30:	8800759c 	.word	0x8800759c
 800bd34:	7e37e43c 	.word	0x7e37e43c
 800bd38:	43500000 	.word	0x43500000
 800bd3c:	ffff3cb0 	.word	0xffff3cb0
 800bd40:	3c900000 	.word	0x3c900000

0800bd44 <copysign>:
 800bd44:	ec51 0b10 	vmov	r0, r1, d0
 800bd48:	ee11 0a90 	vmov	r0, s3
 800bd4c:	ee10 2a10 	vmov	r2, s0
 800bd50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800bd54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800bd58:	ea41 0300 	orr.w	r3, r1, r0
 800bd5c:	ec43 2b10 	vmov	d0, r2, r3
 800bd60:	4770      	bx	lr
	...

0800bd64 <_init>:
 800bd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd66:	bf00      	nop
 800bd68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd6a:	bc08      	pop	{r3}
 800bd6c:	469e      	mov	lr, r3
 800bd6e:	4770      	bx	lr

0800bd70 <_fini>:
 800bd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd72:	bf00      	nop
 800bd74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd76:	bc08      	pop	{r3}
 800bd78:	469e      	mov	lr, r3
 800bd7a:	4770      	bx	lr
