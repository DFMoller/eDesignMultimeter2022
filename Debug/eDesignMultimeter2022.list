
eDesignMultimeter2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f1c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080060b0  080060b0  000160b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006104  08006104  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08006104  08006104  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006104  08006104  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006104  08006104  00016104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006108  08006108  00016108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800610c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000001c  08006128  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08006128  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000129d3  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000201d  00000000  00000000  00032a1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ea0  00000000  00000000  00034a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dd8  00000000  00000000  000358e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021ae1  00000000  00000000  000366b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e54c  00000000  00000000  00058199  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3a69  00000000  00000000  000666e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013a14e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003de0  00000000  00000000  0013a1cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000001c 	.word	0x2000001c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006098 	.word	0x08006098

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000020 	.word	0x20000020
 80001d0:	08006098 	.word	0x08006098

080001d4 <HAL_UART_RxCpltCallback>:

uint8_t display_state = 1; // Default of 1 is Measurement Display State
uint8_t output_active = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	message_received = 1;
 80001dc:	4b04      	ldr	r3, [pc, #16]	; (80001f0 <HAL_UART_RxCpltCallback+0x1c>)
 80001de:	2201      	movs	r2, #1
 80001e0:	701a      	strb	r2, [r3, #0]
}
 80001e2:	bf00      	nop
 80001e4:	370c      	adds	r7, #12
 80001e6:	46bd      	mov	sp, r7
 80001e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	20000038 	.word	0x20000038

080001f4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	4603      	mov	r3, r0
 80001fc:	80fb      	strh	r3, [r7, #6]
	last_ticks = HAL_GetTick();
 80001fe:	f001 f94d 	bl	800149c <HAL_GetTick>
 8000202:	4602      	mov	r2, r0
 8000204:	4b15      	ldr	r3, [pc, #84]	; (800025c <HAL_GPIO_EXTI_Callback+0x68>)
 8000206:	601a      	str	r2, [r3, #0]
	if(GPIO_Pin == btn_mid_Pin)
 8000208:	88fb      	ldrh	r3, [r7, #6]
 800020a:	2b40      	cmp	r3, #64	; 0x40
 800020c:	d103      	bne.n	8000216 <HAL_GPIO_EXTI_Callback+0x22>
	{
		btn_mid_flag = 1;
 800020e:	4b14      	ldr	r3, [pc, #80]	; (8000260 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000210:	2201      	movs	r2, #1
 8000212:	701a      	strb	r2, [r3, #0]
	}
	else if(GPIO_Pin == btn_down_Pin)
	{
		btn_down_flag = 1;
	}
}
 8000214:	e01d      	b.n	8000252 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_right_Pin)
 8000216:	88fb      	ldrh	r3, [r7, #6]
 8000218:	2b80      	cmp	r3, #128	; 0x80
 800021a:	d103      	bne.n	8000224 <HAL_GPIO_EXTI_Callback+0x30>
		btn_right_flag = 1;
 800021c:	4b11      	ldr	r3, [pc, #68]	; (8000264 <HAL_GPIO_EXTI_Callback+0x70>)
 800021e:	2201      	movs	r2, #1
 8000220:	701a      	strb	r2, [r3, #0]
}
 8000222:	e016      	b.n	8000252 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_up_Pin)
 8000224:	88fb      	ldrh	r3, [r7, #6]
 8000226:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800022a:	d103      	bne.n	8000234 <HAL_GPIO_EXTI_Callback+0x40>
		btn_up_flag = 1;
 800022c:	4b0e      	ldr	r3, [pc, #56]	; (8000268 <HAL_GPIO_EXTI_Callback+0x74>)
 800022e:	2201      	movs	r2, #1
 8000230:	701a      	strb	r2, [r3, #0]
}
 8000232:	e00e      	b.n	8000252 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_left_Pin)
 8000234:	88fb      	ldrh	r3, [r7, #6]
 8000236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800023a:	d103      	bne.n	8000244 <HAL_GPIO_EXTI_Callback+0x50>
		btn_left_flag = 1;
 800023c:	4b0b      	ldr	r3, [pc, #44]	; (800026c <HAL_GPIO_EXTI_Callback+0x78>)
 800023e:	2201      	movs	r2, #1
 8000240:	701a      	strb	r2, [r3, #0]
}
 8000242:	e006      	b.n	8000252 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_down_Pin)
 8000244:	88fb      	ldrh	r3, [r7, #6]
 8000246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800024a:	d102      	bne.n	8000252 <HAL_GPIO_EXTI_Callback+0x5e>
		btn_down_flag = 1;
 800024c:	4b08      	ldr	r3, [pc, #32]	; (8000270 <HAL_GPIO_EXTI_Callback+0x7c>)
 800024e:	2201      	movs	r2, #1
 8000250:	701a      	strb	r2, [r3, #0]
}
 8000252:	bf00      	nop
 8000254:	3708      	adds	r7, #8
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	20000040 	.word	0x20000040
 8000260:	20000039 	.word	0x20000039
 8000264:	2000003a 	.word	0x2000003a
 8000268:	2000003b 	.word	0x2000003b
 800026c:	2000003c 	.word	0x2000003c
 8000270:	2000003d 	.word	0x2000003d

08000274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	f5ad 6d00 	sub.w	sp, sp, #2048	; 0x800
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t raw;
	uint16_t millivolts;
//	char msg[100];
	uint16_t adc_array[1000];
	uint16_t adc_count = 0;
 800027c:	2300      	movs	r3, #0
 800027e:	f8a7 37fe 	strh.w	r3, [r7, #2046]	; 0x7fe


	uint8_t rx_bytes[10] = {0};
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
 8000288:	605a      	str	r2, [r3, #4]
 800028a:	811a      	strh	r2, [r3, #8]
	uint8_t rx_bytes_counter = 0;
 800028c:	2300      	movs	r3, #0
 800028e:	f887 37fd 	strb.w	r3, [r7, #2045]	; 0x7fd
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000292:	f001 f8a9 	bl	80013e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000296:	f000 f9ed 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029a:	f000 fb17 	bl	80008cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800029e:	f000 fae5 	bl	800086c <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80002a2:	f000 fabd 	bl	8000820 <MX_TIM16_Init>
  MX_ADC1_Init();
 80002a6:	f000 fa4b 	bl	8000740 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, std_num, 13, 10);
 80002aa:	230a      	movs	r3, #10
 80002ac:	220d      	movs	r2, #13
 80002ae:	49b7      	ldr	r1, [pc, #732]	; (800058c <main+0x318>)
 80002b0:	48b7      	ldr	r0, [pc, #732]	; (8000590 <main+0x31c>)
 80002b2:	f004 fca9 	bl	8004c08 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 80002b6:	2201      	movs	r2, #1
 80002b8:	49b6      	ldr	r1, [pc, #728]	; (8000594 <main+0x320>)
 80002ba:	48b5      	ldr	r0, [pc, #724]	; (8000590 <main+0x31c>)
 80002bc:	f004 fd38 	bl	8004d30 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 80002c0:	48b5      	ldr	r0, [pc, #724]	; (8000598 <main+0x324>)
 80002c2:	f004 f9df 	bl	8004684 <HAL_TIM_Base_Start_IT>


  // Set up the default state of the device
  display_state = changeDisplayState(1); // 1 == Measurement mode
 80002c6:	2001      	movs	r0, #1
 80002c8:	f000 fbce 	bl	8000a68 <changeDisplayState>
 80002cc:	4603      	mov	r3, r0
 80002ce:	461a      	mov	r2, r3
 80002d0:	4bb2      	ldr	r3, [pc, #712]	; (800059c <main+0x328>)
 80002d2:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(message_received && rx_byte[0] != '\n')
 80002d4:	4bb2      	ldr	r3, [pc, #712]	; (80005a0 <main+0x32c>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d03a      	beq.n	8000352 <main+0xde>
 80002dc:	4bad      	ldr	r3, [pc, #692]	; (8000594 <main+0x320>)
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	2b0a      	cmp	r3, #10
 80002e2:	d036      	beq.n	8000352 <main+0xde>
	  {
		  rx_bytes[rx_bytes_counter] = rx_byte[0];
 80002e4:	f897 37fd 	ldrb.w	r3, [r7, #2045]	; 0x7fd
 80002e8:	4aaa      	ldr	r2, [pc, #680]	; (8000594 <main+0x320>)
 80002ea:	7811      	ldrb	r1, [r2, #0]
 80002ec:	1d3a      	adds	r2, r7, #4
 80002ee:	54d1      	strb	r1, [r2, r3]
		  if(rx_bytes_counter == 0 && rx_byte[0] == '@'){
 80002f0:	f897 37fd 	ldrb.w	r3, [r7, #2045]	; 0x7fd
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d109      	bne.n	800030c <main+0x98>
 80002f8:	4ba6      	ldr	r3, [pc, #664]	; (8000594 <main+0x320>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	2b40      	cmp	r3, #64	; 0x40
 80002fe:	d105      	bne.n	800030c <main+0x98>
			  rx_bytes_counter++;
 8000300:	f897 37fd 	ldrb.w	r3, [r7, #2045]	; 0x7fd
 8000304:	3301      	adds	r3, #1
 8000306:	f887 37fd 	strb.w	r3, [r7, #2045]	; 0x7fd
 800030a:	e01a      	b.n	8000342 <main+0xce>
		  } else if(rx_bytes_counter > 0){
 800030c:	f897 37fd 	ldrb.w	r3, [r7, #2045]	; 0x7fd
 8000310:	2b00      	cmp	r3, #0
 8000312:	d016      	beq.n	8000342 <main+0xce>
			  rx_bytes_counter++;
 8000314:	f897 37fd 	ldrb.w	r3, [r7, #2045]	; 0x7fd
 8000318:	3301      	adds	r3, #1
 800031a:	f887 37fd 	strb.w	r3, [r7, #2045]	; 0x7fd
			  if(uartRxComplete(rx_byte[0]))
 800031e:	4b9d      	ldr	r3, [pc, #628]	; (8000594 <main+0x320>)
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	4618      	mov	r0, r3
 8000324:	f000 fc12 	bl	8000b4c <uartRxComplete>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d009      	beq.n	8000342 <main+0xce>
			  {
				  interpret_rx_message(rx_bytes, rx_bytes_counter);
 800032e:	f897 27fd 	ldrb.w	r2, [r7, #2045]	; 0x7fd
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	4611      	mov	r1, r2
 8000336:	4618      	mov	r0, r3
 8000338:	f000 fc1a 	bl	8000b70 <interpret_rx_message>
				  rx_bytes_counter = 0;
 800033c:	2300      	movs	r3, #0
 800033e:	f887 37fd 	strb.w	r3, [r7, #2045]	; 0x7fd
			  }
		  }
		  HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 8000342:	2201      	movs	r2, #1
 8000344:	4993      	ldr	r1, [pc, #588]	; (8000594 <main+0x320>)
 8000346:	4892      	ldr	r0, [pc, #584]	; (8000590 <main+0x31c>)
 8000348:	f004 fcf2 	bl	8004d30 <HAL_UART_Receive_IT>
		  message_received = 0;
 800034c:	4b94      	ldr	r3, [pc, #592]	; (80005a0 <main+0x32c>)
 800034e:	2200      	movs	r2, #0
 8000350:	701a      	strb	r2, [r3, #0]
	  }
	  if(btn_up_flag)
 8000352:	4b94      	ldr	r3, [pc, #592]	; (80005a4 <main+0x330>)
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d010      	beq.n	800037c <main+0x108>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 800035a:	f001 f89f 	bl	800149c <HAL_GetTick>
 800035e:	4602      	mov	r2, r0
 8000360:	4b91      	ldr	r3, [pc, #580]	; (80005a8 <main+0x334>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	1ad3      	subs	r3, r2, r3
 8000366:	2b36      	cmp	r3, #54	; 0x36
 8000368:	d96d      	bls.n	8000446 <main+0x1d2>
		  {
			  if(HAL_GPIO_ReadPin(btn_up_GPIO_Port, btn_up_Pin))
 800036a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800036e:	488f      	ldr	r0, [pc, #572]	; (80005ac <main+0x338>)
 8000370:	f002 fd64 	bl	8002e3c <HAL_GPIO_ReadPin>
			  {
//				  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
			  }
			  btn_up_flag = 0;
 8000374:	4b8b      	ldr	r3, [pc, #556]	; (80005a4 <main+0x330>)
 8000376:	2200      	movs	r2, #0
 8000378:	701a      	strb	r2, [r3, #0]
 800037a:	e064      	b.n	8000446 <main+0x1d2>
		  }
	  }
	  else if(btn_left_flag)
 800037c:	4b8c      	ldr	r3, [pc, #560]	; (80005b0 <main+0x33c>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d010      	beq.n	80003a6 <main+0x132>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 8000384:	f001 f88a 	bl	800149c <HAL_GetTick>
 8000388:	4602      	mov	r2, r0
 800038a:	4b87      	ldr	r3, [pc, #540]	; (80005a8 <main+0x334>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	1ad3      	subs	r3, r2, r3
 8000390:	2b36      	cmp	r3, #54	; 0x36
 8000392:	d958      	bls.n	8000446 <main+0x1d2>
		  {
			  if(HAL_GPIO_ReadPin(btn_left_GPIO_Port, btn_left_Pin))
 8000394:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000398:	4884      	ldr	r0, [pc, #528]	; (80005ac <main+0x338>)
 800039a:	f002 fd4f 	bl	8002e3c <HAL_GPIO_ReadPin>
			  {
//				  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
			  }
			  btn_left_flag = 0;
 800039e:	4b84      	ldr	r3, [pc, #528]	; (80005b0 <main+0x33c>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	701a      	strb	r2, [r3, #0]
 80003a4:	e04f      	b.n	8000446 <main+0x1d2>
		  }
	  }
	  else if(btn_down_flag)
 80003a6:	4b83      	ldr	r3, [pc, #524]	; (80005b4 <main+0x340>)
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d010      	beq.n	80003d0 <main+0x15c>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 80003ae:	f001 f875 	bl	800149c <HAL_GetTick>
 80003b2:	4602      	mov	r2, r0
 80003b4:	4b7c      	ldr	r3, [pc, #496]	; (80005a8 <main+0x334>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	1ad3      	subs	r3, r2, r3
 80003ba:	2b36      	cmp	r3, #54	; 0x36
 80003bc:	d943      	bls.n	8000446 <main+0x1d2>
		  {
			  if(HAL_GPIO_ReadPin(btn_down_GPIO_Port, btn_down_Pin))
 80003be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003c2:	487a      	ldr	r0, [pc, #488]	; (80005ac <main+0x338>)
 80003c4:	f002 fd3a 	bl	8002e3c <HAL_GPIO_ReadPin>
			  {
//				  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
			  }
			  btn_down_flag = 0;
 80003c8:	4b7a      	ldr	r3, [pc, #488]	; (80005b4 <main+0x340>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	701a      	strb	r2, [r3, #0]
 80003ce:	e03a      	b.n	8000446 <main+0x1d2>
		  }
	  }
	  else if(btn_right_flag)
 80003d0:	4b79      	ldr	r3, [pc, #484]	; (80005b8 <main+0x344>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d010      	beq.n	80003fa <main+0x186>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 80003d8:	f001 f860 	bl	800149c <HAL_GetTick>
 80003dc:	4602      	mov	r2, r0
 80003de:	4b72      	ldr	r3, [pc, #456]	; (80005a8 <main+0x334>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	1ad3      	subs	r3, r2, r3
 80003e4:	2b36      	cmp	r3, #54	; 0x36
 80003e6:	d92e      	bls.n	8000446 <main+0x1d2>
		  {
			  if(HAL_GPIO_ReadPin(btn_right_GPIO_Port, btn_right_Pin))
 80003e8:	2180      	movs	r1, #128	; 0x80
 80003ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ee:	f002 fd25 	bl	8002e3c <HAL_GPIO_ReadPin>
			  {
//				  HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
			  }
			  btn_right_flag = 0;
 80003f2:	4b71      	ldr	r3, [pc, #452]	; (80005b8 <main+0x344>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	701a      	strb	r2, [r3, #0]
 80003f8:	e025      	b.n	8000446 <main+0x1d2>
		  }
	  }
	  else if(btn_mid_flag)
 80003fa:	4b70      	ldr	r3, [pc, #448]	; (80005bc <main+0x348>)
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d021      	beq.n	8000446 <main+0x1d2>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 8000402:	f001 f84b 	bl	800149c <HAL_GetTick>
 8000406:	4602      	mov	r2, r0
 8000408:	4b67      	ldr	r3, [pc, #412]	; (80005a8 <main+0x334>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	1ad3      	subs	r3, r2, r3
 800040e:	2b36      	cmp	r3, #54	; 0x36
 8000410:	d919      	bls.n	8000446 <main+0x1d2>
		  {
			  if(HAL_GPIO_ReadPin(btn_mid_GPIO_Port, btn_mid_Pin))
 8000412:	2140      	movs	r1, #64	; 0x40
 8000414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000418:	f002 fd10 	bl	8002e3c <HAL_GPIO_ReadPin>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d00e      	beq.n	8000440 <main+0x1cc>
			  {
				  // Toggle Menu Display state
				  if(display_state == 0){
 8000422:	4b5e      	ldr	r3, [pc, #376]	; (800059c <main+0x328>)
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d103      	bne.n	8000432 <main+0x1be>
					  changeDisplayState(1);
 800042a:	2001      	movs	r0, #1
 800042c:	f000 fb1c 	bl	8000a68 <changeDisplayState>
 8000430:	e006      	b.n	8000440 <main+0x1cc>
				  } else if(display_state == 1){
 8000432:	4b5a      	ldr	r3, [pc, #360]	; (800059c <main+0x328>)
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	2b01      	cmp	r3, #1
 8000438:	d102      	bne.n	8000440 <main+0x1cc>
					  changeDisplayState(0);
 800043a:	2000      	movs	r0, #0
 800043c:	f000 fb14 	bl	8000a68 <changeDisplayState>
				  }
//				  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
			  }
			  btn_mid_flag = 0;
 8000440:	4b5e      	ldr	r3, [pc, #376]	; (80005bc <main+0x348>)
 8000442:	2200      	movs	r2, #0
 8000444:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  // ADC TIM16 interrupt
	  if(adc_timer_flag)
 8000446:	4b5e      	ldr	r3, [pc, #376]	; (80005c0 <main+0x34c>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	2b00      	cmp	r3, #0
 800044c:	f43f af42 	beq.w	80002d4 <main+0x60>
	  {
		  if(adc_count > 999)
 8000450:	f8b7 37fe 	ldrh.w	r3, [r7, #2046]	; 0x7fe
 8000454:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000458:	f0c0 80bc 	bcc.w	80005d4 <main+0x360>
		  {
			  // Do calculations every 1000 readings
			  adc_count = 0;
 800045c:	2300      	movs	r3, #0
 800045e:	f8a7 37fe 	strh.w	r3, [r7, #2046]	; 0x7fe
			  uint32_t total = 0;
 8000462:	2300      	movs	r3, #0
 8000464:	f8c7 37f8 	str.w	r3, [r7, #2040]	; 0x7f8
			  uint16_t max = 0;
 8000468:	2300      	movs	r3, #0
 800046a:	f8a7 37f6 	strh.w	r3, [r7, #2038]	; 0x7f6
			  uint16_t min = adc_array[99]; // arbitrary value
 800046e:	f107 0310 	add.w	r3, r7, #16
 8000472:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8000476:	f8a7 37f4 	strh.w	r3, [r7, #2036]	; 0x7f4
			  int16_t diff = 0;
 800047a:	2300      	movs	r3, #0
 800047c:	f8a7 37e2 	strh.w	r3, [r7, #2018]	; 0x7e2
			  int16_t prev_diff = 0;
 8000480:	2300      	movs	r3, #0
 8000482:	f8a7 37f2 	strh.w	r3, [r7, #2034]	; 0x7f2
			  uint16_t mid_passes = 0;
 8000486:	2300      	movs	r3, #0
 8000488:	f8a7 37f0 	strh.w	r3, [r7, #2032]	; 0x7f0
			  // 1000 measurements at 5kHz take 200ms
			  for(int x = 0; x < 1000; x++)
 800048c:	2300      	movs	r3, #0
 800048e:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
 8000492:	e035      	b.n	8000500 <main+0x28c>
			  {
				  total += adc_array[x];
 8000494:	f107 0310 	add.w	r3, r7, #16
 8000498:	f8d7 27ec 	ldr.w	r2, [r7, #2028]	; 0x7ec
 800049c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80004a0:	461a      	mov	r2, r3
 80004a2:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	; 0x7f8
 80004a6:	4413      	add	r3, r2
 80004a8:	f8c7 37f8 	str.w	r3, [r7, #2040]	; 0x7f8
				  if(adc_array[x] > max)
 80004ac:	f107 0310 	add.w	r3, r7, #16
 80004b0:	f8d7 27ec 	ldr.w	r2, [r7, #2028]	; 0x7ec
 80004b4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80004b8:	f8b7 27f6 	ldrh.w	r2, [r7, #2038]	; 0x7f6
 80004bc:	429a      	cmp	r2, r3
 80004be:	d208      	bcs.n	80004d2 <main+0x25e>
				  {
					  max = adc_array[x];
 80004c0:	f107 0310 	add.w	r3, r7, #16
 80004c4:	f8d7 27ec 	ldr.w	r2, [r7, #2028]	; 0x7ec
 80004c8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80004cc:	f8a7 37f6 	strh.w	r3, [r7, #2038]	; 0x7f6
 80004d0:	e011      	b.n	80004f6 <main+0x282>
				  }
				  else if(adc_array[x] < min)
 80004d2:	f107 0310 	add.w	r3, r7, #16
 80004d6:	f8d7 27ec 	ldr.w	r2, [r7, #2028]	; 0x7ec
 80004da:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80004de:	f8b7 27f4 	ldrh.w	r2, [r7, #2036]	; 0x7f4
 80004e2:	429a      	cmp	r2, r3
 80004e4:	d907      	bls.n	80004f6 <main+0x282>
				  {
					  min = adc_array[x];
 80004e6:	f107 0310 	add.w	r3, r7, #16
 80004ea:	f8d7 27ec 	ldr.w	r2, [r7, #2028]	; 0x7ec
 80004ee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80004f2:	f8a7 37f4 	strh.w	r3, [r7, #2036]	; 0x7f4
			  for(int x = 0; x < 1000; x++)
 80004f6:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 80004fa:	3301      	adds	r3, #1
 80004fc:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
 8000500:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 8000504:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000508:	dbc4      	blt.n	8000494 <main+0x220>
				  }
			  }
//			  measured_offset = total/1000;
			  measured_offset = 1000;
 800050a:	4b2e      	ldr	r3, [pc, #184]	; (80005c4 <main+0x350>)
 800050c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000510:	801a      	strh	r2, [r3, #0]
			  for(int x = 0; x < 1000; x++)
 8000512:	2300      	movs	r3, #0
 8000514:	f8c7 37e8 	str.w	r3, [r7, #2024]	; 0x7e8
 8000518:	e021      	b.n	800055e <main+0x2ea>
			  {
				  // Calculate frequency
				  diff = adc_array[x] - measured_offset;
 800051a:	f107 0310 	add.w	r3, r7, #16
 800051e:	f8d7 27e8 	ldr.w	r2, [r7, #2024]	; 0x7e8
 8000522:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000526:	4b27      	ldr	r3, [pc, #156]	; (80005c4 <main+0x350>)
 8000528:	881b      	ldrh	r3, [r3, #0]
 800052a:	1ad3      	subs	r3, r2, r3
 800052c:	b29b      	uxth	r3, r3
 800052e:	f8a7 37e2 	strh.w	r3, [r7, #2018]	; 0x7e2
				  if(diff > 0 && prev_diff < 0)
 8000532:	f9b7 37e2 	ldrsh.w	r3, [r7, #2018]	; 0x7e2
 8000536:	2b00      	cmp	r3, #0
 8000538:	dd08      	ble.n	800054c <main+0x2d8>
 800053a:	f9b7 37f2 	ldrsh.w	r3, [r7, #2034]	; 0x7f2
 800053e:	2b00      	cmp	r3, #0
 8000540:	da04      	bge.n	800054c <main+0x2d8>
				  {
					  mid_passes++;
 8000542:	f8b7 37f0 	ldrh.w	r3, [r7, #2032]	; 0x7f0
 8000546:	3301      	adds	r3, #1
 8000548:	f8a7 37f0 	strh.w	r3, [r7, #2032]	; 0x7f0
				  }
				  prev_diff = diff;
 800054c:	f8b7 37e2 	ldrh.w	r3, [r7, #2018]	; 0x7e2
 8000550:	f8a7 37f2 	strh.w	r3, [r7, #2034]	; 0x7f2
			  for(int x = 0; x < 1000; x++)
 8000554:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 8000558:	3301      	adds	r3, #1
 800055a:	f8c7 37e8 	str.w	r3, [r7, #2024]	; 0x7e8
 800055e:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 8000562:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000566:	dbd8      	blt.n	800051a <main+0x2a6>
			  }
			  measured_period = 50000/(mid_passes);
 8000568:	f8b7 37f0 	ldrh.w	r3, [r7, #2032]	; 0x7f0
 800056c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000570:	fb92 f3f3 	sdiv	r3, r2, r3
 8000574:	b29a      	uxth	r2, r3
 8000576:	4b14      	ldr	r3, [pc, #80]	; (80005c8 <main+0x354>)
 8000578:	801a      	strh	r2, [r3, #0]
//			  measured_frequency = 1000000/measured_period;
			  measured_frequency = 5250;
 800057a:	4b14      	ldr	r3, [pc, #80]	; (80005cc <main+0x358>)
 800057c:	f241 4282 	movw	r2, #5250	; 0x1482
 8000580:	801a      	strh	r2, [r3, #0]
//			  measured_amplitude = max - min;
			  measured_amplitude = 500;
 8000582:	4b13      	ldr	r3, [pc, #76]	; (80005d0 <main+0x35c>)
 8000584:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000588:	801a      	strh	r2, [r3, #0]
 800058a:	e061      	b.n	8000650 <main+0x3dc>
 800058c:	20000000 	.word	0x20000000
 8000590:	200000a8 	.word	0x200000a8
 8000594:	200000a4 	.word	0x200000a4
 8000598:	2000012c 	.word	0x2000012c
 800059c:	2000000e 	.word	0x2000000e
 80005a0:	20000038 	.word	0x20000038
 80005a4:	2000003b 	.word	0x2000003b
 80005a8:	20000040 	.word	0x20000040
 80005ac:	48000400 	.word	0x48000400
 80005b0:	2000003c 	.word	0x2000003c
 80005b4:	2000003d 	.word	0x2000003d
 80005b8:	2000003a 	.word	0x2000003a
 80005bc:	20000039 	.word	0x20000039
 80005c0:	2000003e 	.word	0x2000003e
 80005c4:	2000004a 	.word	0x2000004a
 80005c8:	20000048 	.word	0x20000048
 80005cc:	20000046 	.word	0x20000046
 80005d0:	20000044 	.word	0x20000044
//			  sprintf(msg, "Max: %u\nMin: %u\nOffset: %u\nFrequency: %u\nAmplitude: %u\n\n", max, min, offset, frequency, amplitude);
//			  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 10);
		  }
		  else
		  {
			  HAL_ADC_Start(&hadc1);
 80005d4:	4822      	ldr	r0, [pc, #136]	; (8000660 <main+0x3ec>)
 80005d6:	f001 f967 	bl	80018a8 <HAL_ADC_Start>
			  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005da:	f04f 31ff 	mov.w	r1, #4294967295
 80005de:	4820      	ldr	r0, [pc, #128]	; (8000660 <main+0x3ec>)
 80005e0:	f001 faae 	bl	8001b40 <HAL_ADC_PollForConversion>
			  raw = HAL_ADC_GetValue(&hadc1);
 80005e4:	481e      	ldr	r0, [pc, #120]	; (8000660 <main+0x3ec>)
 80005e6:	f001 fbad 	bl	8001d44 <HAL_ADC_GetValue>
 80005ea:	4603      	mov	r3, r0
 80005ec:	f8a7 37e6 	strh.w	r3, [r7, #2022]	; 0x7e6
			  HAL_ADC_Stop(&hadc1);
 80005f0:	481b      	ldr	r0, [pc, #108]	; (8000660 <main+0x3ec>)
 80005f2:	f001 fa6f 	bl	8001ad4 <HAL_ADC_Stop>
			  millivolts = raw*3300/4095;
 80005f6:	f8b7 37e6 	ldrh.w	r3, [r7, #2022]	; 0x7e6
 80005fa:	f640 42e4 	movw	r2, #3300	; 0xce4
 80005fe:	fb02 f303 	mul.w	r3, r2, r3
 8000602:	4a18      	ldr	r2, [pc, #96]	; (8000664 <main+0x3f0>)
 8000604:	fb82 1203 	smull	r1, r2, r2, r3
 8000608:	441a      	add	r2, r3
 800060a:	12d2      	asrs	r2, r2, #11
 800060c:	17db      	asrs	r3, r3, #31
 800060e:	1ad3      	subs	r3, r2, r3
 8000610:	f8a7 37e4 	strh.w	r3, [r7, #2020]	; 0x7e4
			  millivolts += 100*millivolts/1000; // Calibration
 8000614:	f8b7 37e4 	ldrh.w	r3, [r7, #2020]	; 0x7e4
 8000618:	2264      	movs	r2, #100	; 0x64
 800061a:	fb02 f303 	mul.w	r3, r2, r3
 800061e:	4a12      	ldr	r2, [pc, #72]	; (8000668 <main+0x3f4>)
 8000620:	fb82 1203 	smull	r1, r2, r2, r3
 8000624:	1192      	asrs	r2, r2, #6
 8000626:	17db      	asrs	r3, r3, #31
 8000628:	1ad3      	subs	r3, r2, r3
 800062a:	b29a      	uxth	r2, r3
 800062c:	f8b7 37e4 	ldrh.w	r3, [r7, #2020]	; 0x7e4
 8000630:	4413      	add	r3, r2
 8000632:	f8a7 37e4 	strh.w	r3, [r7, #2020]	; 0x7e4
			  adc_array[adc_count] = millivolts;
 8000636:	f8b7 27fe 	ldrh.w	r2, [r7, #2046]	; 0x7fe
 800063a:	f107 0310 	add.w	r3, r7, #16
 800063e:	f8b7 17e4 	ldrh.w	r1, [r7, #2020]	; 0x7e4
 8000642:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			  adc_count++;
 8000646:	f8b7 37fe 	ldrh.w	r3, [r7, #2046]	; 0x7fe
 800064a:	3301      	adds	r3, #1
 800064c:	f8a7 37fe 	strh.w	r3, [r7, #2046]	; 0x7fe
		  }

		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8000650:	2110      	movs	r1, #16
 8000652:	4806      	ldr	r0, [pc, #24]	; (800066c <main+0x3f8>)
 8000654:	f002 fc22 	bl	8002e9c <HAL_GPIO_TogglePin>
		  adc_timer_flag = 0;
 8000658:	4b05      	ldr	r3, [pc, #20]	; (8000670 <main+0x3fc>)
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
	  if(message_received && rx_byte[0] != '\n')
 800065e:	e639      	b.n	80002d4 <main+0x60>
 8000660:	20000054 	.word	0x20000054
 8000664:	80080081 	.word	0x80080081
 8000668:	10624dd3 	.word	0x10624dd3
 800066c:	48000800 	.word	0x48000800
 8000670:	2000003e 	.word	0x2000003e

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b0a6      	sub	sp, #152	; 0x98
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800067e:	2228      	movs	r2, #40	; 0x28
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f005 fd00 	bl	8006088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	2258      	movs	r2, #88	; 0x58
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f005 fcf2 	bl	8006088 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a4:	2302      	movs	r3, #2
 80006a6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ac:	2310      	movs	r3, #16
 80006ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b2:	2302      	movs	r3, #2
 80006b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006c0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006d2:	4618      	mov	r0, r3
 80006d4:	f002 fc14 	bl	8002f00 <HAL_RCC_OscConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80006de:	f000 fd0f 	bl	8001100 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e2:	230f      	movs	r3, #15
 80006e4:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e6:	2302      	movs	r3, #2
 80006e8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006f2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006fc:	2102      	movs	r1, #2
 80006fe:	4618      	mov	r0, r3
 8000700:	f003 fb14 	bl	8003d2c <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800070a:	f000 fcf9 	bl	8001100 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM16
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <SystemClock_Config+0xc8>)
 8000710:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000712:	2300      	movs	r3, #0
 8000714:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000716:	f44f 7380 	mov.w	r3, #256	; 0x100
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 800071c:	2300      	movs	r3, #0
 800071e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	4618      	mov	r0, r3
 8000724:	f003 fd38 	bl	8004198 <HAL_RCCEx_PeriphCLKConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800072e:	f000 fce7 	bl	8001100 <Error_Handler>
  }
}
 8000732:	bf00      	nop
 8000734:	3798      	adds	r7, #152	; 0x98
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	00800082 	.word	0x00800082

08000740 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	; 0x28
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
 8000760:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000762:	4b2e      	ldr	r3, [pc, #184]	; (800081c <MX_ADC1_Init+0xdc>)
 8000764:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000768:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800076a:	4b2c      	ldr	r3, [pc, #176]	; (800081c <MX_ADC1_Init+0xdc>)
 800076c:	2200      	movs	r2, #0
 800076e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000770:	4b2a      	ldr	r3, [pc, #168]	; (800081c <MX_ADC1_Init+0xdc>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000776:	4b29      	ldr	r3, [pc, #164]	; (800081c <MX_ADC1_Init+0xdc>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800077c:	4b27      	ldr	r3, [pc, #156]	; (800081c <MX_ADC1_Init+0xdc>)
 800077e:	2200      	movs	r2, #0
 8000780:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000782:	4b26      	ldr	r3, [pc, #152]	; (800081c <MX_ADC1_Init+0xdc>)
 8000784:	2200      	movs	r2, #0
 8000786:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800078a:	4b24      	ldr	r3, [pc, #144]	; (800081c <MX_ADC1_Init+0xdc>)
 800078c:	2200      	movs	r2, #0
 800078e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0xdc>)
 8000792:	2201      	movs	r2, #1
 8000794:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000796:	4b21      	ldr	r3, [pc, #132]	; (800081c <MX_ADC1_Init+0xdc>)
 8000798:	2200      	movs	r2, #0
 800079a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800079c:	4b1f      	ldr	r3, [pc, #124]	; (800081c <MX_ADC1_Init+0xdc>)
 800079e:	2201      	movs	r2, #1
 80007a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007a2:	4b1e      	ldr	r3, [pc, #120]	; (800081c <MX_ADC1_Init+0xdc>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007aa:	4b1c      	ldr	r3, [pc, #112]	; (800081c <MX_ADC1_Init+0xdc>)
 80007ac:	2204      	movs	r2, #4
 80007ae:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007b0:	4b1a      	ldr	r3, [pc, #104]	; (800081c <MX_ADC1_Init+0xdc>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80007b6:	4b19      	ldr	r3, [pc, #100]	; (800081c <MX_ADC1_Init+0xdc>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007bc:	4817      	ldr	r0, [pc, #92]	; (800081c <MX_ADC1_Init+0xdc>)
 80007be:	f000 fe79 	bl	80014b4 <HAL_ADC_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80007c8:	f000 fc9a 	bl	8001100 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007d0:	f107 031c 	add.w	r3, r7, #28
 80007d4:	4619      	mov	r1, r3
 80007d6:	4811      	ldr	r0, [pc, #68]	; (800081c <MX_ADC1_Init+0xdc>)
 80007d8:	f001 fdae 	bl	8002338 <HAL_ADCEx_MultiModeConfigChannel>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80007e2:	f000 fc8d 	bl	8001100 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007ea:	2301      	movs	r3, #1
 80007ec:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	4619      	mov	r1, r3
 8000802:	4806      	ldr	r0, [pc, #24]	; (800081c <MX_ADC1_Init+0xdc>)
 8000804:	f001 faac 	bl	8001d60 <HAL_ADC_ConfigChannel>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800080e:	f000 fc77 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	3728      	adds	r7, #40	; 0x28
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000054 	.word	0x20000054

08000820 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_TIM16_Init+0x44>)
 8000826:	4a10      	ldr	r2, [pc, #64]	; (8000868 <MX_TIM16_Init+0x48>)
 8000828:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 72-1;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_TIM16_Init+0x44>)
 800082c:	2247      	movs	r2, #71	; 0x47
 800082e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_TIM16_Init+0x44>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 50 - 1;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_TIM16_Init+0x44>)
 8000838:	2231      	movs	r2, #49	; 0x31
 800083a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_TIM16_Init+0x44>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_TIM16_Init+0x44>)
 8000844:	2200      	movs	r2, #0
 8000846:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_TIM16_Init+0x44>)
 800084a:	2200      	movs	r2, #0
 800084c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_TIM16_Init+0x44>)
 8000850:	f003 fec0 	bl	80045d4 <HAL_TIM_Base_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800085a:	f000 fc51 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	2000012c 	.word	0x2000012c
 8000868:	40014400 	.word	0x40014400

0800086c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000870:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_USART2_UART_Init+0x58>)
 8000872:	4a15      	ldr	r2, [pc, #84]	; (80008c8 <MX_USART2_UART_Init+0x5c>)
 8000874:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000876:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <MX_USART2_UART_Init+0x58>)
 8000878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800087c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_USART2_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_USART2_UART_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_USART2_UART_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_USART2_UART_Init+0x58>)
 8000892:	220c      	movs	r2, #12
 8000894:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <MX_USART2_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_USART2_UART_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <MX_USART2_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_USART2_UART_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_USART2_UART_Init+0x58>)
 80008b0:	f004 f95c 	bl	8004b6c <HAL_UART_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008ba:	f000 fc21 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200000a8 	.word	0x200000a8
 80008c8:	40004400 	.word	0x40004400

080008cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	; 0x28
 80008d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e2:	4b53      	ldr	r3, [pc, #332]	; (8000a30 <MX_GPIO_Init+0x164>)
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	4a52      	ldr	r2, [pc, #328]	; (8000a30 <MX_GPIO_Init+0x164>)
 80008e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008ec:	6153      	str	r3, [r2, #20]
 80008ee:	4b50      	ldr	r3, [pc, #320]	; (8000a30 <MX_GPIO_Init+0x164>)
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008fa:	4b4d      	ldr	r3, [pc, #308]	; (8000a30 <MX_GPIO_Init+0x164>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	4a4c      	ldr	r2, [pc, #304]	; (8000a30 <MX_GPIO_Init+0x164>)
 8000900:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000904:	6153      	str	r3, [r2, #20]
 8000906:	4b4a      	ldr	r3, [pc, #296]	; (8000a30 <MX_GPIO_Init+0x164>)
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b47      	ldr	r3, [pc, #284]	; (8000a30 <MX_GPIO_Init+0x164>)
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	4a46      	ldr	r2, [pc, #280]	; (8000a30 <MX_GPIO_Init+0x164>)
 8000918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800091c:	6153      	str	r3, [r2, #20]
 800091e:	4b44      	ldr	r3, [pc, #272]	; (8000a30 <MX_GPIO_Init+0x164>)
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	4b41      	ldr	r3, [pc, #260]	; (8000a30 <MX_GPIO_Init+0x164>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	4a40      	ldr	r2, [pc, #256]	; (8000a30 <MX_GPIO_Init+0x164>)
 8000930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000934:	6153      	str	r3, [r2, #20]
 8000936:	4b3e      	ldr	r3, [pc, #248]	; (8000a30 <MX_GPIO_Init+0x164>)
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD5_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8000948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094c:	f002 fa8e 	bl	8002e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|LD3_Pin, GPIO_PIN_RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	2190      	movs	r1, #144	; 0x90
 8000954:	4837      	ldr	r0, [pc, #220]	; (8000a34 <MX_GPIO_Init+0x168>)
 8000956:	f002 fa89 	bl	8002e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800095a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800095e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000960:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4619      	mov	r1, r3
 8000970:	4830      	ldr	r0, [pc, #192]	; (8000a34 <MX_GPIO_Init+0x168>)
 8000972:	f002 f8d9 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD5_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD5_Pin|LD4_Pin;
 8000976:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 800097a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097c:	2301      	movs	r3, #1
 800097e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4619      	mov	r1, r3
 800098e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000992:	f002 f8c9 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_mid_Pin */
  GPIO_InitStruct.Pin = btn_mid_Pin;
 8000996:	2340      	movs	r3, #64	; 0x40
 8000998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800099a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800099e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009a0:	2301      	movs	r3, #1
 80009a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn_mid_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4619      	mov	r1, r3
 80009aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ae:	f002 f8bb 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_right_Pin */
  GPIO_InitStruct.Pin = btn_right_Pin;
 80009b2:	2380      	movs	r3, #128	; 0x80
 80009b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009bc:	2301      	movs	r3, #1
 80009be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn_right_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4619      	mov	r1, r3
 80009c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ca:	f002 f8ad 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD3_Pin;
 80009ce:	2390      	movs	r3, #144	; 0x90
 80009d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d2:	2301      	movs	r3, #1
 80009d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4619      	mov	r1, r3
 80009e4:	4813      	ldr	r0, [pc, #76]	; (8000a34 <MX_GPIO_Init+0x168>)
 80009e6:	f002 f89f 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : btn_down_Pin btn_left_Pin btn_up_Pin */
  GPIO_InitStruct.Pin = btn_down_Pin|btn_left_Pin|btn_up_Pin;
 80009ea:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80009ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	4619      	mov	r1, r3
 8000a00:	480d      	ldr	r0, [pc, #52]	; (8000a38 <MX_GPIO_Init+0x16c>)
 8000a02:	f002 f891 	bl	8002b28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2100      	movs	r1, #0
 8000a0a:	2017      	movs	r0, #23
 8000a0c:	f001 ffdf 	bl	80029ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a10:	2017      	movs	r0, #23
 8000a12:	f001 fff8 	bl	8002a06 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2100      	movs	r1, #0
 8000a1a:	2028      	movs	r0, #40	; 0x28
 8000a1c:	f001 ffd7 	bl	80029ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a20:	2028      	movs	r0, #40	; 0x28
 8000a22:	f001 fff0 	bl	8002a06 <HAL_NVIC_EnableIRQ>

}
 8000a26:	bf00      	nop
 8000a28:	3728      	adds	r7, #40	; 0x28
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40021000 	.word	0x40021000
 8000a34:	48000800 	.word	0x48000800
 8000a38:	48000400 	.word	0x48000400

08000a3c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this interrupt
	if(htim == &htim16)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a06      	ldr	r2, [pc, #24]	; (8000a60 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d102      	bne.n	8000a52 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		adc_timer_flag = 1;
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	701a      	strb	r2, [r3, #0]
	}
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	2000012c 	.word	0x2000012c
 8000a64:	2000003e 	.word	0x2000003e

08000a68 <changeDisplayState>:

uint8_t changeDisplayState(uint8_t code)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
	if (code == 0)
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d11d      	bne.n	8000ab4 <changeDisplayState+0x4c>
	{
		// Change to Menu Display State
		display_state = 0;
 8000a78:	4b32      	ldr	r3, [pc, #200]	; (8000b44 <changeDisplayState+0xdc>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000a7e:	2201      	movs	r2, #1
 8000a80:	2120      	movs	r1, #32
 8000a82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a86:	f002 f9f1 	bl	8002e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2180      	movs	r1, #128	; 0x80
 8000a8e:	482e      	ldr	r0, [pc, #184]	; (8000b48 <changeDisplayState+0xe0>)
 8000a90:	f002 f9ec 	bl	8002e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9e:	f002 f9e5 	bl	8002e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aac:	f002 f9de 	bl	8002e6c <HAL_GPIO_WritePin>
		return 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	e042      	b.n	8000b3a <changeDisplayState+0xd2>
	}
	else if (code == 1)
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d11d      	bne.n	8000af6 <changeDisplayState+0x8e>
	{
		// Change to Measurement Display State
		display_state = 1;
 8000aba:	4b22      	ldr	r3, [pc, #136]	; (8000b44 <changeDisplayState+0xdc>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2120      	movs	r1, #32
 8000ac4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac8:	f002 f9d0 	bl	8002e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000acc:	2201      	movs	r2, #1
 8000ace:	2180      	movs	r1, #128	; 0x80
 8000ad0:	481d      	ldr	r0, [pc, #116]	; (8000b48 <changeDisplayState+0xe0>)
 8000ad2:	f002 f9cb 	bl	8002e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000adc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae0:	f002 f9c4 	bl	8002e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aee:	f002 f9bd 	bl	8002e6c <HAL_GPIO_WritePin>
		return 1;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e021      	b.n	8000b3a <changeDisplayState+0xd2>
	}
	else if (code == 2)
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d11d      	bne.n	8000b38 <changeDisplayState+0xd0>
	{
		// Change to Output Display State
		display_state = 2;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <changeDisplayState+0xdc>)
 8000afe:	2202      	movs	r2, #2
 8000b00:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2120      	movs	r1, #32
 8000b06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b0a:	f002 f9af 	bl	8002e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2180      	movs	r1, #128	; 0x80
 8000b12:	480d      	ldr	r0, [pc, #52]	; (8000b48 <changeDisplayState+0xe0>)
 8000b14:	f002 f9aa 	bl	8002e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b22:	f002 f9a3 	bl	8002e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b30:	f002 f99c 	bl	8002e6c <HAL_GPIO_WritePin>
		return 2;
 8000b34:	2302      	movs	r3, #2
 8000b36:	e000      	b.n	8000b3a <changeDisplayState+0xd2>
	}
	else
	{
		// An error has occurred
		return 3;
 8000b38:	2303      	movs	r3, #3
	}
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	2000000e 	.word	0x2000000e
 8000b48:	48000800 	.word	0x48000800

08000b4c <uartRxComplete>:

bool uartRxComplete(uint8_t last_byte)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
	if(last_byte == '!')
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	2b21      	cmp	r3, #33	; 0x21
 8000b5a:	d101      	bne.n	8000b60 <uartRxComplete+0x14>
	{
		return true;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	e000      	b.n	8000b62 <uartRxComplete+0x16>
	}
	else
	{
		return false;
 8000b60:	2300      	movs	r3, #0
	}
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
	...

08000b70 <interpret_rx_message>:

void interpret_rx_message(uint8_t *rx_array, uint8_t length)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	460b      	mov	r3, r1
 8000b7a:	70fb      	strb	r3, [r7, #3]

//	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);

	if(length > 7)
 8000b7c:	78fb      	ldrb	r3, [r7, #3]
 8000b7e:	2b07      	cmp	r3, #7
 8000b80:	d96f      	bls.n	8000c62 <interpret_rx_message+0xf2>
	{
		if(rx_array[2] == '*')
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	3302      	adds	r3, #2
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b2a      	cmp	r3, #42	; 0x2a
 8000b8a:	d122      	bne.n	8000bd2 <interpret_rx_message+0x62>
		{
			// Requests
//			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
			switch(rx_array[4])
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3304      	adds	r3, #4
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b6d      	cmp	r3, #109	; 0x6d
 8000b94:	d002      	beq.n	8000b9c <interpret_rx_message+0x2c>
 8000b96:	2b73      	cmp	r3, #115	; 0x73
 8000b98:	d007      	beq.n	8000baa <interpret_rx_message+0x3a>
					request_status();
					break;

				default:
					// Problems
					break;
 8000b9a:	e062      	b.n	8000c62 <interpret_rx_message+0xf2>
					request_measurement(rx_array[6]);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3306      	adds	r3, #6
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 f866 	bl	8000c74 <request_measurement>
					break;
 8000ba8:	e05b      	b.n	8000c62 <interpret_rx_message+0xf2>
					if(rx_array[6] == '0'){
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	3306      	adds	r3, #6
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b30      	cmp	r3, #48	; 0x30
 8000bb2:	d103      	bne.n	8000bbc <interpret_rx_message+0x4c>
						signal_active = 0;
 8000bb4:	4b2d      	ldr	r3, [pc, #180]	; (8000c6c <interpret_rx_message+0xfc>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
 8000bba:	e007      	b.n	8000bcc <interpret_rx_message+0x5c>
					} else if(rx_array[6] == '1'){
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3306      	adds	r3, #6
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2b31      	cmp	r3, #49	; 0x31
 8000bc4:	d102      	bne.n	8000bcc <interpret_rx_message+0x5c>
						signal_active = 1;
 8000bc6:	4b29      	ldr	r3, [pc, #164]	; (8000c6c <interpret_rx_message+0xfc>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	701a      	strb	r2, [r3, #0]
					request_status();
 8000bcc:	f000 f9a8 	bl	8000f20 <request_status>
					break;
 8000bd0:	e047      	b.n	8000c62 <interpret_rx_message+0xf2>
			}
		}
		else if(rx_array[2] == '$')
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	3302      	adds	r3, #2
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b24      	cmp	r3, #36	; 0x24
 8000bda:	d137      	bne.n	8000c4c <interpret_rx_message+0xdc>
		{
			// Set
			uint8_t key1 = rx_array[4];
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	791b      	ldrb	r3, [r3, #4]
 8000be0:	73fb      	strb	r3, [r7, #15]
			uint8_t key2 = rx_array[5];
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	795b      	ldrb	r3, [r3, #5]
 8000be6:	73bb      	strb	r3, [r7, #14]
			if(key1 == 'D' && key2 == 'V'){
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
 8000bea:	2b44      	cmp	r3, #68	; 0x44
 8000bec:	d106      	bne.n	8000bfc <interpret_rx_message+0x8c>
 8000bee:	7bbb      	ldrb	r3, [r7, #14]
 8000bf0:	2b56      	cmp	r3, #86	; 0x56
 8000bf2:	d103      	bne.n	8000bfc <interpret_rx_message+0x8c>
				// DC Voltage
				measurement_mode = 0;
 8000bf4:	4b1e      	ldr	r3, [pc, #120]	; (8000c70 <interpret_rx_message+0x100>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
 8000bfa:	e032      	b.n	8000c62 <interpret_rx_message+0xf2>
			} else if (key1 == 'A' && key2 == 'V'){
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
 8000bfe:	2b41      	cmp	r3, #65	; 0x41
 8000c00:	d106      	bne.n	8000c10 <interpret_rx_message+0xa0>
 8000c02:	7bbb      	ldrb	r3, [r7, #14]
 8000c04:	2b56      	cmp	r3, #86	; 0x56
 8000c06:	d103      	bne.n	8000c10 <interpret_rx_message+0xa0>
				// AC Voltage
				measurement_mode = 1;
 8000c08:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <interpret_rx_message+0x100>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	701a      	strb	r2, [r3, #0]
 8000c0e:	e028      	b.n	8000c62 <interpret_rx_message+0xf2>
			} else if (key1 == 'D' && key2 == 'I'){
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
 8000c12:	2b44      	cmp	r3, #68	; 0x44
 8000c14:	d106      	bne.n	8000c24 <interpret_rx_message+0xb4>
 8000c16:	7bbb      	ldrb	r3, [r7, #14]
 8000c18:	2b49      	cmp	r3, #73	; 0x49
 8000c1a:	d103      	bne.n	8000c24 <interpret_rx_message+0xb4>
				// DC Current
				measurement_mode = 2;
 8000c1c:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <interpret_rx_message+0x100>)
 8000c1e:	2202      	movs	r2, #2
 8000c20:	701a      	strb	r2, [r3, #0]
 8000c22:	e01e      	b.n	8000c62 <interpret_rx_message+0xf2>
			} else if (key1 == 'A' && key2 == 'I'){
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	2b41      	cmp	r3, #65	; 0x41
 8000c28:	d106      	bne.n	8000c38 <interpret_rx_message+0xc8>
 8000c2a:	7bbb      	ldrb	r3, [r7, #14]
 8000c2c:	2b49      	cmp	r3, #73	; 0x49
 8000c2e:	d103      	bne.n	8000c38 <interpret_rx_message+0xc8>
				// AC Current
				measurement_mode = 3;
 8000c30:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <interpret_rx_message+0x100>)
 8000c32:	2203      	movs	r2, #3
 8000c34:	701a      	strb	r2, [r3, #0]
 8000c36:	e014      	b.n	8000c62 <interpret_rx_message+0xf2>
			} else if (key1 == 'T' && key2 == 'C'){
 8000c38:	7bfb      	ldrb	r3, [r7, #15]
 8000c3a:	2b54      	cmp	r3, #84	; 0x54
 8000c3c:	d111      	bne.n	8000c62 <interpret_rx_message+0xf2>
 8000c3e:	7bbb      	ldrb	r3, [r7, #14]
 8000c40:	2b43      	cmp	r3, #67	; 0x43
 8000c42:	d10e      	bne.n	8000c62 <interpret_rx_message+0xf2>
				// Temperature
				measurement_mode = 4;
 8000c44:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <interpret_rx_message+0x100>)
 8000c46:	2204      	movs	r2, #4
 8000c48:	701a      	strb	r2, [r3, #0]
		else
		{
//			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
		}
	}
}
 8000c4a:	e00a      	b.n	8000c62 <interpret_rx_message+0xf2>
		}else if(rx_array[2] == '^'){
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3302      	adds	r3, #2
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b5e      	cmp	r3, #94	; 0x5e
 8000c54:	d105      	bne.n	8000c62 <interpret_rx_message+0xf2>
			set_output_parameter(rx_array, length);
 8000c56:	78fb      	ldrb	r3, [r7, #3]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f000 f9c2 	bl	8000fe4 <set_output_parameter>
}
 8000c60:	e7ff      	b.n	8000c62 <interpret_rx_message+0xf2>
 8000c62:	bf00      	nop
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	2000004d 	.word	0x2000004d
 8000c70:	2000004c 	.word	0x2000004c

08000c74 <request_measurement>:

void request_measurement(uint8_t parameter)
{
 8000c74:	b590      	push	{r4, r7, lr}
 8000c76:	b087      	sub	sp, #28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
	uint8_t msg[13] = "@,m,x,xxxx,!\n";
 8000c7e:	4b9f      	ldr	r3, [pc, #636]	; (8000efc <request_measurement+0x288>)
 8000c80:	f107 0408 	add.w	r4, r7, #8
 8000c84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c86:	c407      	stmia	r4!, {r0, r1, r2}
 8000c88:	7023      	strb	r3, [r4, #0]
	switch(parameter){
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	3b61      	subs	r3, #97	; 0x61
 8000c8e:	2b13      	cmp	r3, #19
 8000c90:	f200 8122 	bhi.w	8000ed8 <request_measurement+0x264>
 8000c94:	a201      	add	r2, pc, #4	; (adr r2, 8000c9c <request_measurement+0x28>)
 8000c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c9a:	bf00      	nop
 8000c9c:	08000ced 	.word	0x08000ced
 8000ca0:	08000ed9 	.word	0x08000ed9
 8000ca4:	08000ed9 	.word	0x08000ed9
 8000ca8:	08000ed9 	.word	0x08000ed9
 8000cac:	08000ed9 	.word	0x08000ed9
 8000cb0:	08000e35 	.word	0x08000e35
 8000cb4:	08000ed9 	.word	0x08000ed9
 8000cb8:	08000ed9 	.word	0x08000ed9
 8000cbc:	08000ed9 	.word	0x08000ed9
 8000cc0:	08000ed9 	.word	0x08000ed9
 8000cc4:	08000ed9 	.word	0x08000ed9
 8000cc8:	08000ed9 	.word	0x08000ed9
 8000ccc:	08000ed9 	.word	0x08000ed9
 8000cd0:	08000ed9 	.word	0x08000ed9
 8000cd4:	08000d91 	.word	0x08000d91
 8000cd8:	08000ed9 	.word	0x08000ed9
 8000cdc:	08000ed9 	.word	0x08000ed9
 8000ce0:	08000ed9 	.word	0x08000ed9
 8000ce4:	08000ed9 	.word	0x08000ed9
 8000ce8:	08000ed9 	.word	0x08000ed9
		case 't':
			// Type
			break;
		case 'a':
			// Amplitude (peak-to-peak)
			msg[4] = 'a';
 8000cec:	2361      	movs	r3, #97	; 0x61
 8000cee:	733b      	strb	r3, [r7, #12]
			msg[6] = ((measured_amplitude/1000) % 10) + 48;
 8000cf0:	4b83      	ldr	r3, [pc, #524]	; (8000f00 <request_measurement+0x28c>)
 8000cf2:	881b      	ldrh	r3, [r3, #0]
 8000cf4:	4a83      	ldr	r2, [pc, #524]	; (8000f04 <request_measurement+0x290>)
 8000cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cfa:	099b      	lsrs	r3, r3, #6
 8000cfc:	b29a      	uxth	r2, r3
 8000cfe:	4b82      	ldr	r3, [pc, #520]	; (8000f08 <request_measurement+0x294>)
 8000d00:	fba3 1302 	umull	r1, r3, r3, r2
 8000d04:	08d9      	lsrs	r1, r3, #3
 8000d06:	460b      	mov	r3, r1
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	440b      	add	r3, r1
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	3330      	adds	r3, #48	; 0x30
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	73bb      	strb	r3, [r7, #14]
			msg[7] = ((measured_amplitude/100) % 10) + 48;
 8000d1a:	4b79      	ldr	r3, [pc, #484]	; (8000f00 <request_measurement+0x28c>)
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	4a7b      	ldr	r2, [pc, #492]	; (8000f0c <request_measurement+0x298>)
 8000d20:	fba2 2303 	umull	r2, r3, r2, r3
 8000d24:	095b      	lsrs	r3, r3, #5
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	4b77      	ldr	r3, [pc, #476]	; (8000f08 <request_measurement+0x294>)
 8000d2a:	fba3 1302 	umull	r1, r3, r3, r2
 8000d2e:	08d9      	lsrs	r1, r3, #3
 8000d30:	460b      	mov	r3, r1
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	440b      	add	r3, r1
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	3330      	adds	r3, #48	; 0x30
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	73fb      	strb	r3, [r7, #15]
			msg[8] = ((measured_amplitude/10) % 10) + 48;
 8000d44:	4b6e      	ldr	r3, [pc, #440]	; (8000f00 <request_measurement+0x28c>)
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	4a6f      	ldr	r2, [pc, #444]	; (8000f08 <request_measurement+0x294>)
 8000d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4e:	08db      	lsrs	r3, r3, #3
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	4b6d      	ldr	r3, [pc, #436]	; (8000f08 <request_measurement+0x294>)
 8000d54:	fba3 1302 	umull	r1, r3, r3, r2
 8000d58:	08d9      	lsrs	r1, r3, #3
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	440b      	add	r3, r1
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	3330      	adds	r3, #48	; 0x30
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	743b      	strb	r3, [r7, #16]
			msg[9] = (measured_amplitude % 10) + 48;
 8000d6e:	4b64      	ldr	r3, [pc, #400]	; (8000f00 <request_measurement+0x28c>)
 8000d70:	881a      	ldrh	r2, [r3, #0]
 8000d72:	4b65      	ldr	r3, [pc, #404]	; (8000f08 <request_measurement+0x294>)
 8000d74:	fba3 1302 	umull	r1, r3, r3, r2
 8000d78:	08d9      	lsrs	r1, r3, #3
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	440b      	add	r3, r1
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	1ad3      	subs	r3, r2, r3
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	3330      	adds	r3, #48	; 0x30
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	747b      	strb	r3, [r7, #17]
			break;
 8000d8e:	e0a4      	b.n	8000eda <request_measurement+0x266>
		case 'o':
			// Offset
			msg[4] = 'o';
 8000d90:	236f      	movs	r3, #111	; 0x6f
 8000d92:	733b      	strb	r3, [r7, #12]
			msg[6] = ((measured_offset/1000) % 10) + 48;
 8000d94:	4b5e      	ldr	r3, [pc, #376]	; (8000f10 <request_measurement+0x29c>)
 8000d96:	881b      	ldrh	r3, [r3, #0]
 8000d98:	4a5a      	ldr	r2, [pc, #360]	; (8000f04 <request_measurement+0x290>)
 8000d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9e:	099b      	lsrs	r3, r3, #6
 8000da0:	b29a      	uxth	r2, r3
 8000da2:	4b59      	ldr	r3, [pc, #356]	; (8000f08 <request_measurement+0x294>)
 8000da4:	fba3 1302 	umull	r1, r3, r3, r2
 8000da8:	08d9      	lsrs	r1, r3, #3
 8000daa:	460b      	mov	r3, r1
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	440b      	add	r3, r1
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	3330      	adds	r3, #48	; 0x30
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	73bb      	strb	r3, [r7, #14]
			msg[7] = ((measured_offset/100) % 10) + 48;
 8000dbe:	4b54      	ldr	r3, [pc, #336]	; (8000f10 <request_measurement+0x29c>)
 8000dc0:	881b      	ldrh	r3, [r3, #0]
 8000dc2:	4a52      	ldr	r2, [pc, #328]	; (8000f0c <request_measurement+0x298>)
 8000dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc8:	095b      	lsrs	r3, r3, #5
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	4b4e      	ldr	r3, [pc, #312]	; (8000f08 <request_measurement+0x294>)
 8000dce:	fba3 1302 	umull	r1, r3, r3, r2
 8000dd2:	08d9      	lsrs	r1, r3, #3
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	440b      	add	r3, r1
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	3330      	adds	r3, #48	; 0x30
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	73fb      	strb	r3, [r7, #15]
			msg[8] = ((measured_offset/10) % 10) + 48;
 8000de8:	4b49      	ldr	r3, [pc, #292]	; (8000f10 <request_measurement+0x29c>)
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	4a46      	ldr	r2, [pc, #280]	; (8000f08 <request_measurement+0x294>)
 8000dee:	fba2 2303 	umull	r2, r3, r2, r3
 8000df2:	08db      	lsrs	r3, r3, #3
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	4b44      	ldr	r3, [pc, #272]	; (8000f08 <request_measurement+0x294>)
 8000df8:	fba3 1302 	umull	r1, r3, r3, r2
 8000dfc:	08d9      	lsrs	r1, r3, #3
 8000dfe:	460b      	mov	r3, r1
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	440b      	add	r3, r1
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	3330      	adds	r3, #48	; 0x30
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	743b      	strb	r3, [r7, #16]
			msg[9] = (measured_offset % 10) + 48;
 8000e12:	4b3f      	ldr	r3, [pc, #252]	; (8000f10 <request_measurement+0x29c>)
 8000e14:	881a      	ldrh	r2, [r3, #0]
 8000e16:	4b3c      	ldr	r3, [pc, #240]	; (8000f08 <request_measurement+0x294>)
 8000e18:	fba3 1302 	umull	r1, r3, r3, r2
 8000e1c:	08d9      	lsrs	r1, r3, #3
 8000e1e:	460b      	mov	r3, r1
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	440b      	add	r3, r1
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	3330      	adds	r3, #48	; 0x30
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	747b      	strb	r3, [r7, #17]
			break;
 8000e32:	e052      	b.n	8000eda <request_measurement+0x266>
		case 'f':
			// Frequency
			msg[4] = 'f';
 8000e34:	2366      	movs	r3, #102	; 0x66
 8000e36:	733b      	strb	r3, [r7, #12]
			msg[6] = ((measured_frequency/1000) % 10) + 48;
 8000e38:	4b36      	ldr	r3, [pc, #216]	; (8000f14 <request_measurement+0x2a0>)
 8000e3a:	881b      	ldrh	r3, [r3, #0]
 8000e3c:	4a31      	ldr	r2, [pc, #196]	; (8000f04 <request_measurement+0x290>)
 8000e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e42:	099b      	lsrs	r3, r3, #6
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	4b30      	ldr	r3, [pc, #192]	; (8000f08 <request_measurement+0x294>)
 8000e48:	fba3 1302 	umull	r1, r3, r3, r2
 8000e4c:	08d9      	lsrs	r1, r3, #3
 8000e4e:	460b      	mov	r3, r1
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	440b      	add	r3, r1
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	3330      	adds	r3, #48	; 0x30
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	73bb      	strb	r3, [r7, #14]
			msg[7] = ((measured_frequency/100) % 10) + 48;
 8000e62:	4b2c      	ldr	r3, [pc, #176]	; (8000f14 <request_measurement+0x2a0>)
 8000e64:	881b      	ldrh	r3, [r3, #0]
 8000e66:	4a29      	ldr	r2, [pc, #164]	; (8000f0c <request_measurement+0x298>)
 8000e68:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6c:	095b      	lsrs	r3, r3, #5
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	4b25      	ldr	r3, [pc, #148]	; (8000f08 <request_measurement+0x294>)
 8000e72:	fba3 1302 	umull	r1, r3, r3, r2
 8000e76:	08d9      	lsrs	r1, r3, #3
 8000e78:	460b      	mov	r3, r1
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	440b      	add	r3, r1
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	3330      	adds	r3, #48	; 0x30
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	73fb      	strb	r3, [r7, #15]
			msg[8] = ((measured_frequency/10) % 10) + 48;
 8000e8c:	4b21      	ldr	r3, [pc, #132]	; (8000f14 <request_measurement+0x2a0>)
 8000e8e:	881b      	ldrh	r3, [r3, #0]
 8000e90:	4a1d      	ldr	r2, [pc, #116]	; (8000f08 <request_measurement+0x294>)
 8000e92:	fba2 2303 	umull	r2, r3, r2, r3
 8000e96:	08db      	lsrs	r3, r3, #3
 8000e98:	b29a      	uxth	r2, r3
 8000e9a:	4b1b      	ldr	r3, [pc, #108]	; (8000f08 <request_measurement+0x294>)
 8000e9c:	fba3 1302 	umull	r1, r3, r3, r2
 8000ea0:	08d9      	lsrs	r1, r3, #3
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	440b      	add	r3, r1
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	3330      	adds	r3, #48	; 0x30
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	743b      	strb	r3, [r7, #16]
			msg[9] = (measured_frequency % 10) + 48;
 8000eb6:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <request_measurement+0x2a0>)
 8000eb8:	881a      	ldrh	r2, [r3, #0]
 8000eba:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <request_measurement+0x294>)
 8000ebc:	fba3 1302 	umull	r1, r3, r3, r2
 8000ec0:	08d9      	lsrs	r1, r3, #3
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	440b      	add	r3, r1
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	3330      	adds	r3, #48	; 0x30
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	747b      	strb	r3, [r7, #17]
			break;
 8000ed6:	e000      	b.n	8000eda <request_measurement+0x266>
		case 'c':
			// Temperature
			break;
		default:
			// Problems
			break;
 8000ed8:	bf00      	nop
	}
	HAL_UART_Transmit(&huart2, msg, 13, 10);
 8000eda:	f107 0108 	add.w	r1, r7, #8
 8000ede:	230a      	movs	r3, #10
 8000ee0:	220d      	movs	r2, #13
 8000ee2:	480d      	ldr	r0, [pc, #52]	; (8000f18 <request_measurement+0x2a4>)
 8000ee4:	f003 fe90 	bl	8004c08 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	490c      	ldr	r1, [pc, #48]	; (8000f1c <request_measurement+0x2a8>)
 8000eec:	480a      	ldr	r0, [pc, #40]	; (8000f18 <request_measurement+0x2a4>)
 8000eee:	f003 ff1f 	bl	8004d30 <HAL_UART_Receive_IT>
}
 8000ef2:	bf00      	nop
 8000ef4:	371c      	adds	r7, #28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd90      	pop	{r4, r7, pc}
 8000efa:	bf00      	nop
 8000efc:	080060b0 	.word	0x080060b0
 8000f00:	20000044 	.word	0x20000044
 8000f04:	10624dd3 	.word	0x10624dd3
 8000f08:	cccccccd 	.word	0xcccccccd
 8000f0c:	51eb851f 	.word	0x51eb851f
 8000f10:	2000004a 	.word	0x2000004a
 8000f14:	20000046 	.word	0x20000046
 8000f18:	200000a8 	.word	0x200000a8
 8000f1c:	200000a4 	.word	0x200000a4

08000f20 <request_status>:

void request_status()
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
	uint8_t msg[11] = "@,xx,x,x,!\n";
 8000f26:	4a29      	ldr	r2, [pc, #164]	; (8000fcc <request_status+0xac>)
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f2c:	c303      	stmia	r3!, {r0, r1}
 8000f2e:	801a      	strh	r2, [r3, #0]
 8000f30:	3302      	adds	r3, #2
 8000f32:	0c12      	lsrs	r2, r2, #16
 8000f34:	701a      	strb	r2, [r3, #0]
	switch(measurement_mode){
 8000f36:	4b26      	ldr	r3, [pc, #152]	; (8000fd0 <request_status+0xb0>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b04      	cmp	r3, #4
 8000f3c:	d825      	bhi.n	8000f8a <request_status+0x6a>
 8000f3e:	a201      	add	r2, pc, #4	; (adr r2, 8000f44 <request_status+0x24>)
 8000f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f44:	08000f59 	.word	0x08000f59
 8000f48:	08000f63 	.word	0x08000f63
 8000f4c:	08000f6d 	.word	0x08000f6d
 8000f50:	08000f77 	.word	0x08000f77
 8000f54:	08000f81 	.word	0x08000f81
		case 0:
			// DV
			msg[2] = 'D';
 8000f58:	2344      	movs	r3, #68	; 0x44
 8000f5a:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'V';
 8000f5c:	2356      	movs	r3, #86	; 0x56
 8000f5e:	71fb      	strb	r3, [r7, #7]
			break;
 8000f60:	e014      	b.n	8000f8c <request_status+0x6c>
		case 1:
			// AV
			msg[2] = 'A';
 8000f62:	2341      	movs	r3, #65	; 0x41
 8000f64:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'V';
 8000f66:	2356      	movs	r3, #86	; 0x56
 8000f68:	71fb      	strb	r3, [r7, #7]
			break;
 8000f6a:	e00f      	b.n	8000f8c <request_status+0x6c>
		case 2:
			// DI
			msg[2] = 'D';
 8000f6c:	2344      	movs	r3, #68	; 0x44
 8000f6e:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'I';
 8000f70:	2349      	movs	r3, #73	; 0x49
 8000f72:	71fb      	strb	r3, [r7, #7]
			break;
 8000f74:	e00a      	b.n	8000f8c <request_status+0x6c>
		case 3:
			// AI
			msg[2] = 'A';
 8000f76:	2341      	movs	r3, #65	; 0x41
 8000f78:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'I';
 8000f7a:	2349      	movs	r3, #73	; 0x49
 8000f7c:	71fb      	strb	r3, [r7, #7]
			break;
 8000f7e:	e005      	b.n	8000f8c <request_status+0x6c>
		case 4:
			// TC
			msg[2] = 'T';
 8000f80:	2354      	movs	r3, #84	; 0x54
 8000f82:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'C';
 8000f84:	2343      	movs	r3, #67	; 0x43
 8000f86:	71fb      	strb	r3, [r7, #7]
			break;
 8000f88:	e000      	b.n	8000f8c <request_status+0x6c>
		default:
			// Problems
			break;
 8000f8a:	bf00      	nop
	}
	msg[5] = signal_type;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <request_status+0xb4>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	727b      	strb	r3, [r7, #9]
	switch(signal_active){
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <request_status+0xb8>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d002      	beq.n	8000fa0 <request_status+0x80>
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d003      	beq.n	8000fa6 <request_status+0x86>
			// Output on
			msg[7] = '1';
			break;
		default:
			// Problems
			break;
 8000f9e:	e005      	b.n	8000fac <request_status+0x8c>
			msg[7] = '0';
 8000fa0:	2330      	movs	r3, #48	; 0x30
 8000fa2:	72fb      	strb	r3, [r7, #11]
			break;
 8000fa4:	e002      	b.n	8000fac <request_status+0x8c>
			msg[7] = '1';
 8000fa6:	2331      	movs	r3, #49	; 0x31
 8000fa8:	72fb      	strb	r3, [r7, #11]
			break;
 8000faa:	bf00      	nop
	}
	HAL_UART_Transmit(&huart2, msg, 11, 10);
 8000fac:	1d39      	adds	r1, r7, #4
 8000fae:	230a      	movs	r3, #10
 8000fb0:	220b      	movs	r2, #11
 8000fb2:	480a      	ldr	r0, [pc, #40]	; (8000fdc <request_status+0xbc>)
 8000fb4:	f003 fe28 	bl	8004c08 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	4909      	ldr	r1, [pc, #36]	; (8000fe0 <request_status+0xc0>)
 8000fbc:	4807      	ldr	r0, [pc, #28]	; (8000fdc <request_status+0xbc>)
 8000fbe:	f003 feb7 	bl	8004d30 <HAL_UART_Receive_IT>

}
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	080060c0 	.word	0x080060c0
 8000fd0:	2000004c 	.word	0x2000004c
 8000fd4:	2000000d 	.word	0x2000000d
 8000fd8:	2000004d 	.word	0x2000004d
 8000fdc:	200000a8 	.word	0x200000a8
 8000fe0:	200000a4 	.word	0x200000a4

08000fe4 <set_output_parameter>:

void set_output_parameter(uint8_t *rx_array, uint8_t length)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	70fb      	strb	r3, [r7, #3]
	uint8_t param = rx_array[4];
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	791b      	ldrb	r3, [r3, #4]
 8000ff4:	73bb      	strb	r3, [r7, #14]
	uint8_t val0 = rx_array[6];
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	799b      	ldrb	r3, [r3, #6]
 8000ffa:	737b      	strb	r3, [r7, #13]
	uint8_t received_value = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	73fb      	strb	r3, [r7, #15]
	if(length > 9){
 8001000:	78fb      	ldrb	r3, [r7, #3]
 8001002:	2b09      	cmp	r3, #9
 8001004:	d92c      	bls.n	8001060 <set_output_parameter+0x7c>
		uint8_t val1 = rx_array[7];
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	79db      	ldrb	r3, [r3, #7]
 800100a:	733b      	strb	r3, [r7, #12]
		uint8_t val2 = rx_array[8];
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	7a1b      	ldrb	r3, [r3, #8]
 8001010:	72fb      	strb	r3, [r7, #11]
		uint8_t val3 = rx_array[9];
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	7a5b      	ldrb	r3, [r3, #9]
 8001016:	72bb      	strb	r3, [r7, #10]
		received_value += val0*1000;
 8001018:	7b7b      	ldrb	r3, [r7, #13]
 800101a:	461a      	mov	r2, r3
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	b2da      	uxtb	r2, r3
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	4413      	add	r3, r2
 8001028:	73fb      	strb	r3, [r7, #15]
		received_value += val1*100;
 800102a:	7b3b      	ldrb	r3, [r7, #12]
 800102c:	461a      	mov	r2, r3
 800102e:	0092      	lsls	r2, r2, #2
 8001030:	4413      	add	r3, r2
 8001032:	461a      	mov	r2, r3
 8001034:	0091      	lsls	r1, r2, #2
 8001036:	461a      	mov	r2, r3
 8001038:	460b      	mov	r3, r1
 800103a:	4413      	add	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	b2da      	uxtb	r2, r3
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	4413      	add	r3, r2
 8001044:	73fb      	strb	r3, [r7, #15]
		received_value += val2*10;
 8001046:	7afb      	ldrb	r3, [r7, #11]
 8001048:	461a      	mov	r2, r3
 800104a:	0092      	lsls	r2, r2, #2
 800104c:	4413      	add	r3, r2
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	b2da      	uxtb	r2, r3
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	4413      	add	r3, r2
 8001056:	73fb      	strb	r3, [r7, #15]
		received_value += val3;
 8001058:	7bfa      	ldrb	r2, [r7, #15]
 800105a:	7abb      	ldrb	r3, [r7, #10]
 800105c:	4413      	add	r3, r2
 800105e:	73fb      	strb	r3, [r7, #15]
	}
	switch(param){
 8001060:	7bbb      	ldrb	r3, [r7, #14]
 8001062:	3b61      	subs	r3, #97	; 0x61
 8001064:	2b13      	cmp	r3, #19
 8001066:	d83b      	bhi.n	80010e0 <set_output_parameter+0xfc>
 8001068:	a201      	add	r2, pc, #4	; (adr r2, 8001070 <set_output_parameter+0x8c>)
 800106a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800106e:	bf00      	nop
 8001070:	080010c9 	.word	0x080010c9
 8001074:	080010e1 	.word	0x080010e1
 8001078:	080010e1 	.word	0x080010e1
 800107c:	080010e1 	.word	0x080010e1
 8001080:	080010e1 	.word	0x080010e1
 8001084:	080010d9 	.word	0x080010d9
 8001088:	080010e1 	.word	0x080010e1
 800108c:	080010e1 	.word	0x080010e1
 8001090:	080010e1 	.word	0x080010e1
 8001094:	080010e1 	.word	0x080010e1
 8001098:	080010e1 	.word	0x080010e1
 800109c:	080010e1 	.word	0x080010e1
 80010a0:	080010e1 	.word	0x080010e1
 80010a4:	080010e1 	.word	0x080010e1
 80010a8:	080010d1 	.word	0x080010d1
 80010ac:	080010e1 	.word	0x080010e1
 80010b0:	080010e1 	.word	0x080010e1
 80010b4:	080010e1 	.word	0x080010e1
 80010b8:	080010e1 	.word	0x080010e1
 80010bc:	080010c1 	.word	0x080010c1
		case 't':
			// Type
			signal_type = val0;
 80010c0:	4a0b      	ldr	r2, [pc, #44]	; (80010f0 <set_output_parameter+0x10c>)
 80010c2:	7b7b      	ldrb	r3, [r7, #13]
 80010c4:	7013      	strb	r3, [r2, #0]
			break;
 80010c6:	e00c      	b.n	80010e2 <set_output_parameter+0xfe>
		case 'a':
			// Amplitude
			signal_amplitude = received_value;
 80010c8:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <set_output_parameter+0x110>)
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	7013      	strb	r3, [r2, #0]
			break;
 80010ce:	e008      	b.n	80010e2 <set_output_parameter+0xfe>
		case 'o':
			// Offset
			signal_offset = received_value;
 80010d0:	4a09      	ldr	r2, [pc, #36]	; (80010f8 <set_output_parameter+0x114>)
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	7013      	strb	r3, [r2, #0]
			break;
 80010d6:	e004      	b.n	80010e2 <set_output_parameter+0xfe>
		case 'f':
			// Frequency
			signal_frequency = received_value;
 80010d8:	4a08      	ldr	r2, [pc, #32]	; (80010fc <set_output_parameter+0x118>)
 80010da:	7bfb      	ldrb	r3, [r7, #15]
 80010dc:	7013      	strb	r3, [r2, #0]
			break;
 80010de:	e000      	b.n	80010e2 <set_output_parameter+0xfe>
		case 'c':
			// Temperature
			break;
		default:
			// Problems
			break;
 80010e0:	bf00      	nop
	}
}
 80010e2:	bf00      	nop
 80010e4:	3714      	adds	r7, #20
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	2000000d 	.word	0x2000000d
 80010f4:	2000004e 	.word	0x2000004e
 80010f8:	20000050 	.word	0x20000050
 80010fc:	2000004f 	.word	0x2000004f

08001100 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <HAL_MspInit+0x44>)
 8001118:	699b      	ldr	r3, [r3, #24]
 800111a:	4a0e      	ldr	r2, [pc, #56]	; (8001154 <HAL_MspInit+0x44>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6193      	str	r3, [r2, #24]
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <HAL_MspInit+0x44>)
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <HAL_MspInit+0x44>)
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	4a08      	ldr	r2, [pc, #32]	; (8001154 <HAL_MspInit+0x44>)
 8001134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001138:	61d3      	str	r3, [r2, #28]
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_MspInit+0x44>)
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001146:	2007      	movs	r0, #7
 8001148:	f001 fc36 	bl	80029b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40021000 	.word	0x40021000

08001158 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	; 0x28
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001178:	d124      	bne.n	80011c4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800117a:	4b14      	ldr	r3, [pc, #80]	; (80011cc <HAL_ADC_MspInit+0x74>)
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	4a13      	ldr	r2, [pc, #76]	; (80011cc <HAL_ADC_MspInit+0x74>)
 8001180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001184:	6153      	str	r3, [r2, #20]
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <HAL_ADC_MspInit+0x74>)
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <HAL_ADC_MspInit+0x74>)
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	4a0d      	ldr	r2, [pc, #52]	; (80011cc <HAL_ADC_MspInit+0x74>)
 8001198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800119c:	6153      	str	r3, [r2, #20]
 800119e:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <HAL_ADC_MspInit+0x74>)
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011aa:	2301      	movs	r3, #1
 80011ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ae:	2303      	movs	r3, #3
 80011b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	4619      	mov	r1, r3
 80011bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c0:	f001 fcb2 	bl	8002b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011c4:	bf00      	nop
 80011c6:	3728      	adds	r7, #40	; 0x28
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40021000 	.word	0x40021000

080011d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a0d      	ldr	r2, [pc, #52]	; (8001214 <HAL_TIM_Base_MspInit+0x44>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d113      	bne.n	800120a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80011e2:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <HAL_TIM_Base_MspInit+0x48>)
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	4a0c      	ldr	r2, [pc, #48]	; (8001218 <HAL_TIM_Base_MspInit+0x48>)
 80011e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ec:	6193      	str	r3, [r2, #24]
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <HAL_TIM_Base_MspInit+0x48>)
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	2019      	movs	r0, #25
 8001200:	f001 fbe5 	bl	80029ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001204:	2019      	movs	r0, #25
 8001206:	f001 fbfe 	bl	8002a06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40014400 	.word	0x40014400
 8001218:	40021000 	.word	0x40021000

0800121c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	; 0x28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a1b      	ldr	r2, [pc, #108]	; (80012a8 <HAL_UART_MspInit+0x8c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d130      	bne.n	80012a0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800123e:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <HAL_UART_MspInit+0x90>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	4a1a      	ldr	r2, [pc, #104]	; (80012ac <HAL_UART_MspInit+0x90>)
 8001244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001248:	61d3      	str	r3, [r2, #28]
 800124a:	4b18      	ldr	r3, [pc, #96]	; (80012ac <HAL_UART_MspInit+0x90>)
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	4b15      	ldr	r3, [pc, #84]	; (80012ac <HAL_UART_MspInit+0x90>)
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	4a14      	ldr	r2, [pc, #80]	; (80012ac <HAL_UART_MspInit+0x90>)
 800125c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001260:	6153      	str	r3, [r2, #20]
 8001262:	4b12      	ldr	r3, [pc, #72]	; (80012ac <HAL_UART_MspInit+0x90>)
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800126e:	230c      	movs	r3, #12
 8001270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	2302      	movs	r3, #2
 8001274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800127e:	2307      	movs	r3, #7
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4619      	mov	r1, r3
 8001288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800128c:	f001 fc4c 	bl	8002b28 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	2100      	movs	r1, #0
 8001294:	2026      	movs	r0, #38	; 0x26
 8001296:	f001 fb9a 	bl	80029ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800129a:	2026      	movs	r0, #38	; 0x26
 800129c:	f001 fbb3 	bl	8002a06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012a0:	bf00      	nop
 80012a2:	3728      	adds	r7, #40	; 0x28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40004400 	.word	0x40004400
 80012ac:	40021000 	.word	0x40021000

080012b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <HardFault_Handler+0x4>

080012c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <MemManage_Handler+0x4>

080012ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ce:	e7fe      	b.n	80012ce <BusFault_Handler+0x4>

080012d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <UsageFault_Handler+0x4>

080012d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001304:	f000 f8b6 	bl	8001474 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}

0800130c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001310:	2040      	movs	r0, #64	; 0x40
 8001312:	f001 fddd 	bl	8002ed0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001316:	2080      	movs	r0, #128	; 0x80
 8001318:	f001 fdda 	bl	8002ed0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800131c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001320:	f001 fdd6 	bl	8002ed0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001324:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001328:	f001 fdd2 	bl	8002ed0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}

08001330 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001336:	f003 fa15 	bl	8004764 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	2000012c 	.word	0x2000012c

08001344 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001348:	4802      	ldr	r0, [pc, #8]	; (8001354 <USART2_IRQHandler+0x10>)
 800134a:	f003 fd3f 	bl	8004dcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200000a8 	.word	0x200000a8

08001358 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800135c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001360:	f001 fdb6 	bl	8002ed0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001364:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001368:	f001 fdb2 	bl	8002ed0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}

08001370 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <SystemInit+0x20>)
 8001376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800137a:	4a05      	ldr	r2, [pc, #20]	; (8001390 <SystemInit+0x20>)
 800137c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001380:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001394:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013cc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001398:	480d      	ldr	r0, [pc, #52]	; (80013d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800139a:	490e      	ldr	r1, [pc, #56]	; (80013d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800139c:	4a0e      	ldr	r2, [pc, #56]	; (80013d8 <LoopForever+0xe>)
  movs r3, #0
 800139e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a0:	e002      	b.n	80013a8 <LoopCopyDataInit>

080013a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013a6:	3304      	adds	r3, #4

080013a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013ac:	d3f9      	bcc.n	80013a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ae:	4a0b      	ldr	r2, [pc, #44]	; (80013dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80013b0:	4c0b      	ldr	r4, [pc, #44]	; (80013e0 <LoopForever+0x16>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b4:	e001      	b.n	80013ba <LoopFillZerobss>

080013b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b8:	3204      	adds	r2, #4

080013ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013bc:	d3fb      	bcc.n	80013b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013be:	f7ff ffd7 	bl	8001370 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013c2:	f004 fe3d 	bl	8006040 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013c6:	f7fe ff55 	bl	8000274 <main>

080013ca <LoopForever>:

LoopForever:
    b LoopForever
 80013ca:	e7fe      	b.n	80013ca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013cc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80013d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80013d8:	0800610c 	.word	0x0800610c
  ldr r2, =_sbss
 80013dc:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80013e0:	2000017c 	.word	0x2000017c

080013e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013e4:	e7fe      	b.n	80013e4 <ADC1_2_IRQHandler>
	...

080013e8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <HAL_Init+0x28>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a07      	ldr	r2, [pc, #28]	; (8001410 <HAL_Init+0x28>)
 80013f2:	f043 0310 	orr.w	r3, r3, #16
 80013f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f8:	2003      	movs	r0, #3
 80013fa:	f001 fadd 	bl	80029b8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013fe:	2000      	movs	r0, #0
 8001400:	f000 f808 	bl	8001414 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001404:	f7ff fe84 	bl	8001110 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40022000 	.word	0x40022000

08001414 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <HAL_InitTick+0x54>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <HAL_InitTick+0x58>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	4619      	mov	r1, r3
 8001426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142a:	fbb3 f3f1 	udiv	r3, r3, r1
 800142e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001432:	4618      	mov	r0, r3
 8001434:	f001 faf5 	bl	8002a22 <HAL_SYSTICK_Config>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e00e      	b.n	8001460 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b0f      	cmp	r3, #15
 8001446:	d80a      	bhi.n	800145e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001448:	2200      	movs	r2, #0
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	f04f 30ff 	mov.w	r0, #4294967295
 8001450:	f001 fabd 	bl	80029ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001454:	4a06      	ldr	r2, [pc, #24]	; (8001470 <HAL_InitTick+0x5c>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800145a:	2300      	movs	r3, #0
 800145c:	e000      	b.n	8001460 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
}
 8001460:	4618      	mov	r0, r3
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000010 	.word	0x20000010
 800146c:	20000018 	.word	0x20000018
 8001470:	20000014 	.word	0x20000014

08001474 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <HAL_IncTick+0x20>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	461a      	mov	r2, r3
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_IncTick+0x24>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4413      	add	r3, r2
 8001484:	4a04      	ldr	r2, [pc, #16]	; (8001498 <HAL_IncTick+0x24>)
 8001486:	6013      	str	r3, [r2, #0]
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	20000018 	.word	0x20000018
 8001498:	20000178 	.word	0x20000178

0800149c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return uwTick;  
 80014a0:	4b03      	ldr	r3, [pc, #12]	; (80014b0 <HAL_GetTick+0x14>)
 80014a2:	681b      	ldr	r3, [r3, #0]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	20000178 	.word	0x20000178

080014b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b09a      	sub	sp, #104	; 0x68
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014bc:	2300      	movs	r3, #0
 80014be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d101      	bne.n	80014d4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e1e3      	b.n	800189c <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f003 0310 	and.w	r3, r3, #16
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d176      	bne.n	80015d4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d152      	bne.n	8001594 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff fe25 	bl	8001158 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d13b      	bne.n	8001594 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f001 f861 	bl	80025e4 <ADC_Disable>
 8001522:	4603      	mov	r3, r0
 8001524:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	f003 0310 	and.w	r3, r3, #16
 8001530:	2b00      	cmp	r3, #0
 8001532:	d12f      	bne.n	8001594 <HAL_ADC_Init+0xe0>
 8001534:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001538:	2b00      	cmp	r3, #0
 800153a:	d12b      	bne.n	8001594 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001544:	f023 0302 	bic.w	r3, r3, #2
 8001548:	f043 0202 	orr.w	r2, r3, #2
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	689a      	ldr	r2, [r3, #8]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800155e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800156e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001570:	4b92      	ldr	r3, [pc, #584]	; (80017bc <HAL_ADC_Init+0x308>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a92      	ldr	r2, [pc, #584]	; (80017c0 <HAL_ADC_Init+0x30c>)
 8001576:	fba2 2303 	umull	r2, r3, r2, r3
 800157a:	0c9a      	lsrs	r2, r3, #18
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001586:	e002      	b.n	800158e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	3b01      	subs	r3, #1
 800158c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1f9      	bne.n	8001588 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d007      	beq.n	80015b2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80015ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015b0:	d110      	bne.n	80015d4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	f023 0312 	bic.w	r3, r3, #18
 80015ba:	f043 0210 	orr.w	r2, r3, #16
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	f043 0201 	orr.w	r2, r3, #1
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	f003 0310 	and.w	r3, r3, #16
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f040 8150 	bne.w	8001882 <HAL_ADC_Init+0x3ce>
 80015e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f040 814b 	bne.w	8001882 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f040 8143 	bne.w	8001882 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001604:	f043 0202 	orr.w	r2, r3, #2
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001614:	d004      	beq.n	8001620 <HAL_ADC_Init+0x16c>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a6a      	ldr	r2, [pc, #424]	; (80017c4 <HAL_ADC_Init+0x310>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d101      	bne.n	8001624 <HAL_ADC_Init+0x170>
 8001620:	4b69      	ldr	r3, [pc, #420]	; (80017c8 <HAL_ADC_Init+0x314>)
 8001622:	e000      	b.n	8001626 <HAL_ADC_Init+0x172>
 8001624:	4b69      	ldr	r3, [pc, #420]	; (80017cc <HAL_ADC_Init+0x318>)
 8001626:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001630:	d102      	bne.n	8001638 <HAL_ADC_Init+0x184>
 8001632:	4b64      	ldr	r3, [pc, #400]	; (80017c4 <HAL_ADC_Init+0x310>)
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	e01a      	b.n	800166e <HAL_ADC_Init+0x1ba>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a61      	ldr	r2, [pc, #388]	; (80017c4 <HAL_ADC_Init+0x310>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d103      	bne.n	800164a <HAL_ADC_Init+0x196>
 8001642:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	e011      	b.n	800166e <HAL_ADC_Init+0x1ba>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a60      	ldr	r2, [pc, #384]	; (80017d0 <HAL_ADC_Init+0x31c>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d102      	bne.n	800165a <HAL_ADC_Init+0x1a6>
 8001654:	4b5f      	ldr	r3, [pc, #380]	; (80017d4 <HAL_ADC_Init+0x320>)
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	e009      	b.n	800166e <HAL_ADC_Init+0x1ba>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a5d      	ldr	r2, [pc, #372]	; (80017d4 <HAL_ADC_Init+0x320>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d102      	bne.n	800166a <HAL_ADC_Init+0x1b6>
 8001664:	4b5a      	ldr	r3, [pc, #360]	; (80017d0 <HAL_ADC_Init+0x31c>)
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	e001      	b.n	800166e <HAL_ADC_Init+0x1ba>
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f003 0303 	and.w	r3, r3, #3
 8001678:	2b01      	cmp	r3, #1
 800167a:	d108      	bne.n	800168e <HAL_ADC_Init+0x1da>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	2b01      	cmp	r3, #1
 8001688:	d101      	bne.n	800168e <HAL_ADC_Init+0x1da>
 800168a:	2301      	movs	r3, #1
 800168c:	e000      	b.n	8001690 <HAL_ADC_Init+0x1dc>
 800168e:	2300      	movs	r3, #0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d11c      	bne.n	80016ce <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001694:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001696:	2b00      	cmp	r3, #0
 8001698:	d010      	beq.n	80016bc <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 0303 	and.w	r3, r3, #3
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d107      	bne.n	80016b6 <HAL_ADC_Init+0x202>
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d101      	bne.n	80016b6 <HAL_ADC_Init+0x202>
 80016b2:	2301      	movs	r3, #1
 80016b4:	e000      	b.n	80016b8 <HAL_ADC_Init+0x204>
 80016b6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d108      	bne.n	80016ce <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80016bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	431a      	orrs	r2, r3
 80016ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016cc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	7e5b      	ldrb	r3, [r3, #25]
 80016d2:	035b      	lsls	r3, r3, #13
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016d8:	2a01      	cmp	r2, #1
 80016da:	d002      	beq.n	80016e2 <HAL_ADC_Init+0x22e>
 80016dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016e0:	e000      	b.n	80016e4 <HAL_ADC_Init+0x230>
 80016e2:	2200      	movs	r2, #0
 80016e4:	431a      	orrs	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	431a      	orrs	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016f4:	4313      	orrs	r3, r2
 80016f6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d11b      	bne.n	800173a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	7e5b      	ldrb	r3, [r3, #25]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d109      	bne.n	800171e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170e:	3b01      	subs	r3, #1
 8001710:	045a      	lsls	r2, r3, #17
 8001712:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001714:	4313      	orrs	r3, r2
 8001716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800171a:	663b      	str	r3, [r7, #96]	; 0x60
 800171c:	e00d      	b.n	800173a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001726:	f043 0220 	orr.w	r2, r3, #32
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	f043 0201 	orr.w	r2, r3, #1
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173e:	2b01      	cmp	r3, #1
 8001740:	d054      	beq.n	80017ec <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a22      	ldr	r2, [pc, #136]	; (80017d0 <HAL_ADC_Init+0x31c>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d004      	beq.n	8001756 <HAL_ADC_Init+0x2a2>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a20      	ldr	r2, [pc, #128]	; (80017d4 <HAL_ADC_Init+0x320>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d140      	bne.n	80017d8 <HAL_ADC_Init+0x324>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800175e:	d02a      	beq.n	80017b6 <HAL_ADC_Init+0x302>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001768:	d022      	beq.n	80017b0 <HAL_ADC_Init+0x2fc>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001772:	d01a      	beq.n	80017aa <HAL_ADC_Init+0x2f6>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001778:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 800177c:	d012      	beq.n	80017a4 <HAL_ADC_Init+0x2f0>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001782:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8001786:	d00a      	beq.n	800179e <HAL_ADC_Init+0x2ea>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178c:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8001790:	d002      	beq.n	8001798 <HAL_ADC_Init+0x2e4>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001796:	e023      	b.n	80017e0 <HAL_ADC_Init+0x32c>
 8001798:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800179c:	e020      	b.n	80017e0 <HAL_ADC_Init+0x32c>
 800179e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80017a2:	e01d      	b.n	80017e0 <HAL_ADC_Init+0x32c>
 80017a4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80017a8:	e01a      	b.n	80017e0 <HAL_ADC_Init+0x32c>
 80017aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ae:	e017      	b.n	80017e0 <HAL_ADC_Init+0x32c>
 80017b0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80017b4:	e014      	b.n	80017e0 <HAL_ADC_Init+0x32c>
 80017b6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80017ba:	e011      	b.n	80017e0 <HAL_ADC_Init+0x32c>
 80017bc:	20000010 	.word	0x20000010
 80017c0:	431bde83 	.word	0x431bde83
 80017c4:	50000100 	.word	0x50000100
 80017c8:	50000300 	.word	0x50000300
 80017cc:	50000700 	.word	0x50000700
 80017d0:	50000400 	.word	0x50000400
 80017d4:	50000500 	.word	0x50000500
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80017e4:	4313      	orrs	r3, r2
 80017e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017e8:	4313      	orrs	r3, r2
 80017ea:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d114      	bne.n	8001824 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	6812      	ldr	r2, [r2, #0]
 8001804:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001808:	f023 0302 	bic.w	r3, r3, #2
 800180c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	7e1b      	ldrb	r3, [r3, #24]
 8001812:	039a      	lsls	r2, r3, #14
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	4313      	orrs	r3, r2
 800181e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001820:	4313      	orrs	r3, r2
 8001822:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68da      	ldr	r2, [r3, #12]
 800182a:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <HAL_ADC_Init+0x3f0>)
 800182c:	4013      	ands	r3, r2
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	6812      	ldr	r2, [r2, #0]
 8001832:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001834:	430b      	orrs	r3, r1
 8001836:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d10c      	bne.n	800185a <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f023 010f 	bic.w	r1, r3, #15
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	1e5a      	subs	r2, r3, #1
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	430a      	orrs	r2, r1
 8001856:	631a      	str	r2, [r3, #48]	; 0x30
 8001858:	e007      	b.n	800186a <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 020f 	bic.w	r2, r2, #15
 8001868:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	f023 0303 	bic.w	r3, r3, #3
 8001878:	f043 0201 	orr.w	r2, r3, #1
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	641a      	str	r2, [r3, #64]	; 0x40
 8001880:	e00a      	b.n	8001898 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	f023 0312 	bic.w	r3, r3, #18
 800188a:	f043 0210 	orr.w	r2, r3, #16
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001892:	2301      	movs	r3, #1
 8001894:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001898:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800189c:	4618      	mov	r0, r3
 800189e:	3768      	adds	r7, #104	; 0x68
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	fff0c007 	.word	0xfff0c007

080018a8 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018b0:	2300      	movs	r3, #0
 80018b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 0304 	and.w	r3, r3, #4
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f040 80f9 	bne.w	8001ab6 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d101      	bne.n	80018d2 <HAL_ADC_Start+0x2a>
 80018ce:	2302      	movs	r3, #2
 80018d0:	e0f4      	b.n	8001abc <HAL_ADC_Start+0x214>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2201      	movs	r2, #1
 80018d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 fe1e 	bl	800251c <ADC_Enable>
 80018e0:	4603      	mov	r3, r0
 80018e2:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f040 80e0 	bne.w	8001aac <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018f4:	f023 0301 	bic.w	r3, r3, #1
 80018f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001908:	d004      	beq.n	8001914 <HAL_ADC_Start+0x6c>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a6d      	ldr	r2, [pc, #436]	; (8001ac4 <HAL_ADC_Start+0x21c>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d106      	bne.n	8001922 <HAL_ADC_Start+0x7a>
 8001914:	4b6c      	ldr	r3, [pc, #432]	; (8001ac8 <HAL_ADC_Start+0x220>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f003 031f 	and.w	r3, r3, #31
 800191c:	2b00      	cmp	r3, #0
 800191e:	d010      	beq.n	8001942 <HAL_ADC_Start+0x9a>
 8001920:	e005      	b.n	800192e <HAL_ADC_Start+0x86>
 8001922:	4b6a      	ldr	r3, [pc, #424]	; (8001acc <HAL_ADC_Start+0x224>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 031f 	and.w	r3, r3, #31
 800192a:	2b00      	cmp	r3, #0
 800192c:	d009      	beq.n	8001942 <HAL_ADC_Start+0x9a>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001936:	d004      	beq.n	8001942 <HAL_ADC_Start+0x9a>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a64      	ldr	r2, [pc, #400]	; (8001ad0 <HAL_ADC_Start+0x228>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d115      	bne.n	800196e <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d036      	beq.n	80019ca <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001960:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001964:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800196c:	e02d      	b.n	80019ca <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001982:	d004      	beq.n	800198e <HAL_ADC_Start+0xe6>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a4e      	ldr	r2, [pc, #312]	; (8001ac4 <HAL_ADC_Start+0x21c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d10a      	bne.n	80019a4 <HAL_ADC_Start+0xfc>
 800198e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001998:	2b00      	cmp	r3, #0
 800199a:	bf14      	ite	ne
 800199c:	2301      	movne	r3, #1
 800199e:	2300      	moveq	r3, #0
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	e008      	b.n	80019b6 <HAL_ADC_Start+0x10e>
 80019a4:	4b4a      	ldr	r3, [pc, #296]	; (8001ad0 <HAL_ADC_Start+0x228>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	bf14      	ite	ne
 80019b0:	2301      	movne	r3, #1
 80019b2:	2300      	moveq	r3, #0
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d007      	beq.n	80019ca <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019d6:	d106      	bne.n	80019e6 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019dc:	f023 0206 	bic.w	r2, r3, #6
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	645a      	str	r2, [r3, #68]	; 0x44
 80019e4:	e002      	b.n	80019ec <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	221c      	movs	r2, #28
 80019fa:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a04:	d004      	beq.n	8001a10 <HAL_ADC_Start+0x168>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a2e      	ldr	r2, [pc, #184]	; (8001ac4 <HAL_ADC_Start+0x21c>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d106      	bne.n	8001a1e <HAL_ADC_Start+0x176>
 8001a10:	4b2d      	ldr	r3, [pc, #180]	; (8001ac8 <HAL_ADC_Start+0x220>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 031f 	and.w	r3, r3, #31
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d03e      	beq.n	8001a9a <HAL_ADC_Start+0x1f2>
 8001a1c:	e005      	b.n	8001a2a <HAL_ADC_Start+0x182>
 8001a1e:	4b2b      	ldr	r3, [pc, #172]	; (8001acc <HAL_ADC_Start+0x224>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 031f 	and.w	r3, r3, #31
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d037      	beq.n	8001a9a <HAL_ADC_Start+0x1f2>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a32:	d004      	beq.n	8001a3e <HAL_ADC_Start+0x196>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a22      	ldr	r2, [pc, #136]	; (8001ac4 <HAL_ADC_Start+0x21c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d106      	bne.n	8001a4c <HAL_ADC_Start+0x1a4>
 8001a3e:	4b22      	ldr	r3, [pc, #136]	; (8001ac8 <HAL_ADC_Start+0x220>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 031f 	and.w	r3, r3, #31
 8001a46:	2b05      	cmp	r3, #5
 8001a48:	d027      	beq.n	8001a9a <HAL_ADC_Start+0x1f2>
 8001a4a:	e005      	b.n	8001a58 <HAL_ADC_Start+0x1b0>
 8001a4c:	4b1f      	ldr	r3, [pc, #124]	; (8001acc <HAL_ADC_Start+0x224>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 031f 	and.w	r3, r3, #31
 8001a54:	2b05      	cmp	r3, #5
 8001a56:	d020      	beq.n	8001a9a <HAL_ADC_Start+0x1f2>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a60:	d004      	beq.n	8001a6c <HAL_ADC_Start+0x1c4>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a17      	ldr	r2, [pc, #92]	; (8001ac4 <HAL_ADC_Start+0x21c>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d106      	bne.n	8001a7a <HAL_ADC_Start+0x1d2>
 8001a6c:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <HAL_ADC_Start+0x220>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 031f 	and.w	r3, r3, #31
 8001a74:	2b09      	cmp	r3, #9
 8001a76:	d010      	beq.n	8001a9a <HAL_ADC_Start+0x1f2>
 8001a78:	e005      	b.n	8001a86 <HAL_ADC_Start+0x1de>
 8001a7a:	4b14      	ldr	r3, [pc, #80]	; (8001acc <HAL_ADC_Start+0x224>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 031f 	and.w	r3, r3, #31
 8001a82:	2b09      	cmp	r3, #9
 8001a84:	d009      	beq.n	8001a9a <HAL_ADC_Start+0x1f2>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a8e:	d004      	beq.n	8001a9a <HAL_ADC_Start+0x1f2>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a0e      	ldr	r2, [pc, #56]	; (8001ad0 <HAL_ADC_Start+0x228>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d10f      	bne.n	8001aba <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f042 0204 	orr.w	r2, r2, #4
 8001aa8:	609a      	str	r2, [r3, #8]
 8001aaa:	e006      	b.n	8001aba <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001ab4:	e001      	b.n	8001aba <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	50000100 	.word	0x50000100
 8001ac8:	50000300 	.word	0x50000300
 8001acc:	50000700 	.word	0x50000700
 8001ad0:	50000400 	.word	0x50000400

08001ad4 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001adc:	2300      	movs	r3, #0
 8001ade:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d101      	bne.n	8001aee <HAL_ADC_Stop+0x1a>
 8001aea:	2302      	movs	r3, #2
 8001aec:	e023      	b.n	8001b36 <HAL_ADC_Stop+0x62>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001af6:	216c      	movs	r1, #108	; 0x6c
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 fdd9 	bl	80026b0 <ADC_ConversionStop>
 8001afe:	4603      	mov	r3, r0
 8001b00:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d111      	bne.n	8001b2c <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 fd6b 	bl	80025e4 <ADC_Disable>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d109      	bne.n	8001b2c <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b20:	f023 0301 	bic.w	r3, r3, #1
 8001b24:	f043 0201 	orr.w	r2, r3, #1
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	2b08      	cmp	r3, #8
 8001b54:	d102      	bne.n	8001b5c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001b56:	2308      	movs	r3, #8
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	e03a      	b.n	8001bd2 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b64:	d004      	beq.n	8001b70 <HAL_ADC_PollForConversion+0x30>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a72      	ldr	r2, [pc, #456]	; (8001d34 <HAL_ADC_PollForConversion+0x1f4>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d101      	bne.n	8001b74 <HAL_ADC_PollForConversion+0x34>
 8001b70:	4b71      	ldr	r3, [pc, #452]	; (8001d38 <HAL_ADC_PollForConversion+0x1f8>)
 8001b72:	e000      	b.n	8001b76 <HAL_ADC_PollForConversion+0x36>
 8001b74:	4b71      	ldr	r3, [pc, #452]	; (8001d3c <HAL_ADC_PollForConversion+0x1fc>)
 8001b76:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 031f 	and.w	r3, r3, #31
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d112      	bne.n	8001baa <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d11d      	bne.n	8001bce <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	f043 0220 	orr.w	r2, r3, #32
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e0bf      	b.n	8001d2a <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00b      	beq.n	8001bce <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	f043 0220 	orr.w	r2, r3, #32
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e0ad      	b.n	8001d2a <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001bce:	230c      	movs	r3, #12
 8001bd0:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bda:	d004      	beq.n	8001be6 <HAL_ADC_PollForConversion+0xa6>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a54      	ldr	r2, [pc, #336]	; (8001d34 <HAL_ADC_PollForConversion+0x1f4>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d106      	bne.n	8001bf4 <HAL_ADC_PollForConversion+0xb4>
 8001be6:	4b54      	ldr	r3, [pc, #336]	; (8001d38 <HAL_ADC_PollForConversion+0x1f8>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 031f 	and.w	r3, r3, #31
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d010      	beq.n	8001c14 <HAL_ADC_PollForConversion+0xd4>
 8001bf2:	e005      	b.n	8001c00 <HAL_ADC_PollForConversion+0xc0>
 8001bf4:	4b51      	ldr	r3, [pc, #324]	; (8001d3c <HAL_ADC_PollForConversion+0x1fc>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 031f 	and.w	r3, r3, #31
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d009      	beq.n	8001c14 <HAL_ADC_PollForConversion+0xd4>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c08:	d004      	beq.n	8001c14 <HAL_ADC_PollForConversion+0xd4>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a4c      	ldr	r2, [pc, #304]	; (8001d40 <HAL_ADC_PollForConversion+0x200>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d104      	bne.n	8001c1e <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	e00f      	b.n	8001c3e <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c26:	d004      	beq.n	8001c32 <HAL_ADC_PollForConversion+0xf2>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a41      	ldr	r2, [pc, #260]	; (8001d34 <HAL_ADC_PollForConversion+0x1f4>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d102      	bne.n	8001c38 <HAL_ADC_PollForConversion+0xf8>
 8001c32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c36:	e000      	b.n	8001c3a <HAL_ADC_PollForConversion+0xfa>
 8001c38:	4b41      	ldr	r3, [pc, #260]	; (8001d40 <HAL_ADC_PollForConversion+0x200>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001c3e:	f7ff fc2d 	bl	800149c <HAL_GetTick>
 8001c42:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001c44:	e021      	b.n	8001c8a <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c4c:	d01d      	beq.n	8001c8a <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d007      	beq.n	8001c64 <HAL_ADC_PollForConversion+0x124>
 8001c54:	f7ff fc22 	bl	800149c <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d212      	bcs.n	8001c8a <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10b      	bne.n	8001c8a <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f043 0204 	orr.w	r2, r3, #4
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e04f      	b.n	8001d2a <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0d6      	beq.n	8001c46 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d131      	bne.n	8001d16 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d12c      	bne.n	8001d16 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0308 	and.w	r3, r3, #8
 8001cc6:	2b08      	cmp	r3, #8
 8001cc8:	d125      	bne.n	8001d16 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d112      	bne.n	8001cfe <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d112      	bne.n	8001d16 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf4:	f043 0201 	orr.w	r2, r3, #1
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	641a      	str	r2, [r3, #64]	; 0x40
 8001cfc:	e00b      	b.n	8001d16 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f043 0220 	orr.w	r2, r3, #32
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	f043 0201 	orr.w	r2, r3, #1
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d103      	bne.n	8001d28 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	50000100 	.word	0x50000100
 8001d38:	50000300 	.word	0x50000300
 8001d3c:	50000700 	.word	0x50000700
 8001d40:	50000400 	.word	0x50000400

08001d44 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
	...

08001d60 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b09b      	sub	sp, #108	; 0x6c
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d101      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x22>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e2cb      	b.n	800231a <HAL_ADC_ConfigChannel+0x5ba>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f040 82af 	bne.w	80022f8 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	d81c      	bhi.n	8001ddc <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	4413      	add	r3, r2
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	461a      	mov	r2, r3
 8001db6:	231f      	movs	r3, #31
 8001db8:	4093      	lsls	r3, r2
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	4019      	ands	r1, r3
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	6818      	ldr	r0, [r3, #0]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	4413      	add	r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	fa00 f203 	lsl.w	r2, r0, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	631a      	str	r2, [r3, #48]	; 0x30
 8001dda:	e063      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b09      	cmp	r3, #9
 8001de2:	d81e      	bhi.n	8001e22 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	4613      	mov	r3, r2
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4413      	add	r3, r2
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	3b1e      	subs	r3, #30
 8001df8:	221f      	movs	r2, #31
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	4019      	ands	r1, r3
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	6818      	ldr	r0, [r3, #0]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	4413      	add	r3, r2
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	3b1e      	subs	r3, #30
 8001e14:	fa00 f203 	lsl.w	r2, r0, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	635a      	str	r2, [r3, #52]	; 0x34
 8001e20:	e040      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b0e      	cmp	r3, #14
 8001e28:	d81e      	bhi.n	8001e68 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	4413      	add	r3, r2
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	3b3c      	subs	r3, #60	; 0x3c
 8001e3e:	221f      	movs	r2, #31
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	4019      	ands	r1, r3
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	6818      	ldr	r0, [r3, #0]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4413      	add	r3, r2
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	3b3c      	subs	r3, #60	; 0x3c
 8001e5a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	639a      	str	r2, [r3, #56]	; 0x38
 8001e66:	e01d      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	4613      	mov	r3, r2
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	4413      	add	r3, r2
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	3b5a      	subs	r3, #90	; 0x5a
 8001e7c:	221f      	movs	r2, #31
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	4019      	ands	r1, r3
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	6818      	ldr	r0, [r3, #0]
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	4413      	add	r3, r2
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	3b5a      	subs	r3, #90	; 0x5a
 8001e98:	fa00 f203 	lsl.w	r2, r0, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 030c 	and.w	r3, r3, #12
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f040 80e5 	bne.w	800207e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b09      	cmp	r3, #9
 8001eba:	d91c      	bls.n	8001ef6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6999      	ldr	r1, [r3, #24]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4413      	add	r3, r2
 8001ecc:	3b1e      	subs	r3, #30
 8001ece:	2207      	movs	r2, #7
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	4019      	ands	r1, r3
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	6898      	ldr	r0, [r3, #8]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	3b1e      	subs	r3, #30
 8001ee8:	fa00 f203 	lsl.w	r2, r0, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	619a      	str	r2, [r3, #24]
 8001ef4:	e019      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6959      	ldr	r1, [r3, #20]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	4613      	mov	r3, r2
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4413      	add	r3, r2
 8001f06:	2207      	movs	r2, #7
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	4019      	ands	r1, r3
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	6898      	ldr	r0, [r3, #8]
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	4413      	add	r3, r2
 8001f1e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	695a      	ldr	r2, [r3, #20]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	08db      	lsrs	r3, r3, #3
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	2b03      	cmp	r3, #3
 8001f4a:	d84f      	bhi.n	8001fec <HAL_ADC_ConfigChannel+0x28c>
 8001f4c:	a201      	add	r2, pc, #4	; (adr r2, 8001f54 <HAL_ADC_ConfigChannel+0x1f4>)
 8001f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f52:	bf00      	nop
 8001f54:	08001f65 	.word	0x08001f65
 8001f58:	08001f87 	.word	0x08001f87
 8001f5c:	08001fa9 	.word	0x08001fa9
 8001f60:	08001fcb 	.word	0x08001fcb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f6a:	4b9f      	ldr	r3, [pc, #636]	; (80021e8 <HAL_ADC_ConfigChannel+0x488>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	6812      	ldr	r2, [r2, #0]
 8001f72:	0691      	lsls	r1, r2, #26
 8001f74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f76:	430a      	orrs	r2, r1
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f82:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f84:	e07e      	b.n	8002084 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f8c:	4b96      	ldr	r3, [pc, #600]	; (80021e8 <HAL_ADC_ConfigChannel+0x488>)
 8001f8e:	4013      	ands	r3, r2
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	6812      	ldr	r2, [r2, #0]
 8001f94:	0691      	lsls	r1, r2, #26
 8001f96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001fa4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001fa6:	e06d      	b.n	8002084 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001fae:	4b8e      	ldr	r3, [pc, #568]	; (80021e8 <HAL_ADC_ConfigChannel+0x488>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	6812      	ldr	r2, [r2, #0]
 8001fb6:	0691      	lsls	r1, r2, #26
 8001fb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001fc6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001fc8:	e05c      	b.n	8002084 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001fd0:	4b85      	ldr	r3, [pc, #532]	; (80021e8 <HAL_ADC_ConfigChannel+0x488>)
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	0691      	lsls	r1, r2, #26
 8001fda:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001fe8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001fea:	e04b      	b.n	8002084 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	069b      	lsls	r3, r3, #26
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d107      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800200e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002016:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	069b      	lsls	r3, r3, #26
 8002020:	429a      	cmp	r2, r3
 8002022:	d107      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002032:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800203a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	069b      	lsls	r3, r3, #26
 8002044:	429a      	cmp	r2, r3
 8002046:	d107      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002056:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800205e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	069b      	lsls	r3, r3, #26
 8002068:	429a      	cmp	r2, r3
 800206a:	d10a      	bne.n	8002082 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800207a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800207c:	e001      	b.n	8002082 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800207e:	bf00      	nop
 8002080:	e000      	b.n	8002084 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002082:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	2b01      	cmp	r3, #1
 8002090:	d108      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x344>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b01      	cmp	r3, #1
 800209e:	d101      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x344>
 80020a0:	2301      	movs	r3, #1
 80020a2:	e000      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x346>
 80020a4:	2300      	movs	r3, #0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f040 8131 	bne.w	800230e <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d00f      	beq.n	80020d4 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2201      	movs	r2, #1
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43da      	mvns	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	400a      	ands	r2, r1
 80020ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80020d2:	e049      	b.n	8002168 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2201      	movs	r2, #1
 80020e2:	409a      	lsls	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2b09      	cmp	r3, #9
 80020f4:	d91c      	bls.n	8002130 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6999      	ldr	r1, [r3, #24]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4613      	mov	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	4413      	add	r3, r2
 8002106:	3b1b      	subs	r3, #27
 8002108:	2207      	movs	r2, #7
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43db      	mvns	r3, r3
 8002110:	4019      	ands	r1, r3
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	6898      	ldr	r0, [r3, #8]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	4613      	mov	r3, r2
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	4413      	add	r3, r2
 8002120:	3b1b      	subs	r3, #27
 8002122:	fa00 f203 	lsl.w	r2, r0, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	619a      	str	r2, [r3, #24]
 800212e:	e01b      	b.n	8002168 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6959      	ldr	r1, [r3, #20]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	1c5a      	adds	r2, r3, #1
 800213c:	4613      	mov	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4413      	add	r3, r2
 8002142:	2207      	movs	r2, #7
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	4019      	ands	r1, r3
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	6898      	ldr	r0, [r3, #8]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	1c5a      	adds	r2, r3, #1
 8002156:	4613      	mov	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	4413      	add	r3, r2
 800215c:	fa00 f203 	lsl.w	r2, r0, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002170:	d004      	beq.n	800217c <HAL_ADC_ConfigChannel+0x41c>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a1d      	ldr	r2, [pc, #116]	; (80021ec <HAL_ADC_ConfigChannel+0x48c>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d101      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x420>
 800217c:	4b1c      	ldr	r3, [pc, #112]	; (80021f0 <HAL_ADC_ConfigChannel+0x490>)
 800217e:	e000      	b.n	8002182 <HAL_ADC_ConfigChannel+0x422>
 8002180:	4b1c      	ldr	r3, [pc, #112]	; (80021f4 <HAL_ADC_ConfigChannel+0x494>)
 8002182:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b10      	cmp	r3, #16
 800218a:	d105      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800218c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002194:	2b00      	cmp	r3, #0
 8002196:	d015      	beq.n	80021c4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800219c:	2b11      	cmp	r3, #17
 800219e:	d105      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80021a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00b      	beq.n	80021c4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80021b0:	2b12      	cmp	r3, #18
 80021b2:	f040 80ac 	bne.w	800230e <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80021b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f040 80a5 	bne.w	800230e <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021cc:	d102      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x474>
 80021ce:	4b07      	ldr	r3, [pc, #28]	; (80021ec <HAL_ADC_ConfigChannel+0x48c>)
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	e023      	b.n	800221c <HAL_ADC_ConfigChannel+0x4bc>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a04      	ldr	r2, [pc, #16]	; (80021ec <HAL_ADC_ConfigChannel+0x48c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d10c      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x498>
 80021de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	e01a      	b.n	800221c <HAL_ADC_ConfigChannel+0x4bc>
 80021e6:	bf00      	nop
 80021e8:	83fff000 	.word	0x83fff000
 80021ec:	50000100 	.word	0x50000100
 80021f0:	50000300 	.word	0x50000300
 80021f4:	50000700 	.word	0x50000700
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a4a      	ldr	r2, [pc, #296]	; (8002328 <HAL_ADC_ConfigChannel+0x5c8>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d102      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x4a8>
 8002202:	4b4a      	ldr	r3, [pc, #296]	; (800232c <HAL_ADC_ConfigChannel+0x5cc>)
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	e009      	b.n	800221c <HAL_ADC_ConfigChannel+0x4bc>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a47      	ldr	r2, [pc, #284]	; (800232c <HAL_ADC_ConfigChannel+0x5cc>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d102      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x4b8>
 8002212:	4b45      	ldr	r3, [pc, #276]	; (8002328 <HAL_ADC_ConfigChannel+0x5c8>)
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	e001      	b.n	800221c <HAL_ADC_ConfigChannel+0x4bc>
 8002218:	2300      	movs	r3, #0
 800221a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 0303 	and.w	r3, r3, #3
 8002226:	2b01      	cmp	r3, #1
 8002228:	d108      	bne.n	800223c <HAL_ADC_ConfigChannel+0x4dc>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b01      	cmp	r3, #1
 8002236:	d101      	bne.n	800223c <HAL_ADC_ConfigChannel+0x4dc>
 8002238:	2301      	movs	r3, #1
 800223a:	e000      	b.n	800223e <HAL_ADC_ConfigChannel+0x4de>
 800223c:	2300      	movs	r3, #0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d150      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002242:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002244:	2b00      	cmp	r3, #0
 8002246:	d010      	beq.n	800226a <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	2b01      	cmp	r3, #1
 8002252:	d107      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x504>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b01      	cmp	r3, #1
 800225e:	d101      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x504>
 8002260:	2301      	movs	r3, #1
 8002262:	e000      	b.n	8002266 <HAL_ADC_ConfigChannel+0x506>
 8002264:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002266:	2b00      	cmp	r3, #0
 8002268:	d13c      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2b10      	cmp	r3, #16
 8002270:	d11d      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x54e>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800227a:	d118      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800227c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002284:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002286:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002288:	4b29      	ldr	r3, [pc, #164]	; (8002330 <HAL_ADC_ConfigChannel+0x5d0>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a29      	ldr	r2, [pc, #164]	; (8002334 <HAL_ADC_ConfigChannel+0x5d4>)
 800228e:	fba2 2303 	umull	r2, r3, r2, r3
 8002292:	0c9a      	lsrs	r2, r3, #18
 8002294:	4613      	mov	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800229e:	e002      	b.n	80022a6 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1f9      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022ac:	e02e      	b.n	800230c <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2b11      	cmp	r3, #17
 80022b4:	d10b      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x56e>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022be:	d106      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80022c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80022c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022ca:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022cc:	e01e      	b.n	800230c <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2b12      	cmp	r3, #18
 80022d4:	d11a      	bne.n	800230c <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80022d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022e0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022e2:	e013      	b.n	800230c <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	f043 0220 	orr.w	r2, r3, #32
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80022f6:	e00a      	b.n	800230e <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	f043 0220 	orr.w	r2, r3, #32
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800230a:	e000      	b.n	800230e <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800230c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002316:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800231a:	4618      	mov	r0, r3
 800231c:	376c      	adds	r7, #108	; 0x6c
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	50000400 	.word	0x50000400
 800232c:	50000500 	.word	0x50000500
 8002330:	20000010 	.word	0x20000010
 8002334:	431bde83 	.word	0x431bde83

08002338 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002338:	b480      	push	{r7}
 800233a:	b099      	sub	sp, #100	; 0x64
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002342:	2300      	movs	r3, #0
 8002344:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002350:	d102      	bne.n	8002358 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002352:	4b6d      	ldr	r3, [pc, #436]	; (8002508 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	e01a      	b.n	800238e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a6a      	ldr	r2, [pc, #424]	; (8002508 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d103      	bne.n	800236a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002362:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002366:	60bb      	str	r3, [r7, #8]
 8002368:	e011      	b.n	800238e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a67      	ldr	r2, [pc, #412]	; (800250c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d102      	bne.n	800237a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002374:	4b66      	ldr	r3, [pc, #408]	; (8002510 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	e009      	b.n	800238e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a64      	ldr	r2, [pc, #400]	; (8002510 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d102      	bne.n	800238a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002384:	4b61      	ldr	r3, [pc, #388]	; (800250c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	e001      	b.n	800238e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800238a:	2300      	movs	r3, #0
 800238c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e0b0      	b.n	80024fa <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d101      	bne.n	80023a6 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80023a2:	2302      	movs	r3, #2
 80023a4:	e0a9      	b.n	80024fa <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f040 808d 	bne.w	80024d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 0304 	and.w	r3, r3, #4
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f040 8086 	bne.w	80024d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023d4:	d004      	beq.n	80023e0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a4b      	ldr	r2, [pc, #300]	; (8002508 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d101      	bne.n	80023e4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80023e0:	4b4c      	ldr	r3, [pc, #304]	; (8002514 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80023e2:	e000      	b.n	80023e6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80023e4:	4b4c      	ldr	r3, [pc, #304]	; (8002518 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80023e6:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d040      	beq.n	8002472 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80023f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	6859      	ldr	r1, [r3, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002402:	035b      	lsls	r3, r3, #13
 8002404:	430b      	orrs	r3, r1
 8002406:	431a      	orrs	r2, r3
 8002408:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800240a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	2b01      	cmp	r3, #1
 8002418:	d108      	bne.n	800242c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002428:	2301      	movs	r3, #1
 800242a:	e000      	b.n	800242e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 800242c:	2300      	movs	r3, #0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d15c      	bne.n	80024ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	2b01      	cmp	r3, #1
 800243c:	d107      	bne.n	800244e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b01      	cmp	r3, #1
 8002448:	d101      	bne.n	800244e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800244e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002450:	2b00      	cmp	r3, #0
 8002452:	d14b      	bne.n	80024ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002454:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800245c:	f023 030f 	bic.w	r3, r3, #15
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	6811      	ldr	r1, [r2, #0]
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	6892      	ldr	r2, [r2, #8]
 8002468:	430a      	orrs	r2, r1
 800246a:	431a      	orrs	r2, r3
 800246c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800246e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002470:	e03c      	b.n	80024ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002472:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800247a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800247c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 0303 	and.w	r3, r3, #3
 8002488:	2b01      	cmp	r3, #1
 800248a:	d108      	bne.n	800249e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b01      	cmp	r3, #1
 8002498:	d101      	bne.n	800249e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800249e:	2300      	movs	r3, #0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d123      	bne.n	80024ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 0303 	and.w	r3, r3, #3
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d107      	bne.n	80024c0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d101      	bne.n	80024c0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80024bc:	2301      	movs	r3, #1
 80024be:	e000      	b.n	80024c2 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80024c0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d112      	bne.n	80024ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80024c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80024ce:	f023 030f 	bic.w	r3, r3, #15
 80024d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80024d4:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80024d6:	e009      	b.n	80024ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	f043 0220 	orr.w	r2, r3, #32
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80024ea:	e000      	b.n	80024ee <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80024ec:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80024f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80024fa:	4618      	mov	r0, r3
 80024fc:	3764      	adds	r7, #100	; 0x64
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	50000100 	.word	0x50000100
 800250c:	50000400 	.word	0x50000400
 8002510:	50000500 	.word	0x50000500
 8002514:	50000300 	.word	0x50000300
 8002518:	50000700 	.word	0x50000700

0800251c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	2b01      	cmp	r3, #1
 8002534:	d108      	bne.n	8002548 <ADC_Enable+0x2c>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b01      	cmp	r3, #1
 8002542:	d101      	bne.n	8002548 <ADC_Enable+0x2c>
 8002544:	2301      	movs	r3, #1
 8002546:	e000      	b.n	800254a <ADC_Enable+0x2e>
 8002548:	2300      	movs	r3, #0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d143      	bne.n	80025d6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	4b22      	ldr	r3, [pc, #136]	; (80025e0 <ADC_Enable+0xc4>)
 8002556:	4013      	ands	r3, r2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00d      	beq.n	8002578 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	f043 0210 	orr.w	r2, r3, #16
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256c:	f043 0201 	orr.w	r2, r3, #1
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e02f      	b.n	80025d8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f042 0201 	orr.w	r2, r2, #1
 8002586:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002588:	f7fe ff88 	bl	800149c <HAL_GetTick>
 800258c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800258e:	e01b      	b.n	80025c8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002590:	f7fe ff84 	bl	800149c <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d914      	bls.n	80025c8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d00d      	beq.n	80025c8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b0:	f043 0210 	orr.w	r2, r3, #16
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025bc:	f043 0201 	orr.w	r2, r3, #1
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e007      	b.n	80025d8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d1dc      	bne.n	8002590 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	8000003f 	.word	0x8000003f

080025e4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d108      	bne.n	8002610 <ADC_Disable+0x2c>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b01      	cmp	r3, #1
 800260a:	d101      	bne.n	8002610 <ADC_Disable+0x2c>
 800260c:	2301      	movs	r3, #1
 800260e:	e000      	b.n	8002612 <ADC_Disable+0x2e>
 8002610:	2300      	movs	r3, #0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d047      	beq.n	80026a6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 030d 	and.w	r3, r3, #13
 8002620:	2b01      	cmp	r3, #1
 8002622:	d10f      	bne.n	8002644 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0202 	orr.w	r2, r2, #2
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2203      	movs	r2, #3
 800263a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800263c:	f7fe ff2e 	bl	800149c <HAL_GetTick>
 8002640:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002642:	e029      	b.n	8002698 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	f043 0210 	orr.w	r2, r3, #16
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002654:	f043 0201 	orr.w	r2, r3, #1
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e023      	b.n	80026a8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002660:	f7fe ff1c 	bl	800149c <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d914      	bls.n	8002698 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b01      	cmp	r3, #1
 800267a:	d10d      	bne.n	8002698 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	f043 0210 	orr.w	r2, r3, #16
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268c:	f043 0201 	orr.w	r2, r3, #1
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e007      	b.n	80026a8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d0dc      	beq.n	8002660 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80026be:	2300      	movs	r3, #0
 80026c0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 030c 	and.w	r3, r3, #12
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 809a 	beq.w	800280a <ADC_ConversionStop+0x15a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026e4:	d12a      	bne.n	800273c <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d126      	bne.n	800273c <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d122      	bne.n	800273c <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 80026f6:	230c      	movs	r3, #12
 80026f8:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80026fa:	e014      	b.n	8002726 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	4a45      	ldr	r2, [pc, #276]	; (8002814 <ADC_ConversionStop+0x164>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d90d      	bls.n	8002720 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	f043 0210 	orr.w	r2, r3, #16
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002714:	f043 0201 	orr.w	r2, r3, #1
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e075      	b.n	800280c <ADC_ConversionStop+0x15c>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	3301      	adds	r3, #1
 8002724:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002730:	2b40      	cmp	r3, #64	; 0x40
 8002732:	d1e3      	bne.n	80026fc <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2240      	movs	r2, #64	; 0x40
 800273a:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	2b60      	cmp	r3, #96	; 0x60
 8002740:	d015      	beq.n	800276e <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b04      	cmp	r3, #4
 800274e:	d10e      	bne.n	800276e <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800275a:	2b00      	cmp	r3, #0
 800275c:	d107      	bne.n	800276e <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f042 0210 	orr.w	r2, r2, #16
 800276c:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	2b0c      	cmp	r3, #12
 8002772:	d015      	beq.n	80027a0 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b08      	cmp	r3, #8
 8002780:	d10e      	bne.n	80027a0 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800278c:	2b00      	cmp	r3, #0
 800278e:	d107      	bne.n	80027a0 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 0220 	orr.w	r2, r2, #32
 800279e:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	2b60      	cmp	r3, #96	; 0x60
 80027a4:	d004      	beq.n	80027b0 <ADC_ConversionStop+0x100>
 80027a6:	2b6c      	cmp	r3, #108	; 0x6c
 80027a8:	d105      	bne.n	80027b6 <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80027aa:	230c      	movs	r3, #12
 80027ac:	617b      	str	r3, [r7, #20]
        break;
 80027ae:	e005      	b.n	80027bc <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80027b0:	2308      	movs	r3, #8
 80027b2:	617b      	str	r3, [r7, #20]
        break;
 80027b4:	e002      	b.n	80027bc <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80027b6:	2304      	movs	r3, #4
 80027b8:	617b      	str	r3, [r7, #20]
        break;
 80027ba:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80027bc:	f7fe fe6e 	bl	800149c <HAL_GetTick>
 80027c0:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80027c2:	e01b      	b.n	80027fc <ADC_ConversionStop+0x14c>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80027c4:	f7fe fe6a 	bl	800149c <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b0b      	cmp	r3, #11
 80027d0:	d914      	bls.n	80027fc <ADC_ConversionStop+0x14c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	4013      	ands	r3, r2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00d      	beq.n	80027fc <ADC_ConversionStop+0x14c>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	f043 0210 	orr.w	r2, r3, #16
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f0:	f043 0201 	orr.w	r2, r3, #1
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e007      	b.n	800280c <ADC_ConversionStop+0x15c>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	4013      	ands	r3, r2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1dc      	bne.n	80027c4 <ADC_ConversionStop+0x114>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	000993ff 	.word	0x000993ff

08002818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002828:	4b0c      	ldr	r3, [pc, #48]	; (800285c <__NVIC_SetPriorityGrouping+0x44>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002834:	4013      	ands	r3, r2
 8002836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002840:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800284a:	4a04      	ldr	r2, [pc, #16]	; (800285c <__NVIC_SetPriorityGrouping+0x44>)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	60d3      	str	r3, [r2, #12]
}
 8002850:	bf00      	nop
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002864:	4b04      	ldr	r3, [pc, #16]	; (8002878 <__NVIC_GetPriorityGrouping+0x18>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	0a1b      	lsrs	r3, r3, #8
 800286a:	f003 0307 	and.w	r3, r3, #7
}
 800286e:	4618      	mov	r0, r3
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	e000ed00 	.word	0xe000ed00

0800287c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288a:	2b00      	cmp	r3, #0
 800288c:	db0b      	blt.n	80028a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	f003 021f 	and.w	r2, r3, #31
 8002894:	4907      	ldr	r1, [pc, #28]	; (80028b4 <__NVIC_EnableIRQ+0x38>)
 8002896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289a:	095b      	lsrs	r3, r3, #5
 800289c:	2001      	movs	r0, #1
 800289e:	fa00 f202 	lsl.w	r2, r0, r2
 80028a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	e000e100 	.word	0xe000e100

080028b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	6039      	str	r1, [r7, #0]
 80028c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	db0a      	blt.n	80028e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	490c      	ldr	r1, [pc, #48]	; (8002904 <__NVIC_SetPriority+0x4c>)
 80028d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d6:	0112      	lsls	r2, r2, #4
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	440b      	add	r3, r1
 80028dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028e0:	e00a      	b.n	80028f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	4908      	ldr	r1, [pc, #32]	; (8002908 <__NVIC_SetPriority+0x50>)
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	3b04      	subs	r3, #4
 80028f0:	0112      	lsls	r2, r2, #4
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	440b      	add	r3, r1
 80028f6:	761a      	strb	r2, [r3, #24]
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	e000e100 	.word	0xe000e100
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800290c:	b480      	push	{r7}
 800290e:	b089      	sub	sp, #36	; 0x24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f1c3 0307 	rsb	r3, r3, #7
 8002926:	2b04      	cmp	r3, #4
 8002928:	bf28      	it	cs
 800292a:	2304      	movcs	r3, #4
 800292c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	3304      	adds	r3, #4
 8002932:	2b06      	cmp	r3, #6
 8002934:	d902      	bls.n	800293c <NVIC_EncodePriority+0x30>
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	3b03      	subs	r3, #3
 800293a:	e000      	b.n	800293e <NVIC_EncodePriority+0x32>
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002940:	f04f 32ff 	mov.w	r2, #4294967295
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43da      	mvns	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	401a      	ands	r2, r3
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002954:	f04f 31ff 	mov.w	r1, #4294967295
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	fa01 f303 	lsl.w	r3, r1, r3
 800295e:	43d9      	mvns	r1, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002964:	4313      	orrs	r3, r2
         );
}
 8002966:	4618      	mov	r0, r3
 8002968:	3724      	adds	r7, #36	; 0x24
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
	...

08002974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3b01      	subs	r3, #1
 8002980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002984:	d301      	bcc.n	800298a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002986:	2301      	movs	r3, #1
 8002988:	e00f      	b.n	80029aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800298a:	4a0a      	ldr	r2, [pc, #40]	; (80029b4 <SysTick_Config+0x40>)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3b01      	subs	r3, #1
 8002990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002992:	210f      	movs	r1, #15
 8002994:	f04f 30ff 	mov.w	r0, #4294967295
 8002998:	f7ff ff8e 	bl	80028b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800299c:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <SysTick_Config+0x40>)
 800299e:	2200      	movs	r2, #0
 80029a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029a2:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <SysTick_Config+0x40>)
 80029a4:	2207      	movs	r2, #7
 80029a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	e000e010 	.word	0xe000e010

080029b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff ff29 	bl	8002818 <__NVIC_SetPriorityGrouping>
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b086      	sub	sp, #24
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	4603      	mov	r3, r0
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	607a      	str	r2, [r7, #4]
 80029da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029e0:	f7ff ff3e 	bl	8002860 <__NVIC_GetPriorityGrouping>
 80029e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	68b9      	ldr	r1, [r7, #8]
 80029ea:	6978      	ldr	r0, [r7, #20]
 80029ec:	f7ff ff8e 	bl	800290c <NVIC_EncodePriority>
 80029f0:	4602      	mov	r2, r0
 80029f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029f6:	4611      	mov	r1, r2
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff ff5d 	bl	80028b8 <__NVIC_SetPriority>
}
 80029fe:	bf00      	nop
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff ff31 	bl	800287c <__NVIC_EnableIRQ>
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff ffa2 	bl	8002974 <SysTick_Config>
 8002a30:	4603      	mov	r3, r0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d008      	beq.n	8002a5e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2204      	movs	r2, #4
 8002a50:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e020      	b.n	8002aa0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 020e 	bic.w	r2, r2, #14
 8002a6c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0201 	bic.w	r2, r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a86:	2101      	movs	r1, #1
 8002a88:	fa01 f202 	lsl.w	r2, r1, r2
 8002a8c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d005      	beq.n	8002ace <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2204      	movs	r2, #4
 8002ac6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
 8002acc:	e027      	b.n	8002b1e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 020e 	bic.w	r2, r2, #14
 8002adc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0201 	bic.w	r2, r2, #1
 8002aec:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af6:	2101      	movs	r1, #1
 8002af8:	fa01 f202 	lsl.w	r2, r1, r2
 8002afc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	4798      	blx	r3
    } 
  }
  return status;
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b087      	sub	sp, #28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b32:	2300      	movs	r3, #0
 8002b34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b36:	e160      	b.n	8002dfa <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	fa01 f303 	lsl.w	r3, r1, r3
 8002b44:	4013      	ands	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 8152 	beq.w	8002df4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 0303 	and.w	r3, r3, #3
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d005      	beq.n	8002b68 <HAL_GPIO_Init+0x40>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 0303 	and.w	r3, r3, #3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d130      	bne.n	8002bca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	2203      	movs	r2, #3
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	68da      	ldr	r2, [r3, #12]
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4013      	ands	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	091b      	lsrs	r3, r3, #4
 8002bb4:	f003 0201 	and.w	r2, r3, #1
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	2b03      	cmp	r3, #3
 8002bd4:	d017      	beq.n	8002c06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	2203      	movs	r2, #3
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	43db      	mvns	r3, r3
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	4013      	ands	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d123      	bne.n	8002c5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	08da      	lsrs	r2, r3, #3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3208      	adds	r2, #8
 8002c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	220f      	movs	r2, #15
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4013      	ands	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	691a      	ldr	r2, [r3, #16]
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	08da      	lsrs	r2, r3, #3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3208      	adds	r2, #8
 8002c54:	6939      	ldr	r1, [r7, #16]
 8002c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	2203      	movs	r2, #3
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f003 0203 	and.w	r2, r3, #3
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 80ac 	beq.w	8002df4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c9c:	4b5e      	ldr	r3, [pc, #376]	; (8002e18 <HAL_GPIO_Init+0x2f0>)
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	4a5d      	ldr	r2, [pc, #372]	; (8002e18 <HAL_GPIO_Init+0x2f0>)
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	6193      	str	r3, [r2, #24]
 8002ca8:	4b5b      	ldr	r3, [pc, #364]	; (8002e18 <HAL_GPIO_Init+0x2f0>)
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	60bb      	str	r3, [r7, #8]
 8002cb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cb4:	4a59      	ldr	r2, [pc, #356]	; (8002e1c <HAL_GPIO_Init+0x2f4>)
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	089b      	lsrs	r3, r3, #2
 8002cba:	3302      	adds	r3, #2
 8002cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f003 0303 	and.w	r3, r3, #3
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	220f      	movs	r2, #15
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002cde:	d025      	beq.n	8002d2c <HAL_GPIO_Init+0x204>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a4f      	ldr	r2, [pc, #316]	; (8002e20 <HAL_GPIO_Init+0x2f8>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d01f      	beq.n	8002d28 <HAL_GPIO_Init+0x200>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a4e      	ldr	r2, [pc, #312]	; (8002e24 <HAL_GPIO_Init+0x2fc>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d019      	beq.n	8002d24 <HAL_GPIO_Init+0x1fc>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a4d      	ldr	r2, [pc, #308]	; (8002e28 <HAL_GPIO_Init+0x300>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d013      	beq.n	8002d20 <HAL_GPIO_Init+0x1f8>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a4c      	ldr	r2, [pc, #304]	; (8002e2c <HAL_GPIO_Init+0x304>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d00d      	beq.n	8002d1c <HAL_GPIO_Init+0x1f4>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a4b      	ldr	r2, [pc, #300]	; (8002e30 <HAL_GPIO_Init+0x308>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d007      	beq.n	8002d18 <HAL_GPIO_Init+0x1f0>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a4a      	ldr	r2, [pc, #296]	; (8002e34 <HAL_GPIO_Init+0x30c>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d101      	bne.n	8002d14 <HAL_GPIO_Init+0x1ec>
 8002d10:	2306      	movs	r3, #6
 8002d12:	e00c      	b.n	8002d2e <HAL_GPIO_Init+0x206>
 8002d14:	2307      	movs	r3, #7
 8002d16:	e00a      	b.n	8002d2e <HAL_GPIO_Init+0x206>
 8002d18:	2305      	movs	r3, #5
 8002d1a:	e008      	b.n	8002d2e <HAL_GPIO_Init+0x206>
 8002d1c:	2304      	movs	r3, #4
 8002d1e:	e006      	b.n	8002d2e <HAL_GPIO_Init+0x206>
 8002d20:	2303      	movs	r3, #3
 8002d22:	e004      	b.n	8002d2e <HAL_GPIO_Init+0x206>
 8002d24:	2302      	movs	r3, #2
 8002d26:	e002      	b.n	8002d2e <HAL_GPIO_Init+0x206>
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e000      	b.n	8002d2e <HAL_GPIO_Init+0x206>
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	f002 0203 	and.w	r2, r2, #3
 8002d34:	0092      	lsls	r2, r2, #2
 8002d36:	4093      	lsls	r3, r2
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d3e:	4937      	ldr	r1, [pc, #220]	; (8002e1c <HAL_GPIO_Init+0x2f4>)
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	089b      	lsrs	r3, r3, #2
 8002d44:	3302      	adds	r3, #2
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d4c:	4b3a      	ldr	r3, [pc, #232]	; (8002e38 <HAL_GPIO_Init+0x310>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	43db      	mvns	r3, r3
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d70:	4a31      	ldr	r2, [pc, #196]	; (8002e38 <HAL_GPIO_Init+0x310>)
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d76:	4b30      	ldr	r3, [pc, #192]	; (8002e38 <HAL_GPIO_Init+0x310>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	4013      	ands	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d9a:	4a27      	ldr	r2, [pc, #156]	; (8002e38 <HAL_GPIO_Init+0x310>)
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002da0:	4b25      	ldr	r3, [pc, #148]	; (8002e38 <HAL_GPIO_Init+0x310>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	43db      	mvns	r3, r3
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	4013      	ands	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002dc4:	4a1c      	ldr	r2, [pc, #112]	; (8002e38 <HAL_GPIO_Init+0x310>)
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dca:	4b1b      	ldr	r3, [pc, #108]	; (8002e38 <HAL_GPIO_Init+0x310>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002dee:	4a12      	ldr	r2, [pc, #72]	; (8002e38 <HAL_GPIO_Init+0x310>)
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	3301      	adds	r3, #1
 8002df8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	fa22 f303 	lsr.w	r3, r2, r3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f47f ae97 	bne.w	8002b38 <HAL_GPIO_Init+0x10>
  }
}
 8002e0a:	bf00      	nop
 8002e0c:	371c      	adds	r7, #28
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	40010000 	.word	0x40010000
 8002e20:	48000400 	.word	0x48000400
 8002e24:	48000800 	.word	0x48000800
 8002e28:	48000c00 	.word	0x48000c00
 8002e2c:	48001000 	.word	0x48001000
 8002e30:	48001400 	.word	0x48001400
 8002e34:	48001800 	.word	0x48001800
 8002e38:	40010400 	.word	0x40010400

08002e3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691a      	ldr	r2, [r3, #16]
 8002e4c:	887b      	ldrh	r3, [r7, #2]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d002      	beq.n	8002e5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e54:	2301      	movs	r3, #1
 8002e56:	73fb      	strb	r3, [r7, #15]
 8002e58:	e001      	b.n	8002e5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	807b      	strh	r3, [r7, #2]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e7c:	787b      	ldrb	r3, [r7, #1]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e82:	887a      	ldrh	r2, [r7, #2]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e88:	e002      	b.n	8002e90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e8a:	887a      	ldrh	r2, [r7, #2]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002eae:	887a      	ldrh	r2, [r7, #2]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	041a      	lsls	r2, r3, #16
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	43d9      	mvns	r1, r3
 8002eba:	887b      	ldrh	r3, [r7, #2]
 8002ebc:	400b      	ands	r3, r1
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	619a      	str	r2, [r3, #24]
}
 8002ec4:	bf00      	nop
 8002ec6:	3714      	adds	r7, #20
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002eda:	4b08      	ldr	r3, [pc, #32]	; (8002efc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002edc:	695a      	ldr	r2, [r3, #20]
 8002ede:	88fb      	ldrh	r3, [r7, #6]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d006      	beq.n	8002ef4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ee6:	4a05      	ldr	r2, [pc, #20]	; (8002efc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ee8:	88fb      	ldrh	r3, [r7, #6]
 8002eea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002eec:	88fb      	ldrh	r3, [r7, #6]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fd f980 	bl	80001f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ef4:	bf00      	nop
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40010400 	.word	0x40010400

08002f00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	1d3b      	adds	r3, r7, #4
 8002f0a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f0c:	1d3b      	adds	r3, r7, #4
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d102      	bne.n	8002f1a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	f000 bf01 	b.w	8003d1c <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f1a:	1d3b      	adds	r3, r7, #4
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 8160 	beq.w	80031ea <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002f2a:	4bae      	ldr	r3, [pc, #696]	; (80031e4 <HAL_RCC_OscConfig+0x2e4>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f003 030c 	and.w	r3, r3, #12
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d00c      	beq.n	8002f50 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f36:	4bab      	ldr	r3, [pc, #684]	; (80031e4 <HAL_RCC_OscConfig+0x2e4>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d159      	bne.n	8002ff6 <HAL_RCC_OscConfig+0xf6>
 8002f42:	4ba8      	ldr	r3, [pc, #672]	; (80031e4 <HAL_RCC_OscConfig+0x2e4>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002f4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f4e:	d152      	bne.n	8002ff6 <HAL_RCC_OscConfig+0xf6>
 8002f50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f54:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f58:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002f5c:	fa93 f3a3 	rbit	r3, r3
 8002f60:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f64:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f68:	fab3 f383 	clz	r3, r3
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	f043 0301 	orr.w	r3, r3, #1
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d102      	bne.n	8002f82 <HAL_RCC_OscConfig+0x82>
 8002f7c:	4b99      	ldr	r3, [pc, #612]	; (80031e4 <HAL_RCC_OscConfig+0x2e4>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	e015      	b.n	8002fae <HAL_RCC_OscConfig+0xae>
 8002f82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f86:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002f8e:	fa93 f3a3 	rbit	r3, r3
 8002f92:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002f96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f9a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002f9e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002fa2:	fa93 f3a3 	rbit	r3, r3
 8002fa6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002faa:	4b8e      	ldr	r3, [pc, #568]	; (80031e4 <HAL_RCC_OscConfig+0x2e4>)
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fb2:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002fb6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002fba:	fa92 f2a2 	rbit	r2, r2
 8002fbe:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002fc2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002fc6:	fab2 f282 	clz	r2, r2
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	f042 0220 	orr.w	r2, r2, #32
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	f002 021f 	and.w	r2, r2, #31
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fdc:	4013      	ands	r3, r2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 8102 	beq.w	80031e8 <HAL_RCC_OscConfig+0x2e8>
 8002fe4:	1d3b      	adds	r3, r7, #4
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f040 80fc 	bne.w	80031e8 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	f000 be93 	b.w	8003d1c <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ff6:	1d3b      	adds	r3, r7, #4
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003000:	d106      	bne.n	8003010 <HAL_RCC_OscConfig+0x110>
 8003002:	4b78      	ldr	r3, [pc, #480]	; (80031e4 <HAL_RCC_OscConfig+0x2e4>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a77      	ldr	r2, [pc, #476]	; (80031e4 <HAL_RCC_OscConfig+0x2e4>)
 8003008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	e030      	b.n	8003072 <HAL_RCC_OscConfig+0x172>
 8003010:	1d3b      	adds	r3, r7, #4
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10c      	bne.n	8003034 <HAL_RCC_OscConfig+0x134>
 800301a:	4b72      	ldr	r3, [pc, #456]	; (80031e4 <HAL_RCC_OscConfig+0x2e4>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a71      	ldr	r2, [pc, #452]	; (80031e4 <HAL_RCC_OscConfig+0x2e4>)
 8003020:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	4b6f      	ldr	r3, [pc, #444]	; (80031e4 <HAL_RCC_OscConfig+0x2e4>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a6e      	ldr	r2, [pc, #440]	; (80031e4 <HAL_RCC_OscConfig+0x2e4>)
 800302c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	e01e      	b.n	8003072 <HAL_RCC_OscConfig+0x172>
 8003034:	1d3b      	adds	r3, r7, #4
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800303e:	d10c      	bne.n	800305a <HAL_RCC_OscConfig+0x15a>
 8003040:	4b68      	ldr	r3, [pc, #416]	; (80031e4 <HAL_RCC_OscConfig+0x2e4>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a67      	ldr	r2, [pc, #412]	; (80031e4 <HAL_RCC_OscConfig+0x2e4>)
 8003046:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800304a:	6013      	str	r3, [r2, #0]
 800304c:	4b65      	ldr	r3, [pc, #404]	; (80031e4 <HAL_RCC_OscConfig+0x2e4>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a64      	ldr	r2, [pc, #400]	; (80031e4 <HAL_RCC_OscConfig+0x2e4>)
 8003052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003056:	6013      	str	r3, [r2, #0]
 8003058:	e00b      	b.n	8003072 <HAL_RCC_OscConfig+0x172>
 800305a:	4b62      	ldr	r3, [pc, #392]	; (80031e4 <HAL_RCC_OscConfig+0x2e4>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a61      	ldr	r2, [pc, #388]	; (80031e4 <HAL_RCC_OscConfig+0x2e4>)
 8003060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	4b5f      	ldr	r3, [pc, #380]	; (80031e4 <HAL_RCC_OscConfig+0x2e4>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a5e      	ldr	r2, [pc, #376]	; (80031e4 <HAL_RCC_OscConfig+0x2e4>)
 800306c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003070:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003072:	1d3b      	adds	r3, r7, #4
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d059      	beq.n	8003130 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307c:	f7fe fa0e 	bl	800149c <HAL_GetTick>
 8003080:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003084:	e00a      	b.n	800309c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003086:	f7fe fa09 	bl	800149c <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b64      	cmp	r3, #100	; 0x64
 8003094:	d902      	bls.n	800309c <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	f000 be40 	b.w	8003d1c <HAL_RCC_OscConfig+0xe1c>
 800309c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030a0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80030a8:	fa93 f3a3 	rbit	r3, r3
 80030ac:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80030b0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b4:	fab3 f383 	clz	r3, r3
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	095b      	lsrs	r3, r3, #5
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	f043 0301 	orr.w	r3, r3, #1
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d102      	bne.n	80030ce <HAL_RCC_OscConfig+0x1ce>
 80030c8:	4b46      	ldr	r3, [pc, #280]	; (80031e4 <HAL_RCC_OscConfig+0x2e4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	e015      	b.n	80030fa <HAL_RCC_OscConfig+0x1fa>
 80030ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030d2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80030da:	fa93 f3a3 	rbit	r3, r3
 80030de:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80030e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030e6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80030ea:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80030ee:	fa93 f3a3 	rbit	r3, r3
 80030f2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80030f6:	4b3b      	ldr	r3, [pc, #236]	; (80031e4 <HAL_RCC_OscConfig+0x2e4>)
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030fe:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003102:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003106:	fa92 f2a2 	rbit	r2, r2
 800310a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800310e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003112:	fab2 f282 	clz	r2, r2
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	f042 0220 	orr.w	r2, r2, #32
 800311c:	b2d2      	uxtb	r2, r2
 800311e:	f002 021f 	and.w	r2, r2, #31
 8003122:	2101      	movs	r1, #1
 8003124:	fa01 f202 	lsl.w	r2, r1, r2
 8003128:	4013      	ands	r3, r2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0ab      	beq.n	8003086 <HAL_RCC_OscConfig+0x186>
 800312e:	e05c      	b.n	80031ea <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003130:	f7fe f9b4 	bl	800149c <HAL_GetTick>
 8003134:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003138:	e00a      	b.n	8003150 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800313a:	f7fe f9af 	bl	800149c <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b64      	cmp	r3, #100	; 0x64
 8003148:	d902      	bls.n	8003150 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	f000 bde6 	b.w	8003d1c <HAL_RCC_OscConfig+0xe1c>
 8003150:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003154:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003158:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800315c:	fa93 f3a3 	rbit	r3, r3
 8003160:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003164:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003168:	fab3 f383 	clz	r3, r3
 800316c:	b2db      	uxtb	r3, r3
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	b2db      	uxtb	r3, r3
 8003172:	f043 0301 	orr.w	r3, r3, #1
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b01      	cmp	r3, #1
 800317a:	d102      	bne.n	8003182 <HAL_RCC_OscConfig+0x282>
 800317c:	4b19      	ldr	r3, [pc, #100]	; (80031e4 <HAL_RCC_OscConfig+0x2e4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	e015      	b.n	80031ae <HAL_RCC_OscConfig+0x2ae>
 8003182:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003186:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800318e:	fa93 f3a3 	rbit	r3, r3
 8003192:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003196:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800319a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800319e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80031a2:	fa93 f3a3 	rbit	r3, r3
 80031a6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80031aa:	4b0e      	ldr	r3, [pc, #56]	; (80031e4 <HAL_RCC_OscConfig+0x2e4>)
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031b2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80031b6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80031ba:	fa92 f2a2 	rbit	r2, r2
 80031be:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80031c2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80031c6:	fab2 f282 	clz	r2, r2
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	f042 0220 	orr.w	r2, r2, #32
 80031d0:	b2d2      	uxtb	r2, r2
 80031d2:	f002 021f 	and.w	r2, r2, #31
 80031d6:	2101      	movs	r1, #1
 80031d8:	fa01 f202 	lsl.w	r2, r1, r2
 80031dc:	4013      	ands	r3, r2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1ab      	bne.n	800313a <HAL_RCC_OscConfig+0x23a>
 80031e2:	e002      	b.n	80031ea <HAL_RCC_OscConfig+0x2ea>
 80031e4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ea:	1d3b      	adds	r3, r7, #4
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 8170 	beq.w	80034da <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80031fa:	4bd0      	ldr	r3, [pc, #832]	; (800353c <HAL_RCC_OscConfig+0x63c>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f003 030c 	and.w	r3, r3, #12
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00c      	beq.n	8003220 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003206:	4bcd      	ldr	r3, [pc, #820]	; (800353c <HAL_RCC_OscConfig+0x63c>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f003 030c 	and.w	r3, r3, #12
 800320e:	2b08      	cmp	r3, #8
 8003210:	d16d      	bne.n	80032ee <HAL_RCC_OscConfig+0x3ee>
 8003212:	4bca      	ldr	r3, [pc, #808]	; (800353c <HAL_RCC_OscConfig+0x63c>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800321a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800321e:	d166      	bne.n	80032ee <HAL_RCC_OscConfig+0x3ee>
 8003220:	2302      	movs	r3, #2
 8003222:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003226:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800322a:	fa93 f3a3 	rbit	r3, r3
 800322e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003232:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003236:	fab3 f383 	clz	r3, r3
 800323a:	b2db      	uxtb	r3, r3
 800323c:	095b      	lsrs	r3, r3, #5
 800323e:	b2db      	uxtb	r3, r3
 8003240:	f043 0301 	orr.w	r3, r3, #1
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b01      	cmp	r3, #1
 8003248:	d102      	bne.n	8003250 <HAL_RCC_OscConfig+0x350>
 800324a:	4bbc      	ldr	r3, [pc, #752]	; (800353c <HAL_RCC_OscConfig+0x63c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	e013      	b.n	8003278 <HAL_RCC_OscConfig+0x378>
 8003250:	2302      	movs	r3, #2
 8003252:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003256:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800325a:	fa93 f3a3 	rbit	r3, r3
 800325e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003262:	2302      	movs	r3, #2
 8003264:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003268:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800326c:	fa93 f3a3 	rbit	r3, r3
 8003270:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003274:	4bb1      	ldr	r3, [pc, #708]	; (800353c <HAL_RCC_OscConfig+0x63c>)
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	2202      	movs	r2, #2
 800327a:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800327e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003282:	fa92 f2a2 	rbit	r2, r2
 8003286:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800328a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800328e:	fab2 f282 	clz	r2, r2
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	f042 0220 	orr.w	r2, r2, #32
 8003298:	b2d2      	uxtb	r2, r2
 800329a:	f002 021f 	and.w	r2, r2, #31
 800329e:	2101      	movs	r1, #1
 80032a0:	fa01 f202 	lsl.w	r2, r1, r2
 80032a4:	4013      	ands	r3, r2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d007      	beq.n	80032ba <HAL_RCC_OscConfig+0x3ba>
 80032aa:	1d3b      	adds	r3, r7, #4
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d002      	beq.n	80032ba <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	f000 bd31 	b.w	8003d1c <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ba:	4ba0      	ldr	r3, [pc, #640]	; (800353c <HAL_RCC_OscConfig+0x63c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032c2:	1d3b      	adds	r3, r7, #4
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	21f8      	movs	r1, #248	; 0xf8
 80032ca:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ce:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80032d2:	fa91 f1a1 	rbit	r1, r1
 80032d6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80032da:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80032de:	fab1 f181 	clz	r1, r1
 80032e2:	b2c9      	uxtb	r1, r1
 80032e4:	408b      	lsls	r3, r1
 80032e6:	4995      	ldr	r1, [pc, #596]	; (800353c <HAL_RCC_OscConfig+0x63c>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ec:	e0f5      	b.n	80034da <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032ee:	1d3b      	adds	r3, r7, #4
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 8085 	beq.w	8003404 <HAL_RCC_OscConfig+0x504>
 80032fa:	2301      	movs	r3, #1
 80032fc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003300:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003304:	fa93 f3a3 	rbit	r3, r3
 8003308:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800330c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003310:	fab3 f383 	clz	r3, r3
 8003314:	b2db      	uxtb	r3, r3
 8003316:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800331a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	461a      	mov	r2, r3
 8003322:	2301      	movs	r3, #1
 8003324:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003326:	f7fe f8b9 	bl	800149c <HAL_GetTick>
 800332a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800332e:	e00a      	b.n	8003346 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003330:	f7fe f8b4 	bl	800149c <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d902      	bls.n	8003346 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	f000 bceb 	b.w	8003d1c <HAL_RCC_OscConfig+0xe1c>
 8003346:	2302      	movs	r3, #2
 8003348:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003350:	fa93 f3a3 	rbit	r3, r3
 8003354:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003358:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800335c:	fab3 f383 	clz	r3, r3
 8003360:	b2db      	uxtb	r3, r3
 8003362:	095b      	lsrs	r3, r3, #5
 8003364:	b2db      	uxtb	r3, r3
 8003366:	f043 0301 	orr.w	r3, r3, #1
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b01      	cmp	r3, #1
 800336e:	d102      	bne.n	8003376 <HAL_RCC_OscConfig+0x476>
 8003370:	4b72      	ldr	r3, [pc, #456]	; (800353c <HAL_RCC_OscConfig+0x63c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	e013      	b.n	800339e <HAL_RCC_OscConfig+0x49e>
 8003376:	2302      	movs	r3, #2
 8003378:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003380:	fa93 f3a3 	rbit	r3, r3
 8003384:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003388:	2302      	movs	r3, #2
 800338a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800338e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003392:	fa93 f3a3 	rbit	r3, r3
 8003396:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800339a:	4b68      	ldr	r3, [pc, #416]	; (800353c <HAL_RCC_OscConfig+0x63c>)
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	2202      	movs	r2, #2
 80033a0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80033a4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80033a8:	fa92 f2a2 	rbit	r2, r2
 80033ac:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80033b0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80033b4:	fab2 f282 	clz	r2, r2
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	f042 0220 	orr.w	r2, r2, #32
 80033be:	b2d2      	uxtb	r2, r2
 80033c0:	f002 021f 	and.w	r2, r2, #31
 80033c4:	2101      	movs	r1, #1
 80033c6:	fa01 f202 	lsl.w	r2, r1, r2
 80033ca:	4013      	ands	r3, r2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0af      	beq.n	8003330 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d0:	4b5a      	ldr	r3, [pc, #360]	; (800353c <HAL_RCC_OscConfig+0x63c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033d8:	1d3b      	adds	r3, r7, #4
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	21f8      	movs	r1, #248	; 0xf8
 80033e0:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e4:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80033e8:	fa91 f1a1 	rbit	r1, r1
 80033ec:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80033f0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80033f4:	fab1 f181 	clz	r1, r1
 80033f8:	b2c9      	uxtb	r1, r1
 80033fa:	408b      	lsls	r3, r1
 80033fc:	494f      	ldr	r1, [pc, #316]	; (800353c <HAL_RCC_OscConfig+0x63c>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	600b      	str	r3, [r1, #0]
 8003402:	e06a      	b.n	80034da <HAL_RCC_OscConfig+0x5da>
 8003404:	2301      	movs	r3, #1
 8003406:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800340e:	fa93 f3a3 	rbit	r3, r3
 8003412:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003416:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800341a:	fab3 f383 	clz	r3, r3
 800341e:	b2db      	uxtb	r3, r3
 8003420:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003424:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	461a      	mov	r2, r3
 800342c:	2300      	movs	r3, #0
 800342e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003430:	f7fe f834 	bl	800149c <HAL_GetTick>
 8003434:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003438:	e00a      	b.n	8003450 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800343a:	f7fe f82f 	bl	800149c <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d902      	bls.n	8003450 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	f000 bc66 	b.w	8003d1c <HAL_RCC_OscConfig+0xe1c>
 8003450:	2302      	movs	r3, #2
 8003452:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003456:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800345a:	fa93 f3a3 	rbit	r3, r3
 800345e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003462:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003466:	fab3 f383 	clz	r3, r3
 800346a:	b2db      	uxtb	r3, r3
 800346c:	095b      	lsrs	r3, r3, #5
 800346e:	b2db      	uxtb	r3, r3
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b01      	cmp	r3, #1
 8003478:	d102      	bne.n	8003480 <HAL_RCC_OscConfig+0x580>
 800347a:	4b30      	ldr	r3, [pc, #192]	; (800353c <HAL_RCC_OscConfig+0x63c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	e013      	b.n	80034a8 <HAL_RCC_OscConfig+0x5a8>
 8003480:	2302      	movs	r3, #2
 8003482:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003486:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800348a:	fa93 f3a3 	rbit	r3, r3
 800348e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003492:	2302      	movs	r3, #2
 8003494:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003498:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800349c:	fa93 f3a3 	rbit	r3, r3
 80034a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80034a4:	4b25      	ldr	r3, [pc, #148]	; (800353c <HAL_RCC_OscConfig+0x63c>)
 80034a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a8:	2202      	movs	r2, #2
 80034aa:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80034ae:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80034b2:	fa92 f2a2 	rbit	r2, r2
 80034b6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80034ba:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80034be:	fab2 f282 	clz	r2, r2
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	f042 0220 	orr.w	r2, r2, #32
 80034c8:	b2d2      	uxtb	r2, r2
 80034ca:	f002 021f 	and.w	r2, r2, #31
 80034ce:	2101      	movs	r1, #1
 80034d0:	fa01 f202 	lsl.w	r2, r1, r2
 80034d4:	4013      	ands	r3, r2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1af      	bne.n	800343a <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034da:	1d3b      	adds	r3, r7, #4
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 80da 	beq.w	800369e <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034ea:	1d3b      	adds	r3, r7, #4
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d069      	beq.n	80035c8 <HAL_RCC_OscConfig+0x6c8>
 80034f4:	2301      	movs	r3, #1
 80034f6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034fe:	fa93 f3a3 	rbit	r3, r3
 8003502:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003506:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800350a:	fab3 f383 	clz	r3, r3
 800350e:	b2db      	uxtb	r3, r3
 8003510:	461a      	mov	r2, r3
 8003512:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <HAL_RCC_OscConfig+0x640>)
 8003514:	4413      	add	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	461a      	mov	r2, r3
 800351a:	2301      	movs	r3, #1
 800351c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800351e:	f7fd ffbd 	bl	800149c <HAL_GetTick>
 8003522:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003526:	e00d      	b.n	8003544 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003528:	f7fd ffb8 	bl	800149c <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d905      	bls.n	8003544 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e3ef      	b.n	8003d1c <HAL_RCC_OscConfig+0xe1c>
 800353c:	40021000 	.word	0x40021000
 8003540:	10908120 	.word	0x10908120
 8003544:	2302      	movs	r3, #2
 8003546:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800354e:	fa93 f2a3 	rbit	r2, r3
 8003552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800355c:	2202      	movs	r2, #2
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	fa93 f2a3 	rbit	r2, r3
 800356a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003574:	2202      	movs	r2, #2
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	fa93 f2a3 	rbit	r2, r3
 8003582:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003586:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003588:	4ba4      	ldr	r3, [pc, #656]	; (800381c <HAL_RCC_OscConfig+0x91c>)
 800358a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800358c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003590:	2102      	movs	r1, #2
 8003592:	6019      	str	r1, [r3, #0]
 8003594:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	fa93 f1a3 	rbit	r1, r3
 800359e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80035a2:	6019      	str	r1, [r3, #0]
  return result;
 80035a4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	fab3 f383 	clz	r3, r3
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	f003 031f 	and.w	r3, r3, #31
 80035ba:	2101      	movs	r1, #1
 80035bc:	fa01 f303 	lsl.w	r3, r1, r3
 80035c0:	4013      	ands	r3, r2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0b0      	beq.n	8003528 <HAL_RCC_OscConfig+0x628>
 80035c6:	e06a      	b.n	800369e <HAL_RCC_OscConfig+0x79e>
 80035c8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80035cc:	2201      	movs	r2, #1
 80035ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	fa93 f2a3 	rbit	r2, r3
 80035da:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80035de:	601a      	str	r2, [r3, #0]
  return result;
 80035e0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80035e4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035e6:	fab3 f383 	clz	r3, r3
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	461a      	mov	r2, r3
 80035ee:	4b8c      	ldr	r3, [pc, #560]	; (8003820 <HAL_RCC_OscConfig+0x920>)
 80035f0:	4413      	add	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	461a      	mov	r2, r3
 80035f6:	2300      	movs	r3, #0
 80035f8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035fa:	f7fd ff4f 	bl	800149c <HAL_GetTick>
 80035fe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003602:	e009      	b.n	8003618 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003604:	f7fd ff4a 	bl	800149c <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e381      	b.n	8003d1c <HAL_RCC_OscConfig+0xe1c>
 8003618:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800361c:	2202      	movs	r2, #2
 800361e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003620:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	fa93 f2a3 	rbit	r2, r3
 800362a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003634:	2202      	movs	r2, #2
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	fa93 f2a3 	rbit	r2, r3
 8003642:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800364c:	2202      	movs	r2, #2
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	fa93 f2a3 	rbit	r2, r3
 800365a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800365e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003660:	4b6e      	ldr	r3, [pc, #440]	; (800381c <HAL_RCC_OscConfig+0x91c>)
 8003662:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003664:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003668:	2102      	movs	r1, #2
 800366a:	6019      	str	r1, [r3, #0]
 800366c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	fa93 f1a3 	rbit	r1, r3
 8003676:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800367a:	6019      	str	r1, [r3, #0]
  return result;
 800367c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	fab3 f383 	clz	r3, r3
 8003686:	b2db      	uxtb	r3, r3
 8003688:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800368c:	b2db      	uxtb	r3, r3
 800368e:	f003 031f 	and.w	r3, r3, #31
 8003692:	2101      	movs	r1, #1
 8003694:	fa01 f303 	lsl.w	r3, r1, r3
 8003698:	4013      	ands	r3, r2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1b2      	bne.n	8003604 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800369e:	1d3b      	adds	r3, r7, #4
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 8157 	beq.w	800395c <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ae:	2300      	movs	r3, #0
 80036b0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036b4:	4b59      	ldr	r3, [pc, #356]	; (800381c <HAL_RCC_OscConfig+0x91c>)
 80036b6:	69db      	ldr	r3, [r3, #28]
 80036b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d112      	bne.n	80036e6 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036c0:	4b56      	ldr	r3, [pc, #344]	; (800381c <HAL_RCC_OscConfig+0x91c>)
 80036c2:	69db      	ldr	r3, [r3, #28]
 80036c4:	4a55      	ldr	r2, [pc, #340]	; (800381c <HAL_RCC_OscConfig+0x91c>)
 80036c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ca:	61d3      	str	r3, [r2, #28]
 80036cc:	4b53      	ldr	r3, [pc, #332]	; (800381c <HAL_RCC_OscConfig+0x91c>)
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80036d4:	f107 030c 	add.w	r3, r7, #12
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	f107 030c 	add.w	r3, r7, #12
 80036de:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80036e0:	2301      	movs	r3, #1
 80036e2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e6:	4b4f      	ldr	r3, [pc, #316]	; (8003824 <HAL_RCC_OscConfig+0x924>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d11a      	bne.n	8003728 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036f2:	4b4c      	ldr	r3, [pc, #304]	; (8003824 <HAL_RCC_OscConfig+0x924>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a4b      	ldr	r2, [pc, #300]	; (8003824 <HAL_RCC_OscConfig+0x924>)
 80036f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036fc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036fe:	f7fd fecd 	bl	800149c <HAL_GetTick>
 8003702:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003706:	e009      	b.n	800371c <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003708:	f7fd fec8 	bl	800149c <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b64      	cmp	r3, #100	; 0x64
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e2ff      	b.n	8003d1c <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800371c:	4b41      	ldr	r3, [pc, #260]	; (8003824 <HAL_RCC_OscConfig+0x924>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0ef      	beq.n	8003708 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003728:	1d3b      	adds	r3, r7, #4
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d106      	bne.n	8003740 <HAL_RCC_OscConfig+0x840>
 8003732:	4b3a      	ldr	r3, [pc, #232]	; (800381c <HAL_RCC_OscConfig+0x91c>)
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	4a39      	ldr	r2, [pc, #228]	; (800381c <HAL_RCC_OscConfig+0x91c>)
 8003738:	f043 0301 	orr.w	r3, r3, #1
 800373c:	6213      	str	r3, [r2, #32]
 800373e:	e02f      	b.n	80037a0 <HAL_RCC_OscConfig+0x8a0>
 8003740:	1d3b      	adds	r3, r7, #4
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10c      	bne.n	8003764 <HAL_RCC_OscConfig+0x864>
 800374a:	4b34      	ldr	r3, [pc, #208]	; (800381c <HAL_RCC_OscConfig+0x91c>)
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	4a33      	ldr	r2, [pc, #204]	; (800381c <HAL_RCC_OscConfig+0x91c>)
 8003750:	f023 0301 	bic.w	r3, r3, #1
 8003754:	6213      	str	r3, [r2, #32]
 8003756:	4b31      	ldr	r3, [pc, #196]	; (800381c <HAL_RCC_OscConfig+0x91c>)
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	4a30      	ldr	r2, [pc, #192]	; (800381c <HAL_RCC_OscConfig+0x91c>)
 800375c:	f023 0304 	bic.w	r3, r3, #4
 8003760:	6213      	str	r3, [r2, #32]
 8003762:	e01d      	b.n	80037a0 <HAL_RCC_OscConfig+0x8a0>
 8003764:	1d3b      	adds	r3, r7, #4
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	2b05      	cmp	r3, #5
 800376c:	d10c      	bne.n	8003788 <HAL_RCC_OscConfig+0x888>
 800376e:	4b2b      	ldr	r3, [pc, #172]	; (800381c <HAL_RCC_OscConfig+0x91c>)
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	4a2a      	ldr	r2, [pc, #168]	; (800381c <HAL_RCC_OscConfig+0x91c>)
 8003774:	f043 0304 	orr.w	r3, r3, #4
 8003778:	6213      	str	r3, [r2, #32]
 800377a:	4b28      	ldr	r3, [pc, #160]	; (800381c <HAL_RCC_OscConfig+0x91c>)
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	4a27      	ldr	r2, [pc, #156]	; (800381c <HAL_RCC_OscConfig+0x91c>)
 8003780:	f043 0301 	orr.w	r3, r3, #1
 8003784:	6213      	str	r3, [r2, #32]
 8003786:	e00b      	b.n	80037a0 <HAL_RCC_OscConfig+0x8a0>
 8003788:	4b24      	ldr	r3, [pc, #144]	; (800381c <HAL_RCC_OscConfig+0x91c>)
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	4a23      	ldr	r2, [pc, #140]	; (800381c <HAL_RCC_OscConfig+0x91c>)
 800378e:	f023 0301 	bic.w	r3, r3, #1
 8003792:	6213      	str	r3, [r2, #32]
 8003794:	4b21      	ldr	r3, [pc, #132]	; (800381c <HAL_RCC_OscConfig+0x91c>)
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	4a20      	ldr	r2, [pc, #128]	; (800381c <HAL_RCC_OscConfig+0x91c>)
 800379a:	f023 0304 	bic.w	r3, r3, #4
 800379e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037a0:	1d3b      	adds	r3, r7, #4
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d06a      	beq.n	8003880 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037aa:	f7fd fe77 	bl	800149c <HAL_GetTick>
 80037ae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b2:	e00b      	b.n	80037cc <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037b4:	f7fd fe72 	bl	800149c <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e2a7      	b.n	8003d1c <HAL_RCC_OscConfig+0xe1c>
 80037cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80037d0:	2202      	movs	r2, #2
 80037d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	fa93 f2a3 	rbit	r2, r3
 80037de:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80037e8:	2202      	movs	r2, #2
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	fa93 f2a3 	rbit	r2, r3
 80037f6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80037fa:	601a      	str	r2, [r3, #0]
  return result;
 80037fc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003800:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003802:	fab3 f383 	clz	r3, r3
 8003806:	b2db      	uxtb	r3, r3
 8003808:	095b      	lsrs	r3, r3, #5
 800380a:	b2db      	uxtb	r3, r3
 800380c:	f043 0302 	orr.w	r3, r3, #2
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d108      	bne.n	8003828 <HAL_RCC_OscConfig+0x928>
 8003816:	4b01      	ldr	r3, [pc, #4]	; (800381c <HAL_RCC_OscConfig+0x91c>)
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	e013      	b.n	8003844 <HAL_RCC_OscConfig+0x944>
 800381c:	40021000 	.word	0x40021000
 8003820:	10908120 	.word	0x10908120
 8003824:	40007000 	.word	0x40007000
 8003828:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800382c:	2202      	movs	r2, #2
 800382e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003830:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	fa93 f2a3 	rbit	r2, r3
 800383a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	4bc0      	ldr	r3, [pc, #768]	; (8003b44 <HAL_RCC_OscConfig+0xc44>)
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003848:	2102      	movs	r1, #2
 800384a:	6011      	str	r1, [r2, #0]
 800384c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003850:	6812      	ldr	r2, [r2, #0]
 8003852:	fa92 f1a2 	rbit	r1, r2
 8003856:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800385a:	6011      	str	r1, [r2, #0]
  return result;
 800385c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003860:	6812      	ldr	r2, [r2, #0]
 8003862:	fab2 f282 	clz	r2, r2
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800386c:	b2d2      	uxtb	r2, r2
 800386e:	f002 021f 	and.w	r2, r2, #31
 8003872:	2101      	movs	r1, #1
 8003874:	fa01 f202 	lsl.w	r2, r1, r2
 8003878:	4013      	ands	r3, r2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d09a      	beq.n	80037b4 <HAL_RCC_OscConfig+0x8b4>
 800387e:	e063      	b.n	8003948 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003880:	f7fd fe0c 	bl	800149c <HAL_GetTick>
 8003884:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003888:	e00b      	b.n	80038a2 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800388a:	f7fd fe07 	bl	800149c <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	f241 3288 	movw	r2, #5000	; 0x1388
 800389a:	4293      	cmp	r3, r2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e23c      	b.n	8003d1c <HAL_RCC_OscConfig+0xe1c>
 80038a2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80038a6:	2202      	movs	r2, #2
 80038a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038aa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	fa93 f2a3 	rbit	r2, r3
 80038b4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80038be:	2202      	movs	r2, #2
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	fa93 f2a3 	rbit	r2, r3
 80038cc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80038d0:	601a      	str	r2, [r3, #0]
  return result;
 80038d2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80038d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d8:	fab3 f383 	clz	r3, r3
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	095b      	lsrs	r3, r3, #5
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	f043 0302 	orr.w	r3, r3, #2
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d102      	bne.n	80038f2 <HAL_RCC_OscConfig+0x9f2>
 80038ec:	4b95      	ldr	r3, [pc, #596]	; (8003b44 <HAL_RCC_OscConfig+0xc44>)
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	e00d      	b.n	800390e <HAL_RCC_OscConfig+0xa0e>
 80038f2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80038f6:	2202      	movs	r2, #2
 80038f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	fa93 f2a3 	rbit	r2, r3
 8003904:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	4b8e      	ldr	r3, [pc, #568]	; (8003b44 <HAL_RCC_OscConfig+0xc44>)
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003912:	2102      	movs	r1, #2
 8003914:	6011      	str	r1, [r2, #0]
 8003916:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800391a:	6812      	ldr	r2, [r2, #0]
 800391c:	fa92 f1a2 	rbit	r1, r2
 8003920:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003924:	6011      	str	r1, [r2, #0]
  return result;
 8003926:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800392a:	6812      	ldr	r2, [r2, #0]
 800392c:	fab2 f282 	clz	r2, r2
 8003930:	b2d2      	uxtb	r2, r2
 8003932:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003936:	b2d2      	uxtb	r2, r2
 8003938:	f002 021f 	and.w	r2, r2, #31
 800393c:	2101      	movs	r1, #1
 800393e:	fa01 f202 	lsl.w	r2, r1, r2
 8003942:	4013      	ands	r3, r2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1a0      	bne.n	800388a <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003948:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800394c:	2b01      	cmp	r3, #1
 800394e:	d105      	bne.n	800395c <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003950:	4b7c      	ldr	r3, [pc, #496]	; (8003b44 <HAL_RCC_OscConfig+0xc44>)
 8003952:	69db      	ldr	r3, [r3, #28]
 8003954:	4a7b      	ldr	r2, [pc, #492]	; (8003b44 <HAL_RCC_OscConfig+0xc44>)
 8003956:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800395a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800395c:	1d3b      	adds	r3, r7, #4
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 81d9 	beq.w	8003d1a <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003968:	4b76      	ldr	r3, [pc, #472]	; (8003b44 <HAL_RCC_OscConfig+0xc44>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f003 030c 	and.w	r3, r3, #12
 8003970:	2b08      	cmp	r3, #8
 8003972:	f000 81a6 	beq.w	8003cc2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003976:	1d3b      	adds	r3, r7, #4
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	2b02      	cmp	r3, #2
 800397e:	f040 811e 	bne.w	8003bbe <HAL_RCC_OscConfig+0xcbe>
 8003982:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003986:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800398a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	fa93 f2a3 	rbit	r2, r3
 8003996:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800399a:	601a      	str	r2, [r3, #0]
  return result;
 800399c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80039a0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a2:	fab3 f383 	clz	r3, r3
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	461a      	mov	r2, r3
 80039b4:	2300      	movs	r3, #0
 80039b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b8:	f7fd fd70 	bl	800149c <HAL_GetTick>
 80039bc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039c0:	e009      	b.n	80039d6 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039c2:	f7fd fd6b 	bl	800149c <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e1a2      	b.n	8003d1c <HAL_RCC_OscConfig+0xe1c>
 80039d6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80039da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	fa93 f2a3 	rbit	r2, r3
 80039ea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80039ee:	601a      	str	r2, [r3, #0]
  return result;
 80039f0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80039f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039f6:	fab3 f383 	clz	r3, r3
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	095b      	lsrs	r3, r3, #5
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	f043 0301 	orr.w	r3, r3, #1
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d102      	bne.n	8003a10 <HAL_RCC_OscConfig+0xb10>
 8003a0a:	4b4e      	ldr	r3, [pc, #312]	; (8003b44 <HAL_RCC_OscConfig+0xc44>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	e01b      	b.n	8003a48 <HAL_RCC_OscConfig+0xb48>
 8003a10:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003a14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	fa93 f2a3 	rbit	r2, r3
 8003a24:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003a2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	fa93 f2a3 	rbit	r2, r3
 8003a3e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003a42:	601a      	str	r2, [r3, #0]
 8003a44:	4b3f      	ldr	r3, [pc, #252]	; (8003b44 <HAL_RCC_OscConfig+0xc44>)
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003a4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a50:	6011      	str	r1, [r2, #0]
 8003a52:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003a56:	6812      	ldr	r2, [r2, #0]
 8003a58:	fa92 f1a2 	rbit	r1, r2
 8003a5c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003a60:	6011      	str	r1, [r2, #0]
  return result;
 8003a62:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003a66:	6812      	ldr	r2, [r2, #0]
 8003a68:	fab2 f282 	clz	r2, r2
 8003a6c:	b2d2      	uxtb	r2, r2
 8003a6e:	f042 0220 	orr.w	r2, r2, #32
 8003a72:	b2d2      	uxtb	r2, r2
 8003a74:	f002 021f 	and.w	r2, r2, #31
 8003a78:	2101      	movs	r1, #1
 8003a7a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a7e:	4013      	ands	r3, r2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d19e      	bne.n	80039c2 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a84:	4b2f      	ldr	r3, [pc, #188]	; (8003b44 <HAL_RCC_OscConfig+0xc44>)
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	f023 020f 	bic.w	r2, r3, #15
 8003a8c:	1d3b      	adds	r3, r7, #4
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	492c      	ldr	r1, [pc, #176]	; (8003b44 <HAL_RCC_OscConfig+0xc44>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003a98:	4b2a      	ldr	r3, [pc, #168]	; (8003b44 <HAL_RCC_OscConfig+0xc44>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003aa0:	1d3b      	adds	r3, r7, #4
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6a19      	ldr	r1, [r3, #32]
 8003aa6:	1d3b      	adds	r3, r7, #4
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	430b      	orrs	r3, r1
 8003aae:	4925      	ldr	r1, [pc, #148]	; (8003b44 <HAL_RCC_OscConfig+0xc44>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	604b      	str	r3, [r1, #4]
 8003ab4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003ab8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003abc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	fa93 f2a3 	rbit	r2, r3
 8003ac8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003acc:	601a      	str	r2, [r3, #0]
  return result;
 8003ace:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003ad2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ad4:	fab3 f383 	clz	r3, r3
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ade:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aea:	f7fd fcd7 	bl	800149c <HAL_GetTick>
 8003aee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003af2:	e009      	b.n	8003b08 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003af4:	f7fd fcd2 	bl	800149c <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e109      	b.n	8003d1c <HAL_RCC_OscConfig+0xe1c>
 8003b08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b12:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	fa93 f2a3 	rbit	r2, r3
 8003b1c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b20:	601a      	str	r2, [r3, #0]
  return result;
 8003b22:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b26:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b28:	fab3 f383 	clz	r3, r3
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	095b      	lsrs	r3, r3, #5
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	f043 0301 	orr.w	r3, r3, #1
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d105      	bne.n	8003b48 <HAL_RCC_OscConfig+0xc48>
 8003b3c:	4b01      	ldr	r3, [pc, #4]	; (8003b44 <HAL_RCC_OscConfig+0xc44>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	e01e      	b.n	8003b80 <HAL_RCC_OscConfig+0xc80>
 8003b42:	bf00      	nop
 8003b44:	40021000 	.word	0x40021000
 8003b48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003b4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b52:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	fa93 f2a3 	rbit	r2, r3
 8003b5c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003b66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	fa93 f2a3 	rbit	r2, r3
 8003b76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	4b6a      	ldr	r3, [pc, #424]	; (8003d28 <HAL_RCC_OscConfig+0xe28>)
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003b84:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003b88:	6011      	str	r1, [r2, #0]
 8003b8a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003b8e:	6812      	ldr	r2, [r2, #0]
 8003b90:	fa92 f1a2 	rbit	r1, r2
 8003b94:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003b98:	6011      	str	r1, [r2, #0]
  return result;
 8003b9a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003b9e:	6812      	ldr	r2, [r2, #0]
 8003ba0:	fab2 f282 	clz	r2, r2
 8003ba4:	b2d2      	uxtb	r2, r2
 8003ba6:	f042 0220 	orr.w	r2, r2, #32
 8003baa:	b2d2      	uxtb	r2, r2
 8003bac:	f002 021f 	and.w	r2, r2, #31
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d09b      	beq.n	8003af4 <HAL_RCC_OscConfig+0xbf4>
 8003bbc:	e0ad      	b.n	8003d1a <HAL_RCC_OscConfig+0xe1a>
 8003bbe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003bc2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003bc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	fa93 f2a3 	rbit	r2, r3
 8003bd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bd6:	601a      	str	r2, [r3, #0]
  return result;
 8003bd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bdc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bde:	fab3 f383 	clz	r3, r3
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003be8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	461a      	mov	r2, r3
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf4:	f7fd fc52 	bl	800149c <HAL_GetTick>
 8003bf8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bfc:	e009      	b.n	8003c12 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bfe:	f7fd fc4d 	bl	800149c <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e084      	b.n	8003d1c <HAL_RCC_OscConfig+0xe1c>
 8003c12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	fa93 f2a3 	rbit	r2, r3
 8003c26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c2a:	601a      	str	r2, [r3, #0]
  return result;
 8003c2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c30:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c32:	fab3 f383 	clz	r3, r3
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	095b      	lsrs	r3, r3, #5
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	f043 0301 	orr.w	r3, r3, #1
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d102      	bne.n	8003c4c <HAL_RCC_OscConfig+0xd4c>
 8003c46:	4b38      	ldr	r3, [pc, #224]	; (8003d28 <HAL_RCC_OscConfig+0xe28>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	e01b      	b.n	8003c84 <HAL_RCC_OscConfig+0xd84>
 8003c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	fa93 f2a3 	rbit	r2, r3
 8003c60:	f107 0320 	add.w	r3, r7, #32
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	f107 031c 	add.w	r3, r7, #28
 8003c6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	f107 031c 	add.w	r3, r7, #28
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	fa93 f2a3 	rbit	r2, r3
 8003c7a:	f107 0318 	add.w	r3, r7, #24
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	4b29      	ldr	r3, [pc, #164]	; (8003d28 <HAL_RCC_OscConfig+0xe28>)
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	f107 0214 	add.w	r2, r7, #20
 8003c88:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003c8c:	6011      	str	r1, [r2, #0]
 8003c8e:	f107 0214 	add.w	r2, r7, #20
 8003c92:	6812      	ldr	r2, [r2, #0]
 8003c94:	fa92 f1a2 	rbit	r1, r2
 8003c98:	f107 0210 	add.w	r2, r7, #16
 8003c9c:	6011      	str	r1, [r2, #0]
  return result;
 8003c9e:	f107 0210 	add.w	r2, r7, #16
 8003ca2:	6812      	ldr	r2, [r2, #0]
 8003ca4:	fab2 f282 	clz	r2, r2
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	f042 0220 	orr.w	r2, r2, #32
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	f002 021f 	and.w	r2, r2, #31
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8003cba:	4013      	ands	r3, r2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d19e      	bne.n	8003bfe <HAL_RCC_OscConfig+0xcfe>
 8003cc0:	e02b      	b.n	8003d1a <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cc2:	1d3b      	adds	r3, r7, #4
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d101      	bne.n	8003cd0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e025      	b.n	8003d1c <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cd0:	4b15      	ldr	r3, [pc, #84]	; (8003d28 <HAL_RCC_OscConfig+0xe28>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003cd8:	4b13      	ldr	r3, [pc, #76]	; (8003d28 <HAL_RCC_OscConfig+0xe28>)
 8003cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cdc:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003ce0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003ce4:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003ce8:	1d3b      	adds	r3, r7, #4
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d111      	bne.n	8003d16 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003cf2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003cf6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003cfa:	1d3b      	adds	r3, r7, #4
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d108      	bne.n	8003d16 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003d04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d08:	f003 020f 	and.w	r2, r3, #15
 8003d0c:	1d3b      	adds	r3, r7, #4
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d001      	beq.n	8003d1a <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	40021000 	.word	0x40021000

08003d2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b09e      	sub	sp, #120	; 0x78
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e162      	b.n	800400a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d44:	4b90      	ldr	r3, [pc, #576]	; (8003f88 <HAL_RCC_ClockConfig+0x25c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d910      	bls.n	8003d74 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d52:	4b8d      	ldr	r3, [pc, #564]	; (8003f88 <HAL_RCC_ClockConfig+0x25c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f023 0207 	bic.w	r2, r3, #7
 8003d5a:	498b      	ldr	r1, [pc, #556]	; (8003f88 <HAL_RCC_ClockConfig+0x25c>)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d62:	4b89      	ldr	r3, [pc, #548]	; (8003f88 <HAL_RCC_ClockConfig+0x25c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d001      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e14a      	b.n	800400a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d008      	beq.n	8003d92 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d80:	4b82      	ldr	r3, [pc, #520]	; (8003f8c <HAL_RCC_ClockConfig+0x260>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	497f      	ldr	r1, [pc, #508]	; (8003f8c <HAL_RCC_ClockConfig+0x260>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 80dc 	beq.w	8003f58 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d13c      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xf6>
 8003da8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dac:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003db0:	fa93 f3a3 	rbit	r3, r3
 8003db4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db8:	fab3 f383 	clz	r3, r3
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	095b      	lsrs	r3, r3, #5
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	f043 0301 	orr.w	r3, r3, #1
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d102      	bne.n	8003dd2 <HAL_RCC_ClockConfig+0xa6>
 8003dcc:	4b6f      	ldr	r3, [pc, #444]	; (8003f8c <HAL_RCC_ClockConfig+0x260>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	e00f      	b.n	8003df2 <HAL_RCC_ClockConfig+0xc6>
 8003dd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dd6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dda:	fa93 f3a3 	rbit	r3, r3
 8003dde:	667b      	str	r3, [r7, #100]	; 0x64
 8003de0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003de4:	663b      	str	r3, [r7, #96]	; 0x60
 8003de6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003de8:	fa93 f3a3 	rbit	r3, r3
 8003dec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003dee:	4b67      	ldr	r3, [pc, #412]	; (8003f8c <HAL_RCC_ClockConfig+0x260>)
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003df6:	65ba      	str	r2, [r7, #88]	; 0x58
 8003df8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dfa:	fa92 f2a2 	rbit	r2, r2
 8003dfe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003e00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e02:	fab2 f282 	clz	r2, r2
 8003e06:	b2d2      	uxtb	r2, r2
 8003e08:	f042 0220 	orr.w	r2, r2, #32
 8003e0c:	b2d2      	uxtb	r2, r2
 8003e0e:	f002 021f 	and.w	r2, r2, #31
 8003e12:	2101      	movs	r1, #1
 8003e14:	fa01 f202 	lsl.w	r2, r1, r2
 8003e18:	4013      	ands	r3, r2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d17b      	bne.n	8003f16 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e0f3      	b.n	800400a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d13c      	bne.n	8003ea4 <HAL_RCC_ClockConfig+0x178>
 8003e2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e2e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e32:	fa93 f3a3 	rbit	r3, r3
 8003e36:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003e38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e3a:	fab3 f383 	clz	r3, r3
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	095b      	lsrs	r3, r3, #5
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d102      	bne.n	8003e54 <HAL_RCC_ClockConfig+0x128>
 8003e4e:	4b4f      	ldr	r3, [pc, #316]	; (8003f8c <HAL_RCC_ClockConfig+0x260>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	e00f      	b.n	8003e74 <HAL_RCC_ClockConfig+0x148>
 8003e54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e58:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e5c:	fa93 f3a3 	rbit	r3, r3
 8003e60:	647b      	str	r3, [r7, #68]	; 0x44
 8003e62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e66:	643b      	str	r3, [r7, #64]	; 0x40
 8003e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e6a:	fa93 f3a3 	rbit	r3, r3
 8003e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e70:	4b46      	ldr	r3, [pc, #280]	; (8003f8c <HAL_RCC_ClockConfig+0x260>)
 8003e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e78:	63ba      	str	r2, [r7, #56]	; 0x38
 8003e7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e7c:	fa92 f2a2 	rbit	r2, r2
 8003e80:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003e82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e84:	fab2 f282 	clz	r2, r2
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	f042 0220 	orr.w	r2, r2, #32
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	f002 021f 	and.w	r2, r2, #31
 8003e94:	2101      	movs	r1, #1
 8003e96:	fa01 f202 	lsl.w	r2, r1, r2
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d13a      	bne.n	8003f16 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e0b2      	b.n	800400a <HAL_RCC_ClockConfig+0x2de>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eaa:	fa93 f3a3 	rbit	r3, r3
 8003eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb2:	fab3 f383 	clz	r3, r3
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	095b      	lsrs	r3, r3, #5
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	f043 0301 	orr.w	r3, r3, #1
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d102      	bne.n	8003ecc <HAL_RCC_ClockConfig+0x1a0>
 8003ec6:	4b31      	ldr	r3, [pc, #196]	; (8003f8c <HAL_RCC_ClockConfig+0x260>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	e00d      	b.n	8003ee8 <HAL_RCC_ClockConfig+0x1bc>
 8003ecc:	2302      	movs	r3, #2
 8003ece:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed2:	fa93 f3a3 	rbit	r3, r3
 8003ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ed8:	2302      	movs	r3, #2
 8003eda:	623b      	str	r3, [r7, #32]
 8003edc:	6a3b      	ldr	r3, [r7, #32]
 8003ede:	fa93 f3a3 	rbit	r3, r3
 8003ee2:	61fb      	str	r3, [r7, #28]
 8003ee4:	4b29      	ldr	r3, [pc, #164]	; (8003f8c <HAL_RCC_ClockConfig+0x260>)
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	2202      	movs	r2, #2
 8003eea:	61ba      	str	r2, [r7, #24]
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	fa92 f2a2 	rbit	r2, r2
 8003ef2:	617a      	str	r2, [r7, #20]
  return result;
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	fab2 f282 	clz	r2, r2
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	f042 0220 	orr.w	r2, r2, #32
 8003f00:	b2d2      	uxtb	r2, r2
 8003f02:	f002 021f 	and.w	r2, r2, #31
 8003f06:	2101      	movs	r1, #1
 8003f08:	fa01 f202 	lsl.w	r2, r1, r2
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e079      	b.n	800400a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f16:	4b1d      	ldr	r3, [pc, #116]	; (8003f8c <HAL_RCC_ClockConfig+0x260>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f023 0203 	bic.w	r2, r3, #3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	491a      	ldr	r1, [pc, #104]	; (8003f8c <HAL_RCC_ClockConfig+0x260>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f28:	f7fd fab8 	bl	800149c <HAL_GetTick>
 8003f2c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f2e:	e00a      	b.n	8003f46 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f30:	f7fd fab4 	bl	800149c <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e061      	b.n	800400a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f46:	4b11      	ldr	r3, [pc, #68]	; (8003f8c <HAL_RCC_ClockConfig+0x260>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f003 020c 	and.w	r2, r3, #12
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d1eb      	bne.n	8003f30 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f58:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <HAL_RCC_ClockConfig+0x25c>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d214      	bcs.n	8003f90 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f66:	4b08      	ldr	r3, [pc, #32]	; (8003f88 <HAL_RCC_ClockConfig+0x25c>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f023 0207 	bic.w	r2, r3, #7
 8003f6e:	4906      	ldr	r1, [pc, #24]	; (8003f88 <HAL_RCC_ClockConfig+0x25c>)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f76:	4b04      	ldr	r3, [pc, #16]	; (8003f88 <HAL_RCC_ClockConfig+0x25c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d005      	beq.n	8003f90 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e040      	b.n	800400a <HAL_RCC_ClockConfig+0x2de>
 8003f88:	40022000 	.word	0x40022000
 8003f8c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d008      	beq.n	8003fae <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f9c:	4b1d      	ldr	r3, [pc, #116]	; (8004014 <HAL_RCC_ClockConfig+0x2e8>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	491a      	ldr	r1, [pc, #104]	; (8004014 <HAL_RCC_ClockConfig+0x2e8>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d009      	beq.n	8003fce <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fba:	4b16      	ldr	r3, [pc, #88]	; (8004014 <HAL_RCC_ClockConfig+0x2e8>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	4912      	ldr	r1, [pc, #72]	; (8004014 <HAL_RCC_ClockConfig+0x2e8>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003fce:	f000 f829 	bl	8004024 <HAL_RCC_GetSysClockFreq>
 8003fd2:	4601      	mov	r1, r0
 8003fd4:	4b0f      	ldr	r3, [pc, #60]	; (8004014 <HAL_RCC_ClockConfig+0x2e8>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fdc:	22f0      	movs	r2, #240	; 0xf0
 8003fde:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	fa92 f2a2 	rbit	r2, r2
 8003fe6:	60fa      	str	r2, [r7, #12]
  return result;
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	fab2 f282 	clz	r2, r2
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	40d3      	lsrs	r3, r2
 8003ff2:	4a09      	ldr	r2, [pc, #36]	; (8004018 <HAL_RCC_ClockConfig+0x2ec>)
 8003ff4:	5cd3      	ldrb	r3, [r2, r3]
 8003ff6:	fa21 f303 	lsr.w	r3, r1, r3
 8003ffa:	4a08      	ldr	r2, [pc, #32]	; (800401c <HAL_RCC_ClockConfig+0x2f0>)
 8003ffc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003ffe:	4b08      	ldr	r3, [pc, #32]	; (8004020 <HAL_RCC_ClockConfig+0x2f4>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4618      	mov	r0, r3
 8004004:	f7fd fa06 	bl	8001414 <HAL_InitTick>
  
  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3778      	adds	r7, #120	; 0x78
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	40021000 	.word	0x40021000
 8004018:	080060cc 	.word	0x080060cc
 800401c:	20000010 	.word	0x20000010
 8004020:	20000014 	.word	0x20000014

08004024 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004024:	b480      	push	{r7}
 8004026:	b08b      	sub	sp, #44	; 0x2c
 8004028:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800402a:	2300      	movs	r3, #0
 800402c:	61fb      	str	r3, [r7, #28]
 800402e:	2300      	movs	r3, #0
 8004030:	61bb      	str	r3, [r7, #24]
 8004032:	2300      	movs	r3, #0
 8004034:	627b      	str	r3, [r7, #36]	; 0x24
 8004036:	2300      	movs	r3, #0
 8004038:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800403a:	2300      	movs	r3, #0
 800403c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800403e:	4b2a      	ldr	r3, [pc, #168]	; (80040e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f003 030c 	and.w	r3, r3, #12
 800404a:	2b04      	cmp	r3, #4
 800404c:	d002      	beq.n	8004054 <HAL_RCC_GetSysClockFreq+0x30>
 800404e:	2b08      	cmp	r3, #8
 8004050:	d003      	beq.n	800405a <HAL_RCC_GetSysClockFreq+0x36>
 8004052:	e03f      	b.n	80040d4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004054:	4b25      	ldr	r3, [pc, #148]	; (80040ec <HAL_RCC_GetSysClockFreq+0xc8>)
 8004056:	623b      	str	r3, [r7, #32]
      break;
 8004058:	e03f      	b.n	80040da <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004060:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004064:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	fa92 f2a2 	rbit	r2, r2
 800406c:	607a      	str	r2, [r7, #4]
  return result;
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	fab2 f282 	clz	r2, r2
 8004074:	b2d2      	uxtb	r2, r2
 8004076:	40d3      	lsrs	r3, r2
 8004078:	4a1d      	ldr	r2, [pc, #116]	; (80040f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800407a:	5cd3      	ldrb	r3, [r2, r3]
 800407c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800407e:	4b1a      	ldr	r3, [pc, #104]	; (80040e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004082:	f003 030f 	and.w	r3, r3, #15
 8004086:	220f      	movs	r2, #15
 8004088:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	fa92 f2a2 	rbit	r2, r2
 8004090:	60fa      	str	r2, [r7, #12]
  return result;
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	fab2 f282 	clz	r2, r2
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	40d3      	lsrs	r3, r2
 800409c:	4a15      	ldr	r2, [pc, #84]	; (80040f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800409e:	5cd3      	ldrb	r3, [r2, r3]
 80040a0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d008      	beq.n	80040be <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80040ac:	4a0f      	ldr	r2, [pc, #60]	; (80040ec <HAL_RCC_GetSysClockFreq+0xc8>)
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	fb02 f303 	mul.w	r3, r2, r3
 80040ba:	627b      	str	r3, [r7, #36]	; 0x24
 80040bc:	e007      	b.n	80040ce <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80040be:	4a0b      	ldr	r2, [pc, #44]	; (80040ec <HAL_RCC_GetSysClockFreq+0xc8>)
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	fb02 f303 	mul.w	r3, r2, r3
 80040cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	623b      	str	r3, [r7, #32]
      break;
 80040d2:	e002      	b.n	80040da <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040d4:	4b05      	ldr	r3, [pc, #20]	; (80040ec <HAL_RCC_GetSysClockFreq+0xc8>)
 80040d6:	623b      	str	r3, [r7, #32]
      break;
 80040d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040da:	6a3b      	ldr	r3, [r7, #32]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	372c      	adds	r7, #44	; 0x2c
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	40021000 	.word	0x40021000
 80040ec:	007a1200 	.word	0x007a1200
 80040f0:	080060e4 	.word	0x080060e4
 80040f4:	080060f4 	.word	0x080060f4

080040f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040fc:	4b03      	ldr	r3, [pc, #12]	; (800410c <HAL_RCC_GetHCLKFreq+0x14>)
 80040fe:	681b      	ldr	r3, [r3, #0]
}
 8004100:	4618      	mov	r0, r3
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	20000010 	.word	0x20000010

08004110 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004116:	f7ff ffef 	bl	80040f8 <HAL_RCC_GetHCLKFreq>
 800411a:	4601      	mov	r1, r0
 800411c:	4b0b      	ldr	r3, [pc, #44]	; (800414c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004124:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004128:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	fa92 f2a2 	rbit	r2, r2
 8004130:	603a      	str	r2, [r7, #0]
  return result;
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	fab2 f282 	clz	r2, r2
 8004138:	b2d2      	uxtb	r2, r2
 800413a:	40d3      	lsrs	r3, r2
 800413c:	4a04      	ldr	r2, [pc, #16]	; (8004150 <HAL_RCC_GetPCLK1Freq+0x40>)
 800413e:	5cd3      	ldrb	r3, [r2, r3]
 8004140:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004144:	4618      	mov	r0, r3
 8004146:	3708      	adds	r7, #8
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	40021000 	.word	0x40021000
 8004150:	080060dc 	.word	0x080060dc

08004154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800415a:	f7ff ffcd 	bl	80040f8 <HAL_RCC_GetHCLKFreq>
 800415e:	4601      	mov	r1, r0
 8004160:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004168:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800416c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	fa92 f2a2 	rbit	r2, r2
 8004174:	603a      	str	r2, [r7, #0]
  return result;
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	fab2 f282 	clz	r2, r2
 800417c:	b2d2      	uxtb	r2, r2
 800417e:	40d3      	lsrs	r3, r2
 8004180:	4a04      	ldr	r2, [pc, #16]	; (8004194 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004182:	5cd3      	ldrb	r3, [r2, r3]
 8004184:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004188:	4618      	mov	r0, r3
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	40021000 	.word	0x40021000
 8004194:	080060dc 	.word	0x080060dc

08004198 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b092      	sub	sp, #72	; 0x48
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80041a4:	2300      	movs	r3, #0
 80041a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80041a8:	2300      	movs	r3, #0
 80041aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 80d4 	beq.w	8004364 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041bc:	4b4e      	ldr	r3, [pc, #312]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10e      	bne.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041c8:	4b4b      	ldr	r3, [pc, #300]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	4a4a      	ldr	r2, [pc, #296]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d2:	61d3      	str	r3, [r2, #28]
 80041d4:	4b48      	ldr	r3, [pc, #288]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041dc:	60bb      	str	r3, [r7, #8]
 80041de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041e0:	2301      	movs	r3, #1
 80041e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e6:	4b45      	ldr	r3, [pc, #276]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d118      	bne.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041f2:	4b42      	ldr	r3, [pc, #264]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a41      	ldr	r2, [pc, #260]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041fc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041fe:	f7fd f94d 	bl	800149c <HAL_GetTick>
 8004202:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004204:	e008      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004206:	f7fd f949 	bl	800149c <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b64      	cmp	r3, #100	; 0x64
 8004212:	d901      	bls.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e1d6      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004218:	4b38      	ldr	r3, [pc, #224]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0f0      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004224:	4b34      	ldr	r3, [pc, #208]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800422c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800422e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 8084 	beq.w	800433e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800423e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004240:	429a      	cmp	r2, r3
 8004242:	d07c      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004244:	4b2c      	ldr	r3, [pc, #176]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800424c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800424e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004252:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004256:	fa93 f3a3 	rbit	r3, r3
 800425a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800425c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800425e:	fab3 f383 	clz	r3, r3
 8004262:	b2db      	uxtb	r3, r3
 8004264:	461a      	mov	r2, r3
 8004266:	4b26      	ldr	r3, [pc, #152]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004268:	4413      	add	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	461a      	mov	r2, r3
 800426e:	2301      	movs	r3, #1
 8004270:	6013      	str	r3, [r2, #0]
 8004272:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004276:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800427a:	fa93 f3a3 	rbit	r3, r3
 800427e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004282:	fab3 f383 	clz	r3, r3
 8004286:	b2db      	uxtb	r3, r3
 8004288:	461a      	mov	r2, r3
 800428a:	4b1d      	ldr	r3, [pc, #116]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800428c:	4413      	add	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	461a      	mov	r2, r3
 8004292:	2300      	movs	r3, #0
 8004294:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004296:	4a18      	ldr	r2, [pc, #96]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800429a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800429c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d04b      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a6:	f7fd f8f9 	bl	800149c <HAL_GetTick>
 80042aa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ac:	e00a      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ae:	f7fd f8f5 	bl	800149c <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042bc:	4293      	cmp	r3, r2
 80042be:	d901      	bls.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e180      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80042c4:	2302      	movs	r3, #2
 80042c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ca:	fa93 f3a3 	rbit	r3, r3
 80042ce:	627b      	str	r3, [r7, #36]	; 0x24
 80042d0:	2302      	movs	r3, #2
 80042d2:	623b      	str	r3, [r7, #32]
 80042d4:	6a3b      	ldr	r3, [r7, #32]
 80042d6:	fa93 f3a3 	rbit	r3, r3
 80042da:	61fb      	str	r3, [r7, #28]
  return result;
 80042dc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042de:	fab3 f383 	clz	r3, r3
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	095b      	lsrs	r3, r3, #5
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	f043 0302 	orr.w	r3, r3, #2
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d108      	bne.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80042f2:	4b01      	ldr	r3, [pc, #4]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	e00d      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80042f8:	40021000 	.word	0x40021000
 80042fc:	40007000 	.word	0x40007000
 8004300:	10908100 	.word	0x10908100
 8004304:	2302      	movs	r3, #2
 8004306:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	fa93 f3a3 	rbit	r3, r3
 800430e:	617b      	str	r3, [r7, #20]
 8004310:	4ba0      	ldr	r3, [pc, #640]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	2202      	movs	r2, #2
 8004316:	613a      	str	r2, [r7, #16]
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	fa92 f2a2 	rbit	r2, r2
 800431e:	60fa      	str	r2, [r7, #12]
  return result;
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	fab2 f282 	clz	r2, r2
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800432c:	b2d2      	uxtb	r2, r2
 800432e:	f002 021f 	and.w	r2, r2, #31
 8004332:	2101      	movs	r1, #1
 8004334:	fa01 f202 	lsl.w	r2, r1, r2
 8004338:	4013      	ands	r3, r2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d0b7      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800433e:	4b95      	ldr	r3, [pc, #596]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	4992      	ldr	r1, [pc, #584]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800434c:	4313      	orrs	r3, r2
 800434e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004350:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004354:	2b01      	cmp	r3, #1
 8004356:	d105      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004358:	4b8e      	ldr	r3, [pc, #568]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	4a8d      	ldr	r2, [pc, #564]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800435e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004362:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b00      	cmp	r3, #0
 800436e:	d008      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004370:	4b88      	ldr	r3, [pc, #544]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004374:	f023 0203 	bic.w	r2, r3, #3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	4985      	ldr	r1, [pc, #532]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800437e:	4313      	orrs	r3, r2
 8004380:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d008      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800438e:	4b81      	ldr	r3, [pc, #516]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004392:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	497e      	ldr	r1, [pc, #504]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800439c:	4313      	orrs	r3, r2
 800439e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0304 	and.w	r3, r3, #4
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d008      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043ac:	4b79      	ldr	r3, [pc, #484]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	4976      	ldr	r1, [pc, #472]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d008      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043ca:	4b72      	ldr	r3, [pc, #456]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ce:	f023 0210 	bic.w	r2, r3, #16
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	496f      	ldr	r1, [pc, #444]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d008      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80043e8:	4b6a      	ldr	r3, [pc, #424]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f4:	4967      	ldr	r1, [pc, #412]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004402:	2b00      	cmp	r3, #0
 8004404:	d008      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004406:	4b63      	ldr	r3, [pc, #396]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440a:	f023 0220 	bic.w	r2, r3, #32
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	4960      	ldr	r1, [pc, #384]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004414:	4313      	orrs	r3, r2
 8004416:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d008      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004424:	4b5b      	ldr	r3, [pc, #364]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004428:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	4958      	ldr	r1, [pc, #352]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004432:	4313      	orrs	r3, r2
 8004434:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0308 	and.w	r3, r3, #8
 800443e:	2b00      	cmp	r3, #0
 8004440:	d008      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004442:	4b54      	ldr	r3, [pc, #336]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004446:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	4951      	ldr	r1, [pc, #324]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004450:	4313      	orrs	r3, r2
 8004452:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0310 	and.w	r3, r3, #16
 800445c:	2b00      	cmp	r3, #0
 800445e:	d008      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004460:	4b4c      	ldr	r3, [pc, #304]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004464:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	4949      	ldr	r1, [pc, #292]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800446e:	4313      	orrs	r3, r2
 8004470:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800447a:	2b00      	cmp	r3, #0
 800447c:	d008      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800447e:	4b45      	ldr	r3, [pc, #276]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448a:	4942      	ldr	r1, [pc, #264]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800448c:	4313      	orrs	r3, r2
 800448e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004498:	2b00      	cmp	r3, #0
 800449a:	d008      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800449c:	4b3d      	ldr	r3, [pc, #244]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800449e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a8:	493a      	ldr	r1, [pc, #232]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d008      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80044ba:	4b36      	ldr	r3, [pc, #216]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044be:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c6:	4933      	ldr	r1, [pc, #204]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d008      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80044d8:	4b2e      	ldr	r3, [pc, #184]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e4:	492b      	ldr	r1, [pc, #172]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d008      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80044f6:	4b27      	ldr	r3, [pc, #156]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fa:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	4924      	ldr	r1, [pc, #144]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004504:	4313      	orrs	r3, r2
 8004506:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d008      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004514:	4b1f      	ldr	r3, [pc, #124]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004518:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004520:	491c      	ldr	r1, [pc, #112]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004522:	4313      	orrs	r3, r2
 8004524:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d008      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004532:	4b18      	ldr	r3, [pc, #96]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004536:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453e:	4915      	ldr	r1, [pc, #84]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004540:	4313      	orrs	r3, r2
 8004542:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d008      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004550:	4b10      	ldr	r3, [pc, #64]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004554:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455c:	490d      	ldr	r1, [pc, #52]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800455e:	4313      	orrs	r3, r2
 8004560:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d008      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800456e:	4b09      	ldr	r3, [pc, #36]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004572:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800457a:	4906      	ldr	r1, [pc, #24]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800457c:	4313      	orrs	r3, r2
 800457e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00c      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800458c:	4b01      	ldr	r3, [pc, #4]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800458e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004590:	e002      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004592:	bf00      	nop
 8004594:	40021000 	.word	0x40021000
 8004598:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a0:	490b      	ldr	r1, [pc, #44]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d008      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80045b2:	4b07      	ldr	r3, [pc, #28]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045be:	4904      	ldr	r1, [pc, #16]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3748      	adds	r7, #72	; 0x48
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	40021000 	.word	0x40021000

080045d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e049      	b.n	800467a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d106      	bne.n	8004600 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7fc fde8 	bl	80011d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	3304      	adds	r3, #4
 8004610:	4619      	mov	r1, r3
 8004612:	4610      	mov	r0, r2
 8004614:	f000 f9ee 	bl	80049f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
	...

08004684 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b01      	cmp	r3, #1
 8004696:	d001      	beq.n	800469c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e04f      	b.n	800473c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68da      	ldr	r2, [r3, #12]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 0201 	orr.w	r2, r2, #1
 80046b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a23      	ldr	r2, [pc, #140]	; (8004748 <HAL_TIM_Base_Start_IT+0xc4>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d01d      	beq.n	80046fa <HAL_TIM_Base_Start_IT+0x76>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c6:	d018      	beq.n	80046fa <HAL_TIM_Base_Start_IT+0x76>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a1f      	ldr	r2, [pc, #124]	; (800474c <HAL_TIM_Base_Start_IT+0xc8>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d013      	beq.n	80046fa <HAL_TIM_Base_Start_IT+0x76>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a1e      	ldr	r2, [pc, #120]	; (8004750 <HAL_TIM_Base_Start_IT+0xcc>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d00e      	beq.n	80046fa <HAL_TIM_Base_Start_IT+0x76>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a1c      	ldr	r2, [pc, #112]	; (8004754 <HAL_TIM_Base_Start_IT+0xd0>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d009      	beq.n	80046fa <HAL_TIM_Base_Start_IT+0x76>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a1b      	ldr	r2, [pc, #108]	; (8004758 <HAL_TIM_Base_Start_IT+0xd4>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d004      	beq.n	80046fa <HAL_TIM_Base_Start_IT+0x76>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a19      	ldr	r2, [pc, #100]	; (800475c <HAL_TIM_Base_Start_IT+0xd8>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d115      	bne.n	8004726 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689a      	ldr	r2, [r3, #8]
 8004700:	4b17      	ldr	r3, [pc, #92]	; (8004760 <HAL_TIM_Base_Start_IT+0xdc>)
 8004702:	4013      	ands	r3, r2
 8004704:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2b06      	cmp	r3, #6
 800470a:	d015      	beq.n	8004738 <HAL_TIM_Base_Start_IT+0xb4>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004712:	d011      	beq.n	8004738 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0201 	orr.w	r2, r2, #1
 8004722:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004724:	e008      	b.n	8004738 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f042 0201 	orr.w	r2, r2, #1
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	e000      	b.n	800473a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004738:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3714      	adds	r7, #20
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	40012c00 	.word	0x40012c00
 800474c:	40000400 	.word	0x40000400
 8004750:	40000800 	.word	0x40000800
 8004754:	40013400 	.word	0x40013400
 8004758:	40014000 	.word	0x40014000
 800475c:	40015000 	.word	0x40015000
 8004760:	00010007 	.word	0x00010007

08004764 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b02      	cmp	r3, #2
 8004778:	d122      	bne.n	80047c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b02      	cmp	r3, #2
 8004786:	d11b      	bne.n	80047c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f06f 0202 	mvn.w	r2, #2
 8004790:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f905 	bl	80049b6 <HAL_TIM_IC_CaptureCallback>
 80047ac:	e005      	b.n	80047ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f8f7 	bl	80049a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 f908 	bl	80049ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	f003 0304 	and.w	r3, r3, #4
 80047ca:	2b04      	cmp	r3, #4
 80047cc:	d122      	bne.n	8004814 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d11b      	bne.n	8004814 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f06f 0204 	mvn.w	r2, #4
 80047e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2202      	movs	r2, #2
 80047ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d003      	beq.n	8004802 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f8db 	bl	80049b6 <HAL_TIM_IC_CaptureCallback>
 8004800:	e005      	b.n	800480e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f8cd 	bl	80049a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 f8de 	bl	80049ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	f003 0308 	and.w	r3, r3, #8
 800481e:	2b08      	cmp	r3, #8
 8004820:	d122      	bne.n	8004868 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f003 0308 	and.w	r3, r3, #8
 800482c:	2b08      	cmp	r3, #8
 800482e:	d11b      	bne.n	8004868 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f06f 0208 	mvn.w	r2, #8
 8004838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2204      	movs	r2, #4
 800483e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f8b1 	bl	80049b6 <HAL_TIM_IC_CaptureCallback>
 8004854:	e005      	b.n	8004862 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f8a3 	bl	80049a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f8b4 	bl	80049ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	f003 0310 	and.w	r3, r3, #16
 8004872:	2b10      	cmp	r3, #16
 8004874:	d122      	bne.n	80048bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f003 0310 	and.w	r3, r3, #16
 8004880:	2b10      	cmp	r3, #16
 8004882:	d11b      	bne.n	80048bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f06f 0210 	mvn.w	r2, #16
 800488c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2208      	movs	r2, #8
 8004892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f887 	bl	80049b6 <HAL_TIM_IC_CaptureCallback>
 80048a8:	e005      	b.n	80048b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f879 	bl	80049a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 f88a 	bl	80049ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d10e      	bne.n	80048e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d107      	bne.n	80048e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f06f 0201 	mvn.w	r2, #1
 80048e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7fc f8aa 	bl	8000a3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f2:	2b80      	cmp	r3, #128	; 0x80
 80048f4:	d10e      	bne.n	8004914 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004900:	2b80      	cmp	r3, #128	; 0x80
 8004902:	d107      	bne.n	8004914 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800490c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f918 	bl	8004b44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004922:	d10e      	bne.n	8004942 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800492e:	2b80      	cmp	r3, #128	; 0x80
 8004930:	d107      	bne.n	8004942 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800493a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 f90b 	bl	8004b58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494c:	2b40      	cmp	r3, #64	; 0x40
 800494e:	d10e      	bne.n	800496e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800495a:	2b40      	cmp	r3, #64	; 0x40
 800495c:	d107      	bne.n	800496e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 f838 	bl	80049de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	f003 0320 	and.w	r3, r3, #32
 8004978:	2b20      	cmp	r3, #32
 800497a:	d10e      	bne.n	800499a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	f003 0320 	and.w	r3, r3, #32
 8004986:	2b20      	cmp	r3, #32
 8004988:	d107      	bne.n	800499a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f06f 0220 	mvn.w	r2, #32
 8004992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f8cb 	bl	8004b30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800499a:	bf00      	nop
 800499c:	3708      	adds	r7, #8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049aa:	bf00      	nop
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b083      	sub	sp, #12
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b083      	sub	sp, #12
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049d2:	bf00      	nop
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
	...

080049f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a42      	ldr	r2, [pc, #264]	; (8004b10 <TIM_Base_SetConfig+0x11c>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d013      	beq.n	8004a34 <TIM_Base_SetConfig+0x40>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a12:	d00f      	beq.n	8004a34 <TIM_Base_SetConfig+0x40>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a3f      	ldr	r2, [pc, #252]	; (8004b14 <TIM_Base_SetConfig+0x120>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d00b      	beq.n	8004a34 <TIM_Base_SetConfig+0x40>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a3e      	ldr	r2, [pc, #248]	; (8004b18 <TIM_Base_SetConfig+0x124>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d007      	beq.n	8004a34 <TIM_Base_SetConfig+0x40>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a3d      	ldr	r2, [pc, #244]	; (8004b1c <TIM_Base_SetConfig+0x128>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d003      	beq.n	8004a34 <TIM_Base_SetConfig+0x40>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a3c      	ldr	r2, [pc, #240]	; (8004b20 <TIM_Base_SetConfig+0x12c>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d108      	bne.n	8004a46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a31      	ldr	r2, [pc, #196]	; (8004b10 <TIM_Base_SetConfig+0x11c>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d01f      	beq.n	8004a8e <TIM_Base_SetConfig+0x9a>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a54:	d01b      	beq.n	8004a8e <TIM_Base_SetConfig+0x9a>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a2e      	ldr	r2, [pc, #184]	; (8004b14 <TIM_Base_SetConfig+0x120>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d017      	beq.n	8004a8e <TIM_Base_SetConfig+0x9a>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a2d      	ldr	r2, [pc, #180]	; (8004b18 <TIM_Base_SetConfig+0x124>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d013      	beq.n	8004a8e <TIM_Base_SetConfig+0x9a>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a2c      	ldr	r2, [pc, #176]	; (8004b1c <TIM_Base_SetConfig+0x128>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d00f      	beq.n	8004a8e <TIM_Base_SetConfig+0x9a>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a2c      	ldr	r2, [pc, #176]	; (8004b24 <TIM_Base_SetConfig+0x130>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d00b      	beq.n	8004a8e <TIM_Base_SetConfig+0x9a>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a2b      	ldr	r2, [pc, #172]	; (8004b28 <TIM_Base_SetConfig+0x134>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d007      	beq.n	8004a8e <TIM_Base_SetConfig+0x9a>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a2a      	ldr	r2, [pc, #168]	; (8004b2c <TIM_Base_SetConfig+0x138>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d003      	beq.n	8004a8e <TIM_Base_SetConfig+0x9a>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a25      	ldr	r2, [pc, #148]	; (8004b20 <TIM_Base_SetConfig+0x12c>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d108      	bne.n	8004aa0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	689a      	ldr	r2, [r3, #8]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a12      	ldr	r2, [pc, #72]	; (8004b10 <TIM_Base_SetConfig+0x11c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d013      	beq.n	8004af4 <TIM_Base_SetConfig+0x100>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a13      	ldr	r2, [pc, #76]	; (8004b1c <TIM_Base_SetConfig+0x128>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d00f      	beq.n	8004af4 <TIM_Base_SetConfig+0x100>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a13      	ldr	r2, [pc, #76]	; (8004b24 <TIM_Base_SetConfig+0x130>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d00b      	beq.n	8004af4 <TIM_Base_SetConfig+0x100>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a12      	ldr	r2, [pc, #72]	; (8004b28 <TIM_Base_SetConfig+0x134>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d007      	beq.n	8004af4 <TIM_Base_SetConfig+0x100>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a11      	ldr	r2, [pc, #68]	; (8004b2c <TIM_Base_SetConfig+0x138>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d003      	beq.n	8004af4 <TIM_Base_SetConfig+0x100>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a0c      	ldr	r2, [pc, #48]	; (8004b20 <TIM_Base_SetConfig+0x12c>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d103      	bne.n	8004afc <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	691a      	ldr	r2, [r3, #16]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	615a      	str	r2, [r3, #20]
}
 8004b02:	bf00      	nop
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	40012c00 	.word	0x40012c00
 8004b14:	40000400 	.word	0x40000400
 8004b18:	40000800 	.word	0x40000800
 8004b1c:	40013400 	.word	0x40013400
 8004b20:	40015000 	.word	0x40015000
 8004b24:	40014000 	.word	0x40014000
 8004b28:	40014400 	.word	0x40014400
 8004b2c:	40014800 	.word	0x40014800

08004b30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e040      	b.n	8004c00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d106      	bne.n	8004b94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7fc fb44 	bl	800121c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2224      	movs	r2, #36	; 0x24
 8004b98:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 0201 	bic.w	r2, r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 fc0e 	bl	80053cc <UART_SetConfig>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d101      	bne.n	8004bba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e022      	b.n	8004c00 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d002      	beq.n	8004bc8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fdd6 	bl	8005774 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689a      	ldr	r2, [r3, #8]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004be6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f042 0201 	orr.w	r2, r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 fe5d 	bl	80058b8 <UART_CheckIdleState>
 8004bfe:	4603      	mov	r3, r0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b08a      	sub	sp, #40	; 0x28
 8004c0c:	af02      	add	r7, sp, #8
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	603b      	str	r3, [r7, #0]
 8004c14:	4613      	mov	r3, r2
 8004c16:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c1c:	2b20      	cmp	r3, #32
 8004c1e:	f040 8082 	bne.w	8004d26 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d002      	beq.n	8004c2e <HAL_UART_Transmit+0x26>
 8004c28:	88fb      	ldrh	r3, [r7, #6]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e07a      	b.n	8004d28 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d101      	bne.n	8004c40 <HAL_UART_Transmit+0x38>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	e073      	b.n	8004d28 <HAL_UART_Transmit+0x120>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2221      	movs	r2, #33	; 0x21
 8004c54:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c56:	f7fc fc21 	bl	800149c <HAL_GetTick>
 8004c5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	88fa      	ldrh	r2, [r7, #6]
 8004c60:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	88fa      	ldrh	r2, [r7, #6]
 8004c68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c74:	d108      	bne.n	8004c88 <HAL_UART_Transmit+0x80>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d104      	bne.n	8004c88 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	61bb      	str	r3, [r7, #24]
 8004c86:	e003      	b.n	8004c90 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004c98:	e02d      	b.n	8004cf6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	2180      	movs	r1, #128	; 0x80
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f000 fe50 	bl	800594a <UART_WaitOnFlagUntilTimeout>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d001      	beq.n	8004cb4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e039      	b.n	8004d28 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10b      	bne.n	8004cd2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	881a      	ldrh	r2, [r3, #0]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cc6:	b292      	uxth	r2, r2
 8004cc8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	3302      	adds	r3, #2
 8004cce:	61bb      	str	r3, [r7, #24]
 8004cd0:	e008      	b.n	8004ce4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	781a      	ldrb	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	b292      	uxth	r2, r2
 8004cdc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	3b01      	subs	r3, #1
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1cb      	bne.n	8004c9a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	2140      	movs	r1, #64	; 0x40
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f000 fe1c 	bl	800594a <UART_WaitOnFlagUntilTimeout>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d001      	beq.n	8004d1c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e005      	b.n	8004d28 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004d22:	2300      	movs	r3, #0
 8004d24:	e000      	b.n	8004d28 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004d26:	2302      	movs	r3, #2
  }
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3720      	adds	r7, #32
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b08a      	sub	sp, #40	; 0x28
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d42:	2b20      	cmp	r3, #32
 8004d44:	d13d      	bne.n	8004dc2 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d002      	beq.n	8004d52 <HAL_UART_Receive_IT+0x22>
 8004d4c:	88fb      	ldrh	r3, [r7, #6]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e036      	b.n	8004dc4 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d101      	bne.n	8004d64 <HAL_UART_Receive_IT+0x34>
 8004d60:	2302      	movs	r3, #2
 8004d62:	e02f      	b.n	8004dc4 <HAL_UART_Receive_IT+0x94>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d018      	beq.n	8004db2 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	e853 3f00 	ldrex	r3, [r3]
 8004d8c:	613b      	str	r3, [r7, #16]
   return(result);
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d94:	627b      	str	r3, [r7, #36]	; 0x24
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9e:	623b      	str	r3, [r7, #32]
 8004da0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da2:	69f9      	ldr	r1, [r7, #28]
 8004da4:	6a3a      	ldr	r2, [r7, #32]
 8004da6:	e841 2300 	strex	r3, r2, [r1]
 8004daa:	61bb      	str	r3, [r7, #24]
   return(result);
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1e6      	bne.n	8004d80 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004db2:	88fb      	ldrh	r3, [r7, #6]
 8004db4:	461a      	mov	r2, r3
 8004db6:	68b9      	ldr	r1, [r7, #8]
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 fe8b 	bl	8005ad4 <UART_Start_Receive_IT>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	e000      	b.n	8004dc4 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004dc2:	2302      	movs	r3, #2
  }
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3728      	adds	r7, #40	; 0x28
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b0ba      	sub	sp, #232	; 0xe8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004df2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004df6:	f640 030f 	movw	r3, #2063	; 0x80f
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004e00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d115      	bne.n	8004e34 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e0c:	f003 0320 	and.w	r3, r3, #32
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00f      	beq.n	8004e34 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e18:	f003 0320 	and.w	r3, r3, #32
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d009      	beq.n	8004e34 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 82a4 	beq.w	8005372 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	4798      	blx	r3
      }
      return;
 8004e32:	e29e      	b.n	8005372 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004e34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 8117 	beq.w	800506c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004e3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d106      	bne.n	8004e58 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004e4a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004e4e:	4b85      	ldr	r3, [pc, #532]	; (8005064 <HAL_UART_IRQHandler+0x298>)
 8004e50:	4013      	ands	r3, r2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f000 810a 	beq.w	800506c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d011      	beq.n	8004e88 <HAL_UART_IRQHandler+0xbc>
 8004e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00b      	beq.n	8004e88 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2201      	movs	r2, #1
 8004e76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e7e:	f043 0201 	orr.w	r2, r3, #1
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d011      	beq.n	8004eb8 <HAL_UART_IRQHandler+0xec>
 8004e94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00b      	beq.n	8004eb8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eae:	f043 0204 	orr.w	r2, r3, #4
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ebc:	f003 0304 	and.w	r3, r3, #4
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d011      	beq.n	8004ee8 <HAL_UART_IRQHandler+0x11c>
 8004ec4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00b      	beq.n	8004ee8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2204      	movs	r2, #4
 8004ed6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ede:	f043 0202 	orr.w	r2, r3, #2
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eec:	f003 0308 	and.w	r3, r3, #8
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d017      	beq.n	8004f24 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ef8:	f003 0320 	and.w	r3, r3, #32
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d105      	bne.n	8004f0c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004f00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f04:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00b      	beq.n	8004f24 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2208      	movs	r2, #8
 8004f12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f1a:	f043 0208 	orr.w	r2, r3, #8
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d012      	beq.n	8004f56 <HAL_UART_IRQHandler+0x18a>
 8004f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00c      	beq.n	8004f56 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f4c:	f043 0220 	orr.w	r2, r3, #32
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f000 820a 	beq.w	8005376 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f66:	f003 0320 	and.w	r3, r3, #32
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00d      	beq.n	8004f8a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f72:	f003 0320 	and.w	r3, r3, #32
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d007      	beq.n	8004f8a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9e:	2b40      	cmp	r3, #64	; 0x40
 8004fa0:	d005      	beq.n	8004fae <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004fa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fa6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d04f      	beq.n	800504e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 fe3c 	bl	8005c2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fbe:	2b40      	cmp	r3, #64	; 0x40
 8004fc0:	d141      	bne.n	8005046 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	3308      	adds	r3, #8
 8004fc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fd0:	e853 3f00 	ldrex	r3, [r3]
 8004fd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004fd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fe0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	3308      	adds	r3, #8
 8004fea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004fee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004ff2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004ffa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ffe:	e841 2300 	strex	r3, r2, [r1]
 8005002:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005006:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1d9      	bne.n	8004fc2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005012:	2b00      	cmp	r3, #0
 8005014:	d013      	beq.n	800503e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800501a:	4a13      	ldr	r2, [pc, #76]	; (8005068 <HAL_UART_IRQHandler+0x29c>)
 800501c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005022:	4618      	mov	r0, r3
 8005024:	f7fd fd42 	bl	8002aac <HAL_DMA_Abort_IT>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d017      	beq.n	800505e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005038:	4610      	mov	r0, r2
 800503a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800503c:	e00f      	b.n	800505e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f9ae 	bl	80053a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005044:	e00b      	b.n	800505e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f9aa 	bl	80053a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800504c:	e007      	b.n	800505e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f9a6 	bl	80053a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800505c:	e18b      	b.n	8005376 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800505e:	bf00      	nop
    return;
 8005060:	e189      	b.n	8005376 <HAL_UART_IRQHandler+0x5aa>
 8005062:	bf00      	nop
 8005064:	04000120 	.word	0x04000120
 8005068:	08005cf3 	.word	0x08005cf3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005070:	2b01      	cmp	r3, #1
 8005072:	f040 8143 	bne.w	80052fc <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800507a:	f003 0310 	and.w	r3, r3, #16
 800507e:	2b00      	cmp	r3, #0
 8005080:	f000 813c 	beq.w	80052fc <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005088:	f003 0310 	and.w	r3, r3, #16
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 8135 	beq.w	80052fc <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2210      	movs	r2, #16
 8005098:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a4:	2b40      	cmp	r3, #64	; 0x40
 80050a6:	f040 80b1 	bne.w	800520c <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050b6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f000 815d 	beq.w	800537a <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80050c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050ca:	429a      	cmp	r2, r3
 80050cc:	f080 8155 	bcs.w	800537a <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	2b20      	cmp	r3, #32
 80050e2:	f000 8085 	beq.w	80051f0 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050f2:	e853 3f00 	ldrex	r3, [r3]
 80050f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80050fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005102:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	461a      	mov	r2, r3
 800510c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005110:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005114:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005118:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800511c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005120:	e841 2300 	strex	r3, r2, [r1]
 8005124:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005128:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1da      	bne.n	80050e6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3308      	adds	r3, #8
 8005136:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005138:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800513a:	e853 3f00 	ldrex	r3, [r3]
 800513e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005140:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005142:	f023 0301 	bic.w	r3, r3, #1
 8005146:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	3308      	adds	r3, #8
 8005150:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005154:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005158:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800515c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005160:	e841 2300 	strex	r3, r2, [r1]
 8005164:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005166:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1e1      	bne.n	8005130 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	3308      	adds	r3, #8
 8005172:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005174:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005176:	e853 3f00 	ldrex	r3, [r3]
 800517a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800517c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800517e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005182:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	3308      	adds	r3, #8
 800518c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005190:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005192:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005194:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005196:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005198:	e841 2300 	strex	r3, r2, [r1]
 800519c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800519e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1e3      	bne.n	800516c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2220      	movs	r2, #32
 80051a8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051b8:	e853 3f00 	ldrex	r3, [r3]
 80051bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80051be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051c0:	f023 0310 	bic.w	r3, r3, #16
 80051c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	461a      	mov	r2, r3
 80051ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80051d4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051da:	e841 2300 	strex	r3, r2, [r1]
 80051de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80051e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1e4      	bne.n	80051b0 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7fd fc25 	bl	8002a3a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	b29b      	uxth	r3, r3
 8005202:	4619      	mov	r1, r3
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f8d5 	bl	80053b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800520a:	e0b6      	b.n	800537a <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005218:	b29b      	uxth	r3, r3
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005226:	b29b      	uxth	r3, r3
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 80a8 	beq.w	800537e <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 800522e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005232:	2b00      	cmp	r3, #0
 8005234:	f000 80a3 	beq.w	800537e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005240:	e853 3f00 	ldrex	r3, [r3]
 8005244:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005248:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800524c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	461a      	mov	r2, r3
 8005256:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800525a:	647b      	str	r3, [r7, #68]	; 0x44
 800525c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005260:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005262:	e841 2300 	strex	r3, r2, [r1]
 8005266:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1e4      	bne.n	8005238 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	3308      	adds	r3, #8
 8005274:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	e853 3f00 	ldrex	r3, [r3]
 800527c:	623b      	str	r3, [r7, #32]
   return(result);
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	f023 0301 	bic.w	r3, r3, #1
 8005284:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	3308      	adds	r3, #8
 800528e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005292:	633a      	str	r2, [r7, #48]	; 0x30
 8005294:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005296:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800529a:	e841 2300 	strex	r3, r2, [r1]
 800529e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1e3      	bne.n	800526e <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2220      	movs	r2, #32
 80052aa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	e853 3f00 	ldrex	r3, [r3]
 80052c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f023 0310 	bic.w	r3, r3, #16
 80052cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	461a      	mov	r2, r3
 80052d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80052da:	61fb      	str	r3, [r7, #28]
 80052dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052de:	69b9      	ldr	r1, [r7, #24]
 80052e0:	69fa      	ldr	r2, [r7, #28]
 80052e2:	e841 2300 	strex	r3, r2, [r1]
 80052e6:	617b      	str	r3, [r7, #20]
   return(result);
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1e4      	bne.n	80052b8 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052f2:	4619      	mov	r1, r3
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 f85d 	bl	80053b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80052fa:	e040      	b.n	800537e <HAL_UART_IRQHandler+0x5b2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80052fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005300:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00e      	beq.n	8005326 <HAL_UART_IRQHandler+0x55a>
 8005308:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800530c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d008      	beq.n	8005326 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800531c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 fe83 	bl	800602a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005324:	e02e      	b.n	8005384 <HAL_UART_IRQHandler+0x5b8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800532a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00e      	beq.n	8005350 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800533a:	2b00      	cmp	r3, #0
 800533c:	d008      	beq.n	8005350 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005342:	2b00      	cmp	r3, #0
 8005344:	d01d      	beq.n	8005382 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	4798      	blx	r3
    }
    return;
 800534e:	e018      	b.n	8005382 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005358:	2b00      	cmp	r3, #0
 800535a:	d013      	beq.n	8005384 <HAL_UART_IRQHandler+0x5b8>
 800535c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00d      	beq.n	8005384 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 fcd8 	bl	8005d1e <UART_EndTransmit_IT>
    return;
 800536e:	bf00      	nop
 8005370:	e008      	b.n	8005384 <HAL_UART_IRQHandler+0x5b8>
      return;
 8005372:	bf00      	nop
 8005374:	e006      	b.n	8005384 <HAL_UART_IRQHandler+0x5b8>
    return;
 8005376:	bf00      	nop
 8005378:	e004      	b.n	8005384 <HAL_UART_IRQHandler+0x5b8>
      return;
 800537a:	bf00      	nop
 800537c:	e002      	b.n	8005384 <HAL_UART_IRQHandler+0x5b8>
      return;
 800537e:	bf00      	nop
 8005380:	e000      	b.n	8005384 <HAL_UART_IRQHandler+0x5b8>
    return;
 8005382:	bf00      	nop
  }

}
 8005384:	37e8      	adds	r7, #232	; 0xe8
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop

0800538c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	460b      	mov	r3, r1
 80053be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b088      	sub	sp, #32
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053d4:	2300      	movs	r3, #0
 80053d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	431a      	orrs	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	431a      	orrs	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	69db      	ldr	r3, [r3, #28]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	4baa      	ldr	r3, [pc, #680]	; (80056a0 <UART_SetConfig+0x2d4>)
 80053f8:	4013      	ands	r3, r2
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	6812      	ldr	r2, [r2, #0]
 80053fe:	6979      	ldr	r1, [r7, #20]
 8005400:	430b      	orrs	r3, r1
 8005402:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68da      	ldr	r2, [r3, #12]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	430a      	orrs	r2, r1
 8005418:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a1b      	ldr	r3, [r3, #32]
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	4313      	orrs	r3, r2
 8005428:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	430a      	orrs	r2, r1
 800543c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a98      	ldr	r2, [pc, #608]	; (80056a4 <UART_SetConfig+0x2d8>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d121      	bne.n	800548c <UART_SetConfig+0xc0>
 8005448:	4b97      	ldr	r3, [pc, #604]	; (80056a8 <UART_SetConfig+0x2dc>)
 800544a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544c:	f003 0303 	and.w	r3, r3, #3
 8005450:	2b03      	cmp	r3, #3
 8005452:	d817      	bhi.n	8005484 <UART_SetConfig+0xb8>
 8005454:	a201      	add	r2, pc, #4	; (adr r2, 800545c <UART_SetConfig+0x90>)
 8005456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545a:	bf00      	nop
 800545c:	0800546d 	.word	0x0800546d
 8005460:	08005479 	.word	0x08005479
 8005464:	0800547f 	.word	0x0800547f
 8005468:	08005473 	.word	0x08005473
 800546c:	2301      	movs	r3, #1
 800546e:	77fb      	strb	r3, [r7, #31]
 8005470:	e0b2      	b.n	80055d8 <UART_SetConfig+0x20c>
 8005472:	2302      	movs	r3, #2
 8005474:	77fb      	strb	r3, [r7, #31]
 8005476:	e0af      	b.n	80055d8 <UART_SetConfig+0x20c>
 8005478:	2304      	movs	r3, #4
 800547a:	77fb      	strb	r3, [r7, #31]
 800547c:	e0ac      	b.n	80055d8 <UART_SetConfig+0x20c>
 800547e:	2308      	movs	r3, #8
 8005480:	77fb      	strb	r3, [r7, #31]
 8005482:	e0a9      	b.n	80055d8 <UART_SetConfig+0x20c>
 8005484:	2310      	movs	r3, #16
 8005486:	77fb      	strb	r3, [r7, #31]
 8005488:	bf00      	nop
 800548a:	e0a5      	b.n	80055d8 <UART_SetConfig+0x20c>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a86      	ldr	r2, [pc, #536]	; (80056ac <UART_SetConfig+0x2e0>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d123      	bne.n	80054de <UART_SetConfig+0x112>
 8005496:	4b84      	ldr	r3, [pc, #528]	; (80056a8 <UART_SetConfig+0x2dc>)
 8005498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800549e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054a2:	d012      	beq.n	80054ca <UART_SetConfig+0xfe>
 80054a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054a8:	d802      	bhi.n	80054b0 <UART_SetConfig+0xe4>
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d007      	beq.n	80054be <UART_SetConfig+0xf2>
 80054ae:	e012      	b.n	80054d6 <UART_SetConfig+0x10a>
 80054b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054b4:	d00c      	beq.n	80054d0 <UART_SetConfig+0x104>
 80054b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80054ba:	d003      	beq.n	80054c4 <UART_SetConfig+0xf8>
 80054bc:	e00b      	b.n	80054d6 <UART_SetConfig+0x10a>
 80054be:	2300      	movs	r3, #0
 80054c0:	77fb      	strb	r3, [r7, #31]
 80054c2:	e089      	b.n	80055d8 <UART_SetConfig+0x20c>
 80054c4:	2302      	movs	r3, #2
 80054c6:	77fb      	strb	r3, [r7, #31]
 80054c8:	e086      	b.n	80055d8 <UART_SetConfig+0x20c>
 80054ca:	2304      	movs	r3, #4
 80054cc:	77fb      	strb	r3, [r7, #31]
 80054ce:	e083      	b.n	80055d8 <UART_SetConfig+0x20c>
 80054d0:	2308      	movs	r3, #8
 80054d2:	77fb      	strb	r3, [r7, #31]
 80054d4:	e080      	b.n	80055d8 <UART_SetConfig+0x20c>
 80054d6:	2310      	movs	r3, #16
 80054d8:	77fb      	strb	r3, [r7, #31]
 80054da:	bf00      	nop
 80054dc:	e07c      	b.n	80055d8 <UART_SetConfig+0x20c>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a73      	ldr	r2, [pc, #460]	; (80056b0 <UART_SetConfig+0x2e4>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d123      	bne.n	8005530 <UART_SetConfig+0x164>
 80054e8:	4b6f      	ldr	r3, [pc, #444]	; (80056a8 <UART_SetConfig+0x2dc>)
 80054ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ec:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80054f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054f4:	d012      	beq.n	800551c <UART_SetConfig+0x150>
 80054f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054fa:	d802      	bhi.n	8005502 <UART_SetConfig+0x136>
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d007      	beq.n	8005510 <UART_SetConfig+0x144>
 8005500:	e012      	b.n	8005528 <UART_SetConfig+0x15c>
 8005502:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005506:	d00c      	beq.n	8005522 <UART_SetConfig+0x156>
 8005508:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800550c:	d003      	beq.n	8005516 <UART_SetConfig+0x14a>
 800550e:	e00b      	b.n	8005528 <UART_SetConfig+0x15c>
 8005510:	2300      	movs	r3, #0
 8005512:	77fb      	strb	r3, [r7, #31]
 8005514:	e060      	b.n	80055d8 <UART_SetConfig+0x20c>
 8005516:	2302      	movs	r3, #2
 8005518:	77fb      	strb	r3, [r7, #31]
 800551a:	e05d      	b.n	80055d8 <UART_SetConfig+0x20c>
 800551c:	2304      	movs	r3, #4
 800551e:	77fb      	strb	r3, [r7, #31]
 8005520:	e05a      	b.n	80055d8 <UART_SetConfig+0x20c>
 8005522:	2308      	movs	r3, #8
 8005524:	77fb      	strb	r3, [r7, #31]
 8005526:	e057      	b.n	80055d8 <UART_SetConfig+0x20c>
 8005528:	2310      	movs	r3, #16
 800552a:	77fb      	strb	r3, [r7, #31]
 800552c:	bf00      	nop
 800552e:	e053      	b.n	80055d8 <UART_SetConfig+0x20c>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a5f      	ldr	r2, [pc, #380]	; (80056b4 <UART_SetConfig+0x2e8>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d123      	bne.n	8005582 <UART_SetConfig+0x1b6>
 800553a:	4b5b      	ldr	r3, [pc, #364]	; (80056a8 <UART_SetConfig+0x2dc>)
 800553c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005542:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005546:	d012      	beq.n	800556e <UART_SetConfig+0x1a2>
 8005548:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800554c:	d802      	bhi.n	8005554 <UART_SetConfig+0x188>
 800554e:	2b00      	cmp	r3, #0
 8005550:	d007      	beq.n	8005562 <UART_SetConfig+0x196>
 8005552:	e012      	b.n	800557a <UART_SetConfig+0x1ae>
 8005554:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005558:	d00c      	beq.n	8005574 <UART_SetConfig+0x1a8>
 800555a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800555e:	d003      	beq.n	8005568 <UART_SetConfig+0x19c>
 8005560:	e00b      	b.n	800557a <UART_SetConfig+0x1ae>
 8005562:	2300      	movs	r3, #0
 8005564:	77fb      	strb	r3, [r7, #31]
 8005566:	e037      	b.n	80055d8 <UART_SetConfig+0x20c>
 8005568:	2302      	movs	r3, #2
 800556a:	77fb      	strb	r3, [r7, #31]
 800556c:	e034      	b.n	80055d8 <UART_SetConfig+0x20c>
 800556e:	2304      	movs	r3, #4
 8005570:	77fb      	strb	r3, [r7, #31]
 8005572:	e031      	b.n	80055d8 <UART_SetConfig+0x20c>
 8005574:	2308      	movs	r3, #8
 8005576:	77fb      	strb	r3, [r7, #31]
 8005578:	e02e      	b.n	80055d8 <UART_SetConfig+0x20c>
 800557a:	2310      	movs	r3, #16
 800557c:	77fb      	strb	r3, [r7, #31]
 800557e:	bf00      	nop
 8005580:	e02a      	b.n	80055d8 <UART_SetConfig+0x20c>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a4c      	ldr	r2, [pc, #304]	; (80056b8 <UART_SetConfig+0x2ec>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d123      	bne.n	80055d4 <UART_SetConfig+0x208>
 800558c:	4b46      	ldr	r3, [pc, #280]	; (80056a8 <UART_SetConfig+0x2dc>)
 800558e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005590:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005594:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005598:	d012      	beq.n	80055c0 <UART_SetConfig+0x1f4>
 800559a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800559e:	d802      	bhi.n	80055a6 <UART_SetConfig+0x1da>
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d007      	beq.n	80055b4 <UART_SetConfig+0x1e8>
 80055a4:	e012      	b.n	80055cc <UART_SetConfig+0x200>
 80055a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055aa:	d00c      	beq.n	80055c6 <UART_SetConfig+0x1fa>
 80055ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80055b0:	d003      	beq.n	80055ba <UART_SetConfig+0x1ee>
 80055b2:	e00b      	b.n	80055cc <UART_SetConfig+0x200>
 80055b4:	2300      	movs	r3, #0
 80055b6:	77fb      	strb	r3, [r7, #31]
 80055b8:	e00e      	b.n	80055d8 <UART_SetConfig+0x20c>
 80055ba:	2302      	movs	r3, #2
 80055bc:	77fb      	strb	r3, [r7, #31]
 80055be:	e00b      	b.n	80055d8 <UART_SetConfig+0x20c>
 80055c0:	2304      	movs	r3, #4
 80055c2:	77fb      	strb	r3, [r7, #31]
 80055c4:	e008      	b.n	80055d8 <UART_SetConfig+0x20c>
 80055c6:	2308      	movs	r3, #8
 80055c8:	77fb      	strb	r3, [r7, #31]
 80055ca:	e005      	b.n	80055d8 <UART_SetConfig+0x20c>
 80055cc:	2310      	movs	r3, #16
 80055ce:	77fb      	strb	r3, [r7, #31]
 80055d0:	bf00      	nop
 80055d2:	e001      	b.n	80055d8 <UART_SetConfig+0x20c>
 80055d4:	2310      	movs	r3, #16
 80055d6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055e0:	d16e      	bne.n	80056c0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80055e2:	7ffb      	ldrb	r3, [r7, #31]
 80055e4:	2b08      	cmp	r3, #8
 80055e6:	d828      	bhi.n	800563a <UART_SetConfig+0x26e>
 80055e8:	a201      	add	r2, pc, #4	; (adr r2, 80055f0 <UART_SetConfig+0x224>)
 80055ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ee:	bf00      	nop
 80055f0:	08005615 	.word	0x08005615
 80055f4:	0800561d 	.word	0x0800561d
 80055f8:	08005625 	.word	0x08005625
 80055fc:	0800563b 	.word	0x0800563b
 8005600:	0800562b 	.word	0x0800562b
 8005604:	0800563b 	.word	0x0800563b
 8005608:	0800563b 	.word	0x0800563b
 800560c:	0800563b 	.word	0x0800563b
 8005610:	08005633 	.word	0x08005633
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005614:	f7fe fd7c 	bl	8004110 <HAL_RCC_GetPCLK1Freq>
 8005618:	61b8      	str	r0, [r7, #24]
        break;
 800561a:	e013      	b.n	8005644 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800561c:	f7fe fd9a 	bl	8004154 <HAL_RCC_GetPCLK2Freq>
 8005620:	61b8      	str	r0, [r7, #24]
        break;
 8005622:	e00f      	b.n	8005644 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005624:	4b25      	ldr	r3, [pc, #148]	; (80056bc <UART_SetConfig+0x2f0>)
 8005626:	61bb      	str	r3, [r7, #24]
        break;
 8005628:	e00c      	b.n	8005644 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800562a:	f7fe fcfb 	bl	8004024 <HAL_RCC_GetSysClockFreq>
 800562e:	61b8      	str	r0, [r7, #24]
        break;
 8005630:	e008      	b.n	8005644 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005636:	61bb      	str	r3, [r7, #24]
        break;
 8005638:	e004      	b.n	8005644 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 800563a:	2300      	movs	r3, #0
 800563c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	77bb      	strb	r3, [r7, #30]
        break;
 8005642:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 8086 	beq.w	8005758 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	005a      	lsls	r2, r3, #1
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	085b      	lsrs	r3, r3, #1
 8005656:	441a      	add	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005660:	b29b      	uxth	r3, r3
 8005662:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	2b0f      	cmp	r3, #15
 8005668:	d916      	bls.n	8005698 <UART_SetConfig+0x2cc>
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005670:	d212      	bcs.n	8005698 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	b29b      	uxth	r3, r3
 8005676:	f023 030f 	bic.w	r3, r3, #15
 800567a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	085b      	lsrs	r3, r3, #1
 8005680:	b29b      	uxth	r3, r3
 8005682:	f003 0307 	and.w	r3, r3, #7
 8005686:	b29a      	uxth	r2, r3
 8005688:	89fb      	ldrh	r3, [r7, #14]
 800568a:	4313      	orrs	r3, r2
 800568c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	89fa      	ldrh	r2, [r7, #14]
 8005694:	60da      	str	r2, [r3, #12]
 8005696:	e05f      	b.n	8005758 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	77bb      	strb	r3, [r7, #30]
 800569c:	e05c      	b.n	8005758 <UART_SetConfig+0x38c>
 800569e:	bf00      	nop
 80056a0:	efff69f3 	.word	0xefff69f3
 80056a4:	40013800 	.word	0x40013800
 80056a8:	40021000 	.word	0x40021000
 80056ac:	40004400 	.word	0x40004400
 80056b0:	40004800 	.word	0x40004800
 80056b4:	40004c00 	.word	0x40004c00
 80056b8:	40005000 	.word	0x40005000
 80056bc:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 80056c0:	7ffb      	ldrb	r3, [r7, #31]
 80056c2:	2b08      	cmp	r3, #8
 80056c4:	d827      	bhi.n	8005716 <UART_SetConfig+0x34a>
 80056c6:	a201      	add	r2, pc, #4	; (adr r2, 80056cc <UART_SetConfig+0x300>)
 80056c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056cc:	080056f1 	.word	0x080056f1
 80056d0:	080056f9 	.word	0x080056f9
 80056d4:	08005701 	.word	0x08005701
 80056d8:	08005717 	.word	0x08005717
 80056dc:	08005707 	.word	0x08005707
 80056e0:	08005717 	.word	0x08005717
 80056e4:	08005717 	.word	0x08005717
 80056e8:	08005717 	.word	0x08005717
 80056ec:	0800570f 	.word	0x0800570f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056f0:	f7fe fd0e 	bl	8004110 <HAL_RCC_GetPCLK1Freq>
 80056f4:	61b8      	str	r0, [r7, #24]
        break;
 80056f6:	e013      	b.n	8005720 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056f8:	f7fe fd2c 	bl	8004154 <HAL_RCC_GetPCLK2Freq>
 80056fc:	61b8      	str	r0, [r7, #24]
        break;
 80056fe:	e00f      	b.n	8005720 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005700:	4b1b      	ldr	r3, [pc, #108]	; (8005770 <UART_SetConfig+0x3a4>)
 8005702:	61bb      	str	r3, [r7, #24]
        break;
 8005704:	e00c      	b.n	8005720 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005706:	f7fe fc8d 	bl	8004024 <HAL_RCC_GetSysClockFreq>
 800570a:	61b8      	str	r0, [r7, #24]
        break;
 800570c:	e008      	b.n	8005720 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800570e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005712:	61bb      	str	r3, [r7, #24]
        break;
 8005714:	e004      	b.n	8005720 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005716:	2300      	movs	r3, #0
 8005718:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	77bb      	strb	r3, [r7, #30]
        break;
 800571e:	bf00      	nop
    }

    if (pclk != 0U)
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d018      	beq.n	8005758 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	085a      	lsrs	r2, r3, #1
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	441a      	add	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	fbb2 f3f3 	udiv	r3, r2, r3
 8005738:	b29b      	uxth	r3, r3
 800573a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	2b0f      	cmp	r3, #15
 8005740:	d908      	bls.n	8005754 <UART_SetConfig+0x388>
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005748:	d204      	bcs.n	8005754 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	60da      	str	r2, [r3, #12]
 8005752:	e001      	b.n	8005758 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005764:	7fbb      	ldrb	r3, [r7, #30]
}
 8005766:	4618      	mov	r0, r3
 8005768:	3720      	adds	r7, #32
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	007a1200 	.word	0x007a1200

08005774 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005780:	f003 0301 	and.w	r3, r3, #1
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00a      	beq.n	800579e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	430a      	orrs	r2, r1
 800579c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00a      	beq.n	80057c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	430a      	orrs	r2, r1
 80057be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c4:	f003 0304 	and.w	r3, r3, #4
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00a      	beq.n	80057e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	f003 0308 	and.w	r3, r3, #8
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00a      	beq.n	8005804 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005808:	f003 0310 	and.w	r3, r3, #16
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00a      	beq.n	8005826 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	f003 0320 	and.w	r3, r3, #32
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00a      	beq.n	8005848 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	430a      	orrs	r2, r1
 8005846:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005850:	2b00      	cmp	r3, #0
 8005852:	d01a      	beq.n	800588a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	430a      	orrs	r2, r1
 8005868:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005872:	d10a      	bne.n	800588a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	430a      	orrs	r2, r1
 8005888:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00a      	beq.n	80058ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	605a      	str	r2, [r3, #4]
  }
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af02      	add	r7, sp, #8
 80058be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058c8:	f7fb fde8 	bl	800149c <HAL_GetTick>
 80058cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0308 	and.w	r3, r3, #8
 80058d8:	2b08      	cmp	r3, #8
 80058da:	d10e      	bne.n	80058fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f82d 	bl	800594a <UART_WaitOnFlagUntilTimeout>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e023      	b.n	8005942 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0304 	and.w	r3, r3, #4
 8005904:	2b04      	cmp	r3, #4
 8005906:	d10e      	bne.n	8005926 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005908:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f817 	bl	800594a <UART_WaitOnFlagUntilTimeout>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e00d      	b.n	8005942 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2220      	movs	r2, #32
 800592a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2220      	movs	r2, #32
 8005930:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b09c      	sub	sp, #112	; 0x70
 800594e:	af00      	add	r7, sp, #0
 8005950:	60f8      	str	r0, [r7, #12]
 8005952:	60b9      	str	r1, [r7, #8]
 8005954:	603b      	str	r3, [r7, #0]
 8005956:	4613      	mov	r3, r2
 8005958:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800595a:	e0a5      	b.n	8005aa8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800595c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800595e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005962:	f000 80a1 	beq.w	8005aa8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005966:	f7fb fd99 	bl	800149c <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005972:	429a      	cmp	r2, r3
 8005974:	d302      	bcc.n	800597c <UART_WaitOnFlagUntilTimeout+0x32>
 8005976:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005978:	2b00      	cmp	r3, #0
 800597a:	d13e      	bne.n	80059fa <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005984:	e853 3f00 	ldrex	r3, [r3]
 8005988:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800598a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800598c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005990:	667b      	str	r3, [r7, #100]	; 0x64
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	461a      	mov	r2, r3
 8005998:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800599a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800599c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80059a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059a2:	e841 2300 	strex	r3, r2, [r1]
 80059a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80059a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1e6      	bne.n	800597c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3308      	adds	r3, #8
 80059b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059b8:	e853 3f00 	ldrex	r3, [r3]
 80059bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c0:	f023 0301 	bic.w	r3, r3, #1
 80059c4:	663b      	str	r3, [r7, #96]	; 0x60
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	3308      	adds	r3, #8
 80059cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80059ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80059d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059d6:	e841 2300 	strex	r3, r2, [r1]
 80059da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80059dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1e5      	bne.n	80059ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2220      	movs	r2, #32
 80059e6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2220      	movs	r2, #32
 80059ec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e067      	b.n	8005aca <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0304 	and.w	r3, r3, #4
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d04f      	beq.n	8005aa8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a16:	d147      	bne.n	8005aa8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a20:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2a:	e853 3f00 	ldrex	r3, [r3]
 8005a2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a40:	637b      	str	r3, [r7, #52]	; 0x34
 8005a42:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a48:	e841 2300 	strex	r3, r2, [r1]
 8005a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1e6      	bne.n	8005a22 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	3308      	adds	r3, #8
 8005a5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	e853 3f00 	ldrex	r3, [r3]
 8005a62:	613b      	str	r3, [r7, #16]
   return(result);
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	f023 0301 	bic.w	r3, r3, #1
 8005a6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	3308      	adds	r3, #8
 8005a72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005a74:	623a      	str	r2, [r7, #32]
 8005a76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a78:	69f9      	ldr	r1, [r7, #28]
 8005a7a:	6a3a      	ldr	r2, [r7, #32]
 8005a7c:	e841 2300 	strex	r3, r2, [r1]
 8005a80:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1e5      	bne.n	8005a54 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2220      	movs	r2, #32
 8005a92:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e010      	b.n	8005aca <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	69da      	ldr	r2, [r3, #28]
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	bf0c      	ite	eq
 8005ab8:	2301      	moveq	r3, #1
 8005aba:	2300      	movne	r3, #0
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	461a      	mov	r2, r3
 8005ac0:	79fb      	ldrb	r3, [r7, #7]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	f43f af4a 	beq.w	800595c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3770      	adds	r7, #112	; 0x70
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
	...

08005ad4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b091      	sub	sp, #68	; 0x44
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	88fa      	ldrh	r2, [r7, #6]
 8005aec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	88fa      	ldrh	r2, [r7, #6]
 8005af4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b06:	d10e      	bne.n	8005b26 <UART_Start_Receive_IT+0x52>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d105      	bne.n	8005b1c <UART_Start_Receive_IT+0x48>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005b16:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b1a:	e02d      	b.n	8005b78 <UART_Start_Receive_IT+0xa4>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	22ff      	movs	r2, #255	; 0xff
 8005b20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b24:	e028      	b.n	8005b78 <UART_Start_Receive_IT+0xa4>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10d      	bne.n	8005b4a <UART_Start_Receive_IT+0x76>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d104      	bne.n	8005b40 <UART_Start_Receive_IT+0x6c>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	22ff      	movs	r2, #255	; 0xff
 8005b3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b3e:	e01b      	b.n	8005b78 <UART_Start_Receive_IT+0xa4>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	227f      	movs	r2, #127	; 0x7f
 8005b44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b48:	e016      	b.n	8005b78 <UART_Start_Receive_IT+0xa4>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b52:	d10d      	bne.n	8005b70 <UART_Start_Receive_IT+0x9c>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d104      	bne.n	8005b66 <UART_Start_Receive_IT+0x92>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	227f      	movs	r2, #127	; 0x7f
 8005b60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b64:	e008      	b.n	8005b78 <UART_Start_Receive_IT+0xa4>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	223f      	movs	r2, #63	; 0x3f
 8005b6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b6e:	e003      	b.n	8005b78 <UART_Start_Receive_IT+0xa4>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2222      	movs	r2, #34	; 0x22
 8005b84:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	3308      	adds	r3, #8
 8005b8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b90:	e853 3f00 	ldrex	r3, [r3]
 8005b94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b98:	f043 0301 	orr.w	r3, r3, #1
 8005b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	3308      	adds	r3, #8
 8005ba4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ba6:	637a      	str	r2, [r7, #52]	; 0x34
 8005ba8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005baa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bae:	e841 2300 	strex	r3, r2, [r1]
 8005bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1e5      	bne.n	8005b86 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bc2:	d107      	bne.n	8005bd4 <UART_Start_Receive_IT+0x100>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d103      	bne.n	8005bd4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4a15      	ldr	r2, [pc, #84]	; (8005c24 <UART_Start_Receive_IT+0x150>)
 8005bd0:	665a      	str	r2, [r3, #100]	; 0x64
 8005bd2:	e002      	b.n	8005bda <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4a14      	ldr	r2, [pc, #80]	; (8005c28 <UART_Start_Receive_IT+0x154>)
 8005bd8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	e853 3f00 	ldrex	r3, [r3]
 8005bee:	613b      	str	r3, [r7, #16]
   return(result);
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005bf6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c00:	623b      	str	r3, [r7, #32]
 8005c02:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c04:	69f9      	ldr	r1, [r7, #28]
 8005c06:	6a3a      	ldr	r2, [r7, #32]
 8005c08:	e841 2300 	strex	r3, r2, [r1]
 8005c0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1e6      	bne.n	8005be2 <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3744      	adds	r7, #68	; 0x44
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	08005ecf 	.word	0x08005ecf
 8005c28:	08005d73 	.word	0x08005d73

08005c2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b095      	sub	sp, #84	; 0x54
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c3c:	e853 3f00 	ldrex	r3, [r3]
 8005c40:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c52:	643b      	str	r3, [r7, #64]	; 0x40
 8005c54:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c5a:	e841 2300 	strex	r3, r2, [r1]
 8005c5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1e6      	bne.n	8005c34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	3308      	adds	r3, #8
 8005c6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	e853 3f00 	ldrex	r3, [r3]
 8005c74:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	f023 0301 	bic.w	r3, r3, #1
 8005c7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	3308      	adds	r3, #8
 8005c84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c8e:	e841 2300 	strex	r3, r2, [r1]
 8005c92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1e5      	bne.n	8005c66 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d118      	bne.n	8005cd4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	e853 3f00 	ldrex	r3, [r3]
 8005cae:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	f023 0310 	bic.w	r3, r3, #16
 8005cb6:	647b      	str	r3, [r7, #68]	; 0x44
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cc0:	61bb      	str	r3, [r7, #24]
 8005cc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc4:	6979      	ldr	r1, [r7, #20]
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	e841 2300 	strex	r3, r2, [r1]
 8005ccc:	613b      	str	r3, [r7, #16]
   return(result);
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1e6      	bne.n	8005ca2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005ce6:	bf00      	nop
 8005ce8:	3754      	adds	r7, #84	; 0x54
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b084      	sub	sp, #16
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f7ff fb45 	bl	80053a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d16:	bf00      	nop
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b088      	sub	sp, #32
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	e853 3f00 	ldrex	r3, [r3]
 8005d32:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d3a:	61fb      	str	r3, [r7, #28]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	461a      	mov	r2, r3
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	61bb      	str	r3, [r7, #24]
 8005d46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d48:	6979      	ldr	r1, [r7, #20]
 8005d4a:	69ba      	ldr	r2, [r7, #24]
 8005d4c:	e841 2300 	strex	r3, r2, [r1]
 8005d50:	613b      	str	r3, [r7, #16]
   return(result);
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1e6      	bne.n	8005d26 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2220      	movs	r2, #32
 8005d5c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f7ff fb11 	bl	800538c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d6a:	bf00      	nop
 8005d6c:	3720      	adds	r7, #32
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b096      	sub	sp, #88	; 0x58
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d80:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d88:	2b22      	cmp	r3, #34	; 0x22
 8005d8a:	f040 8094 	bne.w	8005eb6 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005d94:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005d98:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005d9c:	b2d9      	uxtb	r1, r3
 8005d9e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005da2:	b2da      	uxtb	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da8:	400a      	ands	r2, r1
 8005daa:	b2d2      	uxtb	r2, r2
 8005dac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005db2:	1c5a      	adds	r2, r3, #1
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d177      	bne.n	8005ec6 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dde:	e853 3f00 	ldrex	r3, [r3]
 8005de2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005dea:	653b      	str	r3, [r7, #80]	; 0x50
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	461a      	mov	r2, r3
 8005df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005df4:	647b      	str	r3, [r7, #68]	; 0x44
 8005df6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005dfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dfc:	e841 2300 	strex	r3, r2, [r1]
 8005e00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1e6      	bne.n	8005dd6 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	3308      	adds	r3, #8
 8005e0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e12:	e853 3f00 	ldrex	r3, [r3]
 8005e16:	623b      	str	r3, [r7, #32]
   return(result);
 8005e18:	6a3b      	ldr	r3, [r7, #32]
 8005e1a:	f023 0301 	bic.w	r3, r3, #1
 8005e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	3308      	adds	r3, #8
 8005e26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e28:	633a      	str	r2, [r7, #48]	; 0x30
 8005e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e30:	e841 2300 	strex	r3, r2, [r1]
 8005e34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1e5      	bne.n	8005e08 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2220      	movs	r2, #32
 8005e40:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d12e      	bne.n	8005eae <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	e853 3f00 	ldrex	r3, [r3]
 8005e62:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f023 0310 	bic.w	r3, r3, #16
 8005e6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	461a      	mov	r2, r3
 8005e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e74:	61fb      	str	r3, [r7, #28]
 8005e76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e78:	69b9      	ldr	r1, [r7, #24]
 8005e7a:	69fa      	ldr	r2, [r7, #28]
 8005e7c:	e841 2300 	strex	r3, r2, [r1]
 8005e80:	617b      	str	r3, [r7, #20]
   return(result);
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1e6      	bne.n	8005e56 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	f003 0310 	and.w	r3, r3, #16
 8005e92:	2b10      	cmp	r3, #16
 8005e94:	d103      	bne.n	8005e9e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2210      	movs	r2, #16
 8005e9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7ff fa84 	bl	80053b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005eac:	e00b      	b.n	8005ec6 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7fa f990 	bl	80001d4 <HAL_UART_RxCpltCallback>
}
 8005eb4:	e007      	b.n	8005ec6 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	699a      	ldr	r2, [r3, #24]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f042 0208 	orr.w	r2, r2, #8
 8005ec4:	619a      	str	r2, [r3, #24]
}
 8005ec6:	bf00      	nop
 8005ec8:	3758      	adds	r7, #88	; 0x58
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b096      	sub	sp, #88	; 0x58
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005edc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ee4:	2b22      	cmp	r3, #34	; 0x22
 8005ee6:	f040 8094 	bne.w	8006012 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005ef0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005efa:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005efe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005f02:	4013      	ands	r3, r2
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f08:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f0e:	1c9a      	adds	r2, r3, #2
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d177      	bne.n	8006022 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f3a:	e853 3f00 	ldrex	r3, [r3]
 8005f3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f50:	643b      	str	r3, [r7, #64]	; 0x40
 8005f52:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f58:	e841 2300 	strex	r3, r2, [r1]
 8005f5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1e6      	bne.n	8005f32 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	3308      	adds	r3, #8
 8005f6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6c:	6a3b      	ldr	r3, [r7, #32]
 8005f6e:	e853 3f00 	ldrex	r3, [r3]
 8005f72:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	f023 0301 	bic.w	r3, r3, #1
 8005f7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	3308      	adds	r3, #8
 8005f82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f8c:	e841 2300 	strex	r3, r2, [r1]
 8005f90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d1e5      	bne.n	8005f64 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d12e      	bne.n	800600a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	e853 3f00 	ldrex	r3, [r3]
 8005fbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f023 0310 	bic.w	r3, r3, #16
 8005fc6:	647b      	str	r3, [r7, #68]	; 0x44
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	461a      	mov	r2, r3
 8005fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fd0:	61bb      	str	r3, [r7, #24]
 8005fd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd4:	6979      	ldr	r1, [r7, #20]
 8005fd6:	69ba      	ldr	r2, [r7, #24]
 8005fd8:	e841 2300 	strex	r3, r2, [r1]
 8005fdc:	613b      	str	r3, [r7, #16]
   return(result);
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1e6      	bne.n	8005fb2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	f003 0310 	and.w	r3, r3, #16
 8005fee:	2b10      	cmp	r3, #16
 8005ff0:	d103      	bne.n	8005ffa <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2210      	movs	r2, #16
 8005ff8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006000:	4619      	mov	r1, r3
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7ff f9d6 	bl	80053b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006008:	e00b      	b.n	8006022 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7fa f8e2 	bl	80001d4 <HAL_UART_RxCpltCallback>
}
 8006010:	e007      	b.n	8006022 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	699a      	ldr	r2, [r3, #24]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f042 0208 	orr.w	r2, r2, #8
 8006020:	619a      	str	r2, [r3, #24]
}
 8006022:	bf00      	nop
 8006024:	3758      	adds	r7, #88	; 0x58
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800602a:	b480      	push	{r7}
 800602c:	b083      	sub	sp, #12
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006032:	bf00      	nop
 8006034:	370c      	adds	r7, #12
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
	...

08006040 <__libc_init_array>:
 8006040:	b570      	push	{r4, r5, r6, lr}
 8006042:	4e0d      	ldr	r6, [pc, #52]	; (8006078 <__libc_init_array+0x38>)
 8006044:	4c0d      	ldr	r4, [pc, #52]	; (800607c <__libc_init_array+0x3c>)
 8006046:	1ba4      	subs	r4, r4, r6
 8006048:	10a4      	asrs	r4, r4, #2
 800604a:	2500      	movs	r5, #0
 800604c:	42a5      	cmp	r5, r4
 800604e:	d109      	bne.n	8006064 <__libc_init_array+0x24>
 8006050:	4e0b      	ldr	r6, [pc, #44]	; (8006080 <__libc_init_array+0x40>)
 8006052:	4c0c      	ldr	r4, [pc, #48]	; (8006084 <__libc_init_array+0x44>)
 8006054:	f000 f820 	bl	8006098 <_init>
 8006058:	1ba4      	subs	r4, r4, r6
 800605a:	10a4      	asrs	r4, r4, #2
 800605c:	2500      	movs	r5, #0
 800605e:	42a5      	cmp	r5, r4
 8006060:	d105      	bne.n	800606e <__libc_init_array+0x2e>
 8006062:	bd70      	pop	{r4, r5, r6, pc}
 8006064:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006068:	4798      	blx	r3
 800606a:	3501      	adds	r5, #1
 800606c:	e7ee      	b.n	800604c <__libc_init_array+0xc>
 800606e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006072:	4798      	blx	r3
 8006074:	3501      	adds	r5, #1
 8006076:	e7f2      	b.n	800605e <__libc_init_array+0x1e>
 8006078:	08006104 	.word	0x08006104
 800607c:	08006104 	.word	0x08006104
 8006080:	08006104 	.word	0x08006104
 8006084:	08006108 	.word	0x08006108

08006088 <memset>:
 8006088:	4402      	add	r2, r0
 800608a:	4603      	mov	r3, r0
 800608c:	4293      	cmp	r3, r2
 800608e:	d100      	bne.n	8006092 <memset+0xa>
 8006090:	4770      	bx	lr
 8006092:	f803 1b01 	strb.w	r1, [r3], #1
 8006096:	e7f9      	b.n	800608c <memset+0x4>

08006098 <_init>:
 8006098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800609a:	bf00      	nop
 800609c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800609e:	bc08      	pop	{r3}
 80060a0:	469e      	mov	lr, r3
 80060a2:	4770      	bx	lr

080060a4 <_fini>:
 80060a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060a6:	bf00      	nop
 80060a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060aa:	bc08      	pop	{r3}
 80060ac:	469e      	mov	lr, r3
 80060ae:	4770      	bx	lr
