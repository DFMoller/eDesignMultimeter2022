
eDesignMultimeter2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa6c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  0800ac08  0800ac08  0001ac08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af08  0800af08  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  0800af08  0800af08  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800af08  0800af08  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af08  0800af08  0001af08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af0c  0800af0c  0001af0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800af10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c94  2000001c  0800af2c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cb0  0800af2c  00020cb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b25f  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003165  00000000  00000000  0003b2ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001498  00000000  00000000  0003e410  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001340  00000000  00000000  0003f8a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022f2b  00000000  00000000  00040be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000148c0  00000000  00000000  00063b13  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d6331  00000000  00000000  000783d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014e704  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a48  00000000  00000000  0014e780  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000001c 	.word	0x2000001c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800abec 	.word	0x0800abec

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000020 	.word	0x20000020
 80001d4:	0800abec 	.word	0x0800abec

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <ADC_Main_Function>:
uint16_t millivolts;
uint16_t adc_array[1000];
uint16_t adc_count = 0;

void ADC_Main_Function()
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
	if(adc_count > 999)
 8000b7a:	4b5b      	ldr	r3, [pc, #364]	; (8000ce8 <ADC_Main_Function+0x174>)
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b82:	d37b      	bcc.n	8000c7c <ADC_Main_Function+0x108>
	{
		// Do calculations every 1000 readings
		adc_count = 0;
 8000b84:	4b58      	ldr	r3, [pc, #352]	; (8000ce8 <ADC_Main_Function+0x174>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	801a      	strh	r2, [r3, #0]
		uint32_t total = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
		uint16_t max = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	827b      	strh	r3, [r7, #18]
		uint16_t min = adc_array[99]; // arbitrary value
 8000b92:	4b56      	ldr	r3, [pc, #344]	; (8000cec <ADC_Main_Function+0x178>)
 8000b94:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8000b98:	823b      	strh	r3, [r7, #16]
		int16_t diff = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	807b      	strh	r3, [r7, #2]
		int16_t prev_diff = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	81fb      	strh	r3, [r7, #14]
		uint16_t mid_passes = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	81bb      	strh	r3, [r7, #12]
		// 1000 measurements at 5kHz take 200ms
		for(int x = 0; x < 1000; x++)
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	e023      	b.n	8000bf4 <ADC_Main_Function+0x80>
		{
			total += adc_array[x];
 8000bac:	4a4f      	ldr	r2, [pc, #316]	; (8000cec <ADC_Main_Function+0x178>)
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	4413      	add	r3, r2
 8000bba:	617b      	str	r3, [r7, #20]
			if(adc_array[x] > max)
 8000bbc:	4a4b      	ldr	r2, [pc, #300]	; (8000cec <ADC_Main_Function+0x178>)
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bc4:	8a7a      	ldrh	r2, [r7, #18]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d205      	bcs.n	8000bd6 <ADC_Main_Function+0x62>
			{
			  max = adc_array[x];
 8000bca:	4a48      	ldr	r2, [pc, #288]	; (8000cec <ADC_Main_Function+0x178>)
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bd2:	827b      	strh	r3, [r7, #18]
 8000bd4:	e00b      	b.n	8000bee <ADC_Main_Function+0x7a>
			}
			else if(adc_array[x] < min)
 8000bd6:	4a45      	ldr	r2, [pc, #276]	; (8000cec <ADC_Main_Function+0x178>)
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bde:	8a3a      	ldrh	r2, [r7, #16]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d904      	bls.n	8000bee <ADC_Main_Function+0x7a>
			{
			  min = adc_array[x];
 8000be4:	4a41      	ldr	r2, [pc, #260]	; (8000cec <ADC_Main_Function+0x178>)
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bec:	823b      	strh	r3, [r7, #16]
		for(int x = 0; x < 1000; x++)
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000bfa:	dbd7      	blt.n	8000bac <ADC_Main_Function+0x38>
			}
		}
		MeasurementState.Offset = total/1000;
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	4a3c      	ldr	r2, [pc, #240]	; (8000cf0 <ADC_Main_Function+0x17c>)
 8000c00:	fba2 2303 	umull	r2, r3, r2, r3
 8000c04:	099b      	lsrs	r3, r3, #6
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	4b3a      	ldr	r3, [pc, #232]	; (8000cf4 <ADC_Main_Function+0x180>)
 8000c0a:	811a      	strh	r2, [r3, #8]
		for(int x = 0; x < 1000; x++)
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	e018      	b.n	8000c44 <ADC_Main_Function+0xd0>
		{
			// Calculate frequency
			diff = adc_array[x] - MeasurementState.Offset;
 8000c12:	4a36      	ldr	r2, [pc, #216]	; (8000cec <ADC_Main_Function+0x178>)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000c1a:	4b36      	ldr	r3, [pc, #216]	; (8000cf4 <ADC_Main_Function+0x180>)
 8000c1c:	891b      	ldrh	r3, [r3, #8]
 8000c1e:	1ad3      	subs	r3, r2, r3
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	807b      	strh	r3, [r7, #2]
			if(diff > 0 && prev_diff < 0)
 8000c24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	dd06      	ble.n	8000c3a <ADC_Main_Function+0xc6>
 8000c2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	da02      	bge.n	8000c3a <ADC_Main_Function+0xc6>
			{
			  mid_passes++;
 8000c34:	89bb      	ldrh	r3, [r7, #12]
 8000c36:	3301      	adds	r3, #1
 8000c38:	81bb      	strh	r3, [r7, #12]
			}
			prev_diff = diff;
 8000c3a:	887b      	ldrh	r3, [r7, #2]
 8000c3c:	81fb      	strh	r3, [r7, #14]
		for(int x = 0; x < 1000; x++)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	3301      	adds	r3, #1
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c4a:	dbe2      	blt.n	8000c12 <ADC_Main_Function+0x9e>
		}
		MeasurementState.Period = 50000/(mid_passes);
 8000c4c:	89bb      	ldrh	r3, [r7, #12]
 8000c4e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000c52:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	4b26      	ldr	r3, [pc, #152]	; (8000cf4 <ADC_Main_Function+0x180>)
 8000c5a:	80da      	strh	r2, [r3, #6]
		MeasurementState.Frequency = 1000000/MeasurementState.Period;
 8000c5c:	4b25      	ldr	r3, [pc, #148]	; (8000cf4 <ADC_Main_Function+0x180>)
 8000c5e:	88db      	ldrh	r3, [r3, #6]
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b25      	ldr	r3, [pc, #148]	; (8000cf8 <ADC_Main_Function+0x184>)
 8000c64:	fb93 f3f2 	sdiv	r3, r3, r2
 8000c68:	b29a      	uxth	r2, r3
 8000c6a:	4b22      	ldr	r3, [pc, #136]	; (8000cf4 <ADC_Main_Function+0x180>)
 8000c6c:	809a      	strh	r2, [r3, #4]
		MeasurementState.Amplitude = max - min;
 8000c6e:	8a7a      	ldrh	r2, [r7, #18]
 8000c70:	8a3b      	ldrh	r3, [r7, #16]
 8000c72:	1ad3      	subs	r3, r2, r3
 8000c74:	b29a      	uxth	r2, r3
 8000c76:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <ADC_Main_Function+0x180>)
 8000c78:	805a      	strh	r2, [r3, #2]
		millivolts = raw*3300/4095;
//		millivolts += 100*millivolts/1000; // Calibration
		adc_array[adc_count] = millivolts;
		adc_count++;
	}
}
 8000c7a:	e030      	b.n	8000cde <ADC_Main_Function+0x16a>
		HAL_ADC_Start(&hadc1);
 8000c7c:	481f      	ldr	r0, [pc, #124]	; (8000cfc <ADC_Main_Function+0x188>)
 8000c7e:	f003 f8ab 	bl	8003dd8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000c82:	f04f 31ff 	mov.w	r1, #4294967295
 8000c86:	481d      	ldr	r0, [pc, #116]	; (8000cfc <ADC_Main_Function+0x188>)
 8000c88:	f003 f9f2 	bl	8004070 <HAL_ADC_PollForConversion>
		raw = HAL_ADC_GetValue(&hadc1);
 8000c8c:	481b      	ldr	r0, [pc, #108]	; (8000cfc <ADC_Main_Function+0x188>)
 8000c8e:	f003 faf1 	bl	8004274 <HAL_ADC_GetValue>
 8000c92:	4603      	mov	r3, r0
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <ADC_Main_Function+0x18c>)
 8000c98:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop(&hadc1);
 8000c9a:	4818      	ldr	r0, [pc, #96]	; (8000cfc <ADC_Main_Function+0x188>)
 8000c9c:	f003 f9b2 	bl	8004004 <HAL_ADC_Stop>
		millivolts = raw*3300/4095;
 8000ca0:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <ADC_Main_Function+0x18c>)
 8000ca2:	881b      	ldrh	r3, [r3, #0]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	f640 43e4 	movw	r3, #3300	; 0xce4
 8000caa:	fb03 f302 	mul.w	r3, r3, r2
 8000cae:	4a15      	ldr	r2, [pc, #84]	; (8000d04 <ADC_Main_Function+0x190>)
 8000cb0:	fb82 1203 	smull	r1, r2, r2, r3
 8000cb4:	441a      	add	r2, r3
 8000cb6:	12d2      	asrs	r2, r2, #11
 8000cb8:	17db      	asrs	r3, r3, #31
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <ADC_Main_Function+0x194>)
 8000cc0:	801a      	strh	r2, [r3, #0]
		adc_array[adc_count] = millivolts;
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <ADC_Main_Function+0x174>)
 8000cc4:	881b      	ldrh	r3, [r3, #0]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <ADC_Main_Function+0x194>)
 8000cca:	8819      	ldrh	r1, [r3, #0]
 8000ccc:	4b07      	ldr	r3, [pc, #28]	; (8000cec <ADC_Main_Function+0x178>)
 8000cce:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		adc_count++;
 8000cd2:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <ADC_Main_Function+0x174>)
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <ADC_Main_Function+0x174>)
 8000cdc:	801a      	strh	r2, [r3, #0]
}
 8000cde:	bf00      	nop
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000038 	.word	0x20000038
 8000cec:	20000048 	.word	0x20000048
 8000cf0:	10624dd3 	.word	0x10624dd3
 8000cf4:	2000081c 	.word	0x2000081c
 8000cf8:	000f4240 	.word	0x000f4240
 8000cfc:	20000b30 	.word	0x20000b30
 8000d00:	20000818 	.word	0x20000818
 8000d04:	80080081 	.word	0x80080081
 8000d08:	2000081a 	.word	0x2000081a

08000d0c <DAC_Calculate_Buffer>:
extern DAC_HandleTypeDef hdac1;

OutputStateType OutputState;

void DAC_Calculate_Buffer()
{
 8000d0c:	b590      	push	{r4, r7, lr}
 8000d0e:	ed2d 8b02 	vpush	{d8}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
	if(OutputState.Mode == d)
 8000d16:	4b5a      	ldr	r3, [pc, #360]	; (8000e80 <DAC_Calculate_Buffer+0x174>)
 8000d18:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 8000d1c:	2b64      	cmp	r3, #100	; 0x64
 8000d1e:	d11c      	bne.n	8000d5a <DAC_Calculate_Buffer+0x4e>
	{
		for(int i=0; i<100; i++)
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	e015      	b.n	8000d52 <DAC_Calculate_Buffer+0x46>
		{
			OutputState.Buffer[i] = (float)((float)(OutputState.Offset) * (float)(4096/3300) * (float)((float)(1000 / 600) / 2));
 8000d26:	4b56      	ldr	r3, [pc, #344]	; (8000e80 <DAC_Calculate_Buffer+0x174>)
 8000d28:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8000d2c:	ee07 3a90 	vmov	s15, r3
 8000d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d34:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000d38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d40:	ee17 1a90 	vmov	r1, s15
 8000d44:	4a4e      	ldr	r2, [pc, #312]	; (8000e80 <DAC_Calculate_Buffer+0x174>)
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i=0; i<100; i++)
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	2b63      	cmp	r3, #99	; 0x63
 8000d56:	dde6      	ble.n	8000d26 <DAC_Calculate_Buffer+0x1a>
				OutputState.Buffer[i] = OutputState.Offset * 4096/3300;
			}

		}
	}
}
 8000d58:	e08b      	b.n	8000e72 <DAC_Calculate_Buffer+0x166>
	else if (OutputState.Mode == s)
 8000d5a:	4b49      	ldr	r3, [pc, #292]	; (8000e80 <DAC_Calculate_Buffer+0x174>)
 8000d5c:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 8000d60:	2b73      	cmp	r3, #115	; 0x73
 8000d62:	d14b      	bne.n	8000dfc <DAC_Calculate_Buffer+0xf0>
		for(int i=0; i<100; i++)
 8000d64:	2300      	movs	r3, #0
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	e044      	b.n	8000df4 <DAC_Calculate_Buffer+0xe8>
			OutputState.Buffer[i] = ((float)((float)OutputState.Amplitude/2)*(float)sin(i*2*(float)(PI/100)) + (float)((float)OutputState.Offset * (float)0.85))*((float)(4096/3300)) * (float)((float)(1.165) / 2);
 8000d6a:	4b45      	ldr	r3, [pc, #276]	; (8000e80 <DAC_Calculate_Buffer+0x174>)
 8000d6c:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8000d70:	ee07 3a90 	vmov	s15, r3
 8000d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d78:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000d7c:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	ee07 3a90 	vmov	s15, r3
 8000d88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d8c:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8000e84 <DAC_Calculate_Buffer+0x178>
 8000d90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d94:	ee17 0a90 	vmov	r0, s15
 8000d98:	f7ff fb82 	bl	80004a0 <__aeabi_f2d>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	460c      	mov	r4, r1
 8000da0:	ec44 3b10 	vmov	d0, r3, r4
 8000da4:	f008 ff10 	bl	8009bc8 <sin>
 8000da8:	ec54 3b10 	vmov	r3, r4, d0
 8000dac:	4618      	mov	r0, r3
 8000dae:	4621      	mov	r1, r4
 8000db0:	f7ff fe90 	bl	8000ad4 <__aeabi_d2f>
 8000db4:	ee07 0a90 	vmov	s15, r0
 8000db8:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000dbc:	4b30      	ldr	r3, [pc, #192]	; (8000e80 <DAC_Calculate_Buffer+0x174>)
 8000dbe:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8000dc2:	ee07 3a90 	vmov	s15, r3
 8000dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dca:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8000e88 <DAC_Calculate_Buffer+0x17c>
 8000dce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000dd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dd6:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8000e8c <DAC_Calculate_Buffer+0x180>
 8000dda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000de2:	ee17 1a90 	vmov	r1, s15
 8000de6:	4a26      	ldr	r2, [pc, #152]	; (8000e80 <DAC_Calculate_Buffer+0x174>)
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i=0; i<100; i++)
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	3301      	adds	r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	2b63      	cmp	r3, #99	; 0x63
 8000df8:	ddb7      	ble.n	8000d6a <DAC_Calculate_Buffer+0x5e>
}
 8000dfa:	e03a      	b.n	8000e72 <DAC_Calculate_Buffer+0x166>
	else if (OutputState.Mode == p)
 8000dfc:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <DAC_Calculate_Buffer+0x174>)
 8000dfe:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 8000e02:	2b70      	cmp	r3, #112	; 0x70
 8000e04:	d135      	bne.n	8000e72 <DAC_Calculate_Buffer+0x166>
		for(int i=0; i<100; i++)
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	e02f      	b.n	8000e6c <DAC_Calculate_Buffer+0x160>
			if(i < OutputState.DutyCycle)
 8000e0c:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <DAC_Calculate_Buffer+0x174>)
 8000e0e:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8000e12:	461a      	mov	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4293      	cmp	r3, r2
 8000e18:	da15      	bge.n	8000e46 <DAC_Calculate_Buffer+0x13a>
				OutputState.Buffer[i] = (OutputState.Offset + OutputState.Amplitude) * 4096/3300;
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <DAC_Calculate_Buffer+0x174>)
 8000e1c:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <DAC_Calculate_Buffer+0x174>)
 8000e24:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8000e28:	4413      	add	r3, r2
 8000e2a:	031b      	lsls	r3, r3, #12
 8000e2c:	4a18      	ldr	r2, [pc, #96]	; (8000e90 <DAC_Calculate_Buffer+0x184>)
 8000e2e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e32:	441a      	add	r2, r3
 8000e34:	12d2      	asrs	r2, r2, #11
 8000e36:	17db      	asrs	r3, r3, #31
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4a10      	ldr	r2, [pc, #64]	; (8000e80 <DAC_Calculate_Buffer+0x174>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000e44:	e00f      	b.n	8000e66 <DAC_Calculate_Buffer+0x15a>
				OutputState.Buffer[i] = OutputState.Offset * 4096/3300;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <DAC_Calculate_Buffer+0x174>)
 8000e48:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8000e4c:	031b      	lsls	r3, r3, #12
 8000e4e:	4a10      	ldr	r2, [pc, #64]	; (8000e90 <DAC_Calculate_Buffer+0x184>)
 8000e50:	fb82 1203 	smull	r1, r2, r2, r3
 8000e54:	441a      	add	r2, r3
 8000e56:	12d2      	asrs	r2, r2, #11
 8000e58:	17db      	asrs	r3, r3, #31
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4a08      	ldr	r2, [pc, #32]	; (8000e80 <DAC_Calculate_Buffer+0x174>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i=0; i<100; i++)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b63      	cmp	r3, #99	; 0x63
 8000e70:	ddcc      	ble.n	8000e0c <DAC_Calculate_Buffer+0x100>
}
 8000e72:	bf00      	nop
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	ecbd 8b02 	vpop	{d8}
 8000e7c:	bd90      	pop	{r4, r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000828 	.word	0x20000828
 8000e84:	3d00adfc 	.word	0x3d00adfc
 8000e88:	3f59999a 	.word	0x3f59999a
 8000e8c:	3f151eb8 	.word	0x3f151eb8
 8000e90:	9ee009ef 	.word	0x9ee009ef

08000e94 <DAC_Set_Output_Frequency>:

void DAC_Set_Output_Frequency()
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
	OutputState.ARR_Val = OutputState.TIM2_Clock / (OutputState.Frequency*100);
 8000e98:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <DAC_Set_Output_Frequency+0x5c>)
 8000e9a:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8000e9e:	4a14      	ldr	r2, [pc, #80]	; (8000ef0 <DAC_Set_Output_Frequency+0x5c>)
 8000ea0:	f8b2 2198 	ldrh.w	r2, [r2, #408]	; 0x198
 8000ea4:	4611      	mov	r1, r2
 8000ea6:	2264      	movs	r2, #100	; 0x64
 8000ea8:	fb02 f201 	mul.w	r2, r2, r1
 8000eac:	fbb3 f3f2 	udiv	r3, r3, r2
 8000eb0:	4a0f      	ldr	r2, [pc, #60]	; (8000ef0 <DAC_Set_Output_Frequency+0x5c>)
 8000eb2:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
	__HAL_TIM_SET_AUTORELOAD(&htim2, OutputState.ARR_Val);
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <DAC_Set_Output_Frequency+0x60>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a0d      	ldr	r2, [pc, #52]	; (8000ef0 <DAC_Set_Output_Frequency+0x5c>)
 8000ebc:	f8d2 21a0 	ldr.w	r2, [r2, #416]	; 0x1a0
 8000ec0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <DAC_Set_Output_Frequency+0x5c>)
 8000ec4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000ec8:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <DAC_Set_Output_Frequency+0x60>)
 8000eca:	60d3      	str	r3, [r2, #12]
	TIM2->CR1 = 0;				// 	Disable Timer
 8000ecc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
	TIM2->EGR = TIM_EGR_UG;		//	Init registers
 8000ed4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ed8:	2201      	movs	r2, #1
 8000eda:	615a      	str	r2, [r3, #20]
	TIM2->CR1 = 1;				// 	Start
 8000edc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	601a      	str	r2, [r3, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000828 	.word	0x20000828
 8000ef4:	20000b80 	.word	0x20000b80

08000ef8 <DAC_Start>:

void DAC_Start()
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af02      	add	r7, sp, #8

	DAC_Calculate_Buffer();
 8000efe:	f7ff ff05 	bl	8000d0c <DAC_Calculate_Buffer>
	DAC_Set_Output_Frequency();
 8000f02:	f7ff ffc7 	bl	8000e94 <DAC_Set_Output_Frequency>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, OutputState.Buffer, 100, DAC_ALIGN_12B_R);
 8000f06:	2300      	movs	r3, #0
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	2364      	movs	r3, #100	; 0x64
 8000f0c:	4a09      	ldr	r2, [pc, #36]	; (8000f34 <DAC_Start+0x3c>)
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4809      	ldr	r0, [pc, #36]	; (8000f38 <DAC_Start+0x40>)
 8000f12:	f004 f8bb 	bl	800508c <HAL_DAC_Start_DMA>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 8000f16:	2201      	movs	r2, #1
 8000f18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f20:	f004 fe06 	bl	8005b30 <HAL_GPIO_WritePin>
	OutputState.On = true;
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <DAC_Start+0x3c>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000828 	.word	0x20000828
 8000f38:	200009f4 	.word	0x200009f4

08000f3c <DAC_Stop>:

void DAC_Stop()
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	OutputState.On = false;
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <DAC_Stop+0x28>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4807      	ldr	r0, [pc, #28]	; (8000f68 <DAC_Stop+0x2c>)
 8000f4c:	f004 f82f 	bl	8004fae <HAL_DAC_Stop_DMA>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5a:	f004 fde9 	bl	8005b30 <HAL_GPIO_WritePin>
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000828 	.word	0x20000828
 8000f68:	200009f4 	.word	0x200009f4

08000f6c <DAC_Update_Output>:

void DAC_Update_Output()
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	DAC_Stop();
 8000f70:	f7ff ffe4 	bl	8000f3c <DAC_Stop>
	DAC_Start();
 8000f74:	f7ff ffc0 	bl	8000ef8 <DAC_Start>
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <Init_Current_Sensor>:

uint8_t i2cdata[10];
HAL_StatusTypeDef res;

void Init_Current_Sensor()
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af02      	add	r7, sp, #8
	i2cdata[0] = ConfigureRegister_Address;
 8000f82:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <Init_Current_Sensor+0x54>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]
	i2cdata[1] = Configuration_Byte1;
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <Init_Current_Sensor+0x54>)
 8000f8a:	2239      	movs	r2, #57	; 0x39
 8000f8c:	705a      	strb	r2, [r3, #1]
	i2cdata[2] = Configuration_Byte2;
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <Init_Current_Sensor+0x54>)
 8000f90:	229f      	movs	r2, #159	; 0x9f
 8000f92:	709a      	strb	r2, [r3, #2]
	res = HAL_I2C_Master_Transmit(&hi2c1, CurrentSensor_Address, i2cdata, 3, 10);
 8000f94:	230a      	movs	r3, #10
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	2303      	movs	r3, #3
 8000f9a:	4a0d      	ldr	r2, [pc, #52]	; (8000fd0 <Init_Current_Sensor+0x54>)
 8000f9c:	2180      	movs	r1, #128	; 0x80
 8000f9e:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <Init_Current_Sensor+0x58>)
 8000fa0:	f004 fe86 	bl	8005cb0 <HAL_I2C_Master_Transmit>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <Init_Current_Sensor+0x5c>)
 8000faa:	701a      	strb	r2, [r3, #0]
	if(res != HAL_OK)
 8000fac:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <Init_Current_Sensor+0x5c>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d00a      	beq.n	8000fca <Init_Current_Sensor+0x4e>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)"I2C Configuration Transmit Error!\n", 34, 10);
 8000fb4:	230a      	movs	r3, #10
 8000fb6:	2222      	movs	r2, #34	; 0x22
 8000fb8:	4908      	ldr	r1, [pc, #32]	; (8000fdc <Init_Current_Sensor+0x60>)
 8000fba:	4809      	ldr	r0, [pc, #36]	; (8000fe0 <Init_Current_Sensor+0x64>)
 8000fbc:	f007 fbba 	bl	8008734 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, UartState.rx_byte, 1);
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4908      	ldr	r1, [pc, #32]	; (8000fe4 <Init_Current_Sensor+0x68>)
 8000fc4:	4806      	ldr	r0, [pc, #24]	; (8000fe0 <Init_Current_Sensor+0x64>)
 8000fc6:	f007 fc49 	bl	800885c <HAL_UART_Receive_IT>
	}
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	200009d0 	.word	0x200009d0
 8000fd4:	20000a08 	.word	0x20000a08
 8000fd8:	200009da 	.word	0x200009da
 8000fdc:	0800ac08 	.word	0x0800ac08
 8000fe0:	20000bcc 	.word	0x20000bcc
 8000fe4:	20000c9c 	.word	0x20000c9c

08000fe8 <Read_Current>:

void Read_Current()
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af02      	add	r7, sp, #8

		// Set Pointer to Shunt Voltage Register
		i2cdata[0] = ShuntVoltage_Address;
 8000fee:	4b34      	ldr	r3, [pc, #208]	; (80010c0 <Read_Current+0xd8>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	701a      	strb	r2, [r3, #0]
		res = HAL_I2C_Master_Transmit(&hi2c1, CurrentSensor_Address, i2cdata, 1, 10);
 8000ff4:	230a      	movs	r3, #10
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	4a31      	ldr	r2, [pc, #196]	; (80010c0 <Read_Current+0xd8>)
 8000ffc:	2180      	movs	r1, #128	; 0x80
 8000ffe:	4831      	ldr	r0, [pc, #196]	; (80010c4 <Read_Current+0xdc>)
 8001000:	f004 fe56 	bl	8005cb0 <HAL_I2C_Master_Transmit>
 8001004:	4603      	mov	r3, r0
 8001006:	461a      	mov	r2, r3
 8001008:	4b2f      	ldr	r3, [pc, #188]	; (80010c8 <Read_Current+0xe0>)
 800100a:	701a      	strb	r2, [r3, #0]
		if(res != HAL_OK)
 800100c:	4b2e      	ldr	r3, [pc, #184]	; (80010c8 <Read_Current+0xe0>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d00a      	beq.n	800102a <Read_Current+0x42>
		{
			HAL_UART_Transmit(&huart2, (uint8_t*)"I2C Transmit Pointer Change Error!\n", 35, 10);
 8001014:	230a      	movs	r3, #10
 8001016:	2223      	movs	r2, #35	; 0x23
 8001018:	492c      	ldr	r1, [pc, #176]	; (80010cc <Read_Current+0xe4>)
 800101a:	482d      	ldr	r0, [pc, #180]	; (80010d0 <Read_Current+0xe8>)
 800101c:	f007 fb8a 	bl	8008734 <HAL_UART_Transmit>
			HAL_UART_Receive_IT(&huart2, UartState.rx_byte, 1);
 8001020:	2201      	movs	r2, #1
 8001022:	492c      	ldr	r1, [pc, #176]	; (80010d4 <Read_Current+0xec>)
 8001024:	482a      	ldr	r0, [pc, #168]	; (80010d0 <Read_Current+0xe8>)
 8001026:	f007 fc19 	bl	800885c <HAL_UART_Receive_IT>
		}

		// Read Current
		uint8_t bytes[2] = {0};
 800102a:	2300      	movs	r3, #0
 800102c:	803b      	strh	r3, [r7, #0]
		res = HAL_I2C_Master_Receive(&hi2c1, CurrentSensor_Address, bytes, 2, 10);
 800102e:	463a      	mov	r2, r7
 8001030:	230a      	movs	r3, #10
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2302      	movs	r3, #2
 8001036:	2180      	movs	r1, #128	; 0x80
 8001038:	4822      	ldr	r0, [pc, #136]	; (80010c4 <Read_Current+0xdc>)
 800103a:	f004 ff2d 	bl	8005e98 <HAL_I2C_Master_Receive>
 800103e:	4603      	mov	r3, r0
 8001040:	461a      	mov	r2, r3
 8001042:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <Read_Current+0xe0>)
 8001044:	701a      	strb	r2, [r3, #0]
		if(res != HAL_OK)
 8001046:	4b20      	ldr	r3, [pc, #128]	; (80010c8 <Read_Current+0xe0>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00a      	beq.n	8001064 <Read_Current+0x7c>
		{
			HAL_UART_Transmit(&huart2, (uint8_t*)"I2C Receive Error!\n", 19, 10);
 800104e:	230a      	movs	r3, #10
 8001050:	2213      	movs	r2, #19
 8001052:	4921      	ldr	r1, [pc, #132]	; (80010d8 <Read_Current+0xf0>)
 8001054:	481e      	ldr	r0, [pc, #120]	; (80010d0 <Read_Current+0xe8>)
 8001056:	f007 fb6d 	bl	8008734 <HAL_UART_Transmit>
			HAL_UART_Receive_IT(&huart2, UartState.rx_byte, 1);
 800105a:	2201      	movs	r2, #1
 800105c:	491d      	ldr	r1, [pc, #116]	; (80010d4 <Read_Current+0xec>)
 800105e:	481c      	ldr	r0, [pc, #112]	; (80010d0 <Read_Current+0xe8>)
 8001060:	f007 fbfc 	bl	800885c <HAL_UART_Receive_IT>
		}

		int number;
		uint8_t upper = bytes[0];
 8001064:	783b      	ldrb	r3, [r7, #0]
 8001066:	70fb      	strb	r3, [r7, #3]
		uint8_t lower = bytes[1];
 8001068:	787b      	ldrb	r3, [r7, #1]
 800106a:	70bb      	strb	r3, [r7, #2]
		if(bytes[0] & (1 << 7))
 800106c:	783b      	ldrb	r3, [r7, #0]
 800106e:	b25b      	sxtb	r3, r3
 8001070:	2b00      	cmp	r3, #0
 8001072:	da0e      	bge.n	8001092 <Read_Current+0xaa>
		{
			// Two's complement Negative
			upper = ~upper;
 8001074:	78fb      	ldrb	r3, [r7, #3]
 8001076:	43db      	mvns	r3, r3
 8001078:	70fb      	strb	r3, [r7, #3]
			lower = ~lower;
 800107a:	78bb      	ldrb	r3, [r7, #2]
 800107c:	43db      	mvns	r3, r3
 800107e:	70bb      	strb	r3, [r7, #2]
			number = -1 * (((upper << 8) | lower) + 1);
 8001080:	78fb      	ldrb	r3, [r7, #3]
 8001082:	021a      	lsls	r2, r3, #8
 8001084:	78bb      	ldrb	r3, [r7, #2]
 8001086:	4313      	orrs	r3, r2
 8001088:	43db      	mvns	r3, r3
 800108a:	607b      	str	r3, [r7, #4]
			number = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	e004      	b.n	800109c <Read_Current+0xb4>
		}
		else
		{
			number = (upper << 8) | lower;
 8001092:	78fb      	ldrb	r3, [r7, #3]
 8001094:	021a      	lsls	r2, r3, #8
 8001096:	78bb      	ldrb	r3, [r7, #2]
 8001098:	4313      	orrs	r3, r2
 800109a:	607b      	str	r3, [r7, #4]
		}
		CurrentState.Offset = number*100; // uA
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	461a      	mov	r2, r3
 80010a2:	0092      	lsls	r2, r2, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	461a      	mov	r2, r3
 80010a8:	0091      	lsls	r1, r2, #2
 80010aa:	461a      	mov	r2, r3
 80010ac:	460b      	mov	r3, r1
 80010ae:	4413      	add	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <Read_Current+0xf4>)
 80010b6:	811a      	strh	r2, [r3, #8]
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	200009d0 	.word	0x200009d0
 80010c4:	20000a08 	.word	0x20000a08
 80010c8:	200009da 	.word	0x200009da
 80010cc:	0800ac2c 	.word	0x0800ac2c
 80010d0:	20000bcc 	.word	0x20000bcc
 80010d4:	20000c9c 	.word	0x20000c9c
 80010d8:	0800ac50 	.word	0x0800ac50
 80010dc:	200009dc 	.word	0x200009dc

080010e0 <LCD_Init>:
#define lcd_D7_bit			12

DisplayStateType DisplayState;

void LCD_Init()
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	HAL_Delay(20);
 80010e4:	2014      	movs	r0, #20
 80010e6:	f002 fc5b 	bl	80039a0 <HAL_Delay>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionReset);
 80010ea:	2030      	movs	r0, #48	; 0x30
 80010ec:	f000 f95c 	bl	80013a8 <LCD_Write_8bitInstruction>
	HAL_Delay(5);
 80010f0:	2005      	movs	r0, #5
 80010f2:	f002 fc55 	bl	80039a0 <HAL_Delay>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionReset);
 80010f6:	2030      	movs	r0, #48	; 0x30
 80010f8:	f000 f956 	bl	80013a8 <LCD_Write_8bitInstruction>
	Delay_us_10(11);
 80010fc:	200b      	movs	r0, #11
 80010fe:	f001 fe27 	bl	8002d50 <Delay_us_10>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionReset);
 8001102:	2030      	movs	r0, #48	; 0x30
 8001104:	f000 f950 	bl	80013a8 <LCD_Write_8bitInstruction>
	Delay_us_10(5);
 8001108:	2005      	movs	r0, #5
 800110a:	f001 fe21 	bl	8002d50 <Delay_us_10>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionSet4bit);
 800110e:	2028      	movs	r0, #40	; 0x28
 8001110:	f000 f94a 	bl	80013a8 <LCD_Write_8bitInstruction>
	Delay_us_10(5);
 8001114:	2005      	movs	r0, #5
 8001116:	f001 fe1b 	bl	8002d50 <Delay_us_10>

	LCD_Write_Instruction(lcd_instruction_FunctionSet4bit);
 800111a:	2028      	movs	r0, #40	; 0x28
 800111c:	f000 f89c 	bl	8001258 <LCD_Write_Instruction>
	Delay_us_10(5);
 8001120:	2005      	movs	r0, #5
 8001122:	f001 fe15 	bl	8002d50 <Delay_us_10>

	LCD_Write_Instruction(lcd_instruction_DisplayOn);
 8001126:	200f      	movs	r0, #15
 8001128:	f000 f896 	bl	8001258 <LCD_Write_Instruction>
	Delay_us_10(5);
 800112c:	2005      	movs	r0, #5
 800112e:	f001 fe0f 	bl	8002d50 <Delay_us_10>

	LCD_Write_Instruction(lcd_instruction_ClearDisplay);
 8001132:	2001      	movs	r0, #1
 8001134:	f000 f890 	bl	8001258 <LCD_Write_Instruction>
	HAL_Delay(2);
 8001138:	2002      	movs	r0, #2
 800113a:	f002 fc31 	bl	80039a0 <HAL_Delay>

	LCD_Write_Instruction(lcd_instruction_EntryMode);
 800113e:	2006      	movs	r0, #6
 8001140:	f000 f88a 	bl	8001258 <LCD_Write_Instruction>
	Delay_us_10(5);
 8001144:	2005      	movs	r0, #5
 8001146:	f001 fe03 	bl	8002d50 <Delay_us_10>
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}

0800114e <LCD_Write_String>:

void LCD_Write_String(uint8_t string[])
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b084      	sub	sp, #16
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
//	HAL_Delay(1);
	int i = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
	while (string[i] != 0)
 800115a:	e009      	b.n	8001170 <LCD_Write_String+0x22>
	{
		LCD_Write_Character(string[i]);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	4618      	mov	r0, r3
 8001166:	f000 f84b 	bl	8001200 <LCD_Write_Character>
		i++;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	3301      	adds	r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
	while (string[i] != 0)
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1ef      	bne.n	800115c <LCD_Write_String+0xe>
//		HAL_Delay(1);
	}
}
 800117c:	bf00      	nop
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <LCD_Write_Character_Shift>:

void LCD_Write_Character_Shift(uint8_t character)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
	lcd_RS_GPIO_Port->ODR |= (1<<lcd_RS_bit);			// select data register (RS High)
 800118e:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <LCD_Write_Character_Shift+0x74>)
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	4a19      	ldr	r2, [pc, #100]	; (80011f8 <LCD_Write_Character_Shift+0x74>)
 8001194:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001198:	6153      	str	r3, [r2, #20]
	LCD_Write_Nibbles(character);
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	4618      	mov	r0, r3
 800119e:	f000 f871 	bl	8001284 <LCD_Write_Nibbles>
	if(DisplayState.CurrentLine == Topline){
 80011a2:	4b16      	ldr	r3, [pc, #88]	; (80011fc <LCD_Write_Character_Shift+0x78>)
 80011a4:	789b      	ldrb	r3, [r3, #2]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d106      	bne.n	80011b8 <LCD_Write_Character_Shift+0x34>
		DisplayState.ToplineCharacters ++;
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <LCD_Write_Character_Shift+0x78>)
 80011ac:	78db      	ldrb	r3, [r3, #3]
 80011ae:	3301      	adds	r3, #1
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <LCD_Write_Character_Shift+0x78>)
 80011b4:	70da      	strb	r2, [r3, #3]
 80011b6:	e009      	b.n	80011cc <LCD_Write_Character_Shift+0x48>
	} else if (DisplayState.CurrentLine == Bottomline){
 80011b8:	4b10      	ldr	r3, [pc, #64]	; (80011fc <LCD_Write_Character_Shift+0x78>)
 80011ba:	789b      	ldrb	r3, [r3, #2]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d105      	bne.n	80011cc <LCD_Write_Character_Shift+0x48>
		DisplayState.BottomlineCharacters ++;
 80011c0:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <LCD_Write_Character_Shift+0x78>)
 80011c2:	791b      	ldrb	r3, [r3, #4]
 80011c4:	3301      	adds	r3, #1
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <LCD_Write_Character_Shift+0x78>)
 80011ca:	711a      	strb	r2, [r3, #4]
	}
	if((DisplayState.CurrentLine == Topline && DisplayState.ToplineCharacters > 15)
 80011cc:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <LCD_Write_Character_Shift+0x78>)
 80011ce:	789b      	ldrb	r3, [r3, #2]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d103      	bne.n	80011dc <LCD_Write_Character_Shift+0x58>
 80011d4:	4b09      	ldr	r3, [pc, #36]	; (80011fc <LCD_Write_Character_Shift+0x78>)
 80011d6:	78db      	ldrb	r3, [r3, #3]
 80011d8:	2b0f      	cmp	r3, #15
 80011da:	d807      	bhi.n	80011ec <LCD_Write_Character_Shift+0x68>
			|| (DisplayState.CurrentLine == Bottomline && DisplayState.BottomlineCharacters > 15))
 80011dc:	4b07      	ldr	r3, [pc, #28]	; (80011fc <LCD_Write_Character_Shift+0x78>)
 80011de:	789b      	ldrb	r3, [r3, #2]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d105      	bne.n	80011f0 <LCD_Write_Character_Shift+0x6c>
 80011e4:	4b05      	ldr	r3, [pc, #20]	; (80011fc <LCD_Write_Character_Shift+0x78>)
 80011e6:	791b      	ldrb	r3, [r3, #4]
 80011e8:	2b0f      	cmp	r3, #15
 80011ea:	d901      	bls.n	80011f0 <LCD_Write_Character_Shift+0x6c>
	{
		// Scroll Screen
		LCD_Shift_Left();
 80011ec:	f000 f9ac 	bl	8001548 <LCD_Shift_Left>
	}
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	48000400 	.word	0x48000400
 80011fc:	200009e8 	.word	0x200009e8

08001200 <LCD_Write_Character>:

void LCD_Write_Character(uint8_t character)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
	lcd_RS_GPIO_Port->ODR |= (1<<lcd_RS_bit);			// select data register (RS High)
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <LCD_Write_Character+0x50>)
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	4a10      	ldr	r2, [pc, #64]	; (8001250 <LCD_Write_Character+0x50>)
 8001210:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001214:	6153      	str	r3, [r2, #20]
	LCD_Write_Nibbles(character);
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	4618      	mov	r0, r3
 800121a:	f000 f833 	bl	8001284 <LCD_Write_Nibbles>
	if(DisplayState.CurrentLine == Topline){
 800121e:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <LCD_Write_Character+0x54>)
 8001220:	789b      	ldrb	r3, [r3, #2]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d106      	bne.n	8001234 <LCD_Write_Character+0x34>
		DisplayState.ToplineCharacters ++;
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <LCD_Write_Character+0x54>)
 8001228:	78db      	ldrb	r3, [r3, #3]
 800122a:	3301      	adds	r3, #1
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <LCD_Write_Character+0x54>)
 8001230:	70da      	strb	r2, [r3, #3]
	} else if (DisplayState.CurrentLine == Bottomline){
		DisplayState.BottomlineCharacters ++;
	}
}
 8001232:	e009      	b.n	8001248 <LCD_Write_Character+0x48>
	} else if (DisplayState.CurrentLine == Bottomline){
 8001234:	4b07      	ldr	r3, [pc, #28]	; (8001254 <LCD_Write_Character+0x54>)
 8001236:	789b      	ldrb	r3, [r3, #2]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d105      	bne.n	8001248 <LCD_Write_Character+0x48>
		DisplayState.BottomlineCharacters ++;
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <LCD_Write_Character+0x54>)
 800123e:	791b      	ldrb	r3, [r3, #4]
 8001240:	3301      	adds	r3, #1
 8001242:	b2da      	uxtb	r2, r3
 8001244:	4b03      	ldr	r3, [pc, #12]	; (8001254 <LCD_Write_Character+0x54>)
 8001246:	711a      	strb	r2, [r3, #4]
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	48000400 	.word	0x48000400
 8001254:	200009e8 	.word	0x200009e8

08001258 <LCD_Write_Instruction>:

void LCD_Write_Instruction(uint8_t instruction)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
	lcd_RS_GPIO_Port->ODR &= ~(1<<lcd_RS_bit);			// select the Instruction Register (RS low)
 8001262:	4b07      	ldr	r3, [pc, #28]	; (8001280 <LCD_Write_Instruction+0x28>)
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	4a06      	ldr	r2, [pc, #24]	; (8001280 <LCD_Write_Instruction+0x28>)
 8001268:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800126c:	6153      	str	r3, [r2, #20]
	LCD_Write_Nibbles(instruction);
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	4618      	mov	r0, r3
 8001272:	f000 f807 	bl	8001284 <LCD_Write_Nibbles>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	48000400 	.word	0x48000400

08001284 <LCD_Write_Nibbles>:

void LCD_Write_Nibbles(uint8_t byte)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
	Delay_us_10(1); // tsu1 > 40ns
 800128e:	2001      	movs	r0, #1
 8001290:	f001 fd5e 	bl	8002d50 <Delay_us_10>
	lcd_E_GPIO_Port->ODR |= (1<<lcd_E_bit);			// set E high
 8001294:	4b42      	ldr	r3, [pc, #264]	; (80013a0 <LCD_Write_Nibbles+0x11c>)
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	4a41      	ldr	r2, [pc, #260]	; (80013a0 <LCD_Write_Nibbles+0x11c>)
 800129a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800129e:	6153      	str	r3, [r2, #20]
	LCD_ZeroPins();
 80012a0:	f000 f8d8 	bl	8001454 <LCD_ZeroPins>

	// Write first (most significant) nibble
	if(byte & 1<<7)	lcd_D7_GPIO_Port->ODR |= (1<<lcd_D7_bit);
 80012a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	da07      	bge.n	80012bc <LCD_Write_Nibbles+0x38>
 80012ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012ba:	6153      	str	r3, [r2, #20]
	if(byte & 1<<6)	lcd_D6_GPIO_Port->ODR |= (1<<lcd_D6_bit);
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d007      	beq.n	80012d6 <LCD_Write_Nibbles+0x52>
 80012c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012d4:	6153      	str	r3, [r2, #20]
	if(byte & 1<<5)	lcd_D5_GPIO_Port->ODR |= (1<<lcd_D5_bit);
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	f003 0320 	and.w	r3, r3, #32
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d005      	beq.n	80012ec <LCD_Write_Nibbles+0x68>
 80012e0:	4b30      	ldr	r3, [pc, #192]	; (80013a4 <LCD_Write_Nibbles+0x120>)
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	4a2f      	ldr	r2, [pc, #188]	; (80013a4 <LCD_Write_Nibbles+0x120>)
 80012e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ea:	6153      	str	r3, [r2, #20]
	if(byte & 1<<4)	lcd_D4_GPIO_Port->ODR |= (1<<lcd_D4_bit);
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	f003 0310 	and.w	r3, r3, #16
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d005      	beq.n	8001302 <LCD_Write_Nibbles+0x7e>
 80012f6:	4b2b      	ldr	r3, [pc, #172]	; (80013a4 <LCD_Write_Nibbles+0x120>)
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	4a2a      	ldr	r2, [pc, #168]	; (80013a4 <LCD_Write_Nibbles+0x120>)
 80012fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001300:	6153      	str	r3, [r2, #20]


	// Pulse Enable
//	HAL_Delay(1);
	Delay_us_10(10);
 8001302:	200a      	movs	r0, #10
 8001304:	f001 fd24 	bl	8002d50 <Delay_us_10>
	lcd_E_GPIO_Port->ODR &= ~(1<<lcd_E_bit);			// Set to 0
 8001308:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <LCD_Write_Nibbles+0x11c>)
 800130a:	695b      	ldr	r3, [r3, #20]
 800130c:	4a24      	ldr	r2, [pc, #144]	; (80013a0 <LCD_Write_Nibbles+0x11c>)
 800130e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001312:	6153      	str	r3, [r2, #20]
	lcd_E_GPIO_Port->ODR |= (1<<lcd_E_bit);				// Set to 1
 8001314:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <LCD_Write_Nibbles+0x11c>)
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	4a21      	ldr	r2, [pc, #132]	; (80013a0 <LCD_Write_Nibbles+0x11c>)
 800131a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800131e:	6153      	str	r3, [r2, #20]

	LCD_ZeroPins();
 8001320:	f000 f898 	bl	8001454 <LCD_ZeroPins>
	if(byte & 1<<3)	lcd_D7_GPIO_Port->ODR |= (1<<lcd_D7_bit);
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	2b00      	cmp	r3, #0
 800132c:	d007      	beq.n	800133e <LCD_Write_Nibbles+0xba>
 800132e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001332:	695b      	ldr	r3, [r3, #20]
 8001334:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001338:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800133c:	6153      	str	r3, [r2, #20]
	if(byte & 1<<2)	lcd_D6_GPIO_Port->ODR |= (1<<lcd_D6_bit);
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	2b00      	cmp	r3, #0
 8001346:	d007      	beq.n	8001358 <LCD_Write_Nibbles+0xd4>
 8001348:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001352:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001356:	6153      	str	r3, [r2, #20]
	if(byte & 1<<1)	lcd_D5_GPIO_Port->ODR |= (1<<lcd_D5_bit);
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d005      	beq.n	800136e <LCD_Write_Nibbles+0xea>
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <LCD_Write_Nibbles+0x120>)
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	4a0f      	ldr	r2, [pc, #60]	; (80013a4 <LCD_Write_Nibbles+0x120>)
 8001368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800136c:	6153      	str	r3, [r2, #20]
	if(byte & 1<<0)	lcd_D4_GPIO_Port->ODR |= (1<<lcd_D4_bit);
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	2b00      	cmp	r3, #0
 8001376:	d005      	beq.n	8001384 <LCD_Write_Nibbles+0x100>
 8001378:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <LCD_Write_Nibbles+0x120>)
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	4a09      	ldr	r2, [pc, #36]	; (80013a4 <LCD_Write_Nibbles+0x120>)
 800137e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001382:	6153      	str	r3, [r2, #20]

	// Drop Enable
//	HAL_Delay(1);
	Delay_us_10(10);
 8001384:	200a      	movs	r0, #10
 8001386:	f001 fce3 	bl	8002d50 <Delay_us_10>
	lcd_E_GPIO_Port->ODR &= ~(1<<lcd_E_bit);		// Set to 0
 800138a:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <LCD_Write_Nibbles+0x11c>)
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <LCD_Write_Nibbles+0x11c>)
 8001390:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001394:	6153      	str	r3, [r2, #20]
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	48000400 	.word	0x48000400
 80013a4:	48000800 	.word	0x48000800

080013a8 <LCD_Write_8bitInstruction>:

void LCD_Write_8bitInstruction(uint8_t byte)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
	lcd_RS_GPIO_Port->ODR &= ~(1<<lcd_RS_bit);			// Set RS to 0
 80013b2:	4b26      	ldr	r3, [pc, #152]	; (800144c <LCD_Write_8bitInstruction+0xa4>)
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	4a25      	ldr	r2, [pc, #148]	; (800144c <LCD_Write_8bitInstruction+0xa4>)
 80013b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80013bc:	6153      	str	r3, [r2, #20]
	Delay_us_10(1); // tsu1 > 40ns
 80013be:	2001      	movs	r0, #1
 80013c0:	f001 fcc6 	bl	8002d50 <Delay_us_10>
	lcd_E_GPIO_Port->ODR |= (1<<lcd_E_bit);				// Set E to 1
 80013c4:	4b21      	ldr	r3, [pc, #132]	; (800144c <LCD_Write_8bitInstruction+0xa4>)
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	4a20      	ldr	r2, [pc, #128]	; (800144c <LCD_Write_8bitInstruction+0xa4>)
 80013ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013ce:	6153      	str	r3, [r2, #20]
	LCD_ZeroPins();
 80013d0:	f000 f840 	bl	8001454 <LCD_ZeroPins>

	// Set to zero first
	if(byte & 1<<7)	lcd_D7_GPIO_Port->ODR |= (1<<lcd_D7_bit);
 80013d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	da07      	bge.n	80013ec <LCD_Write_8bitInstruction+0x44>
 80013dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80013e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013ea:	6153      	str	r3, [r2, #20]
	if(byte & 1<<6)	lcd_D6_GPIO_Port->ODR |= (1<<lcd_D6_bit);
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d007      	beq.n	8001406 <LCD_Write_8bitInstruction+0x5e>
 80013f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80013fa:	695b      	ldr	r3, [r3, #20]
 80013fc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001400:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001404:	6153      	str	r3, [r2, #20]
	if(byte & 1<<5)	lcd_D5_GPIO_Port->ODR |= (1<<lcd_D5_bit);
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	f003 0320 	and.w	r3, r3, #32
 800140c:	2b00      	cmp	r3, #0
 800140e:	d005      	beq.n	800141c <LCD_Write_8bitInstruction+0x74>
 8001410:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <LCD_Write_8bitInstruction+0xa8>)
 8001412:	695b      	ldr	r3, [r3, #20]
 8001414:	4a0e      	ldr	r2, [pc, #56]	; (8001450 <LCD_Write_8bitInstruction+0xa8>)
 8001416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141a:	6153      	str	r3, [r2, #20]
	if(byte & 1<<4)	lcd_D4_GPIO_Port->ODR |= (1<<lcd_D4_bit);
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	f003 0310 	and.w	r3, r3, #16
 8001422:	2b00      	cmp	r3, #0
 8001424:	d005      	beq.n	8001432 <LCD_Write_8bitInstruction+0x8a>
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <LCD_Write_8bitInstruction+0xa8>)
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	4a09      	ldr	r2, [pc, #36]	; (8001450 <LCD_Write_8bitInstruction+0xa8>)
 800142c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001430:	6153      	str	r3, [r2, #20]

//	HAL_Delay(1);
	Delay_us_10(1);
 8001432:	2001      	movs	r0, #1
 8001434:	f001 fc8c 	bl	8002d50 <Delay_us_10>
	lcd_E_GPIO_Port->ODR &= ~(1<<lcd_E_bit);		// Set E to 0
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <LCD_Write_8bitInstruction+0xa4>)
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	4a03      	ldr	r2, [pc, #12]	; (800144c <LCD_Write_8bitInstruction+0xa4>)
 800143e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001442:	6153      	str	r3, [r2, #20]
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	48000400 	.word	0x48000400
 8001450:	48000800 	.word	0x48000800

08001454 <LCD_ZeroPins>:

void LCD_ZeroPins()
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
	lcd_D7_GPIO_Port->ODR &= ~(1<<lcd_D7_bit);
 8001458:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001462:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001466:	6153      	str	r3, [r2, #20]
	lcd_D6_GPIO_Port->ODR &= ~(1<<lcd_D6_bit);
 8001468:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001472:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001476:	6153      	str	r3, [r2, #20]
	lcd_D5_GPIO_Port->ODR &= ~(1<<lcd_D5_bit);
 8001478:	4b08      	ldr	r3, [pc, #32]	; (800149c <LCD_ZeroPins+0x48>)
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	4a07      	ldr	r2, [pc, #28]	; (800149c <LCD_ZeroPins+0x48>)
 800147e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001482:	6153      	str	r3, [r2, #20]
	lcd_D4_GPIO_Port->ODR &= ~(1<<lcd_D4_bit);
 8001484:	4b05      	ldr	r3, [pc, #20]	; (800149c <LCD_ZeroPins+0x48>)
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	4a04      	ldr	r2, [pc, #16]	; (800149c <LCD_ZeroPins+0x48>)
 800148a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800148e:	6153      	str	r3, [r2, #20]
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	48000800 	.word	0x48000800

080014a0 <LCD_Clear_Display>:

void LCD_Clear_Display()
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
	LCD_Write_Instruction(lcd_instruction_ReturnHome);
 80014a4:	2002      	movs	r0, #2
 80014a6:	f7ff fed7 	bl	8001258 <LCD_Write_Instruction>
	Delay_us_10(200); // 2ms
 80014aa:	20c8      	movs	r0, #200	; 0xc8
 80014ac:	f001 fc50 	bl	8002d50 <Delay_us_10>
	LCD_Write_Instruction(lcd_instruction_ClearDisplay);
 80014b0:	2001      	movs	r0, #1
 80014b2:	f7ff fed1 	bl	8001258 <LCD_Write_Instruction>
	Delay_us_10(200); // 2ms
 80014b6:	20c8      	movs	r0, #200	; 0xc8
 80014b8:	f001 fc4a 	bl	8002d50 <Delay_us_10>
	DisplayState.ToplineCharacters = 0;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <LCD_Clear_Display+0x38>)
 80014be:	2200      	movs	r2, #0
 80014c0:	70da      	strb	r2, [r3, #3]
	DisplayState.BottomlineCharacters = 0;
 80014c2:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <LCD_Clear_Display+0x38>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	711a      	strb	r2, [r3, #4]
	DisplayState.CurrentLine = Topline;
 80014c8:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <LCD_Clear_Display+0x38>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	709a      	strb	r2, [r3, #2]
	DisplayState.DisplayPosition = 0;
 80014ce:	4b02      	ldr	r3, [pc, #8]	; (80014d8 <LCD_Clear_Display+0x38>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	725a      	strb	r2, [r3, #9]
}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	200009e8 	.word	0x200009e8

080014dc <LCD_NewLine>:

void LCD_NewLine()
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
	LCD_Write_Instruction(lcd_instruction_CursorNewLine);
 80014e0:	20c0      	movs	r0, #192	; 0xc0
 80014e2:	f7ff feb9 	bl	8001258 <LCD_Write_Instruction>
	Delay_us_10(5);
 80014e6:	2005      	movs	r0, #5
 80014e8:	f001 fc32 	bl	8002d50 <Delay_us_10>
	DisplayState.CurrentLine = Bottomline;
 80014ec:	4b02      	ldr	r3, [pc, #8]	; (80014f8 <LCD_NewLine+0x1c>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	709a      	strb	r2, [r3, #2]
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200009e8 	.word	0x200009e8

080014fc <LCD_AutoScroll>:

void LCD_AutoScroll()
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
	uint8_t returnflag = DisplayState.DisplayPosition + 12;
 8001502:	4b10      	ldr	r3, [pc, #64]	; (8001544 <LCD_AutoScroll+0x48>)
 8001504:	7a5b      	ldrb	r3, [r3, #9]
 8001506:	330c      	adds	r3, #12
 8001508:	71bb      	strb	r3, [r7, #6]
	uint8_t longestline;
	if(DisplayState.ToplineCharacters >= DisplayState.BottomlineCharacters) longestline = DisplayState.ToplineCharacters;
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <LCD_AutoScroll+0x48>)
 800150c:	78da      	ldrb	r2, [r3, #3]
 800150e:	4b0d      	ldr	r3, [pc, #52]	; (8001544 <LCD_AutoScroll+0x48>)
 8001510:	791b      	ldrb	r3, [r3, #4]
 8001512:	429a      	cmp	r2, r3
 8001514:	d303      	bcc.n	800151e <LCD_AutoScroll+0x22>
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <LCD_AutoScroll+0x48>)
 8001518:	78db      	ldrb	r3, [r3, #3]
 800151a:	71fb      	strb	r3, [r7, #7]
 800151c:	e002      	b.n	8001524 <LCD_AutoScroll+0x28>
	else longestline = DisplayState.BottomlineCharacters;
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <LCD_AutoScroll+0x48>)
 8001520:	791b      	ldrb	r3, [r3, #4]
 8001522:	71fb      	strb	r3, [r7, #7]
	if(longestline > 16)
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	2b10      	cmp	r3, #16
 8001528:	d908      	bls.n	800153c <LCD_AutoScroll+0x40>
	{
		if(returnflag > longestline)
 800152a:	79ba      	ldrb	r2, [r7, #6]
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	429a      	cmp	r2, r3
 8001530:	d902      	bls.n	8001538 <LCD_AutoScroll+0x3c>
		{
			LCD_Shift_Home();
 8001532:	f000 f82d 	bl	8001590 <LCD_Shift_Home>
		else
		{
			LCD_Shift_Left();
		}
	}
}
 8001536:	e001      	b.n	800153c <LCD_AutoScroll+0x40>
			LCD_Shift_Left();
 8001538:	f000 f806 	bl	8001548 <LCD_Shift_Left>
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	200009e8 	.word	0x200009e8

08001548 <LCD_Shift_Left>:

void LCD_Shift_Left()
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
	LCD_Write_Instruction(lcd_instruction_DisplayShiftLeft);
 800154c:	2018      	movs	r0, #24
 800154e:	f7ff fe83 	bl	8001258 <LCD_Write_Instruction>
	Delay_us_10(5);
 8001552:	2005      	movs	r0, #5
 8001554:	f001 fbfc 	bl	8002d50 <Delay_us_10>
	DisplayState.DisplayPosition ++;
 8001558:	4b03      	ldr	r3, [pc, #12]	; (8001568 <LCD_Shift_Left+0x20>)
 800155a:	7a5b      	ldrb	r3, [r3, #9]
 800155c:	3301      	adds	r3, #1
 800155e:	b2da      	uxtb	r2, r3
 8001560:	4b01      	ldr	r3, [pc, #4]	; (8001568 <LCD_Shift_Left+0x20>)
 8001562:	725a      	strb	r2, [r3, #9]
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	200009e8 	.word	0x200009e8

0800156c <LCD_Shift_Right>:

void LCD_Shift_Right()
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
	LCD_Write_Instruction(lcd_instruction_DisplayShiftRight);
 8001570:	201c      	movs	r0, #28
 8001572:	f7ff fe71 	bl	8001258 <LCD_Write_Instruction>
	Delay_us_10(5);
 8001576:	2005      	movs	r0, #5
 8001578:	f001 fbea 	bl	8002d50 <Delay_us_10>
	DisplayState.DisplayPosition -= 1;
 800157c:	4b03      	ldr	r3, [pc, #12]	; (800158c <LCD_Shift_Right+0x20>)
 800157e:	7a5b      	ldrb	r3, [r3, #9]
 8001580:	3b01      	subs	r3, #1
 8001582:	b2da      	uxtb	r2, r3
 8001584:	4b01      	ldr	r3, [pc, #4]	; (800158c <LCD_Shift_Right+0x20>)
 8001586:	725a      	strb	r2, [r3, #9]
}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200009e8 	.word	0x200009e8

08001590 <LCD_Shift_Home>:

void LCD_Shift_Home()
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
	uint8_t num_shifted = DisplayState.DisplayPosition;
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <LCD_Shift_Home+0x2c>)
 8001598:	7a5b      	ldrb	r3, [r3, #9]
 800159a:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < num_shifted; i++)
 800159c:	2300      	movs	r3, #0
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	e004      	b.n	80015ac <LCD_Shift_Home+0x1c>
	{
		LCD_Shift_Right();
 80015a2:	f7ff ffe3 	bl	800156c <LCD_Shift_Right>
	for(int i = 0; i < num_shifted; i++)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	3301      	adds	r3, #1
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	78fb      	ldrb	r3, [r7, #3]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	dbf6      	blt.n	80015a2 <LCD_Shift_Home+0x12>
	}
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200009e8 	.word	0x200009e8

080015c0 <LCD_Cursor_Home>:

void LCD_Cursor_Home()
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
	LCD_Write_Instruction(lcd_instruction_CursorHome);
 80015c4:	2080      	movs	r0, #128	; 0x80
 80015c6:	f7ff fe47 	bl	8001258 <LCD_Write_Instruction>
	Delay_us_10(5);
 80015ca:	2005      	movs	r0, #5
 80015cc:	f001 fbc0 	bl	8002d50 <Delay_us_10>
	DisplayState.ToplineCharacters = 0;
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <LCD_Cursor_Home+0x28>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	70da      	strb	r2, [r3, #3]
	DisplayState.BottomlineCharacters = 0;
 80015d6:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <LCD_Cursor_Home+0x28>)
 80015d8:	2200      	movs	r2, #0
 80015da:	711a      	strb	r2, [r3, #4]
	DisplayState.CurrentLine = Topline;
 80015dc:	4b02      	ldr	r3, [pc, #8]	; (80015e8 <LCD_Cursor_Home+0x28>)
 80015de:	2200      	movs	r2, #0
 80015e0:	709a      	strb	r2, [r3, #2]
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200009e8 	.word	0x200009e8

080015ec <LCD_changeDisplayMode>:

void LCD_changeDisplayMode(DisplayMode newDisplayMode)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
	LCD_Clear_Display();
 80015f6:	f7ff ff53 	bl	80014a0 <LCD_Clear_Display>
	if (newDisplayMode == Menu)
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d11b      	bne.n	8001638 <LCD_changeDisplayMode+0x4c>
	{
		// Change to Menu Display State
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001600:	2201      	movs	r2, #1
 8001602:	2120      	movs	r1, #32
 8001604:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001608:	f004 fa92 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800160c:	2200      	movs	r2, #0
 800160e:	2180      	movs	r1, #128	; 0x80
 8001610:	4829      	ldr	r0, [pc, #164]	; (80016b8 <LCD_changeDisplayMode+0xcc>)
 8001612:	f004 fa8d 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001616:	2200      	movs	r2, #0
 8001618:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800161c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001620:	f004 fa86 	bl	8005b30 <HAL_GPIO_WritePin>
		LCD_Display_Menu();
 8001624:	f000 f84c 	bl	80016c0 <LCD_Display_Menu>
		DisplayState.LastMode = DisplayState.Mode;
 8001628:	4b24      	ldr	r3, [pc, #144]	; (80016bc <LCD_changeDisplayMode+0xd0>)
 800162a:	781a      	ldrb	r2, [r3, #0]
 800162c:	4b23      	ldr	r3, [pc, #140]	; (80016bc <LCD_changeDisplayMode+0xd0>)
 800162e:	705a      	strb	r2, [r3, #1]
		DisplayState.Mode = Menu;
 8001630:	4b22      	ldr	r3, [pc, #136]	; (80016bc <LCD_changeDisplayMode+0xd0>)
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
		DisplayState.LastMode = DisplayState.Mode;
		DisplayState.Mode = Output;
	}
}
 8001636:	e03a      	b.n	80016ae <LCD_changeDisplayMode+0xc2>
	else if (newDisplayMode == Measurement)
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d11b      	bne.n	8001676 <LCD_changeDisplayMode+0x8a>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	2120      	movs	r1, #32
 8001642:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001646:	f004 fa73 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800164a:	2201      	movs	r2, #1
 800164c:	2180      	movs	r1, #128	; 0x80
 800164e:	481a      	ldr	r0, [pc, #104]	; (80016b8 <LCD_changeDisplayMode+0xcc>)
 8001650:	f004 fa6e 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001654:	2200      	movs	r2, #0
 8001656:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800165a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800165e:	f004 fa67 	bl	8005b30 <HAL_GPIO_WritePin>
		LCD_Display_Measurement();
 8001662:	f000 f843 	bl	80016ec <LCD_Display_Measurement>
		DisplayState.LastMode = DisplayState.Mode;
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <LCD_changeDisplayMode+0xd0>)
 8001668:	781a      	ldrb	r2, [r3, #0]
 800166a:	4b14      	ldr	r3, [pc, #80]	; (80016bc <LCD_changeDisplayMode+0xd0>)
 800166c:	705a      	strb	r2, [r3, #1]
		DisplayState.Mode = Measurement;
 800166e:	4b13      	ldr	r3, [pc, #76]	; (80016bc <LCD_changeDisplayMode+0xd0>)
 8001670:	2201      	movs	r2, #1
 8001672:	701a      	strb	r2, [r3, #0]
}
 8001674:	e01b      	b.n	80016ae <LCD_changeDisplayMode+0xc2>
	else if (newDisplayMode == Output)
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	2b02      	cmp	r3, #2
 800167a:	d118      	bne.n	80016ae <LCD_changeDisplayMode+0xc2>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800167c:	2200      	movs	r2, #0
 800167e:	2120      	movs	r1, #32
 8001680:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001684:	f004 fa54 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001688:	2200      	movs	r2, #0
 800168a:	2180      	movs	r1, #128	; 0x80
 800168c:	480a      	ldr	r0, [pc, #40]	; (80016b8 <LCD_changeDisplayMode+0xcc>)
 800168e:	f004 fa4f 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8001692:	2201      	movs	r2, #1
 8001694:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001698:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169c:	f004 fa48 	bl	8005b30 <HAL_GPIO_WritePin>
		DisplayState.LastMode = DisplayState.Mode;
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <LCD_changeDisplayMode+0xd0>)
 80016a2:	781a      	ldrb	r2, [r3, #0]
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <LCD_changeDisplayMode+0xd0>)
 80016a6:	705a      	strb	r2, [r3, #1]
		DisplayState.Mode = Output;
 80016a8:	4b04      	ldr	r3, [pc, #16]	; (80016bc <LCD_changeDisplayMode+0xd0>)
 80016aa:	2202      	movs	r2, #2
 80016ac:	701a      	strb	r2, [r3, #0]
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	48000800 	.word	0x48000800
 80016bc:	200009e8 	.word	0x200009e8

080016c0 <LCD_Display_Menu>:

void LCD_Display_Menu()
{
 80016c0:	b590      	push	{r4, r7, lr}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
	uint8_t lcd_string[] = "Menu Top Level";
 80016c6:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <LCD_Display_Menu+0x28>)
 80016c8:	463c      	mov	r4, r7
 80016ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016cc:	c407      	stmia	r4!, {r0, r1, r2}
 80016ce:	8023      	strh	r3, [r4, #0]
 80016d0:	3402      	adds	r4, #2
 80016d2:	0c1b      	lsrs	r3, r3, #16
 80016d4:	7023      	strb	r3, [r4, #0]
	LCD_Write_String(lcd_string);
 80016d6:	463b      	mov	r3, r7
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fd38 	bl	800114e <LCD_Write_String>
}
 80016de:	bf00      	nop
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd90      	pop	{r4, r7, pc}
 80016e6:	bf00      	nop
 80016e8:	0800ac64 	.word	0x0800ac64

080016ec <LCD_Display_Measurement>:

void LCD_Display_Measurement()
{
 80016ec:	b5b0      	push	{r4, r5, r7, lr}
 80016ee:	b0a4      	sub	sp, #144	; 0x90
 80016f0:	af00      	add	r7, sp, #0
//	LCD_Clear_Display();
	LCD_Cursor_Home();
 80016f2:	f7ff ff65 	bl	80015c0 <LCD_Cursor_Home>
	switch(MeasurementState.Mode)
 80016f6:	4b6f      	ldr	r3, [pc, #444]	; (80018b4 <LCD_Display_Measurement+0x1c8>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	f200 8218 	bhi.w	8001b30 <LCD_Display_Measurement+0x444>
 8001700:	a201      	add	r2, pc, #4	; (adr r2, 8001708 <LCD_Display_Measurement+0x1c>)
 8001702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001706:	bf00      	nop
 8001708:	08001719 	.word	0x08001719
 800170c:	080017e3 	.word	0x080017e3
 8001710:	080018dd 	.word	0x080018dd
 8001714:	08001af7 	.word	0x08001af7
	{
		case DV:
		{
			uint8_t topline[] = "x.xxxV";
 8001718:	4a67      	ldr	r2, [pc, #412]	; (80018b8 <LCD_Display_Measurement+0x1cc>)
 800171a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800171e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001722:	6018      	str	r0, [r3, #0]
 8001724:	3304      	adds	r3, #4
 8001726:	8019      	strh	r1, [r3, #0]
 8001728:	3302      	adds	r3, #2
 800172a:	0c0a      	lsrs	r2, r1, #16
 800172c:	701a      	strb	r2, [r3, #0]
			topline[0] = ((MeasurementState.Offset/1000) % 10) + 48;
 800172e:	4b61      	ldr	r3, [pc, #388]	; (80018b4 <LCD_Display_Measurement+0x1c8>)
 8001730:	891b      	ldrh	r3, [r3, #8]
 8001732:	4a62      	ldr	r2, [pc, #392]	; (80018bc <LCD_Display_Measurement+0x1d0>)
 8001734:	fba2 2303 	umull	r2, r3, r2, r3
 8001738:	099b      	lsrs	r3, r3, #6
 800173a:	b29a      	uxth	r2, r3
 800173c:	4b60      	ldr	r3, [pc, #384]	; (80018c0 <LCD_Display_Measurement+0x1d4>)
 800173e:	fba3 1302 	umull	r1, r3, r3, r2
 8001742:	08d9      	lsrs	r1, r3, #3
 8001744:	460b      	mov	r3, r1
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	440b      	add	r3, r1
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	b29b      	uxth	r3, r3
 8001750:	b2db      	uxtb	r3, r3
 8001752:	3330      	adds	r3, #48	; 0x30
 8001754:	b2db      	uxtb	r3, r3
 8001756:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
			topline[2] = ((MeasurementState.Offset/100) % 10) + 48;
 800175a:	4b56      	ldr	r3, [pc, #344]	; (80018b4 <LCD_Display_Measurement+0x1c8>)
 800175c:	891b      	ldrh	r3, [r3, #8]
 800175e:	4a59      	ldr	r2, [pc, #356]	; (80018c4 <LCD_Display_Measurement+0x1d8>)
 8001760:	fba2 2303 	umull	r2, r3, r2, r3
 8001764:	095b      	lsrs	r3, r3, #5
 8001766:	b29a      	uxth	r2, r3
 8001768:	4b55      	ldr	r3, [pc, #340]	; (80018c0 <LCD_Display_Measurement+0x1d4>)
 800176a:	fba3 1302 	umull	r1, r3, r3, r2
 800176e:	08d9      	lsrs	r1, r3, #3
 8001770:	460b      	mov	r3, r1
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	440b      	add	r3, r1
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	b29b      	uxth	r3, r3
 800177c:	b2db      	uxtb	r3, r3
 800177e:	3330      	adds	r3, #48	; 0x30
 8001780:	b2db      	uxtb	r3, r3
 8001782:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
			topline[3] = ((MeasurementState.Offset/10) % 10) + 48;
 8001786:	4b4b      	ldr	r3, [pc, #300]	; (80018b4 <LCD_Display_Measurement+0x1c8>)
 8001788:	891b      	ldrh	r3, [r3, #8]
 800178a:	4a4d      	ldr	r2, [pc, #308]	; (80018c0 <LCD_Display_Measurement+0x1d4>)
 800178c:	fba2 2303 	umull	r2, r3, r2, r3
 8001790:	08db      	lsrs	r3, r3, #3
 8001792:	b29a      	uxth	r2, r3
 8001794:	4b4a      	ldr	r3, [pc, #296]	; (80018c0 <LCD_Display_Measurement+0x1d4>)
 8001796:	fba3 1302 	umull	r1, r3, r3, r2
 800179a:	08d9      	lsrs	r1, r3, #3
 800179c:	460b      	mov	r3, r1
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	440b      	add	r3, r1
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	3330      	adds	r3, #48	; 0x30
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			topline[4] = ((MeasurementState.Offset) % 10) + 48;
 80017b2:	4b40      	ldr	r3, [pc, #256]	; (80018b4 <LCD_Display_Measurement+0x1c8>)
 80017b4:	891a      	ldrh	r2, [r3, #8]
 80017b6:	4b42      	ldr	r3, [pc, #264]	; (80018c0 <LCD_Display_Measurement+0x1d4>)
 80017b8:	fba3 1302 	umull	r1, r3, r3, r2
 80017bc:	08d9      	lsrs	r1, r3, #3
 80017be:	460b      	mov	r3, r1
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	440b      	add	r3, r1
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	3330      	adds	r3, #48	; 0x30
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
			LCD_Write_String(topline);
 80017d4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fcb8 	bl	800114e <LCD_Write_String>
			break;
 80017de:	bf00      	nop
 80017e0:	e1a7      	b.n	8001b32 <LCD_Display_Measurement+0x446>
		}
		case DI:
		{
			uint8_t topline[] = "xxx.xmA";
 80017e2:	4a39      	ldr	r2, [pc, #228]	; (80018c8 <LCD_Display_Measurement+0x1dc>)
 80017e4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80017e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017ec:	e883 0003 	stmia.w	r3, {r0, r1}
			topline[0] = ((CurrentState.Offset/100000) % 10) + 48;
 80017f0:	4b36      	ldr	r3, [pc, #216]	; (80018cc <LCD_Display_Measurement+0x1e0>)
 80017f2:	891b      	ldrh	r3, [r3, #8]
 80017f4:	4a36      	ldr	r2, [pc, #216]	; (80018d0 <LCD_Display_Measurement+0x1e4>)
 80017f6:	fb82 1203 	smull	r1, r2, r2, r3
 80017fa:	1352      	asrs	r2, r2, #13
 80017fc:	17db      	asrs	r3, r3, #31
 80017fe:	1ad2      	subs	r2, r2, r3
 8001800:	4b34      	ldr	r3, [pc, #208]	; (80018d4 <LCD_Display_Measurement+0x1e8>)
 8001802:	fb83 1302 	smull	r1, r3, r3, r2
 8001806:	1099      	asrs	r1, r3, #2
 8001808:	17d3      	asrs	r3, r2, #31
 800180a:	1ac9      	subs	r1, r1, r3
 800180c:	460b      	mov	r3, r1
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	440b      	add	r3, r1
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	1ad1      	subs	r1, r2, r3
 8001816:	b2cb      	uxtb	r3, r1
 8001818:	3330      	adds	r3, #48	; 0x30
 800181a:	b2db      	uxtb	r3, r3
 800181c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
			topline[1] = ((CurrentState.Offset/10000) % 10) + 48;
 8001820:	4b2a      	ldr	r3, [pc, #168]	; (80018cc <LCD_Display_Measurement+0x1e0>)
 8001822:	891b      	ldrh	r3, [r3, #8]
 8001824:	4a2c      	ldr	r2, [pc, #176]	; (80018d8 <LCD_Display_Measurement+0x1ec>)
 8001826:	fba2 2303 	umull	r2, r3, r2, r3
 800182a:	0b5b      	lsrs	r3, r3, #13
 800182c:	b29a      	uxth	r2, r3
 800182e:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <LCD_Display_Measurement+0x1d4>)
 8001830:	fba3 1302 	umull	r1, r3, r3, r2
 8001834:	08d9      	lsrs	r1, r3, #3
 8001836:	460b      	mov	r3, r1
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	440b      	add	r3, r1
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	b29b      	uxth	r3, r3
 8001842:	b2db      	uxtb	r3, r3
 8001844:	3330      	adds	r3, #48	; 0x30
 8001846:	b2db      	uxtb	r3, r3
 8001848:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
			topline[2] = ((CurrentState.Offset/1000) % 10) + 48;
 800184c:	4b1f      	ldr	r3, [pc, #124]	; (80018cc <LCD_Display_Measurement+0x1e0>)
 800184e:	891b      	ldrh	r3, [r3, #8]
 8001850:	4a1a      	ldr	r2, [pc, #104]	; (80018bc <LCD_Display_Measurement+0x1d0>)
 8001852:	fba2 2303 	umull	r2, r3, r2, r3
 8001856:	099b      	lsrs	r3, r3, #6
 8001858:	b29a      	uxth	r2, r3
 800185a:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <LCD_Display_Measurement+0x1d4>)
 800185c:	fba3 1302 	umull	r1, r3, r3, r2
 8001860:	08d9      	lsrs	r1, r3, #3
 8001862:	460b      	mov	r3, r1
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	440b      	add	r3, r1
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	b29b      	uxth	r3, r3
 800186e:	b2db      	uxtb	r3, r3
 8001870:	3330      	adds	r3, #48	; 0x30
 8001872:	b2db      	uxtb	r3, r3
 8001874:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			topline[4] = ((CurrentState.Offset/100) % 10) + 48;
 8001878:	4b14      	ldr	r3, [pc, #80]	; (80018cc <LCD_Display_Measurement+0x1e0>)
 800187a:	891b      	ldrh	r3, [r3, #8]
 800187c:	4a11      	ldr	r2, [pc, #68]	; (80018c4 <LCD_Display_Measurement+0x1d8>)
 800187e:	fba2 2303 	umull	r2, r3, r2, r3
 8001882:	095b      	lsrs	r3, r3, #5
 8001884:	b29a      	uxth	r2, r3
 8001886:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <LCD_Display_Measurement+0x1d4>)
 8001888:	fba3 1302 	umull	r1, r3, r3, r2
 800188c:	08d9      	lsrs	r1, r3, #3
 800188e:	460b      	mov	r3, r1
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	440b      	add	r3, r1
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	b29b      	uxth	r3, r3
 800189a:	b2db      	uxtb	r3, r3
 800189c:	3330      	adds	r3, #48	; 0x30
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
			LCD_Write_String(topline);
 80018a4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fc50 	bl	800114e <LCD_Write_String>
			break;
 80018ae:	bf00      	nop
 80018b0:	e13f      	b.n	8001b32 <LCD_Display_Measurement+0x446>
 80018b2:	bf00      	nop
 80018b4:	2000081c 	.word	0x2000081c
 80018b8:	0800ac74 	.word	0x0800ac74
 80018bc:	10624dd3 	.word	0x10624dd3
 80018c0:	cccccccd 	.word	0xcccccccd
 80018c4:	51eb851f 	.word	0x51eb851f
 80018c8:	0800ac7c 	.word	0x0800ac7c
 80018cc:	200009dc 	.word	0x200009dc
 80018d0:	14f8b589 	.word	0x14f8b589
 80018d4:	66666667 	.word	0x66666667
 80018d8:	d1b71759 	.word	0xd1b71759
		}
		case AV:
		{
			uint8_t topline[] = "O:x.xxxV,A:x.xxxV,F:xxxxHz";
 80018dc:	4b8e      	ldr	r3, [pc, #568]	; (8001b18 <LCD_Display_Measurement+0x42c>)
 80018de:	f107 0464 	add.w	r4, r7, #100	; 0x64
 80018e2:	461d      	mov	r5, r3
 80018e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018ec:	c403      	stmia	r4!, {r0, r1}
 80018ee:	8022      	strh	r2, [r4, #0]
 80018f0:	3402      	adds	r4, #2
 80018f2:	0c13      	lsrs	r3, r2, #16
 80018f4:	7023      	strb	r3, [r4, #0]
			topline[2] = ((MeasurementState.Offset/1000) % 10) + 48;
 80018f6:	4b89      	ldr	r3, [pc, #548]	; (8001b1c <LCD_Display_Measurement+0x430>)
 80018f8:	891b      	ldrh	r3, [r3, #8]
 80018fa:	4a89      	ldr	r2, [pc, #548]	; (8001b20 <LCD_Display_Measurement+0x434>)
 80018fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001900:	099b      	lsrs	r3, r3, #6
 8001902:	b29a      	uxth	r2, r3
 8001904:	4b87      	ldr	r3, [pc, #540]	; (8001b24 <LCD_Display_Measurement+0x438>)
 8001906:	fba3 1302 	umull	r1, r3, r3, r2
 800190a:	08d9      	lsrs	r1, r3, #3
 800190c:	460b      	mov	r3, r1
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	440b      	add	r3, r1
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	b29b      	uxth	r3, r3
 8001918:	b2db      	uxtb	r3, r3
 800191a:	3330      	adds	r3, #48	; 0x30
 800191c:	b2db      	uxtb	r3, r3
 800191e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
			topline[4] = ((MeasurementState.Offset/100) % 10) + 48;
 8001922:	4b7e      	ldr	r3, [pc, #504]	; (8001b1c <LCD_Display_Measurement+0x430>)
 8001924:	891b      	ldrh	r3, [r3, #8]
 8001926:	4a80      	ldr	r2, [pc, #512]	; (8001b28 <LCD_Display_Measurement+0x43c>)
 8001928:	fba2 2303 	umull	r2, r3, r2, r3
 800192c:	095b      	lsrs	r3, r3, #5
 800192e:	b29a      	uxth	r2, r3
 8001930:	4b7c      	ldr	r3, [pc, #496]	; (8001b24 <LCD_Display_Measurement+0x438>)
 8001932:	fba3 1302 	umull	r1, r3, r3, r2
 8001936:	08d9      	lsrs	r1, r3, #3
 8001938:	460b      	mov	r3, r1
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	b29b      	uxth	r3, r3
 8001944:	b2db      	uxtb	r3, r3
 8001946:	3330      	adds	r3, #48	; 0x30
 8001948:	b2db      	uxtb	r3, r3
 800194a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
			topline[5] = ((MeasurementState.Offset/10) % 10) + 48;
 800194e:	4b73      	ldr	r3, [pc, #460]	; (8001b1c <LCD_Display_Measurement+0x430>)
 8001950:	891b      	ldrh	r3, [r3, #8]
 8001952:	4a74      	ldr	r2, [pc, #464]	; (8001b24 <LCD_Display_Measurement+0x438>)
 8001954:	fba2 2303 	umull	r2, r3, r2, r3
 8001958:	08db      	lsrs	r3, r3, #3
 800195a:	b29a      	uxth	r2, r3
 800195c:	4b71      	ldr	r3, [pc, #452]	; (8001b24 <LCD_Display_Measurement+0x438>)
 800195e:	fba3 1302 	umull	r1, r3, r3, r2
 8001962:	08d9      	lsrs	r1, r3, #3
 8001964:	460b      	mov	r3, r1
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	440b      	add	r3, r1
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	b29b      	uxth	r3, r3
 8001970:	b2db      	uxtb	r3, r3
 8001972:	3330      	adds	r3, #48	; 0x30
 8001974:	b2db      	uxtb	r3, r3
 8001976:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
			topline[6] = ((MeasurementState.Offset) % 10) + 48;
 800197a:	4b68      	ldr	r3, [pc, #416]	; (8001b1c <LCD_Display_Measurement+0x430>)
 800197c:	891a      	ldrh	r2, [r3, #8]
 800197e:	4b69      	ldr	r3, [pc, #420]	; (8001b24 <LCD_Display_Measurement+0x438>)
 8001980:	fba3 1302 	umull	r1, r3, r3, r2
 8001984:	08d9      	lsrs	r1, r3, #3
 8001986:	460b      	mov	r3, r1
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	440b      	add	r3, r1
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	b29b      	uxth	r3, r3
 8001992:	b2db      	uxtb	r3, r3
 8001994:	3330      	adds	r3, #48	; 0x30
 8001996:	b2db      	uxtb	r3, r3
 8001998:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
			topline[11] = ((MeasurementState.Amplitude/1000) % 10) + 48;
 800199c:	4b5f      	ldr	r3, [pc, #380]	; (8001b1c <LCD_Display_Measurement+0x430>)
 800199e:	885b      	ldrh	r3, [r3, #2]
 80019a0:	4a5f      	ldr	r2, [pc, #380]	; (8001b20 <LCD_Display_Measurement+0x434>)
 80019a2:	fba2 2303 	umull	r2, r3, r2, r3
 80019a6:	099b      	lsrs	r3, r3, #6
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	4b5e      	ldr	r3, [pc, #376]	; (8001b24 <LCD_Display_Measurement+0x438>)
 80019ac:	fba3 1302 	umull	r1, r3, r3, r2
 80019b0:	08d9      	lsrs	r1, r3, #3
 80019b2:	460b      	mov	r3, r1
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	440b      	add	r3, r1
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	b29b      	uxth	r3, r3
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	3330      	adds	r3, #48	; 0x30
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			topline[13] = ((MeasurementState.Amplitude/100) % 10) + 48;
 80019c8:	4b54      	ldr	r3, [pc, #336]	; (8001b1c <LCD_Display_Measurement+0x430>)
 80019ca:	885b      	ldrh	r3, [r3, #2]
 80019cc:	4a56      	ldr	r2, [pc, #344]	; (8001b28 <LCD_Display_Measurement+0x43c>)
 80019ce:	fba2 2303 	umull	r2, r3, r2, r3
 80019d2:	095b      	lsrs	r3, r3, #5
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	4b53      	ldr	r3, [pc, #332]	; (8001b24 <LCD_Display_Measurement+0x438>)
 80019d8:	fba3 1302 	umull	r1, r3, r3, r2
 80019dc:	08d9      	lsrs	r1, r3, #3
 80019de:	460b      	mov	r3, r1
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	440b      	add	r3, r1
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	3330      	adds	r3, #48	; 0x30
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
			topline[14] = ((MeasurementState.Amplitude/10) % 10) + 48;
 80019f4:	4b49      	ldr	r3, [pc, #292]	; (8001b1c <LCD_Display_Measurement+0x430>)
 80019f6:	885b      	ldrh	r3, [r3, #2]
 80019f8:	4a4a      	ldr	r2, [pc, #296]	; (8001b24 <LCD_Display_Measurement+0x438>)
 80019fa:	fba2 2303 	umull	r2, r3, r2, r3
 80019fe:	08db      	lsrs	r3, r3, #3
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	4b48      	ldr	r3, [pc, #288]	; (8001b24 <LCD_Display_Measurement+0x438>)
 8001a04:	fba3 1302 	umull	r1, r3, r3, r2
 8001a08:	08d9      	lsrs	r1, r3, #3
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	440b      	add	r3, r1
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	3330      	adds	r3, #48	; 0x30
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
			topline[15] = ((MeasurementState.Amplitude) % 10) + 48;
 8001a20:	4b3e      	ldr	r3, [pc, #248]	; (8001b1c <LCD_Display_Measurement+0x430>)
 8001a22:	885a      	ldrh	r2, [r3, #2]
 8001a24:	4b3f      	ldr	r3, [pc, #252]	; (8001b24 <LCD_Display_Measurement+0x438>)
 8001a26:	fba3 1302 	umull	r1, r3, r3, r2
 8001a2a:	08d9      	lsrs	r1, r3, #3
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	440b      	add	r3, r1
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	3330      	adds	r3, #48	; 0x30
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
			topline[20] = ((MeasurementState.Frequency/1000) % 10) + 48;
 8001a42:	4b36      	ldr	r3, [pc, #216]	; (8001b1c <LCD_Display_Measurement+0x430>)
 8001a44:	889b      	ldrh	r3, [r3, #4]
 8001a46:	4a36      	ldr	r2, [pc, #216]	; (8001b20 <LCD_Display_Measurement+0x434>)
 8001a48:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4c:	099b      	lsrs	r3, r3, #6
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	4b34      	ldr	r3, [pc, #208]	; (8001b24 <LCD_Display_Measurement+0x438>)
 8001a52:	fba3 1302 	umull	r1, r3, r3, r2
 8001a56:	08d9      	lsrs	r1, r3, #3
 8001a58:	460b      	mov	r3, r1
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	3330      	adds	r3, #48	; 0x30
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
			topline[21] = ((MeasurementState.Frequency/100) % 10) + 48;
 8001a6e:	4b2b      	ldr	r3, [pc, #172]	; (8001b1c <LCD_Display_Measurement+0x430>)
 8001a70:	889b      	ldrh	r3, [r3, #4]
 8001a72:	4a2d      	ldr	r2, [pc, #180]	; (8001b28 <LCD_Display_Measurement+0x43c>)
 8001a74:	fba2 2303 	umull	r2, r3, r2, r3
 8001a78:	095b      	lsrs	r3, r3, #5
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	4b29      	ldr	r3, [pc, #164]	; (8001b24 <LCD_Display_Measurement+0x438>)
 8001a7e:	fba3 1302 	umull	r1, r3, r3, r2
 8001a82:	08d9      	lsrs	r1, r3, #3
 8001a84:	460b      	mov	r3, r1
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	440b      	add	r3, r1
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	3330      	adds	r3, #48	; 0x30
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
			topline[22] = ((MeasurementState.Frequency/10) % 10) + 48;
 8001a9a:	4b20      	ldr	r3, [pc, #128]	; (8001b1c <LCD_Display_Measurement+0x430>)
 8001a9c:	889b      	ldrh	r3, [r3, #4]
 8001a9e:	4a21      	ldr	r2, [pc, #132]	; (8001b24 <LCD_Display_Measurement+0x438>)
 8001aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa4:	08db      	lsrs	r3, r3, #3
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	4b1e      	ldr	r3, [pc, #120]	; (8001b24 <LCD_Display_Measurement+0x438>)
 8001aaa:	fba3 1302 	umull	r1, r3, r3, r2
 8001aae:	08d9      	lsrs	r1, r3, #3
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	3330      	adds	r3, #48	; 0x30
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
			topline[23] = ((MeasurementState.Frequency) % 10) + 48;
 8001ac6:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <LCD_Display_Measurement+0x430>)
 8001ac8:	889a      	ldrh	r2, [r3, #4]
 8001aca:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <LCD_Display_Measurement+0x438>)
 8001acc:	fba3 1302 	umull	r1, r3, r3, r2
 8001ad0:	08d9      	lsrs	r1, r3, #3
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	440b      	add	r3, r1
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	3330      	adds	r3, #48	; 0x30
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
			LCD_Write_String(topline);
 8001ae8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff fb2e 	bl	800114e <LCD_Write_String>
			break;
 8001af2:	bf00      	nop
 8001af4:	e01d      	b.n	8001b32 <LCD_Display_Measurement+0x446>
		}
		case AI:
		{
			uint8_t topline[] = "AC Current";
 8001af6:	4a0d      	ldr	r2, [pc, #52]	; (8001b2c <LCD_Display_Measurement+0x440>)
 8001af8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001afc:	ca07      	ldmia	r2, {r0, r1, r2}
 8001afe:	c303      	stmia	r3!, {r0, r1}
 8001b00:	801a      	strh	r2, [r3, #0]
 8001b02:	3302      	adds	r3, #2
 8001b04:	0c12      	lsrs	r2, r2, #16
 8001b06:	701a      	strb	r2, [r3, #0]
			LCD_Write_String(topline);
 8001b08:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff fb1e 	bl	800114e <LCD_Write_String>
			break;
 8001b12:	bf00      	nop
 8001b14:	e00d      	b.n	8001b32 <LCD_Display_Measurement+0x446>
 8001b16:	bf00      	nop
 8001b18:	0800ac84 	.word	0x0800ac84
 8001b1c:	2000081c 	.word	0x2000081c
 8001b20:	10624dd3 	.word	0x10624dd3
 8001b24:	cccccccd 	.word	0xcccccccd
 8001b28:	51eb851f 	.word	0x51eb851f
 8001b2c:	0800aca0 	.word	0x0800aca0
		}
		default:
			// Problems
			break;
 8001b30:	bf00      	nop
	}
	LCD_NewLine();
 8001b32:	f7ff fcd3 	bl	80014dc <LCD_NewLine>
	if(OutputState.On){
 8001b36:	4b39      	ldr	r3, [pc, #228]	; (8001c1c <LCD_Display_Measurement+0x530>)
 8001b38:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 82e9 	beq.w	8002114 <LCD_Display_Measurement+0xa28>
		if(OutputState.Mode == d){
 8001b42:	4b36      	ldr	r3, [pc, #216]	; (8001c1c <LCD_Display_Measurement+0x530>)
 8001b44:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 8001b48:	2b64      	cmp	r3, #100	; 0x64
 8001b4a:	d171      	bne.n	8001c30 <LCD_Display_Measurement+0x544>
			uint8_t bottomline[] = "x.xxxV";
 8001b4c:	4a34      	ldr	r2, [pc, #208]	; (8001c20 <LCD_Display_Measurement+0x534>)
 8001b4e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b56:	6018      	str	r0, [r3, #0]
 8001b58:	3304      	adds	r3, #4
 8001b5a:	8019      	strh	r1, [r3, #0]
 8001b5c:	3302      	adds	r3, #2
 8001b5e:	0c0a      	lsrs	r2, r1, #16
 8001b60:	701a      	strb	r2, [r3, #0]
			bottomline[0] = ((OutputState.Offset/1000) % 10) + 48;
 8001b62:	4b2e      	ldr	r3, [pc, #184]	; (8001c1c <LCD_Display_Measurement+0x530>)
 8001b64:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8001b68:	4a2e      	ldr	r2, [pc, #184]	; (8001c24 <LCD_Display_Measurement+0x538>)
 8001b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6e:	099b      	lsrs	r3, r3, #6
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	4b2d      	ldr	r3, [pc, #180]	; (8001c28 <LCD_Display_Measurement+0x53c>)
 8001b74:	fba3 1302 	umull	r1, r3, r3, r2
 8001b78:	08d9      	lsrs	r1, r3, #3
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	440b      	add	r3, r1
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	3330      	adds	r3, #48	; 0x30
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
			bottomline[2] = ((OutputState.Offset/100) % 10) + 48;
 8001b90:	4b22      	ldr	r3, [pc, #136]	; (8001c1c <LCD_Display_Measurement+0x530>)
 8001b92:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8001b96:	4a25      	ldr	r2, [pc, #148]	; (8001c2c <LCD_Display_Measurement+0x540>)
 8001b98:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9c:	095b      	lsrs	r3, r3, #5
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	4b21      	ldr	r3, [pc, #132]	; (8001c28 <LCD_Display_Measurement+0x53c>)
 8001ba2:	fba3 1302 	umull	r1, r3, r3, r2
 8001ba6:	08d9      	lsrs	r1, r3, #3
 8001ba8:	460b      	mov	r3, r1
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	440b      	add	r3, r1
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	3330      	adds	r3, #48	; 0x30
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
			bottomline[3] = ((OutputState.Offset/10) % 10) + 48;
 8001bbe:	4b17      	ldr	r3, [pc, #92]	; (8001c1c <LCD_Display_Measurement+0x530>)
 8001bc0:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8001bc4:	4a18      	ldr	r2, [pc, #96]	; (8001c28 <LCD_Display_Measurement+0x53c>)
 8001bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bca:	08db      	lsrs	r3, r3, #3
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <LCD_Display_Measurement+0x53c>)
 8001bd0:	fba3 1302 	umull	r1, r3, r3, r2
 8001bd4:	08d9      	lsrs	r1, r3, #3
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	440b      	add	r3, r1
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	3330      	adds	r3, #48	; 0x30
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			bottomline[4] = ((OutputState.Offset) % 10) + 48;
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <LCD_Display_Measurement+0x530>)
 8001bee:	f8b3 219c 	ldrh.w	r2, [r3, #412]	; 0x19c
 8001bf2:	4b0d      	ldr	r3, [pc, #52]	; (8001c28 <LCD_Display_Measurement+0x53c>)
 8001bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8001bf8:	08d9      	lsrs	r1, r3, #3
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	440b      	add	r3, r1
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	3330      	adds	r3, #48	; 0x30
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
			LCD_Write_String(bottomline);
 8001c10:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff fa9a 	bl	800114e <LCD_Write_String>
		}
	} else {
		uint8_t bottomline[] = "OUTPUT OFF";
		LCD_Write_String(bottomline);
	}
}
 8001c1a:	e289      	b.n	8002130 <LCD_Display_Measurement+0xa44>
 8001c1c:	20000828 	.word	0x20000828
 8001c20:	0800ac74 	.word	0x0800ac74
 8001c24:	10624dd3 	.word	0x10624dd3
 8001c28:	cccccccd 	.word	0xcccccccd
 8001c2c:	51eb851f 	.word	0x51eb851f
		} else if (OutputState.Mode == s){
 8001c30:	4b8e      	ldr	r3, [pc, #568]	; (8001e6c <LCD_Display_Measurement+0x780>)
 8001c32:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 8001c36:	2b73      	cmp	r3, #115	; 0x73
 8001c38:	f040 8122 	bne.w	8001e80 <LCD_Display_Measurement+0x794>
			uint8_t bottomline[] = "O:x.xxxV,A:x.xxxV,F:xxxxHz";
 8001c3c:	4b8c      	ldr	r3, [pc, #560]	; (8001e70 <LCD_Display_Measurement+0x784>)
 8001c3e:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001c42:	461d      	mov	r5, r3
 8001c44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c4c:	c403      	stmia	r4!, {r0, r1}
 8001c4e:	8022      	strh	r2, [r4, #0]
 8001c50:	3402      	adds	r4, #2
 8001c52:	0c13      	lsrs	r3, r2, #16
 8001c54:	7023      	strb	r3, [r4, #0]
			bottomline[2] = ((OutputState.Offset/1000) % 10) + 48;
 8001c56:	4b85      	ldr	r3, [pc, #532]	; (8001e6c <LCD_Display_Measurement+0x780>)
 8001c58:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8001c5c:	4a85      	ldr	r2, [pc, #532]	; (8001e74 <LCD_Display_Measurement+0x788>)
 8001c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c62:	099b      	lsrs	r3, r3, #6
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	4b84      	ldr	r3, [pc, #528]	; (8001e78 <LCD_Display_Measurement+0x78c>)
 8001c68:	fba3 1302 	umull	r1, r3, r3, r2
 8001c6c:	08d9      	lsrs	r1, r3, #3
 8001c6e:	460b      	mov	r3, r1
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	440b      	add	r3, r1
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	3330      	adds	r3, #48	; 0x30
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			bottomline[4] = ((OutputState.Offset/100) % 10) + 48;
 8001c84:	4b79      	ldr	r3, [pc, #484]	; (8001e6c <LCD_Display_Measurement+0x780>)
 8001c86:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8001c8a:	4a7c      	ldr	r2, [pc, #496]	; (8001e7c <LCD_Display_Measurement+0x790>)
 8001c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c90:	095b      	lsrs	r3, r3, #5
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	4b78      	ldr	r3, [pc, #480]	; (8001e78 <LCD_Display_Measurement+0x78c>)
 8001c96:	fba3 1302 	umull	r1, r3, r3, r2
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	3330      	adds	r3, #48	; 0x30
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
			bottomline[5] = ((OutputState.Offset/10) % 10) + 48;
 8001cb2:	4b6e      	ldr	r3, [pc, #440]	; (8001e6c <LCD_Display_Measurement+0x780>)
 8001cb4:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8001cb8:	4a6f      	ldr	r2, [pc, #444]	; (8001e78 <LCD_Display_Measurement+0x78c>)
 8001cba:	fba2 2303 	umull	r2, r3, r2, r3
 8001cbe:	08db      	lsrs	r3, r3, #3
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	4b6d      	ldr	r3, [pc, #436]	; (8001e78 <LCD_Display_Measurement+0x78c>)
 8001cc4:	fba3 1302 	umull	r1, r3, r3, r2
 8001cc8:	08d9      	lsrs	r1, r3, #3
 8001cca:	460b      	mov	r3, r1
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	440b      	add	r3, r1
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	3330      	adds	r3, #48	; 0x30
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
			bottomline[6] = ((OutputState.Offset) % 10) + 48;
 8001ce0:	4b62      	ldr	r3, [pc, #392]	; (8001e6c <LCD_Display_Measurement+0x780>)
 8001ce2:	f8b3 219c 	ldrh.w	r2, [r3, #412]	; 0x19c
 8001ce6:	4b64      	ldr	r3, [pc, #400]	; (8001e78 <LCD_Display_Measurement+0x78c>)
 8001ce8:	fba3 1302 	umull	r1, r3, r3, r2
 8001cec:	08d9      	lsrs	r1, r3, #3
 8001cee:	460b      	mov	r3, r1
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	3330      	adds	r3, #48	; 0x30
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
			bottomline[11] = ((OutputState.Amplitude/1000) % 10) + 48;
 8001d04:	4b59      	ldr	r3, [pc, #356]	; (8001e6c <LCD_Display_Measurement+0x780>)
 8001d06:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8001d0a:	4a5a      	ldr	r2, [pc, #360]	; (8001e74 <LCD_Display_Measurement+0x788>)
 8001d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d10:	099b      	lsrs	r3, r3, #6
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	4b58      	ldr	r3, [pc, #352]	; (8001e78 <LCD_Display_Measurement+0x78c>)
 8001d16:	fba3 1302 	umull	r1, r3, r3, r2
 8001d1a:	08d9      	lsrs	r1, r3, #3
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	440b      	add	r3, r1
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	3330      	adds	r3, #48	; 0x30
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			bottomline[13] = ((OutputState.Amplitude/100) % 10) + 48;
 8001d32:	4b4e      	ldr	r3, [pc, #312]	; (8001e6c <LCD_Display_Measurement+0x780>)
 8001d34:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8001d38:	4a50      	ldr	r2, [pc, #320]	; (8001e7c <LCD_Display_Measurement+0x790>)
 8001d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3e:	095b      	lsrs	r3, r3, #5
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	4b4d      	ldr	r3, [pc, #308]	; (8001e78 <LCD_Display_Measurement+0x78c>)
 8001d44:	fba3 1302 	umull	r1, r3, r3, r2
 8001d48:	08d9      	lsrs	r1, r3, #3
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	440b      	add	r3, r1
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	3330      	adds	r3, #48	; 0x30
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
			bottomline[14] = ((OutputState.Amplitude/10) % 10) + 48;
 8001d60:	4b42      	ldr	r3, [pc, #264]	; (8001e6c <LCD_Display_Measurement+0x780>)
 8001d62:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8001d66:	4a44      	ldr	r2, [pc, #272]	; (8001e78 <LCD_Display_Measurement+0x78c>)
 8001d68:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6c:	08db      	lsrs	r3, r3, #3
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	4b41      	ldr	r3, [pc, #260]	; (8001e78 <LCD_Display_Measurement+0x78c>)
 8001d72:	fba3 1302 	umull	r1, r3, r3, r2
 8001d76:	08d9      	lsrs	r1, r3, #3
 8001d78:	460b      	mov	r3, r1
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	3330      	adds	r3, #48	; 0x30
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			bottomline[15] = ((OutputState.Amplitude) % 10) + 48;
 8001d8e:	4b37      	ldr	r3, [pc, #220]	; (8001e6c <LCD_Display_Measurement+0x780>)
 8001d90:	f8b3 2196 	ldrh.w	r2, [r3, #406]	; 0x196
 8001d94:	4b38      	ldr	r3, [pc, #224]	; (8001e78 <LCD_Display_Measurement+0x78c>)
 8001d96:	fba3 1302 	umull	r1, r3, r3, r2
 8001d9a:	08d9      	lsrs	r1, r3, #3
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	3330      	adds	r3, #48	; 0x30
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			bottomline[20] = ((OutputState.Frequency/1000) % 10) + 48;
 8001db2:	4b2e      	ldr	r3, [pc, #184]	; (8001e6c <LCD_Display_Measurement+0x780>)
 8001db4:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8001db8:	4a2e      	ldr	r2, [pc, #184]	; (8001e74 <LCD_Display_Measurement+0x788>)
 8001dba:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbe:	099b      	lsrs	r3, r3, #6
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	4b2d      	ldr	r3, [pc, #180]	; (8001e78 <LCD_Display_Measurement+0x78c>)
 8001dc4:	fba3 1302 	umull	r1, r3, r3, r2
 8001dc8:	08d9      	lsrs	r1, r3, #3
 8001dca:	460b      	mov	r3, r1
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	440b      	add	r3, r1
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	3330      	adds	r3, #48	; 0x30
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
			bottomline[21] = ((OutputState.Frequency/100) % 10) + 48;
 8001de0:	4b22      	ldr	r3, [pc, #136]	; (8001e6c <LCD_Display_Measurement+0x780>)
 8001de2:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8001de6:	4a25      	ldr	r2, [pc, #148]	; (8001e7c <LCD_Display_Measurement+0x790>)
 8001de8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dec:	095b      	lsrs	r3, r3, #5
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	4b21      	ldr	r3, [pc, #132]	; (8001e78 <LCD_Display_Measurement+0x78c>)
 8001df2:	fba3 1302 	umull	r1, r3, r3, r2
 8001df6:	08d9      	lsrs	r1, r3, #3
 8001df8:	460b      	mov	r3, r1
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	3330      	adds	r3, #48	; 0x30
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
			bottomline[22] = ((OutputState.Frequency/10) % 10) + 48;
 8001e0e:	4b17      	ldr	r3, [pc, #92]	; (8001e6c <LCD_Display_Measurement+0x780>)
 8001e10:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8001e14:	4a18      	ldr	r2, [pc, #96]	; (8001e78 <LCD_Display_Measurement+0x78c>)
 8001e16:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1a:	08db      	lsrs	r3, r3, #3
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <LCD_Display_Measurement+0x78c>)
 8001e20:	fba3 1302 	umull	r1, r3, r3, r2
 8001e24:	08d9      	lsrs	r1, r3, #3
 8001e26:	460b      	mov	r3, r1
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	3330      	adds	r3, #48	; 0x30
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
			bottomline[23] = ((OutputState.Frequency) % 10) + 48;
 8001e3c:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <LCD_Display_Measurement+0x780>)
 8001e3e:	f8b3 2198 	ldrh.w	r2, [r3, #408]	; 0x198
 8001e42:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <LCD_Display_Measurement+0x78c>)
 8001e44:	fba3 1302 	umull	r1, r3, r3, r2
 8001e48:	08d9      	lsrs	r1, r3, #3
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	440b      	add	r3, r1
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	3330      	adds	r3, #48	; 0x30
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			LCD_Write_String(bottomline);
 8001e60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff f972 	bl	800114e <LCD_Write_String>
}
 8001e6a:	e161      	b.n	8002130 <LCD_Display_Measurement+0xa44>
 8001e6c:	20000828 	.word	0x20000828
 8001e70:	0800ac84 	.word	0x0800ac84
 8001e74:	10624dd3 	.word	0x10624dd3
 8001e78:	cccccccd 	.word	0xcccccccd
 8001e7c:	51eb851f 	.word	0x51eb851f
		} else if (OutputState.Mode == p){
 8001e80:	4bad      	ldr	r3, [pc, #692]	; (8002138 <LCD_Display_Measurement+0xa4c>)
 8001e82:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 8001e86:	2b70      	cmp	r3, #112	; 0x70
 8001e88:	f040 8152 	bne.w	8002130 <LCD_Display_Measurement+0xa44>
			uint8_t bottomline[] = "O:x.xxxV,A:x.xxxV,F:xxxxHz,D:xxx%";
 8001e8c:	4bab      	ldr	r3, [pc, #684]	; (800213c <LCD_Display_Measurement+0xa50>)
 8001e8e:	1d3c      	adds	r4, r7, #4
 8001e90:	461d      	mov	r5, r3
 8001e92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e9a:	682b      	ldr	r3, [r5, #0]
 8001e9c:	8023      	strh	r3, [r4, #0]
			bottomline[2] = ((OutputState.Offset/1000) % 10) + 48;
 8001e9e:	4ba6      	ldr	r3, [pc, #664]	; (8002138 <LCD_Display_Measurement+0xa4c>)
 8001ea0:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8001ea4:	4aa6      	ldr	r2, [pc, #664]	; (8002140 <LCD_Display_Measurement+0xa54>)
 8001ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eaa:	099b      	lsrs	r3, r3, #6
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	4ba5      	ldr	r3, [pc, #660]	; (8002144 <LCD_Display_Measurement+0xa58>)
 8001eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8001eb4:	08d9      	lsrs	r1, r3, #3
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	440b      	add	r3, r1
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	3330      	adds	r3, #48	; 0x30
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	71bb      	strb	r3, [r7, #6]
			bottomline[4] = ((OutputState.Offset/100) % 10) + 48;
 8001eca:	4b9b      	ldr	r3, [pc, #620]	; (8002138 <LCD_Display_Measurement+0xa4c>)
 8001ecc:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8001ed0:	4a9d      	ldr	r2, [pc, #628]	; (8002148 <LCD_Display_Measurement+0xa5c>)
 8001ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	4b9a      	ldr	r3, [pc, #616]	; (8002144 <LCD_Display_Measurement+0xa58>)
 8001edc:	fba3 1302 	umull	r1, r3, r3, r2
 8001ee0:	08d9      	lsrs	r1, r3, #3
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	440b      	add	r3, r1
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	3330      	adds	r3, #48	; 0x30
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	723b      	strb	r3, [r7, #8]
			bottomline[5] = ((OutputState.Offset/10) % 10) + 48;
 8001ef6:	4b90      	ldr	r3, [pc, #576]	; (8002138 <LCD_Display_Measurement+0xa4c>)
 8001ef8:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8001efc:	4a91      	ldr	r2, [pc, #580]	; (8002144 <LCD_Display_Measurement+0xa58>)
 8001efe:	fba2 2303 	umull	r2, r3, r2, r3
 8001f02:	08db      	lsrs	r3, r3, #3
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	4b8f      	ldr	r3, [pc, #572]	; (8002144 <LCD_Display_Measurement+0xa58>)
 8001f08:	fba3 1302 	umull	r1, r3, r3, r2
 8001f0c:	08d9      	lsrs	r1, r3, #3
 8001f0e:	460b      	mov	r3, r1
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	3330      	adds	r3, #48	; 0x30
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	727b      	strb	r3, [r7, #9]
			bottomline[6] = ((OutputState.Offset) % 10) + 48;
 8001f22:	4b85      	ldr	r3, [pc, #532]	; (8002138 <LCD_Display_Measurement+0xa4c>)
 8001f24:	f8b3 219c 	ldrh.w	r2, [r3, #412]	; 0x19c
 8001f28:	4b86      	ldr	r3, [pc, #536]	; (8002144 <LCD_Display_Measurement+0xa58>)
 8001f2a:	fba3 1302 	umull	r1, r3, r3, r2
 8001f2e:	08d9      	lsrs	r1, r3, #3
 8001f30:	460b      	mov	r3, r1
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	440b      	add	r3, r1
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	3330      	adds	r3, #48	; 0x30
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	72bb      	strb	r3, [r7, #10]
			bottomline[11] = ((OutputState.Amplitude/1000) % 10) + 48;
 8001f44:	4b7c      	ldr	r3, [pc, #496]	; (8002138 <LCD_Display_Measurement+0xa4c>)
 8001f46:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8001f4a:	4a7d      	ldr	r2, [pc, #500]	; (8002140 <LCD_Display_Measurement+0xa54>)
 8001f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f50:	099b      	lsrs	r3, r3, #6
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	4b7b      	ldr	r3, [pc, #492]	; (8002144 <LCD_Display_Measurement+0xa58>)
 8001f56:	fba3 1302 	umull	r1, r3, r3, r2
 8001f5a:	08d9      	lsrs	r1, r3, #3
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	3330      	adds	r3, #48	; 0x30
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	73fb      	strb	r3, [r7, #15]
			bottomline[13] = ((OutputState.Amplitude/100) % 10) + 48;
 8001f70:	4b71      	ldr	r3, [pc, #452]	; (8002138 <LCD_Display_Measurement+0xa4c>)
 8001f72:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8001f76:	4a74      	ldr	r2, [pc, #464]	; (8002148 <LCD_Display_Measurement+0xa5c>)
 8001f78:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7c:	095b      	lsrs	r3, r3, #5
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	4b70      	ldr	r3, [pc, #448]	; (8002144 <LCD_Display_Measurement+0xa58>)
 8001f82:	fba3 1302 	umull	r1, r3, r3, r2
 8001f86:	08d9      	lsrs	r1, r3, #3
 8001f88:	460b      	mov	r3, r1
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	3330      	adds	r3, #48	; 0x30
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	747b      	strb	r3, [r7, #17]
			bottomline[14] = ((OutputState.Amplitude/10) % 10) + 48;
 8001f9c:	4b66      	ldr	r3, [pc, #408]	; (8002138 <LCD_Display_Measurement+0xa4c>)
 8001f9e:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8001fa2:	4a68      	ldr	r2, [pc, #416]	; (8002144 <LCD_Display_Measurement+0xa58>)
 8001fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa8:	08db      	lsrs	r3, r3, #3
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	4b65      	ldr	r3, [pc, #404]	; (8002144 <LCD_Display_Measurement+0xa58>)
 8001fae:	fba3 1302 	umull	r1, r3, r3, r2
 8001fb2:	08d9      	lsrs	r1, r3, #3
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	3330      	adds	r3, #48	; 0x30
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	74bb      	strb	r3, [r7, #18]
			bottomline[15] = ((OutputState.Amplitude) % 10) + 48;
 8001fc8:	4b5b      	ldr	r3, [pc, #364]	; (8002138 <LCD_Display_Measurement+0xa4c>)
 8001fca:	f8b3 2196 	ldrh.w	r2, [r3, #406]	; 0x196
 8001fce:	4b5d      	ldr	r3, [pc, #372]	; (8002144 <LCD_Display_Measurement+0xa58>)
 8001fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8001fd4:	08d9      	lsrs	r1, r3, #3
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	440b      	add	r3, r1
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	3330      	adds	r3, #48	; 0x30
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	74fb      	strb	r3, [r7, #19]
			bottomline[20] = ((OutputState.Frequency/1000) % 10) + 48;
 8001fea:	4b53      	ldr	r3, [pc, #332]	; (8002138 <LCD_Display_Measurement+0xa4c>)
 8001fec:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8001ff0:	4a53      	ldr	r2, [pc, #332]	; (8002140 <LCD_Display_Measurement+0xa54>)
 8001ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff6:	099b      	lsrs	r3, r3, #6
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	4b52      	ldr	r3, [pc, #328]	; (8002144 <LCD_Display_Measurement+0xa58>)
 8001ffc:	fba3 1302 	umull	r1, r3, r3, r2
 8002000:	08d9      	lsrs	r1, r3, #3
 8002002:	460b      	mov	r3, r1
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	440b      	add	r3, r1
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	b29b      	uxth	r3, r3
 800200e:	b2db      	uxtb	r3, r3
 8002010:	3330      	adds	r3, #48	; 0x30
 8002012:	b2db      	uxtb	r3, r3
 8002014:	763b      	strb	r3, [r7, #24]
			bottomline[21] = ((OutputState.Frequency/100) % 10) + 48;
 8002016:	4b48      	ldr	r3, [pc, #288]	; (8002138 <LCD_Display_Measurement+0xa4c>)
 8002018:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800201c:	4a4a      	ldr	r2, [pc, #296]	; (8002148 <LCD_Display_Measurement+0xa5c>)
 800201e:	fba2 2303 	umull	r2, r3, r2, r3
 8002022:	095b      	lsrs	r3, r3, #5
 8002024:	b29a      	uxth	r2, r3
 8002026:	4b47      	ldr	r3, [pc, #284]	; (8002144 <LCD_Display_Measurement+0xa58>)
 8002028:	fba3 1302 	umull	r1, r3, r3, r2
 800202c:	08d9      	lsrs	r1, r3, #3
 800202e:	460b      	mov	r3, r1
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	440b      	add	r3, r1
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	b29b      	uxth	r3, r3
 800203a:	b2db      	uxtb	r3, r3
 800203c:	3330      	adds	r3, #48	; 0x30
 800203e:	b2db      	uxtb	r3, r3
 8002040:	767b      	strb	r3, [r7, #25]
			bottomline[22] = ((OutputState.Frequency/10) % 10) + 48;
 8002042:	4b3d      	ldr	r3, [pc, #244]	; (8002138 <LCD_Display_Measurement+0xa4c>)
 8002044:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8002048:	4a3e      	ldr	r2, [pc, #248]	; (8002144 <LCD_Display_Measurement+0xa58>)
 800204a:	fba2 2303 	umull	r2, r3, r2, r3
 800204e:	08db      	lsrs	r3, r3, #3
 8002050:	b29a      	uxth	r2, r3
 8002052:	4b3c      	ldr	r3, [pc, #240]	; (8002144 <LCD_Display_Measurement+0xa58>)
 8002054:	fba3 1302 	umull	r1, r3, r3, r2
 8002058:	08d9      	lsrs	r1, r3, #3
 800205a:	460b      	mov	r3, r1
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	440b      	add	r3, r1
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	b29b      	uxth	r3, r3
 8002066:	b2db      	uxtb	r3, r3
 8002068:	3330      	adds	r3, #48	; 0x30
 800206a:	b2db      	uxtb	r3, r3
 800206c:	76bb      	strb	r3, [r7, #26]
			bottomline[23] = ((OutputState.Frequency) % 10) + 48;
 800206e:	4b32      	ldr	r3, [pc, #200]	; (8002138 <LCD_Display_Measurement+0xa4c>)
 8002070:	f8b3 2198 	ldrh.w	r2, [r3, #408]	; 0x198
 8002074:	4b33      	ldr	r3, [pc, #204]	; (8002144 <LCD_Display_Measurement+0xa58>)
 8002076:	fba3 1302 	umull	r1, r3, r3, r2
 800207a:	08d9      	lsrs	r1, r3, #3
 800207c:	460b      	mov	r3, r1
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	b29b      	uxth	r3, r3
 8002088:	b2db      	uxtb	r3, r3
 800208a:	3330      	adds	r3, #48	; 0x30
 800208c:	b2db      	uxtb	r3, r3
 800208e:	76fb      	strb	r3, [r7, #27]
			bottomline[29] = ((OutputState.DutyCycle/100) % 10) + 48;
 8002090:	4b29      	ldr	r3, [pc, #164]	; (8002138 <LCD_Display_Measurement+0xa4c>)
 8002092:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8002096:	4a2c      	ldr	r2, [pc, #176]	; (8002148 <LCD_Display_Measurement+0xa5c>)
 8002098:	fba2 2303 	umull	r2, r3, r2, r3
 800209c:	095b      	lsrs	r3, r3, #5
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	4b28      	ldr	r3, [pc, #160]	; (8002144 <LCD_Display_Measurement+0xa58>)
 80020a2:	fba3 1302 	umull	r1, r3, r3, r2
 80020a6:	08d9      	lsrs	r1, r3, #3
 80020a8:	460b      	mov	r3, r1
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	3330      	adds	r3, #48	; 0x30
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			bottomline[30] = ((OutputState.DutyCycle/10) % 10) + 48;
 80020bc:	4b1e      	ldr	r3, [pc, #120]	; (8002138 <LCD_Display_Measurement+0xa4c>)
 80020be:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 80020c2:	4a20      	ldr	r2, [pc, #128]	; (8002144 <LCD_Display_Measurement+0xa58>)
 80020c4:	fba2 2303 	umull	r2, r3, r2, r3
 80020c8:	08db      	lsrs	r3, r3, #3
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <LCD_Display_Measurement+0xa58>)
 80020ce:	fba3 1302 	umull	r1, r3, r3, r2
 80020d2:	08d9      	lsrs	r1, r3, #3
 80020d4:	460b      	mov	r3, r1
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	3330      	adds	r3, #48	; 0x30
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			bottomline[31] = ((OutputState.DutyCycle) % 10) + 48;
 80020e8:	4b13      	ldr	r3, [pc, #76]	; (8002138 <LCD_Display_Measurement+0xa4c>)
 80020ea:	f893 21a4 	ldrb.w	r2, [r3, #420]	; 0x1a4
 80020ee:	4b15      	ldr	r3, [pc, #84]	; (8002144 <LCD_Display_Measurement+0xa58>)
 80020f0:	fba3 1302 	umull	r1, r3, r3, r2
 80020f4:	08d9      	lsrs	r1, r3, #3
 80020f6:	460b      	mov	r3, r1
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	b2db      	uxtb	r3, r3
 8002102:	3330      	adds	r3, #48	; 0x30
 8002104:	b2db      	uxtb	r3, r3
 8002106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			LCD_Write_String(bottomline);
 800210a:	1d3b      	adds	r3, r7, #4
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff f81e 	bl	800114e <LCD_Write_String>
}
 8002112:	e00d      	b.n	8002130 <LCD_Display_Measurement+0xa44>
		uint8_t bottomline[] = "OUTPUT OFF";
 8002114:	4a0d      	ldr	r2, [pc, #52]	; (800214c <LCD_Display_Measurement+0xa60>)
 8002116:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800211a:	ca07      	ldmia	r2, {r0, r1, r2}
 800211c:	c303      	stmia	r3!, {r0, r1}
 800211e:	801a      	strh	r2, [r3, #0]
 8002120:	3302      	adds	r3, #2
 8002122:	0c12      	lsrs	r2, r2, #16
 8002124:	701a      	strb	r2, [r3, #0]
		LCD_Write_String(bottomline);
 8002126:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff f80f 	bl	800114e <LCD_Write_String>
}
 8002130:	bf00      	nop
 8002132:	3790      	adds	r7, #144	; 0x90
 8002134:	46bd      	mov	sp, r7
 8002136:	bdb0      	pop	{r4, r5, r7, pc}
 8002138:	20000828 	.word	0x20000828
 800213c:	0800acac 	.word	0x0800acac
 8002140:	10624dd3 	.word	0x10624dd3
 8002144:	cccccccd 	.word	0xcccccccd
 8002148:	51eb851f 	.word	0x51eb851f
 800214c:	0800acd0 	.word	0x0800acd0

08002150 <HAL_UART_RxCpltCallback>:

// Flag set every 10 us
uint8_t us_10 = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
	if((UartState.rx_bytes_counter == 0 && UartState.rx_byte[0] == '@') || UartState.rx_bytes_counter > 0)
 8002158:	4b18      	ldr	r3, [pc, #96]	; (80021bc <HAL_UART_RxCpltCallback+0x6c>)
 800215a:	7adb      	ldrb	r3, [r3, #11]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d103      	bne.n	8002168 <HAL_UART_RxCpltCallback+0x18>
 8002160:	4b16      	ldr	r3, [pc, #88]	; (80021bc <HAL_UART_RxCpltCallback+0x6c>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b40      	cmp	r3, #64	; 0x40
 8002166:	d003      	beq.n	8002170 <HAL_UART_RxCpltCallback+0x20>
 8002168:	4b14      	ldr	r3, [pc, #80]	; (80021bc <HAL_UART_RxCpltCallback+0x6c>)
 800216a:	7adb      	ldrb	r3, [r3, #11]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d01b      	beq.n	80021a8 <HAL_UART_RxCpltCallback+0x58>
	{
		UartState.rx_bytes[UartState.rx_bytes_counter] = UartState.rx_byte[0];
 8002170:	4b12      	ldr	r3, [pc, #72]	; (80021bc <HAL_UART_RxCpltCallback+0x6c>)
 8002172:	7adb      	ldrb	r3, [r3, #11]
 8002174:	4619      	mov	r1, r3
 8002176:	4b11      	ldr	r3, [pc, #68]	; (80021bc <HAL_UART_RxCpltCallback+0x6c>)
 8002178:	781a      	ldrb	r2, [r3, #0]
 800217a:	4b10      	ldr	r3, [pc, #64]	; (80021bc <HAL_UART_RxCpltCallback+0x6c>)
 800217c:	440b      	add	r3, r1
 800217e:	705a      	strb	r2, [r3, #1]
		UartState.rx_bytes_counter += 1;
 8002180:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <HAL_UART_RxCpltCallback+0x6c>)
 8002182:	7adb      	ldrb	r3, [r3, #11]
 8002184:	3301      	adds	r3, #1
 8002186:	b2da      	uxtb	r2, r3
 8002188:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <HAL_UART_RxCpltCallback+0x6c>)
 800218a:	72da      	strb	r2, [r3, #11]

		if(UartState.rx_byte[0] == '!')
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <HAL_UART_RxCpltCallback+0x6c>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b21      	cmp	r3, #33	; 0x21
 8002192:	d109      	bne.n	80021a8 <HAL_UART_RxCpltCallback+0x58>
		{
			UartState.message_received = 1;
 8002194:	4b09      	ldr	r3, [pc, #36]	; (80021bc <HAL_UART_RxCpltCallback+0x6c>)
 8002196:	2201      	movs	r2, #1
 8002198:	735a      	strb	r2, [r3, #13]
			UartState.rx_bytes_length = UartState.rx_bytes_counter;
 800219a:	4b08      	ldr	r3, [pc, #32]	; (80021bc <HAL_UART_RxCpltCallback+0x6c>)
 800219c:	7ada      	ldrb	r2, [r3, #11]
 800219e:	4b07      	ldr	r3, [pc, #28]	; (80021bc <HAL_UART_RxCpltCallback+0x6c>)
 80021a0:	731a      	strb	r2, [r3, #12]
			UartState.rx_bytes_counter = 0;
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <HAL_UART_RxCpltCallback+0x6c>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	72da      	strb	r2, [r3, #11]
		}
	}
	HAL_UART_Receive_IT(&huart2, UartState.rx_byte, 1);
 80021a8:	2201      	movs	r2, #1
 80021aa:	4904      	ldr	r1, [pc, #16]	; (80021bc <HAL_UART_RxCpltCallback+0x6c>)
 80021ac:	4804      	ldr	r0, [pc, #16]	; (80021c0 <HAL_UART_RxCpltCallback+0x70>)
 80021ae:	f006 fb55 	bl	800885c <HAL_UART_Receive_IT>
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20000c9c 	.word	0x20000c9c
 80021c0:	20000bcc 	.word	0x20000bcc

080021c4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	80fb      	strh	r3, [r7, #6]
	last_ticks = HAL_GetTick();
 80021ce:	f001 fbdb 	bl	8003988 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	4b15      	ldr	r3, [pc, #84]	; (800222c <HAL_GPIO_EXTI_Callback+0x68>)
 80021d6:	601a      	str	r2, [r3, #0]
	if(GPIO_Pin == btn_mid_Pin)
 80021d8:	88fb      	ldrh	r3, [r7, #6]
 80021da:	2b40      	cmp	r3, #64	; 0x40
 80021dc:	d103      	bne.n	80021e6 <HAL_GPIO_EXTI_Callback+0x22>
	{
		btn_mid_flag = 1;
 80021de:	4b14      	ldr	r3, [pc, #80]	; (8002230 <HAL_GPIO_EXTI_Callback+0x6c>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	701a      	strb	r2, [r3, #0]
	}
	else if(GPIO_Pin == btn_down_Pin)
	{
		btn_down_flag = 1;
	}
}
 80021e4:	e01d      	b.n	8002222 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_right_Pin)
 80021e6:	88fb      	ldrh	r3, [r7, #6]
 80021e8:	2b80      	cmp	r3, #128	; 0x80
 80021ea:	d103      	bne.n	80021f4 <HAL_GPIO_EXTI_Callback+0x30>
		btn_right_flag = 1;
 80021ec:	4b11      	ldr	r3, [pc, #68]	; (8002234 <HAL_GPIO_EXTI_Callback+0x70>)
 80021ee:	2201      	movs	r2, #1
 80021f0:	701a      	strb	r2, [r3, #0]
}
 80021f2:	e016      	b.n	8002222 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_up_Pin)
 80021f4:	88fb      	ldrh	r3, [r7, #6]
 80021f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021fa:	d103      	bne.n	8002204 <HAL_GPIO_EXTI_Callback+0x40>
		btn_up_flag = 1;
 80021fc:	4b0e      	ldr	r3, [pc, #56]	; (8002238 <HAL_GPIO_EXTI_Callback+0x74>)
 80021fe:	2201      	movs	r2, #1
 8002200:	701a      	strb	r2, [r3, #0]
}
 8002202:	e00e      	b.n	8002222 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_left_Pin)
 8002204:	88fb      	ldrh	r3, [r7, #6]
 8002206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800220a:	d103      	bne.n	8002214 <HAL_GPIO_EXTI_Callback+0x50>
		btn_left_flag = 1;
 800220c:	4b0b      	ldr	r3, [pc, #44]	; (800223c <HAL_GPIO_EXTI_Callback+0x78>)
 800220e:	2201      	movs	r2, #1
 8002210:	701a      	strb	r2, [r3, #0]
}
 8002212:	e006      	b.n	8002222 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_down_Pin)
 8002214:	88fb      	ldrh	r3, [r7, #6]
 8002216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800221a:	d102      	bne.n	8002222 <HAL_GPIO_EXTI_Callback+0x5e>
		btn_down_flag = 1;
 800221c:	4b08      	ldr	r3, [pc, #32]	; (8002240 <HAL_GPIO_EXTI_Callback+0x7c>)
 800221e:	2201      	movs	r2, #1
 8002220:	701a      	strb	r2, [r3, #0]
}
 8002222:	bf00      	nop
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20000040 	.word	0x20000040
 8002230:	2000003a 	.word	0x2000003a
 8002234:	2000003b 	.word	0x2000003b
 8002238:	2000003c 	.word	0x2000003c
 800223c:	2000003d 	.word	0x2000003d
 8002240:	2000003e 	.word	0x2000003e

08002244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	OutputState.TIM2_Clock = 72000000;
 8002248:	4bb4      	ldr	r3, [pc, #720]	; (800251c <main+0x2d8>)
 800224a:	4ab5      	ldr	r2, [pc, #724]	; (8002520 <main+0x2dc>)
 800224c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OutputState.On = false;
 8002250:	4bb2      	ldr	r3, [pc, #712]	; (800251c <main+0x2d8>)
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
	OutputState.Mode = d;
 8002258:	4bb0      	ldr	r3, [pc, #704]	; (800251c <main+0x2d8>)
 800225a:	2264      	movs	r2, #100	; 0x64
 800225c:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
	OutputState.Amplitude = 1000;
 8002260:	4bae      	ldr	r3, [pc, #696]	; (800251c <main+0x2d8>)
 8002262:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002266:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196
	OutputState.Offset = 1200;
 800226a:	4bac      	ldr	r3, [pc, #688]	; (800251c <main+0x2d8>)
 800226c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002270:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
	OutputState.Frequency = 1000;
 8002274:	4ba9      	ldr	r3, [pc, #676]	; (800251c <main+0x2d8>)
 8002276:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800227a:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
	OutputState.DCValue = 1000;
 800227e:	4ba7      	ldr	r3, [pc, #668]	; (800251c <main+0x2d8>)
 8002280:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002284:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
	OutputState.DutyCycle = 25;
 8002288:	4ba4      	ldr	r3, [pc, #656]	; (800251c <main+0x2d8>)
 800228a:	2219      	movs	r2, #25
 800228c:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4

	MeasurementState.Mode = DV;
 8002290:	4ba4      	ldr	r3, [pc, #656]	; (8002524 <main+0x2e0>)
 8002292:	2200      	movs	r2, #0
 8002294:	701a      	strb	r2, [r3, #0]
	MeasurementState.Amplitude = 0;
 8002296:	4ba3      	ldr	r3, [pc, #652]	; (8002524 <main+0x2e0>)
 8002298:	2200      	movs	r2, #0
 800229a:	805a      	strh	r2, [r3, #2]
	MeasurementState.Frequency = 0;
 800229c:	4ba1      	ldr	r3, [pc, #644]	; (8002524 <main+0x2e0>)
 800229e:	2200      	movs	r2, #0
 80022a0:	809a      	strh	r2, [r3, #4]
	MeasurementState.Offset = 0;
 80022a2:	4ba0      	ldr	r3, [pc, #640]	; (8002524 <main+0x2e0>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	811a      	strh	r2, [r3, #8]
	MeasurementState.Period = 0;
 80022a8:	4b9e      	ldr	r3, [pc, #632]	; (8002524 <main+0x2e0>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	80da      	strh	r2, [r3, #6]

	CurrentState.Amplitude = 0;
 80022ae:	4b9e      	ldr	r3, [pc, #632]	; (8002528 <main+0x2e4>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	805a      	strh	r2, [r3, #2]
	CurrentState.Frequency = 0;
 80022b4:	4b9c      	ldr	r3, [pc, #624]	; (8002528 <main+0x2e4>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	809a      	strh	r2, [r3, #4]
	CurrentState.Offset = 0;
 80022ba:	4b9b      	ldr	r3, [pc, #620]	; (8002528 <main+0x2e4>)
 80022bc:	2200      	movs	r2, #0
 80022be:	811a      	strh	r2, [r3, #8]
	CurrentState.Period = 0;
 80022c0:	4b99      	ldr	r3, [pc, #612]	; (8002528 <main+0x2e4>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	80da      	strh	r2, [r3, #6]

	DisplayState.PrintFlag = 0;
 80022c6:	4b99      	ldr	r3, [pc, #612]	; (800252c <main+0x2e8>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	715a      	strb	r2, [r3, #5]
	DisplayState.RefreshFlag = 0;
 80022cc:	4b97      	ldr	r3, [pc, #604]	; (800252c <main+0x2e8>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	71da      	strb	r2, [r3, #7]
	DisplayState.AutoScrollCounter = 0;
 80022d2:	4b96      	ldr	r3, [pc, #600]	; (800252c <main+0x2e8>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	721a      	strb	r2, [r3, #8]
	DisplayState.DisplayPosition = 0;
 80022d8:	4b94      	ldr	r3, [pc, #592]	; (800252c <main+0x2e8>)
 80022da:	2200      	movs	r2, #0
 80022dc:	725a      	strb	r2, [r3, #9]
	DisplayState.ToplineCharacters = 0;
 80022de:	4b93      	ldr	r3, [pc, #588]	; (800252c <main+0x2e8>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	70da      	strb	r2, [r3, #3]
	DisplayState.BottomlineCharacters = 0;
 80022e4:	4b91      	ldr	r3, [pc, #580]	; (800252c <main+0x2e8>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	711a      	strb	r2, [r3, #4]
	DisplayState.CurrentLine = Topline;
 80022ea:	4b90      	ldr	r3, [pc, #576]	; (800252c <main+0x2e8>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	709a      	strb	r2, [r3, #2]
	DisplayState.LastMode = Menu;
 80022f0:	4b8e      	ldr	r3, [pc, #568]	; (800252c <main+0x2e8>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	705a      	strb	r2, [r3, #1]

	// Tempory Measurement Values
	MeasurementState.Offset = 1000;
 80022f6:	4b8b      	ldr	r3, [pc, #556]	; (8002524 <main+0x2e0>)
 80022f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022fc:	811a      	strh	r2, [r3, #8]
	MeasurementState.Frequency = 5250;
 80022fe:	4b89      	ldr	r3, [pc, #548]	; (8002524 <main+0x2e0>)
 8002300:	f241 4282 	movw	r2, #5250	; 0x1482
 8002304:	809a      	strh	r2, [r3, #4]
	MeasurementState.Amplitude = 500;
 8002306:	4b87      	ldr	r3, [pc, #540]	; (8002524 <main+0x2e0>)
 8002308:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800230c:	805a      	strh	r2, [r3, #2]

	UartState.rx_bytes_counter = 0;
 800230e:	4b88      	ldr	r3, [pc, #544]	; (8002530 <main+0x2ec>)
 8002310:	2200      	movs	r2, #0
 8002312:	72da      	strb	r2, [r3, #11]
	UartState.rx_bytes_length = 0;
 8002314:	4b86      	ldr	r3, [pc, #536]	; (8002530 <main+0x2ec>)
 8002316:	2200      	movs	r2, #0
 8002318:	731a      	strb	r2, [r3, #12]
	UartState.message_received = 0;
 800231a:	4b85      	ldr	r3, [pc, #532]	; (8002530 <main+0x2ec>)
 800231c:	2200      	movs	r2, #0
 800231e:	735a      	strb	r2, [r3, #13]

	CurrentState.Measure_Flag = 0;
 8002320:	4b81      	ldr	r3, [pc, #516]	; (8002528 <main+0x2e4>)
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002326:	f001 fad5 	bl	80038d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800232a:	f000 f961 	bl	80025f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800232e:	f000 fbe1 	bl	8002af4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002332:	f000 fbc1 	bl	8002ab8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002336:	f000 fb8f 	bl	8002a58 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 800233a:	f000 fb3f 	bl	80029bc <MX_TIM16_Init>
  MX_ADC1_Init();
 800233e:	f000 f9c5 	bl	80026cc <MX_ADC1_Init>
  MX_DAC1_Init();
 8002342:	f000 fa33 	bl	80027ac <MX_DAC1_Init>
  MX_TIM2_Init();
 8002346:	f000 fa9b 	bl	8002880 <MX_TIM2_Init>
  MX_TIM17_Init();
 800234a:	f000 fb5d 	bl	8002a08 <MX_TIM17_Init>
  MX_I2C1_Init();
 800234e:	f000 fa57 	bl	8002800 <MX_I2C1_Init>
  MX_TIM15_Init();
 8002352:	f000 fae3 	bl	800291c <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  	// Transmit Student Number
	HAL_UART_Transmit(&huart2, std_num, 13, 10);
 8002356:	230a      	movs	r3, #10
 8002358:	220d      	movs	r2, #13
 800235a:	4976      	ldr	r1, [pc, #472]	; (8002534 <main+0x2f0>)
 800235c:	4876      	ldr	r0, [pc, #472]	; (8002538 <main+0x2f4>)
 800235e:	f006 f9e9 	bl	8008734 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, UartState.rx_byte, 1);
 8002362:	2201      	movs	r2, #1
 8002364:	4972      	ldr	r1, [pc, #456]	; (8002530 <main+0x2ec>)
 8002366:	4874      	ldr	r0, [pc, #464]	; (8002538 <main+0x2f4>)
 8002368:	f006 fa78 	bl	800885c <HAL_UART_Receive_IT>

	// Init ADC Timer
	HAL_TIM_Base_Start_IT(&htim16);
 800236c:	4873      	ldr	r0, [pc, #460]	; (800253c <main+0x2f8>)
 800236e:	f005 fd3b 	bl	8007de8 <HAL_TIM_Base_Start_IT>

	// Init LCD Refresh Timer
	HAL_TIM_Base_Start_IT(&htim17);
 8002372:	4873      	ldr	r0, [pc, #460]	; (8002540 <main+0x2fc>)
 8002374:	f005 fd38 	bl	8007de8 <HAL_TIM_Base_Start_IT>

	// Init 10us Timer
	HAL_TIM_Base_Start_IT(&htim15);
 8002378:	4872      	ldr	r0, [pc, #456]	; (8002544 <main+0x300>)
 800237a:	f005 fd35 	bl	8007de8 <HAL_TIM_Base_Start_IT>

	// Init LCD
	LCD_Init();
 800237e:	f7fe feaf 	bl	80010e0 <LCD_Init>

	// Init Display State
	HAL_Delay(1);
 8002382:	2001      	movs	r0, #1
 8002384:	f001 fb0c 	bl	80039a0 <HAL_Delay>
	LCD_changeDisplayMode(Menu);
 8002388:	2000      	movs	r0, #0
 800238a:	f7ff f92f 	bl	80015ec <LCD_changeDisplayMode>

	// Init DAC Timer
	HAL_TIM_Base_Start(&htim2);
 800238e:	486e      	ldr	r0, [pc, #440]	; (8002548 <main+0x304>)
 8002390:	f005 fcc2 	bl	8007d18 <HAL_TIM_Base_Start>

	//Testing
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8002394:	2201      	movs	r2, #1
 8002396:	2110      	movs	r1, #16
 8002398:	486c      	ldr	r0, [pc, #432]	; (800254c <main+0x308>)
 800239a:	f003 fbc9 	bl	8005b30 <HAL_GPIO_WritePin>

	// Init Current Sensor
	Init_Current_Sensor();
 800239e:	f7fe fded 	bl	8000f7c <Init_Current_Sensor>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(DisplayState.RefreshFlag == 1)
 80023a2:	4b62      	ldr	r3, [pc, #392]	; (800252c <main+0x2e8>)
 80023a4:	79db      	ldrb	r3, [r3, #7]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d125      	bne.n	80023f6 <main+0x1b2>
	  {
		  if(DisplayState.Mode == Measurement)
 80023aa:	4b60      	ldr	r3, [pc, #384]	; (800252c <main+0x2e8>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d11e      	bne.n	80023f0 <main+0x1ac>
		  {
			  LCD_Display_Measurement();
 80023b2:	f7ff f99b 	bl	80016ec <LCD_Display_Measurement>
//			  if(MeasurementState.Mode == AV || MeasurementState.Mode == AI)
			  if(MeasurementState.Mode == AV || (OutputState.On && OutputState.Mode != 'd'))
 80023b6:	4b5b      	ldr	r3, [pc, #364]	; (8002524 <main+0x2e0>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d009      	beq.n	80023d2 <main+0x18e>
 80023be:	4b57      	ldr	r3, [pc, #348]	; (800251c <main+0x2d8>)
 80023c0:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d013      	beq.n	80023f0 <main+0x1ac>
 80023c8:	4b54      	ldr	r3, [pc, #336]	; (800251c <main+0x2d8>)
 80023ca:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 80023ce:	2b64      	cmp	r3, #100	; 0x64
 80023d0:	d00e      	beq.n	80023f0 <main+0x1ac>
			  {
				  DisplayState.AutoScrollCounter ++;
 80023d2:	4b56      	ldr	r3, [pc, #344]	; (800252c <main+0x2e8>)
 80023d4:	7a1b      	ldrb	r3, [r3, #8]
 80023d6:	3301      	adds	r3, #1
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	4b54      	ldr	r3, [pc, #336]	; (800252c <main+0x2e8>)
 80023dc:	721a      	strb	r2, [r3, #8]
				  if(DisplayState.AutoScrollCounter > 2)
 80023de:	4b53      	ldr	r3, [pc, #332]	; (800252c <main+0x2e8>)
 80023e0:	7a1b      	ldrb	r3, [r3, #8]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d904      	bls.n	80023f0 <main+0x1ac>
				  {
					  LCD_AutoScroll();
 80023e6:	f7ff f889 	bl	80014fc <LCD_AutoScroll>
					  DisplayState.AutoScrollCounter = 0;
 80023ea:	4b50      	ldr	r3, [pc, #320]	; (800252c <main+0x2e8>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	721a      	strb	r2, [r3, #8]
				  }
			  }
		  }
		  DisplayState.RefreshFlag = 0;
 80023f0:	4b4e      	ldr	r3, [pc, #312]	; (800252c <main+0x2e8>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	71da      	strb	r2, [r3, #7]
	  }

	  // LCD UART OUTPUT JOB
	  if(DisplayState.PrintFlag)
 80023f6:	4b4d      	ldr	r3, [pc, #308]	; (800252c <main+0x2e8>)
 80023f8:	795b      	ldrb	r3, [r3, #5]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00e      	beq.n	800241c <main+0x1d8>
	  {
		  if(DisplayState.Mode != Output)
 80023fe:	4b4b      	ldr	r3, [pc, #300]	; (800252c <main+0x2e8>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b02      	cmp	r3, #2
 8002404:	d002      	beq.n	800240c <main+0x1c8>
		  {
			  LCD_changeDisplayMode(Output);
 8002406:	2002      	movs	r0, #2
 8002408:	f7ff f8f0 	bl	80015ec <LCD_changeDisplayMode>
		  }
		  LCD_Write_Character_Shift(DisplayState.PrintByte);
 800240c:	4b47      	ldr	r3, [pc, #284]	; (800252c <main+0x2e8>)
 800240e:	799b      	ldrb	r3, [r3, #6]
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe feb7 	bl	8001184 <LCD_Write_Character_Shift>
		  DisplayState.PrintFlag = 0;
 8002416:	4b45      	ldr	r3, [pc, #276]	; (800252c <main+0x2e8>)
 8002418:	2200      	movs	r2, #0
 800241a:	715a      	strb	r2, [r3, #5]
	  }

	  // UART JOB
	  if(UartState.message_received)
 800241c:	4b44      	ldr	r3, [pc, #272]	; (8002530 <main+0x2ec>)
 800241e:	7b5b      	ldrb	r3, [r3, #13]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d004      	beq.n	800242e <main+0x1ea>
	  {
		  UART_Interpret_Rx_Message();
 8002424:	f000 ff2c 	bl	8003280 <UART_Interpret_Rx_Message>
		  UartState.message_received = 0;
 8002428:	4b41      	ldr	r3, [pc, #260]	; (8002530 <main+0x2ec>)
 800242a:	2200      	movs	r2, #0
 800242c:	735a      	strb	r2, [r3, #13]
	  }

	  // CURRENT JOB
	  if(CurrentState.Measure_Flag)
 800242e:	4b3e      	ldr	r3, [pc, #248]	; (8002528 <main+0x2e4>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d004      	beq.n	8002440 <main+0x1fc>
	  {
		  Read_Current();
 8002436:	f7fe fdd7 	bl	8000fe8 <Read_Current>
		  CurrentState.Measure_Flag = 0;
 800243a:	4b3b      	ldr	r3, [pc, #236]	; (8002528 <main+0x2e4>)
 800243c:	2200      	movs	r2, #0
 800243e:	701a      	strb	r2, [r3, #0]
	  }

	  // BUTTONS JOB
	  if(btn_up_flag)
 8002440:	4b43      	ldr	r3, [pc, #268]	; (8002550 <main+0x30c>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d016      	beq.n	8002476 <main+0x232>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 8002448:	f001 fa9e 	bl	8003988 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	4b41      	ldr	r3, [pc, #260]	; (8002554 <main+0x310>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b36      	cmp	r3, #54	; 0x36
 8002456:	f240 80b7 	bls.w	80025c8 <main+0x384>
		  {
			  if(HAL_GPIO_ReadPin(btn_up_GPIO_Port, btn_up_Pin))
 800245a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800245e:	483e      	ldr	r0, [pc, #248]	; (8002558 <main+0x314>)
 8002460:	f003 fb4e 	bl	8005b00 <HAL_GPIO_ReadPin>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <main+0x22a>
			  {
				  // HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//				  uint32_t code = HAL_UART_GetError(&huart2);
				  Read_Current();
 800246a:	f7fe fdbd 	bl	8000fe8 <Read_Current>
			  }
			  btn_up_flag = 0;
 800246e:	4b38      	ldr	r3, [pc, #224]	; (8002550 <main+0x30c>)
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]
 8002474:	e0a8      	b.n	80025c8 <main+0x384>
		  }
	  }
	  else if(btn_left_flag)
 8002476:	4b39      	ldr	r3, [pc, #228]	; (800255c <main+0x318>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d01a      	beq.n	80024b4 <main+0x270>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 800247e:	f001 fa83 	bl	8003988 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	4b33      	ldr	r3, [pc, #204]	; (8002554 <main+0x310>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b36      	cmp	r3, #54	; 0x36
 800248c:	f240 809c 	bls.w	80025c8 <main+0x384>
		  {
			  if(HAL_GPIO_ReadPin(btn_left_GPIO_Port, btn_left_Pin))
 8002490:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002494:	4830      	ldr	r0, [pc, #192]	; (8002558 <main+0x314>)
 8002496:	f003 fb33 	bl	8005b00 <HAL_GPIO_ReadPin>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d005      	beq.n	80024ac <main+0x268>
			  {
				  // HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
				  LCD_Write_Instruction(0b00011100);
 80024a0:	201c      	movs	r0, #28
 80024a2:	f7fe fed9 	bl	8001258 <LCD_Write_Instruction>
				  Delay_us_10(5);
 80024a6:	2005      	movs	r0, #5
 80024a8:	f000 fc52 	bl	8002d50 <Delay_us_10>
			  }
			  btn_left_flag = 0;
 80024ac:	4b2b      	ldr	r3, [pc, #172]	; (800255c <main+0x318>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	701a      	strb	r2, [r3, #0]
 80024b2:	e089      	b.n	80025c8 <main+0x384>
		  }
	  }
	  else if(btn_down_flag)
 80024b4:	4b2a      	ldr	r3, [pc, #168]	; (8002560 <main+0x31c>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d010      	beq.n	80024de <main+0x29a>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 80024bc:	f001 fa64 	bl	8003988 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	4b24      	ldr	r3, [pc, #144]	; (8002554 <main+0x310>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b36      	cmp	r3, #54	; 0x36
 80024ca:	d97d      	bls.n	80025c8 <main+0x384>
		  {
			  if(HAL_GPIO_ReadPin(btn_down_GPIO_Port, btn_down_Pin))
 80024cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024d0:	4821      	ldr	r0, [pc, #132]	; (8002558 <main+0x314>)
 80024d2:	f003 fb15 	bl	8005b00 <HAL_GPIO_ReadPin>
			  {
				  // HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
			  }
			  btn_down_flag = 0;
 80024d6:	4b22      	ldr	r3, [pc, #136]	; (8002560 <main+0x31c>)
 80024d8:	2200      	movs	r2, #0
 80024da:	701a      	strb	r2, [r3, #0]
 80024dc:	e074      	b.n	80025c8 <main+0x384>
		  }
	  }
	  else if(btn_right_flag)
 80024de:	4b21      	ldr	r3, [pc, #132]	; (8002564 <main+0x320>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d040      	beq.n	8002568 <main+0x324>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 80024e6:	f001 fa4f 	bl	8003988 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	4b19      	ldr	r3, [pc, #100]	; (8002554 <main+0x310>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b36      	cmp	r3, #54	; 0x36
 80024f4:	d968      	bls.n	80025c8 <main+0x384>
		  {
			  if(HAL_GPIO_ReadPin(btn_right_GPIO_Port, btn_right_Pin))
 80024f6:	2180      	movs	r1, #128	; 0x80
 80024f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024fc:	f003 fb00 	bl	8005b00 <HAL_GPIO_ReadPin>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d005      	beq.n	8002512 <main+0x2ce>
			  {
				  // HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
				  LCD_Write_Instruction(0b00011000);
 8002506:	2018      	movs	r0, #24
 8002508:	f7fe fea6 	bl	8001258 <LCD_Write_Instruction>
				  Delay_us_10(5);
 800250c:	2005      	movs	r0, #5
 800250e:	f000 fc1f 	bl	8002d50 <Delay_us_10>
			  }
			  btn_right_flag = 0;
 8002512:	4b14      	ldr	r3, [pc, #80]	; (8002564 <main+0x320>)
 8002514:	2200      	movs	r2, #0
 8002516:	701a      	strb	r2, [r3, #0]
 8002518:	e056      	b.n	80025c8 <main+0x384>
 800251a:	bf00      	nop
 800251c:	20000828 	.word	0x20000828
 8002520:	044aa200 	.word	0x044aa200
 8002524:	2000081c 	.word	0x2000081c
 8002528:	200009dc 	.word	0x200009dc
 800252c:	200009e8 	.word	0x200009e8
 8002530:	20000c9c 	.word	0x20000c9c
 8002534:	20000000 	.word	0x20000000
 8002538:	20000bcc 	.word	0x20000bcc
 800253c:	20000c50 	.word	0x20000c50
 8002540:	20000aa0 	.word	0x20000aa0
 8002544:	20000a54 	.word	0x20000a54
 8002548:	20000b80 	.word	0x20000b80
 800254c:	48000800 	.word	0x48000800
 8002550:	2000003c 	.word	0x2000003c
 8002554:	20000040 	.word	0x20000040
 8002558:	48000400 	.word	0x48000400
 800255c:	2000003d 	.word	0x2000003d
 8002560:	2000003e 	.word	0x2000003e
 8002564:	2000003b 	.word	0x2000003b
		  }
	  }
	  else if(btn_mid_flag)
 8002568:	4b1d      	ldr	r3, [pc, #116]	; (80025e0 <main+0x39c>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d02b      	beq.n	80025c8 <main+0x384>
	  {
		  if(HAL_GetTick() - last_ticks >= 20)
 8002570:	f001 fa0a 	bl	8003988 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <main+0x3a0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b13      	cmp	r3, #19
 800257e:	d923      	bls.n	80025c8 <main+0x384>
		  {
			  if(HAL_GPIO_ReadPin(btn_mid_GPIO_Port, btn_mid_Pin))
 8002580:	2140      	movs	r1, #64	; 0x40
 8002582:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002586:	f003 fabb 	bl	8005b00 <HAL_GPIO_ReadPin>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d018      	beq.n	80025c2 <main+0x37e>
			  {
				  // Toggle Menu Display state
				  if(DisplayState.Mode == Menu){
 8002590:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <main+0x3a4>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d103      	bne.n	80025a0 <main+0x35c>
					  LCD_changeDisplayMode(Measurement);
 8002598:	2001      	movs	r0, #1
 800259a:	f7ff f827 	bl	80015ec <LCD_changeDisplayMode>
 800259e:	e010      	b.n	80025c2 <main+0x37e>
				  } else if(DisplayState.Mode == Measurement){
 80025a0:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <main+0x3a4>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d103      	bne.n	80025b0 <main+0x36c>
					  LCD_changeDisplayMode(Menu);
 80025a8:	2000      	movs	r0, #0
 80025aa:	f7ff f81f 	bl	80015ec <LCD_changeDisplayMode>
 80025ae:	e008      	b.n	80025c2 <main+0x37e>
				  } else if(DisplayState.Mode == Output){
 80025b0:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <main+0x3a4>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d104      	bne.n	80025c2 <main+0x37e>
					  LCD_changeDisplayMode(DisplayState.LastMode);
 80025b8:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <main+0x3a4>)
 80025ba:	785b      	ldrb	r3, [r3, #1]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff f815 	bl	80015ec <LCD_changeDisplayMode>
				  }
			  }
			  btn_mid_flag = 0;
 80025c2:	4b07      	ldr	r3, [pc, #28]	; (80025e0 <main+0x39c>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  // ADC JOB
	  if(adc_timer_flag)
 80025c8:	4b08      	ldr	r3, [pc, #32]	; (80025ec <main+0x3a8>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f43f aee8 	beq.w	80023a2 <main+0x15e>
	  {
		  ADC_Main_Function();
 80025d2:	f7fe facf 	bl	8000b74 <ADC_Main_Function>
		  adc_timer_flag = 0;
 80025d6:	4b05      	ldr	r3, [pc, #20]	; (80025ec <main+0x3a8>)
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]
	  if(DisplayState.RefreshFlag == 1)
 80025dc:	e6e1      	b.n	80023a2 <main+0x15e>
 80025de:	bf00      	nop
 80025e0:	2000003a 	.word	0x2000003a
 80025e4:	20000040 	.word	0x20000040
 80025e8:	200009e8 	.word	0x200009e8
 80025ec:	2000003f 	.word	0x2000003f

080025f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b0a6      	sub	sp, #152	; 0x98
 80025f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80025fa:	2228      	movs	r2, #40	; 0x28
 80025fc:	2100      	movs	r1, #0
 80025fe:	4618      	mov	r0, r3
 8002600:	f007 fad8 	bl	8009bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002604:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	60da      	str	r2, [r3, #12]
 8002612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002614:	1d3b      	adds	r3, r7, #4
 8002616:	2258      	movs	r2, #88	; 0x58
 8002618:	2100      	movs	r1, #0
 800261a:	4618      	mov	r0, r3
 800261c:	f007 faca 	bl	8009bb4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002620:	2302      	movs	r3, #2
 8002622:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002624:	2301      	movs	r3, #1
 8002626:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002628:	2310      	movs	r3, #16
 800262a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800262e:	2302      	movs	r3, #2
 8002630:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002634:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002638:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800263c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002640:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002644:	2300      	movs	r3, #0
 8002646:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800264a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800264e:	4618      	mov	r0, r3
 8002650:	f003 ffa0 	bl	8006594 <HAL_RCC_OscConfig>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800265a:	f000 fb97 	bl	8002d8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800265e:	230f      	movs	r3, #15
 8002660:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002662:	2302      	movs	r3, #2
 8002664:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002666:	2300      	movs	r3, #0
 8002668:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800266a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800266e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002670:	2300      	movs	r3, #0
 8002672:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002674:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002678:	2102      	movs	r1, #2
 800267a:	4618      	mov	r0, r3
 800267c:	f004 fea0 	bl	80073c0 <HAL_RCC_ClockConfig>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002686:	f000 fb81 	bl	8002d8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 800268a:	4b0f      	ldr	r3, [pc, #60]	; (80026c8 <SystemClock_Config+0xd8>)
 800268c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM15|RCC_PERIPHCLK_TIM16
                              |RCC_PERIPHCLK_TIM17|RCC_PERIPHCLK_ADC12
                              |RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800268e:	2300      	movs	r3, #0
 8002690:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8002692:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002696:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002698:	2300      	movs	r3, #0
 800269a:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 800269c:	2300      	movs	r3, #0
 800269e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80026a0:	2300      	movs	r3, #0
 80026a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 80026a4:	2300      	movs	r3, #0
 80026a6:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026ac:	1d3b      	adds	r3, r7, #4
 80026ae:	4618      	mov	r0, r3
 80026b0:	f005 f8bc 	bl	800782c <HAL_RCCEx_PeriphCLKConfig>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <SystemClock_Config+0xce>
  {
    Error_Handler();
 80026ba:	f000 fb67 	bl	8002d8c <Error_Handler>
  }
}
 80026be:	bf00      	nop
 80026c0:	3798      	adds	r7, #152	; 0x98
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	01d000a2 	.word	0x01d000a2

080026cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08a      	sub	sp, #40	; 0x28
 80026d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80026d2:	f107 031c 	add.w	r3, r7, #28
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	605a      	str	r2, [r3, #4]
 80026dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80026de:	1d3b      	adds	r3, r7, #4
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]
 80026ea:	611a      	str	r2, [r3, #16]
 80026ec:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80026ee:	4b2e      	ldr	r3, [pc, #184]	; (80027a8 <MX_ADC1_Init+0xdc>)
 80026f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80026f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80026f6:	4b2c      	ldr	r3, [pc, #176]	; (80027a8 <MX_ADC1_Init+0xdc>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80026fc:	4b2a      	ldr	r3, [pc, #168]	; (80027a8 <MX_ADC1_Init+0xdc>)
 80026fe:	2200      	movs	r2, #0
 8002700:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002702:	4b29      	ldr	r3, [pc, #164]	; (80027a8 <MX_ADC1_Init+0xdc>)
 8002704:	2200      	movs	r2, #0
 8002706:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002708:	4b27      	ldr	r3, [pc, #156]	; (80027a8 <MX_ADC1_Init+0xdc>)
 800270a:	2200      	movs	r2, #0
 800270c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800270e:	4b26      	ldr	r3, [pc, #152]	; (80027a8 <MX_ADC1_Init+0xdc>)
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002716:	4b24      	ldr	r3, [pc, #144]	; (80027a8 <MX_ADC1_Init+0xdc>)
 8002718:	2200      	movs	r2, #0
 800271a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800271c:	4b22      	ldr	r3, [pc, #136]	; (80027a8 <MX_ADC1_Init+0xdc>)
 800271e:	2201      	movs	r2, #1
 8002720:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002722:	4b21      	ldr	r3, [pc, #132]	; (80027a8 <MX_ADC1_Init+0xdc>)
 8002724:	2200      	movs	r2, #0
 8002726:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002728:	4b1f      	ldr	r3, [pc, #124]	; (80027a8 <MX_ADC1_Init+0xdc>)
 800272a:	2201      	movs	r2, #1
 800272c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800272e:	4b1e      	ldr	r3, [pc, #120]	; (80027a8 <MX_ADC1_Init+0xdc>)
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002736:	4b1c      	ldr	r3, [pc, #112]	; (80027a8 <MX_ADC1_Init+0xdc>)
 8002738:	2204      	movs	r2, #4
 800273a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800273c:	4b1a      	ldr	r3, [pc, #104]	; (80027a8 <MX_ADC1_Init+0xdc>)
 800273e:	2200      	movs	r2, #0
 8002740:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002742:	4b19      	ldr	r3, [pc, #100]	; (80027a8 <MX_ADC1_Init+0xdc>)
 8002744:	2200      	movs	r2, #0
 8002746:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002748:	4817      	ldr	r0, [pc, #92]	; (80027a8 <MX_ADC1_Init+0xdc>)
 800274a:	f001 f94b 	bl	80039e4 <HAL_ADC_Init>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8002754:	f000 fb1a 	bl	8002d8c <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002758:	2300      	movs	r3, #0
 800275a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800275c:	f107 031c 	add.w	r3, r7, #28
 8002760:	4619      	mov	r1, r3
 8002762:	4811      	ldr	r0, [pc, #68]	; (80027a8 <MX_ADC1_Init+0xdc>)
 8002764:	f002 f880 	bl	8004868 <HAL_ADCEx_MultiModeConfigChannel>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800276e:	f000 fb0d 	bl	8002d8c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002772:	2301      	movs	r3, #1
 8002774:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002776:	2301      	movs	r3, #1
 8002778:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800277a:	2300      	movs	r3, #0
 800277c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002786:	2300      	movs	r3, #0
 8002788:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800278a:	1d3b      	adds	r3, r7, #4
 800278c:	4619      	mov	r1, r3
 800278e:	4806      	ldr	r0, [pc, #24]	; (80027a8 <MX_ADC1_Init+0xdc>)
 8002790:	f001 fd7e 	bl	8004290 <HAL_ADC_ConfigChannel>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800279a:	f000 faf7 	bl	8002d8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800279e:	bf00      	nop
 80027a0:	3728      	adds	r7, #40	; 0x28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	20000b30 	.word	0x20000b30

080027ac <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80027b2:	1d3b      	adds	r3, r7, #4
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 80027bc:	4b0e      	ldr	r3, [pc, #56]	; (80027f8 <MX_DAC1_Init+0x4c>)
 80027be:	4a0f      	ldr	r2, [pc, #60]	; (80027fc <MX_DAC1_Init+0x50>)
 80027c0:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80027c2:	480d      	ldr	r0, [pc, #52]	; (80027f8 <MX_DAC1_Init+0x4c>)
 80027c4:	f002 fbd1 	bl	8004f6a <HAL_DAC_Init>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 80027ce:	f000 fadd 	bl	8002d8c <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80027d2:	2324      	movs	r3, #36	; 0x24
 80027d4:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80027d6:	2300      	movs	r3, #0
 80027d8:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80027da:	1d3b      	adds	r3, r7, #4
 80027dc:	2200      	movs	r2, #0
 80027de:	4619      	mov	r1, r3
 80027e0:	4805      	ldr	r0, [pc, #20]	; (80027f8 <MX_DAC1_Init+0x4c>)
 80027e2:	f002 fd01 	bl	80051e8 <HAL_DAC_ConfigChannel>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 80027ec:	f000 face 	bl	8002d8c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80027f0:	bf00      	nop
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	200009f4 	.word	0x200009f4
 80027fc:	40007400 	.word	0x40007400

08002800 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002804:	4b1b      	ldr	r3, [pc, #108]	; (8002874 <MX_I2C1_Init+0x74>)
 8002806:	4a1c      	ldr	r2, [pc, #112]	; (8002878 <MX_I2C1_Init+0x78>)
 8002808:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800280a:	4b1a      	ldr	r3, [pc, #104]	; (8002874 <MX_I2C1_Init+0x74>)
 800280c:	4a1b      	ldr	r2, [pc, #108]	; (800287c <MX_I2C1_Init+0x7c>)
 800280e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002810:	4b18      	ldr	r3, [pc, #96]	; (8002874 <MX_I2C1_Init+0x74>)
 8002812:	2200      	movs	r2, #0
 8002814:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002816:	4b17      	ldr	r3, [pc, #92]	; (8002874 <MX_I2C1_Init+0x74>)
 8002818:	2201      	movs	r2, #1
 800281a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800281c:	4b15      	ldr	r3, [pc, #84]	; (8002874 <MX_I2C1_Init+0x74>)
 800281e:	2200      	movs	r2, #0
 8002820:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002822:	4b14      	ldr	r3, [pc, #80]	; (8002874 <MX_I2C1_Init+0x74>)
 8002824:	2200      	movs	r2, #0
 8002826:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002828:	4b12      	ldr	r3, [pc, #72]	; (8002874 <MX_I2C1_Init+0x74>)
 800282a:	2200      	movs	r2, #0
 800282c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800282e:	4b11      	ldr	r3, [pc, #68]	; (8002874 <MX_I2C1_Init+0x74>)
 8002830:	2200      	movs	r2, #0
 8002832:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002834:	4b0f      	ldr	r3, [pc, #60]	; (8002874 <MX_I2C1_Init+0x74>)
 8002836:	2200      	movs	r2, #0
 8002838:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800283a:	480e      	ldr	r0, [pc, #56]	; (8002874 <MX_I2C1_Init+0x74>)
 800283c:	f003 f9a8 	bl	8005b90 <HAL_I2C_Init>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002846:	f000 faa1 	bl	8002d8c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800284a:	2100      	movs	r1, #0
 800284c:	4809      	ldr	r0, [pc, #36]	; (8002874 <MX_I2C1_Init+0x74>)
 800284e:	f003 fe09 	bl	8006464 <HAL_I2CEx_ConfigAnalogFilter>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002858:	f000 fa98 	bl	8002d8c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800285c:	2100      	movs	r1, #0
 800285e:	4805      	ldr	r0, [pc, #20]	; (8002874 <MX_I2C1_Init+0x74>)
 8002860:	f003 fe4b 	bl	80064fa <HAL_I2CEx_ConfigDigitalFilter>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800286a:	f000 fa8f 	bl	8002d8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20000a08 	.word	0x20000a08
 8002878:	40005400 	.word	0x40005400
 800287c:	2000090e 	.word	0x2000090e

08002880 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002886:	f107 0310 	add.w	r3, r7, #16
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	605a      	str	r2, [r3, #4]
 8002890:	609a      	str	r2, [r3, #8]
 8002892:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002894:	1d3b      	adds	r3, r7, #4
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	605a      	str	r2, [r3, #4]
 800289c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800289e:	4b1e      	ldr	r3, [pc, #120]	; (8002918 <MX_TIM2_Init+0x98>)
 80028a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80028a6:	4b1c      	ldr	r3, [pc, #112]	; (8002918 <MX_TIM2_Init+0x98>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ac:	4b1a      	ldr	r3, [pc, #104]	; (8002918 <MX_TIM2_Init+0x98>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80028b2:	4b19      	ldr	r3, [pc, #100]	; (8002918 <MX_TIM2_Init+0x98>)
 80028b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ba:	4b17      	ldr	r3, [pc, #92]	; (8002918 <MX_TIM2_Init+0x98>)
 80028bc:	2200      	movs	r2, #0
 80028be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028c0:	4b15      	ldr	r3, [pc, #84]	; (8002918 <MX_TIM2_Init+0x98>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80028c6:	4814      	ldr	r0, [pc, #80]	; (8002918 <MX_TIM2_Init+0x98>)
 80028c8:	f005 f9ce 	bl	8007c68 <HAL_TIM_Base_Init>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80028d2:	f000 fa5b 	bl	8002d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028dc:	f107 0310 	add.w	r3, r7, #16
 80028e0:	4619      	mov	r1, r3
 80028e2:	480d      	ldr	r0, [pc, #52]	; (8002918 <MX_TIM2_Init+0x98>)
 80028e4:	f005 fc0f 	bl	8008106 <HAL_TIM_ConfigClockSource>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80028ee:	f000 fa4d 	bl	8002d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80028f2:	2320      	movs	r3, #32
 80028f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028fa:	1d3b      	adds	r3, r7, #4
 80028fc:	4619      	mov	r1, r3
 80028fe:	4806      	ldr	r0, [pc, #24]	; (8002918 <MX_TIM2_Init+0x98>)
 8002900:	f005 fe20 	bl	8008544 <HAL_TIMEx_MasterConfigSynchronization>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800290a:	f000 fa3f 	bl	8002d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800290e:	bf00      	nop
 8002910:	3720      	adds	r7, #32
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	20000b80 	.word	0x20000b80

0800291c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002922:	f107 0310 	add.w	r3, r7, #16
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	605a      	str	r2, [r3, #4]
 800292c:	609a      	str	r2, [r3, #8]
 800292e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002930:	1d3b      	adds	r3, r7, #4
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	605a      	str	r2, [r3, #4]
 8002938:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800293a:	4b1e      	ldr	r3, [pc, #120]	; (80029b4 <MX_TIM15_Init+0x98>)
 800293c:	4a1e      	ldr	r2, [pc, #120]	; (80029b8 <MX_TIM15_Init+0x9c>)
 800293e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 72-1;
 8002940:	4b1c      	ldr	r3, [pc, #112]	; (80029b4 <MX_TIM15_Init+0x98>)
 8002942:	2247      	movs	r2, #71	; 0x47
 8002944:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002946:	4b1b      	ldr	r3, [pc, #108]	; (80029b4 <MX_TIM15_Init+0x98>)
 8002948:	2200      	movs	r2, #0
 800294a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 10-1;
 800294c:	4b19      	ldr	r3, [pc, #100]	; (80029b4 <MX_TIM15_Init+0x98>)
 800294e:	2209      	movs	r2, #9
 8002950:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002952:	4b18      	ldr	r3, [pc, #96]	; (80029b4 <MX_TIM15_Init+0x98>)
 8002954:	2200      	movs	r2, #0
 8002956:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002958:	4b16      	ldr	r3, [pc, #88]	; (80029b4 <MX_TIM15_Init+0x98>)
 800295a:	2200      	movs	r2, #0
 800295c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800295e:	4b15      	ldr	r3, [pc, #84]	; (80029b4 <MX_TIM15_Init+0x98>)
 8002960:	2200      	movs	r2, #0
 8002962:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002964:	4813      	ldr	r0, [pc, #76]	; (80029b4 <MX_TIM15_Init+0x98>)
 8002966:	f005 f97f 	bl	8007c68 <HAL_TIM_Base_Init>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8002970:	f000 fa0c 	bl	8002d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002978:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800297a:	f107 0310 	add.w	r3, r7, #16
 800297e:	4619      	mov	r1, r3
 8002980:	480c      	ldr	r0, [pc, #48]	; (80029b4 <MX_TIM15_Init+0x98>)
 8002982:	f005 fbc0 	bl	8008106 <HAL_TIM_ConfigClockSource>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 800298c:	f000 f9fe 	bl	8002d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002990:	2300      	movs	r3, #0
 8002992:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002994:	2300      	movs	r3, #0
 8002996:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002998:	1d3b      	adds	r3, r7, #4
 800299a:	4619      	mov	r1, r3
 800299c:	4805      	ldr	r0, [pc, #20]	; (80029b4 <MX_TIM15_Init+0x98>)
 800299e:	f005 fdd1 	bl	8008544 <HAL_TIMEx_MasterConfigSynchronization>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 80029a8:	f000 f9f0 	bl	8002d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80029ac:	bf00      	nop
 80029ae:	3720      	adds	r7, #32
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	20000a54 	.word	0x20000a54
 80029b8:	40014000 	.word	0x40014000

080029bc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80029c0:	4b0f      	ldr	r3, [pc, #60]	; (8002a00 <MX_TIM16_Init+0x44>)
 80029c2:	4a10      	ldr	r2, [pc, #64]	; (8002a04 <MX_TIM16_Init+0x48>)
 80029c4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 72-1;
 80029c6:	4b0e      	ldr	r3, [pc, #56]	; (8002a00 <MX_TIM16_Init+0x44>)
 80029c8:	2247      	movs	r2, #71	; 0x47
 80029ca:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029cc:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <MX_TIM16_Init+0x44>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 50 - 1;
 80029d2:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <MX_TIM16_Init+0x44>)
 80029d4:	2231      	movs	r2, #49	; 0x31
 80029d6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029d8:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <MX_TIM16_Init+0x44>)
 80029da:	2200      	movs	r2, #0
 80029dc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80029de:	4b08      	ldr	r3, [pc, #32]	; (8002a00 <MX_TIM16_Init+0x44>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029e4:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <MX_TIM16_Init+0x44>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80029ea:	4805      	ldr	r0, [pc, #20]	; (8002a00 <MX_TIM16_Init+0x44>)
 80029ec:	f005 f93c 	bl	8007c68 <HAL_TIM_Base_Init>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80029f6:	f000 f9c9 	bl	8002d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	20000c50 	.word	0x20000c50
 8002a04:	40014400 	.word	0x40014400

08002a08 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002a0c:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <MX_TIM17_Init+0x48>)
 8002a0e:	4a11      	ldr	r2, [pc, #68]	; (8002a54 <MX_TIM17_Init+0x4c>)
 8002a10:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 7200-1;
 8002a12:	4b0f      	ldr	r3, [pc, #60]	; (8002a50 <MX_TIM17_Init+0x48>)
 8002a14:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002a18:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a1a:	4b0d      	ldr	r3, [pc, #52]	; (8002a50 <MX_TIM17_Init+0x48>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 5000-1;
 8002a20:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <MX_TIM17_Init+0x48>)
 8002a22:	f241 3287 	movw	r2, #4999	; 0x1387
 8002a26:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a28:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <MX_TIM17_Init+0x48>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002a2e:	4b08      	ldr	r3, [pc, #32]	; (8002a50 <MX_TIM17_Init+0x48>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a34:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <MX_TIM17_Init+0x48>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002a3a:	4805      	ldr	r0, [pc, #20]	; (8002a50 <MX_TIM17_Init+0x48>)
 8002a3c:	f005 f914 	bl	8007c68 <HAL_TIM_Base_Init>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8002a46:	f000 f9a1 	bl	8002d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	20000aa0 	.word	0x20000aa0
 8002a54:	40014800 	.word	0x40014800

08002a58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a5c:	4b14      	ldr	r3, [pc, #80]	; (8002ab0 <MX_USART2_UART_Init+0x58>)
 8002a5e:	4a15      	ldr	r2, [pc, #84]	; (8002ab4 <MX_USART2_UART_Init+0x5c>)
 8002a60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a62:	4b13      	ldr	r3, [pc, #76]	; (8002ab0 <MX_USART2_UART_Init+0x58>)
 8002a64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a6a:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <MX_USART2_UART_Init+0x58>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a70:	4b0f      	ldr	r3, [pc, #60]	; (8002ab0 <MX_USART2_UART_Init+0x58>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a76:	4b0e      	ldr	r3, [pc, #56]	; (8002ab0 <MX_USART2_UART_Init+0x58>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a7c:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <MX_USART2_UART_Init+0x58>)
 8002a7e:	220c      	movs	r2, #12
 8002a80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a82:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <MX_USART2_UART_Init+0x58>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a88:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <MX_USART2_UART_Init+0x58>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a8e:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <MX_USART2_UART_Init+0x58>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a94:	4b06      	ldr	r3, [pc, #24]	; (8002ab0 <MX_USART2_UART_Init+0x58>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a9a:	4805      	ldr	r0, [pc, #20]	; (8002ab0 <MX_USART2_UART_Init+0x58>)
 8002a9c:	f005 fdfc 	bl	8008698 <HAL_UART_Init>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002aa6:	f000 f971 	bl	8002d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002aaa:	bf00      	nop
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	20000bcc 	.word	0x20000bcc
 8002ab4:	40004400 	.word	0x40004400

08002ab8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002abe:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <MX_DMA_Init+0x38>)
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	4a0b      	ldr	r2, [pc, #44]	; (8002af0 <MX_DMA_Init+0x38>)
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	6153      	str	r3, [r2, #20]
 8002aca:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <MX_DMA_Init+0x38>)
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	607b      	str	r3, [r7, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2100      	movs	r1, #0
 8002ada:	200d      	movs	r0, #13
 8002adc:	f002 fa0f 	bl	8004efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002ae0:	200d      	movs	r0, #13
 8002ae2:	f002 fa28 	bl	8004f36 <HAL_NVIC_EnableIRQ>

}
 8002ae6:	bf00      	nop
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40021000 	.word	0x40021000

08002af4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08a      	sub	sp, #40	; 0x28
 8002af8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afa:	f107 0314 	add.w	r3, r7, #20
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	605a      	str	r2, [r3, #4]
 8002b04:	609a      	str	r2, [r3, #8]
 8002b06:	60da      	str	r2, [r3, #12]
 8002b08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b0a:	4b75      	ldr	r3, [pc, #468]	; (8002ce0 <MX_GPIO_Init+0x1ec>)
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	4a74      	ldr	r2, [pc, #464]	; (8002ce0 <MX_GPIO_Init+0x1ec>)
 8002b10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002b14:	6153      	str	r3, [r2, #20]
 8002b16:	4b72      	ldr	r3, [pc, #456]	; (8002ce0 <MX_GPIO_Init+0x1ec>)
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b1e:	613b      	str	r3, [r7, #16]
 8002b20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b22:	4b6f      	ldr	r3, [pc, #444]	; (8002ce0 <MX_GPIO_Init+0x1ec>)
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	4a6e      	ldr	r2, [pc, #440]	; (8002ce0 <MX_GPIO_Init+0x1ec>)
 8002b28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b2c:	6153      	str	r3, [r2, #20]
 8002b2e:	4b6c      	ldr	r3, [pc, #432]	; (8002ce0 <MX_GPIO_Init+0x1ec>)
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b3a:	4b69      	ldr	r3, [pc, #420]	; (8002ce0 <MX_GPIO_Init+0x1ec>)
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	4a68      	ldr	r2, [pc, #416]	; (8002ce0 <MX_GPIO_Init+0x1ec>)
 8002b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b44:	6153      	str	r3, [r2, #20]
 8002b46:	4b66      	ldr	r3, [pc, #408]	; (8002ce0 <MX_GPIO_Init+0x1ec>)
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4e:	60bb      	str	r3, [r7, #8]
 8002b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b52:	4b63      	ldr	r3, [pc, #396]	; (8002ce0 <MX_GPIO_Init+0x1ec>)
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	4a62      	ldr	r2, [pc, #392]	; (8002ce0 <MX_GPIO_Init+0x1ec>)
 8002b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b5c:	6153      	str	r3, [r2, #20]
 8002b5e:	4b60      	ldr	r3, [pc, #384]	; (8002ce0 <MX_GPIO_Init+0x1ec>)
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b66:	607b      	str	r3, [r7, #4]
 8002b68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD5_Pin|LD4_Pin|lcd_D6_Pin 
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f44f 51f1 	mov.w	r1, #7712	; 0x1e20
 8002b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b74:	f002 ffdc 	bl	8005b30 <HAL_GPIO_WritePin>
                          |lcd_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|lcd_D4_Pin|LD3_Pin|lcd_D5_Pin, GPIO_PIN_RESET);
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8002b7e:	4859      	ldr	r0, [pc, #356]	; (8002ce4 <MX_GPIO_Init+0x1f0>)
 8002b80:	f002 ffd6 	bl	8005b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, lcd_blown_Pin|lcd_RS_Pin|lcd_E_Pin, GPIO_PIN_RESET);
 8002b84:	2200      	movs	r2, #0
 8002b86:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8002b8a:	4857      	ldr	r0, [pc, #348]	; (8002ce8 <MX_GPIO_Init+0x1f4>)
 8002b8c:	f002 ffd0 	bl	8005b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b96:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002ba0:	f107 0314 	add.w	r3, r7, #20
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	484f      	ldr	r0, [pc, #316]	; (8002ce4 <MX_GPIO_Init+0x1f0>)
 8002ba8:	f002 fe20 	bl	80057ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD5_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD5_Pin|LD4_Pin;
 8002bac:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 8002bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bbe:	f107 0314 	add.w	r3, r7, #20
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bc8:	f002 fe10 	bl	80057ec <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_mid_Pin */
  GPIO_InitStruct.Pin = btn_mid_Pin;
 8002bcc:	2340      	movs	r3, #64	; 0x40
 8002bce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002bd0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn_mid_GPIO_Port, &GPIO_InitStruct);
 8002bda:	f107 0314 	add.w	r3, r7, #20
 8002bde:	4619      	mov	r1, r3
 8002be0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002be4:	f002 fe02 	bl	80057ec <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_right_Pin */
  GPIO_InitStruct.Pin = btn_right_Pin;
 8002be8:	2380      	movs	r3, #128	; 0x80
 8002bea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002bec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn_right_GPIO_Port, &GPIO_InitStruct);
 8002bf6:	f107 0314 	add.w	r3, r7, #20
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c00:	f002 fdf4 	bl	80057ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD3_Pin;
 8002c04:	2390      	movs	r3, #144	; 0x90
 8002c06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c10:	2300      	movs	r3, #0
 8002c12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c14:	f107 0314 	add.w	r3, r7, #20
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4832      	ldr	r0, [pc, #200]	; (8002ce4 <MX_GPIO_Init+0x1f0>)
 8002c1c:	f002 fde6 	bl	80057ec <HAL_GPIO_Init>

  /*Configure GPIO pins : btn_down_Pin btn_left_Pin btn_up_Pin */
  GPIO_InitStruct.Pin = btn_down_Pin|btn_left_Pin|btn_up_Pin;
 8002c20:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002c24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c26:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c30:	f107 0314 	add.w	r3, r7, #20
 8002c34:	4619      	mov	r1, r3
 8002c36:	482c      	ldr	r0, [pc, #176]	; (8002ce8 <MX_GPIO_Init+0x1f4>)
 8002c38:	f002 fdd8 	bl	80057ec <HAL_GPIO_Init>

  /*Configure GPIO pin : lcd_blown_Pin */
  GPIO_InitStruct.Pin = lcd_blown_Pin;
 8002c3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002c42:	2311      	movs	r3, #17
 8002c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(lcd_blown_GPIO_Port, &GPIO_InitStruct);
 8002c4e:	f107 0314 	add.w	r3, r7, #20
 8002c52:	4619      	mov	r1, r3
 8002c54:	4824      	ldr	r0, [pc, #144]	; (8002ce8 <MX_GPIO_Init+0x1f4>)
 8002c56:	f002 fdc9 	bl	80057ec <HAL_GPIO_Init>

  /*Configure GPIO pins : lcd_RS_Pin lcd_E_Pin */
  GPIO_InitStruct.Pin = lcd_RS_Pin|lcd_E_Pin;
 8002c5a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002c5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c60:	2301      	movs	r3, #1
 8002c62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c6c:	f107 0314 	add.w	r3, r7, #20
 8002c70:	4619      	mov	r1, r3
 8002c72:	481d      	ldr	r0, [pc, #116]	; (8002ce8 <MX_GPIO_Init+0x1f4>)
 8002c74:	f002 fdba 	bl	80057ec <HAL_GPIO_Init>

  /*Configure GPIO pins : lcd_D4_Pin lcd_D5_Pin */
  GPIO_InitStruct.Pin = lcd_D4_Pin|lcd_D5_Pin;
 8002c78:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002c7e:	2311      	movs	r3, #17
 8002c80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c86:	2300      	movs	r3, #0
 8002c88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c8a:	f107 0314 	add.w	r3, r7, #20
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4814      	ldr	r0, [pc, #80]	; (8002ce4 <MX_GPIO_Init+0x1f0>)
 8002c92:	f002 fdab 	bl	80057ec <HAL_GPIO_Init>

  /*Configure GPIO pins : lcd_D6_Pin lcd_D7_Pin */
  GPIO_InitStruct.Pin = lcd_D6_Pin|lcd_D7_Pin;
 8002c96:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002c9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002c9c:	2311      	movs	r3, #17
 8002c9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca8:	f107 0314 	add.w	r3, r7, #20
 8002cac:	4619      	mov	r1, r3
 8002cae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cb2:	f002 fd9b 	bl	80057ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	2100      	movs	r1, #0
 8002cba:	2017      	movs	r0, #23
 8002cbc:	f002 f91f 	bl	8004efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002cc0:	2017      	movs	r0, #23
 8002cc2:	f002 f938 	bl	8004f36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	2100      	movs	r1, #0
 8002cca:	2028      	movs	r0, #40	; 0x28
 8002ccc:	f002 f917 	bl	8004efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002cd0:	2028      	movs	r0, #40	; 0x28
 8002cd2:	f002 f930 	bl	8004f36 <HAL_NVIC_EnableIRQ>

}
 8002cd6:	bf00      	nop
 8002cd8:	3728      	adds	r7, #40	; 0x28
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	48000800 	.word	0x48000800
 8002ce8:	48000400 	.word	0x48000400

08002cec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this interrupt
	if(htim == &htim16){
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a0f      	ldr	r2, [pc, #60]	; (8002d34 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d103      	bne.n	8002d04 <HAL_TIM_PeriodElapsedCallback+0x18>
		adc_timer_flag = 1;
 8002cfc:	4b0e      	ldr	r3, [pc, #56]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002cfe:	2201      	movs	r2, #1
 8002d00:	701a      	strb	r2, [r3, #0]
		DisplayState.RefreshFlag = 1;
		CurrentState.Measure_Flag = 1;
	} else if (htim == &htim15){
		us_10 = 1;
	}
}
 8002d02:	e011      	b.n	8002d28 <HAL_TIM_PeriodElapsedCallback+0x3c>
	} else if (htim == &htim17){
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a0d      	ldr	r2, [pc, #52]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d106      	bne.n	8002d1a <HAL_TIM_PeriodElapsedCallback+0x2e>
		DisplayState.RefreshFlag = 1;
 8002d0c:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002d0e:	2201      	movs	r2, #1
 8002d10:	71da      	strb	r2, [r3, #7]
		CurrentState.Measure_Flag = 1;
 8002d12:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002d14:	2201      	movs	r2, #1
 8002d16:	701a      	strb	r2, [r3, #0]
}
 8002d18:	e006      	b.n	8002d28 <HAL_TIM_PeriodElapsedCallback+0x3c>
	} else if (htim == &htim15){
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a0a      	ldr	r2, [pc, #40]	; (8002d48 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d102      	bne.n	8002d28 <HAL_TIM_PeriodElapsedCallback+0x3c>
		us_10 = 1;
 8002d22:	4b0a      	ldr	r3, [pc, #40]	; (8002d4c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	701a      	strb	r2, [r3, #0]
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	20000c50 	.word	0x20000c50
 8002d38:	2000003f 	.word	0x2000003f
 8002d3c:	20000aa0 	.word	0x20000aa0
 8002d40:	200009e8 	.word	0x200009e8
 8002d44:	200009dc 	.word	0x200009dc
 8002d48:	20000a54 	.word	0x20000a54
 8002d4c:	20000044 	.word	0x20000044

08002d50 <Delay_us_10>:

void Delay_us_10(uint8_t tens)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4603      	mov	r3, r0
 8002d58:	71fb      	strb	r3, [r7, #7]
	uint8_t us_10_counter = 0;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	73fb      	strb	r3, [r7, #15]
	while(us_10_counter < tens)
 8002d5e:	e009      	b.n	8002d74 <Delay_us_10+0x24>
	{
		if(us_10){
 8002d60:	4b09      	ldr	r3, [pc, #36]	; (8002d88 <Delay_us_10+0x38>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <Delay_us_10+0x24>
			us_10_counter ++;
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	73fb      	strb	r3, [r7, #15]
			us_10 = 0;
 8002d6e:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <Delay_us_10+0x38>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	701a      	strb	r2, [r3, #0]
	while(us_10_counter < tens)
 8002d74:	7bfa      	ldrb	r2, [r7, #15]
 8002d76:	79fb      	ldrb	r3, [r7, #7]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d3f1      	bcc.n	8002d60 <Delay_us_10+0x10>
		}
	}
}
 8002d7c:	bf00      	nop
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	20000044 	.word	0x20000044

08002d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002d90:	bf00      	nop
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
	...

08002d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da2:	4b0f      	ldr	r3, [pc, #60]	; (8002de0 <HAL_MspInit+0x44>)
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	4a0e      	ldr	r2, [pc, #56]	; (8002de0 <HAL_MspInit+0x44>)
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	6193      	str	r3, [r2, #24]
 8002dae:	4b0c      	ldr	r3, [pc, #48]	; (8002de0 <HAL_MspInit+0x44>)
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	607b      	str	r3, [r7, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dba:	4b09      	ldr	r3, [pc, #36]	; (8002de0 <HAL_MspInit+0x44>)
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	4a08      	ldr	r2, [pc, #32]	; (8002de0 <HAL_MspInit+0x44>)
 8002dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	61d3      	str	r3, [r2, #28]
 8002dc6:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <HAL_MspInit+0x44>)
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dce:	603b      	str	r3, [r7, #0]
 8002dd0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002dd2:	2007      	movs	r0, #7
 8002dd4:	f002 f888 	bl	8004ee8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dd8:	bf00      	nop
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40021000 	.word	0x40021000

08002de4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08a      	sub	sp, #40	; 0x28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dec:	f107 0314 	add.w	r3, r7, #20
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	609a      	str	r2, [r3, #8]
 8002df8:	60da      	str	r2, [r3, #12]
 8002dfa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e04:	d124      	bne.n	8002e50 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002e06:	4b14      	ldr	r3, [pc, #80]	; (8002e58 <HAL_ADC_MspInit+0x74>)
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	4a13      	ldr	r2, [pc, #76]	; (8002e58 <HAL_ADC_MspInit+0x74>)
 8002e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e10:	6153      	str	r3, [r2, #20]
 8002e12:	4b11      	ldr	r3, [pc, #68]	; (8002e58 <HAL_ADC_MspInit+0x74>)
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1e:	4b0e      	ldr	r3, [pc, #56]	; (8002e58 <HAL_ADC_MspInit+0x74>)
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	4a0d      	ldr	r2, [pc, #52]	; (8002e58 <HAL_ADC_MspInit+0x74>)
 8002e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e28:	6153      	str	r3, [r2, #20]
 8002e2a:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <HAL_ADC_MspInit+0x74>)
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e36:	2301      	movs	r3, #1
 8002e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e42:	f107 0314 	add.w	r3, r7, #20
 8002e46:	4619      	mov	r1, r3
 8002e48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e4c:	f002 fcce 	bl	80057ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002e50:	bf00      	nop
 8002e52:	3728      	adds	r7, #40	; 0x28
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40021000 	.word	0x40021000

08002e5c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b08a      	sub	sp, #40	; 0x28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e64:	f107 0314 	add.w	r3, r7, #20
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	605a      	str	r2, [r3, #4]
 8002e6e:	609a      	str	r2, [r3, #8]
 8002e70:	60da      	str	r2, [r3, #12]
 8002e72:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a2c      	ldr	r2, [pc, #176]	; (8002f2c <HAL_DAC_MspInit+0xd0>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d152      	bne.n	8002f24 <HAL_DAC_MspInit+0xc8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002e7e:	4b2c      	ldr	r3, [pc, #176]	; (8002f30 <HAL_DAC_MspInit+0xd4>)
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	4a2b      	ldr	r2, [pc, #172]	; (8002f30 <HAL_DAC_MspInit+0xd4>)
 8002e84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e88:	61d3      	str	r3, [r2, #28]
 8002e8a:	4b29      	ldr	r3, [pc, #164]	; (8002f30 <HAL_DAC_MspInit+0xd4>)
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e92:	613b      	str	r3, [r7, #16]
 8002e94:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e96:	4b26      	ldr	r3, [pc, #152]	; (8002f30 <HAL_DAC_MspInit+0xd4>)
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	4a25      	ldr	r2, [pc, #148]	; (8002f30 <HAL_DAC_MspInit+0xd4>)
 8002e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ea0:	6153      	str	r3, [r2, #20]
 8002ea2:	4b23      	ldr	r3, [pc, #140]	; (8002f30 <HAL_DAC_MspInit+0xd4>)
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002eae:	2310      	movs	r3, #16
 8002eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eba:	f107 0314 	add.w	r3, r7, #20
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ec4:	f002 fc92 	bl	80057ec <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8002ec8:	4b1a      	ldr	r3, [pc, #104]	; (8002f34 <HAL_DAC_MspInit+0xd8>)
 8002eca:	4a1b      	ldr	r2, [pc, #108]	; (8002f38 <HAL_DAC_MspInit+0xdc>)
 8002ecc:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ece:	4b19      	ldr	r3, [pc, #100]	; (8002f34 <HAL_DAC_MspInit+0xd8>)
 8002ed0:	2210      	movs	r2, #16
 8002ed2:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ed4:	4b17      	ldr	r3, [pc, #92]	; (8002f34 <HAL_DAC_MspInit+0xd8>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002eda:	4b16      	ldr	r3, [pc, #88]	; (8002f34 <HAL_DAC_MspInit+0xd8>)
 8002edc:	2280      	movs	r2, #128	; 0x80
 8002ede:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ee0:	4b14      	ldr	r3, [pc, #80]	; (8002f34 <HAL_DAC_MspInit+0xd8>)
 8002ee2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ee6:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ee8:	4b12      	ldr	r3, [pc, #72]	; (8002f34 <HAL_DAC_MspInit+0xd8>)
 8002eea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002eee:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002ef0:	4b10      	ldr	r3, [pc, #64]	; (8002f34 <HAL_DAC_MspInit+0xd8>)
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002ef6:	4b0f      	ldr	r3, [pc, #60]	; (8002f34 <HAL_DAC_MspInit+0xd8>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002efc:	480d      	ldr	r0, [pc, #52]	; (8002f34 <HAL_DAC_MspInit+0xd8>)
 8002efe:	f002 fa4a 	bl	8005396 <HAL_DMA_Init>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 8002f08:	f7ff ff40 	bl	8002d8c <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8002f0c:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <HAL_DAC_MspInit+0xe0>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a0a      	ldr	r2, [pc, #40]	; (8002f3c <HAL_DAC_MspInit+0xe0>)
 8002f12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f16:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a06      	ldr	r2, [pc, #24]	; (8002f34 <HAL_DAC_MspInit+0xd8>)
 8002f1c:	609a      	str	r2, [r3, #8]
 8002f1e:	4a05      	ldr	r2, [pc, #20]	; (8002f34 <HAL_DAC_MspInit+0xd8>)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002f24:	bf00      	nop
 8002f26:	3728      	adds	r7, #40	; 0x28
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40007400 	.word	0x40007400
 8002f30:	40021000 	.word	0x40021000
 8002f34:	20000aec 	.word	0x20000aec
 8002f38:	40020030 	.word	0x40020030
 8002f3c:	40010000 	.word	0x40010000

08002f40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08a      	sub	sp, #40	; 0x28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f48:	f107 0314 	add.w	r3, r7, #20
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	605a      	str	r2, [r3, #4]
 8002f52:	609a      	str	r2, [r3, #8]
 8002f54:	60da      	str	r2, [r3, #12]
 8002f56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a17      	ldr	r2, [pc, #92]	; (8002fbc <HAL_I2C_MspInit+0x7c>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d127      	bne.n	8002fb2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f62:	4b17      	ldr	r3, [pc, #92]	; (8002fc0 <HAL_I2C_MspInit+0x80>)
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	4a16      	ldr	r2, [pc, #88]	; (8002fc0 <HAL_I2C_MspInit+0x80>)
 8002f68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f6c:	6153      	str	r3, [r2, #20]
 8002f6e:	4b14      	ldr	r3, [pc, #80]	; (8002fc0 <HAL_I2C_MspInit+0x80>)
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f76:	613b      	str	r3, [r7, #16]
 8002f78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f7a:	23c0      	movs	r3, #192	; 0xc0
 8002f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f7e:	2312      	movs	r3, #18
 8002f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f82:	2301      	movs	r3, #1
 8002f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f86:	2303      	movs	r3, #3
 8002f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f8a:	2304      	movs	r3, #4
 8002f8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f8e:	f107 0314 	add.w	r3, r7, #20
 8002f92:	4619      	mov	r1, r3
 8002f94:	480b      	ldr	r0, [pc, #44]	; (8002fc4 <HAL_I2C_MspInit+0x84>)
 8002f96:	f002 fc29 	bl	80057ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f9a:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <HAL_I2C_MspInit+0x80>)
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	4a08      	ldr	r2, [pc, #32]	; (8002fc0 <HAL_I2C_MspInit+0x80>)
 8002fa0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002fa4:	61d3      	str	r3, [r2, #28]
 8002fa6:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <HAL_I2C_MspInit+0x80>)
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002fb2:	bf00      	nop
 8002fb4:	3728      	adds	r7, #40	; 0x28
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40005400 	.word	0x40005400
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	48000400 	.word	0x48000400

08002fc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd8:	d114      	bne.n	8003004 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fda:	4b33      	ldr	r3, [pc, #204]	; (80030a8 <HAL_TIM_Base_MspInit+0xe0>)
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	4a32      	ldr	r2, [pc, #200]	; (80030a8 <HAL_TIM_Base_MspInit+0xe0>)
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	61d3      	str	r3, [r2, #28]
 8002fe6:	4b30      	ldr	r3, [pc, #192]	; (80030a8 <HAL_TIM_Base_MspInit+0xe0>)
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	617b      	str	r3, [r7, #20]
 8002ff0:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	201c      	movs	r0, #28
 8002ff8:	f001 ff81 	bl	8004efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ffc:	201c      	movs	r0, #28
 8002ffe:	f001 ff9a 	bl	8004f36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8003002:	e04c      	b.n	800309e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM15)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a28      	ldr	r2, [pc, #160]	; (80030ac <HAL_TIM_Base_MspInit+0xe4>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d114      	bne.n	8003038 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800300e:	4b26      	ldr	r3, [pc, #152]	; (80030a8 <HAL_TIM_Base_MspInit+0xe0>)
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	4a25      	ldr	r2, [pc, #148]	; (80030a8 <HAL_TIM_Base_MspInit+0xe0>)
 8003014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003018:	6193      	str	r3, [r2, #24]
 800301a:	4b23      	ldr	r3, [pc, #140]	; (80030a8 <HAL_TIM_Base_MspInit+0xe0>)
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003022:	613b      	str	r3, [r7, #16]
 8003024:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003026:	2200      	movs	r2, #0
 8003028:	2100      	movs	r1, #0
 800302a:	2018      	movs	r0, #24
 800302c:	f001 ff67 	bl	8004efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8003030:	2018      	movs	r0, #24
 8003032:	f001 ff80 	bl	8004f36 <HAL_NVIC_EnableIRQ>
}
 8003036:	e032      	b.n	800309e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM16)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a1c      	ldr	r2, [pc, #112]	; (80030b0 <HAL_TIM_Base_MspInit+0xe8>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d114      	bne.n	800306c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003042:	4b19      	ldr	r3, [pc, #100]	; (80030a8 <HAL_TIM_Base_MspInit+0xe0>)
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	4a18      	ldr	r2, [pc, #96]	; (80030a8 <HAL_TIM_Base_MspInit+0xe0>)
 8003048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800304c:	6193      	str	r3, [r2, #24]
 800304e:	4b16      	ldr	r3, [pc, #88]	; (80030a8 <HAL_TIM_Base_MspInit+0xe0>)
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800305a:	2200      	movs	r2, #0
 800305c:	2100      	movs	r1, #0
 800305e:	2019      	movs	r0, #25
 8003060:	f001 ff4d 	bl	8004efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003064:	2019      	movs	r0, #25
 8003066:	f001 ff66 	bl	8004f36 <HAL_NVIC_EnableIRQ>
}
 800306a:	e018      	b.n	800309e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM17)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a10      	ldr	r2, [pc, #64]	; (80030b4 <HAL_TIM_Base_MspInit+0xec>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d113      	bne.n	800309e <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003076:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <HAL_TIM_Base_MspInit+0xe0>)
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	4a0b      	ldr	r2, [pc, #44]	; (80030a8 <HAL_TIM_Base_MspInit+0xe0>)
 800307c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003080:	6193      	str	r3, [r2, #24]
 8003082:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <HAL_TIM_Base_MspInit+0xe0>)
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800308a:	60bb      	str	r3, [r7, #8]
 800308c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800308e:	2200      	movs	r2, #0
 8003090:	2100      	movs	r1, #0
 8003092:	201a      	movs	r0, #26
 8003094:	f001 ff33 	bl	8004efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003098:	201a      	movs	r0, #26
 800309a:	f001 ff4c 	bl	8004f36 <HAL_NVIC_EnableIRQ>
}
 800309e:	bf00      	nop
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40021000 	.word	0x40021000
 80030ac:	40014000 	.word	0x40014000
 80030b0:	40014400 	.word	0x40014400
 80030b4:	40014800 	.word	0x40014800

080030b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b08a      	sub	sp, #40	; 0x28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c0:	f107 0314 	add.w	r3, r7, #20
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	605a      	str	r2, [r3, #4]
 80030ca:	609a      	str	r2, [r3, #8]
 80030cc:	60da      	str	r2, [r3, #12]
 80030ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a1b      	ldr	r2, [pc, #108]	; (8003144 <HAL_UART_MspInit+0x8c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d130      	bne.n	800313c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80030da:	4b1b      	ldr	r3, [pc, #108]	; (8003148 <HAL_UART_MspInit+0x90>)
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	4a1a      	ldr	r2, [pc, #104]	; (8003148 <HAL_UART_MspInit+0x90>)
 80030e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030e4:	61d3      	str	r3, [r2, #28]
 80030e6:	4b18      	ldr	r3, [pc, #96]	; (8003148 <HAL_UART_MspInit+0x90>)
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ee:	613b      	str	r3, [r7, #16]
 80030f0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f2:	4b15      	ldr	r3, [pc, #84]	; (8003148 <HAL_UART_MspInit+0x90>)
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	4a14      	ldr	r2, [pc, #80]	; (8003148 <HAL_UART_MspInit+0x90>)
 80030f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030fc:	6153      	str	r3, [r2, #20]
 80030fe:	4b12      	ldr	r3, [pc, #72]	; (8003148 <HAL_UART_MspInit+0x90>)
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800310a:	230c      	movs	r3, #12
 800310c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310e:	2302      	movs	r3, #2
 8003110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003112:	2300      	movs	r3, #0
 8003114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003116:	2300      	movs	r3, #0
 8003118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800311a:	2307      	movs	r3, #7
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800311e:	f107 0314 	add.w	r3, r7, #20
 8003122:	4619      	mov	r1, r3
 8003124:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003128:	f002 fb60 	bl	80057ec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800312c:	2200      	movs	r2, #0
 800312e:	2100      	movs	r1, #0
 8003130:	2026      	movs	r0, #38	; 0x26
 8003132:	f001 fee4 	bl	8004efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003136:	2026      	movs	r0, #38	; 0x26
 8003138:	f001 fefd 	bl	8004f36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800313c:	bf00      	nop
 800313e:	3728      	adds	r7, #40	; 0x28
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40004400 	.word	0x40004400
 8003148:	40021000 	.word	0x40021000

0800314c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003150:	bf00      	nop
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800315a:	b480      	push	{r7}
 800315c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800315e:	e7fe      	b.n	800315e <HardFault_Handler+0x4>

08003160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003164:	e7fe      	b.n	8003164 <MemManage_Handler+0x4>

08003166 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003166:	b480      	push	{r7}
 8003168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800316a:	e7fe      	b.n	800316a <BusFault_Handler+0x4>

0800316c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003170:	e7fe      	b.n	8003170 <UsageFault_Handler+0x4>

08003172 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003172:	b480      	push	{r7}
 8003174:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003176:	bf00      	nop
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003184:	bf00      	nop
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800318e:	b480      	push	{r7}
 8003190:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003192:	bf00      	nop
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031a0:	f000 fbde 	bl	8003960 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031a4:	bf00      	nop
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80031ac:	4802      	ldr	r0, [pc, #8]	; (80031b8 <DMA1_Channel3_IRQHandler+0x10>)
 80031ae:	f002 fa0f 	bl	80055d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20000aec 	.word	0x20000aec

080031bc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80031c0:	2040      	movs	r0, #64	; 0x40
 80031c2:	f002 fccd 	bl	8005b60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80031c6:	2080      	movs	r0, #128	; 0x80
 80031c8:	f002 fcca 	bl	8005b60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80031cc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80031d0:	f002 fcc6 	bl	8005b60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80031d4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80031d8:	f002 fcc2 	bl	8005b60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80031dc:	bf00      	nop
 80031de:	bd80      	pop	{r7, pc}

080031e0 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80031e4:	4802      	ldr	r0, [pc, #8]	; (80031f0 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80031e6:	f004 fe6f 	bl	8007ec8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80031ea:	bf00      	nop
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	20000a54 	.word	0x20000a54

080031f4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80031f8:	4802      	ldr	r0, [pc, #8]	; (8003204 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80031fa:	f004 fe65 	bl	8007ec8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80031fe:	bf00      	nop
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	20000c50 	.word	0x20000c50

08003208 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800320c:	4802      	ldr	r0, [pc, #8]	; (8003218 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800320e:	f004 fe5b 	bl	8007ec8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8003212:	bf00      	nop
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	20000aa0 	.word	0x20000aa0

0800321c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003220:	4802      	ldr	r0, [pc, #8]	; (800322c <TIM2_IRQHandler+0x10>)
 8003222:	f004 fe51 	bl	8007ec8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003226:	bf00      	nop
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	20000b80 	.word	0x20000b80

08003230 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003234:	4802      	ldr	r0, [pc, #8]	; (8003240 <USART2_IRQHandler+0x10>)
 8003236:	f005 fb5f 	bl	80088f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800323a:	bf00      	nop
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	20000bcc 	.word	0x20000bcc

08003244 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003248:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800324c:	f002 fc88 	bl	8005b60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003250:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003254:	f002 fc84 	bl	8005b60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003258:	bf00      	nop
 800325a:	bd80      	pop	{r7, pc}

0800325c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003260:	4b06      	ldr	r3, [pc, #24]	; (800327c <SystemInit+0x20>)
 8003262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003266:	4a05      	ldr	r2, [pc, #20]	; (800327c <SystemInit+0x20>)
 8003268:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800326c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003270:	bf00      	nop
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	e000ed00 	.word	0xe000ed00

08003280 <UART_Interpret_Rx_Message>:
extern UART_HandleTypeDef huart2;

UartStructType UartState;

void UART_Interpret_Rx_Message()
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
	if(UartState.rx_bytes_length > 7)
 8003284:	4b2d      	ldr	r3, [pc, #180]	; (800333c <UART_Interpret_Rx_Message+0xbc>)
 8003286:	7b1b      	ldrb	r3, [r3, #12]
 8003288:	2b07      	cmp	r3, #7
 800328a:	d955      	bls.n	8003338 <UART_Interpret_Rx_Message+0xb8>
	{
		if(UartState.rx_bytes[2] == '*')
 800328c:	4b2b      	ldr	r3, [pc, #172]	; (800333c <UART_Interpret_Rx_Message+0xbc>)
 800328e:	78db      	ldrb	r3, [r3, #3]
 8003290:	2b2a      	cmp	r3, #42	; 0x2a
 8003292:	d12c      	bne.n	80032ee <UART_Interpret_Rx_Message+0x6e>
		{
			// Requests
			switch(UartState.rx_bytes[4])
 8003294:	4b29      	ldr	r3, [pc, #164]	; (800333c <UART_Interpret_Rx_Message+0xbc>)
 8003296:	795b      	ldrb	r3, [r3, #5]
 8003298:	2b6d      	cmp	r3, #109	; 0x6d
 800329a:	d002      	beq.n	80032a2 <UART_Interpret_Rx_Message+0x22>
 800329c:	2b73      	cmp	r3, #115	; 0x73
 800329e:	d006      	beq.n	80032ae <UART_Interpret_Rx_Message+0x2e>
					UART_Request_Status();
					LCD_changeDisplayMode(Measurement);
					break;
				default:
					// Problems
					break;
 80032a0:	e04a      	b.n	8003338 <UART_Interpret_Rx_Message+0xb8>
					UART_Request_Measurement(UartState.rx_bytes[6]);
 80032a2:	4b26      	ldr	r3, [pc, #152]	; (800333c <UART_Interpret_Rx_Message+0xbc>)
 80032a4:	79db      	ldrb	r3, [r3, #7]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 f870 	bl	800338c <UART_Request_Measurement>
					break;
 80032ac:	e044      	b.n	8003338 <UART_Interpret_Rx_Message+0xb8>
					if(UartState.rx_bytes[6] == '1'){
 80032ae:	4b23      	ldr	r3, [pc, #140]	; (800333c <UART_Interpret_Rx_Message+0xbc>)
 80032b0:	79db      	ldrb	r3, [r3, #7]
 80032b2:	2b31      	cmp	r3, #49	; 0x31
 80032b4:	d10a      	bne.n	80032cc <UART_Interpret_Rx_Message+0x4c>
						if(!OutputState.On) DAC_Start();
 80032b6:	4b22      	ldr	r3, [pc, #136]	; (8003340 <UART_Interpret_Rx_Message+0xc0>)
 80032b8:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 80032bc:	f083 0301 	eor.w	r3, r3, #1
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00d      	beq.n	80032e2 <UART_Interpret_Rx_Message+0x62>
 80032c6:	f7fd fe17 	bl	8000ef8 <DAC_Start>
 80032ca:	e00a      	b.n	80032e2 <UART_Interpret_Rx_Message+0x62>
					else if(UartState.rx_bytes[6] == '0'){
 80032cc:	4b1b      	ldr	r3, [pc, #108]	; (800333c <UART_Interpret_Rx_Message+0xbc>)
 80032ce:	79db      	ldrb	r3, [r3, #7]
 80032d0:	2b30      	cmp	r3, #48	; 0x30
 80032d2:	d106      	bne.n	80032e2 <UART_Interpret_Rx_Message+0x62>
						if(OutputState.On) DAC_Stop();
 80032d4:	4b1a      	ldr	r3, [pc, #104]	; (8003340 <UART_Interpret_Rx_Message+0xc0>)
 80032d6:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <UART_Interpret_Rx_Message+0x62>
 80032de:	f7fd fe2d 	bl	8000f3c <DAC_Stop>
					UART_Request_Status();
 80032e2:	f000 f993 	bl	800360c <UART_Request_Status>
					LCD_changeDisplayMode(Measurement);
 80032e6:	2001      	movs	r0, #1
 80032e8:	f7fe f980 	bl	80015ec <LCD_changeDisplayMode>
					break;
 80032ec:	e024      	b.n	8003338 <UART_Interpret_Rx_Message+0xb8>
			}
		}
		else if(UartState.rx_bytes[2] == '$'){
 80032ee:	4b13      	ldr	r3, [pc, #76]	; (800333c <UART_Interpret_Rx_Message+0xbc>)
 80032f0:	78db      	ldrb	r3, [r3, #3]
 80032f2:	2b24      	cmp	r3, #36	; 0x24
 80032f4:	d108      	bne.n	8003308 <UART_Interpret_Rx_Message+0x88>
			// Set Measurement Mode
			UART_Set_Measurement_Mode(UartState.rx_bytes[4], UartState.rx_bytes[5]);
 80032f6:	4b11      	ldr	r3, [pc, #68]	; (800333c <UART_Interpret_Rx_Message+0xbc>)
 80032f8:	795a      	ldrb	r2, [r3, #5]
 80032fa:	4b10      	ldr	r3, [pc, #64]	; (800333c <UART_Interpret_Rx_Message+0xbc>)
 80032fc:	799b      	ldrb	r3, [r3, #6]
 80032fe:	4619      	mov	r1, r3
 8003300:	4610      	mov	r0, r2
 8003302:	f000 f9d9 	bl	80036b8 <UART_Set_Measurement_Mode>
		}else if(UartState.rx_bytes[2] == '#'){
			// Display on LCD
			UART_Display_On_LCD(UartState.rx_bytes[4], UartState.rx_bytes[6]);
		}
	}
}
 8003306:	e017      	b.n	8003338 <UART_Interpret_Rx_Message+0xb8>
		}else if(UartState.rx_bytes[2] == '^'){
 8003308:	4b0c      	ldr	r3, [pc, #48]	; (800333c <UART_Interpret_Rx_Message+0xbc>)
 800330a:	78db      	ldrb	r3, [r3, #3]
 800330c:	2b5e      	cmp	r3, #94	; 0x5e
 800330e:	d106      	bne.n	800331e <UART_Interpret_Rx_Message+0x9e>
			UART_Set_Output_Parameter(UartState.rx_bytes, UartState.rx_bytes_length);
 8003310:	4b0a      	ldr	r3, [pc, #40]	; (800333c <UART_Interpret_Rx_Message+0xbc>)
 8003312:	7b1b      	ldrb	r3, [r3, #12]
 8003314:	4619      	mov	r1, r3
 8003316:	480b      	ldr	r0, [pc, #44]	; (8003344 <UART_Interpret_Rx_Message+0xc4>)
 8003318:	f000 fa06 	bl	8003728 <UART_Set_Output_Parameter>
}
 800331c:	e00c      	b.n	8003338 <UART_Interpret_Rx_Message+0xb8>
		}else if(UartState.rx_bytes[2] == '#'){
 800331e:	4b07      	ldr	r3, [pc, #28]	; (800333c <UART_Interpret_Rx_Message+0xbc>)
 8003320:	78db      	ldrb	r3, [r3, #3]
 8003322:	2b23      	cmp	r3, #35	; 0x23
 8003324:	d108      	bne.n	8003338 <UART_Interpret_Rx_Message+0xb8>
			UART_Display_On_LCD(UartState.rx_bytes[4], UartState.rx_bytes[6]);
 8003326:	4b05      	ldr	r3, [pc, #20]	; (800333c <UART_Interpret_Rx_Message+0xbc>)
 8003328:	795a      	ldrb	r2, [r3, #5]
 800332a:	4b04      	ldr	r3, [pc, #16]	; (800333c <UART_Interpret_Rx_Message+0xbc>)
 800332c:	79db      	ldrb	r3, [r3, #7]
 800332e:	4619      	mov	r1, r3
 8003330:	4610      	mov	r0, r2
 8003332:	f000 f809 	bl	8003348 <UART_Display_On_LCD>
}
 8003336:	e7ff      	b.n	8003338 <UART_Interpret_Rx_Message+0xb8>
 8003338:	bf00      	nop
 800333a:	bd80      	pop	{r7, pc}
 800333c:	20000c9c 	.word	0x20000c9c
 8003340:	20000828 	.word	0x20000828
 8003344:	20000c9d 	.word	0x20000c9d

08003348 <UART_Display_On_LCD>:

void UART_Display_On_LCD(uint8_t rs, uint8_t byte)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	460a      	mov	r2, r1
 8003352:	71fb      	strb	r3, [r7, #7]
 8003354:	4613      	mov	r3, r2
 8003356:	71bb      	strb	r3, [r7, #6]
	if(rs == '1'){
 8003358:	79fb      	ldrb	r3, [r7, #7]
 800335a:	2b31      	cmp	r3, #49	; 0x31
 800335c:	d106      	bne.n	800336c <UART_Display_On_LCD+0x24>
		// Set print flag; store rs and byte
		DisplayState.PrintFlag = 1;
 800335e:	4b0a      	ldr	r3, [pc, #40]	; (8003388 <UART_Display_On_LCD+0x40>)
 8003360:	2201      	movs	r2, #1
 8003362:	715a      	strb	r2, [r3, #5]
		DisplayState.PrintByte = byte;
 8003364:	4a08      	ldr	r2, [pc, #32]	; (8003388 <UART_Display_On_LCD+0x40>)
 8003366:	79bb      	ldrb	r3, [r7, #6]
 8003368:	7193      	strb	r3, [r2, #6]
	}else if(rs == '0'){
		// Instruction
		LCD_Write_Instruction(byte);
		Delay_us_10(200); // 2ms
	}
}
 800336a:	e009      	b.n	8003380 <UART_Display_On_LCD+0x38>
	}else if(rs == '0'){
 800336c:	79fb      	ldrb	r3, [r7, #7]
 800336e:	2b30      	cmp	r3, #48	; 0x30
 8003370:	d106      	bne.n	8003380 <UART_Display_On_LCD+0x38>
		LCD_Write_Instruction(byte);
 8003372:	79bb      	ldrb	r3, [r7, #6]
 8003374:	4618      	mov	r0, r3
 8003376:	f7fd ff6f 	bl	8001258 <LCD_Write_Instruction>
		Delay_us_10(200); // 2ms
 800337a:	20c8      	movs	r0, #200	; 0xc8
 800337c:	f7ff fce8 	bl	8002d50 <Delay_us_10>
}
 8003380:	bf00      	nop
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	200009e8 	.word	0x200009e8

0800338c <UART_Request_Measurement>:

void UART_Request_Measurement(uint8_t parameter)
{
 800338c:	b590      	push	{r4, r7, lr}
 800338e:	b089      	sub	sp, #36	; 0x24
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	71fb      	strb	r3, [r7, #7]
	uint8_t msg[13] = "@,m,x,xxxx,!\n";
 8003396:	4b95      	ldr	r3, [pc, #596]	; (80035ec <UART_Request_Measurement+0x260>)
 8003398:	f107 040c 	add.w	r4, r7, #12
 800339c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800339e:	c407      	stmia	r4!, {r0, r1, r2}
 80033a0:	7023      	strb	r3, [r4, #0]
	uint16_t a = 0;
 80033a2:	2300      	movs	r3, #0
 80033a4:	83fb      	strh	r3, [r7, #30]
	uint16_t o = 0;
 80033a6:	2300      	movs	r3, #0
 80033a8:	83bb      	strh	r3, [r7, #28]
	uint16_t f = 0;
 80033aa:	2300      	movs	r3, #0
 80033ac:	837b      	strh	r3, [r7, #26]
	if(MeasurementState.Mode == DV || MeasurementState.Mode == AV)
 80033ae:	4b90      	ldr	r3, [pc, #576]	; (80035f0 <UART_Request_Measurement+0x264>)
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <UART_Request_Measurement+0x32>
 80033b6:	4b8e      	ldr	r3, [pc, #568]	; (80035f0 <UART_Request_Measurement+0x264>)
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d109      	bne.n	80033d2 <UART_Request_Measurement+0x46>
	{
		a = MeasurementState.Amplitude;
 80033be:	4b8c      	ldr	r3, [pc, #560]	; (80035f0 <UART_Request_Measurement+0x264>)
 80033c0:	885b      	ldrh	r3, [r3, #2]
 80033c2:	83fb      	strh	r3, [r7, #30]
		o = MeasurementState.Offset;
 80033c4:	4b8a      	ldr	r3, [pc, #552]	; (80035f0 <UART_Request_Measurement+0x264>)
 80033c6:	891b      	ldrh	r3, [r3, #8]
 80033c8:	83bb      	strh	r3, [r7, #28]
		f = MeasurementState.Frequency;
 80033ca:	4b89      	ldr	r3, [pc, #548]	; (80035f0 <UART_Request_Measurement+0x264>)
 80033cc:	889b      	ldrh	r3, [r3, #4]
 80033ce:	837b      	strh	r3, [r7, #26]
 80033d0:	e008      	b.n	80033e4 <UART_Request_Measurement+0x58>
	} else {
		a = CurrentState.Amplitude;
 80033d2:	4b88      	ldr	r3, [pc, #544]	; (80035f4 <UART_Request_Measurement+0x268>)
 80033d4:	885b      	ldrh	r3, [r3, #2]
 80033d6:	83fb      	strh	r3, [r7, #30]
		o = CurrentState.Offset;
 80033d8:	4b86      	ldr	r3, [pc, #536]	; (80035f4 <UART_Request_Measurement+0x268>)
 80033da:	891b      	ldrh	r3, [r3, #8]
 80033dc:	83bb      	strh	r3, [r7, #28]
		f = CurrentState.Frequency;
 80033de:	4b85      	ldr	r3, [pc, #532]	; (80035f4 <UART_Request_Measurement+0x268>)
 80033e0:	889b      	ldrh	r3, [r3, #4]
 80033e2:	837b      	strh	r3, [r7, #26]
	}
	switch(parameter){
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	2b66      	cmp	r3, #102	; 0x66
 80033e8:	f000 80a1 	beq.w	800352e <UART_Request_Measurement+0x1a2>
 80033ec:	2b6f      	cmp	r3, #111	; 0x6f
 80033ee:	d050      	beq.n	8003492 <UART_Request_Measurement+0x106>
 80033f0:	2b61      	cmp	r3, #97	; 0x61
 80033f2:	d000      	beq.n	80033f6 <UART_Request_Measurement+0x6a>
			msg[8] = ((f/10) % 10) + 48;
			msg[9] = (f % 10) + 48;
			break;
		default:
			// Problems
			break;
 80033f4:	e0e9      	b.n	80035ca <UART_Request_Measurement+0x23e>
			msg[4] = 'a';
 80033f6:	2361      	movs	r3, #97	; 0x61
 80033f8:	743b      	strb	r3, [r7, #16]
			msg[6] = ((a/1000) % 10) + 48;
 80033fa:	8bfb      	ldrh	r3, [r7, #30]
 80033fc:	4a7e      	ldr	r2, [pc, #504]	; (80035f8 <UART_Request_Measurement+0x26c>)
 80033fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003402:	099b      	lsrs	r3, r3, #6
 8003404:	b29a      	uxth	r2, r3
 8003406:	4b7d      	ldr	r3, [pc, #500]	; (80035fc <UART_Request_Measurement+0x270>)
 8003408:	fba3 1302 	umull	r1, r3, r3, r2
 800340c:	08d9      	lsrs	r1, r3, #3
 800340e:	460b      	mov	r3, r1
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	440b      	add	r3, r1
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	b29b      	uxth	r3, r3
 800341a:	b2db      	uxtb	r3, r3
 800341c:	3330      	adds	r3, #48	; 0x30
 800341e:	b2db      	uxtb	r3, r3
 8003420:	74bb      	strb	r3, [r7, #18]
			msg[7] = ((a/100) % 10) + 48;
 8003422:	8bfb      	ldrh	r3, [r7, #30]
 8003424:	4a76      	ldr	r2, [pc, #472]	; (8003600 <UART_Request_Measurement+0x274>)
 8003426:	fba2 2303 	umull	r2, r3, r2, r3
 800342a:	095b      	lsrs	r3, r3, #5
 800342c:	b29a      	uxth	r2, r3
 800342e:	4b73      	ldr	r3, [pc, #460]	; (80035fc <UART_Request_Measurement+0x270>)
 8003430:	fba3 1302 	umull	r1, r3, r3, r2
 8003434:	08d9      	lsrs	r1, r3, #3
 8003436:	460b      	mov	r3, r1
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	440b      	add	r3, r1
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	b29b      	uxth	r3, r3
 8003442:	b2db      	uxtb	r3, r3
 8003444:	3330      	adds	r3, #48	; 0x30
 8003446:	b2db      	uxtb	r3, r3
 8003448:	74fb      	strb	r3, [r7, #19]
			msg[8] = ((a/10) % 10) + 48;
 800344a:	8bfb      	ldrh	r3, [r7, #30]
 800344c:	4a6b      	ldr	r2, [pc, #428]	; (80035fc <UART_Request_Measurement+0x270>)
 800344e:	fba2 2303 	umull	r2, r3, r2, r3
 8003452:	08db      	lsrs	r3, r3, #3
 8003454:	b29a      	uxth	r2, r3
 8003456:	4b69      	ldr	r3, [pc, #420]	; (80035fc <UART_Request_Measurement+0x270>)
 8003458:	fba3 1302 	umull	r1, r3, r3, r2
 800345c:	08d9      	lsrs	r1, r3, #3
 800345e:	460b      	mov	r3, r1
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	440b      	add	r3, r1
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	b29b      	uxth	r3, r3
 800346a:	b2db      	uxtb	r3, r3
 800346c:	3330      	adds	r3, #48	; 0x30
 800346e:	b2db      	uxtb	r3, r3
 8003470:	753b      	strb	r3, [r7, #20]
			msg[9] = (a % 10) + 48;
 8003472:	8bfa      	ldrh	r2, [r7, #30]
 8003474:	4b61      	ldr	r3, [pc, #388]	; (80035fc <UART_Request_Measurement+0x270>)
 8003476:	fba3 1302 	umull	r1, r3, r3, r2
 800347a:	08d9      	lsrs	r1, r3, #3
 800347c:	460b      	mov	r3, r1
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	b29b      	uxth	r3, r3
 8003488:	b2db      	uxtb	r3, r3
 800348a:	3330      	adds	r3, #48	; 0x30
 800348c:	b2db      	uxtb	r3, r3
 800348e:	757b      	strb	r3, [r7, #21]
			break;
 8003490:	e09b      	b.n	80035ca <UART_Request_Measurement+0x23e>
			msg[4] = 'o';
 8003492:	236f      	movs	r3, #111	; 0x6f
 8003494:	743b      	strb	r3, [r7, #16]
			msg[6] = ((o/1000) % 10) + 48;
 8003496:	8bbb      	ldrh	r3, [r7, #28]
 8003498:	4a57      	ldr	r2, [pc, #348]	; (80035f8 <UART_Request_Measurement+0x26c>)
 800349a:	fba2 2303 	umull	r2, r3, r2, r3
 800349e:	099b      	lsrs	r3, r3, #6
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	4b56      	ldr	r3, [pc, #344]	; (80035fc <UART_Request_Measurement+0x270>)
 80034a4:	fba3 1302 	umull	r1, r3, r3, r2
 80034a8:	08d9      	lsrs	r1, r3, #3
 80034aa:	460b      	mov	r3, r1
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	440b      	add	r3, r1
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	3330      	adds	r3, #48	; 0x30
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	74bb      	strb	r3, [r7, #18]
			msg[7] = ((o/100) % 10) + 48;
 80034be:	8bbb      	ldrh	r3, [r7, #28]
 80034c0:	4a4f      	ldr	r2, [pc, #316]	; (8003600 <UART_Request_Measurement+0x274>)
 80034c2:	fba2 2303 	umull	r2, r3, r2, r3
 80034c6:	095b      	lsrs	r3, r3, #5
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	4b4c      	ldr	r3, [pc, #304]	; (80035fc <UART_Request_Measurement+0x270>)
 80034cc:	fba3 1302 	umull	r1, r3, r3, r2
 80034d0:	08d9      	lsrs	r1, r3, #3
 80034d2:	460b      	mov	r3, r1
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	440b      	add	r3, r1
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	b29b      	uxth	r3, r3
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	3330      	adds	r3, #48	; 0x30
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	74fb      	strb	r3, [r7, #19]
			msg[8] = ((o/10) % 10) + 48;
 80034e6:	8bbb      	ldrh	r3, [r7, #28]
 80034e8:	4a44      	ldr	r2, [pc, #272]	; (80035fc <UART_Request_Measurement+0x270>)
 80034ea:	fba2 2303 	umull	r2, r3, r2, r3
 80034ee:	08db      	lsrs	r3, r3, #3
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	4b42      	ldr	r3, [pc, #264]	; (80035fc <UART_Request_Measurement+0x270>)
 80034f4:	fba3 1302 	umull	r1, r3, r3, r2
 80034f8:	08d9      	lsrs	r1, r3, #3
 80034fa:	460b      	mov	r3, r1
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	440b      	add	r3, r1
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	b29b      	uxth	r3, r3
 8003506:	b2db      	uxtb	r3, r3
 8003508:	3330      	adds	r3, #48	; 0x30
 800350a:	b2db      	uxtb	r3, r3
 800350c:	753b      	strb	r3, [r7, #20]
			msg[9] = (o % 10) + 48;
 800350e:	8bba      	ldrh	r2, [r7, #28]
 8003510:	4b3a      	ldr	r3, [pc, #232]	; (80035fc <UART_Request_Measurement+0x270>)
 8003512:	fba3 1302 	umull	r1, r3, r3, r2
 8003516:	08d9      	lsrs	r1, r3, #3
 8003518:	460b      	mov	r3, r1
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	b29b      	uxth	r3, r3
 8003524:	b2db      	uxtb	r3, r3
 8003526:	3330      	adds	r3, #48	; 0x30
 8003528:	b2db      	uxtb	r3, r3
 800352a:	757b      	strb	r3, [r7, #21]
			break;
 800352c:	e04d      	b.n	80035ca <UART_Request_Measurement+0x23e>
			msg[4] = 'f';
 800352e:	2366      	movs	r3, #102	; 0x66
 8003530:	743b      	strb	r3, [r7, #16]
			msg[6] = ((f/1000) % 10) + 48;
 8003532:	8b7b      	ldrh	r3, [r7, #26]
 8003534:	4a30      	ldr	r2, [pc, #192]	; (80035f8 <UART_Request_Measurement+0x26c>)
 8003536:	fba2 2303 	umull	r2, r3, r2, r3
 800353a:	099b      	lsrs	r3, r3, #6
 800353c:	b29a      	uxth	r2, r3
 800353e:	4b2f      	ldr	r3, [pc, #188]	; (80035fc <UART_Request_Measurement+0x270>)
 8003540:	fba3 1302 	umull	r1, r3, r3, r2
 8003544:	08d9      	lsrs	r1, r3, #3
 8003546:	460b      	mov	r3, r1
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	b29b      	uxth	r3, r3
 8003552:	b2db      	uxtb	r3, r3
 8003554:	3330      	adds	r3, #48	; 0x30
 8003556:	b2db      	uxtb	r3, r3
 8003558:	74bb      	strb	r3, [r7, #18]
			msg[7] = ((f/100) % 10) + 48;
 800355a:	8b7b      	ldrh	r3, [r7, #26]
 800355c:	4a28      	ldr	r2, [pc, #160]	; (8003600 <UART_Request_Measurement+0x274>)
 800355e:	fba2 2303 	umull	r2, r3, r2, r3
 8003562:	095b      	lsrs	r3, r3, #5
 8003564:	b29a      	uxth	r2, r3
 8003566:	4b25      	ldr	r3, [pc, #148]	; (80035fc <UART_Request_Measurement+0x270>)
 8003568:	fba3 1302 	umull	r1, r3, r3, r2
 800356c:	08d9      	lsrs	r1, r3, #3
 800356e:	460b      	mov	r3, r1
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	b29b      	uxth	r3, r3
 800357a:	b2db      	uxtb	r3, r3
 800357c:	3330      	adds	r3, #48	; 0x30
 800357e:	b2db      	uxtb	r3, r3
 8003580:	74fb      	strb	r3, [r7, #19]
			msg[8] = ((f/10) % 10) + 48;
 8003582:	8b7b      	ldrh	r3, [r7, #26]
 8003584:	4a1d      	ldr	r2, [pc, #116]	; (80035fc <UART_Request_Measurement+0x270>)
 8003586:	fba2 2303 	umull	r2, r3, r2, r3
 800358a:	08db      	lsrs	r3, r3, #3
 800358c:	b29a      	uxth	r2, r3
 800358e:	4b1b      	ldr	r3, [pc, #108]	; (80035fc <UART_Request_Measurement+0x270>)
 8003590:	fba3 1302 	umull	r1, r3, r3, r2
 8003594:	08d9      	lsrs	r1, r3, #3
 8003596:	460b      	mov	r3, r1
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	3330      	adds	r3, #48	; 0x30
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	753b      	strb	r3, [r7, #20]
			msg[9] = (f % 10) + 48;
 80035aa:	8b7a      	ldrh	r2, [r7, #26]
 80035ac:	4b13      	ldr	r3, [pc, #76]	; (80035fc <UART_Request_Measurement+0x270>)
 80035ae:	fba3 1302 	umull	r1, r3, r3, r2
 80035b2:	08d9      	lsrs	r1, r3, #3
 80035b4:	460b      	mov	r3, r1
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	b29b      	uxth	r3, r3
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	3330      	adds	r3, #48	; 0x30
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	757b      	strb	r3, [r7, #21]
			break;
 80035c8:	bf00      	nop
	}
	HAL_UART_Transmit(&huart2, msg, 13, 10);
 80035ca:	f107 010c 	add.w	r1, r7, #12
 80035ce:	230a      	movs	r3, #10
 80035d0:	220d      	movs	r2, #13
 80035d2:	480c      	ldr	r0, [pc, #48]	; (8003604 <UART_Request_Measurement+0x278>)
 80035d4:	f005 f8ae 	bl	8008734 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, UartState.rx_byte, 1);
 80035d8:	2201      	movs	r2, #1
 80035da:	490b      	ldr	r1, [pc, #44]	; (8003608 <UART_Request_Measurement+0x27c>)
 80035dc:	4809      	ldr	r0, [pc, #36]	; (8003604 <UART_Request_Measurement+0x278>)
 80035de:	f005 f93d 	bl	800885c <HAL_UART_Receive_IT>
}
 80035e2:	bf00      	nop
 80035e4:	3724      	adds	r7, #36	; 0x24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd90      	pop	{r4, r7, pc}
 80035ea:	bf00      	nop
 80035ec:	0800acdc 	.word	0x0800acdc
 80035f0:	2000081c 	.word	0x2000081c
 80035f4:	200009dc 	.word	0x200009dc
 80035f8:	10624dd3 	.word	0x10624dd3
 80035fc:	cccccccd 	.word	0xcccccccd
 8003600:	51eb851f 	.word	0x51eb851f
 8003604:	20000bcc 	.word	0x20000bcc
 8003608:	20000c9c 	.word	0x20000c9c

0800360c <UART_Request_Status>:

void UART_Request_Status()
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
	uint8_t msg[11] = "@,xx,x,x,!\n";
 8003612:	4a24      	ldr	r2, [pc, #144]	; (80036a4 <UART_Request_Status+0x98>)
 8003614:	1d3b      	adds	r3, r7, #4
 8003616:	ca07      	ldmia	r2, {r0, r1, r2}
 8003618:	c303      	stmia	r3!, {r0, r1}
 800361a:	801a      	strh	r2, [r3, #0]
 800361c:	3302      	adds	r3, #2
 800361e:	0c12      	lsrs	r2, r2, #16
 8003620:	701a      	strb	r2, [r3, #0]
	switch(MeasurementState.Mode){
 8003622:	4b21      	ldr	r3, [pc, #132]	; (80036a8 <UART_Request_Status+0x9c>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b03      	cmp	r3, #3
 8003628:	d81e      	bhi.n	8003668 <UART_Request_Status+0x5c>
 800362a:	a201      	add	r2, pc, #4	; (adr r2, 8003630 <UART_Request_Status+0x24>)
 800362c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003630:	08003641 	.word	0x08003641
 8003634:	08003655 	.word	0x08003655
 8003638:	0800364b 	.word	0x0800364b
 800363c:	0800365f 	.word	0x0800365f
		case DV:
			// DV
			msg[2] = 'D';
 8003640:	2344      	movs	r3, #68	; 0x44
 8003642:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'V';
 8003644:	2356      	movs	r3, #86	; 0x56
 8003646:	71fb      	strb	r3, [r7, #7]
			break;
 8003648:	e00f      	b.n	800366a <UART_Request_Status+0x5e>
		case AV:
			// AV
			msg[2] = 'A';
 800364a:	2341      	movs	r3, #65	; 0x41
 800364c:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'V';
 800364e:	2356      	movs	r3, #86	; 0x56
 8003650:	71fb      	strb	r3, [r7, #7]
			break;
 8003652:	e00a      	b.n	800366a <UART_Request_Status+0x5e>
		case DI:
			// DI
			msg[2] = 'D';
 8003654:	2344      	movs	r3, #68	; 0x44
 8003656:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'I';
 8003658:	2349      	movs	r3, #73	; 0x49
 800365a:	71fb      	strb	r3, [r7, #7]
			break;
 800365c:	e005      	b.n	800366a <UART_Request_Status+0x5e>
		case AI:
			// AI
			msg[2] = 'A';
 800365e:	2341      	movs	r3, #65	; 0x41
 8003660:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'I';
 8003662:	2349      	movs	r3, #73	; 0x49
 8003664:	71fb      	strb	r3, [r7, #7]
			break;
 8003666:	e000      	b.n	800366a <UART_Request_Status+0x5e>
		default:
			// Problems
			break;
 8003668:	bf00      	nop
	}
	msg[5] = OutputState.Mode;
 800366a:	4b10      	ldr	r3, [pc, #64]	; (80036ac <UART_Request_Status+0xa0>)
 800366c:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 8003670:	727b      	strb	r3, [r7, #9]
	if(OutputState.On){
 8003672:	4b0e      	ldr	r3, [pc, #56]	; (80036ac <UART_Request_Status+0xa0>)
 8003674:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <UART_Request_Status+0x76>
		msg[7] = '1';
 800367c:	2331      	movs	r3, #49	; 0x31
 800367e:	72fb      	strb	r3, [r7, #11]
 8003680:	e001      	b.n	8003686 <UART_Request_Status+0x7a>
	} else {
		msg[7] = '0';
 8003682:	2330      	movs	r3, #48	; 0x30
 8003684:	72fb      	strb	r3, [r7, #11]
	}
	HAL_UART_Transmit(&huart2, msg, 11, 10);
 8003686:	1d39      	adds	r1, r7, #4
 8003688:	230a      	movs	r3, #10
 800368a:	220b      	movs	r2, #11
 800368c:	4808      	ldr	r0, [pc, #32]	; (80036b0 <UART_Request_Status+0xa4>)
 800368e:	f005 f851 	bl	8008734 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, UartState.rx_byte, 1);
 8003692:	2201      	movs	r2, #1
 8003694:	4907      	ldr	r1, [pc, #28]	; (80036b4 <UART_Request_Status+0xa8>)
 8003696:	4806      	ldr	r0, [pc, #24]	; (80036b0 <UART_Request_Status+0xa4>)
 8003698:	f005 f8e0 	bl	800885c <HAL_UART_Receive_IT>

}
 800369c:	bf00      	nop
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	0800acec 	.word	0x0800acec
 80036a8:	2000081c 	.word	0x2000081c
 80036ac:	20000828 	.word	0x20000828
 80036b0:	20000bcc 	.word	0x20000bcc
 80036b4:	20000c9c 	.word	0x20000c9c

080036b8 <UART_Set_Measurement_Mode>:

void UART_Set_Measurement_Mode(uint8_t key1, uint8_t key2){
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	460a      	mov	r2, r1
 80036c2:	71fb      	strb	r3, [r7, #7]
 80036c4:	4613      	mov	r3, r2
 80036c6:	71bb      	strb	r3, [r7, #6]
	if(key1 == 'D' && key2 == 'V'){
 80036c8:	79fb      	ldrb	r3, [r7, #7]
 80036ca:	2b44      	cmp	r3, #68	; 0x44
 80036cc:	d106      	bne.n	80036dc <UART_Set_Measurement_Mode+0x24>
 80036ce:	79bb      	ldrb	r3, [r7, #6]
 80036d0:	2b56      	cmp	r3, #86	; 0x56
 80036d2:	d103      	bne.n	80036dc <UART_Set_Measurement_Mode+0x24>
		// DC Voltage
		MeasurementState.Mode = DV;
 80036d4:	4b13      	ldr	r3, [pc, #76]	; (8003724 <UART_Set_Measurement_Mode+0x6c>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	701a      	strb	r2, [r3, #0]
 80036da:	e01c      	b.n	8003716 <UART_Set_Measurement_Mode+0x5e>
	} else if (key1 == 'A' && key2 == 'V'){
 80036dc:	79fb      	ldrb	r3, [r7, #7]
 80036de:	2b41      	cmp	r3, #65	; 0x41
 80036e0:	d106      	bne.n	80036f0 <UART_Set_Measurement_Mode+0x38>
 80036e2:	79bb      	ldrb	r3, [r7, #6]
 80036e4:	2b56      	cmp	r3, #86	; 0x56
 80036e6:	d103      	bne.n	80036f0 <UART_Set_Measurement_Mode+0x38>
		// AC Voltage
		MeasurementState.Mode = AV;
 80036e8:	4b0e      	ldr	r3, [pc, #56]	; (8003724 <UART_Set_Measurement_Mode+0x6c>)
 80036ea:	2202      	movs	r2, #2
 80036ec:	701a      	strb	r2, [r3, #0]
 80036ee:	e012      	b.n	8003716 <UART_Set_Measurement_Mode+0x5e>
	} else if (key1 == 'D' && key2 == 'I'){
 80036f0:	79fb      	ldrb	r3, [r7, #7]
 80036f2:	2b44      	cmp	r3, #68	; 0x44
 80036f4:	d106      	bne.n	8003704 <UART_Set_Measurement_Mode+0x4c>
 80036f6:	79bb      	ldrb	r3, [r7, #6]
 80036f8:	2b49      	cmp	r3, #73	; 0x49
 80036fa:	d103      	bne.n	8003704 <UART_Set_Measurement_Mode+0x4c>
		// DC Current
		MeasurementState.Mode = DI;
 80036fc:	4b09      	ldr	r3, [pc, #36]	; (8003724 <UART_Set_Measurement_Mode+0x6c>)
 80036fe:	2201      	movs	r2, #1
 8003700:	701a      	strb	r2, [r3, #0]
 8003702:	e008      	b.n	8003716 <UART_Set_Measurement_Mode+0x5e>
	} else if (key1 == 'A' && key2 == 'I'){
 8003704:	79fb      	ldrb	r3, [r7, #7]
 8003706:	2b41      	cmp	r3, #65	; 0x41
 8003708:	d105      	bne.n	8003716 <UART_Set_Measurement_Mode+0x5e>
 800370a:	79bb      	ldrb	r3, [r7, #6]
 800370c:	2b49      	cmp	r3, #73	; 0x49
 800370e:	d102      	bne.n	8003716 <UART_Set_Measurement_Mode+0x5e>
		// AC Current
		MeasurementState.Mode = AI;
 8003710:	4b04      	ldr	r3, [pc, #16]	; (8003724 <UART_Set_Measurement_Mode+0x6c>)
 8003712:	2203      	movs	r2, #3
 8003714:	701a      	strb	r2, [r3, #0]
	}
//	DisplayState.DisplayMeasurementsFlag = true;
	LCD_changeDisplayMode(Measurement);
 8003716:	2001      	movs	r0, #1
 8003718:	f7fd ff68 	bl	80015ec <LCD_changeDisplayMode>
}
 800371c:	bf00      	nop
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	2000081c 	.word	0x2000081c

08003728 <UART_Set_Output_Parameter>:

void UART_Set_Output_Parameter(uint8_t *rx_array, uint8_t length)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	70fb      	strb	r3, [r7, #3]
	uint8_t param = rx_array[4];
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	791b      	ldrb	r3, [r3, #4]
 8003738:	72fb      	strb	r3, [r7, #11]
	uint8_t val0 = rx_array[6];
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	799b      	ldrb	r3, [r3, #6]
 800373e:	73fb      	strb	r3, [r7, #15]
	uint16_t received_value = 0;
 8003740:	2300      	movs	r3, #0
 8003742:	81bb      	strh	r3, [r7, #12]
	if(rx_array[7] != ','){
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3307      	adds	r3, #7
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b2c      	cmp	r3, #44	; 0x2c
 800374c:	d03d      	beq.n	80037ca <UART_Set_Output_Parameter+0xa2>
		val0 = rx_array[6] - 48;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	3306      	adds	r3, #6
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	3b30      	subs	r3, #48	; 0x30
 8003756:	73fb      	strb	r3, [r7, #15]
		uint8_t val1 = rx_array[7] - 48;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3307      	adds	r3, #7
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	3b30      	subs	r3, #48	; 0x30
 8003760:	72bb      	strb	r3, [r7, #10]
		uint8_t val2 = rx_array[8] - 48;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	3308      	adds	r3, #8
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	3b30      	subs	r3, #48	; 0x30
 800376a:	727b      	strb	r3, [r7, #9]
		uint8_t val3 = rx_array[9] - 48;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3309      	adds	r3, #9
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	3b30      	subs	r3, #48	; 0x30
 8003774:	723b      	strb	r3, [r7, #8]
		received_value += val0*1000;
 8003776:	7bfb      	ldrb	r3, [r7, #15]
 8003778:	b29b      	uxth	r3, r3
 800377a:	461a      	mov	r2, r3
 800377c:	0152      	lsls	r2, r2, #5
 800377e:	1ad2      	subs	r2, r2, r3
 8003780:	0092      	lsls	r2, r2, #2
 8003782:	4413      	add	r3, r2
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	b29a      	uxth	r2, r3
 8003788:	89bb      	ldrh	r3, [r7, #12]
 800378a:	4413      	add	r3, r2
 800378c:	81bb      	strh	r3, [r7, #12]
		received_value += val1*100;
 800378e:	7abb      	ldrb	r3, [r7, #10]
 8003790:	b29b      	uxth	r3, r3
 8003792:	461a      	mov	r2, r3
 8003794:	0092      	lsls	r2, r2, #2
 8003796:	4413      	add	r3, r2
 8003798:	461a      	mov	r2, r3
 800379a:	0091      	lsls	r1, r2, #2
 800379c:	461a      	mov	r2, r3
 800379e:	460b      	mov	r3, r1
 80037a0:	4413      	add	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	89bb      	ldrh	r3, [r7, #12]
 80037a8:	4413      	add	r3, r2
 80037aa:	81bb      	strh	r3, [r7, #12]
		received_value += val2*10;
 80037ac:	7a7b      	ldrb	r3, [r7, #9]
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	461a      	mov	r2, r3
 80037b2:	0092      	lsls	r2, r2, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	89bb      	ldrh	r3, [r7, #12]
 80037bc:	4413      	add	r3, r2
 80037be:	81bb      	strh	r3, [r7, #12]
		received_value += val3;
 80037c0:	7a3b      	ldrb	r3, [r7, #8]
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	89bb      	ldrh	r3, [r7, #12]
 80037c6:	4413      	add	r3, r2
 80037c8:	81bb      	strh	r3, [r7, #12]
	}
	switch(param){
 80037ca:	7afb      	ldrb	r3, [r7, #11]
 80037cc:	3b61      	subs	r3, #97	; 0x61
 80037ce:	2b13      	cmp	r3, #19
 80037d0:	d844      	bhi.n	800385c <UART_Set_Output_Parameter+0x134>
 80037d2:	a201      	add	r2, pc, #4	; (adr r2, 80037d8 <UART_Set_Output_Parameter+0xb0>)
 80037d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d8:	08003833 	.word	0x08003833
 80037dc:	0800385d 	.word	0x0800385d
 80037e0:	0800385d 	.word	0x0800385d
 80037e4:	08003851 	.word	0x08003851
 80037e8:	0800385d 	.word	0x0800385d
 80037ec:	08003847 	.word	0x08003847
 80037f0:	0800385d 	.word	0x0800385d
 80037f4:	0800385d 	.word	0x0800385d
 80037f8:	0800385d 	.word	0x0800385d
 80037fc:	0800385d 	.word	0x0800385d
 8003800:	0800385d 	.word	0x0800385d
 8003804:	0800385d 	.word	0x0800385d
 8003808:	0800385d 	.word	0x0800385d
 800380c:	0800385d 	.word	0x0800385d
 8003810:	0800383d 	.word	0x0800383d
 8003814:	0800385d 	.word	0x0800385d
 8003818:	0800385d 	.word	0x0800385d
 800381c:	0800385d 	.word	0x0800385d
 8003820:	0800385d 	.word	0x0800385d
 8003824:	08003829 	.word	0x08003829
		case 't':
			// Type
			OutputState.Mode = val0;
 8003828:	4a14      	ldr	r2, [pc, #80]	; (800387c <UART_Set_Output_Parameter+0x154>)
 800382a:	7bfb      	ldrb	r3, [r7, #15]
 800382c:	f882 3195 	strb.w	r3, [r2, #405]	; 0x195
			break;
 8003830:	e015      	b.n	800385e <UART_Set_Output_Parameter+0x136>
		case 'a':
			// Amplitude
			OutputState.Amplitude = received_value;
 8003832:	4a12      	ldr	r2, [pc, #72]	; (800387c <UART_Set_Output_Parameter+0x154>)
 8003834:	89bb      	ldrh	r3, [r7, #12]
 8003836:	f8a2 3196 	strh.w	r3, [r2, #406]	; 0x196
			break;
 800383a:	e010      	b.n	800385e <UART_Set_Output_Parameter+0x136>
		case 'o':
			// Offset
			OutputState.Offset = received_value;
 800383c:	4a0f      	ldr	r2, [pc, #60]	; (800387c <UART_Set_Output_Parameter+0x154>)
 800383e:	89bb      	ldrh	r3, [r7, #12]
 8003840:	f8a2 319c 	strh.w	r3, [r2, #412]	; 0x19c
			break;
 8003844:	e00b      	b.n	800385e <UART_Set_Output_Parameter+0x136>
		case 'f':
			// Frequency
			OutputState.Frequency = received_value;
 8003846:	4a0d      	ldr	r2, [pc, #52]	; (800387c <UART_Set_Output_Parameter+0x154>)
 8003848:	89bb      	ldrh	r3, [r7, #12]
 800384a:	f8a2 3198 	strh.w	r3, [r2, #408]	; 0x198
			break;
 800384e:	e006      	b.n	800385e <UART_Set_Output_Parameter+0x136>
		case 'd':
			// Duty Cycle
			OutputState.DutyCycle = received_value;
 8003850:	89bb      	ldrh	r3, [r7, #12]
 8003852:	b2da      	uxtb	r2, r3
 8003854:	4b09      	ldr	r3, [pc, #36]	; (800387c <UART_Set_Output_Parameter+0x154>)
 8003856:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
			break;
 800385a:	e000      	b.n	800385e <UART_Set_Output_Parameter+0x136>
		case 'c':
			// Temperature
			break;
		default:
			// Problems
			break;
 800385c:	bf00      	nop
	}
	LCD_changeDisplayMode(Measurement);
 800385e:	2001      	movs	r0, #1
 8003860:	f7fd fec4 	bl	80015ec <LCD_changeDisplayMode>
	if(OutputState.On)
 8003864:	4b05      	ldr	r3, [pc, #20]	; (800387c <UART_Set_Output_Parameter+0x154>)
 8003866:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <UART_Set_Output_Parameter+0x14a>
	{
		DAC_Update_Output();
 800386e:	f7fd fb7d 	bl	8000f6c <DAC_Update_Output>
	}
}
 8003872:	bf00      	nop
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	20000828 	.word	0x20000828

08003880 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003880:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038b8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003884:	480d      	ldr	r0, [pc, #52]	; (80038bc <LoopForever+0x6>)
  ldr r1, =_edata
 8003886:	490e      	ldr	r1, [pc, #56]	; (80038c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003888:	4a0e      	ldr	r2, [pc, #56]	; (80038c4 <LoopForever+0xe>)
  movs r3, #0
 800388a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800388c:	e002      	b.n	8003894 <LoopCopyDataInit>

0800388e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800388e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003892:	3304      	adds	r3, #4

08003894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003898:	d3f9      	bcc.n	800388e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800389a:	4a0b      	ldr	r2, [pc, #44]	; (80038c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800389c:	4c0b      	ldr	r4, [pc, #44]	; (80038cc <LoopForever+0x16>)
  movs r3, #0
 800389e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038a0:	e001      	b.n	80038a6 <LoopFillZerobss>

080038a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038a4:	3204      	adds	r2, #4

080038a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038a8:	d3fb      	bcc.n	80038a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80038aa:	f7ff fcd7 	bl	800325c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038ae:	f006 f95d 	bl	8009b6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80038b2:	f7fe fcc7 	bl	8002244 <main>

080038b6 <LoopForever>:

LoopForever:
    b LoopForever
 80038b6:	e7fe      	b.n	80038b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80038b8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80038bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038c0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80038c4:	0800af10 	.word	0x0800af10
  ldr r2, =_sbss
 80038c8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80038cc:	20000cb0 	.word	0x20000cb0

080038d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80038d0:	e7fe      	b.n	80038d0 <ADC1_2_IRQHandler>
	...

080038d4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038d8:	4b08      	ldr	r3, [pc, #32]	; (80038fc <HAL_Init+0x28>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a07      	ldr	r2, [pc, #28]	; (80038fc <HAL_Init+0x28>)
 80038de:	f043 0310 	orr.w	r3, r3, #16
 80038e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038e4:	2003      	movs	r0, #3
 80038e6:	f001 faff 	bl	8004ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038ea:	2000      	movs	r0, #0
 80038ec:	f000 f808 	bl	8003900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038f0:	f7ff fa54 	bl	8002d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	40022000 	.word	0x40022000

08003900 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003908:	4b12      	ldr	r3, [pc, #72]	; (8003954 <HAL_InitTick+0x54>)
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	4b12      	ldr	r3, [pc, #72]	; (8003958 <HAL_InitTick+0x58>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	4619      	mov	r1, r3
 8003912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003916:	fbb3 f3f1 	udiv	r3, r3, r1
 800391a:	fbb2 f3f3 	udiv	r3, r2, r3
 800391e:	4618      	mov	r0, r3
 8003920:	f001 fb17 	bl	8004f52 <HAL_SYSTICK_Config>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e00e      	b.n	800394c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b0f      	cmp	r3, #15
 8003932:	d80a      	bhi.n	800394a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003934:	2200      	movs	r2, #0
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	f04f 30ff 	mov.w	r0, #4294967295
 800393c:	f001 fadf 	bl	8004efe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003940:	4a06      	ldr	r2, [pc, #24]	; (800395c <HAL_InitTick+0x5c>)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003946:	2300      	movs	r3, #0
 8003948:	e000      	b.n	800394c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
}
 800394c:	4618      	mov	r0, r3
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	20000010 	.word	0x20000010
 8003958:	20000018 	.word	0x20000018
 800395c:	20000014 	.word	0x20000014

08003960 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003964:	4b06      	ldr	r3, [pc, #24]	; (8003980 <HAL_IncTick+0x20>)
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	461a      	mov	r2, r3
 800396a:	4b06      	ldr	r3, [pc, #24]	; (8003984 <HAL_IncTick+0x24>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4413      	add	r3, r2
 8003970:	4a04      	ldr	r2, [pc, #16]	; (8003984 <HAL_IncTick+0x24>)
 8003972:	6013      	str	r3, [r2, #0]
}
 8003974:	bf00      	nop
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	20000018 	.word	0x20000018
 8003984:	20000cac 	.word	0x20000cac

08003988 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  return uwTick;  
 800398c:	4b03      	ldr	r3, [pc, #12]	; (800399c <HAL_GetTick+0x14>)
 800398e:	681b      	ldr	r3, [r3, #0]
}
 8003990:	4618      	mov	r0, r3
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	20000cac 	.word	0x20000cac

080039a0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039a8:	f7ff ffee 	bl	8003988 <HAL_GetTick>
 80039ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b8:	d005      	beq.n	80039c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039ba:	4b09      	ldr	r3, [pc, #36]	; (80039e0 <HAL_Delay+0x40>)
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4413      	add	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80039c6:	bf00      	nop
 80039c8:	f7ff ffde 	bl	8003988 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d8f7      	bhi.n	80039c8 <HAL_Delay+0x28>
  {
  }
}
 80039d8:	bf00      	nop
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	20000018 	.word	0x20000018

080039e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b09a      	sub	sp, #104	; 0x68
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039ec:	2300      	movs	r3, #0
 80039ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80039f2:	2300      	movs	r3, #0
 80039f4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e1e3      	b.n	8003dcc <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	f003 0310 	and.w	r3, r3, #16
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d176      	bne.n	8003b04 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d152      	bne.n	8003ac4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7ff f9d3 	bl	8002de4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d13b      	bne.n	8003ac4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f001 f861 	bl	8004b14 <ADC_Disable>
 8003a52:	4603      	mov	r3, r0
 8003a54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5c:	f003 0310 	and.w	r3, r3, #16
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d12f      	bne.n	8003ac4 <HAL_ADC_Init+0xe0>
 8003a64:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d12b      	bne.n	8003ac4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a70:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a74:	f023 0302 	bic.w	r3, r3, #2
 8003a78:	f043 0202 	orr.w	r2, r3, #2
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689a      	ldr	r2, [r3, #8]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a8e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003a9e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003aa0:	4b92      	ldr	r3, [pc, #584]	; (8003cec <HAL_ADC_Init+0x308>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a92      	ldr	r2, [pc, #584]	; (8003cf0 <HAL_ADC_Init+0x30c>)
 8003aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aaa:	0c9a      	lsrs	r2, r3, #18
 8003aac:	4613      	mov	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4413      	add	r3, r2
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ab6:	e002      	b.n	8003abe <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1f9      	bne.n	8003ab8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d007      	beq.n	8003ae2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003adc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ae0:	d110      	bne.n	8003b04 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	f023 0312 	bic.w	r3, r3, #18
 8003aea:	f043 0210 	orr.w	r2, r3, #16
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af6:	f043 0201 	orr.w	r2, r3, #1
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b08:	f003 0310 	and.w	r3, r3, #16
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f040 8150 	bne.w	8003db2 <HAL_ADC_Init+0x3ce>
 8003b12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f040 814b 	bne.w	8003db2 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f040 8143 	bne.w	8003db2 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b30:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003b34:	f043 0202 	orr.w	r2, r3, #2
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b44:	d004      	beq.n	8003b50 <HAL_ADC_Init+0x16c>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a6a      	ldr	r2, [pc, #424]	; (8003cf4 <HAL_ADC_Init+0x310>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d101      	bne.n	8003b54 <HAL_ADC_Init+0x170>
 8003b50:	4b69      	ldr	r3, [pc, #420]	; (8003cf8 <HAL_ADC_Init+0x314>)
 8003b52:	e000      	b.n	8003b56 <HAL_ADC_Init+0x172>
 8003b54:	4b69      	ldr	r3, [pc, #420]	; (8003cfc <HAL_ADC_Init+0x318>)
 8003b56:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b60:	d102      	bne.n	8003b68 <HAL_ADC_Init+0x184>
 8003b62:	4b64      	ldr	r3, [pc, #400]	; (8003cf4 <HAL_ADC_Init+0x310>)
 8003b64:	60fb      	str	r3, [r7, #12]
 8003b66:	e01a      	b.n	8003b9e <HAL_ADC_Init+0x1ba>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a61      	ldr	r2, [pc, #388]	; (8003cf4 <HAL_ADC_Init+0x310>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d103      	bne.n	8003b7a <HAL_ADC_Init+0x196>
 8003b72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	e011      	b.n	8003b9e <HAL_ADC_Init+0x1ba>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a60      	ldr	r2, [pc, #384]	; (8003d00 <HAL_ADC_Init+0x31c>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d102      	bne.n	8003b8a <HAL_ADC_Init+0x1a6>
 8003b84:	4b5f      	ldr	r3, [pc, #380]	; (8003d04 <HAL_ADC_Init+0x320>)
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	e009      	b.n	8003b9e <HAL_ADC_Init+0x1ba>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a5d      	ldr	r2, [pc, #372]	; (8003d04 <HAL_ADC_Init+0x320>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d102      	bne.n	8003b9a <HAL_ADC_Init+0x1b6>
 8003b94:	4b5a      	ldr	r3, [pc, #360]	; (8003d00 <HAL_ADC_Init+0x31c>)
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	e001      	b.n	8003b9e <HAL_ADC_Init+0x1ba>
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f003 0303 	and.w	r3, r3, #3
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d108      	bne.n	8003bbe <HAL_ADC_Init+0x1da>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d101      	bne.n	8003bbe <HAL_ADC_Init+0x1da>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <HAL_ADC_Init+0x1dc>
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d11c      	bne.n	8003bfe <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003bc4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d010      	beq.n	8003bec <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d107      	bne.n	8003be6 <HAL_ADC_Init+0x202>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_ADC_Init+0x202>
 8003be2:	2301      	movs	r3, #1
 8003be4:	e000      	b.n	8003be8 <HAL_ADC_Init+0x204>
 8003be6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d108      	bne.n	8003bfe <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003bec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bfc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	7e5b      	ldrb	r3, [r3, #25]
 8003c02:	035b      	lsls	r3, r3, #13
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c08:	2a01      	cmp	r2, #1
 8003c0a:	d002      	beq.n	8003c12 <HAL_ADC_Init+0x22e>
 8003c0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c10:	e000      	b.n	8003c14 <HAL_ADC_Init+0x230>
 8003c12:	2200      	movs	r2, #0
 8003c14:	431a      	orrs	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c24:	4313      	orrs	r3, r2
 8003c26:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d11b      	bne.n	8003c6a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	7e5b      	ldrb	r3, [r3, #25]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d109      	bne.n	8003c4e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	045a      	lsls	r2, r3, #17
 8003c42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c44:	4313      	orrs	r3, r2
 8003c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c4a:	663b      	str	r3, [r7, #96]	; 0x60
 8003c4c:	e00d      	b.n	8003c6a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003c56:	f043 0220 	orr.w	r2, r3, #32
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c62:	f043 0201 	orr.w	r2, r3, #1
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d054      	beq.n	8003d1c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a22      	ldr	r2, [pc, #136]	; (8003d00 <HAL_ADC_Init+0x31c>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d004      	beq.n	8003c86 <HAL_ADC_Init+0x2a2>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a20      	ldr	r2, [pc, #128]	; (8003d04 <HAL_ADC_Init+0x320>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d140      	bne.n	8003d08 <HAL_ADC_Init+0x324>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8003c8e:	d02a      	beq.n	8003ce6 <HAL_ADC_Init+0x302>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c98:	d022      	beq.n	8003ce0 <HAL_ADC_Init+0x2fc>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8003ca2:	d01a      	beq.n	8003cda <HAL_ADC_Init+0x2f6>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca8:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8003cac:	d012      	beq.n	8003cd4 <HAL_ADC_Init+0x2f0>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb2:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8003cb6:	d00a      	beq.n	8003cce <HAL_ADC_Init+0x2ea>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbc:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8003cc0:	d002      	beq.n	8003cc8 <HAL_ADC_Init+0x2e4>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc6:	e023      	b.n	8003d10 <HAL_ADC_Init+0x32c>
 8003cc8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003ccc:	e020      	b.n	8003d10 <HAL_ADC_Init+0x32c>
 8003cce:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003cd2:	e01d      	b.n	8003d10 <HAL_ADC_Init+0x32c>
 8003cd4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003cd8:	e01a      	b.n	8003d10 <HAL_ADC_Init+0x32c>
 8003cda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cde:	e017      	b.n	8003d10 <HAL_ADC_Init+0x32c>
 8003ce0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8003ce4:	e014      	b.n	8003d10 <HAL_ADC_Init+0x32c>
 8003ce6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8003cea:	e011      	b.n	8003d10 <HAL_ADC_Init+0x32c>
 8003cec:	20000010 	.word	0x20000010
 8003cf0:	431bde83 	.word	0x431bde83
 8003cf4:	50000100 	.word	0x50000100
 8003cf8:	50000300 	.word	0x50000300
 8003cfc:	50000700 	.word	0x50000700
 8003d00:	50000400 	.word	0x50000400
 8003d04:	50000500 	.word	0x50000500
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003d14:	4313      	orrs	r3, r2
 8003d16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 030c 	and.w	r3, r3, #12
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d114      	bne.n	8003d54 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6812      	ldr	r2, [r2, #0]
 8003d34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d38:	f023 0302 	bic.w	r3, r3, #2
 8003d3c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	7e1b      	ldrb	r3, [r3, #24]
 8003d42:	039a      	lsls	r2, r3, #14
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d50:	4313      	orrs	r3, r2
 8003d52:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	4b1e      	ldr	r3, [pc, #120]	; (8003dd4 <HAL_ADC_Init+0x3f0>)
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	6812      	ldr	r2, [r2, #0]
 8003d62:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003d64:	430b      	orrs	r3, r1
 8003d66:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d10c      	bne.n	8003d8a <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	f023 010f 	bic.w	r1, r3, #15
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	1e5a      	subs	r2, r3, #1
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	631a      	str	r2, [r3, #48]	; 0x30
 8003d88:	e007      	b.n	8003d9a <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 020f 	bic.w	r2, r2, #15
 8003d98:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da4:	f023 0303 	bic.w	r3, r3, #3
 8003da8:	f043 0201 	orr.w	r2, r3, #1
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	641a      	str	r2, [r3, #64]	; 0x40
 8003db0:	e00a      	b.n	8003dc8 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	f023 0312 	bic.w	r3, r3, #18
 8003dba:	f043 0210 	orr.w	r2, r3, #16
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003dc8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3768      	adds	r7, #104	; 0x68
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	fff0c007 	.word	0xfff0c007

08003dd8 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003de0:	2300      	movs	r3, #0
 8003de2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 0304 	and.w	r3, r3, #4
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f040 80f9 	bne.w	8003fe6 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d101      	bne.n	8003e02 <HAL_ADC_Start+0x2a>
 8003dfe:	2302      	movs	r3, #2
 8003e00:	e0f4      	b.n	8003fec <HAL_ADC_Start+0x214>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 fe1e 	bl	8004a4c <ADC_Enable>
 8003e10:	4603      	mov	r3, r0
 8003e12:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f040 80e0 	bne.w	8003fdc <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e20:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e24:	f023 0301 	bic.w	r3, r3, #1
 8003e28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e38:	d004      	beq.n	8003e44 <HAL_ADC_Start+0x6c>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a6d      	ldr	r2, [pc, #436]	; (8003ff4 <HAL_ADC_Start+0x21c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d106      	bne.n	8003e52 <HAL_ADC_Start+0x7a>
 8003e44:	4b6c      	ldr	r3, [pc, #432]	; (8003ff8 <HAL_ADC_Start+0x220>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f003 031f 	and.w	r3, r3, #31
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d010      	beq.n	8003e72 <HAL_ADC_Start+0x9a>
 8003e50:	e005      	b.n	8003e5e <HAL_ADC_Start+0x86>
 8003e52:	4b6a      	ldr	r3, [pc, #424]	; (8003ffc <HAL_ADC_Start+0x224>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 031f 	and.w	r3, r3, #31
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d009      	beq.n	8003e72 <HAL_ADC_Start+0x9a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e66:	d004      	beq.n	8003e72 <HAL_ADC_Start+0x9a>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a64      	ldr	r2, [pc, #400]	; (8004000 <HAL_ADC_Start+0x228>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d115      	bne.n	8003e9e <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d036      	beq.n	8003efa <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e90:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e94:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003e9c:	e02d      	b.n	8003efa <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eb2:	d004      	beq.n	8003ebe <HAL_ADC_Start+0xe6>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a4e      	ldr	r2, [pc, #312]	; (8003ff4 <HAL_ADC_Start+0x21c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d10a      	bne.n	8003ed4 <HAL_ADC_Start+0xfc>
 8003ebe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	bf14      	ite	ne
 8003ecc:	2301      	movne	r3, #1
 8003ece:	2300      	moveq	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	e008      	b.n	8003ee6 <HAL_ADC_Start+0x10e>
 8003ed4:	4b4a      	ldr	r3, [pc, #296]	; (8004000 <HAL_ADC_Start+0x228>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	bf14      	ite	ne
 8003ee0:	2301      	movne	r3, #1
 8003ee2:	2300      	moveq	r3, #0
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d007      	beq.n	8003efa <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ef2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f06:	d106      	bne.n	8003f16 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0c:	f023 0206 	bic.w	r2, r3, #6
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	645a      	str	r2, [r3, #68]	; 0x44
 8003f14:	e002      	b.n	8003f1c <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	221c      	movs	r2, #28
 8003f2a:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f34:	d004      	beq.n	8003f40 <HAL_ADC_Start+0x168>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a2e      	ldr	r2, [pc, #184]	; (8003ff4 <HAL_ADC_Start+0x21c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d106      	bne.n	8003f4e <HAL_ADC_Start+0x176>
 8003f40:	4b2d      	ldr	r3, [pc, #180]	; (8003ff8 <HAL_ADC_Start+0x220>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f003 031f 	and.w	r3, r3, #31
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d03e      	beq.n	8003fca <HAL_ADC_Start+0x1f2>
 8003f4c:	e005      	b.n	8003f5a <HAL_ADC_Start+0x182>
 8003f4e:	4b2b      	ldr	r3, [pc, #172]	; (8003ffc <HAL_ADC_Start+0x224>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 031f 	and.w	r3, r3, #31
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d037      	beq.n	8003fca <HAL_ADC_Start+0x1f2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f62:	d004      	beq.n	8003f6e <HAL_ADC_Start+0x196>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a22      	ldr	r2, [pc, #136]	; (8003ff4 <HAL_ADC_Start+0x21c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d106      	bne.n	8003f7c <HAL_ADC_Start+0x1a4>
 8003f6e:	4b22      	ldr	r3, [pc, #136]	; (8003ff8 <HAL_ADC_Start+0x220>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 031f 	and.w	r3, r3, #31
 8003f76:	2b05      	cmp	r3, #5
 8003f78:	d027      	beq.n	8003fca <HAL_ADC_Start+0x1f2>
 8003f7a:	e005      	b.n	8003f88 <HAL_ADC_Start+0x1b0>
 8003f7c:	4b1f      	ldr	r3, [pc, #124]	; (8003ffc <HAL_ADC_Start+0x224>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f003 031f 	and.w	r3, r3, #31
 8003f84:	2b05      	cmp	r3, #5
 8003f86:	d020      	beq.n	8003fca <HAL_ADC_Start+0x1f2>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f90:	d004      	beq.n	8003f9c <HAL_ADC_Start+0x1c4>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a17      	ldr	r2, [pc, #92]	; (8003ff4 <HAL_ADC_Start+0x21c>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d106      	bne.n	8003faa <HAL_ADC_Start+0x1d2>
 8003f9c:	4b16      	ldr	r3, [pc, #88]	; (8003ff8 <HAL_ADC_Start+0x220>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f003 031f 	and.w	r3, r3, #31
 8003fa4:	2b09      	cmp	r3, #9
 8003fa6:	d010      	beq.n	8003fca <HAL_ADC_Start+0x1f2>
 8003fa8:	e005      	b.n	8003fb6 <HAL_ADC_Start+0x1de>
 8003faa:	4b14      	ldr	r3, [pc, #80]	; (8003ffc <HAL_ADC_Start+0x224>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 031f 	and.w	r3, r3, #31
 8003fb2:	2b09      	cmp	r3, #9
 8003fb4:	d009      	beq.n	8003fca <HAL_ADC_Start+0x1f2>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fbe:	d004      	beq.n	8003fca <HAL_ADC_Start+0x1f2>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a0e      	ldr	r2, [pc, #56]	; (8004000 <HAL_ADC_Start+0x228>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d10f      	bne.n	8003fea <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f042 0204 	orr.w	r2, r2, #4
 8003fd8:	609a      	str	r2, [r3, #8]
 8003fda:	e006      	b.n	8003fea <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003fe4:	e001      	b.n	8003fea <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	50000100 	.word	0x50000100
 8003ff8:	50000300 	.word	0x50000300
 8003ffc:	50000700 	.word	0x50000700
 8004000:	50000400 	.word	0x50000400

08004004 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800400c:	2300      	movs	r3, #0
 800400e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004016:	2b01      	cmp	r3, #1
 8004018:	d101      	bne.n	800401e <HAL_ADC_Stop+0x1a>
 800401a:	2302      	movs	r3, #2
 800401c:	e023      	b.n	8004066 <HAL_ADC_Stop+0x62>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004026:	216c      	movs	r1, #108	; 0x6c
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 fdd9 	bl	8004be0 <ADC_ConversionStop>
 800402e:	4603      	mov	r3, r0
 8004030:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004032:	7bfb      	ldrb	r3, [r7, #15]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d111      	bne.n	800405c <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 fd6b 	bl	8004b14 <ADC_Disable>
 800403e:	4603      	mov	r3, r0
 8004040:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004042:	7bfb      	ldrb	r3, [r7, #15]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d109      	bne.n	800405c <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004050:	f023 0301 	bic.w	r3, r3, #1
 8004054:	f043 0201 	orr.w	r2, r3, #1
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004064:	7bfb      	ldrb	r3, [r7, #15]
}
 8004066:	4618      	mov	r0, r3
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
	...

08004070 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800407a:	2300      	movs	r3, #0
 800407c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	2b08      	cmp	r3, #8
 8004084:	d102      	bne.n	800408c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8004086:	2308      	movs	r3, #8
 8004088:	617b      	str	r3, [r7, #20]
 800408a:	e03a      	b.n	8004102 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004094:	d004      	beq.n	80040a0 <HAL_ADC_PollForConversion+0x30>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a72      	ldr	r2, [pc, #456]	; (8004264 <HAL_ADC_PollForConversion+0x1f4>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d101      	bne.n	80040a4 <HAL_ADC_PollForConversion+0x34>
 80040a0:	4b71      	ldr	r3, [pc, #452]	; (8004268 <HAL_ADC_PollForConversion+0x1f8>)
 80040a2:	e000      	b.n	80040a6 <HAL_ADC_PollForConversion+0x36>
 80040a4:	4b71      	ldr	r3, [pc, #452]	; (800426c <HAL_ADC_PollForConversion+0x1fc>)
 80040a6:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f003 031f 	and.w	r3, r3, #31
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d112      	bne.n	80040da <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d11d      	bne.n	80040fe <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	f043 0220 	orr.w	r2, r3, #32
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e0bf      	b.n	800425a <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00b      	beq.n	80040fe <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	f043 0220 	orr.w	r2, r3, #32
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e0ad      	b.n	800425a <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80040fe:	230c      	movs	r3, #12
 8004100:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800410a:	d004      	beq.n	8004116 <HAL_ADC_PollForConversion+0xa6>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a54      	ldr	r2, [pc, #336]	; (8004264 <HAL_ADC_PollForConversion+0x1f4>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d106      	bne.n	8004124 <HAL_ADC_PollForConversion+0xb4>
 8004116:	4b54      	ldr	r3, [pc, #336]	; (8004268 <HAL_ADC_PollForConversion+0x1f8>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 031f 	and.w	r3, r3, #31
 800411e:	2b00      	cmp	r3, #0
 8004120:	d010      	beq.n	8004144 <HAL_ADC_PollForConversion+0xd4>
 8004122:	e005      	b.n	8004130 <HAL_ADC_PollForConversion+0xc0>
 8004124:	4b51      	ldr	r3, [pc, #324]	; (800426c <HAL_ADC_PollForConversion+0x1fc>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f003 031f 	and.w	r3, r3, #31
 800412c:	2b00      	cmp	r3, #0
 800412e:	d009      	beq.n	8004144 <HAL_ADC_PollForConversion+0xd4>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004138:	d004      	beq.n	8004144 <HAL_ADC_PollForConversion+0xd4>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a4c      	ldr	r2, [pc, #304]	; (8004270 <HAL_ADC_PollForConversion+0x200>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d104      	bne.n	800414e <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	613b      	str	r3, [r7, #16]
 800414c:	e00f      	b.n	800416e <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004156:	d004      	beq.n	8004162 <HAL_ADC_PollForConversion+0xf2>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a41      	ldr	r2, [pc, #260]	; (8004264 <HAL_ADC_PollForConversion+0x1f4>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d102      	bne.n	8004168 <HAL_ADC_PollForConversion+0xf8>
 8004162:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004166:	e000      	b.n	800416a <HAL_ADC_PollForConversion+0xfa>
 8004168:	4b41      	ldr	r3, [pc, #260]	; (8004270 <HAL_ADC_PollForConversion+0x200>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800416e:	f7ff fc0b 	bl	8003988 <HAL_GetTick>
 8004172:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004174:	e021      	b.n	80041ba <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417c:	d01d      	beq.n	80041ba <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d007      	beq.n	8004194 <HAL_ADC_PollForConversion+0x124>
 8004184:	f7ff fc00 	bl	8003988 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	429a      	cmp	r2, r3
 8004192:	d212      	bcs.n	80041ba <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	4013      	ands	r3, r2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10b      	bne.n	80041ba <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	f043 0204 	orr.w	r2, r3, #4
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e04f      	b.n	800425a <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	4013      	ands	r3, r2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0d6      	beq.n	8004176 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d131      	bne.n	8004246 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d12c      	bne.n	8004246 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0308 	and.w	r3, r3, #8
 80041f6:	2b08      	cmp	r3, #8
 80041f8:	d125      	bne.n	8004246 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	2b00      	cmp	r3, #0
 8004206:	d112      	bne.n	800422e <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d112      	bne.n	8004246 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	f043 0201 	orr.w	r2, r3, #1
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	641a      	str	r2, [r3, #64]	; 0x40
 800422c:	e00b      	b.n	8004246 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	f043 0220 	orr.w	r2, r3, #32
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423e:	f043 0201 	orr.w	r2, r3, #1
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d103      	bne.n	8004258 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3718      	adds	r7, #24
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	50000100 	.word	0x50000100
 8004268:	50000300 	.word	0x50000300
 800426c:	50000700 	.word	0x50000700
 8004270:	50000400 	.word	0x50000400

08004274 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004282:	4618      	mov	r0, r3
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
	...

08004290 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004290:	b480      	push	{r7}
 8004292:	b09b      	sub	sp, #108	; 0x6c
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800429a:	2300      	movs	r3, #0
 800429c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d101      	bne.n	80042b2 <HAL_ADC_ConfigChannel+0x22>
 80042ae:	2302      	movs	r3, #2
 80042b0:	e2cb      	b.n	800484a <HAL_ADC_ConfigChannel+0x5ba>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f040 82af 	bne.w	8004828 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d81c      	bhi.n	800430c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	4613      	mov	r3, r2
 80042de:	005b      	lsls	r3, r3, #1
 80042e0:	4413      	add	r3, r2
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	461a      	mov	r2, r3
 80042e6:	231f      	movs	r3, #31
 80042e8:	4093      	lsls	r3, r2
 80042ea:	43db      	mvns	r3, r3
 80042ec:	4019      	ands	r1, r3
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	6818      	ldr	r0, [r3, #0]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	4613      	mov	r3, r2
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	4413      	add	r3, r2
 80042fc:	005b      	lsls	r3, r3, #1
 80042fe:	fa00 f203 	lsl.w	r2, r0, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	631a      	str	r2, [r3, #48]	; 0x30
 800430a:	e063      	b.n	80043d4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b09      	cmp	r3, #9
 8004312:	d81e      	bhi.n	8004352 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	4613      	mov	r3, r2
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	4413      	add	r3, r2
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	3b1e      	subs	r3, #30
 8004328:	221f      	movs	r2, #31
 800432a:	fa02 f303 	lsl.w	r3, r2, r3
 800432e:	43db      	mvns	r3, r3
 8004330:	4019      	ands	r1, r3
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	6818      	ldr	r0, [r3, #0]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	4613      	mov	r3, r2
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	4413      	add	r3, r2
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	3b1e      	subs	r3, #30
 8004344:	fa00 f203 	lsl.w	r2, r0, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	430a      	orrs	r2, r1
 800434e:	635a      	str	r2, [r3, #52]	; 0x34
 8004350:	e040      	b.n	80043d4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2b0e      	cmp	r3, #14
 8004358:	d81e      	bhi.n	8004398 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	4613      	mov	r3, r2
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	4413      	add	r3, r2
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	3b3c      	subs	r3, #60	; 0x3c
 800436e:	221f      	movs	r2, #31
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	43db      	mvns	r3, r3
 8004376:	4019      	ands	r1, r3
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	6818      	ldr	r0, [r3, #0]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	4613      	mov	r3, r2
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	4413      	add	r3, r2
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	3b3c      	subs	r3, #60	; 0x3c
 800438a:	fa00 f203 	lsl.w	r2, r0, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	430a      	orrs	r2, r1
 8004394:	639a      	str	r2, [r3, #56]	; 0x38
 8004396:	e01d      	b.n	80043d4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	4613      	mov	r3, r2
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	4413      	add	r3, r2
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	3b5a      	subs	r3, #90	; 0x5a
 80043ac:	221f      	movs	r2, #31
 80043ae:	fa02 f303 	lsl.w	r3, r2, r3
 80043b2:	43db      	mvns	r3, r3
 80043b4:	4019      	ands	r1, r3
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	6818      	ldr	r0, [r3, #0]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	4613      	mov	r3, r2
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	4413      	add	r3, r2
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	3b5a      	subs	r3, #90	; 0x5a
 80043c8:	fa00 f203 	lsl.w	r2, r0, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 030c 	and.w	r3, r3, #12
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f040 80e5 	bne.w	80045ae <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2b09      	cmp	r3, #9
 80043ea:	d91c      	bls.n	8004426 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6999      	ldr	r1, [r3, #24]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	4613      	mov	r3, r2
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	4413      	add	r3, r2
 80043fc:	3b1e      	subs	r3, #30
 80043fe:	2207      	movs	r2, #7
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	43db      	mvns	r3, r3
 8004406:	4019      	ands	r1, r3
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	6898      	ldr	r0, [r3, #8]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	4613      	mov	r3, r2
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	4413      	add	r3, r2
 8004416:	3b1e      	subs	r3, #30
 8004418:	fa00 f203 	lsl.w	r2, r0, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	430a      	orrs	r2, r1
 8004422:	619a      	str	r2, [r3, #24]
 8004424:	e019      	b.n	800445a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6959      	ldr	r1, [r3, #20]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	4613      	mov	r3, r2
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	4413      	add	r3, r2
 8004436:	2207      	movs	r2, #7
 8004438:	fa02 f303 	lsl.w	r3, r2, r3
 800443c:	43db      	mvns	r3, r3
 800443e:	4019      	ands	r1, r3
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	6898      	ldr	r0, [r3, #8]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	4613      	mov	r3, r2
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	4413      	add	r3, r2
 800444e:	fa00 f203 	lsl.w	r2, r0, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	695a      	ldr	r2, [r3, #20]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	08db      	lsrs	r3, r3, #3
 8004466:	f003 0303 	and.w	r3, r3, #3
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	3b01      	subs	r3, #1
 8004478:	2b03      	cmp	r3, #3
 800447a:	d84f      	bhi.n	800451c <HAL_ADC_ConfigChannel+0x28c>
 800447c:	a201      	add	r2, pc, #4	; (adr r2, 8004484 <HAL_ADC_ConfigChannel+0x1f4>)
 800447e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004482:	bf00      	nop
 8004484:	08004495 	.word	0x08004495
 8004488:	080044b7 	.word	0x080044b7
 800448c:	080044d9 	.word	0x080044d9
 8004490:	080044fb 	.word	0x080044fb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800449a:	4b9f      	ldr	r3, [pc, #636]	; (8004718 <HAL_ADC_ConfigChannel+0x488>)
 800449c:	4013      	ands	r3, r2
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	6812      	ldr	r2, [r2, #0]
 80044a2:	0691      	lsls	r1, r2, #26
 80044a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044a6:	430a      	orrs	r2, r1
 80044a8:	431a      	orrs	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80044b2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80044b4:	e07e      	b.n	80045b4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80044bc:	4b96      	ldr	r3, [pc, #600]	; (8004718 <HAL_ADC_ConfigChannel+0x488>)
 80044be:	4013      	ands	r3, r2
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	6812      	ldr	r2, [r2, #0]
 80044c4:	0691      	lsls	r1, r2, #26
 80044c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044c8:	430a      	orrs	r2, r1
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80044d4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80044d6:	e06d      	b.n	80045b4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80044de:	4b8e      	ldr	r3, [pc, #568]	; (8004718 <HAL_ADC_ConfigChannel+0x488>)
 80044e0:	4013      	ands	r3, r2
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	6812      	ldr	r2, [r2, #0]
 80044e6:	0691      	lsls	r1, r2, #26
 80044e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044ea:	430a      	orrs	r2, r1
 80044ec:	431a      	orrs	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80044f6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80044f8:	e05c      	b.n	80045b4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004500:	4b85      	ldr	r3, [pc, #532]	; (8004718 <HAL_ADC_ConfigChannel+0x488>)
 8004502:	4013      	ands	r3, r2
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	6812      	ldr	r2, [r2, #0]
 8004508:	0691      	lsls	r1, r2, #26
 800450a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800450c:	430a      	orrs	r2, r1
 800450e:	431a      	orrs	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004518:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800451a:	e04b      	b.n	80045b4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004522:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	069b      	lsls	r3, r3, #26
 800452c:	429a      	cmp	r2, r3
 800452e:	d107      	bne.n	8004540 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800453e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004546:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	069b      	lsls	r3, r3, #26
 8004550:	429a      	cmp	r2, r3
 8004552:	d107      	bne.n	8004564 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004562:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800456a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	069b      	lsls	r3, r3, #26
 8004574:	429a      	cmp	r2, r3
 8004576:	d107      	bne.n	8004588 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004586:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800458e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	069b      	lsls	r3, r3, #26
 8004598:	429a      	cmp	r2, r3
 800459a:	d10a      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80045aa:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80045ac:	e001      	b.n	80045b2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80045ae:	bf00      	nop
 80045b0:	e000      	b.n	80045b4 <HAL_ADC_ConfigChannel+0x324>
      break;
 80045b2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 0303 	and.w	r3, r3, #3
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d108      	bne.n	80045d4 <HAL_ADC_ConfigChannel+0x344>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d101      	bne.n	80045d4 <HAL_ADC_ConfigChannel+0x344>
 80045d0:	2301      	movs	r3, #1
 80045d2:	e000      	b.n	80045d6 <HAL_ADC_ConfigChannel+0x346>
 80045d4:	2300      	movs	r3, #0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f040 8131 	bne.w	800483e <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d00f      	beq.n	8004604 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2201      	movs	r2, #1
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	43da      	mvns	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	400a      	ands	r2, r1
 80045fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8004602:	e049      	b.n	8004698 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2201      	movs	r2, #1
 8004612:	409a      	lsls	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	430a      	orrs	r2, r1
 800461a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b09      	cmp	r3, #9
 8004624:	d91c      	bls.n	8004660 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6999      	ldr	r1, [r3, #24]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	4613      	mov	r3, r2
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	4413      	add	r3, r2
 8004636:	3b1b      	subs	r3, #27
 8004638:	2207      	movs	r2, #7
 800463a:	fa02 f303 	lsl.w	r3, r2, r3
 800463e:	43db      	mvns	r3, r3
 8004640:	4019      	ands	r1, r3
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	6898      	ldr	r0, [r3, #8]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	4613      	mov	r3, r2
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	4413      	add	r3, r2
 8004650:	3b1b      	subs	r3, #27
 8004652:	fa00 f203 	lsl.w	r2, r0, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	619a      	str	r2, [r3, #24]
 800465e:	e01b      	b.n	8004698 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6959      	ldr	r1, [r3, #20]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	4613      	mov	r3, r2
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	4413      	add	r3, r2
 8004672:	2207      	movs	r2, #7
 8004674:	fa02 f303 	lsl.w	r3, r2, r3
 8004678:	43db      	mvns	r3, r3
 800467a:	4019      	ands	r1, r3
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	6898      	ldr	r0, [r3, #8]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	4613      	mov	r3, r2
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	4413      	add	r3, r2
 800468c:	fa00 f203 	lsl.w	r2, r0, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046a0:	d004      	beq.n	80046ac <HAL_ADC_ConfigChannel+0x41c>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a1d      	ldr	r2, [pc, #116]	; (800471c <HAL_ADC_ConfigChannel+0x48c>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d101      	bne.n	80046b0 <HAL_ADC_ConfigChannel+0x420>
 80046ac:	4b1c      	ldr	r3, [pc, #112]	; (8004720 <HAL_ADC_ConfigChannel+0x490>)
 80046ae:	e000      	b.n	80046b2 <HAL_ADC_ConfigChannel+0x422>
 80046b0:	4b1c      	ldr	r3, [pc, #112]	; (8004724 <HAL_ADC_ConfigChannel+0x494>)
 80046b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b10      	cmp	r3, #16
 80046ba:	d105      	bne.n	80046c8 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80046bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d015      	beq.n	80046f4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80046cc:	2b11      	cmp	r3, #17
 80046ce:	d105      	bne.n	80046dc <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80046d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00b      	beq.n	80046f4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80046e0:	2b12      	cmp	r3, #18
 80046e2:	f040 80ac 	bne.w	800483e <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80046e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f040 80a5 	bne.w	800483e <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046fc:	d102      	bne.n	8004704 <HAL_ADC_ConfigChannel+0x474>
 80046fe:	4b07      	ldr	r3, [pc, #28]	; (800471c <HAL_ADC_ConfigChannel+0x48c>)
 8004700:	60fb      	str	r3, [r7, #12]
 8004702:	e023      	b.n	800474c <HAL_ADC_ConfigChannel+0x4bc>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a04      	ldr	r2, [pc, #16]	; (800471c <HAL_ADC_ConfigChannel+0x48c>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d10c      	bne.n	8004728 <HAL_ADC_ConfigChannel+0x498>
 800470e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	e01a      	b.n	800474c <HAL_ADC_ConfigChannel+0x4bc>
 8004716:	bf00      	nop
 8004718:	83fff000 	.word	0x83fff000
 800471c:	50000100 	.word	0x50000100
 8004720:	50000300 	.word	0x50000300
 8004724:	50000700 	.word	0x50000700
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a4a      	ldr	r2, [pc, #296]	; (8004858 <HAL_ADC_ConfigChannel+0x5c8>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d102      	bne.n	8004738 <HAL_ADC_ConfigChannel+0x4a8>
 8004732:	4b4a      	ldr	r3, [pc, #296]	; (800485c <HAL_ADC_ConfigChannel+0x5cc>)
 8004734:	60fb      	str	r3, [r7, #12]
 8004736:	e009      	b.n	800474c <HAL_ADC_ConfigChannel+0x4bc>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a47      	ldr	r2, [pc, #284]	; (800485c <HAL_ADC_ConfigChannel+0x5cc>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d102      	bne.n	8004748 <HAL_ADC_ConfigChannel+0x4b8>
 8004742:	4b45      	ldr	r3, [pc, #276]	; (8004858 <HAL_ADC_ConfigChannel+0x5c8>)
 8004744:	60fb      	str	r3, [r7, #12]
 8004746:	e001      	b.n	800474c <HAL_ADC_ConfigChannel+0x4bc>
 8004748:	2300      	movs	r3, #0
 800474a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	2b01      	cmp	r3, #1
 8004758:	d108      	bne.n	800476c <HAL_ADC_ConfigChannel+0x4dc>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b01      	cmp	r3, #1
 8004766:	d101      	bne.n	800476c <HAL_ADC_ConfigChannel+0x4dc>
 8004768:	2301      	movs	r3, #1
 800476a:	e000      	b.n	800476e <HAL_ADC_ConfigChannel+0x4de>
 800476c:	2300      	movs	r3, #0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d150      	bne.n	8004814 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004772:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004774:	2b00      	cmp	r3, #0
 8004776:	d010      	beq.n	800479a <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f003 0303 	and.w	r3, r3, #3
 8004780:	2b01      	cmp	r3, #1
 8004782:	d107      	bne.n	8004794 <HAL_ADC_ConfigChannel+0x504>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	2b01      	cmp	r3, #1
 800478e:	d101      	bne.n	8004794 <HAL_ADC_ConfigChannel+0x504>
 8004790:	2301      	movs	r3, #1
 8004792:	e000      	b.n	8004796 <HAL_ADC_ConfigChannel+0x506>
 8004794:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004796:	2b00      	cmp	r3, #0
 8004798:	d13c      	bne.n	8004814 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b10      	cmp	r3, #16
 80047a0:	d11d      	bne.n	80047de <HAL_ADC_ConfigChannel+0x54e>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047aa:	d118      	bne.n	80047de <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80047ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80047b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047b6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80047b8:	4b29      	ldr	r3, [pc, #164]	; (8004860 <HAL_ADC_ConfigChannel+0x5d0>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a29      	ldr	r2, [pc, #164]	; (8004864 <HAL_ADC_ConfigChannel+0x5d4>)
 80047be:	fba2 2303 	umull	r2, r3, r2, r3
 80047c2:	0c9a      	lsrs	r2, r3, #18
 80047c4:	4613      	mov	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80047ce:	e002      	b.n	80047d6 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	3b01      	subs	r3, #1
 80047d4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1f9      	bne.n	80047d0 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80047dc:	e02e      	b.n	800483c <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2b11      	cmp	r3, #17
 80047e4:	d10b      	bne.n	80047fe <HAL_ADC_ConfigChannel+0x56e>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047ee:	d106      	bne.n	80047fe <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80047f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80047f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047fa:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80047fc:	e01e      	b.n	800483c <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b12      	cmp	r3, #18
 8004804:	d11a      	bne.n	800483c <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8004806:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800480e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004810:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004812:	e013      	b.n	800483c <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004818:	f043 0220 	orr.w	r2, r3, #32
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004826:	e00a      	b.n	800483e <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482c:	f043 0220 	orr.w	r2, r3, #32
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800483a:	e000      	b.n	800483e <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800483c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004846:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800484a:	4618      	mov	r0, r3
 800484c:	376c      	adds	r7, #108	; 0x6c
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	50000400 	.word	0x50000400
 800485c:	50000500 	.word	0x50000500
 8004860:	20000010 	.word	0x20000010
 8004864:	431bde83 	.word	0x431bde83

08004868 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8004868:	b480      	push	{r7}
 800486a:	b099      	sub	sp, #100	; 0x64
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004880:	d102      	bne.n	8004888 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8004882:	4b6d      	ldr	r3, [pc, #436]	; (8004a38 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004884:	60bb      	str	r3, [r7, #8]
 8004886:	e01a      	b.n	80048be <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a6a      	ldr	r2, [pc, #424]	; (8004a38 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d103      	bne.n	800489a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8004892:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004896:	60bb      	str	r3, [r7, #8]
 8004898:	e011      	b.n	80048be <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a67      	ldr	r2, [pc, #412]	; (8004a3c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d102      	bne.n	80048aa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80048a4:	4b66      	ldr	r3, [pc, #408]	; (8004a40 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80048a6:	60bb      	str	r3, [r7, #8]
 80048a8:	e009      	b.n	80048be <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a64      	ldr	r2, [pc, #400]	; (8004a40 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d102      	bne.n	80048ba <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80048b4:	4b61      	ldr	r3, [pc, #388]	; (8004a3c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80048b6:	60bb      	str	r3, [r7, #8]
 80048b8:	e001      	b.n	80048be <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80048ba:	2300      	movs	r3, #0
 80048bc:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e0b0      	b.n	8004a2a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d101      	bne.n	80048d6 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80048d2:	2302      	movs	r3, #2
 80048d4:	e0a9      	b.n	8004a2a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f040 808d 	bne.w	8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 0304 	and.w	r3, r3, #4
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f040 8086 	bne.w	8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004904:	d004      	beq.n	8004910 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a4b      	ldr	r2, [pc, #300]	; (8004a38 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d101      	bne.n	8004914 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004910:	4b4c      	ldr	r3, [pc, #304]	; (8004a44 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8004912:	e000      	b.n	8004916 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004914:	4b4c      	ldr	r3, [pc, #304]	; (8004a48 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8004916:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d040      	beq.n	80049a2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004920:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	6859      	ldr	r1, [r3, #4]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004932:	035b      	lsls	r3, r3, #13
 8004934:	430b      	orrs	r3, r1
 8004936:	431a      	orrs	r2, r3
 8004938:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800493a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f003 0303 	and.w	r3, r3, #3
 8004946:	2b01      	cmp	r3, #1
 8004948:	d108      	bne.n	800495c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	2b01      	cmp	r3, #1
 8004956:	d101      	bne.n	800495c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004958:	2301      	movs	r3, #1
 800495a:	e000      	b.n	800495e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 800495c:	2300      	movs	r3, #0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d15c      	bne.n	8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 0303 	and.w	r3, r3, #3
 800496a:	2b01      	cmp	r3, #1
 800496c:	d107      	bne.n	800497e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b01      	cmp	r3, #1
 8004978:	d101      	bne.n	800497e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800497a:	2301      	movs	r3, #1
 800497c:	e000      	b.n	8004980 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800497e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004980:	2b00      	cmp	r3, #0
 8004982:	d14b      	bne.n	8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004984:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800498c:	f023 030f 	bic.w	r3, r3, #15
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	6811      	ldr	r1, [r2, #0]
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	6892      	ldr	r2, [r2, #8]
 8004998:	430a      	orrs	r2, r1
 800499a:	431a      	orrs	r2, r3
 800499c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800499e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80049a0:	e03c      	b.n	8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80049a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049ac:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f003 0303 	and.w	r3, r3, #3
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d108      	bne.n	80049ce <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d101      	bne.n	80049ce <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80049ca:	2301      	movs	r3, #1
 80049cc:	e000      	b.n	80049d0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80049ce:	2300      	movs	r3, #0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d123      	bne.n	8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f003 0303 	and.w	r3, r3, #3
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d107      	bne.n	80049f0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d101      	bne.n	80049f0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80049ec:	2301      	movs	r3, #1
 80049ee:	e000      	b.n	80049f2 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80049f0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d112      	bne.n	8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80049f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80049fe:	f023 030f 	bic.w	r3, r3, #15
 8004a02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a04:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a06:	e009      	b.n	8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0c:	f043 0220 	orr.w	r2, r3, #32
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004a1a:	e000      	b.n	8004a1e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a1c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004a26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3764      	adds	r7, #100	; 0x64
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	50000100 	.word	0x50000100
 8004a3c:	50000400 	.word	0x50000400
 8004a40:	50000500 	.word	0x50000500
 8004a44:	50000300 	.word	0x50000300
 8004a48:	50000700 	.word	0x50000700

08004a4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a54:	2300      	movs	r3, #0
 8004a56:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d108      	bne.n	8004a78 <ADC_Enable+0x2c>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d101      	bne.n	8004a78 <ADC_Enable+0x2c>
 8004a74:	2301      	movs	r3, #1
 8004a76:	e000      	b.n	8004a7a <ADC_Enable+0x2e>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d143      	bne.n	8004b06 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	4b22      	ldr	r3, [pc, #136]	; (8004b10 <ADC_Enable+0xc4>)
 8004a86:	4013      	ands	r3, r2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00d      	beq.n	8004aa8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a90:	f043 0210 	orr.w	r2, r3, #16
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9c:	f043 0201 	orr.w	r2, r3, #1
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e02f      	b.n	8004b08 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689a      	ldr	r2, [r3, #8]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f042 0201 	orr.w	r2, r2, #1
 8004ab6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8004ab8:	f7fe ff66 	bl	8003988 <HAL_GetTick>
 8004abc:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004abe:	e01b      	b.n	8004af8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004ac0:	f7fe ff62 	bl	8003988 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d914      	bls.n	8004af8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d00d      	beq.n	8004af8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae0:	f043 0210 	orr.w	r2, r3, #16
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aec:	f043 0201 	orr.w	r2, r3, #1
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e007      	b.n	8004b08 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d1dc      	bne.n	8004ac0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	8000003f 	.word	0x8000003f

08004b14 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d108      	bne.n	8004b40 <ADC_Disable+0x2c>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d101      	bne.n	8004b40 <ADC_Disable+0x2c>
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e000      	b.n	8004b42 <ADC_Disable+0x2e>
 8004b40:	2300      	movs	r3, #0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d047      	beq.n	8004bd6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f003 030d 	and.w	r3, r3, #13
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d10f      	bne.n	8004b74 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689a      	ldr	r2, [r3, #8]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f042 0202 	orr.w	r2, r2, #2
 8004b62:	609a      	str	r2, [r3, #8]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2203      	movs	r2, #3
 8004b6a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004b6c:	f7fe ff0c 	bl	8003988 <HAL_GetTick>
 8004b70:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004b72:	e029      	b.n	8004bc8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b78:	f043 0210 	orr.w	r2, r3, #16
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b84:	f043 0201 	orr.w	r2, r3, #1
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e023      	b.n	8004bd8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004b90:	f7fe fefa 	bl	8003988 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d914      	bls.n	8004bc8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d10d      	bne.n	8004bc8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb0:	f043 0210 	orr.w	r2, r3, #16
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bbc:	f043 0201 	orr.w	r2, r3, #1
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e007      	b.n	8004bd8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d0dc      	beq.n	8004b90 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8004bea:	2300      	movs	r3, #0
 8004bec:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f003 030c 	and.w	r3, r3, #12
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 809a 	beq.w	8004d3a <ADC_ConversionStop+0x15a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c14:	d12a      	bne.n	8004c6c <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d126      	bne.n	8004c6c <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d122      	bne.n	8004c6c <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8004c26:	230c      	movs	r3, #12
 8004c28:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8004c2a:	e014      	b.n	8004c56 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	4a45      	ldr	r2, [pc, #276]	; (8004d44 <ADC_ConversionStop+0x164>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d90d      	bls.n	8004c50 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	f043 0210 	orr.w	r2, r3, #16
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c44:	f043 0201 	orr.w	r2, r3, #1
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e075      	b.n	8004d3c <ADC_ConversionStop+0x15c>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	3301      	adds	r3, #1
 8004c54:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c60:	2b40      	cmp	r3, #64	; 0x40
 8004c62:	d1e3      	bne.n	8004c2c <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2240      	movs	r2, #64	; 0x40
 8004c6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	2b60      	cmp	r3, #96	; 0x60
 8004c70:	d015      	beq.n	8004c9e <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f003 0304 	and.w	r3, r3, #4
 8004c7c:	2b04      	cmp	r3, #4
 8004c7e:	d10e      	bne.n	8004c9e <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d107      	bne.n	8004c9e <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	689a      	ldr	r2, [r3, #8]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f042 0210 	orr.w	r2, r2, #16
 8004c9c:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	2b0c      	cmp	r3, #12
 8004ca2:	d015      	beq.n	8004cd0 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 0308 	and.w	r3, r3, #8
 8004cae:	2b08      	cmp	r3, #8
 8004cb0:	d10e      	bne.n	8004cd0 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d107      	bne.n	8004cd0 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689a      	ldr	r2, [r3, #8]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 0220 	orr.w	r2, r2, #32
 8004cce:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	2b60      	cmp	r3, #96	; 0x60
 8004cd4:	d004      	beq.n	8004ce0 <ADC_ConversionStop+0x100>
 8004cd6:	2b6c      	cmp	r3, #108	; 0x6c
 8004cd8:	d105      	bne.n	8004ce6 <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004cda:	230c      	movs	r3, #12
 8004cdc:	617b      	str	r3, [r7, #20]
        break;
 8004cde:	e005      	b.n	8004cec <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004ce0:	2308      	movs	r3, #8
 8004ce2:	617b      	str	r3, [r7, #20]
        break;
 8004ce4:	e002      	b.n	8004cec <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004ce6:	2304      	movs	r3, #4
 8004ce8:	617b      	str	r3, [r7, #20]
        break;
 8004cea:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004cec:	f7fe fe4c 	bl	8003988 <HAL_GetTick>
 8004cf0:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004cf2:	e01b      	b.n	8004d2c <ADC_ConversionStop+0x14c>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004cf4:	f7fe fe48 	bl	8003988 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b0b      	cmp	r3, #11
 8004d00:	d914      	bls.n	8004d2c <ADC_ConversionStop+0x14c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	689a      	ldr	r2, [r3, #8]
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00d      	beq.n	8004d2c <ADC_ConversionStop+0x14c>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d14:	f043 0210 	orr.w	r2, r3, #16
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d20:	f043 0201 	orr.w	r2, r3, #1
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e007      	b.n	8004d3c <ADC_ConversionStop+0x15c>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689a      	ldr	r2, [r3, #8]
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	4013      	ands	r3, r2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1dc      	bne.n	8004cf4 <ADC_ConversionStop+0x114>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3718      	adds	r7, #24
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	000993ff 	.word	0x000993ff

08004d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f003 0307 	and.w	r3, r3, #7
 8004d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d58:	4b0c      	ldr	r3, [pc, #48]	; (8004d8c <__NVIC_SetPriorityGrouping+0x44>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d64:	4013      	ands	r3, r2
 8004d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d7a:	4a04      	ldr	r2, [pc, #16]	; (8004d8c <__NVIC_SetPriorityGrouping+0x44>)
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	60d3      	str	r3, [r2, #12]
}
 8004d80:	bf00      	nop
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	e000ed00 	.word	0xe000ed00

08004d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d94:	4b04      	ldr	r3, [pc, #16]	; (8004da8 <__NVIC_GetPriorityGrouping+0x18>)
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	0a1b      	lsrs	r3, r3, #8
 8004d9a:	f003 0307 	and.w	r3, r3, #7
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	e000ed00 	.word	0xe000ed00

08004dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	4603      	mov	r3, r0
 8004db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	db0b      	blt.n	8004dd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dbe:	79fb      	ldrb	r3, [r7, #7]
 8004dc0:	f003 021f 	and.w	r2, r3, #31
 8004dc4:	4907      	ldr	r1, [pc, #28]	; (8004de4 <__NVIC_EnableIRQ+0x38>)
 8004dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dca:	095b      	lsrs	r3, r3, #5
 8004dcc:	2001      	movs	r0, #1
 8004dce:	fa00 f202 	lsl.w	r2, r0, r2
 8004dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	e000e100 	.word	0xe000e100

08004de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	4603      	mov	r3, r0
 8004df0:	6039      	str	r1, [r7, #0]
 8004df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	db0a      	blt.n	8004e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	490c      	ldr	r1, [pc, #48]	; (8004e34 <__NVIC_SetPriority+0x4c>)
 8004e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e06:	0112      	lsls	r2, r2, #4
 8004e08:	b2d2      	uxtb	r2, r2
 8004e0a:	440b      	add	r3, r1
 8004e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e10:	e00a      	b.n	8004e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	4908      	ldr	r1, [pc, #32]	; (8004e38 <__NVIC_SetPriority+0x50>)
 8004e18:	79fb      	ldrb	r3, [r7, #7]
 8004e1a:	f003 030f 	and.w	r3, r3, #15
 8004e1e:	3b04      	subs	r3, #4
 8004e20:	0112      	lsls	r2, r2, #4
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	440b      	add	r3, r1
 8004e26:	761a      	strb	r2, [r3, #24]
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	e000e100 	.word	0xe000e100
 8004e38:	e000ed00 	.word	0xe000ed00

08004e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b089      	sub	sp, #36	; 0x24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f003 0307 	and.w	r3, r3, #7
 8004e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	f1c3 0307 	rsb	r3, r3, #7
 8004e56:	2b04      	cmp	r3, #4
 8004e58:	bf28      	it	cs
 8004e5a:	2304      	movcs	r3, #4
 8004e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	3304      	adds	r3, #4
 8004e62:	2b06      	cmp	r3, #6
 8004e64:	d902      	bls.n	8004e6c <NVIC_EncodePriority+0x30>
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	3b03      	subs	r3, #3
 8004e6a:	e000      	b.n	8004e6e <NVIC_EncodePriority+0x32>
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e70:	f04f 32ff 	mov.w	r2, #4294967295
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7a:	43da      	mvns	r2, r3
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	401a      	ands	r2, r3
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e84:	f04f 31ff 	mov.w	r1, #4294967295
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e8e:	43d9      	mvns	r1, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e94:	4313      	orrs	r3, r2
         );
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3724      	adds	r7, #36	; 0x24
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
	...

08004ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004eb4:	d301      	bcc.n	8004eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e00f      	b.n	8004eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004eba:	4a0a      	ldr	r2, [pc, #40]	; (8004ee4 <SysTick_Config+0x40>)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ec2:	210f      	movs	r1, #15
 8004ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec8:	f7ff ff8e 	bl	8004de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ecc:	4b05      	ldr	r3, [pc, #20]	; (8004ee4 <SysTick_Config+0x40>)
 8004ece:	2200      	movs	r2, #0
 8004ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ed2:	4b04      	ldr	r3, [pc, #16]	; (8004ee4 <SysTick_Config+0x40>)
 8004ed4:	2207      	movs	r2, #7
 8004ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	e000e010 	.word	0xe000e010

08004ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f7ff ff29 	bl	8004d48 <__NVIC_SetPriorityGrouping>
}
 8004ef6:	bf00      	nop
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b086      	sub	sp, #24
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	4603      	mov	r3, r0
 8004f06:	60b9      	str	r1, [r7, #8]
 8004f08:	607a      	str	r2, [r7, #4]
 8004f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f10:	f7ff ff3e 	bl	8004d90 <__NVIC_GetPriorityGrouping>
 8004f14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	68b9      	ldr	r1, [r7, #8]
 8004f1a:	6978      	ldr	r0, [r7, #20]
 8004f1c:	f7ff ff8e 	bl	8004e3c <NVIC_EncodePriority>
 8004f20:	4602      	mov	r2, r0
 8004f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f26:	4611      	mov	r1, r2
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7ff ff5d 	bl	8004de8 <__NVIC_SetPriority>
}
 8004f2e:	bf00      	nop
 8004f30:	3718      	adds	r7, #24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b082      	sub	sp, #8
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7ff ff31 	bl	8004dac <__NVIC_EnableIRQ>
}
 8004f4a:	bf00      	nop
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b082      	sub	sp, #8
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f7ff ffa2 	bl	8004ea4 <SysTick_Config>
 8004f60:	4603      	mov	r3, r0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b082      	sub	sp, #8
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d101      	bne.n	8004f7c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e014      	b.n	8004fa6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	791b      	ldrb	r3, [r3, #4]
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d105      	bne.n	8004f92 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f7fd ff65 	bl	8002e5c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2202      	movs	r2, #2
 8004f96:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3708      	adds	r7, #8
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected  
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b084      	sub	sp, #16
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
 8004fb6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	73fb      	strb	r3, [r7, #15]
    
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Disable the selected DAC channel DMA request */
    hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6819      	ldr	r1, [r3, #0]
 8004fc2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fcc:	43da      	mvns	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	400a      	ands	r2, r1
 8004fd4:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	6819      	ldr	r1, [r3, #0]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe4:	43da      	mvns	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	400a      	ands	r2, r1
 8004fec:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA channel */
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d10f      	bne.n	8005014 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);   
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f000 fa72 	bl	80054e2 <HAL_DMA_Abort>
 8004ffe:	4603      	mov	r3, r0
 8005000:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	e00e      	b.n	8005032 <HAL_DAC_Stop_DMA+0x84>
  /* For all products including channel 2U */
  /* DAC channel 2 is available on top of DAC channel 1U */
  else /* Channel2 is used */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);   
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	4618      	mov	r0, r3
 800501a:	f000 fa62 	bl	80054e2 <HAL_DMA_Abort>
 800501e:	4603      	mov	r3, r0
 8005020:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005030:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */
    
  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8005032:	7bfb      	ldrb	r3, [r7, #15]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d003      	beq.n	8005040 <HAL_DAC_Stop_DMA+0x92>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2204      	movs	r2, #4
 800503c:	711a      	strb	r2, [r3, #4]
 800503e:	e002      	b.n	8005046 <HAL_DAC_Stop_DMA+0x98>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	711a      	strb	r2, [r3, #4]
  }
  
  /* Return function status */
  return status;
 8005046:	7bfb      	ldrb	r3, [r7, #15]
}
 8005048:	4618      	mov	r0, r3
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
 8005098:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 800509a:	2300      	movs	r3, #0
 800509c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	795b      	ldrb	r3, [r3, #5]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d101      	bne.n	80050aa <HAL_DAC_Start_DMA+0x1e>
 80050a6:	2302      	movs	r3, #2
 80050a8:	e08e      	b.n	80051c8 <HAL_DAC_Start_DMA+0x13c>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2201      	movs	r2, #1
 80050ae:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2202      	movs	r2, #2
 80050b4:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d12a      	bne.n	8005112 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	4a43      	ldr	r2, [pc, #268]	; (80051d0 <HAL_DAC_Start_DMA+0x144>)
 80050c2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	4a42      	ldr	r2, [pc, #264]	; (80051d4 <HAL_DAC_Start_DMA+0x148>)
 80050ca:	62da      	str	r2, [r3, #44]	; 0x2c
      
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	4a41      	ldr	r2, [pc, #260]	; (80051d8 <HAL_DAC_Start_DMA+0x14c>)
 80050d2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050e2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1U */
    switch(Alignment)
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	2b04      	cmp	r3, #4
 80050e8:	d009      	beq.n	80050fe <HAL_DAC_Start_DMA+0x72>
 80050ea:	2b08      	cmp	r3, #8
 80050ec:	d00c      	beq.n	8005108 <HAL_DAC_Start_DMA+0x7c>
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d000      	beq.n	80050f4 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80050f2:	e039      	b.n	8005168 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	3308      	adds	r3, #8
 80050fa:	617b      	str	r3, [r7, #20]
        break;
 80050fc:	e034      	b.n	8005168 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	330c      	adds	r3, #12
 8005104:	617b      	str	r3, [r7, #20]
        break;
 8005106:	e02f      	b.n	8005168 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	3310      	adds	r3, #16
 800510e:	617b      	str	r3, [r7, #20]
        break;
 8005110:	e02a      	b.n	8005168 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	4a31      	ldr	r2, [pc, #196]	; (80051dc <HAL_DAC_Start_DMA+0x150>)
 8005118:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	4a30      	ldr	r2, [pc, #192]	; (80051e0 <HAL_DAC_Start_DMA+0x154>)
 8005120:	62da      	str	r2, [r3, #44]	; 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	4a2f      	ldr	r2, [pc, #188]	; (80051e4 <HAL_DAC_Start_DMA+0x158>)
 8005128:	631a      	str	r2, [r3, #48]	; 0x30
 
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005138:	601a      	str	r2, [r3, #0]
   
    /* Case of use of channel 2U */
    switch(Alignment)
 800513a:	6a3b      	ldr	r3, [r7, #32]
 800513c:	2b04      	cmp	r3, #4
 800513e:	d009      	beq.n	8005154 <HAL_DAC_Start_DMA+0xc8>
 8005140:	2b08      	cmp	r3, #8
 8005142:	d00c      	beq.n	800515e <HAL_DAC_Start_DMA+0xd2>
 8005144:	2b00      	cmp	r3, #0
 8005146:	d000      	beq.n	800514a <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8005148:	e00e      	b.n	8005168 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	3314      	adds	r3, #20
 8005150:	617b      	str	r3, [r7, #20]
        break;
 8005152:	e009      	b.n	8005168 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	3318      	adds	r3, #24
 800515a:	617b      	str	r3, [r7, #20]
        break;
 800515c:	e004      	b.n	8005168 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	331c      	adds	r3, #28
 8005164:	617b      	str	r3, [r7, #20]
        break;
 8005166:	bf00      	nop
    }
  }
 
  /* Enable the DMA Channel */
  if(Channel == DAC_CHANNEL_1)
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10f      	bne.n	800518e <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800517c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6898      	ldr	r0, [r3, #8]
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	f000 f94c 	bl	8005424 <HAL_DMA_Start_IT>
 800518c:	e00e      	b.n	80051ac <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800519c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	68d8      	ldr	r0, [r3, #12]
 80051a2:	6879      	ldr	r1, [r7, #4]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	f000 f93c 	bl	8005424 <HAL_DMA_Start_IT>
  }
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6819      	ldr	r1, [r3, #0]
 80051b8:	2201      	movs	r2, #1
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	409a      	lsls	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3718      	adds	r7, #24
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	080052bf 	.word	0x080052bf
 80051d4:	080052e1 	.word	0x080052e1
 80051d8:	080052fd 	.word	0x080052fd
 80051dc:	0800532b 	.word	0x0800532b
 80051e0:	0800534d 	.word	0x0800534d
 80051e4:	08005369 	.word	0x08005369

080051e8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80051f4:	2300      	movs	r3, #0
 80051f6:	617b      	str	r3, [r7, #20]
 80051f8:	2300      	movs	r3, #0
 80051fa:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	795b      	ldrb	r3, [r3, #5]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d101      	bne.n	8005208 <HAL_DAC_ConfigChannel+0x20>
 8005204:	2302      	movs	r3, #2
 8005206:	e036      	b.n	8005276 <HAL_DAC_ConfigChannel+0x8e>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2201      	movs	r2, #1
 800520c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2202      	movs	r2, #2
 8005212:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800521c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	fa02 f303 	lsl.w	r3, r2, r3
 8005226:	43db      	mvns	r3, r3
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	4013      	ands	r3, r2
 800522c:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	4313      	orrs	r3, r2
 8005238:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	fa02 f303 	lsl.w	r3, r2, r3
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	4313      	orrs	r3, r2
 8005246:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6819      	ldr	r1, [r3, #0]
 8005256:	22c0      	movs	r2, #192	; 0xc0
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	fa02 f303 	lsl.w	r3, r2, r3
 800525e:	43da      	mvns	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	400a      	ands	r2, r1
 8005266:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2201      	movs	r2, #1
 800526c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	371c      	adds	r7, #28
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8005282:	b480      	push	{r7}
 8005284:	b083      	sub	sp, #12
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800528a:	bf00      	nop
 800528c:	370c      	adds	r7, #12
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8005296:	b480      	push	{r7}
 8005298:	b083      	sub	sp, #12
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800529e:	bf00      	nop
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b083      	sub	sp, #12
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80052b2:	bf00      	nop
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b084      	sub	sp, #16
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ca:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f7ff febf 	bl	8005050 <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2201      	movs	r2, #1
 80052d6:	711a      	strb	r2, [r3, #4]
}
 80052d8:	bf00      	nop
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ec:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f7ff feb8 	bl	8005064 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 80052f4:	bf00      	nop
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	f043 0204 	orr.w	r2, r3, #4
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f7ff feae 	bl	8005078 <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2201      	movs	r2, #1
 8005320:	711a      	strb	r2, [r3, #4]
}
 8005322:	bf00      	nop
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b084      	sub	sp, #16
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f7ff ffa2 	bl	8005282 <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2201      	movs	r2, #1
 8005342:	711a      	strb	r2, [r3, #4]
}
 8005344:	bf00      	nop
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f7ff ff9b 	bl	8005296 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 8005360:	bf00      	nop
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005374:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	f043 0204 	orr.w	r2, r3, #4
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f7ff ff91 	bl	80052aa <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2201      	movs	r2, #1
 800538c:	711a      	strb	r2, [r3, #4]
}
 800538e:	bf00      	nop
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8005396:	b580      	push	{r7, lr}
 8005398:	b084      	sub	sp, #16
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800539e:	2300      	movs	r3, #0
 80053a0:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d101      	bne.n	80053ac <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e037      	b.n	800541c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2202      	movs	r2, #2
 80053b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80053c2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80053c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80053d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f9b8 	bl	8005774 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}  
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
 8005430:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f893 3020 	ldrb.w	r3, [r3, #32]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d101      	bne.n	8005444 <HAL_DMA_Start_IT+0x20>
 8005440:	2302      	movs	r3, #2
 8005442:	e04a      	b.n	80054da <HAL_DMA_Start_IT+0xb6>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005452:	2b01      	cmp	r3, #1
 8005454:	d13a      	bne.n	80054cc <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2202      	movs	r2, #2
 800545a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f022 0201 	bic.w	r2, r2, #1
 8005472:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	68b9      	ldr	r1, [r7, #8]
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f000 f94b 	bl	8005716 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005484:	2b00      	cmp	r3, #0
 8005486:	d008      	beq.n	800549a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f042 020e 	orr.w	r2, r2, #14
 8005496:	601a      	str	r2, [r3, #0]
 8005498:	e00f      	b.n	80054ba <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f042 020a 	orr.w	r2, r2, #10
 80054a8:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 0204 	bic.w	r2, r2, #4
 80054b8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f042 0201 	orr.w	r2, r2, #1
 80054c8:	601a      	str	r2, [r3, #0]
 80054ca:	e005      	b.n	80054d8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80054d4:	2302      	movs	r3, #2
 80054d6:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80054d8:	7dfb      	ldrb	r3, [r7, #23]
} 
 80054da:	4618      	mov	r0, r3
 80054dc:	3718      	adds	r7, #24
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b083      	sub	sp, #12
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d008      	beq.n	8005506 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2204      	movs	r2, #4
 80054f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e020      	b.n	8005548 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 020e 	bic.w	r2, r2, #14
 8005514:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 0201 	bic.w	r2, r2, #1
 8005524:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800552e:	2101      	movs	r1, #1
 8005530:	fa01 f202 	lsl.w	r2, r1, r2
 8005534:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800555c:	2300      	movs	r3, #0
 800555e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005566:	2b02      	cmp	r3, #2
 8005568:	d005      	beq.n	8005576 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2204      	movs	r2, #4
 800556e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	73fb      	strb	r3, [r7, #15]
 8005574:	e027      	b.n	80055c6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 020e 	bic.w	r2, r2, #14
 8005584:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f022 0201 	bic.w	r2, r2, #1
 8005594:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800559e:	2101      	movs	r1, #1
 80055a0:	fa01 f202 	lsl.w	r2, r1, r2
 80055a4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d003      	beq.n	80055c6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	4798      	blx	r3
    } 
  }
  return status;
 80055c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ec:	2204      	movs	r2, #4
 80055ee:	409a      	lsls	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4013      	ands	r3, r2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d024      	beq.n	8005642 <HAL_DMA_IRQHandler+0x72>
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	f003 0304 	and.w	r3, r3, #4
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d01f      	beq.n	8005642 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0320 	and.w	r3, r3, #32
 800560c:	2b00      	cmp	r3, #0
 800560e:	d107      	bne.n	8005620 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f022 0204 	bic.w	r2, r2, #4
 800561e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005628:	2104      	movs	r1, #4
 800562a:	fa01 f202 	lsl.w	r2, r1, r2
 800562e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005634:	2b00      	cmp	r3, #0
 8005636:	d06a      	beq.n	800570e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8005640:	e065      	b.n	800570e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005646:	2202      	movs	r2, #2
 8005648:	409a      	lsls	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	4013      	ands	r3, r2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d02c      	beq.n	80056ac <HAL_DMA_IRQHandler+0xdc>
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	f003 0302 	and.w	r3, r3, #2
 8005658:	2b00      	cmp	r3, #0
 800565a:	d027      	beq.n	80056ac <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0320 	and.w	r3, r3, #32
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10b      	bne.n	8005682 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f022 020a 	bic.w	r2, r2, #10
 8005678:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800568a:	2102      	movs	r1, #2
 800568c:	fa01 f202 	lsl.w	r2, r1, r2
 8005690:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d035      	beq.n	800570e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80056aa:	e030      	b.n	800570e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b0:	2208      	movs	r2, #8
 80056b2:	409a      	lsls	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	4013      	ands	r3, r2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d028      	beq.n	800570e <HAL_DMA_IRQHandler+0x13e>
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f003 0308 	and.w	r3, r3, #8
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d023      	beq.n	800570e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 020e 	bic.w	r2, r2, #14
 80056d4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056de:	2101      	movs	r1, #1
 80056e0:	fa01 f202 	lsl.w	r2, r1, r2
 80056e4:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005700:	2b00      	cmp	r3, #0
 8005702:	d004      	beq.n	800570e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	4798      	blx	r3
    }
  }
}  
 800570c:	e7ff      	b.n	800570e <HAL_DMA_IRQHandler+0x13e>
 800570e:	bf00      	nop
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005716:	b480      	push	{r7}
 8005718:	b085      	sub	sp, #20
 800571a:	af00      	add	r7, sp, #0
 800571c:	60f8      	str	r0, [r7, #12]
 800571e:	60b9      	str	r1, [r7, #8]
 8005720:	607a      	str	r2, [r7, #4]
 8005722:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800572c:	2101      	movs	r1, #1
 800572e:	fa01 f202 	lsl.w	r2, r1, r2
 8005732:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	683a      	ldr	r2, [r7, #0]
 800573a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	2b10      	cmp	r3, #16
 8005742:	d108      	bne.n	8005756 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005754:	e007      	b.n	8005766 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	60da      	str	r2, [r3, #12]
}
 8005766:	bf00      	nop
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
	...

08005774 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	461a      	mov	r2, r3
 8005782:	4b14      	ldr	r3, [pc, #80]	; (80057d4 <DMA_CalcBaseAndBitshift+0x60>)
 8005784:	429a      	cmp	r2, r3
 8005786:	d80f      	bhi.n	80057a8 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	461a      	mov	r2, r3
 800578e:	4b12      	ldr	r3, [pc, #72]	; (80057d8 <DMA_CalcBaseAndBitshift+0x64>)
 8005790:	4413      	add	r3, r2
 8005792:	4a12      	ldr	r2, [pc, #72]	; (80057dc <DMA_CalcBaseAndBitshift+0x68>)
 8005794:	fba2 2303 	umull	r2, r3, r2, r3
 8005798:	091b      	lsrs	r3, r3, #4
 800579a:	009a      	lsls	r2, r3, #2
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a0f      	ldr	r2, [pc, #60]	; (80057e0 <DMA_CalcBaseAndBitshift+0x6c>)
 80057a4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80057a6:	e00e      	b.n	80057c6 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	461a      	mov	r2, r3
 80057ae:	4b0d      	ldr	r3, [pc, #52]	; (80057e4 <DMA_CalcBaseAndBitshift+0x70>)
 80057b0:	4413      	add	r3, r2
 80057b2:	4a0a      	ldr	r2, [pc, #40]	; (80057dc <DMA_CalcBaseAndBitshift+0x68>)
 80057b4:	fba2 2303 	umull	r2, r3, r2, r3
 80057b8:	091b      	lsrs	r3, r3, #4
 80057ba:	009a      	lsls	r2, r3, #2
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a09      	ldr	r2, [pc, #36]	; (80057e8 <DMA_CalcBaseAndBitshift+0x74>)
 80057c4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80057c6:	bf00      	nop
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	40020407 	.word	0x40020407
 80057d8:	bffdfff8 	.word	0xbffdfff8
 80057dc:	cccccccd 	.word	0xcccccccd
 80057e0:	40020000 	.word	0x40020000
 80057e4:	bffdfbf8 	.word	0xbffdfbf8
 80057e8:	40020400 	.word	0x40020400

080057ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80057f6:	2300      	movs	r3, #0
 80057f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057fa:	e160      	b.n	8005abe <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	2101      	movs	r1, #1
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	fa01 f303 	lsl.w	r3, r1, r3
 8005808:	4013      	ands	r3, r2
 800580a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2b00      	cmp	r3, #0
 8005810:	f000 8152 	beq.w	8005ab8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f003 0303 	and.w	r3, r3, #3
 800581c:	2b01      	cmp	r3, #1
 800581e:	d005      	beq.n	800582c <HAL_GPIO_Init+0x40>
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f003 0303 	and.w	r3, r3, #3
 8005828:	2b02      	cmp	r3, #2
 800582a:	d130      	bne.n	800588e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	005b      	lsls	r3, r3, #1
 8005836:	2203      	movs	r2, #3
 8005838:	fa02 f303 	lsl.w	r3, r2, r3
 800583c:	43db      	mvns	r3, r3
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	4013      	ands	r3, r2
 8005842:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	68da      	ldr	r2, [r3, #12]
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	005b      	lsls	r3, r3, #1
 800584c:	fa02 f303 	lsl.w	r3, r2, r3
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	4313      	orrs	r3, r2
 8005854:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005862:	2201      	movs	r2, #1
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	fa02 f303 	lsl.w	r3, r2, r3
 800586a:	43db      	mvns	r3, r3
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	4013      	ands	r3, r2
 8005870:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	091b      	lsrs	r3, r3, #4
 8005878:	f003 0201 	and.w	r2, r3, #1
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	fa02 f303 	lsl.w	r3, r2, r3
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	4313      	orrs	r3, r2
 8005886:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f003 0303 	and.w	r3, r3, #3
 8005896:	2b03      	cmp	r3, #3
 8005898:	d017      	beq.n	80058ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	2203      	movs	r2, #3
 80058a6:	fa02 f303 	lsl.w	r3, r2, r3
 80058aa:	43db      	mvns	r3, r3
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	4013      	ands	r3, r2
 80058b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	689a      	ldr	r2, [r3, #8]
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	005b      	lsls	r3, r3, #1
 80058ba:	fa02 f303 	lsl.w	r3, r2, r3
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f003 0303 	and.w	r3, r3, #3
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d123      	bne.n	800591e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	08da      	lsrs	r2, r3, #3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	3208      	adds	r2, #8
 80058de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f003 0307 	and.w	r3, r3, #7
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	220f      	movs	r2, #15
 80058ee:	fa02 f303 	lsl.w	r3, r2, r3
 80058f2:	43db      	mvns	r3, r3
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	4013      	ands	r3, r2
 80058f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	691a      	ldr	r2, [r3, #16]
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f003 0307 	and.w	r3, r3, #7
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	fa02 f303 	lsl.w	r3, r2, r3
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	4313      	orrs	r3, r2
 800590e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	08da      	lsrs	r2, r3, #3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	3208      	adds	r2, #8
 8005918:	6939      	ldr	r1, [r7, #16]
 800591a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	005b      	lsls	r3, r3, #1
 8005928:	2203      	movs	r2, #3
 800592a:	fa02 f303 	lsl.w	r3, r2, r3
 800592e:	43db      	mvns	r3, r3
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	4013      	ands	r3, r2
 8005934:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f003 0203 	and.w	r2, r3, #3
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	005b      	lsls	r3, r3, #1
 8005942:	fa02 f303 	lsl.w	r3, r2, r3
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	4313      	orrs	r3, r2
 800594a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800595a:	2b00      	cmp	r3, #0
 800595c:	f000 80ac 	beq.w	8005ab8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005960:	4b5e      	ldr	r3, [pc, #376]	; (8005adc <HAL_GPIO_Init+0x2f0>)
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	4a5d      	ldr	r2, [pc, #372]	; (8005adc <HAL_GPIO_Init+0x2f0>)
 8005966:	f043 0301 	orr.w	r3, r3, #1
 800596a:	6193      	str	r3, [r2, #24]
 800596c:	4b5b      	ldr	r3, [pc, #364]	; (8005adc <HAL_GPIO_Init+0x2f0>)
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	f003 0301 	and.w	r3, r3, #1
 8005974:	60bb      	str	r3, [r7, #8]
 8005976:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005978:	4a59      	ldr	r2, [pc, #356]	; (8005ae0 <HAL_GPIO_Init+0x2f4>)
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	089b      	lsrs	r3, r3, #2
 800597e:	3302      	adds	r3, #2
 8005980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005984:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f003 0303 	and.w	r3, r3, #3
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	220f      	movs	r2, #15
 8005990:	fa02 f303 	lsl.w	r3, r2, r3
 8005994:	43db      	mvns	r3, r3
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	4013      	ands	r3, r2
 800599a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80059a2:	d025      	beq.n	80059f0 <HAL_GPIO_Init+0x204>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a4f      	ldr	r2, [pc, #316]	; (8005ae4 <HAL_GPIO_Init+0x2f8>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d01f      	beq.n	80059ec <HAL_GPIO_Init+0x200>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a4e      	ldr	r2, [pc, #312]	; (8005ae8 <HAL_GPIO_Init+0x2fc>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d019      	beq.n	80059e8 <HAL_GPIO_Init+0x1fc>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a4d      	ldr	r2, [pc, #308]	; (8005aec <HAL_GPIO_Init+0x300>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d013      	beq.n	80059e4 <HAL_GPIO_Init+0x1f8>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a4c      	ldr	r2, [pc, #304]	; (8005af0 <HAL_GPIO_Init+0x304>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d00d      	beq.n	80059e0 <HAL_GPIO_Init+0x1f4>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a4b      	ldr	r2, [pc, #300]	; (8005af4 <HAL_GPIO_Init+0x308>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d007      	beq.n	80059dc <HAL_GPIO_Init+0x1f0>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a4a      	ldr	r2, [pc, #296]	; (8005af8 <HAL_GPIO_Init+0x30c>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d101      	bne.n	80059d8 <HAL_GPIO_Init+0x1ec>
 80059d4:	2306      	movs	r3, #6
 80059d6:	e00c      	b.n	80059f2 <HAL_GPIO_Init+0x206>
 80059d8:	2307      	movs	r3, #7
 80059da:	e00a      	b.n	80059f2 <HAL_GPIO_Init+0x206>
 80059dc:	2305      	movs	r3, #5
 80059de:	e008      	b.n	80059f2 <HAL_GPIO_Init+0x206>
 80059e0:	2304      	movs	r3, #4
 80059e2:	e006      	b.n	80059f2 <HAL_GPIO_Init+0x206>
 80059e4:	2303      	movs	r3, #3
 80059e6:	e004      	b.n	80059f2 <HAL_GPIO_Init+0x206>
 80059e8:	2302      	movs	r3, #2
 80059ea:	e002      	b.n	80059f2 <HAL_GPIO_Init+0x206>
 80059ec:	2301      	movs	r3, #1
 80059ee:	e000      	b.n	80059f2 <HAL_GPIO_Init+0x206>
 80059f0:	2300      	movs	r3, #0
 80059f2:	697a      	ldr	r2, [r7, #20]
 80059f4:	f002 0203 	and.w	r2, r2, #3
 80059f8:	0092      	lsls	r2, r2, #2
 80059fa:	4093      	lsls	r3, r2
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005a02:	4937      	ldr	r1, [pc, #220]	; (8005ae0 <HAL_GPIO_Init+0x2f4>)
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	089b      	lsrs	r3, r3, #2
 8005a08:	3302      	adds	r3, #2
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a10:	4b3a      	ldr	r3, [pc, #232]	; (8005afc <HAL_GPIO_Init+0x310>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	43db      	mvns	r3, r3
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d003      	beq.n	8005a34 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005a34:	4a31      	ldr	r2, [pc, #196]	; (8005afc <HAL_GPIO_Init+0x310>)
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005a3a:	4b30      	ldr	r3, [pc, #192]	; (8005afc <HAL_GPIO_Init+0x310>)
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	43db      	mvns	r3, r3
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	4013      	ands	r3, r2
 8005a48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005a5e:	4a27      	ldr	r2, [pc, #156]	; (8005afc <HAL_GPIO_Init+0x310>)
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a64:	4b25      	ldr	r3, [pc, #148]	; (8005afc <HAL_GPIO_Init+0x310>)
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	43db      	mvns	r3, r3
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	4013      	ands	r3, r2
 8005a72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d003      	beq.n	8005a88 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005a88:	4a1c      	ldr	r2, [pc, #112]	; (8005afc <HAL_GPIO_Init+0x310>)
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a8e:	4b1b      	ldr	r3, [pc, #108]	; (8005afc <HAL_GPIO_Init+0x310>)
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	43db      	mvns	r3, r3
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d003      	beq.n	8005ab2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005ab2:	4a12      	ldr	r2, [pc, #72]	; (8005afc <HAL_GPIO_Init+0x310>)
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	3301      	adds	r3, #1
 8005abc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f47f ae97 	bne.w	80057fc <HAL_GPIO_Init+0x10>
  }
}
 8005ace:	bf00      	nop
 8005ad0:	371c      	adds	r7, #28
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	40021000 	.word	0x40021000
 8005ae0:	40010000 	.word	0x40010000
 8005ae4:	48000400 	.word	0x48000400
 8005ae8:	48000800 	.word	0x48000800
 8005aec:	48000c00 	.word	0x48000c00
 8005af0:	48001000 	.word	0x48001000
 8005af4:	48001400 	.word	0x48001400
 8005af8:	48001800 	.word	0x48001800
 8005afc:	40010400 	.word	0x40010400

08005b00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	460b      	mov	r3, r1
 8005b0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	691a      	ldr	r2, [r3, #16]
 8005b10:	887b      	ldrh	r3, [r7, #2]
 8005b12:	4013      	ands	r3, r2
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d002      	beq.n	8005b1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	73fb      	strb	r3, [r7, #15]
 8005b1c:	e001      	b.n	8005b22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3714      	adds	r7, #20
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	807b      	strh	r3, [r7, #2]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b40:	787b      	ldrb	r3, [r7, #1]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d003      	beq.n	8005b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005b46:	887a      	ldrh	r2, [r7, #2]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005b4c:	e002      	b.n	8005b54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005b4e:	887a      	ldrh	r2, [r7, #2]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	4603      	mov	r3, r0
 8005b68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005b6a:	4b08      	ldr	r3, [pc, #32]	; (8005b8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b6c:	695a      	ldr	r2, [r3, #20]
 8005b6e:	88fb      	ldrh	r3, [r7, #6]
 8005b70:	4013      	ands	r3, r2
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d006      	beq.n	8005b84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005b76:	4a05      	ldr	r2, [pc, #20]	; (8005b8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b78:	88fb      	ldrh	r3, [r7, #6]
 8005b7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005b7c:	88fb      	ldrh	r3, [r7, #6]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7fc fb20 	bl	80021c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005b84:	bf00      	nop
 8005b86:	3708      	adds	r7, #8
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	40010400 	.word	0x40010400

08005b90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d101      	bne.n	8005ba2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e081      	b.n	8005ca6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d106      	bne.n	8005bbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7fd f9c2 	bl	8002f40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2224      	movs	r2, #36	; 0x24
 8005bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 0201 	bic.w	r2, r2, #1
 8005bd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005be0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	689a      	ldr	r2, [r3, #8]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005bf0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d107      	bne.n	8005c0a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	689a      	ldr	r2, [r3, #8]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c06:	609a      	str	r2, [r3, #8]
 8005c08:	e006      	b.n	8005c18 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	689a      	ldr	r2, [r3, #8]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005c16:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d104      	bne.n	8005c2a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	6812      	ldr	r2, [r2, #0]
 8005c34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005c38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c3c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68da      	ldr	r2, [r3, #12]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c4c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	691a      	ldr	r2, [r3, #16]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	430a      	orrs	r2, r1
 8005c66:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	69d9      	ldr	r1, [r3, #28]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a1a      	ldr	r2, [r3, #32]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	430a      	orrs	r2, r1
 8005c76:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f042 0201 	orr.w	r2, r2, #1
 8005c86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2220      	movs	r2, #32
 8005c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3708      	adds	r7, #8
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
	...

08005cb0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b088      	sub	sp, #32
 8005cb4:	af02      	add	r7, sp, #8
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	607a      	str	r2, [r7, #4]
 8005cba:	461a      	mov	r2, r3
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	817b      	strh	r3, [r7, #10]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b20      	cmp	r3, #32
 8005cce:	f040 80da 	bne.w	8005e86 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d101      	bne.n	8005ce0 <HAL_I2C_Master_Transmit+0x30>
 8005cdc:	2302      	movs	r3, #2
 8005cde:	e0d3      	b.n	8005e88 <HAL_I2C_Master_Transmit+0x1d8>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ce8:	f7fd fe4e 	bl	8003988 <HAL_GetTick>
 8005cec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	2319      	movs	r3, #25
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f000 f9e6 	bl	80060cc <I2C_WaitOnFlagUntilTimeout>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d001      	beq.n	8005d0a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e0be      	b.n	8005e88 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2221      	movs	r2, #33	; 0x21
 8005d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2210      	movs	r2, #16
 8005d16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	893a      	ldrh	r2, [r7, #8]
 8005d2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	2bff      	cmp	r3, #255	; 0xff
 8005d3a:	d90e      	bls.n	8005d5a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	22ff      	movs	r2, #255	; 0xff
 8005d40:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d46:	b2da      	uxtb	r2, r3
 8005d48:	8979      	ldrh	r1, [r7, #10]
 8005d4a:	4b51      	ldr	r3, [pc, #324]	; (8005e90 <HAL_I2C_Master_Transmit+0x1e0>)
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f000 fb58 	bl	8006408 <I2C_TransferConfig>
 8005d58:	e06c      	b.n	8005e34 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	8979      	ldrh	r1, [r7, #10]
 8005d6c:	4b48      	ldr	r3, [pc, #288]	; (8005e90 <HAL_I2C_Master_Transmit+0x1e0>)
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f000 fb47 	bl	8006408 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005d7a:	e05b      	b.n	8005e34 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	6a39      	ldr	r1, [r7, #32]
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f000 f9e3 	bl	800614c <I2C_WaitOnTXISFlagUntilTimeout>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d001      	beq.n	8005d90 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e07b      	b.n	8005e88 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d94:	781a      	ldrb	r2, [r3, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	3b01      	subs	r3, #1
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005db8:	3b01      	subs	r3, #1
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d034      	beq.n	8005e34 <HAL_I2C_Master_Transmit+0x184>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d130      	bne.n	8005e34 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	2180      	movs	r1, #128	; 0x80
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 f975 	bl	80060cc <I2C_WaitOnFlagUntilTimeout>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d001      	beq.n	8005dec <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e04d      	b.n	8005e88 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	2bff      	cmp	r3, #255	; 0xff
 8005df4:	d90e      	bls.n	8005e14 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	22ff      	movs	r2, #255	; 0xff
 8005dfa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e00:	b2da      	uxtb	r2, r3
 8005e02:	8979      	ldrh	r1, [r7, #10]
 8005e04:	2300      	movs	r3, #0
 8005e06:	9300      	str	r3, [sp, #0]
 8005e08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f000 fafb 	bl	8006408 <I2C_TransferConfig>
 8005e12:	e00f      	b.n	8005e34 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e22:	b2da      	uxtb	r2, r3
 8005e24:	8979      	ldrh	r1, [r7, #10]
 8005e26:	2300      	movs	r3, #0
 8005e28:	9300      	str	r3, [sp, #0]
 8005e2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f000 faea 	bl	8006408 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d19e      	bne.n	8005d7c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	6a39      	ldr	r1, [r7, #32]
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f000 f9c2 	bl	80061cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d001      	beq.n	8005e52 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e01a      	b.n	8005e88 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2220      	movs	r2, #32
 8005e58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6859      	ldr	r1, [r3, #4]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	4b0b      	ldr	r3, [pc, #44]	; (8005e94 <HAL_I2C_Master_Transmit+0x1e4>)
 8005e66:	400b      	ands	r3, r1
 8005e68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2220      	movs	r2, #32
 8005e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e82:	2300      	movs	r3, #0
 8005e84:	e000      	b.n	8005e88 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005e86:	2302      	movs	r3, #2
  }
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3718      	adds	r7, #24
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	80002000 	.word	0x80002000
 8005e94:	fe00e800 	.word	0xfe00e800

08005e98 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b088      	sub	sp, #32
 8005e9c:	af02      	add	r7, sp, #8
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	607a      	str	r2, [r7, #4]
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	817b      	strh	r3, [r7, #10]
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b20      	cmp	r3, #32
 8005eb6:	f040 80db 	bne.w	8006070 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d101      	bne.n	8005ec8 <HAL_I2C_Master_Receive+0x30>
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	e0d4      	b.n	8006072 <HAL_I2C_Master_Receive+0x1da>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ed0:	f7fd fd5a 	bl	8003988 <HAL_GetTick>
 8005ed4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	2319      	movs	r3, #25
 8005edc:	2201      	movs	r2, #1
 8005ede:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f000 f8f2 	bl	80060cc <I2C_WaitOnFlagUntilTimeout>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e0bf      	b.n	8006072 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2222      	movs	r2, #34	; 0x22
 8005ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2210      	movs	r2, #16
 8005efe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	893a      	ldrh	r2, [r7, #8]
 8005f12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	2bff      	cmp	r3, #255	; 0xff
 8005f22:	d90e      	bls.n	8005f42 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	22ff      	movs	r2, #255	; 0xff
 8005f28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f2e:	b2da      	uxtb	r2, r3
 8005f30:	8979      	ldrh	r1, [r7, #10]
 8005f32:	4b52      	ldr	r3, [pc, #328]	; (800607c <HAL_I2C_Master_Receive+0x1e4>)
 8005f34:	9300      	str	r3, [sp, #0]
 8005f36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f000 fa64 	bl	8006408 <I2C_TransferConfig>
 8005f40:	e06d      	b.n	800601e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f50:	b2da      	uxtb	r2, r3
 8005f52:	8979      	ldrh	r1, [r7, #10]
 8005f54:	4b49      	ldr	r3, [pc, #292]	; (800607c <HAL_I2C_Master_Receive+0x1e4>)
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f000 fa53 	bl	8006408 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005f62:	e05c      	b.n	800601e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	6a39      	ldr	r1, [r7, #32]
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f000 f96b 	bl	8006244 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d001      	beq.n	8005f78 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e07c      	b.n	8006072 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	b2d2      	uxtb	r2, r2
 8005f84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8a:	1c5a      	adds	r2, r3, #1
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f94:	3b01      	subs	r3, #1
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	b29a      	uxth	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d034      	beq.n	800601e <HAL_I2C_Master_Receive+0x186>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d130      	bne.n	800601e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	2180      	movs	r1, #128	; 0x80
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 f880 	bl	80060cc <I2C_WaitOnFlagUntilTimeout>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d001      	beq.n	8005fd6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e04d      	b.n	8006072 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	2bff      	cmp	r3, #255	; 0xff
 8005fde:	d90e      	bls.n	8005ffe <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	22ff      	movs	r2, #255	; 0xff
 8005fe4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fea:	b2da      	uxtb	r2, r3
 8005fec:	8979      	ldrh	r1, [r7, #10]
 8005fee:	2300      	movs	r3, #0
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f000 fa06 	bl	8006408 <I2C_TransferConfig>
 8005ffc:	e00f      	b.n	800601e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006002:	b29a      	uxth	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800600c:	b2da      	uxtb	r2, r3
 800600e:	8979      	ldrh	r1, [r7, #10]
 8006010:	2300      	movs	r3, #0
 8006012:	9300      	str	r3, [sp, #0]
 8006014:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f000 f9f5 	bl	8006408 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006022:	b29b      	uxth	r3, r3
 8006024:	2b00      	cmp	r3, #0
 8006026:	d19d      	bne.n	8005f64 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	6a39      	ldr	r1, [r7, #32]
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f000 f8cd 	bl	80061cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d001      	beq.n	800603c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e01a      	b.n	8006072 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2220      	movs	r2, #32
 8006042:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6859      	ldr	r1, [r3, #4]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	4b0c      	ldr	r3, [pc, #48]	; (8006080 <HAL_I2C_Master_Receive+0x1e8>)
 8006050:	400b      	ands	r3, r1
 8006052:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2220      	movs	r2, #32
 8006058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800606c:	2300      	movs	r3, #0
 800606e:	e000      	b.n	8006072 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006070:	2302      	movs	r3, #2
  }
}
 8006072:	4618      	mov	r0, r3
 8006074:	3718      	adds	r7, #24
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	80002400 	.word	0x80002400
 8006080:	fe00e800 	.word	0xfe00e800

08006084 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	f003 0302 	and.w	r3, r3, #2
 8006096:	2b02      	cmp	r3, #2
 8006098:	d103      	bne.n	80060a2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2200      	movs	r2, #0
 80060a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d007      	beq.n	80060c0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	699a      	ldr	r2, [r3, #24]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f042 0201 	orr.w	r2, r2, #1
 80060be:	619a      	str	r2, [r3, #24]
  }
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	603b      	str	r3, [r7, #0]
 80060d8:	4613      	mov	r3, r2
 80060da:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060dc:	e022      	b.n	8006124 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e4:	d01e      	beq.n	8006124 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060e6:	f7fd fc4f 	bl	8003988 <HAL_GetTick>
 80060ea:	4602      	mov	r2, r0
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d302      	bcc.n	80060fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d113      	bne.n	8006124 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006100:	f043 0220 	orr.w	r2, r3, #32
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2220      	movs	r2, #32
 800610c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e00f      	b.n	8006144 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	699a      	ldr	r2, [r3, #24]
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	4013      	ands	r3, r2
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	429a      	cmp	r2, r3
 8006132:	bf0c      	ite	eq
 8006134:	2301      	moveq	r3, #1
 8006136:	2300      	movne	r3, #0
 8006138:	b2db      	uxtb	r3, r3
 800613a:	461a      	mov	r2, r3
 800613c:	79fb      	ldrb	r3, [r7, #7]
 800613e:	429a      	cmp	r2, r3
 8006140:	d0cd      	beq.n	80060de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3710      	adds	r7, #16
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006158:	e02c      	b.n	80061b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	68b9      	ldr	r1, [r7, #8]
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f000 f8dc 	bl	800631c <I2C_IsAcknowledgeFailed>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e02a      	b.n	80061c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006174:	d01e      	beq.n	80061b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006176:	f7fd fc07 	bl	8003988 <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	429a      	cmp	r2, r3
 8006184:	d302      	bcc.n	800618c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d113      	bne.n	80061b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006190:	f043 0220 	orr.w	r2, r3, #32
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2220      	movs	r2, #32
 800619c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e007      	b.n	80061c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	f003 0302 	and.w	r3, r3, #2
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d1cb      	bne.n	800615a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061d8:	e028      	b.n	800622c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	68b9      	ldr	r1, [r7, #8]
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f000 f89c 	bl	800631c <I2C_IsAcknowledgeFailed>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d001      	beq.n	80061ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e026      	b.n	800623c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061ee:	f7fd fbcb 	bl	8003988 <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d302      	bcc.n	8006204 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d113      	bne.n	800622c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006208:	f043 0220 	orr.w	r2, r3, #32
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2220      	movs	r2, #32
 8006214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e007      	b.n	800623c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	f003 0320 	and.w	r3, r3, #32
 8006236:	2b20      	cmp	r3, #32
 8006238:	d1cf      	bne.n	80061da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006250:	e055      	b.n	80062fe <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	68b9      	ldr	r1, [r7, #8]
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f000 f860 	bl	800631c <I2C_IsAcknowledgeFailed>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e053      	b.n	800630e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	f003 0320 	and.w	r3, r3, #32
 8006270:	2b20      	cmp	r3, #32
 8006272:	d129      	bne.n	80062c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	f003 0304 	and.w	r3, r3, #4
 800627e:	2b04      	cmp	r3, #4
 8006280:	d105      	bne.n	800628e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006286:	2b00      	cmp	r3, #0
 8006288:	d001      	beq.n	800628e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800628a:	2300      	movs	r3, #0
 800628c:	e03f      	b.n	800630e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2220      	movs	r2, #32
 8006294:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	6859      	ldr	r1, [r3, #4]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	4b1d      	ldr	r3, [pc, #116]	; (8006318 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80062a2:	400b      	ands	r3, r1
 80062a4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2220      	movs	r2, #32
 80062b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e022      	b.n	800630e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062c8:	f7fd fb5e 	bl	8003988 <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d302      	bcc.n	80062de <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10f      	bne.n	80062fe <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062e2:	f043 0220 	orr.w	r2, r3, #32
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2220      	movs	r2, #32
 80062ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e007      	b.n	800630e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	f003 0304 	and.w	r3, r3, #4
 8006308:	2b04      	cmp	r3, #4
 800630a:	d1a2      	bne.n	8006252 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	fe00e800 	.word	0xfe00e800

0800631c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	f003 0310 	and.w	r3, r3, #16
 8006332:	2b10      	cmp	r3, #16
 8006334:	d161      	bne.n	80063fa <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006340:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006344:	d02b      	beq.n	800639e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006354:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006356:	e022      	b.n	800639e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800635e:	d01e      	beq.n	800639e <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006360:	f7fd fb12 	bl	8003988 <HAL_GetTick>
 8006364:	4602      	mov	r2, r0
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	68ba      	ldr	r2, [r7, #8]
 800636c:	429a      	cmp	r2, r3
 800636e:	d302      	bcc.n	8006376 <I2C_IsAcknowledgeFailed+0x5a>
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d113      	bne.n	800639e <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800637a:	f043 0220 	orr.w	r2, r3, #32
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2220      	movs	r2, #32
 8006386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e02e      	b.n	80063fc <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	f003 0320 	and.w	r3, r3, #32
 80063a8:	2b20      	cmp	r3, #32
 80063aa:	d1d5      	bne.n	8006358 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2210      	movs	r2, #16
 80063b2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2220      	movs	r2, #32
 80063ba:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f7ff fe61 	bl	8006084 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	6859      	ldr	r1, [r3, #4]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	4b0d      	ldr	r3, [pc, #52]	; (8006404 <I2C_IsAcknowledgeFailed+0xe8>)
 80063ce:	400b      	ands	r3, r1
 80063d0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d6:	f043 0204 	orr.w	r2, r3, #4
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2220      	movs	r2, #32
 80063e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e000      	b.n	80063fc <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3710      	adds	r7, #16
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}
 8006404:	fe00e800 	.word	0xfe00e800

08006408 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	607b      	str	r3, [r7, #4]
 8006412:	460b      	mov	r3, r1
 8006414:	817b      	strh	r3, [r7, #10]
 8006416:	4613      	mov	r3, r2
 8006418:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	0d5b      	lsrs	r3, r3, #21
 8006424:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006428:	4b0d      	ldr	r3, [pc, #52]	; (8006460 <I2C_TransferConfig+0x58>)
 800642a:	430b      	orrs	r3, r1
 800642c:	43db      	mvns	r3, r3
 800642e:	ea02 0103 	and.w	r1, r2, r3
 8006432:	897b      	ldrh	r3, [r7, #10]
 8006434:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006438:	7a7b      	ldrb	r3, [r7, #9]
 800643a:	041b      	lsls	r3, r3, #16
 800643c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006440:	431a      	orrs	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	431a      	orrs	r2, r3
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	431a      	orrs	r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	430a      	orrs	r2, r1
 8006450:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8006452:	bf00      	nop
 8006454:	3714      	adds	r7, #20
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	03ff63ff 	.word	0x03ff63ff

08006464 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b20      	cmp	r3, #32
 8006478:	d138      	bne.n	80064ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006480:	2b01      	cmp	r3, #1
 8006482:	d101      	bne.n	8006488 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006484:	2302      	movs	r3, #2
 8006486:	e032      	b.n	80064ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2224      	movs	r2, #36	; 0x24
 8006494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f022 0201 	bic.w	r2, r2, #1
 80064a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80064b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6819      	ldr	r1, [r3, #0]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	683a      	ldr	r2, [r7, #0]
 80064c4:	430a      	orrs	r2, r1
 80064c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f042 0201 	orr.w	r2, r2, #1
 80064d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2220      	movs	r2, #32
 80064dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80064e8:	2300      	movs	r3, #0
 80064ea:	e000      	b.n	80064ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80064ec:	2302      	movs	r3, #2
  }
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	370c      	adds	r7, #12
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr

080064fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b085      	sub	sp, #20
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
 8006502:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800650a:	b2db      	uxtb	r3, r3
 800650c:	2b20      	cmp	r3, #32
 800650e:	d139      	bne.n	8006584 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006516:	2b01      	cmp	r3, #1
 8006518:	d101      	bne.n	800651e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800651a:	2302      	movs	r3, #2
 800651c:	e033      	b.n	8006586 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2224      	movs	r2, #36	; 0x24
 800652a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f022 0201 	bic.w	r2, r2, #1
 800653c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800654c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	021b      	lsls	r3, r3, #8
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	4313      	orrs	r3, r2
 8006556:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f042 0201 	orr.w	r2, r2, #1
 800656e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2220      	movs	r2, #32
 8006574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006580:	2300      	movs	r3, #0
 8006582:	e000      	b.n	8006586 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006584:	2302      	movs	r3, #2
  }
}
 8006586:	4618      	mov	r0, r3
 8006588:	3714      	adds	r7, #20
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
	...

08006594 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800659a:	af00      	add	r7, sp, #0
 800659c:	1d3b      	adds	r3, r7, #4
 800659e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80065a0:	1d3b      	adds	r3, r7, #4
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d102      	bne.n	80065ae <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	f000 bf01 	b.w	80073b0 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065ae:	1d3b      	adds	r3, r7, #4
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0301 	and.w	r3, r3, #1
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 8160 	beq.w	800687e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80065be:	4bae      	ldr	r3, [pc, #696]	; (8006878 <HAL_RCC_OscConfig+0x2e4>)
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	f003 030c 	and.w	r3, r3, #12
 80065c6:	2b04      	cmp	r3, #4
 80065c8:	d00c      	beq.n	80065e4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80065ca:	4bab      	ldr	r3, [pc, #684]	; (8006878 <HAL_RCC_OscConfig+0x2e4>)
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f003 030c 	and.w	r3, r3, #12
 80065d2:	2b08      	cmp	r3, #8
 80065d4:	d159      	bne.n	800668a <HAL_RCC_OscConfig+0xf6>
 80065d6:	4ba8      	ldr	r3, [pc, #672]	; (8006878 <HAL_RCC_OscConfig+0x2e4>)
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80065de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065e2:	d152      	bne.n	800668a <HAL_RCC_OscConfig+0xf6>
 80065e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80065e8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065ec:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80065f0:	fa93 f3a3 	rbit	r3, r3
 80065f4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80065f8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065fc:	fab3 f383 	clz	r3, r3
 8006600:	b2db      	uxtb	r3, r3
 8006602:	095b      	lsrs	r3, r3, #5
 8006604:	b2db      	uxtb	r3, r3
 8006606:	f043 0301 	orr.w	r3, r3, #1
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b01      	cmp	r3, #1
 800660e:	d102      	bne.n	8006616 <HAL_RCC_OscConfig+0x82>
 8006610:	4b99      	ldr	r3, [pc, #612]	; (8006878 <HAL_RCC_OscConfig+0x2e4>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	e015      	b.n	8006642 <HAL_RCC_OscConfig+0xae>
 8006616:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800661a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800661e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8006622:	fa93 f3a3 	rbit	r3, r3
 8006626:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800662a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800662e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8006632:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006636:	fa93 f3a3 	rbit	r3, r3
 800663a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800663e:	4b8e      	ldr	r3, [pc, #568]	; (8006878 <HAL_RCC_OscConfig+0x2e4>)
 8006640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006642:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006646:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800664a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800664e:	fa92 f2a2 	rbit	r2, r2
 8006652:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8006656:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800665a:	fab2 f282 	clz	r2, r2
 800665e:	b2d2      	uxtb	r2, r2
 8006660:	f042 0220 	orr.w	r2, r2, #32
 8006664:	b2d2      	uxtb	r2, r2
 8006666:	f002 021f 	and.w	r2, r2, #31
 800666a:	2101      	movs	r1, #1
 800666c:	fa01 f202 	lsl.w	r2, r1, r2
 8006670:	4013      	ands	r3, r2
 8006672:	2b00      	cmp	r3, #0
 8006674:	f000 8102 	beq.w	800687c <HAL_RCC_OscConfig+0x2e8>
 8006678:	1d3b      	adds	r3, r7, #4
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	2b00      	cmp	r3, #0
 8006680:	f040 80fc 	bne.w	800687c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	f000 be93 	b.w	80073b0 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800668a:	1d3b      	adds	r3, r7, #4
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006694:	d106      	bne.n	80066a4 <HAL_RCC_OscConfig+0x110>
 8006696:	4b78      	ldr	r3, [pc, #480]	; (8006878 <HAL_RCC_OscConfig+0x2e4>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a77      	ldr	r2, [pc, #476]	; (8006878 <HAL_RCC_OscConfig+0x2e4>)
 800669c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066a0:	6013      	str	r3, [r2, #0]
 80066a2:	e030      	b.n	8006706 <HAL_RCC_OscConfig+0x172>
 80066a4:	1d3b      	adds	r3, r7, #4
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d10c      	bne.n	80066c8 <HAL_RCC_OscConfig+0x134>
 80066ae:	4b72      	ldr	r3, [pc, #456]	; (8006878 <HAL_RCC_OscConfig+0x2e4>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a71      	ldr	r2, [pc, #452]	; (8006878 <HAL_RCC_OscConfig+0x2e4>)
 80066b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066b8:	6013      	str	r3, [r2, #0]
 80066ba:	4b6f      	ldr	r3, [pc, #444]	; (8006878 <HAL_RCC_OscConfig+0x2e4>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a6e      	ldr	r2, [pc, #440]	; (8006878 <HAL_RCC_OscConfig+0x2e4>)
 80066c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066c4:	6013      	str	r3, [r2, #0]
 80066c6:	e01e      	b.n	8006706 <HAL_RCC_OscConfig+0x172>
 80066c8:	1d3b      	adds	r3, r7, #4
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066d2:	d10c      	bne.n	80066ee <HAL_RCC_OscConfig+0x15a>
 80066d4:	4b68      	ldr	r3, [pc, #416]	; (8006878 <HAL_RCC_OscConfig+0x2e4>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a67      	ldr	r2, [pc, #412]	; (8006878 <HAL_RCC_OscConfig+0x2e4>)
 80066da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066de:	6013      	str	r3, [r2, #0]
 80066e0:	4b65      	ldr	r3, [pc, #404]	; (8006878 <HAL_RCC_OscConfig+0x2e4>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a64      	ldr	r2, [pc, #400]	; (8006878 <HAL_RCC_OscConfig+0x2e4>)
 80066e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066ea:	6013      	str	r3, [r2, #0]
 80066ec:	e00b      	b.n	8006706 <HAL_RCC_OscConfig+0x172>
 80066ee:	4b62      	ldr	r3, [pc, #392]	; (8006878 <HAL_RCC_OscConfig+0x2e4>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a61      	ldr	r2, [pc, #388]	; (8006878 <HAL_RCC_OscConfig+0x2e4>)
 80066f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066f8:	6013      	str	r3, [r2, #0]
 80066fa:	4b5f      	ldr	r3, [pc, #380]	; (8006878 <HAL_RCC_OscConfig+0x2e4>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a5e      	ldr	r2, [pc, #376]	; (8006878 <HAL_RCC_OscConfig+0x2e4>)
 8006700:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006704:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006706:	1d3b      	adds	r3, r7, #4
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d059      	beq.n	80067c4 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006710:	f7fd f93a 	bl	8003988 <HAL_GetTick>
 8006714:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006718:	e00a      	b.n	8006730 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800671a:	f7fd f935 	bl	8003988 <HAL_GetTick>
 800671e:	4602      	mov	r2, r0
 8006720:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	2b64      	cmp	r3, #100	; 0x64
 8006728:	d902      	bls.n	8006730 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	f000 be40 	b.w	80073b0 <HAL_RCC_OscConfig+0xe1c>
 8006730:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006734:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006738:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800673c:	fa93 f3a3 	rbit	r3, r3
 8006740:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8006744:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006748:	fab3 f383 	clz	r3, r3
 800674c:	b2db      	uxtb	r3, r3
 800674e:	095b      	lsrs	r3, r3, #5
 8006750:	b2db      	uxtb	r3, r3
 8006752:	f043 0301 	orr.w	r3, r3, #1
 8006756:	b2db      	uxtb	r3, r3
 8006758:	2b01      	cmp	r3, #1
 800675a:	d102      	bne.n	8006762 <HAL_RCC_OscConfig+0x1ce>
 800675c:	4b46      	ldr	r3, [pc, #280]	; (8006878 <HAL_RCC_OscConfig+0x2e4>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	e015      	b.n	800678e <HAL_RCC_OscConfig+0x1fa>
 8006762:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006766:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800676a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800676e:	fa93 f3a3 	rbit	r3, r3
 8006772:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8006776:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800677a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800677e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8006782:	fa93 f3a3 	rbit	r3, r3
 8006786:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800678a:	4b3b      	ldr	r3, [pc, #236]	; (8006878 <HAL_RCC_OscConfig+0x2e4>)
 800678c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006792:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8006796:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800679a:	fa92 f2a2 	rbit	r2, r2
 800679e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80067a2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80067a6:	fab2 f282 	clz	r2, r2
 80067aa:	b2d2      	uxtb	r2, r2
 80067ac:	f042 0220 	orr.w	r2, r2, #32
 80067b0:	b2d2      	uxtb	r2, r2
 80067b2:	f002 021f 	and.w	r2, r2, #31
 80067b6:	2101      	movs	r1, #1
 80067b8:	fa01 f202 	lsl.w	r2, r1, r2
 80067bc:	4013      	ands	r3, r2
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d0ab      	beq.n	800671a <HAL_RCC_OscConfig+0x186>
 80067c2:	e05c      	b.n	800687e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067c4:	f7fd f8e0 	bl	8003988 <HAL_GetTick>
 80067c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067cc:	e00a      	b.n	80067e4 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067ce:	f7fd f8db 	bl	8003988 <HAL_GetTick>
 80067d2:	4602      	mov	r2, r0
 80067d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	2b64      	cmp	r3, #100	; 0x64
 80067dc:	d902      	bls.n	80067e4 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	f000 bde6 	b.w	80073b0 <HAL_RCC_OscConfig+0xe1c>
 80067e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80067e8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067ec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80067f0:	fa93 f3a3 	rbit	r3, r3
 80067f4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80067f8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067fc:	fab3 f383 	clz	r3, r3
 8006800:	b2db      	uxtb	r3, r3
 8006802:	095b      	lsrs	r3, r3, #5
 8006804:	b2db      	uxtb	r3, r3
 8006806:	f043 0301 	orr.w	r3, r3, #1
 800680a:	b2db      	uxtb	r3, r3
 800680c:	2b01      	cmp	r3, #1
 800680e:	d102      	bne.n	8006816 <HAL_RCC_OscConfig+0x282>
 8006810:	4b19      	ldr	r3, [pc, #100]	; (8006878 <HAL_RCC_OscConfig+0x2e4>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	e015      	b.n	8006842 <HAL_RCC_OscConfig+0x2ae>
 8006816:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800681a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800681e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8006822:	fa93 f3a3 	rbit	r3, r3
 8006826:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800682a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800682e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8006832:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8006836:	fa93 f3a3 	rbit	r3, r3
 800683a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800683e:	4b0e      	ldr	r3, [pc, #56]	; (8006878 <HAL_RCC_OscConfig+0x2e4>)
 8006840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006842:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006846:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800684a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800684e:	fa92 f2a2 	rbit	r2, r2
 8006852:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8006856:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800685a:	fab2 f282 	clz	r2, r2
 800685e:	b2d2      	uxtb	r2, r2
 8006860:	f042 0220 	orr.w	r2, r2, #32
 8006864:	b2d2      	uxtb	r2, r2
 8006866:	f002 021f 	and.w	r2, r2, #31
 800686a:	2101      	movs	r1, #1
 800686c:	fa01 f202 	lsl.w	r2, r1, r2
 8006870:	4013      	ands	r3, r2
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1ab      	bne.n	80067ce <HAL_RCC_OscConfig+0x23a>
 8006876:	e002      	b.n	800687e <HAL_RCC_OscConfig+0x2ea>
 8006878:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800687c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800687e:	1d3b      	adds	r3, r7, #4
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0302 	and.w	r3, r3, #2
 8006888:	2b00      	cmp	r3, #0
 800688a:	f000 8170 	beq.w	8006b6e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800688e:	4bd0      	ldr	r3, [pc, #832]	; (8006bd0 <HAL_RCC_OscConfig+0x63c>)
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	f003 030c 	and.w	r3, r3, #12
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00c      	beq.n	80068b4 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800689a:	4bcd      	ldr	r3, [pc, #820]	; (8006bd0 <HAL_RCC_OscConfig+0x63c>)
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f003 030c 	and.w	r3, r3, #12
 80068a2:	2b08      	cmp	r3, #8
 80068a4:	d16d      	bne.n	8006982 <HAL_RCC_OscConfig+0x3ee>
 80068a6:	4bca      	ldr	r3, [pc, #808]	; (8006bd0 <HAL_RCC_OscConfig+0x63c>)
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80068ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068b2:	d166      	bne.n	8006982 <HAL_RCC_OscConfig+0x3ee>
 80068b4:	2302      	movs	r3, #2
 80068b6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068ba:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80068be:	fa93 f3a3 	rbit	r3, r3
 80068c2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80068c6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068ca:	fab3 f383 	clz	r3, r3
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	095b      	lsrs	r3, r3, #5
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	f043 0301 	orr.w	r3, r3, #1
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d102      	bne.n	80068e4 <HAL_RCC_OscConfig+0x350>
 80068de:	4bbc      	ldr	r3, [pc, #752]	; (8006bd0 <HAL_RCC_OscConfig+0x63c>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	e013      	b.n	800690c <HAL_RCC_OscConfig+0x378>
 80068e4:	2302      	movs	r3, #2
 80068e6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068ea:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80068ee:	fa93 f3a3 	rbit	r3, r3
 80068f2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80068f6:	2302      	movs	r3, #2
 80068f8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80068fc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8006900:	fa93 f3a3 	rbit	r3, r3
 8006904:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8006908:	4bb1      	ldr	r3, [pc, #708]	; (8006bd0 <HAL_RCC_OscConfig+0x63c>)
 800690a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690c:	2202      	movs	r2, #2
 800690e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8006912:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8006916:	fa92 f2a2 	rbit	r2, r2
 800691a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800691e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8006922:	fab2 f282 	clz	r2, r2
 8006926:	b2d2      	uxtb	r2, r2
 8006928:	f042 0220 	orr.w	r2, r2, #32
 800692c:	b2d2      	uxtb	r2, r2
 800692e:	f002 021f 	and.w	r2, r2, #31
 8006932:	2101      	movs	r1, #1
 8006934:	fa01 f202 	lsl.w	r2, r1, r2
 8006938:	4013      	ands	r3, r2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d007      	beq.n	800694e <HAL_RCC_OscConfig+0x3ba>
 800693e:	1d3b      	adds	r3, r7, #4
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d002      	beq.n	800694e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	f000 bd31 	b.w	80073b0 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800694e:	4ba0      	ldr	r3, [pc, #640]	; (8006bd0 <HAL_RCC_OscConfig+0x63c>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006956:	1d3b      	adds	r3, r7, #4
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	21f8      	movs	r1, #248	; 0xf8
 800695e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006962:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8006966:	fa91 f1a1 	rbit	r1, r1
 800696a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800696e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8006972:	fab1 f181 	clz	r1, r1
 8006976:	b2c9      	uxtb	r1, r1
 8006978:	408b      	lsls	r3, r1
 800697a:	4995      	ldr	r1, [pc, #596]	; (8006bd0 <HAL_RCC_OscConfig+0x63c>)
 800697c:	4313      	orrs	r3, r2
 800697e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006980:	e0f5      	b.n	8006b6e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006982:	1d3b      	adds	r3, r7, #4
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	2b00      	cmp	r3, #0
 800698a:	f000 8085 	beq.w	8006a98 <HAL_RCC_OscConfig+0x504>
 800698e:	2301      	movs	r3, #1
 8006990:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006994:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8006998:	fa93 f3a3 	rbit	r3, r3
 800699c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80069a0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069a4:	fab3 f383 	clz	r3, r3
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80069ae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	461a      	mov	r2, r3
 80069b6:	2301      	movs	r3, #1
 80069b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069ba:	f7fc ffe5 	bl	8003988 <HAL_GetTick>
 80069be:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069c2:	e00a      	b.n	80069da <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069c4:	f7fc ffe0 	bl	8003988 <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d902      	bls.n	80069da <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	f000 bceb 	b.w	80073b0 <HAL_RCC_OscConfig+0xe1c>
 80069da:	2302      	movs	r3, #2
 80069dc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069e0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80069e4:	fa93 f3a3 	rbit	r3, r3
 80069e8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80069ec:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069f0:	fab3 f383 	clz	r3, r3
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	095b      	lsrs	r3, r3, #5
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	f043 0301 	orr.w	r3, r3, #1
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d102      	bne.n	8006a0a <HAL_RCC_OscConfig+0x476>
 8006a04:	4b72      	ldr	r3, [pc, #456]	; (8006bd0 <HAL_RCC_OscConfig+0x63c>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	e013      	b.n	8006a32 <HAL_RCC_OscConfig+0x49e>
 8006a0a:	2302      	movs	r3, #2
 8006a0c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a10:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8006a14:	fa93 f3a3 	rbit	r3, r3
 8006a18:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8006a1c:	2302      	movs	r3, #2
 8006a1e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8006a22:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8006a26:	fa93 f3a3 	rbit	r3, r3
 8006a2a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006a2e:	4b68      	ldr	r3, [pc, #416]	; (8006bd0 <HAL_RCC_OscConfig+0x63c>)
 8006a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a32:	2202      	movs	r2, #2
 8006a34:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8006a38:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8006a3c:	fa92 f2a2 	rbit	r2, r2
 8006a40:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8006a44:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006a48:	fab2 f282 	clz	r2, r2
 8006a4c:	b2d2      	uxtb	r2, r2
 8006a4e:	f042 0220 	orr.w	r2, r2, #32
 8006a52:	b2d2      	uxtb	r2, r2
 8006a54:	f002 021f 	and.w	r2, r2, #31
 8006a58:	2101      	movs	r1, #1
 8006a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8006a5e:	4013      	ands	r3, r2
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d0af      	beq.n	80069c4 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a64:	4b5a      	ldr	r3, [pc, #360]	; (8006bd0 <HAL_RCC_OscConfig+0x63c>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a6c:	1d3b      	adds	r3, r7, #4
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	21f8      	movs	r1, #248	; 0xf8
 8006a74:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a78:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8006a7c:	fa91 f1a1 	rbit	r1, r1
 8006a80:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8006a84:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006a88:	fab1 f181 	clz	r1, r1
 8006a8c:	b2c9      	uxtb	r1, r1
 8006a8e:	408b      	lsls	r3, r1
 8006a90:	494f      	ldr	r1, [pc, #316]	; (8006bd0 <HAL_RCC_OscConfig+0x63c>)
 8006a92:	4313      	orrs	r3, r2
 8006a94:	600b      	str	r3, [r1, #0]
 8006a96:	e06a      	b.n	8006b6e <HAL_RCC_OscConfig+0x5da>
 8006a98:	2301      	movs	r3, #1
 8006a9a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a9e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006aa2:	fa93 f3a3 	rbit	r3, r3
 8006aa6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8006aaa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006aae:	fab3 f383 	clz	r3, r3
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006ab8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	461a      	mov	r2, r3
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ac4:	f7fc ff60 	bl	8003988 <HAL_GetTick>
 8006ac8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006acc:	e00a      	b.n	8006ae4 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ace:	f7fc ff5b 	bl	8003988 <HAL_GetTick>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d902      	bls.n	8006ae4 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	f000 bc66 	b.w	80073b0 <HAL_RCC_OscConfig+0xe1c>
 8006ae4:	2302      	movs	r3, #2
 8006ae6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006aee:	fa93 f3a3 	rbit	r3, r3
 8006af2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8006af6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006afa:	fab3 f383 	clz	r3, r3
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	095b      	lsrs	r3, r3, #5
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	f043 0301 	orr.w	r3, r3, #1
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d102      	bne.n	8006b14 <HAL_RCC_OscConfig+0x580>
 8006b0e:	4b30      	ldr	r3, [pc, #192]	; (8006bd0 <HAL_RCC_OscConfig+0x63c>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	e013      	b.n	8006b3c <HAL_RCC_OscConfig+0x5a8>
 8006b14:	2302      	movs	r3, #2
 8006b16:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b1e:	fa93 f3a3 	rbit	r3, r3
 8006b22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006b26:	2302      	movs	r3, #2
 8006b28:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006b2c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006b30:	fa93 f3a3 	rbit	r3, r3
 8006b34:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006b38:	4b25      	ldr	r3, [pc, #148]	; (8006bd0 <HAL_RCC_OscConfig+0x63c>)
 8006b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3c:	2202      	movs	r2, #2
 8006b3e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8006b42:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8006b46:	fa92 f2a2 	rbit	r2, r2
 8006b4a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8006b4e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006b52:	fab2 f282 	clz	r2, r2
 8006b56:	b2d2      	uxtb	r2, r2
 8006b58:	f042 0220 	orr.w	r2, r2, #32
 8006b5c:	b2d2      	uxtb	r2, r2
 8006b5e:	f002 021f 	and.w	r2, r2, #31
 8006b62:	2101      	movs	r1, #1
 8006b64:	fa01 f202 	lsl.w	r2, r1, r2
 8006b68:	4013      	ands	r3, r2
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1af      	bne.n	8006ace <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b6e:	1d3b      	adds	r3, r7, #4
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0308 	and.w	r3, r3, #8
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f000 80da 	beq.w	8006d32 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b7e:	1d3b      	adds	r3, r7, #4
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	695b      	ldr	r3, [r3, #20]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d069      	beq.n	8006c5c <HAL_RCC_OscConfig+0x6c8>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b92:	fa93 f3a3 	rbit	r3, r3
 8006b96:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8006b9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b9e:	fab3 f383 	clz	r3, r3
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	4b0b      	ldr	r3, [pc, #44]	; (8006bd4 <HAL_RCC_OscConfig+0x640>)
 8006ba8:	4413      	add	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	461a      	mov	r2, r3
 8006bae:	2301      	movs	r3, #1
 8006bb0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bb2:	f7fc fee9 	bl	8003988 <HAL_GetTick>
 8006bb6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bba:	e00d      	b.n	8006bd8 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bbc:	f7fc fee4 	bl	8003988 <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d905      	bls.n	8006bd8 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e3ef      	b.n	80073b0 <HAL_RCC_OscConfig+0xe1c>
 8006bd0:	40021000 	.word	0x40021000
 8006bd4:	10908120 	.word	0x10908120
 8006bd8:	2302      	movs	r3, #2
 8006bda:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006be2:	fa93 f2a3 	rbit	r2, r3
 8006be6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bea:	601a      	str	r2, [r3, #0]
 8006bec:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8006bf0:	2202      	movs	r2, #2
 8006bf2:	601a      	str	r2, [r3, #0]
 8006bf4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	fa93 f2a3 	rbit	r2, r3
 8006bfe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006c02:	601a      	str	r2, [r3, #0]
 8006c04:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8006c08:	2202      	movs	r2, #2
 8006c0a:	601a      	str	r2, [r3, #0]
 8006c0c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	fa93 f2a3 	rbit	r2, r3
 8006c16:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8006c1a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c1c:	4ba4      	ldr	r3, [pc, #656]	; (8006eb0 <HAL_RCC_OscConfig+0x91c>)
 8006c1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c20:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8006c24:	2102      	movs	r1, #2
 8006c26:	6019      	str	r1, [r3, #0]
 8006c28:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	fa93 f1a3 	rbit	r1, r3
 8006c32:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8006c36:	6019      	str	r1, [r3, #0]
  return result;
 8006c38:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	fab3 f383 	clz	r3, r3
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	f003 031f 	and.w	r3, r3, #31
 8006c4e:	2101      	movs	r1, #1
 8006c50:	fa01 f303 	lsl.w	r3, r1, r3
 8006c54:	4013      	ands	r3, r2
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d0b0      	beq.n	8006bbc <HAL_RCC_OscConfig+0x628>
 8006c5a:	e06a      	b.n	8006d32 <HAL_RCC_OscConfig+0x79e>
 8006c5c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8006c60:	2201      	movs	r2, #1
 8006c62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c64:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	fa93 f2a3 	rbit	r2, r3
 8006c6e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006c72:	601a      	str	r2, [r3, #0]
  return result;
 8006c74:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006c78:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c7a:	fab3 f383 	clz	r3, r3
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	461a      	mov	r2, r3
 8006c82:	4b8c      	ldr	r3, [pc, #560]	; (8006eb4 <HAL_RCC_OscConfig+0x920>)
 8006c84:	4413      	add	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	461a      	mov	r2, r3
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c8e:	f7fc fe7b 	bl	8003988 <HAL_GetTick>
 8006c92:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c96:	e009      	b.n	8006cac <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c98:	f7fc fe76 	bl	8003988 <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d901      	bls.n	8006cac <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e381      	b.n	80073b0 <HAL_RCC_OscConfig+0xe1c>
 8006cac:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006cb0:	2202      	movs	r2, #2
 8006cb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cb4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	fa93 f2a3 	rbit	r2, r3
 8006cbe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8006cc2:	601a      	str	r2, [r3, #0]
 8006cc4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006cc8:	2202      	movs	r2, #2
 8006cca:	601a      	str	r2, [r3, #0]
 8006ccc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	fa93 f2a3 	rbit	r2, r3
 8006cd6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8006cda:	601a      	str	r2, [r3, #0]
 8006cdc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006ce0:	2202      	movs	r2, #2
 8006ce2:	601a      	str	r2, [r3, #0]
 8006ce4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	fa93 f2a3 	rbit	r2, r3
 8006cee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006cf2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cf4:	4b6e      	ldr	r3, [pc, #440]	; (8006eb0 <HAL_RCC_OscConfig+0x91c>)
 8006cf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cf8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006cfc:	2102      	movs	r1, #2
 8006cfe:	6019      	str	r1, [r3, #0]
 8006d00:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	fa93 f1a3 	rbit	r1, r3
 8006d0a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006d0e:	6019      	str	r1, [r3, #0]
  return result;
 8006d10:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	fab3 f383 	clz	r3, r3
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	f003 031f 	and.w	r3, r3, #31
 8006d26:	2101      	movs	r1, #1
 8006d28:	fa01 f303 	lsl.w	r3, r1, r3
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1b2      	bne.n	8006c98 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d32:	1d3b      	adds	r3, r7, #4
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0304 	and.w	r3, r3, #4
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f000 8157 	beq.w	8006ff0 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d42:	2300      	movs	r3, #0
 8006d44:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d48:	4b59      	ldr	r3, [pc, #356]	; (8006eb0 <HAL_RCC_OscConfig+0x91c>)
 8006d4a:	69db      	ldr	r3, [r3, #28]
 8006d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d112      	bne.n	8006d7a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d54:	4b56      	ldr	r3, [pc, #344]	; (8006eb0 <HAL_RCC_OscConfig+0x91c>)
 8006d56:	69db      	ldr	r3, [r3, #28]
 8006d58:	4a55      	ldr	r2, [pc, #340]	; (8006eb0 <HAL_RCC_OscConfig+0x91c>)
 8006d5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d5e:	61d3      	str	r3, [r2, #28]
 8006d60:	4b53      	ldr	r3, [pc, #332]	; (8006eb0 <HAL_RCC_OscConfig+0x91c>)
 8006d62:	69db      	ldr	r3, [r3, #28]
 8006d64:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8006d68:	f107 030c 	add.w	r3, r7, #12
 8006d6c:	601a      	str	r2, [r3, #0]
 8006d6e:	f107 030c 	add.w	r3, r7, #12
 8006d72:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006d74:	2301      	movs	r3, #1
 8006d76:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d7a:	4b4f      	ldr	r3, [pc, #316]	; (8006eb8 <HAL_RCC_OscConfig+0x924>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d11a      	bne.n	8006dbc <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d86:	4b4c      	ldr	r3, [pc, #304]	; (8006eb8 <HAL_RCC_OscConfig+0x924>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a4b      	ldr	r2, [pc, #300]	; (8006eb8 <HAL_RCC_OscConfig+0x924>)
 8006d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d90:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d92:	f7fc fdf9 	bl	8003988 <HAL_GetTick>
 8006d96:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d9a:	e009      	b.n	8006db0 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d9c:	f7fc fdf4 	bl	8003988 <HAL_GetTick>
 8006da0:	4602      	mov	r2, r0
 8006da2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	2b64      	cmp	r3, #100	; 0x64
 8006daa:	d901      	bls.n	8006db0 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e2ff      	b.n	80073b0 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006db0:	4b41      	ldr	r3, [pc, #260]	; (8006eb8 <HAL_RCC_OscConfig+0x924>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d0ef      	beq.n	8006d9c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006dbc:	1d3b      	adds	r3, r7, #4
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d106      	bne.n	8006dd4 <HAL_RCC_OscConfig+0x840>
 8006dc6:	4b3a      	ldr	r3, [pc, #232]	; (8006eb0 <HAL_RCC_OscConfig+0x91c>)
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	4a39      	ldr	r2, [pc, #228]	; (8006eb0 <HAL_RCC_OscConfig+0x91c>)
 8006dcc:	f043 0301 	orr.w	r3, r3, #1
 8006dd0:	6213      	str	r3, [r2, #32]
 8006dd2:	e02f      	b.n	8006e34 <HAL_RCC_OscConfig+0x8a0>
 8006dd4:	1d3b      	adds	r3, r7, #4
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d10c      	bne.n	8006df8 <HAL_RCC_OscConfig+0x864>
 8006dde:	4b34      	ldr	r3, [pc, #208]	; (8006eb0 <HAL_RCC_OscConfig+0x91c>)
 8006de0:	6a1b      	ldr	r3, [r3, #32]
 8006de2:	4a33      	ldr	r2, [pc, #204]	; (8006eb0 <HAL_RCC_OscConfig+0x91c>)
 8006de4:	f023 0301 	bic.w	r3, r3, #1
 8006de8:	6213      	str	r3, [r2, #32]
 8006dea:	4b31      	ldr	r3, [pc, #196]	; (8006eb0 <HAL_RCC_OscConfig+0x91c>)
 8006dec:	6a1b      	ldr	r3, [r3, #32]
 8006dee:	4a30      	ldr	r2, [pc, #192]	; (8006eb0 <HAL_RCC_OscConfig+0x91c>)
 8006df0:	f023 0304 	bic.w	r3, r3, #4
 8006df4:	6213      	str	r3, [r2, #32]
 8006df6:	e01d      	b.n	8006e34 <HAL_RCC_OscConfig+0x8a0>
 8006df8:	1d3b      	adds	r3, r7, #4
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	2b05      	cmp	r3, #5
 8006e00:	d10c      	bne.n	8006e1c <HAL_RCC_OscConfig+0x888>
 8006e02:	4b2b      	ldr	r3, [pc, #172]	; (8006eb0 <HAL_RCC_OscConfig+0x91c>)
 8006e04:	6a1b      	ldr	r3, [r3, #32]
 8006e06:	4a2a      	ldr	r2, [pc, #168]	; (8006eb0 <HAL_RCC_OscConfig+0x91c>)
 8006e08:	f043 0304 	orr.w	r3, r3, #4
 8006e0c:	6213      	str	r3, [r2, #32]
 8006e0e:	4b28      	ldr	r3, [pc, #160]	; (8006eb0 <HAL_RCC_OscConfig+0x91c>)
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	4a27      	ldr	r2, [pc, #156]	; (8006eb0 <HAL_RCC_OscConfig+0x91c>)
 8006e14:	f043 0301 	orr.w	r3, r3, #1
 8006e18:	6213      	str	r3, [r2, #32]
 8006e1a:	e00b      	b.n	8006e34 <HAL_RCC_OscConfig+0x8a0>
 8006e1c:	4b24      	ldr	r3, [pc, #144]	; (8006eb0 <HAL_RCC_OscConfig+0x91c>)
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	4a23      	ldr	r2, [pc, #140]	; (8006eb0 <HAL_RCC_OscConfig+0x91c>)
 8006e22:	f023 0301 	bic.w	r3, r3, #1
 8006e26:	6213      	str	r3, [r2, #32]
 8006e28:	4b21      	ldr	r3, [pc, #132]	; (8006eb0 <HAL_RCC_OscConfig+0x91c>)
 8006e2a:	6a1b      	ldr	r3, [r3, #32]
 8006e2c:	4a20      	ldr	r2, [pc, #128]	; (8006eb0 <HAL_RCC_OscConfig+0x91c>)
 8006e2e:	f023 0304 	bic.w	r3, r3, #4
 8006e32:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006e34:	1d3b      	adds	r3, r7, #4
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d06a      	beq.n	8006f14 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e3e:	f7fc fda3 	bl	8003988 <HAL_GetTick>
 8006e42:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e46:	e00b      	b.n	8006e60 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e48:	f7fc fd9e 	bl	8003988 <HAL_GetTick>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d901      	bls.n	8006e60 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e2a7      	b.n	80073b0 <HAL_RCC_OscConfig+0xe1c>
 8006e60:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006e64:	2202      	movs	r2, #2
 8006e66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e68:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	fa93 f2a3 	rbit	r2, r3
 8006e72:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006e76:	601a      	str	r2, [r3, #0]
 8006e78:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8006e7c:	2202      	movs	r2, #2
 8006e7e:	601a      	str	r2, [r3, #0]
 8006e80:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	fa93 f2a3 	rbit	r2, r3
 8006e8a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006e8e:	601a      	str	r2, [r3, #0]
  return result;
 8006e90:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006e94:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e96:	fab3 f383 	clz	r3, r3
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	095b      	lsrs	r3, r3, #5
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	f043 0302 	orr.w	r3, r3, #2
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d108      	bne.n	8006ebc <HAL_RCC_OscConfig+0x928>
 8006eaa:	4b01      	ldr	r3, [pc, #4]	; (8006eb0 <HAL_RCC_OscConfig+0x91c>)
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	e013      	b.n	8006ed8 <HAL_RCC_OscConfig+0x944>
 8006eb0:	40021000 	.word	0x40021000
 8006eb4:	10908120 	.word	0x10908120
 8006eb8:	40007000 	.word	0x40007000
 8006ebc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006ec0:	2202      	movs	r2, #2
 8006ec2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ec4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	fa93 f2a3 	rbit	r2, r3
 8006ece:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006ed2:	601a      	str	r2, [r3, #0]
 8006ed4:	4bc0      	ldr	r3, [pc, #768]	; (80071d8 <HAL_RCC_OscConfig+0xc44>)
 8006ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8006edc:	2102      	movs	r1, #2
 8006ede:	6011      	str	r1, [r2, #0]
 8006ee0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8006ee4:	6812      	ldr	r2, [r2, #0]
 8006ee6:	fa92 f1a2 	rbit	r1, r2
 8006eea:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006eee:	6011      	str	r1, [r2, #0]
  return result;
 8006ef0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006ef4:	6812      	ldr	r2, [r2, #0]
 8006ef6:	fab2 f282 	clz	r2, r2
 8006efa:	b2d2      	uxtb	r2, r2
 8006efc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f00:	b2d2      	uxtb	r2, r2
 8006f02:	f002 021f 	and.w	r2, r2, #31
 8006f06:	2101      	movs	r1, #1
 8006f08:	fa01 f202 	lsl.w	r2, r1, r2
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d09a      	beq.n	8006e48 <HAL_RCC_OscConfig+0x8b4>
 8006f12:	e063      	b.n	8006fdc <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f14:	f7fc fd38 	bl	8003988 <HAL_GetTick>
 8006f18:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f1c:	e00b      	b.n	8006f36 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f1e:	f7fc fd33 	bl	8003988 <HAL_GetTick>
 8006f22:	4602      	mov	r2, r0
 8006f24:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d901      	bls.n	8006f36 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e23c      	b.n	80073b0 <HAL_RCC_OscConfig+0xe1c>
 8006f36:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f3e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	fa93 f2a3 	rbit	r2, r3
 8006f48:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006f4c:	601a      	str	r2, [r3, #0]
 8006f4e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006f52:	2202      	movs	r2, #2
 8006f54:	601a      	str	r2, [r3, #0]
 8006f56:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	fa93 f2a3 	rbit	r2, r3
 8006f60:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006f64:	601a      	str	r2, [r3, #0]
  return result;
 8006f66:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006f6a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f6c:	fab3 f383 	clz	r3, r3
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	095b      	lsrs	r3, r3, #5
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	f043 0302 	orr.w	r3, r3, #2
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d102      	bne.n	8006f86 <HAL_RCC_OscConfig+0x9f2>
 8006f80:	4b95      	ldr	r3, [pc, #596]	; (80071d8 <HAL_RCC_OscConfig+0xc44>)
 8006f82:	6a1b      	ldr	r3, [r3, #32]
 8006f84:	e00d      	b.n	8006fa2 <HAL_RCC_OscConfig+0xa0e>
 8006f86:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f8e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	fa93 f2a3 	rbit	r2, r3
 8006f98:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006f9c:	601a      	str	r2, [r3, #0]
 8006f9e:	4b8e      	ldr	r3, [pc, #568]	; (80071d8 <HAL_RCC_OscConfig+0xc44>)
 8006fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8006fa6:	2102      	movs	r1, #2
 8006fa8:	6011      	str	r1, [r2, #0]
 8006faa:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8006fae:	6812      	ldr	r2, [r2, #0]
 8006fb0:	fa92 f1a2 	rbit	r1, r2
 8006fb4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006fb8:	6011      	str	r1, [r2, #0]
  return result;
 8006fba:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006fbe:	6812      	ldr	r2, [r2, #0]
 8006fc0:	fab2 f282 	clz	r2, r2
 8006fc4:	b2d2      	uxtb	r2, r2
 8006fc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fca:	b2d2      	uxtb	r2, r2
 8006fcc:	f002 021f 	and.w	r2, r2, #31
 8006fd0:	2101      	movs	r1, #1
 8006fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1a0      	bne.n	8006f1e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006fdc:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d105      	bne.n	8006ff0 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fe4:	4b7c      	ldr	r3, [pc, #496]	; (80071d8 <HAL_RCC_OscConfig+0xc44>)
 8006fe6:	69db      	ldr	r3, [r3, #28]
 8006fe8:	4a7b      	ldr	r2, [pc, #492]	; (80071d8 <HAL_RCC_OscConfig+0xc44>)
 8006fea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fee:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ff0:	1d3b      	adds	r3, r7, #4
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	f000 81d9 	beq.w	80073ae <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ffc:	4b76      	ldr	r3, [pc, #472]	; (80071d8 <HAL_RCC_OscConfig+0xc44>)
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	f003 030c 	and.w	r3, r3, #12
 8007004:	2b08      	cmp	r3, #8
 8007006:	f000 81a6 	beq.w	8007356 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800700a:	1d3b      	adds	r3, r7, #4
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	699b      	ldr	r3, [r3, #24]
 8007010:	2b02      	cmp	r3, #2
 8007012:	f040 811e 	bne.w	8007252 <HAL_RCC_OscConfig+0xcbe>
 8007016:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800701a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800701e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007020:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	fa93 f2a3 	rbit	r2, r3
 800702a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800702e:	601a      	str	r2, [r3, #0]
  return result;
 8007030:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007034:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007036:	fab3 f383 	clz	r3, r3
 800703a:	b2db      	uxtb	r3, r3
 800703c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007040:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	461a      	mov	r2, r3
 8007048:	2300      	movs	r3, #0
 800704a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800704c:	f7fc fc9c 	bl	8003988 <HAL_GetTick>
 8007050:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007054:	e009      	b.n	800706a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007056:	f7fc fc97 	bl	8003988 <HAL_GetTick>
 800705a:	4602      	mov	r2, r0
 800705c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	2b02      	cmp	r3, #2
 8007064:	d901      	bls.n	800706a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8007066:	2303      	movs	r3, #3
 8007068:	e1a2      	b.n	80073b0 <HAL_RCC_OscConfig+0xe1c>
 800706a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800706e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007072:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007074:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	fa93 f2a3 	rbit	r2, r3
 800707e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007082:	601a      	str	r2, [r3, #0]
  return result;
 8007084:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007088:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800708a:	fab3 f383 	clz	r3, r3
 800708e:	b2db      	uxtb	r3, r3
 8007090:	095b      	lsrs	r3, r3, #5
 8007092:	b2db      	uxtb	r3, r3
 8007094:	f043 0301 	orr.w	r3, r3, #1
 8007098:	b2db      	uxtb	r3, r3
 800709a:	2b01      	cmp	r3, #1
 800709c:	d102      	bne.n	80070a4 <HAL_RCC_OscConfig+0xb10>
 800709e:	4b4e      	ldr	r3, [pc, #312]	; (80071d8 <HAL_RCC_OscConfig+0xc44>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	e01b      	b.n	80070dc <HAL_RCC_OscConfig+0xb48>
 80070a4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80070a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80070ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070ae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	fa93 f2a3 	rbit	r2, r3
 80070b8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80070bc:	601a      	str	r2, [r3, #0]
 80070be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80070c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80070c6:	601a      	str	r2, [r3, #0]
 80070c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	fa93 f2a3 	rbit	r2, r3
 80070d2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80070d6:	601a      	str	r2, [r3, #0]
 80070d8:	4b3f      	ldr	r3, [pc, #252]	; (80071d8 <HAL_RCC_OscConfig+0xc44>)
 80070da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070dc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80070e0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80070e4:	6011      	str	r1, [r2, #0]
 80070e6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80070ea:	6812      	ldr	r2, [r2, #0]
 80070ec:	fa92 f1a2 	rbit	r1, r2
 80070f0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80070f4:	6011      	str	r1, [r2, #0]
  return result;
 80070f6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80070fa:	6812      	ldr	r2, [r2, #0]
 80070fc:	fab2 f282 	clz	r2, r2
 8007100:	b2d2      	uxtb	r2, r2
 8007102:	f042 0220 	orr.w	r2, r2, #32
 8007106:	b2d2      	uxtb	r2, r2
 8007108:	f002 021f 	and.w	r2, r2, #31
 800710c:	2101      	movs	r1, #1
 800710e:	fa01 f202 	lsl.w	r2, r1, r2
 8007112:	4013      	ands	r3, r2
 8007114:	2b00      	cmp	r3, #0
 8007116:	d19e      	bne.n	8007056 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007118:	4b2f      	ldr	r3, [pc, #188]	; (80071d8 <HAL_RCC_OscConfig+0xc44>)
 800711a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711c:	f023 020f 	bic.w	r2, r3, #15
 8007120:	1d3b      	adds	r3, r7, #4
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007126:	492c      	ldr	r1, [pc, #176]	; (80071d8 <HAL_RCC_OscConfig+0xc44>)
 8007128:	4313      	orrs	r3, r2
 800712a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800712c:	4b2a      	ldr	r3, [pc, #168]	; (80071d8 <HAL_RCC_OscConfig+0xc44>)
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8007134:	1d3b      	adds	r3, r7, #4
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6a19      	ldr	r1, [r3, #32]
 800713a:	1d3b      	adds	r3, r7, #4
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	69db      	ldr	r3, [r3, #28]
 8007140:	430b      	orrs	r3, r1
 8007142:	4925      	ldr	r1, [pc, #148]	; (80071d8 <HAL_RCC_OscConfig+0xc44>)
 8007144:	4313      	orrs	r3, r2
 8007146:	604b      	str	r3, [r1, #4]
 8007148:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800714c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007150:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007152:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	fa93 f2a3 	rbit	r2, r3
 800715c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007160:	601a      	str	r2, [r3, #0]
  return result;
 8007162:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007166:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007168:	fab3 f383 	clz	r3, r3
 800716c:	b2db      	uxtb	r3, r3
 800716e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007172:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	461a      	mov	r2, r3
 800717a:	2301      	movs	r3, #1
 800717c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800717e:	f7fc fc03 	bl	8003988 <HAL_GetTick>
 8007182:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007186:	e009      	b.n	800719c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007188:	f7fc fbfe 	bl	8003988 <HAL_GetTick>
 800718c:	4602      	mov	r2, r0
 800718e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	2b02      	cmp	r3, #2
 8007196:	d901      	bls.n	800719c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	e109      	b.n	80073b0 <HAL_RCC_OscConfig+0xe1c>
 800719c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80071a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80071a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	fa93 f2a3 	rbit	r2, r3
 80071b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80071b4:	601a      	str	r2, [r3, #0]
  return result;
 80071b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80071ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80071bc:	fab3 f383 	clz	r3, r3
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	095b      	lsrs	r3, r3, #5
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	f043 0301 	orr.w	r3, r3, #1
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d105      	bne.n	80071dc <HAL_RCC_OscConfig+0xc48>
 80071d0:	4b01      	ldr	r3, [pc, #4]	; (80071d8 <HAL_RCC_OscConfig+0xc44>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	e01e      	b.n	8007214 <HAL_RCC_OscConfig+0xc80>
 80071d6:	bf00      	nop
 80071d8:	40021000 	.word	0x40021000
 80071dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80071e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80071e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	fa93 f2a3 	rbit	r2, r3
 80071f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80071f4:	601a      	str	r2, [r3, #0]
 80071f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80071fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80071fe:	601a      	str	r2, [r3, #0]
 8007200:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	fa93 f2a3 	rbit	r2, r3
 800720a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800720e:	601a      	str	r2, [r3, #0]
 8007210:	4b6a      	ldr	r3, [pc, #424]	; (80073bc <HAL_RCC_OscConfig+0xe28>)
 8007212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007214:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007218:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800721c:	6011      	str	r1, [r2, #0]
 800721e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007222:	6812      	ldr	r2, [r2, #0]
 8007224:	fa92 f1a2 	rbit	r1, r2
 8007228:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800722c:	6011      	str	r1, [r2, #0]
  return result;
 800722e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007232:	6812      	ldr	r2, [r2, #0]
 8007234:	fab2 f282 	clz	r2, r2
 8007238:	b2d2      	uxtb	r2, r2
 800723a:	f042 0220 	orr.w	r2, r2, #32
 800723e:	b2d2      	uxtb	r2, r2
 8007240:	f002 021f 	and.w	r2, r2, #31
 8007244:	2101      	movs	r1, #1
 8007246:	fa01 f202 	lsl.w	r2, r1, r2
 800724a:	4013      	ands	r3, r2
 800724c:	2b00      	cmp	r3, #0
 800724e:	d09b      	beq.n	8007188 <HAL_RCC_OscConfig+0xbf4>
 8007250:	e0ad      	b.n	80073ae <HAL_RCC_OscConfig+0xe1a>
 8007252:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007256:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800725a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800725c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	fa93 f2a3 	rbit	r2, r3
 8007266:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800726a:	601a      	str	r2, [r3, #0]
  return result;
 800726c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007270:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007272:	fab3 f383 	clz	r3, r3
 8007276:	b2db      	uxtb	r3, r3
 8007278:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800727c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	461a      	mov	r2, r3
 8007284:	2300      	movs	r3, #0
 8007286:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007288:	f7fc fb7e 	bl	8003988 <HAL_GetTick>
 800728c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007290:	e009      	b.n	80072a6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007292:	f7fc fb79 	bl	8003988 <HAL_GetTick>
 8007296:	4602      	mov	r2, r0
 8007298:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800729c:	1ad3      	subs	r3, r2, r3
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d901      	bls.n	80072a6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80072a2:	2303      	movs	r3, #3
 80072a4:	e084      	b.n	80073b0 <HAL_RCC_OscConfig+0xe1c>
 80072a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80072aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80072ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	fa93 f2a3 	rbit	r2, r3
 80072ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80072be:	601a      	str	r2, [r3, #0]
  return result;
 80072c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80072c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80072c6:	fab3 f383 	clz	r3, r3
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	095b      	lsrs	r3, r3, #5
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	f043 0301 	orr.w	r3, r3, #1
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d102      	bne.n	80072e0 <HAL_RCC_OscConfig+0xd4c>
 80072da:	4b38      	ldr	r3, [pc, #224]	; (80073bc <HAL_RCC_OscConfig+0xe28>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	e01b      	b.n	8007318 <HAL_RCC_OscConfig+0xd84>
 80072e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80072e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	fa93 f2a3 	rbit	r2, r3
 80072f4:	f107 0320 	add.w	r3, r7, #32
 80072f8:	601a      	str	r2, [r3, #0]
 80072fa:	f107 031c 	add.w	r3, r7, #28
 80072fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007302:	601a      	str	r2, [r3, #0]
 8007304:	f107 031c 	add.w	r3, r7, #28
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	fa93 f2a3 	rbit	r2, r3
 800730e:	f107 0318 	add.w	r3, r7, #24
 8007312:	601a      	str	r2, [r3, #0]
 8007314:	4b29      	ldr	r3, [pc, #164]	; (80073bc <HAL_RCC_OscConfig+0xe28>)
 8007316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007318:	f107 0214 	add.w	r2, r7, #20
 800731c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007320:	6011      	str	r1, [r2, #0]
 8007322:	f107 0214 	add.w	r2, r7, #20
 8007326:	6812      	ldr	r2, [r2, #0]
 8007328:	fa92 f1a2 	rbit	r1, r2
 800732c:	f107 0210 	add.w	r2, r7, #16
 8007330:	6011      	str	r1, [r2, #0]
  return result;
 8007332:	f107 0210 	add.w	r2, r7, #16
 8007336:	6812      	ldr	r2, [r2, #0]
 8007338:	fab2 f282 	clz	r2, r2
 800733c:	b2d2      	uxtb	r2, r2
 800733e:	f042 0220 	orr.w	r2, r2, #32
 8007342:	b2d2      	uxtb	r2, r2
 8007344:	f002 021f 	and.w	r2, r2, #31
 8007348:	2101      	movs	r1, #1
 800734a:	fa01 f202 	lsl.w	r2, r1, r2
 800734e:	4013      	ands	r3, r2
 8007350:	2b00      	cmp	r3, #0
 8007352:	d19e      	bne.n	8007292 <HAL_RCC_OscConfig+0xcfe>
 8007354:	e02b      	b.n	80073ae <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007356:	1d3b      	adds	r3, r7, #4
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	699b      	ldr	r3, [r3, #24]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d101      	bne.n	8007364 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	e025      	b.n	80073b0 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007364:	4b15      	ldr	r3, [pc, #84]	; (80073bc <HAL_RCC_OscConfig+0xe28>)
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800736c:	4b13      	ldr	r3, [pc, #76]	; (80073bc <HAL_RCC_OscConfig+0xe28>)
 800736e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007370:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007374:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007378:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800737c:	1d3b      	adds	r3, r7, #4
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	69db      	ldr	r3, [r3, #28]
 8007382:	429a      	cmp	r2, r3
 8007384:	d111      	bne.n	80073aa <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8007386:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800738a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800738e:	1d3b      	adds	r3, r7, #4
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007394:	429a      	cmp	r2, r3
 8007396:	d108      	bne.n	80073aa <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8007398:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800739c:	f003 020f 	and.w	r2, r3, #15
 80073a0:	1d3b      	adds	r3, r7, #4
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d001      	beq.n	80073ae <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e000      	b.n	80073b0 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	40021000 	.word	0x40021000

080073c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b09e      	sub	sp, #120	; 0x78
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80073ca:	2300      	movs	r3, #0
 80073cc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d101      	bne.n	80073d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	e162      	b.n	800769e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80073d8:	4b90      	ldr	r3, [pc, #576]	; (800761c <HAL_RCC_ClockConfig+0x25c>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 0307 	and.w	r3, r3, #7
 80073e0:	683a      	ldr	r2, [r7, #0]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d910      	bls.n	8007408 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073e6:	4b8d      	ldr	r3, [pc, #564]	; (800761c <HAL_RCC_ClockConfig+0x25c>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f023 0207 	bic.w	r2, r3, #7
 80073ee:	498b      	ldr	r1, [pc, #556]	; (800761c <HAL_RCC_ClockConfig+0x25c>)
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80073f6:	4b89      	ldr	r3, [pc, #548]	; (800761c <HAL_RCC_ClockConfig+0x25c>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 0307 	and.w	r3, r3, #7
 80073fe:	683a      	ldr	r2, [r7, #0]
 8007400:	429a      	cmp	r2, r3
 8007402:	d001      	beq.n	8007408 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e14a      	b.n	800769e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0302 	and.w	r3, r3, #2
 8007410:	2b00      	cmp	r3, #0
 8007412:	d008      	beq.n	8007426 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007414:	4b82      	ldr	r3, [pc, #520]	; (8007620 <HAL_RCC_ClockConfig+0x260>)
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	497f      	ldr	r1, [pc, #508]	; (8007620 <HAL_RCC_ClockConfig+0x260>)
 8007422:	4313      	orrs	r3, r2
 8007424:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 0301 	and.w	r3, r3, #1
 800742e:	2b00      	cmp	r3, #0
 8007430:	f000 80dc 	beq.w	80075ec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d13c      	bne.n	80074b6 <HAL_RCC_ClockConfig+0xf6>
 800743c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007440:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007442:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007444:	fa93 f3a3 	rbit	r3, r3
 8007448:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800744a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800744c:	fab3 f383 	clz	r3, r3
 8007450:	b2db      	uxtb	r3, r3
 8007452:	095b      	lsrs	r3, r3, #5
 8007454:	b2db      	uxtb	r3, r3
 8007456:	f043 0301 	orr.w	r3, r3, #1
 800745a:	b2db      	uxtb	r3, r3
 800745c:	2b01      	cmp	r3, #1
 800745e:	d102      	bne.n	8007466 <HAL_RCC_ClockConfig+0xa6>
 8007460:	4b6f      	ldr	r3, [pc, #444]	; (8007620 <HAL_RCC_ClockConfig+0x260>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	e00f      	b.n	8007486 <HAL_RCC_ClockConfig+0xc6>
 8007466:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800746a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800746c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800746e:	fa93 f3a3 	rbit	r3, r3
 8007472:	667b      	str	r3, [r7, #100]	; 0x64
 8007474:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007478:	663b      	str	r3, [r7, #96]	; 0x60
 800747a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800747c:	fa93 f3a3 	rbit	r3, r3
 8007480:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007482:	4b67      	ldr	r3, [pc, #412]	; (8007620 <HAL_RCC_ClockConfig+0x260>)
 8007484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007486:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800748a:	65ba      	str	r2, [r7, #88]	; 0x58
 800748c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800748e:	fa92 f2a2 	rbit	r2, r2
 8007492:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8007494:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007496:	fab2 f282 	clz	r2, r2
 800749a:	b2d2      	uxtb	r2, r2
 800749c:	f042 0220 	orr.w	r2, r2, #32
 80074a0:	b2d2      	uxtb	r2, r2
 80074a2:	f002 021f 	and.w	r2, r2, #31
 80074a6:	2101      	movs	r1, #1
 80074a8:	fa01 f202 	lsl.w	r2, r1, r2
 80074ac:	4013      	ands	r3, r2
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d17b      	bne.n	80075aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e0f3      	b.n	800769e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d13c      	bne.n	8007538 <HAL_RCC_ClockConfig+0x178>
 80074be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80074c2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074c6:	fa93 f3a3 	rbit	r3, r3
 80074ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80074cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074ce:	fab3 f383 	clz	r3, r3
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	095b      	lsrs	r3, r3, #5
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	f043 0301 	orr.w	r3, r3, #1
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d102      	bne.n	80074e8 <HAL_RCC_ClockConfig+0x128>
 80074e2:	4b4f      	ldr	r3, [pc, #316]	; (8007620 <HAL_RCC_ClockConfig+0x260>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	e00f      	b.n	8007508 <HAL_RCC_ClockConfig+0x148>
 80074e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80074ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074f0:	fa93 f3a3 	rbit	r3, r3
 80074f4:	647b      	str	r3, [r7, #68]	; 0x44
 80074f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80074fa:	643b      	str	r3, [r7, #64]	; 0x40
 80074fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074fe:	fa93 f3a3 	rbit	r3, r3
 8007502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007504:	4b46      	ldr	r3, [pc, #280]	; (8007620 <HAL_RCC_ClockConfig+0x260>)
 8007506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007508:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800750c:	63ba      	str	r2, [r7, #56]	; 0x38
 800750e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007510:	fa92 f2a2 	rbit	r2, r2
 8007514:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8007516:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007518:	fab2 f282 	clz	r2, r2
 800751c:	b2d2      	uxtb	r2, r2
 800751e:	f042 0220 	orr.w	r2, r2, #32
 8007522:	b2d2      	uxtb	r2, r2
 8007524:	f002 021f 	and.w	r2, r2, #31
 8007528:	2101      	movs	r1, #1
 800752a:	fa01 f202 	lsl.w	r2, r1, r2
 800752e:	4013      	ands	r3, r2
 8007530:	2b00      	cmp	r3, #0
 8007532:	d13a      	bne.n	80075aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	e0b2      	b.n	800769e <HAL_RCC_ClockConfig+0x2de>
 8007538:	2302      	movs	r3, #2
 800753a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800753c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753e:	fa93 f3a3 	rbit	r3, r3
 8007542:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007546:	fab3 f383 	clz	r3, r3
 800754a:	b2db      	uxtb	r3, r3
 800754c:	095b      	lsrs	r3, r3, #5
 800754e:	b2db      	uxtb	r3, r3
 8007550:	f043 0301 	orr.w	r3, r3, #1
 8007554:	b2db      	uxtb	r3, r3
 8007556:	2b01      	cmp	r3, #1
 8007558:	d102      	bne.n	8007560 <HAL_RCC_ClockConfig+0x1a0>
 800755a:	4b31      	ldr	r3, [pc, #196]	; (8007620 <HAL_RCC_ClockConfig+0x260>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	e00d      	b.n	800757c <HAL_RCC_ClockConfig+0x1bc>
 8007560:	2302      	movs	r3, #2
 8007562:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007566:	fa93 f3a3 	rbit	r3, r3
 800756a:	627b      	str	r3, [r7, #36]	; 0x24
 800756c:	2302      	movs	r3, #2
 800756e:	623b      	str	r3, [r7, #32]
 8007570:	6a3b      	ldr	r3, [r7, #32]
 8007572:	fa93 f3a3 	rbit	r3, r3
 8007576:	61fb      	str	r3, [r7, #28]
 8007578:	4b29      	ldr	r3, [pc, #164]	; (8007620 <HAL_RCC_ClockConfig+0x260>)
 800757a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757c:	2202      	movs	r2, #2
 800757e:	61ba      	str	r2, [r7, #24]
 8007580:	69ba      	ldr	r2, [r7, #24]
 8007582:	fa92 f2a2 	rbit	r2, r2
 8007586:	617a      	str	r2, [r7, #20]
  return result;
 8007588:	697a      	ldr	r2, [r7, #20]
 800758a:	fab2 f282 	clz	r2, r2
 800758e:	b2d2      	uxtb	r2, r2
 8007590:	f042 0220 	orr.w	r2, r2, #32
 8007594:	b2d2      	uxtb	r2, r2
 8007596:	f002 021f 	and.w	r2, r2, #31
 800759a:	2101      	movs	r1, #1
 800759c:	fa01 f202 	lsl.w	r2, r1, r2
 80075a0:	4013      	ands	r3, r2
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d101      	bne.n	80075aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e079      	b.n	800769e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075aa:	4b1d      	ldr	r3, [pc, #116]	; (8007620 <HAL_RCC_ClockConfig+0x260>)
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	f023 0203 	bic.w	r2, r3, #3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	491a      	ldr	r1, [pc, #104]	; (8007620 <HAL_RCC_ClockConfig+0x260>)
 80075b8:	4313      	orrs	r3, r2
 80075ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80075bc:	f7fc f9e4 	bl	8003988 <HAL_GetTick>
 80075c0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075c2:	e00a      	b.n	80075da <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075c4:	f7fc f9e0 	bl	8003988 <HAL_GetTick>
 80075c8:	4602      	mov	r2, r0
 80075ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075cc:	1ad3      	subs	r3, r2, r3
 80075ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d901      	bls.n	80075da <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80075d6:	2303      	movs	r3, #3
 80075d8:	e061      	b.n	800769e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075da:	4b11      	ldr	r3, [pc, #68]	; (8007620 <HAL_RCC_ClockConfig+0x260>)
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	f003 020c 	and.w	r2, r3, #12
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d1eb      	bne.n	80075c4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80075ec:	4b0b      	ldr	r3, [pc, #44]	; (800761c <HAL_RCC_ClockConfig+0x25c>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 0307 	and.w	r3, r3, #7
 80075f4:	683a      	ldr	r2, [r7, #0]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d214      	bcs.n	8007624 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075fa:	4b08      	ldr	r3, [pc, #32]	; (800761c <HAL_RCC_ClockConfig+0x25c>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f023 0207 	bic.w	r2, r3, #7
 8007602:	4906      	ldr	r1, [pc, #24]	; (800761c <HAL_RCC_ClockConfig+0x25c>)
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	4313      	orrs	r3, r2
 8007608:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800760a:	4b04      	ldr	r3, [pc, #16]	; (800761c <HAL_RCC_ClockConfig+0x25c>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 0307 	and.w	r3, r3, #7
 8007612:	683a      	ldr	r2, [r7, #0]
 8007614:	429a      	cmp	r2, r3
 8007616:	d005      	beq.n	8007624 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	e040      	b.n	800769e <HAL_RCC_ClockConfig+0x2de>
 800761c:	40022000 	.word	0x40022000
 8007620:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 0304 	and.w	r3, r3, #4
 800762c:	2b00      	cmp	r3, #0
 800762e:	d008      	beq.n	8007642 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007630:	4b1d      	ldr	r3, [pc, #116]	; (80076a8 <HAL_RCC_ClockConfig+0x2e8>)
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	491a      	ldr	r1, [pc, #104]	; (80076a8 <HAL_RCC_ClockConfig+0x2e8>)
 800763e:	4313      	orrs	r3, r2
 8007640:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 0308 	and.w	r3, r3, #8
 800764a:	2b00      	cmp	r3, #0
 800764c:	d009      	beq.n	8007662 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800764e:	4b16      	ldr	r3, [pc, #88]	; (80076a8 <HAL_RCC_ClockConfig+0x2e8>)
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	00db      	lsls	r3, r3, #3
 800765c:	4912      	ldr	r1, [pc, #72]	; (80076a8 <HAL_RCC_ClockConfig+0x2e8>)
 800765e:	4313      	orrs	r3, r2
 8007660:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007662:	f000 f829 	bl	80076b8 <HAL_RCC_GetSysClockFreq>
 8007666:	4601      	mov	r1, r0
 8007668:	4b0f      	ldr	r3, [pc, #60]	; (80076a8 <HAL_RCC_ClockConfig+0x2e8>)
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007670:	22f0      	movs	r2, #240	; 0xf0
 8007672:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007674:	693a      	ldr	r2, [r7, #16]
 8007676:	fa92 f2a2 	rbit	r2, r2
 800767a:	60fa      	str	r2, [r7, #12]
  return result;
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	fab2 f282 	clz	r2, r2
 8007682:	b2d2      	uxtb	r2, r2
 8007684:	40d3      	lsrs	r3, r2
 8007686:	4a09      	ldr	r2, [pc, #36]	; (80076ac <HAL_RCC_ClockConfig+0x2ec>)
 8007688:	5cd3      	ldrb	r3, [r2, r3]
 800768a:	fa21 f303 	lsr.w	r3, r1, r3
 800768e:	4a08      	ldr	r2, [pc, #32]	; (80076b0 <HAL_RCC_ClockConfig+0x2f0>)
 8007690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8007692:	4b08      	ldr	r3, [pc, #32]	; (80076b4 <HAL_RCC_ClockConfig+0x2f4>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4618      	mov	r0, r3
 8007698:	f7fc f932 	bl	8003900 <HAL_InitTick>
  
  return HAL_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3778      	adds	r7, #120	; 0x78
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	40021000 	.word	0x40021000
 80076ac:	0800acf8 	.word	0x0800acf8
 80076b0:	20000010 	.word	0x20000010
 80076b4:	20000014 	.word	0x20000014

080076b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b08b      	sub	sp, #44	; 0x2c
 80076bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80076be:	2300      	movs	r3, #0
 80076c0:	61fb      	str	r3, [r7, #28]
 80076c2:	2300      	movs	r3, #0
 80076c4:	61bb      	str	r3, [r7, #24]
 80076c6:	2300      	movs	r3, #0
 80076c8:	627b      	str	r3, [r7, #36]	; 0x24
 80076ca:	2300      	movs	r3, #0
 80076cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80076ce:	2300      	movs	r3, #0
 80076d0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80076d2:	4b2a      	ldr	r3, [pc, #168]	; (800777c <HAL_RCC_GetSysClockFreq+0xc4>)
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	f003 030c 	and.w	r3, r3, #12
 80076de:	2b04      	cmp	r3, #4
 80076e0:	d002      	beq.n	80076e8 <HAL_RCC_GetSysClockFreq+0x30>
 80076e2:	2b08      	cmp	r3, #8
 80076e4:	d003      	beq.n	80076ee <HAL_RCC_GetSysClockFreq+0x36>
 80076e6:	e03f      	b.n	8007768 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80076e8:	4b25      	ldr	r3, [pc, #148]	; (8007780 <HAL_RCC_GetSysClockFreq+0xc8>)
 80076ea:	623b      	str	r3, [r7, #32]
      break;
 80076ec:	e03f      	b.n	800776e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80076f4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80076f8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076fa:	68ba      	ldr	r2, [r7, #8]
 80076fc:	fa92 f2a2 	rbit	r2, r2
 8007700:	607a      	str	r2, [r7, #4]
  return result;
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	fab2 f282 	clz	r2, r2
 8007708:	b2d2      	uxtb	r2, r2
 800770a:	40d3      	lsrs	r3, r2
 800770c:	4a1d      	ldr	r2, [pc, #116]	; (8007784 <HAL_RCC_GetSysClockFreq+0xcc>)
 800770e:	5cd3      	ldrb	r3, [r2, r3]
 8007710:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8007712:	4b1a      	ldr	r3, [pc, #104]	; (800777c <HAL_RCC_GetSysClockFreq+0xc4>)
 8007714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007716:	f003 030f 	and.w	r3, r3, #15
 800771a:	220f      	movs	r2, #15
 800771c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	fa92 f2a2 	rbit	r2, r2
 8007724:	60fa      	str	r2, [r7, #12]
  return result;
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	fab2 f282 	clz	r2, r2
 800772c:	b2d2      	uxtb	r2, r2
 800772e:	40d3      	lsrs	r3, r2
 8007730:	4a15      	ldr	r2, [pc, #84]	; (8007788 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007732:	5cd3      	ldrb	r3, [r2, r3]
 8007734:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800773c:	2b00      	cmp	r3, #0
 800773e:	d008      	beq.n	8007752 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007740:	4a0f      	ldr	r2, [pc, #60]	; (8007780 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	fbb2 f2f3 	udiv	r2, r2, r3
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	fb02 f303 	mul.w	r3, r2, r3
 800774e:	627b      	str	r3, [r7, #36]	; 0x24
 8007750:	e007      	b.n	8007762 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007752:	4a0b      	ldr	r2, [pc, #44]	; (8007780 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	fbb2 f2f3 	udiv	r2, r2, r3
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	fb02 f303 	mul.w	r3, r2, r3
 8007760:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007764:	623b      	str	r3, [r7, #32]
      break;
 8007766:	e002      	b.n	800776e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007768:	4b05      	ldr	r3, [pc, #20]	; (8007780 <HAL_RCC_GetSysClockFreq+0xc8>)
 800776a:	623b      	str	r3, [r7, #32]
      break;
 800776c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800776e:	6a3b      	ldr	r3, [r7, #32]
}
 8007770:	4618      	mov	r0, r3
 8007772:	372c      	adds	r7, #44	; 0x2c
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr
 800777c:	40021000 	.word	0x40021000
 8007780:	007a1200 	.word	0x007a1200
 8007784:	0800ad10 	.word	0x0800ad10
 8007788:	0800ad20 	.word	0x0800ad20

0800778c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800778c:	b480      	push	{r7}
 800778e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007790:	4b03      	ldr	r3, [pc, #12]	; (80077a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007792:	681b      	ldr	r3, [r3, #0]
}
 8007794:	4618      	mov	r0, r3
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	20000010 	.word	0x20000010

080077a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80077aa:	f7ff ffef 	bl	800778c <HAL_RCC_GetHCLKFreq>
 80077ae:	4601      	mov	r1, r0
 80077b0:	4b0b      	ldr	r3, [pc, #44]	; (80077e0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80077b8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80077bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	fa92 f2a2 	rbit	r2, r2
 80077c4:	603a      	str	r2, [r7, #0]
  return result;
 80077c6:	683a      	ldr	r2, [r7, #0]
 80077c8:	fab2 f282 	clz	r2, r2
 80077cc:	b2d2      	uxtb	r2, r2
 80077ce:	40d3      	lsrs	r3, r2
 80077d0:	4a04      	ldr	r2, [pc, #16]	; (80077e4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80077d2:	5cd3      	ldrb	r3, [r2, r3]
 80077d4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80077d8:	4618      	mov	r0, r3
 80077da:	3708      	adds	r7, #8
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	40021000 	.word	0x40021000
 80077e4:	0800ad08 	.word	0x0800ad08

080077e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80077ee:	f7ff ffcd 	bl	800778c <HAL_RCC_GetHCLKFreq>
 80077f2:	4601      	mov	r1, r0
 80077f4:	4b0b      	ldr	r3, [pc, #44]	; (8007824 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80077fc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007800:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	fa92 f2a2 	rbit	r2, r2
 8007808:	603a      	str	r2, [r7, #0]
  return result;
 800780a:	683a      	ldr	r2, [r7, #0]
 800780c:	fab2 f282 	clz	r2, r2
 8007810:	b2d2      	uxtb	r2, r2
 8007812:	40d3      	lsrs	r3, r2
 8007814:	4a04      	ldr	r2, [pc, #16]	; (8007828 <HAL_RCC_GetPCLK2Freq+0x40>)
 8007816:	5cd3      	ldrb	r3, [r2, r3]
 8007818:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800781c:	4618      	mov	r0, r3
 800781e:	3708      	adds	r7, #8
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	40021000 	.word	0x40021000
 8007828:	0800ad08 	.word	0x0800ad08

0800782c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b092      	sub	sp, #72	; 0x48
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007834:	2300      	movs	r3, #0
 8007836:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8007838:	2300      	movs	r3, #0
 800783a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800783c:	2300      	movs	r3, #0
 800783e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800784a:	2b00      	cmp	r3, #0
 800784c:	f000 80d4 	beq.w	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007850:	4b4e      	ldr	r3, [pc, #312]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007852:	69db      	ldr	r3, [r3, #28]
 8007854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007858:	2b00      	cmp	r3, #0
 800785a:	d10e      	bne.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800785c:	4b4b      	ldr	r3, [pc, #300]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800785e:	69db      	ldr	r3, [r3, #28]
 8007860:	4a4a      	ldr	r2, [pc, #296]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007866:	61d3      	str	r3, [r2, #28]
 8007868:	4b48      	ldr	r3, [pc, #288]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800786a:	69db      	ldr	r3, [r3, #28]
 800786c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007870:	60bb      	str	r3, [r7, #8]
 8007872:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007874:	2301      	movs	r3, #1
 8007876:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800787a:	4b45      	ldr	r3, [pc, #276]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007882:	2b00      	cmp	r3, #0
 8007884:	d118      	bne.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007886:	4b42      	ldr	r3, [pc, #264]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a41      	ldr	r2, [pc, #260]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800788c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007890:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007892:	f7fc f879 	bl	8003988 <HAL_GetTick>
 8007896:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007898:	e008      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800789a:	f7fc f875 	bl	8003988 <HAL_GetTick>
 800789e:	4602      	mov	r2, r0
 80078a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	2b64      	cmp	r3, #100	; 0x64
 80078a6:	d901      	bls.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80078a8:	2303      	movs	r3, #3
 80078aa:	e1d6      	b.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078ac:	4b38      	ldr	r3, [pc, #224]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d0f0      	beq.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80078b8:	4b34      	ldr	r3, [pc, #208]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80078ba:	6a1b      	ldr	r3, [r3, #32]
 80078bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80078c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f000 8084 	beq.w	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d07c      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80078d8:	4b2c      	ldr	r3, [pc, #176]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80078da:	6a1b      	ldr	r3, [r3, #32]
 80078dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80078e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ea:	fa93 f3a3 	rbit	r3, r3
 80078ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80078f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80078f2:	fab3 f383 	clz	r3, r3
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	461a      	mov	r2, r3
 80078fa:	4b26      	ldr	r3, [pc, #152]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80078fc:	4413      	add	r3, r2
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	461a      	mov	r2, r3
 8007902:	2301      	movs	r3, #1
 8007904:	6013      	str	r3, [r2, #0]
 8007906:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800790a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800790c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790e:	fa93 f3a3 	rbit	r3, r3
 8007912:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007916:	fab3 f383 	clz	r3, r3
 800791a:	b2db      	uxtb	r3, r3
 800791c:	461a      	mov	r2, r3
 800791e:	4b1d      	ldr	r3, [pc, #116]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007920:	4413      	add	r3, r2
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	461a      	mov	r2, r3
 8007926:	2300      	movs	r3, #0
 8007928:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800792a:	4a18      	ldr	r2, [pc, #96]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800792c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800792e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007932:	f003 0301 	and.w	r3, r3, #1
 8007936:	2b00      	cmp	r3, #0
 8007938:	d04b      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800793a:	f7fc f825 	bl	8003988 <HAL_GetTick>
 800793e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007940:	e00a      	b.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007942:	f7fc f821 	bl	8003988 <HAL_GetTick>
 8007946:	4602      	mov	r2, r0
 8007948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007950:	4293      	cmp	r3, r2
 8007952:	d901      	bls.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007954:	2303      	movs	r3, #3
 8007956:	e180      	b.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007958:	2302      	movs	r3, #2
 800795a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800795c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795e:	fa93 f3a3 	rbit	r3, r3
 8007962:	627b      	str	r3, [r7, #36]	; 0x24
 8007964:	2302      	movs	r3, #2
 8007966:	623b      	str	r3, [r7, #32]
 8007968:	6a3b      	ldr	r3, [r7, #32]
 800796a:	fa93 f3a3 	rbit	r3, r3
 800796e:	61fb      	str	r3, [r7, #28]
  return result;
 8007970:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007972:	fab3 f383 	clz	r3, r3
 8007976:	b2db      	uxtb	r3, r3
 8007978:	095b      	lsrs	r3, r3, #5
 800797a:	b2db      	uxtb	r3, r3
 800797c:	f043 0302 	orr.w	r3, r3, #2
 8007980:	b2db      	uxtb	r3, r3
 8007982:	2b02      	cmp	r3, #2
 8007984:	d108      	bne.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8007986:	4b01      	ldr	r3, [pc, #4]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007988:	6a1b      	ldr	r3, [r3, #32]
 800798a:	e00d      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800798c:	40021000 	.word	0x40021000
 8007990:	40007000 	.word	0x40007000
 8007994:	10908100 	.word	0x10908100
 8007998:	2302      	movs	r3, #2
 800799a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	fa93 f3a3 	rbit	r3, r3
 80079a2:	617b      	str	r3, [r7, #20]
 80079a4:	4ba0      	ldr	r3, [pc, #640]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80079a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a8:	2202      	movs	r2, #2
 80079aa:	613a      	str	r2, [r7, #16]
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	fa92 f2a2 	rbit	r2, r2
 80079b2:	60fa      	str	r2, [r7, #12]
  return result;
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	fab2 f282 	clz	r2, r2
 80079ba:	b2d2      	uxtb	r2, r2
 80079bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079c0:	b2d2      	uxtb	r2, r2
 80079c2:	f002 021f 	and.w	r2, r2, #31
 80079c6:	2101      	movs	r1, #1
 80079c8:	fa01 f202 	lsl.w	r2, r1, r2
 80079cc:	4013      	ands	r3, r2
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d0b7      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80079d2:	4b95      	ldr	r3, [pc, #596]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	4992      	ldr	r1, [pc, #584]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80079e0:	4313      	orrs	r3, r2
 80079e2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80079e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d105      	bne.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079ec:	4b8e      	ldr	r3, [pc, #568]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80079ee:	69db      	ldr	r3, [r3, #28]
 80079f0:	4a8d      	ldr	r2, [pc, #564]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80079f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 0301 	and.w	r3, r3, #1
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d008      	beq.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007a04:	4b88      	ldr	r3, [pc, #544]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a08:	f023 0203 	bic.w	r2, r3, #3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	4985      	ldr	r1, [pc, #532]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007a12:	4313      	orrs	r3, r2
 8007a14:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 0302 	and.w	r3, r3, #2
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d008      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007a22:	4b81      	ldr	r3, [pc, #516]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	497e      	ldr	r1, [pc, #504]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007a30:	4313      	orrs	r3, r2
 8007a32:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f003 0304 	and.w	r3, r3, #4
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d008      	beq.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007a40:	4b79      	ldr	r3, [pc, #484]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	4976      	ldr	r1, [pc, #472]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 0320 	and.w	r3, r3, #32
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d008      	beq.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007a5e:	4b72      	ldr	r3, [pc, #456]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a62:	f023 0210 	bic.w	r2, r3, #16
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	69db      	ldr	r3, [r3, #28]
 8007a6a:	496f      	ldr	r1, [pc, #444]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d008      	beq.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007a7c:	4b6a      	ldr	r3, [pc, #424]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a88:	4967      	ldr	r1, [pc, #412]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d008      	beq.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007a9a:	4b63      	ldr	r3, [pc, #396]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a9e:	f023 0220 	bic.w	r2, r3, #32
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a1b      	ldr	r3, [r3, #32]
 8007aa6:	4960      	ldr	r1, [pc, #384]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d008      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007ab8:	4b5b      	ldr	r3, [pc, #364]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007abc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac4:	4958      	ldr	r1, [pc, #352]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 0308 	and.w	r3, r3, #8
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d008      	beq.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007ad6:	4b54      	ldr	r3, [pc, #336]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ada:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	695b      	ldr	r3, [r3, #20]
 8007ae2:	4951      	ldr	r1, [pc, #324]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 0310 	and.w	r3, r3, #16
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d008      	beq.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007af4:	4b4c      	ldr	r3, [pc, #304]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	699b      	ldr	r3, [r3, #24]
 8007b00:	4949      	ldr	r1, [pc, #292]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007b02:	4313      	orrs	r3, r2
 8007b04:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d008      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007b12:	4b45      	ldr	r3, [pc, #276]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b1e:	4942      	ldr	r1, [pc, #264]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007b20:	4313      	orrs	r3, r2
 8007b22:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d008      	beq.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007b30:	4b3d      	ldr	r3, [pc, #244]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b34:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b3c:	493a      	ldr	r1, [pc, #232]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d008      	beq.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007b4e:	4b36      	ldr	r3, [pc, #216]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b52:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5a:	4933      	ldr	r1, [pc, #204]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d008      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007b6c:	4b2e      	ldr	r3, [pc, #184]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b78:	492b      	ldr	r1, [pc, #172]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d008      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8007b8a:	4b27      	ldr	r3, [pc, #156]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b8e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b96:	4924      	ldr	r1, [pc, #144]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d008      	beq.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8007ba8:	4b1f      	ldr	r3, [pc, #124]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb4:	491c      	ldr	r1, [pc, #112]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d008      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8007bc6:	4b18      	ldr	r3, [pc, #96]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bd2:	4915      	ldr	r1, [pc, #84]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d008      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007be4:	4b10      	ldr	r3, [pc, #64]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bf0:	490d      	ldr	r1, [pc, #52]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d008      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8007c02:	4b09      	ldr	r3, [pc, #36]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c06:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c0e:	4906      	ldr	r1, [pc, #24]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007c10:	4313      	orrs	r3, r2
 8007c12:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00c      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8007c20:	4b01      	ldr	r3, [pc, #4]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c24:	e002      	b.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8007c26:	bf00      	nop
 8007c28:	40021000 	.word	0x40021000
 8007c2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c34:	490b      	ldr	r1, [pc, #44]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007c36:	4313      	orrs	r3, r2
 8007c38:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d008      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8007c46:	4b07      	ldr	r3, [pc, #28]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c4a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c52:	4904      	ldr	r1, [pc, #16]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007c54:	4313      	orrs	r3, r2
 8007c56:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3748      	adds	r7, #72	; 0x48
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	40021000 	.word	0x40021000

08007c68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d101      	bne.n	8007c7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	e049      	b.n	8007d0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d106      	bne.n	8007c94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f7fb f99a 	bl	8002fc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2202      	movs	r2, #2
 8007c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	3304      	adds	r3, #4
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	4610      	mov	r0, r2
 8007ca8:	f000 fb14 	bl	80082d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3708      	adds	r7, #8
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
	...

08007d18 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b085      	sub	sp, #20
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d001      	beq.n	8007d30 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e047      	b.n	8007dc0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2202      	movs	r2, #2
 8007d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a23      	ldr	r2, [pc, #140]	; (8007dcc <HAL_TIM_Base_Start+0xb4>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d01d      	beq.n	8007d7e <HAL_TIM_Base_Start+0x66>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d4a:	d018      	beq.n	8007d7e <HAL_TIM_Base_Start+0x66>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a1f      	ldr	r2, [pc, #124]	; (8007dd0 <HAL_TIM_Base_Start+0xb8>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d013      	beq.n	8007d7e <HAL_TIM_Base_Start+0x66>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a1e      	ldr	r2, [pc, #120]	; (8007dd4 <HAL_TIM_Base_Start+0xbc>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d00e      	beq.n	8007d7e <HAL_TIM_Base_Start+0x66>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a1c      	ldr	r2, [pc, #112]	; (8007dd8 <HAL_TIM_Base_Start+0xc0>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d009      	beq.n	8007d7e <HAL_TIM_Base_Start+0x66>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a1b      	ldr	r2, [pc, #108]	; (8007ddc <HAL_TIM_Base_Start+0xc4>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d004      	beq.n	8007d7e <HAL_TIM_Base_Start+0x66>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a19      	ldr	r2, [pc, #100]	; (8007de0 <HAL_TIM_Base_Start+0xc8>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d115      	bne.n	8007daa <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	689a      	ldr	r2, [r3, #8]
 8007d84:	4b17      	ldr	r3, [pc, #92]	; (8007de4 <HAL_TIM_Base_Start+0xcc>)
 8007d86:	4013      	ands	r3, r2
 8007d88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2b06      	cmp	r3, #6
 8007d8e:	d015      	beq.n	8007dbc <HAL_TIM_Base_Start+0xa4>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d96:	d011      	beq.n	8007dbc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f042 0201 	orr.w	r2, r2, #1
 8007da6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007da8:	e008      	b.n	8007dbc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f042 0201 	orr.w	r2, r2, #1
 8007db8:	601a      	str	r2, [r3, #0]
 8007dba:	e000      	b.n	8007dbe <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dbc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3714      	adds	r7, #20
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr
 8007dcc:	40012c00 	.word	0x40012c00
 8007dd0:	40000400 	.word	0x40000400
 8007dd4:	40000800 	.word	0x40000800
 8007dd8:	40013400 	.word	0x40013400
 8007ddc:	40014000 	.word	0x40014000
 8007de0:	40015000 	.word	0x40015000
 8007de4:	00010007 	.word	0x00010007

08007de8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b085      	sub	sp, #20
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d001      	beq.n	8007e00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e04f      	b.n	8007ea0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2202      	movs	r2, #2
 8007e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68da      	ldr	r2, [r3, #12]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f042 0201 	orr.w	r2, r2, #1
 8007e16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a23      	ldr	r2, [pc, #140]	; (8007eac <HAL_TIM_Base_Start_IT+0xc4>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d01d      	beq.n	8007e5e <HAL_TIM_Base_Start_IT+0x76>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e2a:	d018      	beq.n	8007e5e <HAL_TIM_Base_Start_IT+0x76>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a1f      	ldr	r2, [pc, #124]	; (8007eb0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d013      	beq.n	8007e5e <HAL_TIM_Base_Start_IT+0x76>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a1e      	ldr	r2, [pc, #120]	; (8007eb4 <HAL_TIM_Base_Start_IT+0xcc>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d00e      	beq.n	8007e5e <HAL_TIM_Base_Start_IT+0x76>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a1c      	ldr	r2, [pc, #112]	; (8007eb8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d009      	beq.n	8007e5e <HAL_TIM_Base_Start_IT+0x76>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a1b      	ldr	r2, [pc, #108]	; (8007ebc <HAL_TIM_Base_Start_IT+0xd4>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d004      	beq.n	8007e5e <HAL_TIM_Base_Start_IT+0x76>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a19      	ldr	r2, [pc, #100]	; (8007ec0 <HAL_TIM_Base_Start_IT+0xd8>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d115      	bne.n	8007e8a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	689a      	ldr	r2, [r3, #8]
 8007e64:	4b17      	ldr	r3, [pc, #92]	; (8007ec4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007e66:	4013      	ands	r3, r2
 8007e68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2b06      	cmp	r3, #6
 8007e6e:	d015      	beq.n	8007e9c <HAL_TIM_Base_Start_IT+0xb4>
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e76:	d011      	beq.n	8007e9c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f042 0201 	orr.w	r2, r2, #1
 8007e86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e88:	e008      	b.n	8007e9c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f042 0201 	orr.w	r2, r2, #1
 8007e98:	601a      	str	r2, [r3, #0]
 8007e9a:	e000      	b.n	8007e9e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3714      	adds	r7, #20
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr
 8007eac:	40012c00 	.word	0x40012c00
 8007eb0:	40000400 	.word	0x40000400
 8007eb4:	40000800 	.word	0x40000800
 8007eb8:	40013400 	.word	0x40013400
 8007ebc:	40014000 	.word	0x40014000
 8007ec0:	40015000 	.word	0x40015000
 8007ec4:	00010007 	.word	0x00010007

08007ec8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	f003 0302 	and.w	r3, r3, #2
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d122      	bne.n	8007f24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	f003 0302 	and.w	r3, r3, #2
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	d11b      	bne.n	8007f24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f06f 0202 	mvn.w	r2, #2
 8007ef4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	699b      	ldr	r3, [r3, #24]
 8007f02:	f003 0303 	and.w	r3, r3, #3
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d003      	beq.n	8007f12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 f9c3 	bl	8008296 <HAL_TIM_IC_CaptureCallback>
 8007f10:	e005      	b.n	8007f1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f9b5 	bl	8008282 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 f9c6 	bl	80082aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	f003 0304 	and.w	r3, r3, #4
 8007f2e:	2b04      	cmp	r3, #4
 8007f30:	d122      	bne.n	8007f78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	f003 0304 	and.w	r3, r3, #4
 8007f3c:	2b04      	cmp	r3, #4
 8007f3e:	d11b      	bne.n	8007f78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f06f 0204 	mvn.w	r2, #4
 8007f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2202      	movs	r2, #2
 8007f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	699b      	ldr	r3, [r3, #24]
 8007f56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d003      	beq.n	8007f66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f999 	bl	8008296 <HAL_TIM_IC_CaptureCallback>
 8007f64:	e005      	b.n	8007f72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f98b 	bl	8008282 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 f99c 	bl	80082aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	691b      	ldr	r3, [r3, #16]
 8007f7e:	f003 0308 	and.w	r3, r3, #8
 8007f82:	2b08      	cmp	r3, #8
 8007f84:	d122      	bne.n	8007fcc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	f003 0308 	and.w	r3, r3, #8
 8007f90:	2b08      	cmp	r3, #8
 8007f92:	d11b      	bne.n	8007fcc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f06f 0208 	mvn.w	r2, #8
 8007f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2204      	movs	r2, #4
 8007fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	69db      	ldr	r3, [r3, #28]
 8007faa:	f003 0303 	and.w	r3, r3, #3
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d003      	beq.n	8007fba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 f96f 	bl	8008296 <HAL_TIM_IC_CaptureCallback>
 8007fb8:	e005      	b.n	8007fc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f961 	bl	8008282 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 f972 	bl	80082aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	691b      	ldr	r3, [r3, #16]
 8007fd2:	f003 0310 	and.w	r3, r3, #16
 8007fd6:	2b10      	cmp	r3, #16
 8007fd8:	d122      	bne.n	8008020 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	f003 0310 	and.w	r3, r3, #16
 8007fe4:	2b10      	cmp	r3, #16
 8007fe6:	d11b      	bne.n	8008020 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f06f 0210 	mvn.w	r2, #16
 8007ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2208      	movs	r2, #8
 8007ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	69db      	ldr	r3, [r3, #28]
 8007ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008002:	2b00      	cmp	r3, #0
 8008004:	d003      	beq.n	800800e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 f945 	bl	8008296 <HAL_TIM_IC_CaptureCallback>
 800800c:	e005      	b.n	800801a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 f937 	bl	8008282 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 f948 	bl	80082aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	f003 0301 	and.w	r3, r3, #1
 800802a:	2b01      	cmp	r3, #1
 800802c:	d10e      	bne.n	800804c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	f003 0301 	and.w	r3, r3, #1
 8008038:	2b01      	cmp	r3, #1
 800803a:	d107      	bne.n	800804c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f06f 0201 	mvn.w	r2, #1
 8008044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f7fa fe50 	bl	8002cec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008056:	2b80      	cmp	r3, #128	; 0x80
 8008058:	d10e      	bne.n	8008078 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008064:	2b80      	cmp	r3, #128	; 0x80
 8008066:	d107      	bne.n	8008078 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 fafc 	bl	8008670 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008086:	d10e      	bne.n	80080a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008092:	2b80      	cmp	r3, #128	; 0x80
 8008094:	d107      	bne.n	80080a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800809e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 faef 	bl	8008684 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	691b      	ldr	r3, [r3, #16]
 80080ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080b0:	2b40      	cmp	r3, #64	; 0x40
 80080b2:	d10e      	bne.n	80080d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080be:	2b40      	cmp	r3, #64	; 0x40
 80080c0:	d107      	bne.n	80080d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80080ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 f8f6 	bl	80082be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	691b      	ldr	r3, [r3, #16]
 80080d8:	f003 0320 	and.w	r3, r3, #32
 80080dc:	2b20      	cmp	r3, #32
 80080de:	d10e      	bne.n	80080fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	f003 0320 	and.w	r3, r3, #32
 80080ea:	2b20      	cmp	r3, #32
 80080ec:	d107      	bne.n	80080fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f06f 0220 	mvn.w	r2, #32
 80080f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 faaf 	bl	800865c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80080fe:	bf00      	nop
 8008100:	3708      	adds	r7, #8
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b084      	sub	sp, #16
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
 800810e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008110:	2300      	movs	r3, #0
 8008112:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800811a:	2b01      	cmp	r3, #1
 800811c:	d101      	bne.n	8008122 <HAL_TIM_ConfigClockSource+0x1c>
 800811e:	2302      	movs	r3, #2
 8008120:	e0ab      	b.n	800827a <HAL_TIM_ConfigClockSource+0x174>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2201      	movs	r2, #1
 8008126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2202      	movs	r2, #2
 800812e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008140:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008144:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800814c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2b40      	cmp	r3, #64	; 0x40
 800815c:	d067      	beq.n	800822e <HAL_TIM_ConfigClockSource+0x128>
 800815e:	2b40      	cmp	r3, #64	; 0x40
 8008160:	d80b      	bhi.n	800817a <HAL_TIM_ConfigClockSource+0x74>
 8008162:	2b10      	cmp	r3, #16
 8008164:	d073      	beq.n	800824e <HAL_TIM_ConfigClockSource+0x148>
 8008166:	2b10      	cmp	r3, #16
 8008168:	d802      	bhi.n	8008170 <HAL_TIM_ConfigClockSource+0x6a>
 800816a:	2b00      	cmp	r3, #0
 800816c:	d06f      	beq.n	800824e <HAL_TIM_ConfigClockSource+0x148>
 800816e:	e077      	b.n	8008260 <HAL_TIM_ConfigClockSource+0x15a>
 8008170:	2b20      	cmp	r3, #32
 8008172:	d06c      	beq.n	800824e <HAL_TIM_ConfigClockSource+0x148>
 8008174:	2b30      	cmp	r3, #48	; 0x30
 8008176:	d06a      	beq.n	800824e <HAL_TIM_ConfigClockSource+0x148>
 8008178:	e072      	b.n	8008260 <HAL_TIM_ConfigClockSource+0x15a>
 800817a:	2b70      	cmp	r3, #112	; 0x70
 800817c:	d00d      	beq.n	800819a <HAL_TIM_ConfigClockSource+0x94>
 800817e:	2b70      	cmp	r3, #112	; 0x70
 8008180:	d804      	bhi.n	800818c <HAL_TIM_ConfigClockSource+0x86>
 8008182:	2b50      	cmp	r3, #80	; 0x50
 8008184:	d033      	beq.n	80081ee <HAL_TIM_ConfigClockSource+0xe8>
 8008186:	2b60      	cmp	r3, #96	; 0x60
 8008188:	d041      	beq.n	800820e <HAL_TIM_ConfigClockSource+0x108>
 800818a:	e069      	b.n	8008260 <HAL_TIM_ConfigClockSource+0x15a>
 800818c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008190:	d069      	beq.n	8008266 <HAL_TIM_ConfigClockSource+0x160>
 8008192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008196:	d017      	beq.n	80081c8 <HAL_TIM_ConfigClockSource+0xc2>
 8008198:	e062      	b.n	8008260 <HAL_TIM_ConfigClockSource+0x15a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6818      	ldr	r0, [r3, #0]
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	6899      	ldr	r1, [r3, #8]
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	685a      	ldr	r2, [r3, #4]
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	68db      	ldr	r3, [r3, #12]
 80081aa:	f000 f9ab 	bl	8008504 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80081bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	68ba      	ldr	r2, [r7, #8]
 80081c4:	609a      	str	r2, [r3, #8]
      break;
 80081c6:	e04f      	b.n	8008268 <HAL_TIM_ConfigClockSource+0x162>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6818      	ldr	r0, [r3, #0]
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	6899      	ldr	r1, [r3, #8]
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	685a      	ldr	r2, [r3, #4]
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	f000 f994 	bl	8008504 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	689a      	ldr	r2, [r3, #8]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80081ea:	609a      	str	r2, [r3, #8]
      break;
 80081ec:	e03c      	b.n	8008268 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6818      	ldr	r0, [r3, #0]
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	6859      	ldr	r1, [r3, #4]
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	461a      	mov	r2, r3
 80081fc:	f000 f908 	bl	8008410 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2150      	movs	r1, #80	; 0x50
 8008206:	4618      	mov	r0, r3
 8008208:	f000 f961 	bl	80084ce <TIM_ITRx_SetConfig>
      break;
 800820c:	e02c      	b.n	8008268 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6818      	ldr	r0, [r3, #0]
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	6859      	ldr	r1, [r3, #4]
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	461a      	mov	r2, r3
 800821c:	f000 f927 	bl	800846e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2160      	movs	r1, #96	; 0x60
 8008226:	4618      	mov	r0, r3
 8008228:	f000 f951 	bl	80084ce <TIM_ITRx_SetConfig>
      break;
 800822c:	e01c      	b.n	8008268 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6818      	ldr	r0, [r3, #0]
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	6859      	ldr	r1, [r3, #4]
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	461a      	mov	r2, r3
 800823c:	f000 f8e8 	bl	8008410 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2140      	movs	r1, #64	; 0x40
 8008246:	4618      	mov	r0, r3
 8008248:	f000 f941 	bl	80084ce <TIM_ITRx_SetConfig>
      break;
 800824c:	e00c      	b.n	8008268 <HAL_TIM_ConfigClockSource+0x162>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4619      	mov	r1, r3
 8008258:	4610      	mov	r0, r2
 800825a:	f000 f938 	bl	80084ce <TIM_ITRx_SetConfig>
      break;
 800825e:	e003      	b.n	8008268 <HAL_TIM_ConfigClockSource+0x162>
    }

    default:
      status = HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	73fb      	strb	r3, [r7, #15]
      break;
 8008264:	e000      	b.n	8008268 <HAL_TIM_ConfigClockSource+0x162>
      break;
 8008266:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008278:	7bfb      	ldrb	r3, [r7, #15]
}
 800827a:	4618      	mov	r0, r3
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008282:	b480      	push	{r7}
 8008284:	b083      	sub	sp, #12
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800828a:	bf00      	nop
 800828c:	370c      	adds	r7, #12
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr

08008296 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008296:	b480      	push	{r7}
 8008298:	b083      	sub	sp, #12
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800829e:	bf00      	nop
 80082a0:	370c      	adds	r7, #12
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr

080082aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80082aa:	b480      	push	{r7}
 80082ac:	b083      	sub	sp, #12
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80082b2:	bf00      	nop
 80082b4:	370c      	adds	r7, #12
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr

080082be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80082be:	b480      	push	{r7}
 80082c0:	b083      	sub	sp, #12
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80082c6:	bf00      	nop
 80082c8:	370c      	adds	r7, #12
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
	...

080082d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a42      	ldr	r2, [pc, #264]	; (80083f0 <TIM_Base_SetConfig+0x11c>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d013      	beq.n	8008314 <TIM_Base_SetConfig+0x40>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082f2:	d00f      	beq.n	8008314 <TIM_Base_SetConfig+0x40>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a3f      	ldr	r2, [pc, #252]	; (80083f4 <TIM_Base_SetConfig+0x120>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d00b      	beq.n	8008314 <TIM_Base_SetConfig+0x40>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a3e      	ldr	r2, [pc, #248]	; (80083f8 <TIM_Base_SetConfig+0x124>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d007      	beq.n	8008314 <TIM_Base_SetConfig+0x40>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a3d      	ldr	r2, [pc, #244]	; (80083fc <TIM_Base_SetConfig+0x128>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d003      	beq.n	8008314 <TIM_Base_SetConfig+0x40>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a3c      	ldr	r2, [pc, #240]	; (8008400 <TIM_Base_SetConfig+0x12c>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d108      	bne.n	8008326 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800831a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	68fa      	ldr	r2, [r7, #12]
 8008322:	4313      	orrs	r3, r2
 8008324:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	4a31      	ldr	r2, [pc, #196]	; (80083f0 <TIM_Base_SetConfig+0x11c>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d01f      	beq.n	800836e <TIM_Base_SetConfig+0x9a>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008334:	d01b      	beq.n	800836e <TIM_Base_SetConfig+0x9a>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4a2e      	ldr	r2, [pc, #184]	; (80083f4 <TIM_Base_SetConfig+0x120>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d017      	beq.n	800836e <TIM_Base_SetConfig+0x9a>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	4a2d      	ldr	r2, [pc, #180]	; (80083f8 <TIM_Base_SetConfig+0x124>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d013      	beq.n	800836e <TIM_Base_SetConfig+0x9a>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a2c      	ldr	r2, [pc, #176]	; (80083fc <TIM_Base_SetConfig+0x128>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d00f      	beq.n	800836e <TIM_Base_SetConfig+0x9a>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	4a2c      	ldr	r2, [pc, #176]	; (8008404 <TIM_Base_SetConfig+0x130>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d00b      	beq.n	800836e <TIM_Base_SetConfig+0x9a>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4a2b      	ldr	r2, [pc, #172]	; (8008408 <TIM_Base_SetConfig+0x134>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d007      	beq.n	800836e <TIM_Base_SetConfig+0x9a>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4a2a      	ldr	r2, [pc, #168]	; (800840c <TIM_Base_SetConfig+0x138>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d003      	beq.n	800836e <TIM_Base_SetConfig+0x9a>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	4a25      	ldr	r2, [pc, #148]	; (8008400 <TIM_Base_SetConfig+0x12c>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d108      	bne.n	8008380 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008374:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	4313      	orrs	r3, r2
 800837e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	695b      	ldr	r3, [r3, #20]
 800838a:	4313      	orrs	r3, r2
 800838c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	689a      	ldr	r2, [r3, #8]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	4a12      	ldr	r2, [pc, #72]	; (80083f0 <TIM_Base_SetConfig+0x11c>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d013      	beq.n	80083d4 <TIM_Base_SetConfig+0x100>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	4a13      	ldr	r2, [pc, #76]	; (80083fc <TIM_Base_SetConfig+0x128>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d00f      	beq.n	80083d4 <TIM_Base_SetConfig+0x100>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4a13      	ldr	r2, [pc, #76]	; (8008404 <TIM_Base_SetConfig+0x130>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d00b      	beq.n	80083d4 <TIM_Base_SetConfig+0x100>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a12      	ldr	r2, [pc, #72]	; (8008408 <TIM_Base_SetConfig+0x134>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d007      	beq.n	80083d4 <TIM_Base_SetConfig+0x100>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a11      	ldr	r2, [pc, #68]	; (800840c <TIM_Base_SetConfig+0x138>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d003      	beq.n	80083d4 <TIM_Base_SetConfig+0x100>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	4a0c      	ldr	r2, [pc, #48]	; (8008400 <TIM_Base_SetConfig+0x12c>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d103      	bne.n	80083dc <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	691a      	ldr	r2, [r3, #16]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	615a      	str	r2, [r3, #20]
}
 80083e2:	bf00      	nop
 80083e4:	3714      	adds	r7, #20
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop
 80083f0:	40012c00 	.word	0x40012c00
 80083f4:	40000400 	.word	0x40000400
 80083f8:	40000800 	.word	0x40000800
 80083fc:	40013400 	.word	0x40013400
 8008400:	40015000 	.word	0x40015000
 8008404:	40014000 	.word	0x40014000
 8008408:	40014400 	.word	0x40014400
 800840c:	40014800 	.word	0x40014800

08008410 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008410:	b480      	push	{r7}
 8008412:	b087      	sub	sp, #28
 8008414:	af00      	add	r7, sp, #0
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6a1b      	ldr	r3, [r3, #32]
 8008420:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6a1b      	ldr	r3, [r3, #32]
 8008426:	f023 0201 	bic.w	r2, r3, #1
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	699b      	ldr	r3, [r3, #24]
 8008432:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800843a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	011b      	lsls	r3, r3, #4
 8008440:	693a      	ldr	r2, [r7, #16]
 8008442:	4313      	orrs	r3, r2
 8008444:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	f023 030a 	bic.w	r3, r3, #10
 800844c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800844e:	697a      	ldr	r2, [r7, #20]
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	4313      	orrs	r3, r2
 8008454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	693a      	ldr	r2, [r7, #16]
 800845a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	697a      	ldr	r2, [r7, #20]
 8008460:	621a      	str	r2, [r3, #32]
}
 8008462:	bf00      	nop
 8008464:	371c      	adds	r7, #28
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr

0800846e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800846e:	b480      	push	{r7}
 8008470:	b087      	sub	sp, #28
 8008472:	af00      	add	r7, sp, #0
 8008474:	60f8      	str	r0, [r7, #12]
 8008476:	60b9      	str	r1, [r7, #8]
 8008478:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6a1b      	ldr	r3, [r3, #32]
 800847e:	f023 0210 	bic.w	r2, r3, #16
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	699b      	ldr	r3, [r3, #24]
 800848a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6a1b      	ldr	r3, [r3, #32]
 8008490:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008498:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	031b      	lsls	r3, r3, #12
 800849e:	697a      	ldr	r2, [r7, #20]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80084aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	011b      	lsls	r3, r3, #4
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	697a      	ldr	r2, [r7, #20]
 80084ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	693a      	ldr	r2, [r7, #16]
 80084c0:	621a      	str	r2, [r3, #32]
}
 80084c2:	bf00      	nop
 80084c4:	371c      	adds	r7, #28
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr

080084ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80084ce:	b480      	push	{r7}
 80084d0:	b085      	sub	sp, #20
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
 80084d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80084e6:	683a      	ldr	r2, [r7, #0]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	f043 0307 	orr.w	r3, r3, #7
 80084f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	609a      	str	r2, [r3, #8]
}
 80084f8:	bf00      	nop
 80084fa:	3714      	adds	r7, #20
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr

08008504 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008504:	b480      	push	{r7}
 8008506:	b087      	sub	sp, #28
 8008508:	af00      	add	r7, sp, #0
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	60b9      	str	r1, [r7, #8]
 800850e:	607a      	str	r2, [r7, #4]
 8008510:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800851e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	021a      	lsls	r2, r3, #8
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	431a      	orrs	r2, r3
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	4313      	orrs	r3, r2
 800852c:	697a      	ldr	r2, [r7, #20]
 800852e:	4313      	orrs	r3, r2
 8008530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	697a      	ldr	r2, [r7, #20]
 8008536:	609a      	str	r2, [r3, #8]
}
 8008538:	bf00      	nop
 800853a:	371c      	adds	r7, #28
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008544:	b480      	push	{r7}
 8008546:	b085      	sub	sp, #20
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008554:	2b01      	cmp	r3, #1
 8008556:	d101      	bne.n	800855c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008558:	2302      	movs	r3, #2
 800855a:	e06d      	b.n	8008638 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2202      	movs	r2, #2
 8008568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a30      	ldr	r2, [pc, #192]	; (8008644 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d009      	beq.n	800859a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a2f      	ldr	r2, [pc, #188]	; (8008648 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d004      	beq.n	800859a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a2d      	ldr	r2, [pc, #180]	; (800864c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d108      	bne.n	80085ac <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80085a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	4313      	orrs	r3, r2
 80085bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a1e      	ldr	r2, [pc, #120]	; (8008644 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d01d      	beq.n	800860c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085d8:	d018      	beq.n	800860c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a1c      	ldr	r2, [pc, #112]	; (8008650 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d013      	beq.n	800860c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a1a      	ldr	r2, [pc, #104]	; (8008654 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d00e      	beq.n	800860c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a15      	ldr	r2, [pc, #84]	; (8008648 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d009      	beq.n	800860c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a16      	ldr	r2, [pc, #88]	; (8008658 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d004      	beq.n	800860c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a11      	ldr	r2, [pc, #68]	; (800864c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d10c      	bne.n	8008626 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008612:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	68ba      	ldr	r2, [r7, #8]
 800861a:	4313      	orrs	r3, r2
 800861c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	68ba      	ldr	r2, [r7, #8]
 8008624:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2201      	movs	r2, #1
 800862a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	3714      	adds	r7, #20
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr
 8008644:	40012c00 	.word	0x40012c00
 8008648:	40013400 	.word	0x40013400
 800864c:	40015000 	.word	0x40015000
 8008650:	40000400 	.word	0x40000400
 8008654:	40000800 	.word	0x40000800
 8008658:	40014000 	.word	0x40014000

0800865c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008664:	bf00      	nop
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008678:	bf00      	nop
 800867a:	370c      	adds	r7, #12
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800868c:	bf00      	nop
 800868e:	370c      	adds	r7, #12
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d101      	bne.n	80086aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e040      	b.n	800872c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d106      	bne.n	80086c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2200      	movs	r2, #0
 80086b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f7fa fcfc 	bl	80030b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2224      	movs	r2, #36	; 0x24
 80086c4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f022 0201 	bic.w	r2, r2, #1
 80086d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 fc0e 	bl	8008ef8 <UART_SetConfig>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d101      	bne.n	80086e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	e022      	b.n	800872c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d002      	beq.n	80086f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fdd6 	bl	80092a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	685a      	ldr	r2, [r3, #4]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008702:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	689a      	ldr	r2, [r3, #8]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008712:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f042 0201 	orr.w	r2, r2, #1
 8008722:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 fe5d 	bl	80093e4 <UART_CheckIdleState>
 800872a:	4603      	mov	r3, r0
}
 800872c:	4618      	mov	r0, r3
 800872e:	3708      	adds	r7, #8
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b08a      	sub	sp, #40	; 0x28
 8008738:	af02      	add	r7, sp, #8
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	603b      	str	r3, [r7, #0]
 8008740:	4613      	mov	r3, r2
 8008742:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008748:	2b20      	cmp	r3, #32
 800874a:	f040 8082 	bne.w	8008852 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d002      	beq.n	800875a <HAL_UART_Transmit+0x26>
 8008754:	88fb      	ldrh	r3, [r7, #6]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d101      	bne.n	800875e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	e07a      	b.n	8008854 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008764:	2b01      	cmp	r3, #1
 8008766:	d101      	bne.n	800876c <HAL_UART_Transmit+0x38>
 8008768:	2302      	movs	r3, #2
 800876a:	e073      	b.n	8008854 <HAL_UART_Transmit+0x120>
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2200      	movs	r2, #0
 8008778:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2221      	movs	r2, #33	; 0x21
 8008780:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008782:	f7fb f901 	bl	8003988 <HAL_GetTick>
 8008786:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	88fa      	ldrh	r2, [r7, #6]
 800878c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	88fa      	ldrh	r2, [r7, #6]
 8008794:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087a0:	d108      	bne.n	80087b4 <HAL_UART_Transmit+0x80>
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	691b      	ldr	r3, [r3, #16]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d104      	bne.n	80087b4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80087aa:	2300      	movs	r3, #0
 80087ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	61bb      	str	r3, [r7, #24]
 80087b2:	e003      	b.n	80087bc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80087b8:	2300      	movs	r3, #0
 80087ba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80087c4:	e02d      	b.n	8008822 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	9300      	str	r3, [sp, #0]
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	2200      	movs	r2, #0
 80087ce:	2180      	movs	r1, #128	; 0x80
 80087d0:	68f8      	ldr	r0, [r7, #12]
 80087d2:	f000 fe50 	bl	8009476 <UART_WaitOnFlagUntilTimeout>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d001      	beq.n	80087e0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80087dc:	2303      	movs	r3, #3
 80087de:	e039      	b.n	8008854 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d10b      	bne.n	80087fe <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	881a      	ldrh	r2, [r3, #0]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087f2:	b292      	uxth	r2, r2
 80087f4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	3302      	adds	r3, #2
 80087fa:	61bb      	str	r3, [r7, #24]
 80087fc:	e008      	b.n	8008810 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	781a      	ldrb	r2, [r3, #0]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	b292      	uxth	r2, r2
 8008808:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	3301      	adds	r3, #1
 800880e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008816:	b29b      	uxth	r3, r3
 8008818:	3b01      	subs	r3, #1
 800881a:	b29a      	uxth	r2, r3
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008828:	b29b      	uxth	r3, r3
 800882a:	2b00      	cmp	r3, #0
 800882c:	d1cb      	bne.n	80087c6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	9300      	str	r3, [sp, #0]
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	2200      	movs	r2, #0
 8008836:	2140      	movs	r1, #64	; 0x40
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	f000 fe1c 	bl	8009476 <UART_WaitOnFlagUntilTimeout>
 800883e:	4603      	mov	r3, r0
 8008840:	2b00      	cmp	r3, #0
 8008842:	d001      	beq.n	8008848 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008844:	2303      	movs	r3, #3
 8008846:	e005      	b.n	8008854 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2220      	movs	r2, #32
 800884c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	e000      	b.n	8008854 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8008852:	2302      	movs	r3, #2
  }
}
 8008854:	4618      	mov	r0, r3
 8008856:	3720      	adds	r7, #32
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b08a      	sub	sp, #40	; 0x28
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	4613      	mov	r3, r2
 8008868:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800886e:	2b20      	cmp	r3, #32
 8008870:	d13d      	bne.n	80088ee <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d002      	beq.n	800887e <HAL_UART_Receive_IT+0x22>
 8008878:	88fb      	ldrh	r3, [r7, #6]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d101      	bne.n	8008882 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	e036      	b.n	80088f0 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008888:	2b01      	cmp	r3, #1
 800888a:	d101      	bne.n	8008890 <HAL_UART_Receive_IT+0x34>
 800888c:	2302      	movs	r3, #2
 800888e:	e02f      	b.n	80088f0 <HAL_UART_Receive_IT+0x94>
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2200      	movs	r2, #0
 800889c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d018      	beq.n	80088de <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	e853 3f00 	ldrex	r3, [r3]
 80088b8:	613b      	str	r3, [r7, #16]
   return(result);
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80088c0:	627b      	str	r3, [r7, #36]	; 0x24
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	461a      	mov	r2, r3
 80088c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ca:	623b      	str	r3, [r7, #32]
 80088cc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ce:	69f9      	ldr	r1, [r7, #28]
 80088d0:	6a3a      	ldr	r2, [r7, #32]
 80088d2:	e841 2300 	strex	r3, r2, [r1]
 80088d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80088d8:	69bb      	ldr	r3, [r7, #24]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1e6      	bne.n	80088ac <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80088de:	88fb      	ldrh	r3, [r7, #6]
 80088e0:	461a      	mov	r2, r3
 80088e2:	68b9      	ldr	r1, [r7, #8]
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f000 fe8b 	bl	8009600 <UART_Start_Receive_IT>
 80088ea:	4603      	mov	r3, r0
 80088ec:	e000      	b.n	80088f0 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80088ee:	2302      	movs	r3, #2
  }
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3728      	adds	r7, #40	; 0x28
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b0ba      	sub	sp, #232	; 0xe8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	69db      	ldr	r3, [r3, #28]
 8008906:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800891e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008922:	f640 030f 	movw	r3, #2063	; 0x80f
 8008926:	4013      	ands	r3, r2
 8008928:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800892c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008930:	2b00      	cmp	r3, #0
 8008932:	d115      	bne.n	8008960 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008938:	f003 0320 	and.w	r3, r3, #32
 800893c:	2b00      	cmp	r3, #0
 800893e:	d00f      	beq.n	8008960 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008944:	f003 0320 	and.w	r3, r3, #32
 8008948:	2b00      	cmp	r3, #0
 800894a:	d009      	beq.n	8008960 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008950:	2b00      	cmp	r3, #0
 8008952:	f000 82a4 	beq.w	8008e9e <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	4798      	blx	r3
      }
      return;
 800895e:	e29e      	b.n	8008e9e <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008960:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008964:	2b00      	cmp	r3, #0
 8008966:	f000 8117 	beq.w	8008b98 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800896a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800896e:	f003 0301 	and.w	r3, r3, #1
 8008972:	2b00      	cmp	r3, #0
 8008974:	d106      	bne.n	8008984 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008976:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800897a:	4b85      	ldr	r3, [pc, #532]	; (8008b90 <HAL_UART_IRQHandler+0x298>)
 800897c:	4013      	ands	r3, r2
 800897e:	2b00      	cmp	r3, #0
 8008980:	f000 810a 	beq.w	8008b98 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008988:	f003 0301 	and.w	r3, r3, #1
 800898c:	2b00      	cmp	r3, #0
 800898e:	d011      	beq.n	80089b4 <HAL_UART_IRQHandler+0xbc>
 8008990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00b      	beq.n	80089b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2201      	movs	r2, #1
 80089a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089aa:	f043 0201 	orr.w	r2, r3, #1
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089b8:	f003 0302 	and.w	r3, r3, #2
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d011      	beq.n	80089e4 <HAL_UART_IRQHandler+0xec>
 80089c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089c4:	f003 0301 	and.w	r3, r3, #1
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d00b      	beq.n	80089e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2202      	movs	r2, #2
 80089d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089da:	f043 0204 	orr.w	r2, r3, #4
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089e8:	f003 0304 	and.w	r3, r3, #4
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d011      	beq.n	8008a14 <HAL_UART_IRQHandler+0x11c>
 80089f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089f4:	f003 0301 	and.w	r3, r3, #1
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d00b      	beq.n	8008a14 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2204      	movs	r2, #4
 8008a02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a0a:	f043 0202 	orr.w	r2, r3, #2
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a18:	f003 0308 	and.w	r3, r3, #8
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d017      	beq.n	8008a50 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a24:	f003 0320 	and.w	r3, r3, #32
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d105      	bne.n	8008a38 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008a2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a30:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d00b      	beq.n	8008a50 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2208      	movs	r2, #8
 8008a3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a46:	f043 0208 	orr.w	r2, r3, #8
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d012      	beq.n	8008a82 <HAL_UART_IRQHandler+0x18a>
 8008a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d00c      	beq.n	8008a82 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a78:	f043 0220 	orr.w	r2, r3, #32
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	f000 820a 	beq.w	8008ea2 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a92:	f003 0320 	and.w	r3, r3, #32
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d00d      	beq.n	8008ab6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a9e:	f003 0320 	and.w	r3, r3, #32
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d007      	beq.n	8008ab6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d003      	beq.n	8008ab6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008abc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aca:	2b40      	cmp	r3, #64	; 0x40
 8008acc:	d005      	beq.n	8008ada <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008ace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008ad2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d04f      	beq.n	8008b7a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fe3c 	bl	8009758 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aea:	2b40      	cmp	r3, #64	; 0x40
 8008aec:	d141      	bne.n	8008b72 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	3308      	adds	r3, #8
 8008af4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008afc:	e853 3f00 	ldrex	r3, [r3]
 8008b00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008b04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	3308      	adds	r3, #8
 8008b16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008b1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008b26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008b2a:	e841 2300 	strex	r3, r2, [r1]
 8008b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008b32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d1d9      	bne.n	8008aee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d013      	beq.n	8008b6a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b46:	4a13      	ldr	r2, [pc, #76]	; (8008b94 <HAL_UART_IRQHandler+0x29c>)
 8008b48:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7fc fd00 	bl	8005554 <HAL_DMA_Abort_IT>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d017      	beq.n	8008b8a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008b64:	4610      	mov	r0, r2
 8008b66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b68:	e00f      	b.n	8008b8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 f9ae 	bl	8008ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b70:	e00b      	b.n	8008b8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 f9aa 	bl	8008ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b78:	e007      	b.n	8008b8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 f9a6 	bl	8008ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008b88:	e18b      	b.n	8008ea2 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b8a:	bf00      	nop
    return;
 8008b8c:	e189      	b.n	8008ea2 <HAL_UART_IRQHandler+0x5aa>
 8008b8e:	bf00      	nop
 8008b90:	04000120 	.word	0x04000120
 8008b94:	0800981f 	.word	0x0800981f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	f040 8143 	bne.w	8008e28 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ba6:	f003 0310 	and.w	r3, r3, #16
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	f000 813c 	beq.w	8008e28 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bb4:	f003 0310 	and.w	r3, r3, #16
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	f000 8135 	beq.w	8008e28 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2210      	movs	r2, #16
 8008bc4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bd0:	2b40      	cmp	r3, #64	; 0x40
 8008bd2:	f040 80b1 	bne.w	8008d38 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008be2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	f000 815d 	beq.w	8008ea6 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008bf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	f080 8155 	bcs.w	8008ea6 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008c02:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c0a:	699b      	ldr	r3, [r3, #24]
 8008c0c:	2b20      	cmp	r3, #32
 8008c0e:	f000 8085 	beq.w	8008d1c <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008c1e:	e853 3f00 	ldrex	r3, [r3]
 8008c22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008c26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	461a      	mov	r2, r3
 8008c38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008c3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008c40:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c44:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008c48:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008c4c:	e841 2300 	strex	r3, r2, [r1]
 8008c50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008c54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d1da      	bne.n	8008c12 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	3308      	adds	r3, #8
 8008c62:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c66:	e853 3f00 	ldrex	r3, [r3]
 8008c6a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008c6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c6e:	f023 0301 	bic.w	r3, r3, #1
 8008c72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	3308      	adds	r3, #8
 8008c7c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008c80:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008c84:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c86:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008c88:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008c8c:	e841 2300 	strex	r3, r2, [r1]
 8008c90:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008c92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d1e1      	bne.n	8008c5c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	3308      	adds	r3, #8
 8008c9e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ca2:	e853 3f00 	ldrex	r3, [r3]
 8008ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008ca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008caa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	3308      	adds	r3, #8
 8008cb8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008cbc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008cbe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008cc2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008cc4:	e841 2300 	strex	r3, r2, [r1]
 8008cc8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008cca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d1e3      	bne.n	8008c98 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2220      	movs	r2, #32
 8008cd4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ce4:	e853 3f00 	ldrex	r3, [r3]
 8008ce8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cec:	f023 0310 	bic.w	r3, r3, #16
 8008cf0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008cfe:	65bb      	str	r3, [r7, #88]	; 0x58
 8008d00:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008d04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d06:	e841 2300 	strex	r3, r2, [r1]
 8008d0a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008d0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d1e4      	bne.n	8008cdc <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7fc fbe3 	bl	80054e2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	4619      	mov	r1, r3
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 f8d5 	bl	8008ee0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008d36:	e0b6      	b.n	8008ea6 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	1ad3      	subs	r3, r2, r3
 8008d48:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	f000 80a8 	beq.w	8008eaa <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8008d5a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	f000 80a3 	beq.w	8008eaa <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d6c:	e853 3f00 	ldrex	r3, [r3]
 8008d70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	461a      	mov	r2, r3
 8008d82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008d86:	647b      	str	r3, [r7, #68]	; 0x44
 8008d88:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d8e:	e841 2300 	strex	r3, r2, [r1]
 8008d92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d1e4      	bne.n	8008d64 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	3308      	adds	r3, #8
 8008da0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da4:	e853 3f00 	ldrex	r3, [r3]
 8008da8:	623b      	str	r3, [r7, #32]
   return(result);
 8008daa:	6a3b      	ldr	r3, [r7, #32]
 8008dac:	f023 0301 	bic.w	r3, r3, #1
 8008db0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	3308      	adds	r3, #8
 8008dba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008dbe:	633a      	str	r2, [r7, #48]	; 0x30
 8008dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008dc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dc6:	e841 2300 	strex	r3, r2, [r1]
 8008dca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d1e3      	bne.n	8008d9a <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2220      	movs	r2, #32
 8008dd6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2200      	movs	r2, #0
 8008de2:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	e853 3f00 	ldrex	r3, [r3]
 8008df0:	60fb      	str	r3, [r7, #12]
   return(result);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f023 0310 	bic.w	r3, r3, #16
 8008df8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	461a      	mov	r2, r3
 8008e02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008e06:	61fb      	str	r3, [r7, #28]
 8008e08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0a:	69b9      	ldr	r1, [r7, #24]
 8008e0c:	69fa      	ldr	r2, [r7, #28]
 8008e0e:	e841 2300 	strex	r3, r2, [r1]
 8008e12:	617b      	str	r3, [r7, #20]
   return(result);
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d1e4      	bne.n	8008de4 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008e1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008e1e:	4619      	mov	r1, r3
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 f85d 	bl	8008ee0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008e26:	e040      	b.n	8008eaa <HAL_UART_IRQHandler+0x5b2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00e      	beq.n	8008e52 <HAL_UART_IRQHandler+0x55a>
 8008e34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d008      	beq.n	8008e52 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008e48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 fe83 	bl	8009b56 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008e50:	e02e      	b.n	8008eb0 <HAL_UART_IRQHandler+0x5b8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00e      	beq.n	8008e7c <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d008      	beq.n	8008e7c <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d01d      	beq.n	8008eae <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	4798      	blx	r3
    }
    return;
 8008e7a:	e018      	b.n	8008eae <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d013      	beq.n	8008eb0 <HAL_UART_IRQHandler+0x5b8>
 8008e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d00d      	beq.n	8008eb0 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 fcd8 	bl	800984a <UART_EndTransmit_IT>
    return;
 8008e9a:	bf00      	nop
 8008e9c:	e008      	b.n	8008eb0 <HAL_UART_IRQHandler+0x5b8>
      return;
 8008e9e:	bf00      	nop
 8008ea0:	e006      	b.n	8008eb0 <HAL_UART_IRQHandler+0x5b8>
    return;
 8008ea2:	bf00      	nop
 8008ea4:	e004      	b.n	8008eb0 <HAL_UART_IRQHandler+0x5b8>
      return;
 8008ea6:	bf00      	nop
 8008ea8:	e002      	b.n	8008eb0 <HAL_UART_IRQHandler+0x5b8>
      return;
 8008eaa:	bf00      	nop
 8008eac:	e000      	b.n	8008eb0 <HAL_UART_IRQHandler+0x5b8>
    return;
 8008eae:	bf00      	nop
  }

}
 8008eb0:	37e8      	adds	r7, #232	; 0xe8
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop

08008eb8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008ec0:	bf00      	nop
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008ed4:	bf00      	nop
 8008ed6:	370c      	adds	r7, #12
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	460b      	mov	r3, r1
 8008eea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008eec:	bf00      	nop
 8008eee:	370c      	adds	r7, #12
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b088      	sub	sp, #32
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008f00:	2300      	movs	r3, #0
 8008f02:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	689a      	ldr	r2, [r3, #8]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	691b      	ldr	r3, [r3, #16]
 8008f0c:	431a      	orrs	r2, r3
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	695b      	ldr	r3, [r3, #20]
 8008f12:	431a      	orrs	r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	69db      	ldr	r3, [r3, #28]
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	4baa      	ldr	r3, [pc, #680]	; (80091cc <UART_SetConfig+0x2d4>)
 8008f24:	4013      	ands	r3, r2
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	6812      	ldr	r2, [r2, #0]
 8008f2a:	6979      	ldr	r1, [r7, #20]
 8008f2c:	430b      	orrs	r3, r1
 8008f2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	68da      	ldr	r2, [r3, #12]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	430a      	orrs	r2, r1
 8008f44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	699b      	ldr	r3, [r3, #24]
 8008f4a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6a1b      	ldr	r3, [r3, #32]
 8008f50:	697a      	ldr	r2, [r7, #20]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	697a      	ldr	r2, [r7, #20]
 8008f66:	430a      	orrs	r2, r1
 8008f68:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a98      	ldr	r2, [pc, #608]	; (80091d0 <UART_SetConfig+0x2d8>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d121      	bne.n	8008fb8 <UART_SetConfig+0xc0>
 8008f74:	4b97      	ldr	r3, [pc, #604]	; (80091d4 <UART_SetConfig+0x2dc>)
 8008f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f78:	f003 0303 	and.w	r3, r3, #3
 8008f7c:	2b03      	cmp	r3, #3
 8008f7e:	d817      	bhi.n	8008fb0 <UART_SetConfig+0xb8>
 8008f80:	a201      	add	r2, pc, #4	; (adr r2, 8008f88 <UART_SetConfig+0x90>)
 8008f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f86:	bf00      	nop
 8008f88:	08008f99 	.word	0x08008f99
 8008f8c:	08008fa5 	.word	0x08008fa5
 8008f90:	08008fab 	.word	0x08008fab
 8008f94:	08008f9f 	.word	0x08008f9f
 8008f98:	2301      	movs	r3, #1
 8008f9a:	77fb      	strb	r3, [r7, #31]
 8008f9c:	e0b2      	b.n	8009104 <UART_SetConfig+0x20c>
 8008f9e:	2302      	movs	r3, #2
 8008fa0:	77fb      	strb	r3, [r7, #31]
 8008fa2:	e0af      	b.n	8009104 <UART_SetConfig+0x20c>
 8008fa4:	2304      	movs	r3, #4
 8008fa6:	77fb      	strb	r3, [r7, #31]
 8008fa8:	e0ac      	b.n	8009104 <UART_SetConfig+0x20c>
 8008faa:	2308      	movs	r3, #8
 8008fac:	77fb      	strb	r3, [r7, #31]
 8008fae:	e0a9      	b.n	8009104 <UART_SetConfig+0x20c>
 8008fb0:	2310      	movs	r3, #16
 8008fb2:	77fb      	strb	r3, [r7, #31]
 8008fb4:	bf00      	nop
 8008fb6:	e0a5      	b.n	8009104 <UART_SetConfig+0x20c>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a86      	ldr	r2, [pc, #536]	; (80091d8 <UART_SetConfig+0x2e0>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d123      	bne.n	800900a <UART_SetConfig+0x112>
 8008fc2:	4b84      	ldr	r3, [pc, #528]	; (80091d4 <UART_SetConfig+0x2dc>)
 8008fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fce:	d012      	beq.n	8008ff6 <UART_SetConfig+0xfe>
 8008fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fd4:	d802      	bhi.n	8008fdc <UART_SetConfig+0xe4>
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d007      	beq.n	8008fea <UART_SetConfig+0xf2>
 8008fda:	e012      	b.n	8009002 <UART_SetConfig+0x10a>
 8008fdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fe0:	d00c      	beq.n	8008ffc <UART_SetConfig+0x104>
 8008fe2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008fe6:	d003      	beq.n	8008ff0 <UART_SetConfig+0xf8>
 8008fe8:	e00b      	b.n	8009002 <UART_SetConfig+0x10a>
 8008fea:	2300      	movs	r3, #0
 8008fec:	77fb      	strb	r3, [r7, #31]
 8008fee:	e089      	b.n	8009104 <UART_SetConfig+0x20c>
 8008ff0:	2302      	movs	r3, #2
 8008ff2:	77fb      	strb	r3, [r7, #31]
 8008ff4:	e086      	b.n	8009104 <UART_SetConfig+0x20c>
 8008ff6:	2304      	movs	r3, #4
 8008ff8:	77fb      	strb	r3, [r7, #31]
 8008ffa:	e083      	b.n	8009104 <UART_SetConfig+0x20c>
 8008ffc:	2308      	movs	r3, #8
 8008ffe:	77fb      	strb	r3, [r7, #31]
 8009000:	e080      	b.n	8009104 <UART_SetConfig+0x20c>
 8009002:	2310      	movs	r3, #16
 8009004:	77fb      	strb	r3, [r7, #31]
 8009006:	bf00      	nop
 8009008:	e07c      	b.n	8009104 <UART_SetConfig+0x20c>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a73      	ldr	r2, [pc, #460]	; (80091dc <UART_SetConfig+0x2e4>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d123      	bne.n	800905c <UART_SetConfig+0x164>
 8009014:	4b6f      	ldr	r3, [pc, #444]	; (80091d4 <UART_SetConfig+0x2dc>)
 8009016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009018:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800901c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009020:	d012      	beq.n	8009048 <UART_SetConfig+0x150>
 8009022:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009026:	d802      	bhi.n	800902e <UART_SetConfig+0x136>
 8009028:	2b00      	cmp	r3, #0
 800902a:	d007      	beq.n	800903c <UART_SetConfig+0x144>
 800902c:	e012      	b.n	8009054 <UART_SetConfig+0x15c>
 800902e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009032:	d00c      	beq.n	800904e <UART_SetConfig+0x156>
 8009034:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009038:	d003      	beq.n	8009042 <UART_SetConfig+0x14a>
 800903a:	e00b      	b.n	8009054 <UART_SetConfig+0x15c>
 800903c:	2300      	movs	r3, #0
 800903e:	77fb      	strb	r3, [r7, #31]
 8009040:	e060      	b.n	8009104 <UART_SetConfig+0x20c>
 8009042:	2302      	movs	r3, #2
 8009044:	77fb      	strb	r3, [r7, #31]
 8009046:	e05d      	b.n	8009104 <UART_SetConfig+0x20c>
 8009048:	2304      	movs	r3, #4
 800904a:	77fb      	strb	r3, [r7, #31]
 800904c:	e05a      	b.n	8009104 <UART_SetConfig+0x20c>
 800904e:	2308      	movs	r3, #8
 8009050:	77fb      	strb	r3, [r7, #31]
 8009052:	e057      	b.n	8009104 <UART_SetConfig+0x20c>
 8009054:	2310      	movs	r3, #16
 8009056:	77fb      	strb	r3, [r7, #31]
 8009058:	bf00      	nop
 800905a:	e053      	b.n	8009104 <UART_SetConfig+0x20c>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a5f      	ldr	r2, [pc, #380]	; (80091e0 <UART_SetConfig+0x2e8>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d123      	bne.n	80090ae <UART_SetConfig+0x1b6>
 8009066:	4b5b      	ldr	r3, [pc, #364]	; (80091d4 <UART_SetConfig+0x2dc>)
 8009068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800906a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800906e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009072:	d012      	beq.n	800909a <UART_SetConfig+0x1a2>
 8009074:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009078:	d802      	bhi.n	8009080 <UART_SetConfig+0x188>
 800907a:	2b00      	cmp	r3, #0
 800907c:	d007      	beq.n	800908e <UART_SetConfig+0x196>
 800907e:	e012      	b.n	80090a6 <UART_SetConfig+0x1ae>
 8009080:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009084:	d00c      	beq.n	80090a0 <UART_SetConfig+0x1a8>
 8009086:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800908a:	d003      	beq.n	8009094 <UART_SetConfig+0x19c>
 800908c:	e00b      	b.n	80090a6 <UART_SetConfig+0x1ae>
 800908e:	2300      	movs	r3, #0
 8009090:	77fb      	strb	r3, [r7, #31]
 8009092:	e037      	b.n	8009104 <UART_SetConfig+0x20c>
 8009094:	2302      	movs	r3, #2
 8009096:	77fb      	strb	r3, [r7, #31]
 8009098:	e034      	b.n	8009104 <UART_SetConfig+0x20c>
 800909a:	2304      	movs	r3, #4
 800909c:	77fb      	strb	r3, [r7, #31]
 800909e:	e031      	b.n	8009104 <UART_SetConfig+0x20c>
 80090a0:	2308      	movs	r3, #8
 80090a2:	77fb      	strb	r3, [r7, #31]
 80090a4:	e02e      	b.n	8009104 <UART_SetConfig+0x20c>
 80090a6:	2310      	movs	r3, #16
 80090a8:	77fb      	strb	r3, [r7, #31]
 80090aa:	bf00      	nop
 80090ac:	e02a      	b.n	8009104 <UART_SetConfig+0x20c>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a4c      	ldr	r2, [pc, #304]	; (80091e4 <UART_SetConfig+0x2ec>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d123      	bne.n	8009100 <UART_SetConfig+0x208>
 80090b8:	4b46      	ldr	r3, [pc, #280]	; (80091d4 <UART_SetConfig+0x2dc>)
 80090ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090bc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80090c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090c4:	d012      	beq.n	80090ec <UART_SetConfig+0x1f4>
 80090c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090ca:	d802      	bhi.n	80090d2 <UART_SetConfig+0x1da>
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d007      	beq.n	80090e0 <UART_SetConfig+0x1e8>
 80090d0:	e012      	b.n	80090f8 <UART_SetConfig+0x200>
 80090d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80090d6:	d00c      	beq.n	80090f2 <UART_SetConfig+0x1fa>
 80090d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80090dc:	d003      	beq.n	80090e6 <UART_SetConfig+0x1ee>
 80090de:	e00b      	b.n	80090f8 <UART_SetConfig+0x200>
 80090e0:	2300      	movs	r3, #0
 80090e2:	77fb      	strb	r3, [r7, #31]
 80090e4:	e00e      	b.n	8009104 <UART_SetConfig+0x20c>
 80090e6:	2302      	movs	r3, #2
 80090e8:	77fb      	strb	r3, [r7, #31]
 80090ea:	e00b      	b.n	8009104 <UART_SetConfig+0x20c>
 80090ec:	2304      	movs	r3, #4
 80090ee:	77fb      	strb	r3, [r7, #31]
 80090f0:	e008      	b.n	8009104 <UART_SetConfig+0x20c>
 80090f2:	2308      	movs	r3, #8
 80090f4:	77fb      	strb	r3, [r7, #31]
 80090f6:	e005      	b.n	8009104 <UART_SetConfig+0x20c>
 80090f8:	2310      	movs	r3, #16
 80090fa:	77fb      	strb	r3, [r7, #31]
 80090fc:	bf00      	nop
 80090fe:	e001      	b.n	8009104 <UART_SetConfig+0x20c>
 8009100:	2310      	movs	r3, #16
 8009102:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	69db      	ldr	r3, [r3, #28]
 8009108:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800910c:	d16e      	bne.n	80091ec <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800910e:	7ffb      	ldrb	r3, [r7, #31]
 8009110:	2b08      	cmp	r3, #8
 8009112:	d828      	bhi.n	8009166 <UART_SetConfig+0x26e>
 8009114:	a201      	add	r2, pc, #4	; (adr r2, 800911c <UART_SetConfig+0x224>)
 8009116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800911a:	bf00      	nop
 800911c:	08009141 	.word	0x08009141
 8009120:	08009149 	.word	0x08009149
 8009124:	08009151 	.word	0x08009151
 8009128:	08009167 	.word	0x08009167
 800912c:	08009157 	.word	0x08009157
 8009130:	08009167 	.word	0x08009167
 8009134:	08009167 	.word	0x08009167
 8009138:	08009167 	.word	0x08009167
 800913c:	0800915f 	.word	0x0800915f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009140:	f7fe fb30 	bl	80077a4 <HAL_RCC_GetPCLK1Freq>
 8009144:	61b8      	str	r0, [r7, #24]
        break;
 8009146:	e013      	b.n	8009170 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009148:	f7fe fb4e 	bl	80077e8 <HAL_RCC_GetPCLK2Freq>
 800914c:	61b8      	str	r0, [r7, #24]
        break;
 800914e:	e00f      	b.n	8009170 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009150:	4b25      	ldr	r3, [pc, #148]	; (80091e8 <UART_SetConfig+0x2f0>)
 8009152:	61bb      	str	r3, [r7, #24]
        break;
 8009154:	e00c      	b.n	8009170 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009156:	f7fe faaf 	bl	80076b8 <HAL_RCC_GetSysClockFreq>
 800915a:	61b8      	str	r0, [r7, #24]
        break;
 800915c:	e008      	b.n	8009170 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800915e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009162:	61bb      	str	r3, [r7, #24]
        break;
 8009164:	e004      	b.n	8009170 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8009166:	2300      	movs	r3, #0
 8009168:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	77bb      	strb	r3, [r7, #30]
        break;
 800916e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009170:	69bb      	ldr	r3, [r7, #24]
 8009172:	2b00      	cmp	r3, #0
 8009174:	f000 8086 	beq.w	8009284 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	005a      	lsls	r2, r3, #1
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	085b      	lsrs	r3, r3, #1
 8009182:	441a      	add	r2, r3
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	fbb2 f3f3 	udiv	r3, r2, r3
 800918c:	b29b      	uxth	r3, r3
 800918e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	2b0f      	cmp	r3, #15
 8009194:	d916      	bls.n	80091c4 <UART_SetConfig+0x2cc>
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800919c:	d212      	bcs.n	80091c4 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	f023 030f 	bic.w	r3, r3, #15
 80091a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	085b      	lsrs	r3, r3, #1
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	f003 0307 	and.w	r3, r3, #7
 80091b2:	b29a      	uxth	r2, r3
 80091b4:	89fb      	ldrh	r3, [r7, #14]
 80091b6:	4313      	orrs	r3, r2
 80091b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	89fa      	ldrh	r2, [r7, #14]
 80091c0:	60da      	str	r2, [r3, #12]
 80091c2:	e05f      	b.n	8009284 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80091c4:	2301      	movs	r3, #1
 80091c6:	77bb      	strb	r3, [r7, #30]
 80091c8:	e05c      	b.n	8009284 <UART_SetConfig+0x38c>
 80091ca:	bf00      	nop
 80091cc:	efff69f3 	.word	0xefff69f3
 80091d0:	40013800 	.word	0x40013800
 80091d4:	40021000 	.word	0x40021000
 80091d8:	40004400 	.word	0x40004400
 80091dc:	40004800 	.word	0x40004800
 80091e0:	40004c00 	.word	0x40004c00
 80091e4:	40005000 	.word	0x40005000
 80091e8:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 80091ec:	7ffb      	ldrb	r3, [r7, #31]
 80091ee:	2b08      	cmp	r3, #8
 80091f0:	d827      	bhi.n	8009242 <UART_SetConfig+0x34a>
 80091f2:	a201      	add	r2, pc, #4	; (adr r2, 80091f8 <UART_SetConfig+0x300>)
 80091f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f8:	0800921d 	.word	0x0800921d
 80091fc:	08009225 	.word	0x08009225
 8009200:	0800922d 	.word	0x0800922d
 8009204:	08009243 	.word	0x08009243
 8009208:	08009233 	.word	0x08009233
 800920c:	08009243 	.word	0x08009243
 8009210:	08009243 	.word	0x08009243
 8009214:	08009243 	.word	0x08009243
 8009218:	0800923b 	.word	0x0800923b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800921c:	f7fe fac2 	bl	80077a4 <HAL_RCC_GetPCLK1Freq>
 8009220:	61b8      	str	r0, [r7, #24]
        break;
 8009222:	e013      	b.n	800924c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009224:	f7fe fae0 	bl	80077e8 <HAL_RCC_GetPCLK2Freq>
 8009228:	61b8      	str	r0, [r7, #24]
        break;
 800922a:	e00f      	b.n	800924c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800922c:	4b1b      	ldr	r3, [pc, #108]	; (800929c <UART_SetConfig+0x3a4>)
 800922e:	61bb      	str	r3, [r7, #24]
        break;
 8009230:	e00c      	b.n	800924c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009232:	f7fe fa41 	bl	80076b8 <HAL_RCC_GetSysClockFreq>
 8009236:	61b8      	str	r0, [r7, #24]
        break;
 8009238:	e008      	b.n	800924c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800923a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800923e:	61bb      	str	r3, [r7, #24]
        break;
 8009240:	e004      	b.n	800924c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8009242:	2300      	movs	r3, #0
 8009244:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009246:	2301      	movs	r3, #1
 8009248:	77bb      	strb	r3, [r7, #30]
        break;
 800924a:	bf00      	nop
    }

    if (pclk != 0U)
 800924c:	69bb      	ldr	r3, [r7, #24]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d018      	beq.n	8009284 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	085a      	lsrs	r2, r3, #1
 8009258:	69bb      	ldr	r3, [r7, #24]
 800925a:	441a      	add	r2, r3
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	fbb2 f3f3 	udiv	r3, r2, r3
 8009264:	b29b      	uxth	r3, r3
 8009266:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	2b0f      	cmp	r3, #15
 800926c:	d908      	bls.n	8009280 <UART_SetConfig+0x388>
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009274:	d204      	bcs.n	8009280 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	693a      	ldr	r2, [r7, #16]
 800927c:	60da      	str	r2, [r3, #12]
 800927e:	e001      	b.n	8009284 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8009280:	2301      	movs	r3, #1
 8009282:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009290:	7fbb      	ldrb	r3, [r7, #30]
}
 8009292:	4618      	mov	r0, r3
 8009294:	3720      	adds	r7, #32
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	007a1200 	.word	0x007a1200

080092a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ac:	f003 0301 	and.w	r3, r3, #1
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d00a      	beq.n	80092ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	430a      	orrs	r2, r1
 80092c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ce:	f003 0302 	and.w	r3, r3, #2
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d00a      	beq.n	80092ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	430a      	orrs	r2, r1
 80092ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f0:	f003 0304 	and.w	r3, r3, #4
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d00a      	beq.n	800930e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	430a      	orrs	r2, r1
 800930c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009312:	f003 0308 	and.w	r3, r3, #8
 8009316:	2b00      	cmp	r3, #0
 8009318:	d00a      	beq.n	8009330 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	430a      	orrs	r2, r1
 800932e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009334:	f003 0310 	and.w	r3, r3, #16
 8009338:	2b00      	cmp	r3, #0
 800933a:	d00a      	beq.n	8009352 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	430a      	orrs	r2, r1
 8009350:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009356:	f003 0320 	and.w	r3, r3, #32
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00a      	beq.n	8009374 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	430a      	orrs	r2, r1
 8009372:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800937c:	2b00      	cmp	r3, #0
 800937e:	d01a      	beq.n	80093b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	430a      	orrs	r2, r1
 8009394:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800939a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800939e:	d10a      	bne.n	80093b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	430a      	orrs	r2, r1
 80093b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00a      	beq.n	80093d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	430a      	orrs	r2, r1
 80093d6:	605a      	str	r2, [r3, #4]
  }
}
 80093d8:	bf00      	nop
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr

080093e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b086      	sub	sp, #24
 80093e8:	af02      	add	r7, sp, #8
 80093ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80093f4:	f7fa fac8 	bl	8003988 <HAL_GetTick>
 80093f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f003 0308 	and.w	r3, r3, #8
 8009404:	2b08      	cmp	r3, #8
 8009406:	d10e      	bne.n	8009426 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009408:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800940c:	9300      	str	r3, [sp, #0]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2200      	movs	r2, #0
 8009412:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 f82d 	bl	8009476 <UART_WaitOnFlagUntilTimeout>
 800941c:	4603      	mov	r3, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d001      	beq.n	8009426 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009422:	2303      	movs	r3, #3
 8009424:	e023      	b.n	800946e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f003 0304 	and.w	r3, r3, #4
 8009430:	2b04      	cmp	r3, #4
 8009432:	d10e      	bne.n	8009452 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009434:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009438:	9300      	str	r3, [sp, #0]
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2200      	movs	r2, #0
 800943e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 f817 	bl	8009476 <UART_WaitOnFlagUntilTimeout>
 8009448:	4603      	mov	r3, r0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d001      	beq.n	8009452 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800944e:	2303      	movs	r3, #3
 8009450:	e00d      	b.n	800946e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2220      	movs	r2, #32
 8009456:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2220      	movs	r2, #32
 800945c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2200      	movs	r2, #0
 8009462:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800946c:	2300      	movs	r3, #0
}
 800946e:	4618      	mov	r0, r3
 8009470:	3710      	adds	r7, #16
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009476:	b580      	push	{r7, lr}
 8009478:	b09c      	sub	sp, #112	; 0x70
 800947a:	af00      	add	r7, sp, #0
 800947c:	60f8      	str	r0, [r7, #12]
 800947e:	60b9      	str	r1, [r7, #8]
 8009480:	603b      	str	r3, [r7, #0]
 8009482:	4613      	mov	r3, r2
 8009484:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009486:	e0a5      	b.n	80095d4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009488:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800948a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800948e:	f000 80a1 	beq.w	80095d4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009492:	f7fa fa79 	bl	8003988 <HAL_GetTick>
 8009496:	4602      	mov	r2, r0
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	1ad3      	subs	r3, r2, r3
 800949c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800949e:	429a      	cmp	r2, r3
 80094a0:	d302      	bcc.n	80094a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80094a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d13e      	bne.n	8009526 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094b0:	e853 3f00 	ldrex	r3, [r3]
 80094b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80094b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80094bc:	667b      	str	r3, [r7, #100]	; 0x64
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	461a      	mov	r2, r3
 80094c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094c8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80094cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80094ce:	e841 2300 	strex	r3, r2, [r1]
 80094d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80094d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d1e6      	bne.n	80094a8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	3308      	adds	r3, #8
 80094e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094e4:	e853 3f00 	ldrex	r3, [r3]
 80094e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80094ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ec:	f023 0301 	bic.w	r3, r3, #1
 80094f0:	663b      	str	r3, [r7, #96]	; 0x60
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	3308      	adds	r3, #8
 80094f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80094fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80094fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009500:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009502:	e841 2300 	strex	r3, r2, [r1]
 8009506:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800950a:	2b00      	cmp	r3, #0
 800950c:	d1e5      	bne.n	80094da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2220      	movs	r2, #32
 8009512:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2220      	movs	r2, #32
 8009518:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2200      	movs	r2, #0
 800951e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009522:	2303      	movs	r3, #3
 8009524:	e067      	b.n	80095f6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f003 0304 	and.w	r3, r3, #4
 8009530:	2b00      	cmp	r3, #0
 8009532:	d04f      	beq.n	80095d4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	69db      	ldr	r3, [r3, #28]
 800953a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800953e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009542:	d147      	bne.n	80095d4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800954c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009556:	e853 3f00 	ldrex	r3, [r3]
 800955a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800955c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009562:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	461a      	mov	r2, r3
 800956a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800956c:	637b      	str	r3, [r7, #52]	; 0x34
 800956e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009570:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009572:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009574:	e841 2300 	strex	r3, r2, [r1]
 8009578:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800957a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800957c:	2b00      	cmp	r3, #0
 800957e:	d1e6      	bne.n	800954e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	3308      	adds	r3, #8
 8009586:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	e853 3f00 	ldrex	r3, [r3]
 800958e:	613b      	str	r3, [r7, #16]
   return(result);
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	f023 0301 	bic.w	r3, r3, #1
 8009596:	66bb      	str	r3, [r7, #104]	; 0x68
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	3308      	adds	r3, #8
 800959e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80095a0:	623a      	str	r2, [r7, #32]
 80095a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a4:	69f9      	ldr	r1, [r7, #28]
 80095a6:	6a3a      	ldr	r2, [r7, #32]
 80095a8:	e841 2300 	strex	r3, r2, [r1]
 80095ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d1e5      	bne.n	8009580 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2220      	movs	r2, #32
 80095b8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2220      	movs	r2, #32
 80095be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2220      	movs	r2, #32
 80095c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80095d0:	2303      	movs	r3, #3
 80095d2:	e010      	b.n	80095f6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	69da      	ldr	r2, [r3, #28]
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	4013      	ands	r3, r2
 80095de:	68ba      	ldr	r2, [r7, #8]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	bf0c      	ite	eq
 80095e4:	2301      	moveq	r3, #1
 80095e6:	2300      	movne	r3, #0
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	461a      	mov	r2, r3
 80095ec:	79fb      	ldrb	r3, [r7, #7]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	f43f af4a 	beq.w	8009488 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3770      	adds	r7, #112	; 0x70
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
	...

08009600 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009600:	b480      	push	{r7}
 8009602:	b091      	sub	sp, #68	; 0x44
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	4613      	mov	r3, r2
 800960c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	68ba      	ldr	r2, [r7, #8]
 8009612:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	88fa      	ldrh	r2, [r7, #6]
 8009618:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	88fa      	ldrh	r2, [r7, #6]
 8009620:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2200      	movs	r2, #0
 8009628:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009632:	d10e      	bne.n	8009652 <UART_Start_Receive_IT+0x52>
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	691b      	ldr	r3, [r3, #16]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d105      	bne.n	8009648 <UART_Start_Receive_IT+0x48>
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009642:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009646:	e02d      	b.n	80096a4 <UART_Start_Receive_IT+0xa4>
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	22ff      	movs	r2, #255	; 0xff
 800964c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009650:	e028      	b.n	80096a4 <UART_Start_Receive_IT+0xa4>
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	689b      	ldr	r3, [r3, #8]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d10d      	bne.n	8009676 <UART_Start_Receive_IT+0x76>
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	691b      	ldr	r3, [r3, #16]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d104      	bne.n	800966c <UART_Start_Receive_IT+0x6c>
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	22ff      	movs	r2, #255	; 0xff
 8009666:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800966a:	e01b      	b.n	80096a4 <UART_Start_Receive_IT+0xa4>
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	227f      	movs	r2, #127	; 0x7f
 8009670:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009674:	e016      	b.n	80096a4 <UART_Start_Receive_IT+0xa4>
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800967e:	d10d      	bne.n	800969c <UART_Start_Receive_IT+0x9c>
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	691b      	ldr	r3, [r3, #16]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d104      	bne.n	8009692 <UART_Start_Receive_IT+0x92>
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	227f      	movs	r2, #127	; 0x7f
 800968c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009690:	e008      	b.n	80096a4 <UART_Start_Receive_IT+0xa4>
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	223f      	movs	r2, #63	; 0x3f
 8009696:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800969a:	e003      	b.n	80096a4 <UART_Start_Receive_IT+0xa4>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2200      	movs	r2, #0
 80096a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2222      	movs	r2, #34	; 0x22
 80096b0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	3308      	adds	r3, #8
 80096b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096bc:	e853 3f00 	ldrex	r3, [r3]
 80096c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80096c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c4:	f043 0301 	orr.w	r3, r3, #1
 80096c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	3308      	adds	r3, #8
 80096d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80096d2:	637a      	str	r2, [r7, #52]	; 0x34
 80096d4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80096d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096da:	e841 2300 	strex	r3, r2, [r1]
 80096de:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80096e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d1e5      	bne.n	80096b2 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096ee:	d107      	bne.n	8009700 <UART_Start_Receive_IT+0x100>
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	691b      	ldr	r3, [r3, #16]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d103      	bne.n	8009700 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	4a15      	ldr	r2, [pc, #84]	; (8009750 <UART_Start_Receive_IT+0x150>)
 80096fc:	665a      	str	r2, [r3, #100]	; 0x64
 80096fe:	e002      	b.n	8009706 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	4a14      	ldr	r2, [pc, #80]	; (8009754 <UART_Start_Receive_IT+0x154>)
 8009704:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2200      	movs	r2, #0
 800970a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	e853 3f00 	ldrex	r3, [r3]
 800971a:	613b      	str	r3, [r7, #16]
   return(result);
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009722:	63bb      	str	r3, [r7, #56]	; 0x38
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	461a      	mov	r2, r3
 800972a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972c:	623b      	str	r3, [r7, #32]
 800972e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009730:	69f9      	ldr	r1, [r7, #28]
 8009732:	6a3a      	ldr	r2, [r7, #32]
 8009734:	e841 2300 	strex	r3, r2, [r1]
 8009738:	61bb      	str	r3, [r7, #24]
   return(result);
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d1e6      	bne.n	800970e <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8009740:	2300      	movs	r3, #0
}
 8009742:	4618      	mov	r0, r3
 8009744:	3744      	adds	r7, #68	; 0x44
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop
 8009750:	080099fb 	.word	0x080099fb
 8009754:	0800989f 	.word	0x0800989f

08009758 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009758:	b480      	push	{r7}
 800975a:	b095      	sub	sp, #84	; 0x54
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009768:	e853 3f00 	ldrex	r3, [r3]
 800976c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800976e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009770:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009774:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	461a      	mov	r2, r3
 800977c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800977e:	643b      	str	r3, [r7, #64]	; 0x40
 8009780:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009782:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009784:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009786:	e841 2300 	strex	r3, r2, [r1]
 800978a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800978c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800978e:	2b00      	cmp	r3, #0
 8009790:	d1e6      	bne.n	8009760 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	3308      	adds	r3, #8
 8009798:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800979a:	6a3b      	ldr	r3, [r7, #32]
 800979c:	e853 3f00 	ldrex	r3, [r3]
 80097a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80097a2:	69fb      	ldr	r3, [r7, #28]
 80097a4:	f023 0301 	bic.w	r3, r3, #1
 80097a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	3308      	adds	r3, #8
 80097b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80097b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097ba:	e841 2300 	strex	r3, r2, [r1]
 80097be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d1e5      	bne.n	8009792 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d118      	bne.n	8009800 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	e853 3f00 	ldrex	r3, [r3]
 80097da:	60bb      	str	r3, [r7, #8]
   return(result);
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	f023 0310 	bic.w	r3, r3, #16
 80097e2:	647b      	str	r3, [r7, #68]	; 0x44
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	461a      	mov	r2, r3
 80097ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097ec:	61bb      	str	r3, [r7, #24]
 80097ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f0:	6979      	ldr	r1, [r7, #20]
 80097f2:	69ba      	ldr	r2, [r7, #24]
 80097f4:	e841 2300 	strex	r3, r2, [r1]
 80097f8:	613b      	str	r3, [r7, #16]
   return(result);
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d1e6      	bne.n	80097ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2220      	movs	r2, #32
 8009804:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009812:	bf00      	nop
 8009814:	3754      	adds	r7, #84	; 0x54
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr

0800981e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800981e:	b580      	push	{r7, lr}
 8009820:	b084      	sub	sp, #16
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2200      	movs	r2, #0
 8009830:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2200      	movs	r2, #0
 8009838:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800983c:	68f8      	ldr	r0, [r7, #12]
 800983e:	f7ff fb45 	bl	8008ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009842:	bf00      	nop
 8009844:	3710      	adds	r7, #16
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}

0800984a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800984a:	b580      	push	{r7, lr}
 800984c:	b088      	sub	sp, #32
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	e853 3f00 	ldrex	r3, [r3]
 800985e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009866:	61fb      	str	r3, [r7, #28]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	461a      	mov	r2, r3
 800986e:	69fb      	ldr	r3, [r7, #28]
 8009870:	61bb      	str	r3, [r7, #24]
 8009872:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009874:	6979      	ldr	r1, [r7, #20]
 8009876:	69ba      	ldr	r2, [r7, #24]
 8009878:	e841 2300 	strex	r3, r2, [r1]
 800987c:	613b      	str	r3, [r7, #16]
   return(result);
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d1e6      	bne.n	8009852 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2220      	movs	r2, #32
 8009888:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f7ff fb11 	bl	8008eb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009896:	bf00      	nop
 8009898:	3720      	adds	r7, #32
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b096      	sub	sp, #88	; 0x58
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80098ac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098b4:	2b22      	cmp	r3, #34	; 0x22
 80098b6:	f040 8094 	bne.w	80099e2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80098c0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80098c4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80098c8:	b2d9      	uxtb	r1, r3
 80098ca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80098ce:	b2da      	uxtb	r2, r3
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098d4:	400a      	ands	r2, r1
 80098d6:	b2d2      	uxtb	r2, r2
 80098d8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098de:	1c5a      	adds	r2, r3, #1
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	3b01      	subs	r3, #1
 80098ee:	b29a      	uxth	r2, r3
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d177      	bne.n	80099f2 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800990a:	e853 3f00 	ldrex	r3, [r3]
 800990e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009912:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009916:	653b      	str	r3, [r7, #80]	; 0x50
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	461a      	mov	r2, r3
 800991e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009920:	647b      	str	r3, [r7, #68]	; 0x44
 8009922:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009924:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009926:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009928:	e841 2300 	strex	r3, r2, [r1]
 800992c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800992e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009930:	2b00      	cmp	r3, #0
 8009932:	d1e6      	bne.n	8009902 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	3308      	adds	r3, #8
 800993a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800993c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993e:	e853 3f00 	ldrex	r3, [r3]
 8009942:	623b      	str	r3, [r7, #32]
   return(result);
 8009944:	6a3b      	ldr	r3, [r7, #32]
 8009946:	f023 0301 	bic.w	r3, r3, #1
 800994a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	3308      	adds	r3, #8
 8009952:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009954:	633a      	str	r2, [r7, #48]	; 0x30
 8009956:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009958:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800995a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800995c:	e841 2300 	strex	r3, r2, [r1]
 8009960:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009964:	2b00      	cmp	r3, #0
 8009966:	d1e5      	bne.n	8009934 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2220      	movs	r2, #32
 800996c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009978:	2b01      	cmp	r3, #1
 800997a:	d12e      	bne.n	80099da <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2200      	movs	r2, #0
 8009980:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	e853 3f00 	ldrex	r3, [r3]
 800998e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f023 0310 	bic.w	r3, r3, #16
 8009996:	64bb      	str	r3, [r7, #72]	; 0x48
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	461a      	mov	r2, r3
 800999e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099a0:	61fb      	str	r3, [r7, #28]
 80099a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a4:	69b9      	ldr	r1, [r7, #24]
 80099a6:	69fa      	ldr	r2, [r7, #28]
 80099a8:	e841 2300 	strex	r3, r2, [r1]
 80099ac:	617b      	str	r3, [r7, #20]
   return(result);
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d1e6      	bne.n	8009982 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	69db      	ldr	r3, [r3, #28]
 80099ba:	f003 0310 	and.w	r3, r3, #16
 80099be:	2b10      	cmp	r3, #16
 80099c0:	d103      	bne.n	80099ca <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2210      	movs	r2, #16
 80099c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80099d0:	4619      	mov	r1, r3
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f7ff fa84 	bl	8008ee0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80099d8:	e00b      	b.n	80099f2 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f7f8 fbb8 	bl	8002150 <HAL_UART_RxCpltCallback>
}
 80099e0:	e007      	b.n	80099f2 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	699a      	ldr	r2, [r3, #24]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f042 0208 	orr.w	r2, r2, #8
 80099f0:	619a      	str	r2, [r3, #24]
}
 80099f2:	bf00      	nop
 80099f4:	3758      	adds	r7, #88	; 0x58
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b096      	sub	sp, #88	; 0x58
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a08:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a10:	2b22      	cmp	r3, #34	; 0x22
 8009a12:	f040 8094 	bne.w	8009b3e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009a1c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a24:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009a26:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009a2a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009a2e:	4013      	ands	r3, r2
 8009a30:	b29a      	uxth	r2, r3
 8009a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a34:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a3a:	1c9a      	adds	r2, r3, #2
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	3b01      	subs	r3, #1
 8009a4a:	b29a      	uxth	r2, r3
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d177      	bne.n	8009b4e <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a66:	e853 3f00 	ldrex	r3, [r3]
 8009a6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	461a      	mov	r2, r3
 8009a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a7c:	643b      	str	r3, [r7, #64]	; 0x40
 8009a7e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a84:	e841 2300 	strex	r3, r2, [r1]
 8009a88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d1e6      	bne.n	8009a5e <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	3308      	adds	r3, #8
 8009a96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a98:	6a3b      	ldr	r3, [r7, #32]
 8009a9a:	e853 3f00 	ldrex	r3, [r3]
 8009a9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	f023 0301 	bic.w	r3, r3, #1
 8009aa6:	64bb      	str	r3, [r7, #72]	; 0x48
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	3308      	adds	r3, #8
 8009aae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ab0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ab2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ab8:	e841 2300 	strex	r3, r2, [r1]
 8009abc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d1e5      	bne.n	8009a90 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2220      	movs	r2, #32
 8009ac8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2200      	movs	r2, #0
 8009ace:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	d12e      	bne.n	8009b36 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	e853 3f00 	ldrex	r3, [r3]
 8009aea:	60bb      	str	r3, [r7, #8]
   return(result);
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	f023 0310 	bic.w	r3, r3, #16
 8009af2:	647b      	str	r3, [r7, #68]	; 0x44
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	461a      	mov	r2, r3
 8009afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009afc:	61bb      	str	r3, [r7, #24]
 8009afe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b00:	6979      	ldr	r1, [r7, #20]
 8009b02:	69ba      	ldr	r2, [r7, #24]
 8009b04:	e841 2300 	strex	r3, r2, [r1]
 8009b08:	613b      	str	r3, [r7, #16]
   return(result);
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d1e6      	bne.n	8009ade <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	69db      	ldr	r3, [r3, #28]
 8009b16:	f003 0310 	and.w	r3, r3, #16
 8009b1a:	2b10      	cmp	r3, #16
 8009b1c:	d103      	bne.n	8009b26 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2210      	movs	r2, #16
 8009b24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f7ff f9d6 	bl	8008ee0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b34:	e00b      	b.n	8009b4e <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f7f8 fb0a 	bl	8002150 <HAL_UART_RxCpltCallback>
}
 8009b3c:	e007      	b.n	8009b4e <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	699a      	ldr	r2, [r3, #24]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f042 0208 	orr.w	r2, r2, #8
 8009b4c:	619a      	str	r2, [r3, #24]
}
 8009b4e:	bf00      	nop
 8009b50:	3758      	adds	r7, #88	; 0x58
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009b56:	b480      	push	{r7}
 8009b58:	b083      	sub	sp, #12
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009b5e:	bf00      	nop
 8009b60:	370c      	adds	r7, #12
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr
	...

08009b6c <__libc_init_array>:
 8009b6c:	b570      	push	{r4, r5, r6, lr}
 8009b6e:	4e0d      	ldr	r6, [pc, #52]	; (8009ba4 <__libc_init_array+0x38>)
 8009b70:	4c0d      	ldr	r4, [pc, #52]	; (8009ba8 <__libc_init_array+0x3c>)
 8009b72:	1ba4      	subs	r4, r4, r6
 8009b74:	10a4      	asrs	r4, r4, #2
 8009b76:	2500      	movs	r5, #0
 8009b78:	42a5      	cmp	r5, r4
 8009b7a:	d109      	bne.n	8009b90 <__libc_init_array+0x24>
 8009b7c:	4e0b      	ldr	r6, [pc, #44]	; (8009bac <__libc_init_array+0x40>)
 8009b7e:	4c0c      	ldr	r4, [pc, #48]	; (8009bb0 <__libc_init_array+0x44>)
 8009b80:	f001 f834 	bl	800abec <_init>
 8009b84:	1ba4      	subs	r4, r4, r6
 8009b86:	10a4      	asrs	r4, r4, #2
 8009b88:	2500      	movs	r5, #0
 8009b8a:	42a5      	cmp	r5, r4
 8009b8c:	d105      	bne.n	8009b9a <__libc_init_array+0x2e>
 8009b8e:	bd70      	pop	{r4, r5, r6, pc}
 8009b90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009b94:	4798      	blx	r3
 8009b96:	3501      	adds	r5, #1
 8009b98:	e7ee      	b.n	8009b78 <__libc_init_array+0xc>
 8009b9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009b9e:	4798      	blx	r3
 8009ba0:	3501      	adds	r5, #1
 8009ba2:	e7f2      	b.n	8009b8a <__libc_init_array+0x1e>
 8009ba4:	0800af08 	.word	0x0800af08
 8009ba8:	0800af08 	.word	0x0800af08
 8009bac:	0800af08 	.word	0x0800af08
 8009bb0:	0800af0c 	.word	0x0800af0c

08009bb4 <memset>:
 8009bb4:	4402      	add	r2, r0
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d100      	bne.n	8009bbe <memset+0xa>
 8009bbc:	4770      	bx	lr
 8009bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8009bc2:	e7f9      	b.n	8009bb8 <memset+0x4>
 8009bc4:	0000      	movs	r0, r0
	...

08009bc8 <sin>:
 8009bc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009bca:	ec51 0b10 	vmov	r0, r1, d0
 8009bce:	4a20      	ldr	r2, [pc, #128]	; (8009c50 <sin+0x88>)
 8009bd0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	dc07      	bgt.n	8009be8 <sin+0x20>
 8009bd8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8009c48 <sin+0x80>
 8009bdc:	2000      	movs	r0, #0
 8009bde:	f000 fe37 	bl	800a850 <__kernel_sin>
 8009be2:	ec51 0b10 	vmov	r0, r1, d0
 8009be6:	e007      	b.n	8009bf8 <sin+0x30>
 8009be8:	4a1a      	ldr	r2, [pc, #104]	; (8009c54 <sin+0x8c>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	dd09      	ble.n	8009c02 <sin+0x3a>
 8009bee:	ee10 2a10 	vmov	r2, s0
 8009bf2:	460b      	mov	r3, r1
 8009bf4:	f7f6 faf4 	bl	80001e0 <__aeabi_dsub>
 8009bf8:	ec41 0b10 	vmov	d0, r0, r1
 8009bfc:	b005      	add	sp, #20
 8009bfe:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c02:	4668      	mov	r0, sp
 8009c04:	f000 f828 	bl	8009c58 <__ieee754_rem_pio2>
 8009c08:	f000 0003 	and.w	r0, r0, #3
 8009c0c:	2801      	cmp	r0, #1
 8009c0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c12:	ed9d 0b00 	vldr	d0, [sp]
 8009c16:	d004      	beq.n	8009c22 <sin+0x5a>
 8009c18:	2802      	cmp	r0, #2
 8009c1a:	d005      	beq.n	8009c28 <sin+0x60>
 8009c1c:	b970      	cbnz	r0, 8009c3c <sin+0x74>
 8009c1e:	2001      	movs	r0, #1
 8009c20:	e7dd      	b.n	8009bde <sin+0x16>
 8009c22:	f000 fa0d 	bl	800a040 <__kernel_cos>
 8009c26:	e7dc      	b.n	8009be2 <sin+0x1a>
 8009c28:	2001      	movs	r0, #1
 8009c2a:	f000 fe11 	bl	800a850 <__kernel_sin>
 8009c2e:	ec53 2b10 	vmov	r2, r3, d0
 8009c32:	ee10 0a10 	vmov	r0, s0
 8009c36:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009c3a:	e7dd      	b.n	8009bf8 <sin+0x30>
 8009c3c:	f000 fa00 	bl	800a040 <__kernel_cos>
 8009c40:	e7f5      	b.n	8009c2e <sin+0x66>
 8009c42:	bf00      	nop
 8009c44:	f3af 8000 	nop.w
	...
 8009c50:	3fe921fb 	.word	0x3fe921fb
 8009c54:	7fefffff 	.word	0x7fefffff

08009c58 <__ieee754_rem_pio2>:
 8009c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c5c:	ec57 6b10 	vmov	r6, r7, d0
 8009c60:	4bc3      	ldr	r3, [pc, #780]	; (8009f70 <__ieee754_rem_pio2+0x318>)
 8009c62:	b08d      	sub	sp, #52	; 0x34
 8009c64:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009c68:	4598      	cmp	r8, r3
 8009c6a:	4604      	mov	r4, r0
 8009c6c:	9704      	str	r7, [sp, #16]
 8009c6e:	dc07      	bgt.n	8009c80 <__ieee754_rem_pio2+0x28>
 8009c70:	2200      	movs	r2, #0
 8009c72:	2300      	movs	r3, #0
 8009c74:	ed84 0b00 	vstr	d0, [r4]
 8009c78:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009c7c:	2500      	movs	r5, #0
 8009c7e:	e027      	b.n	8009cd0 <__ieee754_rem_pio2+0x78>
 8009c80:	4bbc      	ldr	r3, [pc, #752]	; (8009f74 <__ieee754_rem_pio2+0x31c>)
 8009c82:	4598      	cmp	r8, r3
 8009c84:	dc75      	bgt.n	8009d72 <__ieee754_rem_pio2+0x11a>
 8009c86:	9b04      	ldr	r3, [sp, #16]
 8009c88:	4dbb      	ldr	r5, [pc, #748]	; (8009f78 <__ieee754_rem_pio2+0x320>)
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	ee10 0a10 	vmov	r0, s0
 8009c90:	a3a9      	add	r3, pc, #676	; (adr r3, 8009f38 <__ieee754_rem_pio2+0x2e0>)
 8009c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c96:	4639      	mov	r1, r7
 8009c98:	dd36      	ble.n	8009d08 <__ieee754_rem_pio2+0xb0>
 8009c9a:	f7f6 faa1 	bl	80001e0 <__aeabi_dsub>
 8009c9e:	45a8      	cmp	r8, r5
 8009ca0:	4606      	mov	r6, r0
 8009ca2:	460f      	mov	r7, r1
 8009ca4:	d018      	beq.n	8009cd8 <__ieee754_rem_pio2+0x80>
 8009ca6:	a3a6      	add	r3, pc, #664	; (adr r3, 8009f40 <__ieee754_rem_pio2+0x2e8>)
 8009ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cac:	f7f6 fa98 	bl	80001e0 <__aeabi_dsub>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	460b      	mov	r3, r1
 8009cb4:	e9c4 2300 	strd	r2, r3, [r4]
 8009cb8:	4630      	mov	r0, r6
 8009cba:	4639      	mov	r1, r7
 8009cbc:	f7f6 fa90 	bl	80001e0 <__aeabi_dsub>
 8009cc0:	a39f      	add	r3, pc, #636	; (adr r3, 8009f40 <__ieee754_rem_pio2+0x2e8>)
 8009cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc6:	f7f6 fa8b 	bl	80001e0 <__aeabi_dsub>
 8009cca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009cce:	2501      	movs	r5, #1
 8009cd0:	4628      	mov	r0, r5
 8009cd2:	b00d      	add	sp, #52	; 0x34
 8009cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cd8:	a39b      	add	r3, pc, #620	; (adr r3, 8009f48 <__ieee754_rem_pio2+0x2f0>)
 8009cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cde:	f7f6 fa7f 	bl	80001e0 <__aeabi_dsub>
 8009ce2:	a39b      	add	r3, pc, #620	; (adr r3, 8009f50 <__ieee754_rem_pio2+0x2f8>)
 8009ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce8:	4606      	mov	r6, r0
 8009cea:	460f      	mov	r7, r1
 8009cec:	f7f6 fa78 	bl	80001e0 <__aeabi_dsub>
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	460b      	mov	r3, r1
 8009cf4:	e9c4 2300 	strd	r2, r3, [r4]
 8009cf8:	4630      	mov	r0, r6
 8009cfa:	4639      	mov	r1, r7
 8009cfc:	f7f6 fa70 	bl	80001e0 <__aeabi_dsub>
 8009d00:	a393      	add	r3, pc, #588	; (adr r3, 8009f50 <__ieee754_rem_pio2+0x2f8>)
 8009d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d06:	e7de      	b.n	8009cc6 <__ieee754_rem_pio2+0x6e>
 8009d08:	f7f6 fa6c 	bl	80001e4 <__adddf3>
 8009d0c:	45a8      	cmp	r8, r5
 8009d0e:	4606      	mov	r6, r0
 8009d10:	460f      	mov	r7, r1
 8009d12:	d016      	beq.n	8009d42 <__ieee754_rem_pio2+0xea>
 8009d14:	a38a      	add	r3, pc, #552	; (adr r3, 8009f40 <__ieee754_rem_pio2+0x2e8>)
 8009d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1a:	f7f6 fa63 	bl	80001e4 <__adddf3>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	460b      	mov	r3, r1
 8009d22:	e9c4 2300 	strd	r2, r3, [r4]
 8009d26:	4630      	mov	r0, r6
 8009d28:	4639      	mov	r1, r7
 8009d2a:	f7f6 fa59 	bl	80001e0 <__aeabi_dsub>
 8009d2e:	a384      	add	r3, pc, #528	; (adr r3, 8009f40 <__ieee754_rem_pio2+0x2e8>)
 8009d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d34:	f7f6 fa56 	bl	80001e4 <__adddf3>
 8009d38:	f04f 35ff 	mov.w	r5, #4294967295
 8009d3c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009d40:	e7c6      	b.n	8009cd0 <__ieee754_rem_pio2+0x78>
 8009d42:	a381      	add	r3, pc, #516	; (adr r3, 8009f48 <__ieee754_rem_pio2+0x2f0>)
 8009d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d48:	f7f6 fa4c 	bl	80001e4 <__adddf3>
 8009d4c:	a380      	add	r3, pc, #512	; (adr r3, 8009f50 <__ieee754_rem_pio2+0x2f8>)
 8009d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d52:	4606      	mov	r6, r0
 8009d54:	460f      	mov	r7, r1
 8009d56:	f7f6 fa45 	bl	80001e4 <__adddf3>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	e9c4 2300 	strd	r2, r3, [r4]
 8009d62:	4630      	mov	r0, r6
 8009d64:	4639      	mov	r1, r7
 8009d66:	f7f6 fa3b 	bl	80001e0 <__aeabi_dsub>
 8009d6a:	a379      	add	r3, pc, #484	; (adr r3, 8009f50 <__ieee754_rem_pio2+0x2f8>)
 8009d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d70:	e7e0      	b.n	8009d34 <__ieee754_rem_pio2+0xdc>
 8009d72:	4b82      	ldr	r3, [pc, #520]	; (8009f7c <__ieee754_rem_pio2+0x324>)
 8009d74:	4598      	cmp	r8, r3
 8009d76:	f300 80d0 	bgt.w	8009f1a <__ieee754_rem_pio2+0x2c2>
 8009d7a:	f000 fe23 	bl	800a9c4 <fabs>
 8009d7e:	ec57 6b10 	vmov	r6, r7, d0
 8009d82:	ee10 0a10 	vmov	r0, s0
 8009d86:	a374      	add	r3, pc, #464	; (adr r3, 8009f58 <__ieee754_rem_pio2+0x300>)
 8009d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8c:	4639      	mov	r1, r7
 8009d8e:	f7f6 fbdf 	bl	8000550 <__aeabi_dmul>
 8009d92:	2200      	movs	r2, #0
 8009d94:	4b7a      	ldr	r3, [pc, #488]	; (8009f80 <__ieee754_rem_pio2+0x328>)
 8009d96:	f7f6 fa25 	bl	80001e4 <__adddf3>
 8009d9a:	f7f6 fe73 	bl	8000a84 <__aeabi_d2iz>
 8009d9e:	4605      	mov	r5, r0
 8009da0:	f7f6 fb6c 	bl	800047c <__aeabi_i2d>
 8009da4:	a364      	add	r3, pc, #400	; (adr r3, 8009f38 <__ieee754_rem_pio2+0x2e0>)
 8009da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009daa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dae:	f7f6 fbcf 	bl	8000550 <__aeabi_dmul>
 8009db2:	4602      	mov	r2, r0
 8009db4:	460b      	mov	r3, r1
 8009db6:	4630      	mov	r0, r6
 8009db8:	4639      	mov	r1, r7
 8009dba:	f7f6 fa11 	bl	80001e0 <__aeabi_dsub>
 8009dbe:	a360      	add	r3, pc, #384	; (adr r3, 8009f40 <__ieee754_rem_pio2+0x2e8>)
 8009dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc4:	4682      	mov	sl, r0
 8009dc6:	468b      	mov	fp, r1
 8009dc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009dcc:	f7f6 fbc0 	bl	8000550 <__aeabi_dmul>
 8009dd0:	2d1f      	cmp	r5, #31
 8009dd2:	4606      	mov	r6, r0
 8009dd4:	460f      	mov	r7, r1
 8009dd6:	dc0c      	bgt.n	8009df2 <__ieee754_rem_pio2+0x19a>
 8009dd8:	1e6a      	subs	r2, r5, #1
 8009dda:	4b6a      	ldr	r3, [pc, #424]	; (8009f84 <__ieee754_rem_pio2+0x32c>)
 8009ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009de0:	4543      	cmp	r3, r8
 8009de2:	d006      	beq.n	8009df2 <__ieee754_rem_pio2+0x19a>
 8009de4:	4632      	mov	r2, r6
 8009de6:	463b      	mov	r3, r7
 8009de8:	4650      	mov	r0, sl
 8009dea:	4659      	mov	r1, fp
 8009dec:	f7f6 f9f8 	bl	80001e0 <__aeabi_dsub>
 8009df0:	e00e      	b.n	8009e10 <__ieee754_rem_pio2+0x1b8>
 8009df2:	4632      	mov	r2, r6
 8009df4:	463b      	mov	r3, r7
 8009df6:	4650      	mov	r0, sl
 8009df8:	4659      	mov	r1, fp
 8009dfa:	f7f6 f9f1 	bl	80001e0 <__aeabi_dsub>
 8009dfe:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009e02:	9305      	str	r3, [sp, #20]
 8009e04:	9a05      	ldr	r2, [sp, #20]
 8009e06:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009e0a:	1ad3      	subs	r3, r2, r3
 8009e0c:	2b10      	cmp	r3, #16
 8009e0e:	dc02      	bgt.n	8009e16 <__ieee754_rem_pio2+0x1be>
 8009e10:	e9c4 0100 	strd	r0, r1, [r4]
 8009e14:	e039      	b.n	8009e8a <__ieee754_rem_pio2+0x232>
 8009e16:	a34c      	add	r3, pc, #304	; (adr r3, 8009f48 <__ieee754_rem_pio2+0x2f0>)
 8009e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e20:	f7f6 fb96 	bl	8000550 <__aeabi_dmul>
 8009e24:	4606      	mov	r6, r0
 8009e26:	460f      	mov	r7, r1
 8009e28:	4602      	mov	r2, r0
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	4650      	mov	r0, sl
 8009e2e:	4659      	mov	r1, fp
 8009e30:	f7f6 f9d6 	bl	80001e0 <__aeabi_dsub>
 8009e34:	4602      	mov	r2, r0
 8009e36:	460b      	mov	r3, r1
 8009e38:	4680      	mov	r8, r0
 8009e3a:	4689      	mov	r9, r1
 8009e3c:	4650      	mov	r0, sl
 8009e3e:	4659      	mov	r1, fp
 8009e40:	f7f6 f9ce 	bl	80001e0 <__aeabi_dsub>
 8009e44:	4632      	mov	r2, r6
 8009e46:	463b      	mov	r3, r7
 8009e48:	f7f6 f9ca 	bl	80001e0 <__aeabi_dsub>
 8009e4c:	a340      	add	r3, pc, #256	; (adr r3, 8009f50 <__ieee754_rem_pio2+0x2f8>)
 8009e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e52:	4606      	mov	r6, r0
 8009e54:	460f      	mov	r7, r1
 8009e56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e5a:	f7f6 fb79 	bl	8000550 <__aeabi_dmul>
 8009e5e:	4632      	mov	r2, r6
 8009e60:	463b      	mov	r3, r7
 8009e62:	f7f6 f9bd 	bl	80001e0 <__aeabi_dsub>
 8009e66:	4602      	mov	r2, r0
 8009e68:	460b      	mov	r3, r1
 8009e6a:	4606      	mov	r6, r0
 8009e6c:	460f      	mov	r7, r1
 8009e6e:	4640      	mov	r0, r8
 8009e70:	4649      	mov	r1, r9
 8009e72:	f7f6 f9b5 	bl	80001e0 <__aeabi_dsub>
 8009e76:	9a05      	ldr	r2, [sp, #20]
 8009e78:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009e7c:	1ad3      	subs	r3, r2, r3
 8009e7e:	2b31      	cmp	r3, #49	; 0x31
 8009e80:	dc20      	bgt.n	8009ec4 <__ieee754_rem_pio2+0x26c>
 8009e82:	e9c4 0100 	strd	r0, r1, [r4]
 8009e86:	46c2      	mov	sl, r8
 8009e88:	46cb      	mov	fp, r9
 8009e8a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009e8e:	4650      	mov	r0, sl
 8009e90:	4642      	mov	r2, r8
 8009e92:	464b      	mov	r3, r9
 8009e94:	4659      	mov	r1, fp
 8009e96:	f7f6 f9a3 	bl	80001e0 <__aeabi_dsub>
 8009e9a:	463b      	mov	r3, r7
 8009e9c:	4632      	mov	r2, r6
 8009e9e:	f7f6 f99f 	bl	80001e0 <__aeabi_dsub>
 8009ea2:	9b04      	ldr	r3, [sp, #16]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009eaa:	f6bf af11 	bge.w	8009cd0 <__ieee754_rem_pio2+0x78>
 8009eae:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009eb2:	6063      	str	r3, [r4, #4]
 8009eb4:	f8c4 8000 	str.w	r8, [r4]
 8009eb8:	60a0      	str	r0, [r4, #8]
 8009eba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ebe:	60e3      	str	r3, [r4, #12]
 8009ec0:	426d      	negs	r5, r5
 8009ec2:	e705      	b.n	8009cd0 <__ieee754_rem_pio2+0x78>
 8009ec4:	a326      	add	r3, pc, #152	; (adr r3, 8009f60 <__ieee754_rem_pio2+0x308>)
 8009ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ece:	f7f6 fb3f 	bl	8000550 <__aeabi_dmul>
 8009ed2:	4606      	mov	r6, r0
 8009ed4:	460f      	mov	r7, r1
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	460b      	mov	r3, r1
 8009eda:	4640      	mov	r0, r8
 8009edc:	4649      	mov	r1, r9
 8009ede:	f7f6 f97f 	bl	80001e0 <__aeabi_dsub>
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	4682      	mov	sl, r0
 8009ee8:	468b      	mov	fp, r1
 8009eea:	4640      	mov	r0, r8
 8009eec:	4649      	mov	r1, r9
 8009eee:	f7f6 f977 	bl	80001e0 <__aeabi_dsub>
 8009ef2:	4632      	mov	r2, r6
 8009ef4:	463b      	mov	r3, r7
 8009ef6:	f7f6 f973 	bl	80001e0 <__aeabi_dsub>
 8009efa:	a31b      	add	r3, pc, #108	; (adr r3, 8009f68 <__ieee754_rem_pio2+0x310>)
 8009efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f00:	4606      	mov	r6, r0
 8009f02:	460f      	mov	r7, r1
 8009f04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f08:	f7f6 fb22 	bl	8000550 <__aeabi_dmul>
 8009f0c:	4632      	mov	r2, r6
 8009f0e:	463b      	mov	r3, r7
 8009f10:	f7f6 f966 	bl	80001e0 <__aeabi_dsub>
 8009f14:	4606      	mov	r6, r0
 8009f16:	460f      	mov	r7, r1
 8009f18:	e764      	b.n	8009de4 <__ieee754_rem_pio2+0x18c>
 8009f1a:	4b1b      	ldr	r3, [pc, #108]	; (8009f88 <__ieee754_rem_pio2+0x330>)
 8009f1c:	4598      	cmp	r8, r3
 8009f1e:	dd35      	ble.n	8009f8c <__ieee754_rem_pio2+0x334>
 8009f20:	ee10 2a10 	vmov	r2, s0
 8009f24:	463b      	mov	r3, r7
 8009f26:	4630      	mov	r0, r6
 8009f28:	4639      	mov	r1, r7
 8009f2a:	f7f6 f959 	bl	80001e0 <__aeabi_dsub>
 8009f2e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009f32:	e9c4 0100 	strd	r0, r1, [r4]
 8009f36:	e6a1      	b.n	8009c7c <__ieee754_rem_pio2+0x24>
 8009f38:	54400000 	.word	0x54400000
 8009f3c:	3ff921fb 	.word	0x3ff921fb
 8009f40:	1a626331 	.word	0x1a626331
 8009f44:	3dd0b461 	.word	0x3dd0b461
 8009f48:	1a600000 	.word	0x1a600000
 8009f4c:	3dd0b461 	.word	0x3dd0b461
 8009f50:	2e037073 	.word	0x2e037073
 8009f54:	3ba3198a 	.word	0x3ba3198a
 8009f58:	6dc9c883 	.word	0x6dc9c883
 8009f5c:	3fe45f30 	.word	0x3fe45f30
 8009f60:	2e000000 	.word	0x2e000000
 8009f64:	3ba3198a 	.word	0x3ba3198a
 8009f68:	252049c1 	.word	0x252049c1
 8009f6c:	397b839a 	.word	0x397b839a
 8009f70:	3fe921fb 	.word	0x3fe921fb
 8009f74:	4002d97b 	.word	0x4002d97b
 8009f78:	3ff921fb 	.word	0x3ff921fb
 8009f7c:	413921fb 	.word	0x413921fb
 8009f80:	3fe00000 	.word	0x3fe00000
 8009f84:	0800ad30 	.word	0x0800ad30
 8009f88:	7fefffff 	.word	0x7fefffff
 8009f8c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8009f90:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8009f94:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009f98:	4630      	mov	r0, r6
 8009f9a:	460f      	mov	r7, r1
 8009f9c:	f7f6 fd72 	bl	8000a84 <__aeabi_d2iz>
 8009fa0:	f7f6 fa6c 	bl	800047c <__aeabi_i2d>
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	4630      	mov	r0, r6
 8009faa:	4639      	mov	r1, r7
 8009fac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009fb0:	f7f6 f916 	bl	80001e0 <__aeabi_dsub>
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	4b1f      	ldr	r3, [pc, #124]	; (800a034 <__ieee754_rem_pio2+0x3dc>)
 8009fb8:	f7f6 faca 	bl	8000550 <__aeabi_dmul>
 8009fbc:	460f      	mov	r7, r1
 8009fbe:	4606      	mov	r6, r0
 8009fc0:	f7f6 fd60 	bl	8000a84 <__aeabi_d2iz>
 8009fc4:	f7f6 fa5a 	bl	800047c <__aeabi_i2d>
 8009fc8:	4602      	mov	r2, r0
 8009fca:	460b      	mov	r3, r1
 8009fcc:	4630      	mov	r0, r6
 8009fce:	4639      	mov	r1, r7
 8009fd0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009fd4:	f7f6 f904 	bl	80001e0 <__aeabi_dsub>
 8009fd8:	2200      	movs	r2, #0
 8009fda:	4b16      	ldr	r3, [pc, #88]	; (800a034 <__ieee754_rem_pio2+0x3dc>)
 8009fdc:	f7f6 fab8 	bl	8000550 <__aeabi_dmul>
 8009fe0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009fe4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8009fe8:	f04f 0803 	mov.w	r8, #3
 8009fec:	2600      	movs	r6, #0
 8009fee:	2700      	movs	r7, #0
 8009ff0:	4632      	mov	r2, r6
 8009ff2:	463b      	mov	r3, r7
 8009ff4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8009ff8:	f108 3aff 	add.w	sl, r8, #4294967295
 8009ffc:	f7f6 fd10 	bl	8000a20 <__aeabi_dcmpeq>
 800a000:	b9b0      	cbnz	r0, 800a030 <__ieee754_rem_pio2+0x3d8>
 800a002:	4b0d      	ldr	r3, [pc, #52]	; (800a038 <__ieee754_rem_pio2+0x3e0>)
 800a004:	9301      	str	r3, [sp, #4]
 800a006:	2302      	movs	r3, #2
 800a008:	9300      	str	r3, [sp, #0]
 800a00a:	462a      	mov	r2, r5
 800a00c:	4643      	mov	r3, r8
 800a00e:	4621      	mov	r1, r4
 800a010:	a806      	add	r0, sp, #24
 800a012:	f000 f8dd 	bl	800a1d0 <__kernel_rem_pio2>
 800a016:	9b04      	ldr	r3, [sp, #16]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	4605      	mov	r5, r0
 800a01c:	f6bf ae58 	bge.w	8009cd0 <__ieee754_rem_pio2+0x78>
 800a020:	6863      	ldr	r3, [r4, #4]
 800a022:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a026:	6063      	str	r3, [r4, #4]
 800a028:	68e3      	ldr	r3, [r4, #12]
 800a02a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a02e:	e746      	b.n	8009ebe <__ieee754_rem_pio2+0x266>
 800a030:	46d0      	mov	r8, sl
 800a032:	e7dd      	b.n	8009ff0 <__ieee754_rem_pio2+0x398>
 800a034:	41700000 	.word	0x41700000
 800a038:	0800adb0 	.word	0x0800adb0
 800a03c:	00000000 	.word	0x00000000

0800a040 <__kernel_cos>:
 800a040:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a044:	ec59 8b10 	vmov	r8, r9, d0
 800a048:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800a04c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800a050:	ed2d 8b02 	vpush	{d8}
 800a054:	eeb0 8a41 	vmov.f32	s16, s2
 800a058:	eef0 8a61 	vmov.f32	s17, s3
 800a05c:	da07      	bge.n	800a06e <__kernel_cos+0x2e>
 800a05e:	ee10 0a10 	vmov	r0, s0
 800a062:	4649      	mov	r1, r9
 800a064:	f7f6 fd0e 	bl	8000a84 <__aeabi_d2iz>
 800a068:	2800      	cmp	r0, #0
 800a06a:	f000 8089 	beq.w	800a180 <__kernel_cos+0x140>
 800a06e:	4642      	mov	r2, r8
 800a070:	464b      	mov	r3, r9
 800a072:	4640      	mov	r0, r8
 800a074:	4649      	mov	r1, r9
 800a076:	f7f6 fa6b 	bl	8000550 <__aeabi_dmul>
 800a07a:	2200      	movs	r2, #0
 800a07c:	4b4e      	ldr	r3, [pc, #312]	; (800a1b8 <__kernel_cos+0x178>)
 800a07e:	4604      	mov	r4, r0
 800a080:	460d      	mov	r5, r1
 800a082:	f7f6 fa65 	bl	8000550 <__aeabi_dmul>
 800a086:	a340      	add	r3, pc, #256	; (adr r3, 800a188 <__kernel_cos+0x148>)
 800a088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a08c:	4682      	mov	sl, r0
 800a08e:	468b      	mov	fp, r1
 800a090:	4620      	mov	r0, r4
 800a092:	4629      	mov	r1, r5
 800a094:	f7f6 fa5c 	bl	8000550 <__aeabi_dmul>
 800a098:	a33d      	add	r3, pc, #244	; (adr r3, 800a190 <__kernel_cos+0x150>)
 800a09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09e:	f7f6 f8a1 	bl	80001e4 <__adddf3>
 800a0a2:	4622      	mov	r2, r4
 800a0a4:	462b      	mov	r3, r5
 800a0a6:	f7f6 fa53 	bl	8000550 <__aeabi_dmul>
 800a0aa:	a33b      	add	r3, pc, #236	; (adr r3, 800a198 <__kernel_cos+0x158>)
 800a0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b0:	f7f6 f896 	bl	80001e0 <__aeabi_dsub>
 800a0b4:	4622      	mov	r2, r4
 800a0b6:	462b      	mov	r3, r5
 800a0b8:	f7f6 fa4a 	bl	8000550 <__aeabi_dmul>
 800a0bc:	a338      	add	r3, pc, #224	; (adr r3, 800a1a0 <__kernel_cos+0x160>)
 800a0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c2:	f7f6 f88f 	bl	80001e4 <__adddf3>
 800a0c6:	4622      	mov	r2, r4
 800a0c8:	462b      	mov	r3, r5
 800a0ca:	f7f6 fa41 	bl	8000550 <__aeabi_dmul>
 800a0ce:	a336      	add	r3, pc, #216	; (adr r3, 800a1a8 <__kernel_cos+0x168>)
 800a0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d4:	f7f6 f884 	bl	80001e0 <__aeabi_dsub>
 800a0d8:	4622      	mov	r2, r4
 800a0da:	462b      	mov	r3, r5
 800a0dc:	f7f6 fa38 	bl	8000550 <__aeabi_dmul>
 800a0e0:	a333      	add	r3, pc, #204	; (adr r3, 800a1b0 <__kernel_cos+0x170>)
 800a0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e6:	f7f6 f87d 	bl	80001e4 <__adddf3>
 800a0ea:	4622      	mov	r2, r4
 800a0ec:	462b      	mov	r3, r5
 800a0ee:	f7f6 fa2f 	bl	8000550 <__aeabi_dmul>
 800a0f2:	4622      	mov	r2, r4
 800a0f4:	462b      	mov	r3, r5
 800a0f6:	f7f6 fa2b 	bl	8000550 <__aeabi_dmul>
 800a0fa:	ec53 2b18 	vmov	r2, r3, d8
 800a0fe:	4604      	mov	r4, r0
 800a100:	460d      	mov	r5, r1
 800a102:	4640      	mov	r0, r8
 800a104:	4649      	mov	r1, r9
 800a106:	f7f6 fa23 	bl	8000550 <__aeabi_dmul>
 800a10a:	460b      	mov	r3, r1
 800a10c:	4602      	mov	r2, r0
 800a10e:	4629      	mov	r1, r5
 800a110:	4620      	mov	r0, r4
 800a112:	f7f6 f865 	bl	80001e0 <__aeabi_dsub>
 800a116:	4b29      	ldr	r3, [pc, #164]	; (800a1bc <__kernel_cos+0x17c>)
 800a118:	429e      	cmp	r6, r3
 800a11a:	4680      	mov	r8, r0
 800a11c:	4689      	mov	r9, r1
 800a11e:	dc11      	bgt.n	800a144 <__kernel_cos+0x104>
 800a120:	4602      	mov	r2, r0
 800a122:	460b      	mov	r3, r1
 800a124:	4650      	mov	r0, sl
 800a126:	4659      	mov	r1, fp
 800a128:	f7f6 f85a 	bl	80001e0 <__aeabi_dsub>
 800a12c:	460b      	mov	r3, r1
 800a12e:	4924      	ldr	r1, [pc, #144]	; (800a1c0 <__kernel_cos+0x180>)
 800a130:	4602      	mov	r2, r0
 800a132:	2000      	movs	r0, #0
 800a134:	f7f6 f854 	bl	80001e0 <__aeabi_dsub>
 800a138:	ecbd 8b02 	vpop	{d8}
 800a13c:	ec41 0b10 	vmov	d0, r0, r1
 800a140:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a144:	4b1f      	ldr	r3, [pc, #124]	; (800a1c4 <__kernel_cos+0x184>)
 800a146:	491e      	ldr	r1, [pc, #120]	; (800a1c0 <__kernel_cos+0x180>)
 800a148:	429e      	cmp	r6, r3
 800a14a:	bfcc      	ite	gt
 800a14c:	4d1e      	ldrgt	r5, [pc, #120]	; (800a1c8 <__kernel_cos+0x188>)
 800a14e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800a152:	2400      	movs	r4, #0
 800a154:	4622      	mov	r2, r4
 800a156:	462b      	mov	r3, r5
 800a158:	2000      	movs	r0, #0
 800a15a:	f7f6 f841 	bl	80001e0 <__aeabi_dsub>
 800a15e:	4622      	mov	r2, r4
 800a160:	4606      	mov	r6, r0
 800a162:	460f      	mov	r7, r1
 800a164:	462b      	mov	r3, r5
 800a166:	4650      	mov	r0, sl
 800a168:	4659      	mov	r1, fp
 800a16a:	f7f6 f839 	bl	80001e0 <__aeabi_dsub>
 800a16e:	4642      	mov	r2, r8
 800a170:	464b      	mov	r3, r9
 800a172:	f7f6 f835 	bl	80001e0 <__aeabi_dsub>
 800a176:	4602      	mov	r2, r0
 800a178:	460b      	mov	r3, r1
 800a17a:	4630      	mov	r0, r6
 800a17c:	4639      	mov	r1, r7
 800a17e:	e7d9      	b.n	800a134 <__kernel_cos+0xf4>
 800a180:	2000      	movs	r0, #0
 800a182:	490f      	ldr	r1, [pc, #60]	; (800a1c0 <__kernel_cos+0x180>)
 800a184:	e7d8      	b.n	800a138 <__kernel_cos+0xf8>
 800a186:	bf00      	nop
 800a188:	be8838d4 	.word	0xbe8838d4
 800a18c:	bda8fae9 	.word	0xbda8fae9
 800a190:	bdb4b1c4 	.word	0xbdb4b1c4
 800a194:	3e21ee9e 	.word	0x3e21ee9e
 800a198:	809c52ad 	.word	0x809c52ad
 800a19c:	3e927e4f 	.word	0x3e927e4f
 800a1a0:	19cb1590 	.word	0x19cb1590
 800a1a4:	3efa01a0 	.word	0x3efa01a0
 800a1a8:	16c15177 	.word	0x16c15177
 800a1ac:	3f56c16c 	.word	0x3f56c16c
 800a1b0:	5555554c 	.word	0x5555554c
 800a1b4:	3fa55555 	.word	0x3fa55555
 800a1b8:	3fe00000 	.word	0x3fe00000
 800a1bc:	3fd33332 	.word	0x3fd33332
 800a1c0:	3ff00000 	.word	0x3ff00000
 800a1c4:	3fe90000 	.word	0x3fe90000
 800a1c8:	3fd20000 	.word	0x3fd20000
 800a1cc:	00000000 	.word	0x00000000

0800a1d0 <__kernel_rem_pio2>:
 800a1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1d4:	ed2d 8b02 	vpush	{d8}
 800a1d8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a1dc:	1ed4      	subs	r4, r2, #3
 800a1de:	9308      	str	r3, [sp, #32]
 800a1e0:	9101      	str	r1, [sp, #4]
 800a1e2:	4bc5      	ldr	r3, [pc, #788]	; (800a4f8 <__kernel_rem_pio2+0x328>)
 800a1e4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a1e6:	9009      	str	r0, [sp, #36]	; 0x24
 800a1e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a1ec:	9304      	str	r3, [sp, #16]
 800a1ee:	9b08      	ldr	r3, [sp, #32]
 800a1f0:	3b01      	subs	r3, #1
 800a1f2:	9307      	str	r3, [sp, #28]
 800a1f4:	2318      	movs	r3, #24
 800a1f6:	fb94 f4f3 	sdiv	r4, r4, r3
 800a1fa:	f06f 0317 	mvn.w	r3, #23
 800a1fe:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800a202:	fb04 3303 	mla	r3, r4, r3, r3
 800a206:	eb03 0a02 	add.w	sl, r3, r2
 800a20a:	9b04      	ldr	r3, [sp, #16]
 800a20c:	9a07      	ldr	r2, [sp, #28]
 800a20e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800a4e8 <__kernel_rem_pio2+0x318>
 800a212:	eb03 0802 	add.w	r8, r3, r2
 800a216:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a218:	1aa7      	subs	r7, r4, r2
 800a21a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a21e:	ae22      	add	r6, sp, #136	; 0x88
 800a220:	2500      	movs	r5, #0
 800a222:	4545      	cmp	r5, r8
 800a224:	dd13      	ble.n	800a24e <__kernel_rem_pio2+0x7e>
 800a226:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800a4e8 <__kernel_rem_pio2+0x318>
 800a22a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a22e:	2600      	movs	r6, #0
 800a230:	9b04      	ldr	r3, [sp, #16]
 800a232:	429e      	cmp	r6, r3
 800a234:	dc32      	bgt.n	800a29c <__kernel_rem_pio2+0xcc>
 800a236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a238:	9302      	str	r3, [sp, #8]
 800a23a:	9b08      	ldr	r3, [sp, #32]
 800a23c:	199d      	adds	r5, r3, r6
 800a23e:	ab22      	add	r3, sp, #136	; 0x88
 800a240:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a244:	9306      	str	r3, [sp, #24]
 800a246:	ec59 8b18 	vmov	r8, r9, d8
 800a24a:	2700      	movs	r7, #0
 800a24c:	e01f      	b.n	800a28e <__kernel_rem_pio2+0xbe>
 800a24e:	42ef      	cmn	r7, r5
 800a250:	d407      	bmi.n	800a262 <__kernel_rem_pio2+0x92>
 800a252:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a256:	f7f6 f911 	bl	800047c <__aeabi_i2d>
 800a25a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a25e:	3501      	adds	r5, #1
 800a260:	e7df      	b.n	800a222 <__kernel_rem_pio2+0x52>
 800a262:	ec51 0b18 	vmov	r0, r1, d8
 800a266:	e7f8      	b.n	800a25a <__kernel_rem_pio2+0x8a>
 800a268:	9906      	ldr	r1, [sp, #24]
 800a26a:	9d02      	ldr	r5, [sp, #8]
 800a26c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800a270:	9106      	str	r1, [sp, #24]
 800a272:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800a276:	9502      	str	r5, [sp, #8]
 800a278:	f7f6 f96a 	bl	8000550 <__aeabi_dmul>
 800a27c:	4602      	mov	r2, r0
 800a27e:	460b      	mov	r3, r1
 800a280:	4640      	mov	r0, r8
 800a282:	4649      	mov	r1, r9
 800a284:	f7f5 ffae 	bl	80001e4 <__adddf3>
 800a288:	3701      	adds	r7, #1
 800a28a:	4680      	mov	r8, r0
 800a28c:	4689      	mov	r9, r1
 800a28e:	9b07      	ldr	r3, [sp, #28]
 800a290:	429f      	cmp	r7, r3
 800a292:	dde9      	ble.n	800a268 <__kernel_rem_pio2+0x98>
 800a294:	e8eb 8902 	strd	r8, r9, [fp], #8
 800a298:	3601      	adds	r6, #1
 800a29a:	e7c9      	b.n	800a230 <__kernel_rem_pio2+0x60>
 800a29c:	9b04      	ldr	r3, [sp, #16]
 800a29e:	aa0e      	add	r2, sp, #56	; 0x38
 800a2a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a2a4:	930c      	str	r3, [sp, #48]	; 0x30
 800a2a6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a2a8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a2ac:	9c04      	ldr	r4, [sp, #16]
 800a2ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2b0:	ab9a      	add	r3, sp, #616	; 0x268
 800a2b2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800a2b6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a2ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a2be:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800a2c2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800a2c6:	ab9a      	add	r3, sp, #616	; 0x268
 800a2c8:	445b      	add	r3, fp
 800a2ca:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800a2ce:	2500      	movs	r5, #0
 800a2d0:	1b63      	subs	r3, r4, r5
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	dc78      	bgt.n	800a3c8 <__kernel_rem_pio2+0x1f8>
 800a2d6:	4650      	mov	r0, sl
 800a2d8:	ec49 8b10 	vmov	d0, r8, r9
 800a2dc:	f000 fc00 	bl	800aae0 <scalbn>
 800a2e0:	ec57 6b10 	vmov	r6, r7, d0
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a2ea:	ee10 0a10 	vmov	r0, s0
 800a2ee:	4639      	mov	r1, r7
 800a2f0:	f7f6 f92e 	bl	8000550 <__aeabi_dmul>
 800a2f4:	ec41 0b10 	vmov	d0, r0, r1
 800a2f8:	f000 fb6e 	bl	800a9d8 <floor>
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	ec51 0b10 	vmov	r0, r1, d0
 800a302:	4b7e      	ldr	r3, [pc, #504]	; (800a4fc <__kernel_rem_pio2+0x32c>)
 800a304:	f7f6 f924 	bl	8000550 <__aeabi_dmul>
 800a308:	4602      	mov	r2, r0
 800a30a:	460b      	mov	r3, r1
 800a30c:	4630      	mov	r0, r6
 800a30e:	4639      	mov	r1, r7
 800a310:	f7f5 ff66 	bl	80001e0 <__aeabi_dsub>
 800a314:	460f      	mov	r7, r1
 800a316:	4606      	mov	r6, r0
 800a318:	f7f6 fbb4 	bl	8000a84 <__aeabi_d2iz>
 800a31c:	9006      	str	r0, [sp, #24]
 800a31e:	f7f6 f8ad 	bl	800047c <__aeabi_i2d>
 800a322:	4602      	mov	r2, r0
 800a324:	460b      	mov	r3, r1
 800a326:	4630      	mov	r0, r6
 800a328:	4639      	mov	r1, r7
 800a32a:	f7f5 ff59 	bl	80001e0 <__aeabi_dsub>
 800a32e:	f1ba 0f00 	cmp.w	sl, #0
 800a332:	4606      	mov	r6, r0
 800a334:	460f      	mov	r7, r1
 800a336:	dd6c      	ble.n	800a412 <__kernel_rem_pio2+0x242>
 800a338:	1e62      	subs	r2, r4, #1
 800a33a:	ab0e      	add	r3, sp, #56	; 0x38
 800a33c:	f1ca 0118 	rsb	r1, sl, #24
 800a340:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a344:	9d06      	ldr	r5, [sp, #24]
 800a346:	fa40 f301 	asr.w	r3, r0, r1
 800a34a:	441d      	add	r5, r3
 800a34c:	408b      	lsls	r3, r1
 800a34e:	1ac0      	subs	r0, r0, r3
 800a350:	ab0e      	add	r3, sp, #56	; 0x38
 800a352:	9506      	str	r5, [sp, #24]
 800a354:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a358:	f1ca 0317 	rsb	r3, sl, #23
 800a35c:	fa40 f303 	asr.w	r3, r0, r3
 800a360:	9302      	str	r3, [sp, #8]
 800a362:	9b02      	ldr	r3, [sp, #8]
 800a364:	2b00      	cmp	r3, #0
 800a366:	dd62      	ble.n	800a42e <__kernel_rem_pio2+0x25e>
 800a368:	9b06      	ldr	r3, [sp, #24]
 800a36a:	2200      	movs	r2, #0
 800a36c:	3301      	adds	r3, #1
 800a36e:	9306      	str	r3, [sp, #24]
 800a370:	4615      	mov	r5, r2
 800a372:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a376:	4294      	cmp	r4, r2
 800a378:	f300 8095 	bgt.w	800a4a6 <__kernel_rem_pio2+0x2d6>
 800a37c:	f1ba 0f00 	cmp.w	sl, #0
 800a380:	dd07      	ble.n	800a392 <__kernel_rem_pio2+0x1c2>
 800a382:	f1ba 0f01 	cmp.w	sl, #1
 800a386:	f000 80a2 	beq.w	800a4ce <__kernel_rem_pio2+0x2fe>
 800a38a:	f1ba 0f02 	cmp.w	sl, #2
 800a38e:	f000 80c1 	beq.w	800a514 <__kernel_rem_pio2+0x344>
 800a392:	9b02      	ldr	r3, [sp, #8]
 800a394:	2b02      	cmp	r3, #2
 800a396:	d14a      	bne.n	800a42e <__kernel_rem_pio2+0x25e>
 800a398:	4632      	mov	r2, r6
 800a39a:	463b      	mov	r3, r7
 800a39c:	2000      	movs	r0, #0
 800a39e:	4958      	ldr	r1, [pc, #352]	; (800a500 <__kernel_rem_pio2+0x330>)
 800a3a0:	f7f5 ff1e 	bl	80001e0 <__aeabi_dsub>
 800a3a4:	4606      	mov	r6, r0
 800a3a6:	460f      	mov	r7, r1
 800a3a8:	2d00      	cmp	r5, #0
 800a3aa:	d040      	beq.n	800a42e <__kernel_rem_pio2+0x25e>
 800a3ac:	4650      	mov	r0, sl
 800a3ae:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800a4f0 <__kernel_rem_pio2+0x320>
 800a3b2:	f000 fb95 	bl	800aae0 <scalbn>
 800a3b6:	4630      	mov	r0, r6
 800a3b8:	4639      	mov	r1, r7
 800a3ba:	ec53 2b10 	vmov	r2, r3, d0
 800a3be:	f7f5 ff0f 	bl	80001e0 <__aeabi_dsub>
 800a3c2:	4606      	mov	r6, r0
 800a3c4:	460f      	mov	r7, r1
 800a3c6:	e032      	b.n	800a42e <__kernel_rem_pio2+0x25e>
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	4b4e      	ldr	r3, [pc, #312]	; (800a504 <__kernel_rem_pio2+0x334>)
 800a3cc:	4640      	mov	r0, r8
 800a3ce:	4649      	mov	r1, r9
 800a3d0:	f7f6 f8be 	bl	8000550 <__aeabi_dmul>
 800a3d4:	f7f6 fb56 	bl	8000a84 <__aeabi_d2iz>
 800a3d8:	f7f6 f850 	bl	800047c <__aeabi_i2d>
 800a3dc:	2200      	movs	r2, #0
 800a3de:	4b4a      	ldr	r3, [pc, #296]	; (800a508 <__kernel_rem_pio2+0x338>)
 800a3e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3e4:	f7f6 f8b4 	bl	8000550 <__aeabi_dmul>
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	4640      	mov	r0, r8
 800a3ee:	4649      	mov	r1, r9
 800a3f0:	f7f5 fef6 	bl	80001e0 <__aeabi_dsub>
 800a3f4:	f7f6 fb46 	bl	8000a84 <__aeabi_d2iz>
 800a3f8:	ab0e      	add	r3, sp, #56	; 0x38
 800a3fa:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800a3fe:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800a402:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a406:	f7f5 feed 	bl	80001e4 <__adddf3>
 800a40a:	3501      	adds	r5, #1
 800a40c:	4680      	mov	r8, r0
 800a40e:	4689      	mov	r9, r1
 800a410:	e75e      	b.n	800a2d0 <__kernel_rem_pio2+0x100>
 800a412:	d105      	bne.n	800a420 <__kernel_rem_pio2+0x250>
 800a414:	1e63      	subs	r3, r4, #1
 800a416:	aa0e      	add	r2, sp, #56	; 0x38
 800a418:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a41c:	15c3      	asrs	r3, r0, #23
 800a41e:	e79f      	b.n	800a360 <__kernel_rem_pio2+0x190>
 800a420:	2200      	movs	r2, #0
 800a422:	4b3a      	ldr	r3, [pc, #232]	; (800a50c <__kernel_rem_pio2+0x33c>)
 800a424:	f7f6 fb1a 	bl	8000a5c <__aeabi_dcmpge>
 800a428:	2800      	cmp	r0, #0
 800a42a:	d139      	bne.n	800a4a0 <__kernel_rem_pio2+0x2d0>
 800a42c:	9002      	str	r0, [sp, #8]
 800a42e:	2200      	movs	r2, #0
 800a430:	2300      	movs	r3, #0
 800a432:	4630      	mov	r0, r6
 800a434:	4639      	mov	r1, r7
 800a436:	f7f6 faf3 	bl	8000a20 <__aeabi_dcmpeq>
 800a43a:	2800      	cmp	r0, #0
 800a43c:	f000 80c7 	beq.w	800a5ce <__kernel_rem_pio2+0x3fe>
 800a440:	1e65      	subs	r5, r4, #1
 800a442:	462b      	mov	r3, r5
 800a444:	2200      	movs	r2, #0
 800a446:	9904      	ldr	r1, [sp, #16]
 800a448:	428b      	cmp	r3, r1
 800a44a:	da6a      	bge.n	800a522 <__kernel_rem_pio2+0x352>
 800a44c:	2a00      	cmp	r2, #0
 800a44e:	f000 8088 	beq.w	800a562 <__kernel_rem_pio2+0x392>
 800a452:	ab0e      	add	r3, sp, #56	; 0x38
 800a454:	f1aa 0a18 	sub.w	sl, sl, #24
 800a458:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	f000 80b4 	beq.w	800a5ca <__kernel_rem_pio2+0x3fa>
 800a462:	4650      	mov	r0, sl
 800a464:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800a4f0 <__kernel_rem_pio2+0x320>
 800a468:	f000 fb3a 	bl	800aae0 <scalbn>
 800a46c:	00ec      	lsls	r4, r5, #3
 800a46e:	ab72      	add	r3, sp, #456	; 0x1c8
 800a470:	191e      	adds	r6, r3, r4
 800a472:	ec59 8b10 	vmov	r8, r9, d0
 800a476:	f106 0a08 	add.w	sl, r6, #8
 800a47a:	462f      	mov	r7, r5
 800a47c:	2f00      	cmp	r7, #0
 800a47e:	f280 80df 	bge.w	800a640 <__kernel_rem_pio2+0x470>
 800a482:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800a4e8 <__kernel_rem_pio2+0x318>
 800a486:	f04f 0a00 	mov.w	sl, #0
 800a48a:	eba5 030a 	sub.w	r3, r5, sl
 800a48e:	2b00      	cmp	r3, #0
 800a490:	f2c0 810a 	blt.w	800a6a8 <__kernel_rem_pio2+0x4d8>
 800a494:	f8df b078 	ldr.w	fp, [pc, #120]	; 800a510 <__kernel_rem_pio2+0x340>
 800a498:	ec59 8b18 	vmov	r8, r9, d8
 800a49c:	2700      	movs	r7, #0
 800a49e:	e0f5      	b.n	800a68c <__kernel_rem_pio2+0x4bc>
 800a4a0:	2302      	movs	r3, #2
 800a4a2:	9302      	str	r3, [sp, #8]
 800a4a4:	e760      	b.n	800a368 <__kernel_rem_pio2+0x198>
 800a4a6:	ab0e      	add	r3, sp, #56	; 0x38
 800a4a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ac:	b94d      	cbnz	r5, 800a4c2 <__kernel_rem_pio2+0x2f2>
 800a4ae:	b12b      	cbz	r3, 800a4bc <__kernel_rem_pio2+0x2ec>
 800a4b0:	a80e      	add	r0, sp, #56	; 0x38
 800a4b2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a4b6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	3201      	adds	r2, #1
 800a4be:	461d      	mov	r5, r3
 800a4c0:	e759      	b.n	800a376 <__kernel_rem_pio2+0x1a6>
 800a4c2:	a80e      	add	r0, sp, #56	; 0x38
 800a4c4:	1acb      	subs	r3, r1, r3
 800a4c6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800a4ca:	462b      	mov	r3, r5
 800a4cc:	e7f6      	b.n	800a4bc <__kernel_rem_pio2+0x2ec>
 800a4ce:	1e62      	subs	r2, r4, #1
 800a4d0:	ab0e      	add	r3, sp, #56	; 0x38
 800a4d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4d6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a4da:	a90e      	add	r1, sp, #56	; 0x38
 800a4dc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a4e0:	e757      	b.n	800a392 <__kernel_rem_pio2+0x1c2>
 800a4e2:	bf00      	nop
 800a4e4:	f3af 8000 	nop.w
	...
 800a4f4:	3ff00000 	.word	0x3ff00000
 800a4f8:	0800aef8 	.word	0x0800aef8
 800a4fc:	40200000 	.word	0x40200000
 800a500:	3ff00000 	.word	0x3ff00000
 800a504:	3e700000 	.word	0x3e700000
 800a508:	41700000 	.word	0x41700000
 800a50c:	3fe00000 	.word	0x3fe00000
 800a510:	0800aeb8 	.word	0x0800aeb8
 800a514:	1e62      	subs	r2, r4, #1
 800a516:	ab0e      	add	r3, sp, #56	; 0x38
 800a518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a51c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a520:	e7db      	b.n	800a4da <__kernel_rem_pio2+0x30a>
 800a522:	a90e      	add	r1, sp, #56	; 0x38
 800a524:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a528:	3b01      	subs	r3, #1
 800a52a:	430a      	orrs	r2, r1
 800a52c:	e78b      	b.n	800a446 <__kernel_rem_pio2+0x276>
 800a52e:	3301      	adds	r3, #1
 800a530:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a534:	2900      	cmp	r1, #0
 800a536:	d0fa      	beq.n	800a52e <__kernel_rem_pio2+0x35e>
 800a538:	9a08      	ldr	r2, [sp, #32]
 800a53a:	4422      	add	r2, r4
 800a53c:	00d2      	lsls	r2, r2, #3
 800a53e:	a922      	add	r1, sp, #136	; 0x88
 800a540:	18e3      	adds	r3, r4, r3
 800a542:	9206      	str	r2, [sp, #24]
 800a544:	440a      	add	r2, r1
 800a546:	9302      	str	r3, [sp, #8]
 800a548:	f10b 0108 	add.w	r1, fp, #8
 800a54c:	f102 0308 	add.w	r3, r2, #8
 800a550:	1c66      	adds	r6, r4, #1
 800a552:	910a      	str	r1, [sp, #40]	; 0x28
 800a554:	2500      	movs	r5, #0
 800a556:	930d      	str	r3, [sp, #52]	; 0x34
 800a558:	9b02      	ldr	r3, [sp, #8]
 800a55a:	42b3      	cmp	r3, r6
 800a55c:	da04      	bge.n	800a568 <__kernel_rem_pio2+0x398>
 800a55e:	461c      	mov	r4, r3
 800a560:	e6a6      	b.n	800a2b0 <__kernel_rem_pio2+0xe0>
 800a562:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a564:	2301      	movs	r3, #1
 800a566:	e7e3      	b.n	800a530 <__kernel_rem_pio2+0x360>
 800a568:	9b06      	ldr	r3, [sp, #24]
 800a56a:	18ef      	adds	r7, r5, r3
 800a56c:	ab22      	add	r3, sp, #136	; 0x88
 800a56e:	441f      	add	r7, r3
 800a570:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a572:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a576:	f7f5 ff81 	bl	800047c <__aeabi_i2d>
 800a57a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a57c:	461c      	mov	r4, r3
 800a57e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a580:	e9c7 0100 	strd	r0, r1, [r7]
 800a584:	eb03 0b05 	add.w	fp, r3, r5
 800a588:	2700      	movs	r7, #0
 800a58a:	f04f 0800 	mov.w	r8, #0
 800a58e:	f04f 0900 	mov.w	r9, #0
 800a592:	9b07      	ldr	r3, [sp, #28]
 800a594:	429f      	cmp	r7, r3
 800a596:	dd08      	ble.n	800a5aa <__kernel_rem_pio2+0x3da>
 800a598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a59a:	aa72      	add	r2, sp, #456	; 0x1c8
 800a59c:	18eb      	adds	r3, r5, r3
 800a59e:	4413      	add	r3, r2
 800a5a0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800a5a4:	3601      	adds	r6, #1
 800a5a6:	3508      	adds	r5, #8
 800a5a8:	e7d6      	b.n	800a558 <__kernel_rem_pio2+0x388>
 800a5aa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a5ae:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a5b2:	f7f5 ffcd 	bl	8000550 <__aeabi_dmul>
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	4640      	mov	r0, r8
 800a5bc:	4649      	mov	r1, r9
 800a5be:	f7f5 fe11 	bl	80001e4 <__adddf3>
 800a5c2:	3701      	adds	r7, #1
 800a5c4:	4680      	mov	r8, r0
 800a5c6:	4689      	mov	r9, r1
 800a5c8:	e7e3      	b.n	800a592 <__kernel_rem_pio2+0x3c2>
 800a5ca:	3d01      	subs	r5, #1
 800a5cc:	e741      	b.n	800a452 <__kernel_rem_pio2+0x282>
 800a5ce:	f1ca 0000 	rsb	r0, sl, #0
 800a5d2:	ec47 6b10 	vmov	d0, r6, r7
 800a5d6:	f000 fa83 	bl	800aae0 <scalbn>
 800a5da:	ec57 6b10 	vmov	r6, r7, d0
 800a5de:	2200      	movs	r2, #0
 800a5e0:	4b99      	ldr	r3, [pc, #612]	; (800a848 <__kernel_rem_pio2+0x678>)
 800a5e2:	ee10 0a10 	vmov	r0, s0
 800a5e6:	4639      	mov	r1, r7
 800a5e8:	f7f6 fa38 	bl	8000a5c <__aeabi_dcmpge>
 800a5ec:	b1f8      	cbz	r0, 800a62e <__kernel_rem_pio2+0x45e>
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	4b96      	ldr	r3, [pc, #600]	; (800a84c <__kernel_rem_pio2+0x67c>)
 800a5f2:	4630      	mov	r0, r6
 800a5f4:	4639      	mov	r1, r7
 800a5f6:	f7f5 ffab 	bl	8000550 <__aeabi_dmul>
 800a5fa:	f7f6 fa43 	bl	8000a84 <__aeabi_d2iz>
 800a5fe:	4680      	mov	r8, r0
 800a600:	f7f5 ff3c 	bl	800047c <__aeabi_i2d>
 800a604:	2200      	movs	r2, #0
 800a606:	4b90      	ldr	r3, [pc, #576]	; (800a848 <__kernel_rem_pio2+0x678>)
 800a608:	f7f5 ffa2 	bl	8000550 <__aeabi_dmul>
 800a60c:	460b      	mov	r3, r1
 800a60e:	4602      	mov	r2, r0
 800a610:	4639      	mov	r1, r7
 800a612:	4630      	mov	r0, r6
 800a614:	f7f5 fde4 	bl	80001e0 <__aeabi_dsub>
 800a618:	f7f6 fa34 	bl	8000a84 <__aeabi_d2iz>
 800a61c:	1c65      	adds	r5, r4, #1
 800a61e:	ab0e      	add	r3, sp, #56	; 0x38
 800a620:	f10a 0a18 	add.w	sl, sl, #24
 800a624:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a628:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a62c:	e719      	b.n	800a462 <__kernel_rem_pio2+0x292>
 800a62e:	4630      	mov	r0, r6
 800a630:	4639      	mov	r1, r7
 800a632:	f7f6 fa27 	bl	8000a84 <__aeabi_d2iz>
 800a636:	ab0e      	add	r3, sp, #56	; 0x38
 800a638:	4625      	mov	r5, r4
 800a63a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a63e:	e710      	b.n	800a462 <__kernel_rem_pio2+0x292>
 800a640:	ab0e      	add	r3, sp, #56	; 0x38
 800a642:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800a646:	f7f5 ff19 	bl	800047c <__aeabi_i2d>
 800a64a:	4642      	mov	r2, r8
 800a64c:	464b      	mov	r3, r9
 800a64e:	f7f5 ff7f 	bl	8000550 <__aeabi_dmul>
 800a652:	2200      	movs	r2, #0
 800a654:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800a658:	4b7c      	ldr	r3, [pc, #496]	; (800a84c <__kernel_rem_pio2+0x67c>)
 800a65a:	4640      	mov	r0, r8
 800a65c:	4649      	mov	r1, r9
 800a65e:	f7f5 ff77 	bl	8000550 <__aeabi_dmul>
 800a662:	3f01      	subs	r7, #1
 800a664:	4680      	mov	r8, r0
 800a666:	4689      	mov	r9, r1
 800a668:	e708      	b.n	800a47c <__kernel_rem_pio2+0x2ac>
 800a66a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800a66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a672:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800a676:	f7f5 ff6b 	bl	8000550 <__aeabi_dmul>
 800a67a:	4602      	mov	r2, r0
 800a67c:	460b      	mov	r3, r1
 800a67e:	4640      	mov	r0, r8
 800a680:	4649      	mov	r1, r9
 800a682:	f7f5 fdaf 	bl	80001e4 <__adddf3>
 800a686:	3701      	adds	r7, #1
 800a688:	4680      	mov	r8, r0
 800a68a:	4689      	mov	r9, r1
 800a68c:	9b04      	ldr	r3, [sp, #16]
 800a68e:	429f      	cmp	r7, r3
 800a690:	dc01      	bgt.n	800a696 <__kernel_rem_pio2+0x4c6>
 800a692:	45ba      	cmp	sl, r7
 800a694:	dae9      	bge.n	800a66a <__kernel_rem_pio2+0x49a>
 800a696:	ab4a      	add	r3, sp, #296	; 0x128
 800a698:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a69c:	e9c3 8900 	strd	r8, r9, [r3]
 800a6a0:	f10a 0a01 	add.w	sl, sl, #1
 800a6a4:	3e08      	subs	r6, #8
 800a6a6:	e6f0      	b.n	800a48a <__kernel_rem_pio2+0x2ba>
 800a6a8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a6aa:	2b03      	cmp	r3, #3
 800a6ac:	d85b      	bhi.n	800a766 <__kernel_rem_pio2+0x596>
 800a6ae:	e8df f003 	tbb	[pc, r3]
 800a6b2:	264a      	.short	0x264a
 800a6b4:	0226      	.short	0x0226
 800a6b6:	ab9a      	add	r3, sp, #616	; 0x268
 800a6b8:	441c      	add	r4, r3
 800a6ba:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a6be:	46a2      	mov	sl, r4
 800a6c0:	46ab      	mov	fp, r5
 800a6c2:	f1bb 0f00 	cmp.w	fp, #0
 800a6c6:	dc6c      	bgt.n	800a7a2 <__kernel_rem_pio2+0x5d2>
 800a6c8:	46a2      	mov	sl, r4
 800a6ca:	46ab      	mov	fp, r5
 800a6cc:	f1bb 0f01 	cmp.w	fp, #1
 800a6d0:	f300 8086 	bgt.w	800a7e0 <__kernel_rem_pio2+0x610>
 800a6d4:	2000      	movs	r0, #0
 800a6d6:	2100      	movs	r1, #0
 800a6d8:	2d01      	cmp	r5, #1
 800a6da:	f300 80a0 	bgt.w	800a81e <__kernel_rem_pio2+0x64e>
 800a6de:	9b02      	ldr	r3, [sp, #8]
 800a6e0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800a6e4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	f040 809e 	bne.w	800a82a <__kernel_rem_pio2+0x65a>
 800a6ee:	9b01      	ldr	r3, [sp, #4]
 800a6f0:	e9c3 7800 	strd	r7, r8, [r3]
 800a6f4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800a6f8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a6fc:	e033      	b.n	800a766 <__kernel_rem_pio2+0x596>
 800a6fe:	3408      	adds	r4, #8
 800a700:	ab4a      	add	r3, sp, #296	; 0x128
 800a702:	441c      	add	r4, r3
 800a704:	462e      	mov	r6, r5
 800a706:	2000      	movs	r0, #0
 800a708:	2100      	movs	r1, #0
 800a70a:	2e00      	cmp	r6, #0
 800a70c:	da3a      	bge.n	800a784 <__kernel_rem_pio2+0x5b4>
 800a70e:	9b02      	ldr	r3, [sp, #8]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d03d      	beq.n	800a790 <__kernel_rem_pio2+0x5c0>
 800a714:	4602      	mov	r2, r0
 800a716:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a71a:	9c01      	ldr	r4, [sp, #4]
 800a71c:	e9c4 2300 	strd	r2, r3, [r4]
 800a720:	4602      	mov	r2, r0
 800a722:	460b      	mov	r3, r1
 800a724:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800a728:	f7f5 fd5a 	bl	80001e0 <__aeabi_dsub>
 800a72c:	ae4c      	add	r6, sp, #304	; 0x130
 800a72e:	2401      	movs	r4, #1
 800a730:	42a5      	cmp	r5, r4
 800a732:	da30      	bge.n	800a796 <__kernel_rem_pio2+0x5c6>
 800a734:	9b02      	ldr	r3, [sp, #8]
 800a736:	b113      	cbz	r3, 800a73e <__kernel_rem_pio2+0x56e>
 800a738:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a73c:	4619      	mov	r1, r3
 800a73e:	9b01      	ldr	r3, [sp, #4]
 800a740:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a744:	e00f      	b.n	800a766 <__kernel_rem_pio2+0x596>
 800a746:	ab9a      	add	r3, sp, #616	; 0x268
 800a748:	441c      	add	r4, r3
 800a74a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a74e:	2000      	movs	r0, #0
 800a750:	2100      	movs	r1, #0
 800a752:	2d00      	cmp	r5, #0
 800a754:	da10      	bge.n	800a778 <__kernel_rem_pio2+0x5a8>
 800a756:	9b02      	ldr	r3, [sp, #8]
 800a758:	b113      	cbz	r3, 800a760 <__kernel_rem_pio2+0x590>
 800a75a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a75e:	4619      	mov	r1, r3
 800a760:	9b01      	ldr	r3, [sp, #4]
 800a762:	e9c3 0100 	strd	r0, r1, [r3]
 800a766:	9b06      	ldr	r3, [sp, #24]
 800a768:	f003 0007 	and.w	r0, r3, #7
 800a76c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800a770:	ecbd 8b02 	vpop	{d8}
 800a774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a778:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a77c:	f7f5 fd32 	bl	80001e4 <__adddf3>
 800a780:	3d01      	subs	r5, #1
 800a782:	e7e6      	b.n	800a752 <__kernel_rem_pio2+0x582>
 800a784:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a788:	f7f5 fd2c 	bl	80001e4 <__adddf3>
 800a78c:	3e01      	subs	r6, #1
 800a78e:	e7bc      	b.n	800a70a <__kernel_rem_pio2+0x53a>
 800a790:	4602      	mov	r2, r0
 800a792:	460b      	mov	r3, r1
 800a794:	e7c1      	b.n	800a71a <__kernel_rem_pio2+0x54a>
 800a796:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800a79a:	f7f5 fd23 	bl	80001e4 <__adddf3>
 800a79e:	3401      	adds	r4, #1
 800a7a0:	e7c6      	b.n	800a730 <__kernel_rem_pio2+0x560>
 800a7a2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800a7a6:	ed3a 7b02 	vldmdb	sl!, {d7}
 800a7aa:	4640      	mov	r0, r8
 800a7ac:	ec53 2b17 	vmov	r2, r3, d7
 800a7b0:	4649      	mov	r1, r9
 800a7b2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a7b6:	f7f5 fd15 	bl	80001e4 <__adddf3>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	460b      	mov	r3, r1
 800a7be:	4606      	mov	r6, r0
 800a7c0:	460f      	mov	r7, r1
 800a7c2:	4640      	mov	r0, r8
 800a7c4:	4649      	mov	r1, r9
 800a7c6:	f7f5 fd0b 	bl	80001e0 <__aeabi_dsub>
 800a7ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7ce:	f7f5 fd09 	bl	80001e4 <__adddf3>
 800a7d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a7d6:	e9ca 0100 	strd	r0, r1, [sl]
 800a7da:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800a7de:	e770      	b.n	800a6c2 <__kernel_rem_pio2+0x4f2>
 800a7e0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800a7e4:	ed3a 7b02 	vldmdb	sl!, {d7}
 800a7e8:	4630      	mov	r0, r6
 800a7ea:	ec53 2b17 	vmov	r2, r3, d7
 800a7ee:	4639      	mov	r1, r7
 800a7f0:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a7f4:	f7f5 fcf6 	bl	80001e4 <__adddf3>
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	460b      	mov	r3, r1
 800a7fc:	4680      	mov	r8, r0
 800a7fe:	4689      	mov	r9, r1
 800a800:	4630      	mov	r0, r6
 800a802:	4639      	mov	r1, r7
 800a804:	f7f5 fcec 	bl	80001e0 <__aeabi_dsub>
 800a808:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a80c:	f7f5 fcea 	bl	80001e4 <__adddf3>
 800a810:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a814:	e9ca 0100 	strd	r0, r1, [sl]
 800a818:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800a81c:	e756      	b.n	800a6cc <__kernel_rem_pio2+0x4fc>
 800a81e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a822:	f7f5 fcdf 	bl	80001e4 <__adddf3>
 800a826:	3d01      	subs	r5, #1
 800a828:	e756      	b.n	800a6d8 <__kernel_rem_pio2+0x508>
 800a82a:	9b01      	ldr	r3, [sp, #4]
 800a82c:	9a01      	ldr	r2, [sp, #4]
 800a82e:	601f      	str	r7, [r3, #0]
 800a830:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800a834:	605c      	str	r4, [r3, #4]
 800a836:	609d      	str	r5, [r3, #8]
 800a838:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a83c:	60d3      	str	r3, [r2, #12]
 800a83e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a842:	6110      	str	r0, [r2, #16]
 800a844:	6153      	str	r3, [r2, #20]
 800a846:	e78e      	b.n	800a766 <__kernel_rem_pio2+0x596>
 800a848:	41700000 	.word	0x41700000
 800a84c:	3e700000 	.word	0x3e700000

0800a850 <__kernel_sin>:
 800a850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a854:	ec55 4b10 	vmov	r4, r5, d0
 800a858:	b085      	sub	sp, #20
 800a85a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a85e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a862:	ed8d 1b00 	vstr	d1, [sp]
 800a866:	9002      	str	r0, [sp, #8]
 800a868:	da06      	bge.n	800a878 <__kernel_sin+0x28>
 800a86a:	ee10 0a10 	vmov	r0, s0
 800a86e:	4629      	mov	r1, r5
 800a870:	f7f6 f908 	bl	8000a84 <__aeabi_d2iz>
 800a874:	2800      	cmp	r0, #0
 800a876:	d051      	beq.n	800a91c <__kernel_sin+0xcc>
 800a878:	4622      	mov	r2, r4
 800a87a:	462b      	mov	r3, r5
 800a87c:	4620      	mov	r0, r4
 800a87e:	4629      	mov	r1, r5
 800a880:	f7f5 fe66 	bl	8000550 <__aeabi_dmul>
 800a884:	4682      	mov	sl, r0
 800a886:	468b      	mov	fp, r1
 800a888:	4602      	mov	r2, r0
 800a88a:	460b      	mov	r3, r1
 800a88c:	4620      	mov	r0, r4
 800a88e:	4629      	mov	r1, r5
 800a890:	f7f5 fe5e 	bl	8000550 <__aeabi_dmul>
 800a894:	a341      	add	r3, pc, #260	; (adr r3, 800a99c <__kernel_sin+0x14c>)
 800a896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89a:	4680      	mov	r8, r0
 800a89c:	4689      	mov	r9, r1
 800a89e:	4650      	mov	r0, sl
 800a8a0:	4659      	mov	r1, fp
 800a8a2:	f7f5 fe55 	bl	8000550 <__aeabi_dmul>
 800a8a6:	a33f      	add	r3, pc, #252	; (adr r3, 800a9a4 <__kernel_sin+0x154>)
 800a8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ac:	f7f5 fc98 	bl	80001e0 <__aeabi_dsub>
 800a8b0:	4652      	mov	r2, sl
 800a8b2:	465b      	mov	r3, fp
 800a8b4:	f7f5 fe4c 	bl	8000550 <__aeabi_dmul>
 800a8b8:	a33c      	add	r3, pc, #240	; (adr r3, 800a9ac <__kernel_sin+0x15c>)
 800a8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8be:	f7f5 fc91 	bl	80001e4 <__adddf3>
 800a8c2:	4652      	mov	r2, sl
 800a8c4:	465b      	mov	r3, fp
 800a8c6:	f7f5 fe43 	bl	8000550 <__aeabi_dmul>
 800a8ca:	a33a      	add	r3, pc, #232	; (adr r3, 800a9b4 <__kernel_sin+0x164>)
 800a8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d0:	f7f5 fc86 	bl	80001e0 <__aeabi_dsub>
 800a8d4:	4652      	mov	r2, sl
 800a8d6:	465b      	mov	r3, fp
 800a8d8:	f7f5 fe3a 	bl	8000550 <__aeabi_dmul>
 800a8dc:	a337      	add	r3, pc, #220	; (adr r3, 800a9bc <__kernel_sin+0x16c>)
 800a8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e2:	f7f5 fc7f 	bl	80001e4 <__adddf3>
 800a8e6:	9b02      	ldr	r3, [sp, #8]
 800a8e8:	4606      	mov	r6, r0
 800a8ea:	460f      	mov	r7, r1
 800a8ec:	b9db      	cbnz	r3, 800a926 <__kernel_sin+0xd6>
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	4650      	mov	r0, sl
 800a8f4:	4659      	mov	r1, fp
 800a8f6:	f7f5 fe2b 	bl	8000550 <__aeabi_dmul>
 800a8fa:	a325      	add	r3, pc, #148	; (adr r3, 800a990 <__kernel_sin+0x140>)
 800a8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a900:	f7f5 fc6e 	bl	80001e0 <__aeabi_dsub>
 800a904:	4642      	mov	r2, r8
 800a906:	464b      	mov	r3, r9
 800a908:	f7f5 fe22 	bl	8000550 <__aeabi_dmul>
 800a90c:	4602      	mov	r2, r0
 800a90e:	460b      	mov	r3, r1
 800a910:	4620      	mov	r0, r4
 800a912:	4629      	mov	r1, r5
 800a914:	f7f5 fc66 	bl	80001e4 <__adddf3>
 800a918:	4604      	mov	r4, r0
 800a91a:	460d      	mov	r5, r1
 800a91c:	ec45 4b10 	vmov	d0, r4, r5
 800a920:	b005      	add	sp, #20
 800a922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a926:	2200      	movs	r2, #0
 800a928:	4b1b      	ldr	r3, [pc, #108]	; (800a998 <__kernel_sin+0x148>)
 800a92a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a92e:	f7f5 fe0f 	bl	8000550 <__aeabi_dmul>
 800a932:	4632      	mov	r2, r6
 800a934:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a938:	463b      	mov	r3, r7
 800a93a:	4640      	mov	r0, r8
 800a93c:	4649      	mov	r1, r9
 800a93e:	f7f5 fe07 	bl	8000550 <__aeabi_dmul>
 800a942:	4602      	mov	r2, r0
 800a944:	460b      	mov	r3, r1
 800a946:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a94a:	f7f5 fc49 	bl	80001e0 <__aeabi_dsub>
 800a94e:	4652      	mov	r2, sl
 800a950:	465b      	mov	r3, fp
 800a952:	f7f5 fdfd 	bl	8000550 <__aeabi_dmul>
 800a956:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a95a:	f7f5 fc41 	bl	80001e0 <__aeabi_dsub>
 800a95e:	a30c      	add	r3, pc, #48	; (adr r3, 800a990 <__kernel_sin+0x140>)
 800a960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a964:	4606      	mov	r6, r0
 800a966:	460f      	mov	r7, r1
 800a968:	4640      	mov	r0, r8
 800a96a:	4649      	mov	r1, r9
 800a96c:	f7f5 fdf0 	bl	8000550 <__aeabi_dmul>
 800a970:	4602      	mov	r2, r0
 800a972:	460b      	mov	r3, r1
 800a974:	4630      	mov	r0, r6
 800a976:	4639      	mov	r1, r7
 800a978:	f7f5 fc34 	bl	80001e4 <__adddf3>
 800a97c:	4602      	mov	r2, r0
 800a97e:	460b      	mov	r3, r1
 800a980:	4620      	mov	r0, r4
 800a982:	4629      	mov	r1, r5
 800a984:	f7f5 fc2c 	bl	80001e0 <__aeabi_dsub>
 800a988:	e7c6      	b.n	800a918 <__kernel_sin+0xc8>
 800a98a:	bf00      	nop
 800a98c:	f3af 8000 	nop.w
 800a990:	55555549 	.word	0x55555549
 800a994:	3fc55555 	.word	0x3fc55555
 800a998:	3fe00000 	.word	0x3fe00000
 800a99c:	5acfd57c 	.word	0x5acfd57c
 800a9a0:	3de5d93a 	.word	0x3de5d93a
 800a9a4:	8a2b9ceb 	.word	0x8a2b9ceb
 800a9a8:	3e5ae5e6 	.word	0x3e5ae5e6
 800a9ac:	57b1fe7d 	.word	0x57b1fe7d
 800a9b0:	3ec71de3 	.word	0x3ec71de3
 800a9b4:	19c161d5 	.word	0x19c161d5
 800a9b8:	3f2a01a0 	.word	0x3f2a01a0
 800a9bc:	1110f8a6 	.word	0x1110f8a6
 800a9c0:	3f811111 	.word	0x3f811111

0800a9c4 <fabs>:
 800a9c4:	ec51 0b10 	vmov	r0, r1, d0
 800a9c8:	ee10 2a10 	vmov	r2, s0
 800a9cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a9d0:	ec43 2b10 	vmov	d0, r2, r3
 800a9d4:	4770      	bx	lr
	...

0800a9d8 <floor>:
 800a9d8:	ec51 0b10 	vmov	r0, r1, d0
 800a9dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9e0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a9e4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a9e8:	2e13      	cmp	r6, #19
 800a9ea:	460c      	mov	r4, r1
 800a9ec:	ee10 5a10 	vmov	r5, s0
 800a9f0:	4680      	mov	r8, r0
 800a9f2:	dc34      	bgt.n	800aa5e <floor+0x86>
 800a9f4:	2e00      	cmp	r6, #0
 800a9f6:	da16      	bge.n	800aa26 <floor+0x4e>
 800a9f8:	a335      	add	r3, pc, #212	; (adr r3, 800aad0 <floor+0xf8>)
 800a9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fe:	f7f5 fbf1 	bl	80001e4 <__adddf3>
 800aa02:	2200      	movs	r2, #0
 800aa04:	2300      	movs	r3, #0
 800aa06:	f7f6 f833 	bl	8000a70 <__aeabi_dcmpgt>
 800aa0a:	b148      	cbz	r0, 800aa20 <floor+0x48>
 800aa0c:	2c00      	cmp	r4, #0
 800aa0e:	da59      	bge.n	800aac4 <floor+0xec>
 800aa10:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800aa14:	4a30      	ldr	r2, [pc, #192]	; (800aad8 <floor+0x100>)
 800aa16:	432b      	orrs	r3, r5
 800aa18:	2500      	movs	r5, #0
 800aa1a:	42ab      	cmp	r3, r5
 800aa1c:	bf18      	it	ne
 800aa1e:	4614      	movne	r4, r2
 800aa20:	4621      	mov	r1, r4
 800aa22:	4628      	mov	r0, r5
 800aa24:	e025      	b.n	800aa72 <floor+0x9a>
 800aa26:	4f2d      	ldr	r7, [pc, #180]	; (800aadc <floor+0x104>)
 800aa28:	4137      	asrs	r7, r6
 800aa2a:	ea01 0307 	and.w	r3, r1, r7
 800aa2e:	4303      	orrs	r3, r0
 800aa30:	d01f      	beq.n	800aa72 <floor+0x9a>
 800aa32:	a327      	add	r3, pc, #156	; (adr r3, 800aad0 <floor+0xf8>)
 800aa34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa38:	f7f5 fbd4 	bl	80001e4 <__adddf3>
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	2300      	movs	r3, #0
 800aa40:	f7f6 f816 	bl	8000a70 <__aeabi_dcmpgt>
 800aa44:	2800      	cmp	r0, #0
 800aa46:	d0eb      	beq.n	800aa20 <floor+0x48>
 800aa48:	2c00      	cmp	r4, #0
 800aa4a:	bfbe      	ittt	lt
 800aa4c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800aa50:	fa43 f606 	asrlt.w	r6, r3, r6
 800aa54:	19a4      	addlt	r4, r4, r6
 800aa56:	ea24 0407 	bic.w	r4, r4, r7
 800aa5a:	2500      	movs	r5, #0
 800aa5c:	e7e0      	b.n	800aa20 <floor+0x48>
 800aa5e:	2e33      	cmp	r6, #51	; 0x33
 800aa60:	dd0b      	ble.n	800aa7a <floor+0xa2>
 800aa62:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800aa66:	d104      	bne.n	800aa72 <floor+0x9a>
 800aa68:	ee10 2a10 	vmov	r2, s0
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	f7f5 fbb9 	bl	80001e4 <__adddf3>
 800aa72:	ec41 0b10 	vmov	d0, r0, r1
 800aa76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa7a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800aa7e:	f04f 33ff 	mov.w	r3, #4294967295
 800aa82:	fa23 f707 	lsr.w	r7, r3, r7
 800aa86:	4207      	tst	r7, r0
 800aa88:	d0f3      	beq.n	800aa72 <floor+0x9a>
 800aa8a:	a311      	add	r3, pc, #68	; (adr r3, 800aad0 <floor+0xf8>)
 800aa8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa90:	f7f5 fba8 	bl	80001e4 <__adddf3>
 800aa94:	2200      	movs	r2, #0
 800aa96:	2300      	movs	r3, #0
 800aa98:	f7f5 ffea 	bl	8000a70 <__aeabi_dcmpgt>
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	d0bf      	beq.n	800aa20 <floor+0x48>
 800aaa0:	2c00      	cmp	r4, #0
 800aaa2:	da02      	bge.n	800aaaa <floor+0xd2>
 800aaa4:	2e14      	cmp	r6, #20
 800aaa6:	d103      	bne.n	800aab0 <floor+0xd8>
 800aaa8:	3401      	adds	r4, #1
 800aaaa:	ea25 0507 	bic.w	r5, r5, r7
 800aaae:	e7b7      	b.n	800aa20 <floor+0x48>
 800aab0:	2301      	movs	r3, #1
 800aab2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800aab6:	fa03 f606 	lsl.w	r6, r3, r6
 800aaba:	4435      	add	r5, r6
 800aabc:	4545      	cmp	r5, r8
 800aabe:	bf38      	it	cc
 800aac0:	18e4      	addcc	r4, r4, r3
 800aac2:	e7f2      	b.n	800aaaa <floor+0xd2>
 800aac4:	2500      	movs	r5, #0
 800aac6:	462c      	mov	r4, r5
 800aac8:	e7aa      	b.n	800aa20 <floor+0x48>
 800aaca:	bf00      	nop
 800aacc:	f3af 8000 	nop.w
 800aad0:	8800759c 	.word	0x8800759c
 800aad4:	7e37e43c 	.word	0x7e37e43c
 800aad8:	bff00000 	.word	0xbff00000
 800aadc:	000fffff 	.word	0x000fffff

0800aae0 <scalbn>:
 800aae0:	b570      	push	{r4, r5, r6, lr}
 800aae2:	ec55 4b10 	vmov	r4, r5, d0
 800aae6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800aaea:	4606      	mov	r6, r0
 800aaec:	462b      	mov	r3, r5
 800aaee:	b9aa      	cbnz	r2, 800ab1c <scalbn+0x3c>
 800aaf0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800aaf4:	4323      	orrs	r3, r4
 800aaf6:	d03b      	beq.n	800ab70 <scalbn+0x90>
 800aaf8:	4b31      	ldr	r3, [pc, #196]	; (800abc0 <scalbn+0xe0>)
 800aafa:	4629      	mov	r1, r5
 800aafc:	2200      	movs	r2, #0
 800aafe:	ee10 0a10 	vmov	r0, s0
 800ab02:	f7f5 fd25 	bl	8000550 <__aeabi_dmul>
 800ab06:	4b2f      	ldr	r3, [pc, #188]	; (800abc4 <scalbn+0xe4>)
 800ab08:	429e      	cmp	r6, r3
 800ab0a:	4604      	mov	r4, r0
 800ab0c:	460d      	mov	r5, r1
 800ab0e:	da12      	bge.n	800ab36 <scalbn+0x56>
 800ab10:	a327      	add	r3, pc, #156	; (adr r3, 800abb0 <scalbn+0xd0>)
 800ab12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab16:	f7f5 fd1b 	bl	8000550 <__aeabi_dmul>
 800ab1a:	e009      	b.n	800ab30 <scalbn+0x50>
 800ab1c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ab20:	428a      	cmp	r2, r1
 800ab22:	d10c      	bne.n	800ab3e <scalbn+0x5e>
 800ab24:	ee10 2a10 	vmov	r2, s0
 800ab28:	4620      	mov	r0, r4
 800ab2a:	4629      	mov	r1, r5
 800ab2c:	f7f5 fb5a 	bl	80001e4 <__adddf3>
 800ab30:	4604      	mov	r4, r0
 800ab32:	460d      	mov	r5, r1
 800ab34:	e01c      	b.n	800ab70 <scalbn+0x90>
 800ab36:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ab3a:	460b      	mov	r3, r1
 800ab3c:	3a36      	subs	r2, #54	; 0x36
 800ab3e:	4432      	add	r2, r6
 800ab40:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ab44:	428a      	cmp	r2, r1
 800ab46:	dd0b      	ble.n	800ab60 <scalbn+0x80>
 800ab48:	ec45 4b11 	vmov	d1, r4, r5
 800ab4c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800abb8 <scalbn+0xd8>
 800ab50:	f000 f83c 	bl	800abcc <copysign>
 800ab54:	a318      	add	r3, pc, #96	; (adr r3, 800abb8 <scalbn+0xd8>)
 800ab56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab5a:	ec51 0b10 	vmov	r0, r1, d0
 800ab5e:	e7da      	b.n	800ab16 <scalbn+0x36>
 800ab60:	2a00      	cmp	r2, #0
 800ab62:	dd08      	ble.n	800ab76 <scalbn+0x96>
 800ab64:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ab68:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ab6c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ab70:	ec45 4b10 	vmov	d0, r4, r5
 800ab74:	bd70      	pop	{r4, r5, r6, pc}
 800ab76:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ab7a:	da0d      	bge.n	800ab98 <scalbn+0xb8>
 800ab7c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ab80:	429e      	cmp	r6, r3
 800ab82:	ec45 4b11 	vmov	d1, r4, r5
 800ab86:	dce1      	bgt.n	800ab4c <scalbn+0x6c>
 800ab88:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800abb0 <scalbn+0xd0>
 800ab8c:	f000 f81e 	bl	800abcc <copysign>
 800ab90:	a307      	add	r3, pc, #28	; (adr r3, 800abb0 <scalbn+0xd0>)
 800ab92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab96:	e7e0      	b.n	800ab5a <scalbn+0x7a>
 800ab98:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ab9c:	3236      	adds	r2, #54	; 0x36
 800ab9e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aba2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aba6:	4620      	mov	r0, r4
 800aba8:	4629      	mov	r1, r5
 800abaa:	2200      	movs	r2, #0
 800abac:	4b06      	ldr	r3, [pc, #24]	; (800abc8 <scalbn+0xe8>)
 800abae:	e7b2      	b.n	800ab16 <scalbn+0x36>
 800abb0:	c2f8f359 	.word	0xc2f8f359
 800abb4:	01a56e1f 	.word	0x01a56e1f
 800abb8:	8800759c 	.word	0x8800759c
 800abbc:	7e37e43c 	.word	0x7e37e43c
 800abc0:	43500000 	.word	0x43500000
 800abc4:	ffff3cb0 	.word	0xffff3cb0
 800abc8:	3c900000 	.word	0x3c900000

0800abcc <copysign>:
 800abcc:	ec51 0b10 	vmov	r0, r1, d0
 800abd0:	ee11 0a90 	vmov	r0, s3
 800abd4:	ee10 2a10 	vmov	r2, s0
 800abd8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800abdc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800abe0:	ea41 0300 	orr.w	r3, r1, r0
 800abe4:	ec43 2b10 	vmov	d0, r2, r3
 800abe8:	4770      	bx	lr
	...

0800abec <_init>:
 800abec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abee:	bf00      	nop
 800abf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abf2:	bc08      	pop	{r3}
 800abf4:	469e      	mov	lr, r3
 800abf6:	4770      	bx	lr

0800abf8 <_fini>:
 800abf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abfa:	bf00      	nop
 800abfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abfe:	bc08      	pop	{r3}
 800ac00:	469e      	mov	lr, r3
 800ac02:	4770      	bx	lr
