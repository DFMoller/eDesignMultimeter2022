
eDesignMultimeter2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e04  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08005f98  08005f98  00015f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fec  08005fec  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08005fec  08005fec  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005fec  08005fec  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fec  08005fec  00015fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ff0  08005ff0  00015ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005ff4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  2000001c  08006010  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08006010  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012907  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000201d  00000000  00000000  00032953  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e98  00000000  00000000  00034970  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dd0  00000000  00000000  00035808  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021ae1  00000000  00000000  000365d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e527  00000000  00000000  000580b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d39e2  00000000  00000000  000665e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00139fc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003db8  00000000  00000000  0013a040  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000001c 	.word	0x2000001c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005f80 	.word	0x08005f80

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000020 	.word	0x20000020
 80001d0:	08005f80 	.word	0x08005f80

080001d4 <HAL_UART_RxCpltCallback>:
uint8_t signal_active = 0;
uint8_t display_state = 1; // Default of 1 is Measurement Display State
uint8_t output_active = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	message_received = 1;
 80001dc:	4b04      	ldr	r3, [pc, #16]	; (80001f0 <HAL_UART_RxCpltCallback+0x1c>)
 80001de:	2201      	movs	r2, #1
 80001e0:	701a      	strb	r2, [r3, #0]
}
 80001e2:	bf00      	nop
 80001e4:	370c      	adds	r7, #12
 80001e6:	46bd      	mov	sp, r7
 80001e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	20000038 	.word	0x20000038

080001f4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	4603      	mov	r3, r0
 80001fc:	80fb      	strh	r3, [r7, #6]
	last_ticks = HAL_GetTick();
 80001fe:	f001 f8c1 	bl	8001384 <HAL_GetTick>
 8000202:	4602      	mov	r2, r0
 8000204:	4b15      	ldr	r3, [pc, #84]	; (800025c <HAL_GPIO_EXTI_Callback+0x68>)
 8000206:	601a      	str	r2, [r3, #0]
	if(GPIO_Pin == btn_mid_Pin)
 8000208:	88fb      	ldrh	r3, [r7, #6]
 800020a:	2b40      	cmp	r3, #64	; 0x40
 800020c:	d103      	bne.n	8000216 <HAL_GPIO_EXTI_Callback+0x22>
	{
		btn_mid_flag = 1;
 800020e:	4b14      	ldr	r3, [pc, #80]	; (8000260 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000210:	2201      	movs	r2, #1
 8000212:	701a      	strb	r2, [r3, #0]
	}
	else if(GPIO_Pin == btn_down_Pin)
	{
		btn_down_flag = 1;
	}
}
 8000214:	e01d      	b.n	8000252 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_right_Pin)
 8000216:	88fb      	ldrh	r3, [r7, #6]
 8000218:	2b80      	cmp	r3, #128	; 0x80
 800021a:	d103      	bne.n	8000224 <HAL_GPIO_EXTI_Callback+0x30>
		btn_right_flag = 1;
 800021c:	4b11      	ldr	r3, [pc, #68]	; (8000264 <HAL_GPIO_EXTI_Callback+0x70>)
 800021e:	2201      	movs	r2, #1
 8000220:	701a      	strb	r2, [r3, #0]
}
 8000222:	e016      	b.n	8000252 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_up_Pin)
 8000224:	88fb      	ldrh	r3, [r7, #6]
 8000226:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800022a:	d103      	bne.n	8000234 <HAL_GPIO_EXTI_Callback+0x40>
		btn_up_flag = 1;
 800022c:	4b0e      	ldr	r3, [pc, #56]	; (8000268 <HAL_GPIO_EXTI_Callback+0x74>)
 800022e:	2201      	movs	r2, #1
 8000230:	701a      	strb	r2, [r3, #0]
}
 8000232:	e00e      	b.n	8000252 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_left_Pin)
 8000234:	88fb      	ldrh	r3, [r7, #6]
 8000236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800023a:	d103      	bne.n	8000244 <HAL_GPIO_EXTI_Callback+0x50>
		btn_left_flag = 1;
 800023c:	4b0b      	ldr	r3, [pc, #44]	; (800026c <HAL_GPIO_EXTI_Callback+0x78>)
 800023e:	2201      	movs	r2, #1
 8000240:	701a      	strb	r2, [r3, #0]
}
 8000242:	e006      	b.n	8000252 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_down_Pin)
 8000244:	88fb      	ldrh	r3, [r7, #6]
 8000246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800024a:	d102      	bne.n	8000252 <HAL_GPIO_EXTI_Callback+0x5e>
		btn_down_flag = 1;
 800024c:	4b08      	ldr	r3, [pc, #32]	; (8000270 <HAL_GPIO_EXTI_Callback+0x7c>)
 800024e:	2201      	movs	r2, #1
 8000250:	701a      	strb	r2, [r3, #0]
}
 8000252:	bf00      	nop
 8000254:	3708      	adds	r7, #8
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	20000040 	.word	0x20000040
 8000260:	20000039 	.word	0x20000039
 8000264:	2000003a 	.word	0x2000003a
 8000268:	2000003b 	.word	0x2000003b
 800026c:	2000003c 	.word	0x2000003c
 8000270:	2000003d 	.word	0x2000003d

08000274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	f5ad 6d00 	sub.w	sp, sp, #2048	; 0x800
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t raw;
	uint16_t millivolts;
//	char msg[100];
	uint16_t adc_array[1000];
	uint16_t adc_count = 0;
 800027c:	2300      	movs	r3, #0
 800027e:	f8a7 37fe 	strh.w	r3, [r7, #2046]	; 0x7fe


	uint8_t rx_bytes[10] = {0};
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
 8000288:	605a      	str	r2, [r3, #4]
 800028a:	811a      	strh	r2, [r3, #8]
	uint8_t rx_bytes_counter = 0;
 800028c:	2300      	movs	r3, #0
 800028e:	f887 37fd 	strb.w	r3, [r7, #2045]	; 0x7fd
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000292:	f001 f81d 	bl	80012d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000296:	f000 f9ed 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029a:	f000 fb17 	bl	80008cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800029e:	f000 fae5 	bl	800086c <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80002a2:	f000 fabd 	bl	8000820 <MX_TIM16_Init>
  MX_ADC1_Init();
 80002a6:	f000 fa4b 	bl	8000740 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, std_num, 13, 10);
 80002aa:	230a      	movs	r3, #10
 80002ac:	220d      	movs	r2, #13
 80002ae:	49b7      	ldr	r1, [pc, #732]	; (800058c <main+0x318>)
 80002b0:	48b7      	ldr	r0, [pc, #732]	; (8000590 <main+0x31c>)
 80002b2:	f004 fc1d 	bl	8004af0 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 80002b6:	2201      	movs	r2, #1
 80002b8:	49b6      	ldr	r1, [pc, #728]	; (8000594 <main+0x320>)
 80002ba:	48b5      	ldr	r0, [pc, #724]	; (8000590 <main+0x31c>)
 80002bc:	f004 fcac 	bl	8004c18 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 80002c0:	48b5      	ldr	r0, [pc, #724]	; (8000598 <main+0x324>)
 80002c2:	f004 f953 	bl	800456c <HAL_TIM_Base_Start_IT>


  // Set up the default state of the device
  display_state = changeDisplayState(1); // 1 == Measurement mode
 80002c6:	2001      	movs	r0, #1
 80002c8:	f000 fbce 	bl	8000a68 <changeDisplayState>
 80002cc:	4603      	mov	r3, r0
 80002ce:	461a      	mov	r2, r3
 80002d0:	4bb2      	ldr	r3, [pc, #712]	; (800059c <main+0x328>)
 80002d2:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(message_received && rx_byte[0] != '\n')
 80002d4:	4bb2      	ldr	r3, [pc, #712]	; (80005a0 <main+0x32c>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d03a      	beq.n	8000352 <main+0xde>
 80002dc:	4bad      	ldr	r3, [pc, #692]	; (8000594 <main+0x320>)
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	2b0a      	cmp	r3, #10
 80002e2:	d036      	beq.n	8000352 <main+0xde>
	  {
		  rx_bytes[rx_bytes_counter] = rx_byte[0];
 80002e4:	f897 37fd 	ldrb.w	r3, [r7, #2045]	; 0x7fd
 80002e8:	4aaa      	ldr	r2, [pc, #680]	; (8000594 <main+0x320>)
 80002ea:	7811      	ldrb	r1, [r2, #0]
 80002ec:	1d3a      	adds	r2, r7, #4
 80002ee:	54d1      	strb	r1, [r2, r3]
		  if(rx_bytes_counter == 0 && rx_byte[0] == '@'){
 80002f0:	f897 37fd 	ldrb.w	r3, [r7, #2045]	; 0x7fd
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d109      	bne.n	800030c <main+0x98>
 80002f8:	4ba6      	ldr	r3, [pc, #664]	; (8000594 <main+0x320>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	2b40      	cmp	r3, #64	; 0x40
 80002fe:	d105      	bne.n	800030c <main+0x98>
			  rx_bytes_counter++;
 8000300:	f897 37fd 	ldrb.w	r3, [r7, #2045]	; 0x7fd
 8000304:	3301      	adds	r3, #1
 8000306:	f887 37fd 	strb.w	r3, [r7, #2045]	; 0x7fd
 800030a:	e01a      	b.n	8000342 <main+0xce>
		  } else if(rx_bytes_counter > 0){
 800030c:	f897 37fd 	ldrb.w	r3, [r7, #2045]	; 0x7fd
 8000310:	2b00      	cmp	r3, #0
 8000312:	d016      	beq.n	8000342 <main+0xce>
			  rx_bytes_counter++;
 8000314:	f897 37fd 	ldrb.w	r3, [r7, #2045]	; 0x7fd
 8000318:	3301      	adds	r3, #1
 800031a:	f887 37fd 	strb.w	r3, [r7, #2045]	; 0x7fd
			  if(uartRxComplete(rx_byte[0]))
 800031e:	4b9d      	ldr	r3, [pc, #628]	; (8000594 <main+0x320>)
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	4618      	mov	r0, r3
 8000324:	f000 fc12 	bl	8000b4c <uartRxComplete>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d009      	beq.n	8000342 <main+0xce>
			  {
				  interpret_rx_message(rx_bytes, rx_bytes_counter);
 800032e:	f897 27fd 	ldrb.w	r2, [r7, #2045]	; 0x7fd
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	4611      	mov	r1, r2
 8000336:	4618      	mov	r0, r3
 8000338:	f000 fc1a 	bl	8000b70 <interpret_rx_message>
				  rx_bytes_counter = 0;
 800033c:	2300      	movs	r3, #0
 800033e:	f887 37fd 	strb.w	r3, [r7, #2045]	; 0x7fd
			  }
		  }
		  HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 8000342:	2201      	movs	r2, #1
 8000344:	4993      	ldr	r1, [pc, #588]	; (8000594 <main+0x320>)
 8000346:	4892      	ldr	r0, [pc, #584]	; (8000590 <main+0x31c>)
 8000348:	f004 fc66 	bl	8004c18 <HAL_UART_Receive_IT>
		  message_received = 0;
 800034c:	4b94      	ldr	r3, [pc, #592]	; (80005a0 <main+0x32c>)
 800034e:	2200      	movs	r2, #0
 8000350:	701a      	strb	r2, [r3, #0]
	  }
	  if(btn_up_flag)
 8000352:	4b94      	ldr	r3, [pc, #592]	; (80005a4 <main+0x330>)
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d010      	beq.n	800037c <main+0x108>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 800035a:	f001 f813 	bl	8001384 <HAL_GetTick>
 800035e:	4602      	mov	r2, r0
 8000360:	4b91      	ldr	r3, [pc, #580]	; (80005a8 <main+0x334>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	1ad3      	subs	r3, r2, r3
 8000366:	2b36      	cmp	r3, #54	; 0x36
 8000368:	d96d      	bls.n	8000446 <main+0x1d2>
		  {
			  if(HAL_GPIO_ReadPin(btn_up_GPIO_Port, btn_up_Pin))
 800036a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800036e:	488f      	ldr	r0, [pc, #572]	; (80005ac <main+0x338>)
 8000370:	f002 fcd8 	bl	8002d24 <HAL_GPIO_ReadPin>
			  {
//				  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
			  }
			  btn_up_flag = 0;
 8000374:	4b8b      	ldr	r3, [pc, #556]	; (80005a4 <main+0x330>)
 8000376:	2200      	movs	r2, #0
 8000378:	701a      	strb	r2, [r3, #0]
 800037a:	e064      	b.n	8000446 <main+0x1d2>
		  }
	  }
	  else if(btn_left_flag)
 800037c:	4b8c      	ldr	r3, [pc, #560]	; (80005b0 <main+0x33c>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d010      	beq.n	80003a6 <main+0x132>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 8000384:	f000 fffe 	bl	8001384 <HAL_GetTick>
 8000388:	4602      	mov	r2, r0
 800038a:	4b87      	ldr	r3, [pc, #540]	; (80005a8 <main+0x334>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	1ad3      	subs	r3, r2, r3
 8000390:	2b36      	cmp	r3, #54	; 0x36
 8000392:	d958      	bls.n	8000446 <main+0x1d2>
		  {
			  if(HAL_GPIO_ReadPin(btn_left_GPIO_Port, btn_left_Pin))
 8000394:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000398:	4884      	ldr	r0, [pc, #528]	; (80005ac <main+0x338>)
 800039a:	f002 fcc3 	bl	8002d24 <HAL_GPIO_ReadPin>
			  {
//				  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
			  }
			  btn_left_flag = 0;
 800039e:	4b84      	ldr	r3, [pc, #528]	; (80005b0 <main+0x33c>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	701a      	strb	r2, [r3, #0]
 80003a4:	e04f      	b.n	8000446 <main+0x1d2>
		  }
	  }
	  else if(btn_down_flag)
 80003a6:	4b83      	ldr	r3, [pc, #524]	; (80005b4 <main+0x340>)
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d010      	beq.n	80003d0 <main+0x15c>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 80003ae:	f000 ffe9 	bl	8001384 <HAL_GetTick>
 80003b2:	4602      	mov	r2, r0
 80003b4:	4b7c      	ldr	r3, [pc, #496]	; (80005a8 <main+0x334>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	1ad3      	subs	r3, r2, r3
 80003ba:	2b36      	cmp	r3, #54	; 0x36
 80003bc:	d943      	bls.n	8000446 <main+0x1d2>
		  {
			  if(HAL_GPIO_ReadPin(btn_down_GPIO_Port, btn_down_Pin))
 80003be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003c2:	487a      	ldr	r0, [pc, #488]	; (80005ac <main+0x338>)
 80003c4:	f002 fcae 	bl	8002d24 <HAL_GPIO_ReadPin>
			  {
//				  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
			  }
			  btn_down_flag = 0;
 80003c8:	4b7a      	ldr	r3, [pc, #488]	; (80005b4 <main+0x340>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	701a      	strb	r2, [r3, #0]
 80003ce:	e03a      	b.n	8000446 <main+0x1d2>
		  }
	  }
	  else if(btn_right_flag)
 80003d0:	4b79      	ldr	r3, [pc, #484]	; (80005b8 <main+0x344>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d010      	beq.n	80003fa <main+0x186>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 80003d8:	f000 ffd4 	bl	8001384 <HAL_GetTick>
 80003dc:	4602      	mov	r2, r0
 80003de:	4b72      	ldr	r3, [pc, #456]	; (80005a8 <main+0x334>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	1ad3      	subs	r3, r2, r3
 80003e4:	2b36      	cmp	r3, #54	; 0x36
 80003e6:	d92e      	bls.n	8000446 <main+0x1d2>
		  {
			  if(HAL_GPIO_ReadPin(btn_right_GPIO_Port, btn_right_Pin))
 80003e8:	2180      	movs	r1, #128	; 0x80
 80003ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ee:	f002 fc99 	bl	8002d24 <HAL_GPIO_ReadPin>
			  {
//				  HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
			  }
			  btn_right_flag = 0;
 80003f2:	4b71      	ldr	r3, [pc, #452]	; (80005b8 <main+0x344>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	701a      	strb	r2, [r3, #0]
 80003f8:	e025      	b.n	8000446 <main+0x1d2>
		  }
	  }
	  else if(btn_mid_flag)
 80003fa:	4b70      	ldr	r3, [pc, #448]	; (80005bc <main+0x348>)
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d021      	beq.n	8000446 <main+0x1d2>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 8000402:	f000 ffbf 	bl	8001384 <HAL_GetTick>
 8000406:	4602      	mov	r2, r0
 8000408:	4b67      	ldr	r3, [pc, #412]	; (80005a8 <main+0x334>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	1ad3      	subs	r3, r2, r3
 800040e:	2b36      	cmp	r3, #54	; 0x36
 8000410:	d919      	bls.n	8000446 <main+0x1d2>
		  {
			  if(HAL_GPIO_ReadPin(btn_mid_GPIO_Port, btn_mid_Pin))
 8000412:	2140      	movs	r1, #64	; 0x40
 8000414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000418:	f002 fc84 	bl	8002d24 <HAL_GPIO_ReadPin>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d00e      	beq.n	8000440 <main+0x1cc>
			  {
				  // Toggle Menu Display state
				  if(display_state == 0){
 8000422:	4b5e      	ldr	r3, [pc, #376]	; (800059c <main+0x328>)
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d103      	bne.n	8000432 <main+0x1be>
					  changeDisplayState(1);
 800042a:	2001      	movs	r0, #1
 800042c:	f000 fb1c 	bl	8000a68 <changeDisplayState>
 8000430:	e006      	b.n	8000440 <main+0x1cc>
				  } else if(display_state == 1){
 8000432:	4b5a      	ldr	r3, [pc, #360]	; (800059c <main+0x328>)
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	2b01      	cmp	r3, #1
 8000438:	d102      	bne.n	8000440 <main+0x1cc>
					  changeDisplayState(0);
 800043a:	2000      	movs	r0, #0
 800043c:	f000 fb14 	bl	8000a68 <changeDisplayState>
				  }
//				  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
			  }
			  btn_mid_flag = 0;
 8000440:	4b5e      	ldr	r3, [pc, #376]	; (80005bc <main+0x348>)
 8000442:	2200      	movs	r2, #0
 8000444:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  // ADC TIM16 interrupt
	  if(adc_timer_flag)
 8000446:	4b5e      	ldr	r3, [pc, #376]	; (80005c0 <main+0x34c>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	2b00      	cmp	r3, #0
 800044c:	f43f af42 	beq.w	80002d4 <main+0x60>
	  {
		  if(adc_count > 999)
 8000450:	f8b7 37fe 	ldrh.w	r3, [r7, #2046]	; 0x7fe
 8000454:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000458:	f0c0 80bc 	bcc.w	80005d4 <main+0x360>
		  {
			  // Do calculations every 1000 readings
			  adc_count = 0;
 800045c:	2300      	movs	r3, #0
 800045e:	f8a7 37fe 	strh.w	r3, [r7, #2046]	; 0x7fe
			  uint32_t total = 0;
 8000462:	2300      	movs	r3, #0
 8000464:	f8c7 37f8 	str.w	r3, [r7, #2040]	; 0x7f8
			  uint16_t max = 0;
 8000468:	2300      	movs	r3, #0
 800046a:	f8a7 37f6 	strh.w	r3, [r7, #2038]	; 0x7f6
			  uint16_t min = adc_array[99]; // arbitrary value
 800046e:	f107 0310 	add.w	r3, r7, #16
 8000472:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8000476:	f8a7 37f4 	strh.w	r3, [r7, #2036]	; 0x7f4
			  int16_t diff = 0;
 800047a:	2300      	movs	r3, #0
 800047c:	f8a7 37e2 	strh.w	r3, [r7, #2018]	; 0x7e2
			  int16_t prev_diff = 0;
 8000480:	2300      	movs	r3, #0
 8000482:	f8a7 37f2 	strh.w	r3, [r7, #2034]	; 0x7f2
			  uint16_t mid_passes = 0;
 8000486:	2300      	movs	r3, #0
 8000488:	f8a7 37f0 	strh.w	r3, [r7, #2032]	; 0x7f0
			  // 1000 measurements at 5kHz take 200ms
			  for(int x = 0; x < 1000; x++)
 800048c:	2300      	movs	r3, #0
 800048e:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
 8000492:	e035      	b.n	8000500 <main+0x28c>
			  {
				  total += adc_array[x];
 8000494:	f107 0310 	add.w	r3, r7, #16
 8000498:	f8d7 27ec 	ldr.w	r2, [r7, #2028]	; 0x7ec
 800049c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80004a0:	461a      	mov	r2, r3
 80004a2:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	; 0x7f8
 80004a6:	4413      	add	r3, r2
 80004a8:	f8c7 37f8 	str.w	r3, [r7, #2040]	; 0x7f8
				  if(adc_array[x] > max)
 80004ac:	f107 0310 	add.w	r3, r7, #16
 80004b0:	f8d7 27ec 	ldr.w	r2, [r7, #2028]	; 0x7ec
 80004b4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80004b8:	f8b7 27f6 	ldrh.w	r2, [r7, #2038]	; 0x7f6
 80004bc:	429a      	cmp	r2, r3
 80004be:	d208      	bcs.n	80004d2 <main+0x25e>
				  {
					  max = adc_array[x];
 80004c0:	f107 0310 	add.w	r3, r7, #16
 80004c4:	f8d7 27ec 	ldr.w	r2, [r7, #2028]	; 0x7ec
 80004c8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80004cc:	f8a7 37f6 	strh.w	r3, [r7, #2038]	; 0x7f6
 80004d0:	e011      	b.n	80004f6 <main+0x282>
				  }
				  else if(adc_array[x] < min)
 80004d2:	f107 0310 	add.w	r3, r7, #16
 80004d6:	f8d7 27ec 	ldr.w	r2, [r7, #2028]	; 0x7ec
 80004da:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80004de:	f8b7 27f4 	ldrh.w	r2, [r7, #2036]	; 0x7f4
 80004e2:	429a      	cmp	r2, r3
 80004e4:	d907      	bls.n	80004f6 <main+0x282>
				  {
					  min = adc_array[x];
 80004e6:	f107 0310 	add.w	r3, r7, #16
 80004ea:	f8d7 27ec 	ldr.w	r2, [r7, #2028]	; 0x7ec
 80004ee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80004f2:	f8a7 37f4 	strh.w	r3, [r7, #2036]	; 0x7f4
			  for(int x = 0; x < 1000; x++)
 80004f6:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 80004fa:	3301      	adds	r3, #1
 80004fc:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
 8000500:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 8000504:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000508:	dbc4      	blt.n	8000494 <main+0x220>
				  }
			  }
//			  offset = total/1000;
			  offset = 1000;
 800050a:	4b2e      	ldr	r3, [pc, #184]	; (80005c4 <main+0x350>)
 800050c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000510:	801a      	strh	r2, [r3, #0]
			  for(int x = 0; x < 1000; x++)
 8000512:	2300      	movs	r3, #0
 8000514:	f8c7 37e8 	str.w	r3, [r7, #2024]	; 0x7e8
 8000518:	e021      	b.n	800055e <main+0x2ea>
			  {
				  // Calculate frequency
				  diff = adc_array[x] - offset;
 800051a:	f107 0310 	add.w	r3, r7, #16
 800051e:	f8d7 27e8 	ldr.w	r2, [r7, #2024]	; 0x7e8
 8000522:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000526:	4b27      	ldr	r3, [pc, #156]	; (80005c4 <main+0x350>)
 8000528:	881b      	ldrh	r3, [r3, #0]
 800052a:	1ad3      	subs	r3, r2, r3
 800052c:	b29b      	uxth	r3, r3
 800052e:	f8a7 37e2 	strh.w	r3, [r7, #2018]	; 0x7e2
				  if(diff > 0 && prev_diff < 0)
 8000532:	f9b7 37e2 	ldrsh.w	r3, [r7, #2018]	; 0x7e2
 8000536:	2b00      	cmp	r3, #0
 8000538:	dd08      	ble.n	800054c <main+0x2d8>
 800053a:	f9b7 37f2 	ldrsh.w	r3, [r7, #2034]	; 0x7f2
 800053e:	2b00      	cmp	r3, #0
 8000540:	da04      	bge.n	800054c <main+0x2d8>
				  {
					  mid_passes++;
 8000542:	f8b7 37f0 	ldrh.w	r3, [r7, #2032]	; 0x7f0
 8000546:	3301      	adds	r3, #1
 8000548:	f8a7 37f0 	strh.w	r3, [r7, #2032]	; 0x7f0
				  }
				  prev_diff = diff;
 800054c:	f8b7 37e2 	ldrh.w	r3, [r7, #2018]	; 0x7e2
 8000550:	f8a7 37f2 	strh.w	r3, [r7, #2034]	; 0x7f2
			  for(int x = 0; x < 1000; x++)
 8000554:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 8000558:	3301      	adds	r3, #1
 800055a:	f8c7 37e8 	str.w	r3, [r7, #2024]	; 0x7e8
 800055e:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 8000562:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000566:	dbd8      	blt.n	800051a <main+0x2a6>
			  }
			  period = 50000/(mid_passes);
 8000568:	f8b7 37f0 	ldrh.w	r3, [r7, #2032]	; 0x7f0
 800056c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000570:	fb92 f3f3 	sdiv	r3, r2, r3
 8000574:	b29a      	uxth	r2, r3
 8000576:	4b14      	ldr	r3, [pc, #80]	; (80005c8 <main+0x354>)
 8000578:	801a      	strh	r2, [r3, #0]
//			  frequency = 1000000/period;
			  frequency = 5250;
 800057a:	4b14      	ldr	r3, [pc, #80]	; (80005cc <main+0x358>)
 800057c:	f241 4282 	movw	r2, #5250	; 0x1482
 8000580:	801a      	strh	r2, [r3, #0]
//			  amplitude = max - min;
			  amplitude = 500;
 8000582:	4b13      	ldr	r3, [pc, #76]	; (80005d0 <main+0x35c>)
 8000584:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000588:	801a      	strh	r2, [r3, #0]
 800058a:	e061      	b.n	8000650 <main+0x3dc>
 800058c:	20000000 	.word	0x20000000
 8000590:	200000a4 	.word	0x200000a4
 8000594:	200000a0 	.word	0x200000a0
 8000598:	20000128 	.word	0x20000128
 800059c:	2000000d 	.word	0x2000000d
 80005a0:	20000038 	.word	0x20000038
 80005a4:	2000003b 	.word	0x2000003b
 80005a8:	20000040 	.word	0x20000040
 80005ac:	48000400 	.word	0x48000400
 80005b0:	2000003c 	.word	0x2000003c
 80005b4:	2000003d 	.word	0x2000003d
 80005b8:	2000003a 	.word	0x2000003a
 80005bc:	20000039 	.word	0x20000039
 80005c0:	2000003e 	.word	0x2000003e
 80005c4:	2000004a 	.word	0x2000004a
 80005c8:	20000048 	.word	0x20000048
 80005cc:	20000046 	.word	0x20000046
 80005d0:	20000044 	.word	0x20000044
//			  sprintf(msg, "Max: %u\nMin: %u\nOffset: %u\nFrequency: %u\nAmplitude: %u\n\n", max, min, offset, frequency, amplitude);
//			  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 10);
		  }
		  else
		  {
			  HAL_ADC_Start(&hadc1);
 80005d4:	4822      	ldr	r0, [pc, #136]	; (8000660 <main+0x3ec>)
 80005d6:	f001 f8db 	bl	8001790 <HAL_ADC_Start>
			  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005da:	f04f 31ff 	mov.w	r1, #4294967295
 80005de:	4820      	ldr	r0, [pc, #128]	; (8000660 <main+0x3ec>)
 80005e0:	f001 fa22 	bl	8001a28 <HAL_ADC_PollForConversion>
			  raw = HAL_ADC_GetValue(&hadc1);
 80005e4:	481e      	ldr	r0, [pc, #120]	; (8000660 <main+0x3ec>)
 80005e6:	f001 fb21 	bl	8001c2c <HAL_ADC_GetValue>
 80005ea:	4603      	mov	r3, r0
 80005ec:	f8a7 37e6 	strh.w	r3, [r7, #2022]	; 0x7e6
			  HAL_ADC_Stop(&hadc1);
 80005f0:	481b      	ldr	r0, [pc, #108]	; (8000660 <main+0x3ec>)
 80005f2:	f001 f9e3 	bl	80019bc <HAL_ADC_Stop>
			  millivolts = raw*3300/4095;
 80005f6:	f8b7 37e6 	ldrh.w	r3, [r7, #2022]	; 0x7e6
 80005fa:	f640 42e4 	movw	r2, #3300	; 0xce4
 80005fe:	fb02 f303 	mul.w	r3, r2, r3
 8000602:	4a18      	ldr	r2, [pc, #96]	; (8000664 <main+0x3f0>)
 8000604:	fb82 1203 	smull	r1, r2, r2, r3
 8000608:	441a      	add	r2, r3
 800060a:	12d2      	asrs	r2, r2, #11
 800060c:	17db      	asrs	r3, r3, #31
 800060e:	1ad3      	subs	r3, r2, r3
 8000610:	f8a7 37e4 	strh.w	r3, [r7, #2020]	; 0x7e4
			  millivolts += 100*millivolts/1000; // Calibration
 8000614:	f8b7 37e4 	ldrh.w	r3, [r7, #2020]	; 0x7e4
 8000618:	2264      	movs	r2, #100	; 0x64
 800061a:	fb02 f303 	mul.w	r3, r2, r3
 800061e:	4a12      	ldr	r2, [pc, #72]	; (8000668 <main+0x3f4>)
 8000620:	fb82 1203 	smull	r1, r2, r2, r3
 8000624:	1192      	asrs	r2, r2, #6
 8000626:	17db      	asrs	r3, r3, #31
 8000628:	1ad3      	subs	r3, r2, r3
 800062a:	b29a      	uxth	r2, r3
 800062c:	f8b7 37e4 	ldrh.w	r3, [r7, #2020]	; 0x7e4
 8000630:	4413      	add	r3, r2
 8000632:	f8a7 37e4 	strh.w	r3, [r7, #2020]	; 0x7e4
			  adc_array[adc_count] = millivolts;
 8000636:	f8b7 27fe 	ldrh.w	r2, [r7, #2046]	; 0x7fe
 800063a:	f107 0310 	add.w	r3, r7, #16
 800063e:	f8b7 17e4 	ldrh.w	r1, [r7, #2020]	; 0x7e4
 8000642:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			  adc_count++;
 8000646:	f8b7 37fe 	ldrh.w	r3, [r7, #2046]	; 0x7fe
 800064a:	3301      	adds	r3, #1
 800064c:	f8a7 37fe 	strh.w	r3, [r7, #2046]	; 0x7fe
		  }

		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8000650:	2110      	movs	r1, #16
 8000652:	4806      	ldr	r0, [pc, #24]	; (800066c <main+0x3f8>)
 8000654:	f002 fb96 	bl	8002d84 <HAL_GPIO_TogglePin>
		  adc_timer_flag = 0;
 8000658:	4b05      	ldr	r3, [pc, #20]	; (8000670 <main+0x3fc>)
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
	  if(message_received && rx_byte[0] != '\n')
 800065e:	e639      	b.n	80002d4 <main+0x60>
 8000660:	20000050 	.word	0x20000050
 8000664:	80080081 	.word	0x80080081
 8000668:	10624dd3 	.word	0x10624dd3
 800066c:	48000800 	.word	0x48000800
 8000670:	2000003e 	.word	0x2000003e

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b0a6      	sub	sp, #152	; 0x98
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800067e:	2228      	movs	r2, #40	; 0x28
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f005 fc74 	bl	8005f70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	2258      	movs	r2, #88	; 0x58
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f005 fc66 	bl	8005f70 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a4:	2302      	movs	r3, #2
 80006a6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ac:	2310      	movs	r3, #16
 80006ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b2:	2302      	movs	r3, #2
 80006b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006c0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006d2:	4618      	mov	r0, r3
 80006d4:	f002 fb88 	bl	8002de8 <HAL_RCC_OscConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80006de:	f000 fc83 	bl	8000fe8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e2:	230f      	movs	r3, #15
 80006e4:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e6:	2302      	movs	r3, #2
 80006e8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006f2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006fc:	2102      	movs	r1, #2
 80006fe:	4618      	mov	r0, r3
 8000700:	f003 fa88 	bl	8003c14 <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800070a:	f000 fc6d 	bl	8000fe8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM16
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <SystemClock_Config+0xc8>)
 8000710:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000712:	2300      	movs	r3, #0
 8000714:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000716:	f44f 7380 	mov.w	r3, #256	; 0x100
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 800071c:	2300      	movs	r3, #0
 800071e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	4618      	mov	r0, r3
 8000724:	f003 fcac 	bl	8004080 <HAL_RCCEx_PeriphCLKConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800072e:	f000 fc5b 	bl	8000fe8 <Error_Handler>
  }
}
 8000732:	bf00      	nop
 8000734:	3798      	adds	r7, #152	; 0x98
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	00800082 	.word	0x00800082

08000740 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	; 0x28
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
 8000760:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000762:	4b2e      	ldr	r3, [pc, #184]	; (800081c <MX_ADC1_Init+0xdc>)
 8000764:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000768:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800076a:	4b2c      	ldr	r3, [pc, #176]	; (800081c <MX_ADC1_Init+0xdc>)
 800076c:	2200      	movs	r2, #0
 800076e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000770:	4b2a      	ldr	r3, [pc, #168]	; (800081c <MX_ADC1_Init+0xdc>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000776:	4b29      	ldr	r3, [pc, #164]	; (800081c <MX_ADC1_Init+0xdc>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800077c:	4b27      	ldr	r3, [pc, #156]	; (800081c <MX_ADC1_Init+0xdc>)
 800077e:	2200      	movs	r2, #0
 8000780:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000782:	4b26      	ldr	r3, [pc, #152]	; (800081c <MX_ADC1_Init+0xdc>)
 8000784:	2200      	movs	r2, #0
 8000786:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800078a:	4b24      	ldr	r3, [pc, #144]	; (800081c <MX_ADC1_Init+0xdc>)
 800078c:	2200      	movs	r2, #0
 800078e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0xdc>)
 8000792:	2201      	movs	r2, #1
 8000794:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000796:	4b21      	ldr	r3, [pc, #132]	; (800081c <MX_ADC1_Init+0xdc>)
 8000798:	2200      	movs	r2, #0
 800079a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800079c:	4b1f      	ldr	r3, [pc, #124]	; (800081c <MX_ADC1_Init+0xdc>)
 800079e:	2201      	movs	r2, #1
 80007a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007a2:	4b1e      	ldr	r3, [pc, #120]	; (800081c <MX_ADC1_Init+0xdc>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007aa:	4b1c      	ldr	r3, [pc, #112]	; (800081c <MX_ADC1_Init+0xdc>)
 80007ac:	2204      	movs	r2, #4
 80007ae:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007b0:	4b1a      	ldr	r3, [pc, #104]	; (800081c <MX_ADC1_Init+0xdc>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80007b6:	4b19      	ldr	r3, [pc, #100]	; (800081c <MX_ADC1_Init+0xdc>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007bc:	4817      	ldr	r0, [pc, #92]	; (800081c <MX_ADC1_Init+0xdc>)
 80007be:	f000 fded 	bl	800139c <HAL_ADC_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80007c8:	f000 fc0e 	bl	8000fe8 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007d0:	f107 031c 	add.w	r3, r7, #28
 80007d4:	4619      	mov	r1, r3
 80007d6:	4811      	ldr	r0, [pc, #68]	; (800081c <MX_ADC1_Init+0xdc>)
 80007d8:	f001 fd22 	bl	8002220 <HAL_ADCEx_MultiModeConfigChannel>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80007e2:	f000 fc01 	bl	8000fe8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007ea:	2301      	movs	r3, #1
 80007ec:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	4619      	mov	r1, r3
 8000802:	4806      	ldr	r0, [pc, #24]	; (800081c <MX_ADC1_Init+0xdc>)
 8000804:	f001 fa20 	bl	8001c48 <HAL_ADC_ConfigChannel>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800080e:	f000 fbeb 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	3728      	adds	r7, #40	; 0x28
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000050 	.word	0x20000050

08000820 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_TIM16_Init+0x44>)
 8000826:	4a10      	ldr	r2, [pc, #64]	; (8000868 <MX_TIM16_Init+0x48>)
 8000828:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 72-1;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_TIM16_Init+0x44>)
 800082c:	2247      	movs	r2, #71	; 0x47
 800082e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_TIM16_Init+0x44>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 50 - 1;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_TIM16_Init+0x44>)
 8000838:	2231      	movs	r2, #49	; 0x31
 800083a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_TIM16_Init+0x44>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_TIM16_Init+0x44>)
 8000844:	2200      	movs	r2, #0
 8000846:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_TIM16_Init+0x44>)
 800084a:	2200      	movs	r2, #0
 800084c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_TIM16_Init+0x44>)
 8000850:	f003 fe34 	bl	80044bc <HAL_TIM_Base_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800085a:	f000 fbc5 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000128 	.word	0x20000128
 8000868:	40014400 	.word	0x40014400

0800086c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000870:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_USART2_UART_Init+0x58>)
 8000872:	4a15      	ldr	r2, [pc, #84]	; (80008c8 <MX_USART2_UART_Init+0x5c>)
 8000874:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000876:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <MX_USART2_UART_Init+0x58>)
 8000878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800087c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_USART2_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_USART2_UART_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_USART2_UART_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_USART2_UART_Init+0x58>)
 8000892:	220c      	movs	r2, #12
 8000894:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <MX_USART2_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_USART2_UART_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <MX_USART2_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_USART2_UART_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_USART2_UART_Init+0x58>)
 80008b0:	f004 f8d0 	bl	8004a54 <HAL_UART_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008ba:	f000 fb95 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200000a4 	.word	0x200000a4
 80008c8:	40004400 	.word	0x40004400

080008cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	; 0x28
 80008d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e2:	4b53      	ldr	r3, [pc, #332]	; (8000a30 <MX_GPIO_Init+0x164>)
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	4a52      	ldr	r2, [pc, #328]	; (8000a30 <MX_GPIO_Init+0x164>)
 80008e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008ec:	6153      	str	r3, [r2, #20]
 80008ee:	4b50      	ldr	r3, [pc, #320]	; (8000a30 <MX_GPIO_Init+0x164>)
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008fa:	4b4d      	ldr	r3, [pc, #308]	; (8000a30 <MX_GPIO_Init+0x164>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	4a4c      	ldr	r2, [pc, #304]	; (8000a30 <MX_GPIO_Init+0x164>)
 8000900:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000904:	6153      	str	r3, [r2, #20]
 8000906:	4b4a      	ldr	r3, [pc, #296]	; (8000a30 <MX_GPIO_Init+0x164>)
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b47      	ldr	r3, [pc, #284]	; (8000a30 <MX_GPIO_Init+0x164>)
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	4a46      	ldr	r2, [pc, #280]	; (8000a30 <MX_GPIO_Init+0x164>)
 8000918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800091c:	6153      	str	r3, [r2, #20]
 800091e:	4b44      	ldr	r3, [pc, #272]	; (8000a30 <MX_GPIO_Init+0x164>)
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	4b41      	ldr	r3, [pc, #260]	; (8000a30 <MX_GPIO_Init+0x164>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	4a40      	ldr	r2, [pc, #256]	; (8000a30 <MX_GPIO_Init+0x164>)
 8000930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000934:	6153      	str	r3, [r2, #20]
 8000936:	4b3e      	ldr	r3, [pc, #248]	; (8000a30 <MX_GPIO_Init+0x164>)
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD5_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8000948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094c:	f002 fa02 	bl	8002d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|LD3_Pin, GPIO_PIN_RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	2190      	movs	r1, #144	; 0x90
 8000954:	4837      	ldr	r0, [pc, #220]	; (8000a34 <MX_GPIO_Init+0x168>)
 8000956:	f002 f9fd 	bl	8002d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800095a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800095e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000960:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4619      	mov	r1, r3
 8000970:	4830      	ldr	r0, [pc, #192]	; (8000a34 <MX_GPIO_Init+0x168>)
 8000972:	f002 f84d 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD5_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD5_Pin|LD4_Pin;
 8000976:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 800097a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097c:	2301      	movs	r3, #1
 800097e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4619      	mov	r1, r3
 800098e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000992:	f002 f83d 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_mid_Pin */
  GPIO_InitStruct.Pin = btn_mid_Pin;
 8000996:	2340      	movs	r3, #64	; 0x40
 8000998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800099a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800099e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009a0:	2301      	movs	r3, #1
 80009a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn_mid_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4619      	mov	r1, r3
 80009aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ae:	f002 f82f 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_right_Pin */
  GPIO_InitStruct.Pin = btn_right_Pin;
 80009b2:	2380      	movs	r3, #128	; 0x80
 80009b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009bc:	2301      	movs	r3, #1
 80009be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn_right_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4619      	mov	r1, r3
 80009c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ca:	f002 f821 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD3_Pin;
 80009ce:	2390      	movs	r3, #144	; 0x90
 80009d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d2:	2301      	movs	r3, #1
 80009d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4619      	mov	r1, r3
 80009e4:	4813      	ldr	r0, [pc, #76]	; (8000a34 <MX_GPIO_Init+0x168>)
 80009e6:	f002 f813 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : btn_down_Pin btn_left_Pin btn_up_Pin */
  GPIO_InitStruct.Pin = btn_down_Pin|btn_left_Pin|btn_up_Pin;
 80009ea:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80009ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	4619      	mov	r1, r3
 8000a00:	480d      	ldr	r0, [pc, #52]	; (8000a38 <MX_GPIO_Init+0x16c>)
 8000a02:	f002 f805 	bl	8002a10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2100      	movs	r1, #0
 8000a0a:	2017      	movs	r0, #23
 8000a0c:	f001 ff53 	bl	80028b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a10:	2017      	movs	r0, #23
 8000a12:	f001 ff6c 	bl	80028ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2100      	movs	r1, #0
 8000a1a:	2028      	movs	r0, #40	; 0x28
 8000a1c:	f001 ff4b 	bl	80028b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a20:	2028      	movs	r0, #40	; 0x28
 8000a22:	f001 ff64 	bl	80028ee <HAL_NVIC_EnableIRQ>

}
 8000a26:	bf00      	nop
 8000a28:	3728      	adds	r7, #40	; 0x28
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40021000 	.word	0x40021000
 8000a34:	48000800 	.word	0x48000800
 8000a38:	48000400 	.word	0x48000400

08000a3c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this interrupt
	if(htim == &htim16)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a06      	ldr	r2, [pc, #24]	; (8000a60 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d102      	bne.n	8000a52 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		adc_timer_flag = 1;
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	701a      	strb	r2, [r3, #0]
	}
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	20000128 	.word	0x20000128
 8000a64:	2000003e 	.word	0x2000003e

08000a68 <changeDisplayState>:

uint8_t changeDisplayState(uint8_t code)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
	if (code == 0)
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d11d      	bne.n	8000ab4 <changeDisplayState+0x4c>
	{
		// Change to Menu Display State
		display_state = 0;
 8000a78:	4b32      	ldr	r3, [pc, #200]	; (8000b44 <changeDisplayState+0xdc>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000a7e:	2201      	movs	r2, #1
 8000a80:	2120      	movs	r1, #32
 8000a82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a86:	f002 f965 	bl	8002d54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2180      	movs	r1, #128	; 0x80
 8000a8e:	482e      	ldr	r0, [pc, #184]	; (8000b48 <changeDisplayState+0xe0>)
 8000a90:	f002 f960 	bl	8002d54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9e:	f002 f959 	bl	8002d54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aac:	f002 f952 	bl	8002d54 <HAL_GPIO_WritePin>
		return 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	e042      	b.n	8000b3a <changeDisplayState+0xd2>
	}
	else if (code == 1)
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d11d      	bne.n	8000af6 <changeDisplayState+0x8e>
	{
		// Change to Measurement Display State
		display_state = 1;
 8000aba:	4b22      	ldr	r3, [pc, #136]	; (8000b44 <changeDisplayState+0xdc>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2120      	movs	r1, #32
 8000ac4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac8:	f002 f944 	bl	8002d54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000acc:	2201      	movs	r2, #1
 8000ace:	2180      	movs	r1, #128	; 0x80
 8000ad0:	481d      	ldr	r0, [pc, #116]	; (8000b48 <changeDisplayState+0xe0>)
 8000ad2:	f002 f93f 	bl	8002d54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000adc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae0:	f002 f938 	bl	8002d54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aee:	f002 f931 	bl	8002d54 <HAL_GPIO_WritePin>
		return 1;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e021      	b.n	8000b3a <changeDisplayState+0xd2>
	}
	else if (code == 2)
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d11d      	bne.n	8000b38 <changeDisplayState+0xd0>
	{
		// Change to Output Display State
		display_state = 2;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <changeDisplayState+0xdc>)
 8000afe:	2202      	movs	r2, #2
 8000b00:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2120      	movs	r1, #32
 8000b06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b0a:	f002 f923 	bl	8002d54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2180      	movs	r1, #128	; 0x80
 8000b12:	480d      	ldr	r0, [pc, #52]	; (8000b48 <changeDisplayState+0xe0>)
 8000b14:	f002 f91e 	bl	8002d54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b22:	f002 f917 	bl	8002d54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b30:	f002 f910 	bl	8002d54 <HAL_GPIO_WritePin>
		return 2;
 8000b34:	2302      	movs	r3, #2
 8000b36:	e000      	b.n	8000b3a <changeDisplayState+0xd2>
	}
	else
	{
		// An error has occurred
		return 3;
 8000b38:	2303      	movs	r3, #3
	}
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	2000000d 	.word	0x2000000d
 8000b48:	48000800 	.word	0x48000800

08000b4c <uartRxComplete>:

bool uartRxComplete(uint8_t last_byte)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
	if(last_byte == '!')
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	2b21      	cmp	r3, #33	; 0x21
 8000b5a:	d101      	bne.n	8000b60 <uartRxComplete+0x14>
	{
		return true;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	e000      	b.n	8000b62 <uartRxComplete+0x16>
	}
	else
	{
		return false;
 8000b60:	2300      	movs	r3, #0
	}
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
	...

08000b70 <interpret_rx_message>:

void interpret_rx_message(uint8_t *rx_array, uint8_t length)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	460b      	mov	r3, r1
 8000b7a:	70fb      	strb	r3, [r7, #3]

//	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);

	if(length > 7)
 8000b7c:	78fb      	ldrb	r3, [r7, #3]
 8000b7e:	2b07      	cmp	r3, #7
 8000b80:	d964      	bls.n	8000c4c <interpret_rx_message+0xdc>
	{
		if(rx_array[2] == '*')
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	3302      	adds	r3, #2
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b2a      	cmp	r3, #42	; 0x2a
 8000b8a:	d122      	bne.n	8000bd2 <interpret_rx_message+0x62>
		{
			// Requests
//			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
			switch(rx_array[4])
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3304      	adds	r3, #4
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b6d      	cmp	r3, #109	; 0x6d
 8000b94:	d002      	beq.n	8000b9c <interpret_rx_message+0x2c>
 8000b96:	2b73      	cmp	r3, #115	; 0x73
 8000b98:	d007      	beq.n	8000baa <interpret_rx_message+0x3a>
					request_status();
					break;

				default:
					// Problems
					break;
 8000b9a:	e057      	b.n	8000c4c <interpret_rx_message+0xdc>
					request_measurement(rx_array[6]);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3306      	adds	r3, #6
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 f85a 	bl	8000c5c <request_measurement>
					break;
 8000ba8:	e050      	b.n	8000c4c <interpret_rx_message+0xdc>
					if(rx_array[6] == '0'){
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	3306      	adds	r3, #6
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b30      	cmp	r3, #48	; 0x30
 8000bb2:	d103      	bne.n	8000bbc <interpret_rx_message+0x4c>
						signal_active = 0;
 8000bb4:	4b27      	ldr	r3, [pc, #156]	; (8000c54 <interpret_rx_message+0xe4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
 8000bba:	e007      	b.n	8000bcc <interpret_rx_message+0x5c>
					} else if(rx_array[6] == '1'){
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3306      	adds	r3, #6
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2b31      	cmp	r3, #49	; 0x31
 8000bc4:	d102      	bne.n	8000bcc <interpret_rx_message+0x5c>
						signal_active = 1;
 8000bc6:	4b23      	ldr	r3, [pc, #140]	; (8000c54 <interpret_rx_message+0xe4>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	701a      	strb	r2, [r3, #0]
					request_status();
 8000bcc:	f000 f99c 	bl	8000f08 <request_status>
					break;
 8000bd0:	e03c      	b.n	8000c4c <interpret_rx_message+0xdc>
			}
		}
		else if(rx_array[2] == '$')
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	3302      	adds	r3, #2
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b24      	cmp	r3, #36	; 0x24
 8000bda:	d137      	bne.n	8000c4c <interpret_rx_message+0xdc>
		{
			// Set
//			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
			uint8_t key1 = rx_array[4];
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	791b      	ldrb	r3, [r3, #4]
 8000be0:	73fb      	strb	r3, [r7, #15]
			uint8_t key2 = rx_array[5];
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	795b      	ldrb	r3, [r3, #5]
 8000be6:	73bb      	strb	r3, [r7, #14]
			if(key1 == 'D' && key2 == 'V'){
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
 8000bea:	2b44      	cmp	r3, #68	; 0x44
 8000bec:	d106      	bne.n	8000bfc <interpret_rx_message+0x8c>
 8000bee:	7bbb      	ldrb	r3, [r7, #14]
 8000bf0:	2b56      	cmp	r3, #86	; 0x56
 8000bf2:	d103      	bne.n	8000bfc <interpret_rx_message+0x8c>
				// DC Voltage
				measurement_mode = 0;
 8000bf4:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <interpret_rx_message+0xe8>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
 8000bfa:	e027      	b.n	8000c4c <interpret_rx_message+0xdc>
			} else if (key1 == 'A' && key2 == 'V'){
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
 8000bfe:	2b41      	cmp	r3, #65	; 0x41
 8000c00:	d106      	bne.n	8000c10 <interpret_rx_message+0xa0>
 8000c02:	7bbb      	ldrb	r3, [r7, #14]
 8000c04:	2b56      	cmp	r3, #86	; 0x56
 8000c06:	d103      	bne.n	8000c10 <interpret_rx_message+0xa0>
				// AC Voltage
				measurement_mode = 1;
 8000c08:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <interpret_rx_message+0xe8>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	701a      	strb	r2, [r3, #0]
 8000c0e:	e01d      	b.n	8000c4c <interpret_rx_message+0xdc>
			} else if (key1 == 'D' && key2 == 'I'){
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
 8000c12:	2b44      	cmp	r3, #68	; 0x44
 8000c14:	d106      	bne.n	8000c24 <interpret_rx_message+0xb4>
 8000c16:	7bbb      	ldrb	r3, [r7, #14]
 8000c18:	2b49      	cmp	r3, #73	; 0x49
 8000c1a:	d103      	bne.n	8000c24 <interpret_rx_message+0xb4>
				// DC Current
				measurement_mode = 2;
 8000c1c:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <interpret_rx_message+0xe8>)
 8000c1e:	2202      	movs	r2, #2
 8000c20:	701a      	strb	r2, [r3, #0]
 8000c22:	e013      	b.n	8000c4c <interpret_rx_message+0xdc>
			} else if (key1 == 'A' && key2 == 'I'){
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	2b41      	cmp	r3, #65	; 0x41
 8000c28:	d106      	bne.n	8000c38 <interpret_rx_message+0xc8>
 8000c2a:	7bbb      	ldrb	r3, [r7, #14]
 8000c2c:	2b49      	cmp	r3, #73	; 0x49
 8000c2e:	d103      	bne.n	8000c38 <interpret_rx_message+0xc8>
				// AC Current
				measurement_mode = 3;
 8000c30:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <interpret_rx_message+0xe8>)
 8000c32:	2203      	movs	r2, #3
 8000c34:	701a      	strb	r2, [r3, #0]
 8000c36:	e009      	b.n	8000c4c <interpret_rx_message+0xdc>
			} else if (key1 == 'T' && key2 == 'C'){
 8000c38:	7bfb      	ldrb	r3, [r7, #15]
 8000c3a:	2b54      	cmp	r3, #84	; 0x54
 8000c3c:	d106      	bne.n	8000c4c <interpret_rx_message+0xdc>
 8000c3e:	7bbb      	ldrb	r3, [r7, #14]
 8000c40:	2b43      	cmp	r3, #67	; 0x43
 8000c42:	d103      	bne.n	8000c4c <interpret_rx_message+0xdc>
				// Temperature
				measurement_mode = 4;
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <interpret_rx_message+0xe8>)
 8000c46:	2204      	movs	r2, #4
 8000c48:	701a      	strb	r2, [r3, #0]
		else
		{
//			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
		}
	}
}
 8000c4a:	e7ff      	b.n	8000c4c <interpret_rx_message+0xdc>
 8000c4c:	bf00      	nop
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	2000004e 	.word	0x2000004e
 8000c58:	2000004c 	.word	0x2000004c

08000c5c <request_measurement>:

void request_measurement(uint8_t parameter)
{
 8000c5c:	b590      	push	{r4, r7, lr}
 8000c5e:	b087      	sub	sp, #28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
	uint8_t msg[13] = "@,m,x,xxxx,!\n";
 8000c66:	4b9f      	ldr	r3, [pc, #636]	; (8000ee4 <request_measurement+0x288>)
 8000c68:	f107 0408 	add.w	r4, r7, #8
 8000c6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c6e:	c407      	stmia	r4!, {r0, r1, r2}
 8000c70:	7023      	strb	r3, [r4, #0]
	switch(parameter){
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	3b61      	subs	r3, #97	; 0x61
 8000c76:	2b13      	cmp	r3, #19
 8000c78:	f200 8122 	bhi.w	8000ec0 <request_measurement+0x264>
 8000c7c:	a201      	add	r2, pc, #4	; (adr r2, 8000c84 <request_measurement+0x28>)
 8000c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c82:	bf00      	nop
 8000c84:	08000cd5 	.word	0x08000cd5
 8000c88:	08000ec1 	.word	0x08000ec1
 8000c8c:	08000ec1 	.word	0x08000ec1
 8000c90:	08000ec1 	.word	0x08000ec1
 8000c94:	08000ec1 	.word	0x08000ec1
 8000c98:	08000e1d 	.word	0x08000e1d
 8000c9c:	08000ec1 	.word	0x08000ec1
 8000ca0:	08000ec1 	.word	0x08000ec1
 8000ca4:	08000ec1 	.word	0x08000ec1
 8000ca8:	08000ec1 	.word	0x08000ec1
 8000cac:	08000ec1 	.word	0x08000ec1
 8000cb0:	08000ec1 	.word	0x08000ec1
 8000cb4:	08000ec1 	.word	0x08000ec1
 8000cb8:	08000ec1 	.word	0x08000ec1
 8000cbc:	08000d79 	.word	0x08000d79
 8000cc0:	08000ec1 	.word	0x08000ec1
 8000cc4:	08000ec1 	.word	0x08000ec1
 8000cc8:	08000ec1 	.word	0x08000ec1
 8000ccc:	08000ec1 	.word	0x08000ec1
 8000cd0:	08000ec1 	.word	0x08000ec1
		case 't':
			// Type
			break;
		case 'a':
			// Amplitude (peak-to-peak)
			msg[4] = 'a';
 8000cd4:	2361      	movs	r3, #97	; 0x61
 8000cd6:	733b      	strb	r3, [r7, #12]
			msg[6] = ((amplitude/1000) % 10) + 48;
 8000cd8:	4b83      	ldr	r3, [pc, #524]	; (8000ee8 <request_measurement+0x28c>)
 8000cda:	881b      	ldrh	r3, [r3, #0]
 8000cdc:	4a83      	ldr	r2, [pc, #524]	; (8000eec <request_measurement+0x290>)
 8000cde:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce2:	099b      	lsrs	r3, r3, #6
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	4b82      	ldr	r3, [pc, #520]	; (8000ef0 <request_measurement+0x294>)
 8000ce8:	fba3 1302 	umull	r1, r3, r3, r2
 8000cec:	08d9      	lsrs	r1, r3, #3
 8000cee:	460b      	mov	r3, r1
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	1ad3      	subs	r3, r2, r3
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	3330      	adds	r3, #48	; 0x30
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	73bb      	strb	r3, [r7, #14]
			msg[7] = ((amplitude/100) % 10) + 48;
 8000d02:	4b79      	ldr	r3, [pc, #484]	; (8000ee8 <request_measurement+0x28c>)
 8000d04:	881b      	ldrh	r3, [r3, #0]
 8000d06:	4a7b      	ldr	r2, [pc, #492]	; (8000ef4 <request_measurement+0x298>)
 8000d08:	fba2 2303 	umull	r2, r3, r2, r3
 8000d0c:	095b      	lsrs	r3, r3, #5
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	4b77      	ldr	r3, [pc, #476]	; (8000ef0 <request_measurement+0x294>)
 8000d12:	fba3 1302 	umull	r1, r3, r3, r2
 8000d16:	08d9      	lsrs	r1, r3, #3
 8000d18:	460b      	mov	r3, r1
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	440b      	add	r3, r1
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	3330      	adds	r3, #48	; 0x30
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	73fb      	strb	r3, [r7, #15]
			msg[8] = ((amplitude/10) % 10) + 48;
 8000d2c:	4b6e      	ldr	r3, [pc, #440]	; (8000ee8 <request_measurement+0x28c>)
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	4a6f      	ldr	r2, [pc, #444]	; (8000ef0 <request_measurement+0x294>)
 8000d32:	fba2 2303 	umull	r2, r3, r2, r3
 8000d36:	08db      	lsrs	r3, r3, #3
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	4b6d      	ldr	r3, [pc, #436]	; (8000ef0 <request_measurement+0x294>)
 8000d3c:	fba3 1302 	umull	r1, r3, r3, r2
 8000d40:	08d9      	lsrs	r1, r3, #3
 8000d42:	460b      	mov	r3, r1
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	440b      	add	r3, r1
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	3330      	adds	r3, #48	; 0x30
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	743b      	strb	r3, [r7, #16]
			msg[9] = (amplitude % 10) + 48;
 8000d56:	4b64      	ldr	r3, [pc, #400]	; (8000ee8 <request_measurement+0x28c>)
 8000d58:	881a      	ldrh	r2, [r3, #0]
 8000d5a:	4b65      	ldr	r3, [pc, #404]	; (8000ef0 <request_measurement+0x294>)
 8000d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8000d60:	08d9      	lsrs	r1, r3, #3
 8000d62:	460b      	mov	r3, r1
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	440b      	add	r3, r1
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	3330      	adds	r3, #48	; 0x30
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	747b      	strb	r3, [r7, #17]
			break;
 8000d76:	e0a4      	b.n	8000ec2 <request_measurement+0x266>
		case 'o':
			// Offset
			msg[4] = 'o';
 8000d78:	236f      	movs	r3, #111	; 0x6f
 8000d7a:	733b      	strb	r3, [r7, #12]
			msg[6] = ((offset/1000) % 10) + 48;
 8000d7c:	4b5e      	ldr	r3, [pc, #376]	; (8000ef8 <request_measurement+0x29c>)
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	4a5a      	ldr	r2, [pc, #360]	; (8000eec <request_measurement+0x290>)
 8000d82:	fba2 2303 	umull	r2, r3, r2, r3
 8000d86:	099b      	lsrs	r3, r3, #6
 8000d88:	b29a      	uxth	r2, r3
 8000d8a:	4b59      	ldr	r3, [pc, #356]	; (8000ef0 <request_measurement+0x294>)
 8000d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8000d90:	08d9      	lsrs	r1, r3, #3
 8000d92:	460b      	mov	r3, r1
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	440b      	add	r3, r1
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	3330      	adds	r3, #48	; 0x30
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	73bb      	strb	r3, [r7, #14]
			msg[7] = ((offset/100) % 10) + 48;
 8000da6:	4b54      	ldr	r3, [pc, #336]	; (8000ef8 <request_measurement+0x29c>)
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	4a52      	ldr	r2, [pc, #328]	; (8000ef4 <request_measurement+0x298>)
 8000dac:	fba2 2303 	umull	r2, r3, r2, r3
 8000db0:	095b      	lsrs	r3, r3, #5
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	4b4e      	ldr	r3, [pc, #312]	; (8000ef0 <request_measurement+0x294>)
 8000db6:	fba3 1302 	umull	r1, r3, r3, r2
 8000dba:	08d9      	lsrs	r1, r3, #3
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	440b      	add	r3, r1
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	3330      	adds	r3, #48	; 0x30
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	73fb      	strb	r3, [r7, #15]
			msg[8] = ((offset/10) % 10) + 48;
 8000dd0:	4b49      	ldr	r3, [pc, #292]	; (8000ef8 <request_measurement+0x29c>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	4a46      	ldr	r2, [pc, #280]	; (8000ef0 <request_measurement+0x294>)
 8000dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dda:	08db      	lsrs	r3, r3, #3
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	4b44      	ldr	r3, [pc, #272]	; (8000ef0 <request_measurement+0x294>)
 8000de0:	fba3 1302 	umull	r1, r3, r3, r2
 8000de4:	08d9      	lsrs	r1, r3, #3
 8000de6:	460b      	mov	r3, r1
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	440b      	add	r3, r1
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	3330      	adds	r3, #48	; 0x30
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	743b      	strb	r3, [r7, #16]
			msg[9] = (offset % 10) + 48;
 8000dfa:	4b3f      	ldr	r3, [pc, #252]	; (8000ef8 <request_measurement+0x29c>)
 8000dfc:	881a      	ldrh	r2, [r3, #0]
 8000dfe:	4b3c      	ldr	r3, [pc, #240]	; (8000ef0 <request_measurement+0x294>)
 8000e00:	fba3 1302 	umull	r1, r3, r3, r2
 8000e04:	08d9      	lsrs	r1, r3, #3
 8000e06:	460b      	mov	r3, r1
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	440b      	add	r3, r1
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	3330      	adds	r3, #48	; 0x30
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	747b      	strb	r3, [r7, #17]
			break;
 8000e1a:	e052      	b.n	8000ec2 <request_measurement+0x266>
		case 'f':
			// Frequency
			msg[4] = 'f';
 8000e1c:	2366      	movs	r3, #102	; 0x66
 8000e1e:	733b      	strb	r3, [r7, #12]
			msg[6] = ((frequency/1000) % 10) + 48;
 8000e20:	4b36      	ldr	r3, [pc, #216]	; (8000efc <request_measurement+0x2a0>)
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	4a31      	ldr	r2, [pc, #196]	; (8000eec <request_measurement+0x290>)
 8000e26:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2a:	099b      	lsrs	r3, r3, #6
 8000e2c:	b29a      	uxth	r2, r3
 8000e2e:	4b30      	ldr	r3, [pc, #192]	; (8000ef0 <request_measurement+0x294>)
 8000e30:	fba3 1302 	umull	r1, r3, r3, r2
 8000e34:	08d9      	lsrs	r1, r3, #3
 8000e36:	460b      	mov	r3, r1
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	3330      	adds	r3, #48	; 0x30
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	73bb      	strb	r3, [r7, #14]
			msg[7] = ((frequency/100) % 10) + 48;
 8000e4a:	4b2c      	ldr	r3, [pc, #176]	; (8000efc <request_measurement+0x2a0>)
 8000e4c:	881b      	ldrh	r3, [r3, #0]
 8000e4e:	4a29      	ldr	r2, [pc, #164]	; (8000ef4 <request_measurement+0x298>)
 8000e50:	fba2 2303 	umull	r2, r3, r2, r3
 8000e54:	095b      	lsrs	r3, r3, #5
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	4b25      	ldr	r3, [pc, #148]	; (8000ef0 <request_measurement+0x294>)
 8000e5a:	fba3 1302 	umull	r1, r3, r3, r2
 8000e5e:	08d9      	lsrs	r1, r3, #3
 8000e60:	460b      	mov	r3, r1
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	440b      	add	r3, r1
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	3330      	adds	r3, #48	; 0x30
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	73fb      	strb	r3, [r7, #15]
			msg[8] = ((frequency/10) % 10) + 48;
 8000e74:	4b21      	ldr	r3, [pc, #132]	; (8000efc <request_measurement+0x2a0>)
 8000e76:	881b      	ldrh	r3, [r3, #0]
 8000e78:	4a1d      	ldr	r2, [pc, #116]	; (8000ef0 <request_measurement+0x294>)
 8000e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e7e:	08db      	lsrs	r3, r3, #3
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <request_measurement+0x294>)
 8000e84:	fba3 1302 	umull	r1, r3, r3, r2
 8000e88:	08d9      	lsrs	r1, r3, #3
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	440b      	add	r3, r1
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	3330      	adds	r3, #48	; 0x30
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	743b      	strb	r3, [r7, #16]
			msg[9] = (frequency % 10) + 48;
 8000e9e:	4b17      	ldr	r3, [pc, #92]	; (8000efc <request_measurement+0x2a0>)
 8000ea0:	881a      	ldrh	r2, [r3, #0]
 8000ea2:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <request_measurement+0x294>)
 8000ea4:	fba3 1302 	umull	r1, r3, r3, r2
 8000ea8:	08d9      	lsrs	r1, r3, #3
 8000eaa:	460b      	mov	r3, r1
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	440b      	add	r3, r1
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	3330      	adds	r3, #48	; 0x30
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	747b      	strb	r3, [r7, #17]
			break;
 8000ebe:	e000      	b.n	8000ec2 <request_measurement+0x266>
		case 'c':
			// Temperature
			break;
		default:
			// Problems
			break;
 8000ec0:	bf00      	nop
	}
	HAL_UART_Transmit(&huart2, msg, 13, 10);
 8000ec2:	f107 0108 	add.w	r1, r7, #8
 8000ec6:	230a      	movs	r3, #10
 8000ec8:	220d      	movs	r2, #13
 8000eca:	480d      	ldr	r0, [pc, #52]	; (8000f00 <request_measurement+0x2a4>)
 8000ecc:	f003 fe10 	bl	8004af0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	490c      	ldr	r1, [pc, #48]	; (8000f04 <request_measurement+0x2a8>)
 8000ed4:	480a      	ldr	r0, [pc, #40]	; (8000f00 <request_measurement+0x2a4>)
 8000ed6:	f003 fe9f 	bl	8004c18 <HAL_UART_Receive_IT>
}
 8000eda:	bf00      	nop
 8000edc:	371c      	adds	r7, #28
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd90      	pop	{r4, r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	08005f98 	.word	0x08005f98
 8000ee8:	20000044 	.word	0x20000044
 8000eec:	10624dd3 	.word	0x10624dd3
 8000ef0:	cccccccd 	.word	0xcccccccd
 8000ef4:	51eb851f 	.word	0x51eb851f
 8000ef8:	2000004a 	.word	0x2000004a
 8000efc:	20000046 	.word	0x20000046
 8000f00:	200000a4 	.word	0x200000a4
 8000f04:	200000a0 	.word	0x200000a0

08000f08 <request_status>:

void request_status()
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
	uint8_t msg[11] = "@,xx,x,x,!\n";
 8000f0e:	4a30      	ldr	r2, [pc, #192]	; (8000fd0 <request_status+0xc8>)
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f14:	c303      	stmia	r3!, {r0, r1}
 8000f16:	801a      	strh	r2, [r3, #0]
 8000f18:	3302      	adds	r3, #2
 8000f1a:	0c12      	lsrs	r2, r2, #16
 8000f1c:	701a      	strb	r2, [r3, #0]
	switch(measurement_mode){
 8000f1e:	4b2d      	ldr	r3, [pc, #180]	; (8000fd4 <request_status+0xcc>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b04      	cmp	r3, #4
 8000f24:	d825      	bhi.n	8000f72 <request_status+0x6a>
 8000f26:	a201      	add	r2, pc, #4	; (adr r2, 8000f2c <request_status+0x24>)
 8000f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f2c:	08000f41 	.word	0x08000f41
 8000f30:	08000f4b 	.word	0x08000f4b
 8000f34:	08000f55 	.word	0x08000f55
 8000f38:	08000f5f 	.word	0x08000f5f
 8000f3c:	08000f69 	.word	0x08000f69
		case 0:
			// DV
			msg[2] = 'D';
 8000f40:	2344      	movs	r3, #68	; 0x44
 8000f42:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'V';
 8000f44:	2356      	movs	r3, #86	; 0x56
 8000f46:	71fb      	strb	r3, [r7, #7]
			break;
 8000f48:	e014      	b.n	8000f74 <request_status+0x6c>
		case 1:
			// AV
			msg[2] = 'A';
 8000f4a:	2341      	movs	r3, #65	; 0x41
 8000f4c:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'V';
 8000f4e:	2356      	movs	r3, #86	; 0x56
 8000f50:	71fb      	strb	r3, [r7, #7]
			break;
 8000f52:	e00f      	b.n	8000f74 <request_status+0x6c>
		case 2:
			// DI
			msg[2] = 'D';
 8000f54:	2344      	movs	r3, #68	; 0x44
 8000f56:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'I';
 8000f58:	2349      	movs	r3, #73	; 0x49
 8000f5a:	71fb      	strb	r3, [r7, #7]
			break;
 8000f5c:	e00a      	b.n	8000f74 <request_status+0x6c>
		case 3:
			// AI
			msg[2] = 'A';
 8000f5e:	2341      	movs	r3, #65	; 0x41
 8000f60:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'I';
 8000f62:	2349      	movs	r3, #73	; 0x49
 8000f64:	71fb      	strb	r3, [r7, #7]
			break;
 8000f66:	e005      	b.n	8000f74 <request_status+0x6c>
		case 4:
			// TC
			msg[2] = 'T';
 8000f68:	2354      	movs	r3, #84	; 0x54
 8000f6a:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'C';
 8000f6c:	2343      	movs	r3, #67	; 0x43
 8000f6e:	71fb      	strb	r3, [r7, #7]
			break;
 8000f70:	e000      	b.n	8000f74 <request_status+0x6c>
		default:
			// Problems
			break;
 8000f72:	bf00      	nop
	}
	switch(signal_mode){
 8000f74:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <request_status+0xd0>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d007      	beq.n	8000f8c <request_status+0x84>
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d008      	beq.n	8000f92 <request_status+0x8a>
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d000      	beq.n	8000f86 <request_status+0x7e>
			// Pulse
			msg[5] = 'p';
			break;
		default:
			// Problems
			break;
 8000f84:	e008      	b.n	8000f98 <request_status+0x90>
			msg[5] = 'd';
 8000f86:	2364      	movs	r3, #100	; 0x64
 8000f88:	727b      	strb	r3, [r7, #9]
			break;
 8000f8a:	e005      	b.n	8000f98 <request_status+0x90>
			msg[5] = 's';
 8000f8c:	2373      	movs	r3, #115	; 0x73
 8000f8e:	727b      	strb	r3, [r7, #9]
			break;
 8000f90:	e002      	b.n	8000f98 <request_status+0x90>
			msg[5] = 'p';
 8000f92:	2370      	movs	r3, #112	; 0x70
 8000f94:	727b      	strb	r3, [r7, #9]
			break;
 8000f96:	bf00      	nop
	}
	switch(signal_active){
 8000f98:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <request_status+0xd4>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d002      	beq.n	8000fa6 <request_status+0x9e>
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d003      	beq.n	8000fac <request_status+0xa4>
			// Output on
			msg[7] = '1';
			break;
		default:
			// Problems
			break;
 8000fa4:	e005      	b.n	8000fb2 <request_status+0xaa>
			msg[7] = '0';
 8000fa6:	2330      	movs	r3, #48	; 0x30
 8000fa8:	72fb      	strb	r3, [r7, #11]
			break;
 8000faa:	e002      	b.n	8000fb2 <request_status+0xaa>
			msg[7] = '1';
 8000fac:	2331      	movs	r3, #49	; 0x31
 8000fae:	72fb      	strb	r3, [r7, #11]
			break;
 8000fb0:	bf00      	nop
	}
	HAL_UART_Transmit(&huart2, msg, 11, 10);
 8000fb2:	1d39      	adds	r1, r7, #4
 8000fb4:	230a      	movs	r3, #10
 8000fb6:	220b      	movs	r2, #11
 8000fb8:	4809      	ldr	r0, [pc, #36]	; (8000fe0 <request_status+0xd8>)
 8000fba:	f003 fd99 	bl	8004af0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	4908      	ldr	r1, [pc, #32]	; (8000fe4 <request_status+0xdc>)
 8000fc2:	4807      	ldr	r0, [pc, #28]	; (8000fe0 <request_status+0xd8>)
 8000fc4:	f003 fe28 	bl	8004c18 <HAL_UART_Receive_IT>

}
 8000fc8:	bf00      	nop
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	08005fa8 	.word	0x08005fa8
 8000fd4:	2000004c 	.word	0x2000004c
 8000fd8:	2000004d 	.word	0x2000004d
 8000fdc:	2000004e 	.word	0x2000004e
 8000fe0:	200000a4 	.word	0x200000a4
 8000fe4:	200000a0 	.word	0x200000a0

08000fe8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
	...

08000ff8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffe:	4b0f      	ldr	r3, [pc, #60]	; (800103c <HAL_MspInit+0x44>)
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	4a0e      	ldr	r2, [pc, #56]	; (800103c <HAL_MspInit+0x44>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6193      	str	r3, [r2, #24]
 800100a:	4b0c      	ldr	r3, [pc, #48]	; (800103c <HAL_MspInit+0x44>)
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <HAL_MspInit+0x44>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	4a08      	ldr	r2, [pc, #32]	; (800103c <HAL_MspInit+0x44>)
 800101c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001020:	61d3      	str	r3, [r2, #28]
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_MspInit+0x44>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102a:	603b      	str	r3, [r7, #0]
 800102c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800102e:	2007      	movs	r0, #7
 8001030:	f001 fc36 	bl	80028a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40021000 	.word	0x40021000

08001040 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001060:	d124      	bne.n	80010ac <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <HAL_ADC_MspInit+0x74>)
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	4a13      	ldr	r2, [pc, #76]	; (80010b4 <HAL_ADC_MspInit+0x74>)
 8001068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800106c:	6153      	str	r3, [r2, #20]
 800106e:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <HAL_ADC_MspInit+0x74>)
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <HAL_ADC_MspInit+0x74>)
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	4a0d      	ldr	r2, [pc, #52]	; (80010b4 <HAL_ADC_MspInit+0x74>)
 8001080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001084:	6153      	str	r3, [r2, #20]
 8001086:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <HAL_ADC_MspInit+0x74>)
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001092:	2301      	movs	r3, #1
 8001094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001096:	2303      	movs	r3, #3
 8001098:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	4619      	mov	r1, r3
 80010a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a8:	f001 fcb2 	bl	8002a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010ac:	bf00      	nop
 80010ae:	3728      	adds	r7, #40	; 0x28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40021000 	.word	0x40021000

080010b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a0d      	ldr	r2, [pc, #52]	; (80010fc <HAL_TIM_Base_MspInit+0x44>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d113      	bne.n	80010f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <HAL_TIM_Base_MspInit+0x48>)
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	4a0c      	ldr	r2, [pc, #48]	; (8001100 <HAL_TIM_Base_MspInit+0x48>)
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d4:	6193      	str	r3, [r2, #24]
 80010d6:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <HAL_TIM_Base_MspInit+0x48>)
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2100      	movs	r1, #0
 80010e6:	2019      	movs	r0, #25
 80010e8:	f001 fbe5 	bl	80028b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80010ec:	2019      	movs	r0, #25
 80010ee:	f001 fbfe 	bl	80028ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40014400 	.word	0x40014400
 8001100:	40021000 	.word	0x40021000

08001104 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a1b      	ldr	r2, [pc, #108]	; (8001190 <HAL_UART_MspInit+0x8c>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d130      	bne.n	8001188 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001126:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <HAL_UART_MspInit+0x90>)
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	4a1a      	ldr	r2, [pc, #104]	; (8001194 <HAL_UART_MspInit+0x90>)
 800112c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001130:	61d3      	str	r3, [r2, #28]
 8001132:	4b18      	ldr	r3, [pc, #96]	; (8001194 <HAL_UART_MspInit+0x90>)
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <HAL_UART_MspInit+0x90>)
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	4a14      	ldr	r2, [pc, #80]	; (8001194 <HAL_UART_MspInit+0x90>)
 8001144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001148:	6153      	str	r3, [r2, #20]
 800114a:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_UART_MspInit+0x90>)
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001156:	230c      	movs	r3, #12
 8001158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2300      	movs	r3, #0
 8001164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001166:	2307      	movs	r3, #7
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001174:	f001 fc4c 	bl	8002a10 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2100      	movs	r1, #0
 800117c:	2026      	movs	r0, #38	; 0x26
 800117e:	f001 fb9a 	bl	80028b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001182:	2026      	movs	r0, #38	; 0x26
 8001184:	f001 fbb3 	bl	80028ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001188:	bf00      	nop
 800118a:	3728      	adds	r7, #40	; 0x28
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40004400 	.word	0x40004400
 8001194:	40021000 	.word	0x40021000

08001198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011aa:	e7fe      	b.n	80011aa <HardFault_Handler+0x4>

080011ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <MemManage_Handler+0x4>

080011b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011b6:	e7fe      	b.n	80011b6 <BusFault_Handler+0x4>

080011b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <UsageFault_Handler+0x4>

080011be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ec:	f000 f8b6 	bl	800135c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80011f8:	2040      	movs	r0, #64	; 0x40
 80011fa:	f001 fddd 	bl	8002db8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80011fe:	2080      	movs	r0, #128	; 0x80
 8001200:	f001 fdda 	bl	8002db8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001204:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001208:	f001 fdd6 	bl	8002db8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800120c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001210:	f001 fdd2 	bl	8002db8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}

08001218 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800121c:	4802      	ldr	r0, [pc, #8]	; (8001228 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800121e:	f003 fa15 	bl	800464c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000128 	.word	0x20000128

0800122c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001230:	4802      	ldr	r0, [pc, #8]	; (800123c <USART2_IRQHandler+0x10>)
 8001232:	f003 fd3f 	bl	8004cb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200000a4 	.word	0x200000a4

08001240 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001244:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001248:	f001 fdb6 	bl	8002db8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800124c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001250:	f001 fdb2 	bl	8002db8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}

08001258 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <SystemInit+0x20>)
 800125e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001262:	4a05      	ldr	r2, [pc, #20]	; (8001278 <SystemInit+0x20>)
 8001264:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001268:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800127c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012b4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001280:	480d      	ldr	r0, [pc, #52]	; (80012b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001282:	490e      	ldr	r1, [pc, #56]	; (80012bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001284:	4a0e      	ldr	r2, [pc, #56]	; (80012c0 <LoopForever+0xe>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001288:	e002      	b.n	8001290 <LoopCopyDataInit>

0800128a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800128c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128e:	3304      	adds	r3, #4

08001290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001294:	d3f9      	bcc.n	800128a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001296:	4a0b      	ldr	r2, [pc, #44]	; (80012c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001298:	4c0b      	ldr	r4, [pc, #44]	; (80012c8 <LoopForever+0x16>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800129c:	e001      	b.n	80012a2 <LoopFillZerobss>

0800129e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a0:	3204      	adds	r2, #4

080012a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a4:	d3fb      	bcc.n	800129e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012a6:	f7ff ffd7 	bl	8001258 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012aa:	f004 fe3d 	bl	8005f28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012ae:	f7fe ffe1 	bl	8000274 <main>

080012b2 <LoopForever>:

LoopForever:
    b LoopForever
 80012b2:	e7fe      	b.n	80012b2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012b4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80012b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012bc:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80012c0:	08005ff4 	.word	0x08005ff4
  ldr r2, =_sbss
 80012c4:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80012c8:	20000178 	.word	0x20000178

080012cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012cc:	e7fe      	b.n	80012cc <ADC1_2_IRQHandler>
	...

080012d0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <HAL_Init+0x28>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a07      	ldr	r2, [pc, #28]	; (80012f8 <HAL_Init+0x28>)
 80012da:	f043 0310 	orr.w	r3, r3, #16
 80012de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e0:	2003      	movs	r0, #3
 80012e2:	f001 fadd 	bl	80028a0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012e6:	2000      	movs	r0, #0
 80012e8:	f000 f808 	bl	80012fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012ec:	f7ff fe84 	bl	8000ff8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40022000 	.word	0x40022000

080012fc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <HAL_InitTick+0x54>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <HAL_InitTick+0x58>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	4619      	mov	r1, r3
 800130e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001312:	fbb3 f3f1 	udiv	r3, r3, r1
 8001316:	fbb2 f3f3 	udiv	r3, r2, r3
 800131a:	4618      	mov	r0, r3
 800131c:	f001 faf5 	bl	800290a <HAL_SYSTICK_Config>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e00e      	b.n	8001348 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b0f      	cmp	r3, #15
 800132e:	d80a      	bhi.n	8001346 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001330:	2200      	movs	r2, #0
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	f04f 30ff 	mov.w	r0, #4294967295
 8001338:	f001 fabd 	bl	80028b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800133c:	4a06      	ldr	r2, [pc, #24]	; (8001358 <HAL_InitTick+0x5c>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001342:	2300      	movs	r3, #0
 8001344:	e000      	b.n	8001348 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
}
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000010 	.word	0x20000010
 8001354:	20000018 	.word	0x20000018
 8001358:	20000014 	.word	0x20000014

0800135c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_IncTick+0x20>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	461a      	mov	r2, r3
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_IncTick+0x24>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4413      	add	r3, r2
 800136c:	4a04      	ldr	r2, [pc, #16]	; (8001380 <HAL_IncTick+0x24>)
 800136e:	6013      	str	r3, [r2, #0]
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	20000018 	.word	0x20000018
 8001380:	20000174 	.word	0x20000174

08001384 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return uwTick;  
 8001388:	4b03      	ldr	r3, [pc, #12]	; (8001398 <HAL_GetTick+0x14>)
 800138a:	681b      	ldr	r3, [r3, #0]
}
 800138c:	4618      	mov	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	20000174 	.word	0x20000174

0800139c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b09a      	sub	sp, #104	; 0x68
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d101      	bne.n	80013bc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e1e3      	b.n	8001784 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	f003 0310 	and.w	r3, r3, #16
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d176      	bne.n	80014bc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d152      	bne.n	800147c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff fe25 	bl	8001040 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d13b      	bne.n	800147c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f001 f861 	bl	80024cc <ADC_Disable>
 800140a:	4603      	mov	r3, r0
 800140c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	f003 0310 	and.w	r3, r3, #16
 8001418:	2b00      	cmp	r3, #0
 800141a:	d12f      	bne.n	800147c <HAL_ADC_Init+0xe0>
 800141c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001420:	2b00      	cmp	r3, #0
 8001422:	d12b      	bne.n	800147c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001428:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800142c:	f023 0302 	bic.w	r3, r3, #2
 8001430:	f043 0202 	orr.w	r2, r3, #2
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001446:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001456:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001458:	4b92      	ldr	r3, [pc, #584]	; (80016a4 <HAL_ADC_Init+0x308>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a92      	ldr	r2, [pc, #584]	; (80016a8 <HAL_ADC_Init+0x30c>)
 800145e:	fba2 2303 	umull	r2, r3, r2, r3
 8001462:	0c9a      	lsrs	r2, r3, #18
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800146e:	e002      	b.n	8001476 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	3b01      	subs	r3, #1
 8001474:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1f9      	bne.n	8001470 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d007      	beq.n	800149a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001494:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001498:	d110      	bne.n	80014bc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f023 0312 	bic.w	r3, r3, #18
 80014a2:	f043 0210 	orr.w	r2, r3, #16
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ae:	f043 0201 	orr.w	r2, r3, #1
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c0:	f003 0310 	and.w	r3, r3, #16
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f040 8150 	bne.w	800176a <HAL_ADC_Init+0x3ce>
 80014ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f040 814b 	bne.w	800176a <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f040 8143 	bne.w	800176a <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80014ec:	f043 0202 	orr.w	r2, r3, #2
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014fc:	d004      	beq.n	8001508 <HAL_ADC_Init+0x16c>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a6a      	ldr	r2, [pc, #424]	; (80016ac <HAL_ADC_Init+0x310>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d101      	bne.n	800150c <HAL_ADC_Init+0x170>
 8001508:	4b69      	ldr	r3, [pc, #420]	; (80016b0 <HAL_ADC_Init+0x314>)
 800150a:	e000      	b.n	800150e <HAL_ADC_Init+0x172>
 800150c:	4b69      	ldr	r3, [pc, #420]	; (80016b4 <HAL_ADC_Init+0x318>)
 800150e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001518:	d102      	bne.n	8001520 <HAL_ADC_Init+0x184>
 800151a:	4b64      	ldr	r3, [pc, #400]	; (80016ac <HAL_ADC_Init+0x310>)
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	e01a      	b.n	8001556 <HAL_ADC_Init+0x1ba>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a61      	ldr	r2, [pc, #388]	; (80016ac <HAL_ADC_Init+0x310>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d103      	bne.n	8001532 <HAL_ADC_Init+0x196>
 800152a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	e011      	b.n	8001556 <HAL_ADC_Init+0x1ba>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a60      	ldr	r2, [pc, #384]	; (80016b8 <HAL_ADC_Init+0x31c>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d102      	bne.n	8001542 <HAL_ADC_Init+0x1a6>
 800153c:	4b5f      	ldr	r3, [pc, #380]	; (80016bc <HAL_ADC_Init+0x320>)
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	e009      	b.n	8001556 <HAL_ADC_Init+0x1ba>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a5d      	ldr	r2, [pc, #372]	; (80016bc <HAL_ADC_Init+0x320>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d102      	bne.n	8001552 <HAL_ADC_Init+0x1b6>
 800154c:	4b5a      	ldr	r3, [pc, #360]	; (80016b8 <HAL_ADC_Init+0x31c>)
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	e001      	b.n	8001556 <HAL_ADC_Init+0x1ba>
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	2b01      	cmp	r3, #1
 8001562:	d108      	bne.n	8001576 <HAL_ADC_Init+0x1da>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b01      	cmp	r3, #1
 8001570:	d101      	bne.n	8001576 <HAL_ADC_Init+0x1da>
 8001572:	2301      	movs	r3, #1
 8001574:	e000      	b.n	8001578 <HAL_ADC_Init+0x1dc>
 8001576:	2300      	movs	r3, #0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d11c      	bne.n	80015b6 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800157c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800157e:	2b00      	cmp	r3, #0
 8001580:	d010      	beq.n	80015a4 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	2b01      	cmp	r3, #1
 800158c:	d107      	bne.n	800159e <HAL_ADC_Init+0x202>
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b01      	cmp	r3, #1
 8001598:	d101      	bne.n	800159e <HAL_ADC_Init+0x202>
 800159a:	2301      	movs	r3, #1
 800159c:	e000      	b.n	80015a0 <HAL_ADC_Init+0x204>
 800159e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d108      	bne.n	80015b6 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80015a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	431a      	orrs	r2, r3
 80015b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015b4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	7e5b      	ldrb	r3, [r3, #25]
 80015ba:	035b      	lsls	r3, r3, #13
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015c0:	2a01      	cmp	r2, #1
 80015c2:	d002      	beq.n	80015ca <HAL_ADC_Init+0x22e>
 80015c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015c8:	e000      	b.n	80015cc <HAL_ADC_Init+0x230>
 80015ca:	2200      	movs	r2, #0
 80015cc:	431a      	orrs	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	4313      	orrs	r3, r2
 80015da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015dc:	4313      	orrs	r3, r2
 80015de:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d11b      	bne.n	8001622 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	7e5b      	ldrb	r3, [r3, #25]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d109      	bne.n	8001606 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f6:	3b01      	subs	r3, #1
 80015f8:	045a      	lsls	r2, r3, #17
 80015fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015fc:	4313      	orrs	r3, r2
 80015fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001602:	663b      	str	r3, [r7, #96]	; 0x60
 8001604:	e00d      	b.n	8001622 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800160e:	f043 0220 	orr.w	r2, r3, #32
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	f043 0201 	orr.w	r2, r3, #1
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001626:	2b01      	cmp	r3, #1
 8001628:	d054      	beq.n	80016d4 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a22      	ldr	r2, [pc, #136]	; (80016b8 <HAL_ADC_Init+0x31c>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d004      	beq.n	800163e <HAL_ADC_Init+0x2a2>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a20      	ldr	r2, [pc, #128]	; (80016bc <HAL_ADC_Init+0x320>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d140      	bne.n	80016c0 <HAL_ADC_Init+0x324>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001642:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001646:	d02a      	beq.n	800169e <HAL_ADC_Init+0x302>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001650:	d022      	beq.n	8001698 <HAL_ADC_Init+0x2fc>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001656:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800165a:	d01a      	beq.n	8001692 <HAL_ADC_Init+0x2f6>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001660:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8001664:	d012      	beq.n	800168c <HAL_ADC_Init+0x2f0>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166a:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 800166e:	d00a      	beq.n	8001686 <HAL_ADC_Init+0x2ea>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001674:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8001678:	d002      	beq.n	8001680 <HAL_ADC_Init+0x2e4>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167e:	e023      	b.n	80016c8 <HAL_ADC_Init+0x32c>
 8001680:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001684:	e020      	b.n	80016c8 <HAL_ADC_Init+0x32c>
 8001686:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800168a:	e01d      	b.n	80016c8 <HAL_ADC_Init+0x32c>
 800168c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001690:	e01a      	b.n	80016c8 <HAL_ADC_Init+0x32c>
 8001692:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001696:	e017      	b.n	80016c8 <HAL_ADC_Init+0x32c>
 8001698:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800169c:	e014      	b.n	80016c8 <HAL_ADC_Init+0x32c>
 800169e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80016a2:	e011      	b.n	80016c8 <HAL_ADC_Init+0x32c>
 80016a4:	20000010 	.word	0x20000010
 80016a8:	431bde83 	.word	0x431bde83
 80016ac:	50000100 	.word	0x50000100
 80016b0:	50000300 	.word	0x50000300
 80016b4:	50000700 	.word	0x50000700
 80016b8:	50000400 	.word	0x50000400
 80016bc:	50000500 	.word	0x50000500
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80016cc:	4313      	orrs	r3, r2
 80016ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016d0:	4313      	orrs	r3, r2
 80016d2:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 030c 	and.w	r3, r3, #12
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d114      	bne.n	800170c <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	6812      	ldr	r2, [r2, #0]
 80016ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016f0:	f023 0302 	bic.w	r3, r3, #2
 80016f4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	7e1b      	ldrb	r3, [r3, #24]
 80016fa:	039a      	lsls	r2, r3, #14
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	4313      	orrs	r3, r2
 8001706:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001708:	4313      	orrs	r3, r2
 800170a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	68da      	ldr	r2, [r3, #12]
 8001712:	4b1e      	ldr	r3, [pc, #120]	; (800178c <HAL_ADC_Init+0x3f0>)
 8001714:	4013      	ands	r3, r2
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6812      	ldr	r2, [r2, #0]
 800171a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800171c:	430b      	orrs	r3, r1
 800171e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d10c      	bne.n	8001742 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f023 010f 	bic.w	r1, r3, #15
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	1e5a      	subs	r2, r3, #1
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	430a      	orrs	r2, r1
 800173e:	631a      	str	r2, [r3, #48]	; 0x30
 8001740:	e007      	b.n	8001752 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 020f 	bic.w	r2, r2, #15
 8001750:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	f023 0303 	bic.w	r3, r3, #3
 8001760:	f043 0201 	orr.w	r2, r3, #1
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	641a      	str	r2, [r3, #64]	; 0x40
 8001768:	e00a      	b.n	8001780 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	f023 0312 	bic.w	r3, r3, #18
 8001772:	f043 0210 	orr.w	r2, r3, #16
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800177a:	2301      	movs	r3, #1
 800177c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001780:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001784:	4618      	mov	r0, r3
 8001786:	3768      	adds	r7, #104	; 0x68
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	fff0c007 	.word	0xfff0c007

08001790 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001798:	2300      	movs	r3, #0
 800179a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f003 0304 	and.w	r3, r3, #4
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f040 80f9 	bne.w	800199e <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d101      	bne.n	80017ba <HAL_ADC_Start+0x2a>
 80017b6:	2302      	movs	r3, #2
 80017b8:	e0f4      	b.n	80019a4 <HAL_ADC_Start+0x214>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 fe1e 	bl	8002404 <ADC_Enable>
 80017c8:	4603      	mov	r3, r0
 80017ca:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f040 80e0 	bne.w	8001994 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017dc:	f023 0301 	bic.w	r3, r3, #1
 80017e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017f0:	d004      	beq.n	80017fc <HAL_ADC_Start+0x6c>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a6d      	ldr	r2, [pc, #436]	; (80019ac <HAL_ADC_Start+0x21c>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d106      	bne.n	800180a <HAL_ADC_Start+0x7a>
 80017fc:	4b6c      	ldr	r3, [pc, #432]	; (80019b0 <HAL_ADC_Start+0x220>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f003 031f 	and.w	r3, r3, #31
 8001804:	2b00      	cmp	r3, #0
 8001806:	d010      	beq.n	800182a <HAL_ADC_Start+0x9a>
 8001808:	e005      	b.n	8001816 <HAL_ADC_Start+0x86>
 800180a:	4b6a      	ldr	r3, [pc, #424]	; (80019b4 <HAL_ADC_Start+0x224>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 031f 	and.w	r3, r3, #31
 8001812:	2b00      	cmp	r3, #0
 8001814:	d009      	beq.n	800182a <HAL_ADC_Start+0x9a>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800181e:	d004      	beq.n	800182a <HAL_ADC_Start+0x9a>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a64      	ldr	r2, [pc, #400]	; (80019b8 <HAL_ADC_Start+0x228>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d115      	bne.n	8001856 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d036      	beq.n	80018b2 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800184c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001854:	e02d      	b.n	80018b2 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800186a:	d004      	beq.n	8001876 <HAL_ADC_Start+0xe6>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a4e      	ldr	r2, [pc, #312]	; (80019ac <HAL_ADC_Start+0x21c>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d10a      	bne.n	800188c <HAL_ADC_Start+0xfc>
 8001876:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001880:	2b00      	cmp	r3, #0
 8001882:	bf14      	ite	ne
 8001884:	2301      	movne	r3, #1
 8001886:	2300      	moveq	r3, #0
 8001888:	b2db      	uxtb	r3, r3
 800188a:	e008      	b.n	800189e <HAL_ADC_Start+0x10e>
 800188c:	4b4a      	ldr	r3, [pc, #296]	; (80019b8 <HAL_ADC_Start+0x228>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	bf14      	ite	ne
 8001898:	2301      	movne	r3, #1
 800189a:	2300      	moveq	r3, #0
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d007      	beq.n	80018b2 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018be:	d106      	bne.n	80018ce <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c4:	f023 0206 	bic.w	r2, r3, #6
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	645a      	str	r2, [r3, #68]	; 0x44
 80018cc:	e002      	b.n	80018d4 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	221c      	movs	r2, #28
 80018e2:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018ec:	d004      	beq.n	80018f8 <HAL_ADC_Start+0x168>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a2e      	ldr	r2, [pc, #184]	; (80019ac <HAL_ADC_Start+0x21c>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d106      	bne.n	8001906 <HAL_ADC_Start+0x176>
 80018f8:	4b2d      	ldr	r3, [pc, #180]	; (80019b0 <HAL_ADC_Start+0x220>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f003 031f 	and.w	r3, r3, #31
 8001900:	2b00      	cmp	r3, #0
 8001902:	d03e      	beq.n	8001982 <HAL_ADC_Start+0x1f2>
 8001904:	e005      	b.n	8001912 <HAL_ADC_Start+0x182>
 8001906:	4b2b      	ldr	r3, [pc, #172]	; (80019b4 <HAL_ADC_Start+0x224>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 031f 	and.w	r3, r3, #31
 800190e:	2b00      	cmp	r3, #0
 8001910:	d037      	beq.n	8001982 <HAL_ADC_Start+0x1f2>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800191a:	d004      	beq.n	8001926 <HAL_ADC_Start+0x196>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a22      	ldr	r2, [pc, #136]	; (80019ac <HAL_ADC_Start+0x21c>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d106      	bne.n	8001934 <HAL_ADC_Start+0x1a4>
 8001926:	4b22      	ldr	r3, [pc, #136]	; (80019b0 <HAL_ADC_Start+0x220>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 031f 	and.w	r3, r3, #31
 800192e:	2b05      	cmp	r3, #5
 8001930:	d027      	beq.n	8001982 <HAL_ADC_Start+0x1f2>
 8001932:	e005      	b.n	8001940 <HAL_ADC_Start+0x1b0>
 8001934:	4b1f      	ldr	r3, [pc, #124]	; (80019b4 <HAL_ADC_Start+0x224>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 031f 	and.w	r3, r3, #31
 800193c:	2b05      	cmp	r3, #5
 800193e:	d020      	beq.n	8001982 <HAL_ADC_Start+0x1f2>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001948:	d004      	beq.n	8001954 <HAL_ADC_Start+0x1c4>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a17      	ldr	r2, [pc, #92]	; (80019ac <HAL_ADC_Start+0x21c>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d106      	bne.n	8001962 <HAL_ADC_Start+0x1d2>
 8001954:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <HAL_ADC_Start+0x220>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 031f 	and.w	r3, r3, #31
 800195c:	2b09      	cmp	r3, #9
 800195e:	d010      	beq.n	8001982 <HAL_ADC_Start+0x1f2>
 8001960:	e005      	b.n	800196e <HAL_ADC_Start+0x1de>
 8001962:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <HAL_ADC_Start+0x224>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 031f 	and.w	r3, r3, #31
 800196a:	2b09      	cmp	r3, #9
 800196c:	d009      	beq.n	8001982 <HAL_ADC_Start+0x1f2>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001976:	d004      	beq.n	8001982 <HAL_ADC_Start+0x1f2>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0e      	ldr	r2, [pc, #56]	; (80019b8 <HAL_ADC_Start+0x228>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d10f      	bne.n	80019a2 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f042 0204 	orr.w	r2, r2, #4
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	e006      	b.n	80019a2 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800199c:	e001      	b.n	80019a2 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800199e:	2302      	movs	r3, #2
 80019a0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	50000100 	.word	0x50000100
 80019b0:	50000300 	.word	0x50000300
 80019b4:	50000700 	.word	0x50000700
 80019b8:	50000400 	.word	0x50000400

080019bc <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019c4:	2300      	movs	r3, #0
 80019c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d101      	bne.n	80019d6 <HAL_ADC_Stop+0x1a>
 80019d2:	2302      	movs	r3, #2
 80019d4:	e023      	b.n	8001a1e <HAL_ADC_Stop+0x62>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80019de:	216c      	movs	r1, #108	; 0x6c
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 fdd9 	bl	8002598 <ADC_ConversionStop>
 80019e6:	4603      	mov	r3, r0
 80019e8:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d111      	bne.n	8001a14 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 fd6b 	bl	80024cc <ADC_Disable>
 80019f6:	4603      	mov	r3, r0
 80019f8:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d109      	bne.n	8001a14 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a04:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a08:	f023 0301 	bic.w	r3, r3, #1
 8001a0c:	f043 0201 	orr.w	r2, r3, #1
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	2b08      	cmp	r3, #8
 8001a3c:	d102      	bne.n	8001a44 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001a3e:	2308      	movs	r3, #8
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	e03a      	b.n	8001aba <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a4c:	d004      	beq.n	8001a58 <HAL_ADC_PollForConversion+0x30>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a72      	ldr	r2, [pc, #456]	; (8001c1c <HAL_ADC_PollForConversion+0x1f4>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d101      	bne.n	8001a5c <HAL_ADC_PollForConversion+0x34>
 8001a58:	4b71      	ldr	r3, [pc, #452]	; (8001c20 <HAL_ADC_PollForConversion+0x1f8>)
 8001a5a:	e000      	b.n	8001a5e <HAL_ADC_PollForConversion+0x36>
 8001a5c:	4b71      	ldr	r3, [pc, #452]	; (8001c24 <HAL_ADC_PollForConversion+0x1fc>)
 8001a5e:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 031f 	and.w	r3, r3, #31
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d112      	bne.n	8001a92 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d11d      	bne.n	8001ab6 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f043 0220 	orr.w	r2, r3, #32
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e0bf      	b.n	8001c12 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d00b      	beq.n	8001ab6 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	f043 0220 	orr.w	r2, r3, #32
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e0ad      	b.n	8001c12 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001ab6:	230c      	movs	r3, #12
 8001ab8:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ac2:	d004      	beq.n	8001ace <HAL_ADC_PollForConversion+0xa6>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a54      	ldr	r2, [pc, #336]	; (8001c1c <HAL_ADC_PollForConversion+0x1f4>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d106      	bne.n	8001adc <HAL_ADC_PollForConversion+0xb4>
 8001ace:	4b54      	ldr	r3, [pc, #336]	; (8001c20 <HAL_ADC_PollForConversion+0x1f8>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 031f 	and.w	r3, r3, #31
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d010      	beq.n	8001afc <HAL_ADC_PollForConversion+0xd4>
 8001ada:	e005      	b.n	8001ae8 <HAL_ADC_PollForConversion+0xc0>
 8001adc:	4b51      	ldr	r3, [pc, #324]	; (8001c24 <HAL_ADC_PollForConversion+0x1fc>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 031f 	and.w	r3, r3, #31
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d009      	beq.n	8001afc <HAL_ADC_PollForConversion+0xd4>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001af0:	d004      	beq.n	8001afc <HAL_ADC_PollForConversion+0xd4>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a4c      	ldr	r2, [pc, #304]	; (8001c28 <HAL_ADC_PollForConversion+0x200>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d104      	bne.n	8001b06 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	e00f      	b.n	8001b26 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b0e:	d004      	beq.n	8001b1a <HAL_ADC_PollForConversion+0xf2>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a41      	ldr	r2, [pc, #260]	; (8001c1c <HAL_ADC_PollForConversion+0x1f4>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d102      	bne.n	8001b20 <HAL_ADC_PollForConversion+0xf8>
 8001b1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b1e:	e000      	b.n	8001b22 <HAL_ADC_PollForConversion+0xfa>
 8001b20:	4b41      	ldr	r3, [pc, #260]	; (8001c28 <HAL_ADC_PollForConversion+0x200>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001b26:	f7ff fc2d 	bl	8001384 <HAL_GetTick>
 8001b2a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001b2c:	e021      	b.n	8001b72 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b34:	d01d      	beq.n	8001b72 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d007      	beq.n	8001b4c <HAL_ADC_PollForConversion+0x124>
 8001b3c:	f7ff fc22 	bl	8001384 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d212      	bcs.n	8001b72 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	4013      	ands	r3, r2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10b      	bne.n	8001b72 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	f043 0204 	orr.w	r2, r3, #4
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e04f      	b.n	8001c12 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0d6      	beq.n	8001b2e <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b84:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d131      	bne.n	8001bfe <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d12c      	bne.n	8001bfe <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	d125      	bne.n	8001bfe <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d112      	bne.n	8001be6 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d112      	bne.n	8001bfe <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	f043 0201 	orr.w	r2, r3, #1
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	641a      	str	r2, [r3, #64]	; 0x40
 8001be4:	e00b      	b.n	8001bfe <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	f043 0220 	orr.w	r2, r3, #32
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	f043 0201 	orr.w	r2, r3, #1
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d103      	bne.n	8001c10 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	50000100 	.word	0x50000100
 8001c20:	50000300 	.word	0x50000300
 8001c24:	50000700 	.word	0x50000700
 8001c28:	50000400 	.word	0x50000400

08001c2c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b09b      	sub	sp, #108	; 0x6c
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d101      	bne.n	8001c6a <HAL_ADC_ConfigChannel+0x22>
 8001c66:	2302      	movs	r3, #2
 8001c68:	e2cb      	b.n	8002202 <HAL_ADC_ConfigChannel+0x5ba>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f040 82af 	bne.w	80021e0 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	d81c      	bhi.n	8001cc4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	4413      	add	r3, r2
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	231f      	movs	r3, #31
 8001ca0:	4093      	lsls	r3, r2
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	4019      	ands	r1, r3
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	6818      	ldr	r0, [r3, #0]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	4413      	add	r3, r2
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	fa00 f203 	lsl.w	r2, r0, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	631a      	str	r2, [r3, #48]	; 0x30
 8001cc2:	e063      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	2b09      	cmp	r3, #9
 8001cca:	d81e      	bhi.n	8001d0a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	4413      	add	r3, r2
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	3b1e      	subs	r3, #30
 8001ce0:	221f      	movs	r2, #31
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	4019      	ands	r1, r3
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	6818      	ldr	r0, [r3, #0]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	3b1e      	subs	r3, #30
 8001cfc:	fa00 f203 	lsl.w	r2, r0, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	635a      	str	r2, [r3, #52]	; 0x34
 8001d08:	e040      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b0e      	cmp	r3, #14
 8001d10:	d81e      	bhi.n	8001d50 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	4413      	add	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	3b3c      	subs	r3, #60	; 0x3c
 8001d26:	221f      	movs	r2, #31
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	4019      	ands	r1, r3
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	4413      	add	r3, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	3b3c      	subs	r3, #60	; 0x3c
 8001d42:	fa00 f203 	lsl.w	r2, r0, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	639a      	str	r2, [r3, #56]	; 0x38
 8001d4e:	e01d      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	4413      	add	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	3b5a      	subs	r3, #90	; 0x5a
 8001d64:	221f      	movs	r2, #31
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	4019      	ands	r1, r3
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	6818      	ldr	r0, [r3, #0]
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	4613      	mov	r3, r2
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	4413      	add	r3, r2
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	3b5a      	subs	r3, #90	; 0x5a
 8001d80:	fa00 f203 	lsl.w	r2, r0, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 030c 	and.w	r3, r3, #12
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f040 80e5 	bne.w	8001f66 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b09      	cmp	r3, #9
 8001da2:	d91c      	bls.n	8001dde <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6999      	ldr	r1, [r3, #24]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	4613      	mov	r3, r2
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	4413      	add	r3, r2
 8001db4:	3b1e      	subs	r3, #30
 8001db6:	2207      	movs	r2, #7
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	4019      	ands	r1, r3
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	6898      	ldr	r0, [r3, #8]
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4413      	add	r3, r2
 8001dce:	3b1e      	subs	r3, #30
 8001dd0:	fa00 f203 	lsl.w	r2, r0, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	619a      	str	r2, [r3, #24]
 8001ddc:	e019      	b.n	8001e12 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6959      	ldr	r1, [r3, #20]
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4613      	mov	r3, r2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	4413      	add	r3, r2
 8001dee:	2207      	movs	r2, #7
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	4019      	ands	r1, r3
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	6898      	ldr	r0, [r3, #8]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	4613      	mov	r3, r2
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	4413      	add	r3, r2
 8001e06:	fa00 f203 	lsl.w	r2, r0, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	695a      	ldr	r2, [r3, #20]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	08db      	lsrs	r3, r3, #3
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	2b03      	cmp	r3, #3
 8001e32:	d84f      	bhi.n	8001ed4 <HAL_ADC_ConfigChannel+0x28c>
 8001e34:	a201      	add	r2, pc, #4	; (adr r2, 8001e3c <HAL_ADC_ConfigChannel+0x1f4>)
 8001e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e3a:	bf00      	nop
 8001e3c:	08001e4d 	.word	0x08001e4d
 8001e40:	08001e6f 	.word	0x08001e6f
 8001e44:	08001e91 	.word	0x08001e91
 8001e48:	08001eb3 	.word	0x08001eb3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e52:	4b9f      	ldr	r3, [pc, #636]	; (80020d0 <HAL_ADC_ConfigChannel+0x488>)
 8001e54:	4013      	ands	r3, r2
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	6812      	ldr	r2, [r2, #0]
 8001e5a:	0691      	lsls	r1, r2, #26
 8001e5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	431a      	orrs	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e6a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e6c:	e07e      	b.n	8001f6c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e74:	4b96      	ldr	r3, [pc, #600]	; (80020d0 <HAL_ADC_ConfigChannel+0x488>)
 8001e76:	4013      	ands	r3, r2
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	6812      	ldr	r2, [r2, #0]
 8001e7c:	0691      	lsls	r1, r2, #26
 8001e7e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e80:	430a      	orrs	r2, r1
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e8c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e8e:	e06d      	b.n	8001f6c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001e96:	4b8e      	ldr	r3, [pc, #568]	; (80020d0 <HAL_ADC_ConfigChannel+0x488>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	6812      	ldr	r2, [r2, #0]
 8001e9e:	0691      	lsls	r1, r2, #26
 8001ea0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001eae:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001eb0:	e05c      	b.n	8001f6c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001eb8:	4b85      	ldr	r3, [pc, #532]	; (80020d0 <HAL_ADC_ConfigChannel+0x488>)
 8001eba:	4013      	ands	r3, r2
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	0691      	lsls	r1, r2, #26
 8001ec2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ed0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ed2:	e04b      	b.n	8001f6c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	069b      	lsls	r3, r3, #26
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d107      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ef6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001efe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	069b      	lsls	r3, r3, #26
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d107      	bne.n	8001f1c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f1a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	069b      	lsls	r3, r3, #26
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d107      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f3e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	069b      	lsls	r3, r3, #26
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d10a      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f62:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001f64:	e001      	b.n	8001f6a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001f66:	bf00      	nop
 8001f68:	e000      	b.n	8001f6c <HAL_ADC_ConfigChannel+0x324>
      break;
 8001f6a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d108      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x344>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d101      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x344>
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e000      	b.n	8001f8e <HAL_ADC_ConfigChannel+0x346>
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f040 8131 	bne.w	80021f6 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d00f      	beq.n	8001fbc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43da      	mvns	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	400a      	ands	r2, r1
 8001fb6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001fba:	e049      	b.n	8002050 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2b09      	cmp	r3, #9
 8001fdc:	d91c      	bls.n	8002018 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6999      	ldr	r1, [r3, #24]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	4413      	add	r3, r2
 8001fee:	3b1b      	subs	r3, #27
 8001ff0:	2207      	movs	r2, #7
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	4019      	ands	r1, r3
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	6898      	ldr	r0, [r3, #8]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	4613      	mov	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4413      	add	r3, r2
 8002008:	3b1b      	subs	r3, #27
 800200a:	fa00 f203 	lsl.w	r2, r0, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	619a      	str	r2, [r3, #24]
 8002016:	e01b      	b.n	8002050 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6959      	ldr	r1, [r3, #20]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	1c5a      	adds	r2, r3, #1
 8002024:	4613      	mov	r3, r2
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4413      	add	r3, r2
 800202a:	2207      	movs	r2, #7
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	4019      	ands	r1, r3
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	6898      	ldr	r0, [r3, #8]
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	1c5a      	adds	r2, r3, #1
 800203e:	4613      	mov	r3, r2
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	4413      	add	r3, r2
 8002044:	fa00 f203 	lsl.w	r2, r0, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002058:	d004      	beq.n	8002064 <HAL_ADC_ConfigChannel+0x41c>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a1d      	ldr	r2, [pc, #116]	; (80020d4 <HAL_ADC_ConfigChannel+0x48c>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d101      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x420>
 8002064:	4b1c      	ldr	r3, [pc, #112]	; (80020d8 <HAL_ADC_ConfigChannel+0x490>)
 8002066:	e000      	b.n	800206a <HAL_ADC_ConfigChannel+0x422>
 8002068:	4b1c      	ldr	r3, [pc, #112]	; (80020dc <HAL_ADC_ConfigChannel+0x494>)
 800206a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b10      	cmp	r3, #16
 8002072:	d105      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002074:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800207c:	2b00      	cmp	r3, #0
 800207e:	d015      	beq.n	80020ac <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002084:	2b11      	cmp	r3, #17
 8002086:	d105      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002088:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00b      	beq.n	80020ac <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002098:	2b12      	cmp	r3, #18
 800209a:	f040 80ac 	bne.w	80021f6 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800209e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f040 80a5 	bne.w	80021f6 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020b4:	d102      	bne.n	80020bc <HAL_ADC_ConfigChannel+0x474>
 80020b6:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <HAL_ADC_ConfigChannel+0x48c>)
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	e023      	b.n	8002104 <HAL_ADC_ConfigChannel+0x4bc>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a04      	ldr	r2, [pc, #16]	; (80020d4 <HAL_ADC_ConfigChannel+0x48c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d10c      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x498>
 80020c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	e01a      	b.n	8002104 <HAL_ADC_ConfigChannel+0x4bc>
 80020ce:	bf00      	nop
 80020d0:	83fff000 	.word	0x83fff000
 80020d4:	50000100 	.word	0x50000100
 80020d8:	50000300 	.word	0x50000300
 80020dc:	50000700 	.word	0x50000700
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a4a      	ldr	r2, [pc, #296]	; (8002210 <HAL_ADC_ConfigChannel+0x5c8>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d102      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x4a8>
 80020ea:	4b4a      	ldr	r3, [pc, #296]	; (8002214 <HAL_ADC_ConfigChannel+0x5cc>)
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	e009      	b.n	8002104 <HAL_ADC_ConfigChannel+0x4bc>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a47      	ldr	r2, [pc, #284]	; (8002214 <HAL_ADC_ConfigChannel+0x5cc>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d102      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x4b8>
 80020fa:	4b45      	ldr	r3, [pc, #276]	; (8002210 <HAL_ADC_ConfigChannel+0x5c8>)
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	e001      	b.n	8002104 <HAL_ADC_ConfigChannel+0x4bc>
 8002100:	2300      	movs	r3, #0
 8002102:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	2b01      	cmp	r3, #1
 8002110:	d108      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x4dc>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b01      	cmp	r3, #1
 800211e:	d101      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x4dc>
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <HAL_ADC_ConfigChannel+0x4de>
 8002124:	2300      	movs	r3, #0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d150      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800212a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800212c:	2b00      	cmp	r3, #0
 800212e:	d010      	beq.n	8002152 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	2b01      	cmp	r3, #1
 800213a:	d107      	bne.n	800214c <HAL_ADC_ConfigChannel+0x504>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b01      	cmp	r3, #1
 8002146:	d101      	bne.n	800214c <HAL_ADC_ConfigChannel+0x504>
 8002148:	2301      	movs	r3, #1
 800214a:	e000      	b.n	800214e <HAL_ADC_ConfigChannel+0x506>
 800214c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800214e:	2b00      	cmp	r3, #0
 8002150:	d13c      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b10      	cmp	r3, #16
 8002158:	d11d      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x54e>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002162:	d118      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002164:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800216c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800216e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002170:	4b29      	ldr	r3, [pc, #164]	; (8002218 <HAL_ADC_ConfigChannel+0x5d0>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a29      	ldr	r2, [pc, #164]	; (800221c <HAL_ADC_ConfigChannel+0x5d4>)
 8002176:	fba2 2303 	umull	r2, r3, r2, r3
 800217a:	0c9a      	lsrs	r2, r3, #18
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002186:	e002      	b.n	800218e <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	3b01      	subs	r3, #1
 800218c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1f9      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002194:	e02e      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2b11      	cmp	r3, #17
 800219c:	d10b      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x56e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021a6:	d106      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80021a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80021b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021b2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021b4:	e01e      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2b12      	cmp	r3, #18
 80021bc:	d11a      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80021be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80021c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021c8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021ca:	e013      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	f043 0220 	orr.w	r2, r3, #32
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80021de:	e00a      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	f043 0220 	orr.w	r2, r3, #32
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80021f2:	e000      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021f4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80021fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002202:	4618      	mov	r0, r3
 8002204:	376c      	adds	r7, #108	; 0x6c
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	50000400 	.word	0x50000400
 8002214:	50000500 	.word	0x50000500
 8002218:	20000010 	.word	0x20000010
 800221c:	431bde83 	.word	0x431bde83

08002220 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002220:	b480      	push	{r7}
 8002222:	b099      	sub	sp, #100	; 0x64
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002238:	d102      	bne.n	8002240 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800223a:	4b6d      	ldr	r3, [pc, #436]	; (80023f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	e01a      	b.n	8002276 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a6a      	ldr	r2, [pc, #424]	; (80023f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d103      	bne.n	8002252 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800224a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	e011      	b.n	8002276 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a67      	ldr	r2, [pc, #412]	; (80023f4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d102      	bne.n	8002262 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800225c:	4b66      	ldr	r3, [pc, #408]	; (80023f8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800225e:	60bb      	str	r3, [r7, #8]
 8002260:	e009      	b.n	8002276 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a64      	ldr	r2, [pc, #400]	; (80023f8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d102      	bne.n	8002272 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800226c:	4b61      	ldr	r3, [pc, #388]	; (80023f4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	e001      	b.n	8002276 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002272:	2300      	movs	r3, #0
 8002274:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0b0      	b.n	80023e2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002286:	2b01      	cmp	r3, #1
 8002288:	d101      	bne.n	800228e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800228a:	2302      	movs	r3, #2
 800228c:	e0a9      	b.n	80023e2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f040 808d 	bne.w	80023c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 0304 	and.w	r3, r3, #4
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f040 8086 	bne.w	80023c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022bc:	d004      	beq.n	80022c8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a4b      	ldr	r2, [pc, #300]	; (80023f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d101      	bne.n	80022cc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80022c8:	4b4c      	ldr	r3, [pc, #304]	; (80023fc <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80022ca:	e000      	b.n	80022ce <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80022cc:	4b4c      	ldr	r3, [pc, #304]	; (8002400 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80022ce:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d040      	beq.n	800235a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80022d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	6859      	ldr	r1, [r3, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022ea:	035b      	lsls	r3, r3, #13
 80022ec:	430b      	orrs	r3, r1
 80022ee:	431a      	orrs	r2, r3
 80022f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022f2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d108      	bne.n	8002314 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b01      	cmp	r3, #1
 800230e:	d101      	bne.n	8002314 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002310:	2301      	movs	r3, #1
 8002312:	e000      	b.n	8002316 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002314:	2300      	movs	r3, #0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d15c      	bne.n	80023d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	2b01      	cmp	r3, #1
 8002324:	d107      	bne.n	8002336 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002336:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002338:	2b00      	cmp	r3, #0
 800233a:	d14b      	bne.n	80023d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800233c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002344:	f023 030f 	bic.w	r3, r3, #15
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	6811      	ldr	r1, [r2, #0]
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	6892      	ldr	r2, [r2, #8]
 8002350:	430a      	orrs	r2, r1
 8002352:	431a      	orrs	r2, r3
 8002354:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002356:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002358:	e03c      	b.n	80023d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800235a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002362:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002364:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	2b01      	cmp	r3, #1
 8002372:	d108      	bne.n	8002386 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b01      	cmp	r3, #1
 8002380:	d101      	bne.n	8002386 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002386:	2300      	movs	r3, #0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d123      	bne.n	80023d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	2b01      	cmp	r3, #1
 8002396:	d107      	bne.n	80023a8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d101      	bne.n	80023a8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80023a4:	2301      	movs	r3, #1
 80023a6:	e000      	b.n	80023aa <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80023a8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d112      	bne.n	80023d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80023ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80023b6:	f023 030f 	bic.w	r3, r3, #15
 80023ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80023bc:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80023be:	e009      	b.n	80023d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c4:	f043 0220 	orr.w	r2, r3, #32
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80023d2:	e000      	b.n	80023d6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80023d4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80023de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80023e2:	4618      	mov	r0, r3
 80023e4:	3764      	adds	r7, #100	; 0x64
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	50000100 	.word	0x50000100
 80023f4:	50000400 	.word	0x50000400
 80023f8:	50000500 	.word	0x50000500
 80023fc:	50000300 	.word	0x50000300
 8002400:	50000700 	.word	0x50000700

08002404 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	2b01      	cmp	r3, #1
 800241c:	d108      	bne.n	8002430 <ADC_Enable+0x2c>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b01      	cmp	r3, #1
 800242a:	d101      	bne.n	8002430 <ADC_Enable+0x2c>
 800242c:	2301      	movs	r3, #1
 800242e:	e000      	b.n	8002432 <ADC_Enable+0x2e>
 8002430:	2300      	movs	r3, #0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d143      	bne.n	80024be <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	4b22      	ldr	r3, [pc, #136]	; (80024c8 <ADC_Enable+0xc4>)
 800243e:	4013      	ands	r3, r2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00d      	beq.n	8002460 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002448:	f043 0210 	orr.w	r2, r3, #16
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002454:	f043 0201 	orr.w	r2, r3, #1
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e02f      	b.n	80024c0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0201 	orr.w	r2, r2, #1
 800246e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002470:	f7fe ff88 	bl	8001384 <HAL_GetTick>
 8002474:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002476:	e01b      	b.n	80024b0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002478:	f7fe ff84 	bl	8001384 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d914      	bls.n	80024b0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b01      	cmp	r3, #1
 8002492:	d00d      	beq.n	80024b0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	f043 0210 	orr.w	r2, r3, #16
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a4:	f043 0201 	orr.w	r2, r3, #1
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e007      	b.n	80024c0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d1dc      	bne.n	8002478 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	8000003f 	.word	0x8000003f

080024cc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d108      	bne.n	80024f8 <ADC_Disable+0x2c>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d101      	bne.n	80024f8 <ADC_Disable+0x2c>
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <ADC_Disable+0x2e>
 80024f8:	2300      	movs	r3, #0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d047      	beq.n	800258e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 030d 	and.w	r3, r3, #13
 8002508:	2b01      	cmp	r3, #1
 800250a:	d10f      	bne.n	800252c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 0202 	orr.w	r2, r2, #2
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2203      	movs	r2, #3
 8002522:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002524:	f7fe ff2e 	bl	8001384 <HAL_GetTick>
 8002528:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800252a:	e029      	b.n	8002580 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	f043 0210 	orr.w	r2, r3, #16
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253c:	f043 0201 	orr.w	r2, r3, #1
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e023      	b.n	8002590 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002548:	f7fe ff1c 	bl	8001384 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d914      	bls.n	8002580 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b01      	cmp	r3, #1
 8002562:	d10d      	bne.n	8002580 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	f043 0210 	orr.w	r2, r3, #16
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002574:	f043 0201 	orr.w	r2, r3, #1
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e007      	b.n	8002590 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b01      	cmp	r3, #1
 800258c:	d0dc      	beq.n	8002548 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80025a2:	2300      	movs	r3, #0
 80025a4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 030c 	and.w	r3, r3, #12
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 809a 	beq.w	80026f2 <ADC_ConversionStop+0x15a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025cc:	d12a      	bne.n	8002624 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d126      	bne.n	8002624 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d122      	bne.n	8002624 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 80025de:	230c      	movs	r3, #12
 80025e0:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80025e2:	e014      	b.n	800260e <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	4a45      	ldr	r2, [pc, #276]	; (80026fc <ADC_ConversionStop+0x164>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d90d      	bls.n	8002608 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	f043 0210 	orr.w	r2, r3, #16
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fc:	f043 0201 	orr.w	r2, r3, #1
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e075      	b.n	80026f4 <ADC_ConversionStop+0x15c>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	3301      	adds	r3, #1
 800260c:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002618:	2b40      	cmp	r3, #64	; 0x40
 800261a:	d1e3      	bne.n	80025e4 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2240      	movs	r2, #64	; 0x40
 8002622:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	2b60      	cmp	r3, #96	; 0x60
 8002628:	d015      	beq.n	8002656 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2b04      	cmp	r3, #4
 8002636:	d10e      	bne.n	8002656 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002642:	2b00      	cmp	r3, #0
 8002644:	d107      	bne.n	8002656 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f042 0210 	orr.w	r2, r2, #16
 8002654:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2b0c      	cmp	r3, #12
 800265a:	d015      	beq.n	8002688 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b08      	cmp	r3, #8
 8002668:	d10e      	bne.n	8002688 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002674:	2b00      	cmp	r3, #0
 8002676:	d107      	bne.n	8002688 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689a      	ldr	r2, [r3, #8]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0220 	orr.w	r2, r2, #32
 8002686:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	2b60      	cmp	r3, #96	; 0x60
 800268c:	d004      	beq.n	8002698 <ADC_ConversionStop+0x100>
 800268e:	2b6c      	cmp	r3, #108	; 0x6c
 8002690:	d105      	bne.n	800269e <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002692:	230c      	movs	r3, #12
 8002694:	617b      	str	r3, [r7, #20]
        break;
 8002696:	e005      	b.n	80026a4 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002698:	2308      	movs	r3, #8
 800269a:	617b      	str	r3, [r7, #20]
        break;
 800269c:	e002      	b.n	80026a4 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800269e:	2304      	movs	r3, #4
 80026a0:	617b      	str	r3, [r7, #20]
        break;
 80026a2:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80026a4:	f7fe fe6e 	bl	8001384 <HAL_GetTick>
 80026a8:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80026aa:	e01b      	b.n	80026e4 <ADC_ConversionStop+0x14c>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80026ac:	f7fe fe6a 	bl	8001384 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b0b      	cmp	r3, #11
 80026b8:	d914      	bls.n	80026e4 <ADC_ConversionStop+0x14c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	4013      	ands	r3, r2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00d      	beq.n	80026e4 <ADC_ConversionStop+0x14c>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	f043 0210 	orr.w	r2, r3, #16
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d8:	f043 0201 	orr.w	r2, r3, #1
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e007      	b.n	80026f4 <ADC_ConversionStop+0x15c>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	4013      	ands	r3, r2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1dc      	bne.n	80026ac <ADC_ConversionStop+0x114>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	000993ff 	.word	0x000993ff

08002700 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002710:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <__NVIC_SetPriorityGrouping+0x44>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800271c:	4013      	ands	r3, r2
 800271e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002728:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800272c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002732:	4a04      	ldr	r2, [pc, #16]	; (8002744 <__NVIC_SetPriorityGrouping+0x44>)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	60d3      	str	r3, [r2, #12]
}
 8002738:	bf00      	nop
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800274c:	4b04      	ldr	r3, [pc, #16]	; (8002760 <__NVIC_GetPriorityGrouping+0x18>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	0a1b      	lsrs	r3, r3, #8
 8002752:	f003 0307 	and.w	r3, r3, #7
}
 8002756:	4618      	mov	r0, r3
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	e000ed00 	.word	0xe000ed00

08002764 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800276e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002772:	2b00      	cmp	r3, #0
 8002774:	db0b      	blt.n	800278e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	f003 021f 	and.w	r2, r3, #31
 800277c:	4907      	ldr	r1, [pc, #28]	; (800279c <__NVIC_EnableIRQ+0x38>)
 800277e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002782:	095b      	lsrs	r3, r3, #5
 8002784:	2001      	movs	r0, #1
 8002786:	fa00 f202 	lsl.w	r2, r0, r2
 800278a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	e000e100 	.word	0xe000e100

080027a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	6039      	str	r1, [r7, #0]
 80027aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	db0a      	blt.n	80027ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	490c      	ldr	r1, [pc, #48]	; (80027ec <__NVIC_SetPriority+0x4c>)
 80027ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027be:	0112      	lsls	r2, r2, #4
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	440b      	add	r3, r1
 80027c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027c8:	e00a      	b.n	80027e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	4908      	ldr	r1, [pc, #32]	; (80027f0 <__NVIC_SetPriority+0x50>)
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	3b04      	subs	r3, #4
 80027d8:	0112      	lsls	r2, r2, #4
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	440b      	add	r3, r1
 80027de:	761a      	strb	r2, [r3, #24]
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	e000e100 	.word	0xe000e100
 80027f0:	e000ed00 	.word	0xe000ed00

080027f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b089      	sub	sp, #36	; 0x24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	f1c3 0307 	rsb	r3, r3, #7
 800280e:	2b04      	cmp	r3, #4
 8002810:	bf28      	it	cs
 8002812:	2304      	movcs	r3, #4
 8002814:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	3304      	adds	r3, #4
 800281a:	2b06      	cmp	r3, #6
 800281c:	d902      	bls.n	8002824 <NVIC_EncodePriority+0x30>
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	3b03      	subs	r3, #3
 8002822:	e000      	b.n	8002826 <NVIC_EncodePriority+0x32>
 8002824:	2300      	movs	r3, #0
 8002826:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002828:	f04f 32ff 	mov.w	r2, #4294967295
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43da      	mvns	r2, r3
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	401a      	ands	r2, r3
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800283c:	f04f 31ff 	mov.w	r1, #4294967295
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	fa01 f303 	lsl.w	r3, r1, r3
 8002846:	43d9      	mvns	r1, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800284c:	4313      	orrs	r3, r2
         );
}
 800284e:	4618      	mov	r0, r3
 8002850:	3724      	adds	r7, #36	; 0x24
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
	...

0800285c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3b01      	subs	r3, #1
 8002868:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800286c:	d301      	bcc.n	8002872 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800286e:	2301      	movs	r3, #1
 8002870:	e00f      	b.n	8002892 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002872:	4a0a      	ldr	r2, [pc, #40]	; (800289c <SysTick_Config+0x40>)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3b01      	subs	r3, #1
 8002878:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800287a:	210f      	movs	r1, #15
 800287c:	f04f 30ff 	mov.w	r0, #4294967295
 8002880:	f7ff ff8e 	bl	80027a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002884:	4b05      	ldr	r3, [pc, #20]	; (800289c <SysTick_Config+0x40>)
 8002886:	2200      	movs	r2, #0
 8002888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800288a:	4b04      	ldr	r3, [pc, #16]	; (800289c <SysTick_Config+0x40>)
 800288c:	2207      	movs	r2, #7
 800288e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	e000e010 	.word	0xe000e010

080028a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f7ff ff29 	bl	8002700 <__NVIC_SetPriorityGrouping>
}
 80028ae:	bf00      	nop
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b086      	sub	sp, #24
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	4603      	mov	r3, r0
 80028be:	60b9      	str	r1, [r7, #8]
 80028c0:	607a      	str	r2, [r7, #4]
 80028c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028c8:	f7ff ff3e 	bl	8002748 <__NVIC_GetPriorityGrouping>
 80028cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	68b9      	ldr	r1, [r7, #8]
 80028d2:	6978      	ldr	r0, [r7, #20]
 80028d4:	f7ff ff8e 	bl	80027f4 <NVIC_EncodePriority>
 80028d8:	4602      	mov	r2, r0
 80028da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028de:	4611      	mov	r1, r2
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff ff5d 	bl	80027a0 <__NVIC_SetPriority>
}
 80028e6:	bf00      	nop
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	4603      	mov	r3, r0
 80028f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff ff31 	bl	8002764 <__NVIC_EnableIRQ>
}
 8002902:	bf00      	nop
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b082      	sub	sp, #8
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7ff ffa2 	bl	800285c <SysTick_Config>
 8002918:	4603      	mov	r3, r0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002930:	2b02      	cmp	r3, #2
 8002932:	d008      	beq.n	8002946 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2204      	movs	r2, #4
 8002938:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e020      	b.n	8002988 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 020e 	bic.w	r2, r2, #14
 8002954:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0201 	bic.w	r2, r2, #1
 8002964:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296e:	2101      	movs	r1, #1
 8002970:	fa01 f202 	lsl.w	r2, r1, r2
 8002974:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800299c:	2300      	movs	r3, #0
 800299e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d005      	beq.n	80029b6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2204      	movs	r2, #4
 80029ae:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	73fb      	strb	r3, [r7, #15]
 80029b4:	e027      	b.n	8002a06 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 020e 	bic.w	r2, r2, #14
 80029c4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0201 	bic.w	r2, r2, #1
 80029d4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029de:	2101      	movs	r1, #1
 80029e0:	fa01 f202 	lsl.w	r2, r1, r2
 80029e4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	4798      	blx	r3
    } 
  }
  return status;
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b087      	sub	sp, #28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a1e:	e160      	b.n	8002ce2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	2101      	movs	r1, #1
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 8152 	beq.w	8002cdc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d005      	beq.n	8002a50 <HAL_GPIO_Init+0x40>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 0303 	and.w	r3, r3, #3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d130      	bne.n	8002ab2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	4013      	ands	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a86:	2201      	movs	r2, #1
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4013      	ands	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	091b      	lsrs	r3, r3, #4
 8002a9c:	f003 0201 	and.w	r2, r3, #1
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	2b03      	cmp	r3, #3
 8002abc:	d017      	beq.n	8002aee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	2203      	movs	r2, #3
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d123      	bne.n	8002b42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	08da      	lsrs	r2, r3, #3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	3208      	adds	r2, #8
 8002b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	220f      	movs	r2, #15
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43db      	mvns	r3, r3
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	691a      	ldr	r2, [r3, #16]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	08da      	lsrs	r2, r3, #3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3208      	adds	r2, #8
 8002b3c:	6939      	ldr	r1, [r7, #16]
 8002b3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	2203      	movs	r2, #3
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43db      	mvns	r3, r3
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4013      	ands	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f003 0203 	and.w	r2, r3, #3
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 80ac 	beq.w	8002cdc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b84:	4b5e      	ldr	r3, [pc, #376]	; (8002d00 <HAL_GPIO_Init+0x2f0>)
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	4a5d      	ldr	r2, [pc, #372]	; (8002d00 <HAL_GPIO_Init+0x2f0>)
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	6193      	str	r3, [r2, #24]
 8002b90:	4b5b      	ldr	r3, [pc, #364]	; (8002d00 <HAL_GPIO_Init+0x2f0>)
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	60bb      	str	r3, [r7, #8]
 8002b9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b9c:	4a59      	ldr	r2, [pc, #356]	; (8002d04 <HAL_GPIO_Init+0x2f4>)
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	089b      	lsrs	r3, r3, #2
 8002ba2:	3302      	adds	r3, #2
 8002ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f003 0303 	and.w	r3, r3, #3
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	220f      	movs	r2, #15
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002bc6:	d025      	beq.n	8002c14 <HAL_GPIO_Init+0x204>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a4f      	ldr	r2, [pc, #316]	; (8002d08 <HAL_GPIO_Init+0x2f8>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d01f      	beq.n	8002c10 <HAL_GPIO_Init+0x200>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a4e      	ldr	r2, [pc, #312]	; (8002d0c <HAL_GPIO_Init+0x2fc>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d019      	beq.n	8002c0c <HAL_GPIO_Init+0x1fc>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a4d      	ldr	r2, [pc, #308]	; (8002d10 <HAL_GPIO_Init+0x300>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d013      	beq.n	8002c08 <HAL_GPIO_Init+0x1f8>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a4c      	ldr	r2, [pc, #304]	; (8002d14 <HAL_GPIO_Init+0x304>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d00d      	beq.n	8002c04 <HAL_GPIO_Init+0x1f4>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a4b      	ldr	r2, [pc, #300]	; (8002d18 <HAL_GPIO_Init+0x308>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d007      	beq.n	8002c00 <HAL_GPIO_Init+0x1f0>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a4a      	ldr	r2, [pc, #296]	; (8002d1c <HAL_GPIO_Init+0x30c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d101      	bne.n	8002bfc <HAL_GPIO_Init+0x1ec>
 8002bf8:	2306      	movs	r3, #6
 8002bfa:	e00c      	b.n	8002c16 <HAL_GPIO_Init+0x206>
 8002bfc:	2307      	movs	r3, #7
 8002bfe:	e00a      	b.n	8002c16 <HAL_GPIO_Init+0x206>
 8002c00:	2305      	movs	r3, #5
 8002c02:	e008      	b.n	8002c16 <HAL_GPIO_Init+0x206>
 8002c04:	2304      	movs	r3, #4
 8002c06:	e006      	b.n	8002c16 <HAL_GPIO_Init+0x206>
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e004      	b.n	8002c16 <HAL_GPIO_Init+0x206>
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	e002      	b.n	8002c16 <HAL_GPIO_Init+0x206>
 8002c10:	2301      	movs	r3, #1
 8002c12:	e000      	b.n	8002c16 <HAL_GPIO_Init+0x206>
 8002c14:	2300      	movs	r3, #0
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	f002 0203 	and.w	r2, r2, #3
 8002c1c:	0092      	lsls	r2, r2, #2
 8002c1e:	4093      	lsls	r3, r2
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c26:	4937      	ldr	r1, [pc, #220]	; (8002d04 <HAL_GPIO_Init+0x2f4>)
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	089b      	lsrs	r3, r3, #2
 8002c2c:	3302      	adds	r3, #2
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c34:	4b3a      	ldr	r3, [pc, #232]	; (8002d20 <HAL_GPIO_Init+0x310>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	4013      	ands	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d003      	beq.n	8002c58 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c58:	4a31      	ldr	r2, [pc, #196]	; (8002d20 <HAL_GPIO_Init+0x310>)
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c5e:	4b30      	ldr	r3, [pc, #192]	; (8002d20 <HAL_GPIO_Init+0x310>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	43db      	mvns	r3, r3
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c82:	4a27      	ldr	r2, [pc, #156]	; (8002d20 <HAL_GPIO_Init+0x310>)
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c88:	4b25      	ldr	r3, [pc, #148]	; (8002d20 <HAL_GPIO_Init+0x310>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	43db      	mvns	r3, r3
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	4013      	ands	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002cac:	4a1c      	ldr	r2, [pc, #112]	; (8002d20 <HAL_GPIO_Init+0x310>)
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cb2:	4b1b      	ldr	r3, [pc, #108]	; (8002d20 <HAL_GPIO_Init+0x310>)
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002cd6:	4a12      	ldr	r2, [pc, #72]	; (8002d20 <HAL_GPIO_Init+0x310>)
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f47f ae97 	bne.w	8002a20 <HAL_GPIO_Init+0x10>
  }
}
 8002cf2:	bf00      	nop
 8002cf4:	371c      	adds	r7, #28
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40021000 	.word	0x40021000
 8002d04:	40010000 	.word	0x40010000
 8002d08:	48000400 	.word	0x48000400
 8002d0c:	48000800 	.word	0x48000800
 8002d10:	48000c00 	.word	0x48000c00
 8002d14:	48001000 	.word	0x48001000
 8002d18:	48001400 	.word	0x48001400
 8002d1c:	48001800 	.word	0x48001800
 8002d20:	40010400 	.word	0x40010400

08002d24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	887b      	ldrh	r3, [r7, #2]
 8002d36:	4013      	ands	r3, r2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	73fb      	strb	r3, [r7, #15]
 8002d40:	e001      	b.n	8002d46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d42:	2300      	movs	r3, #0
 8002d44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3714      	adds	r7, #20
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	807b      	strh	r3, [r7, #2]
 8002d60:	4613      	mov	r3, r2
 8002d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d64:	787b      	ldrb	r3, [r7, #1]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d6a:	887a      	ldrh	r2, [r7, #2]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d70:	e002      	b.n	8002d78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d72:	887a      	ldrh	r2, [r7, #2]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d96:	887a      	ldrh	r2, [r7, #2]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	041a      	lsls	r2, r3, #16
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	43d9      	mvns	r1, r3
 8002da2:	887b      	ldrh	r3, [r7, #2]
 8002da4:	400b      	ands	r3, r1
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	619a      	str	r2, [r3, #24]
}
 8002dac:	bf00      	nop
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002dc2:	4b08      	ldr	r3, [pc, #32]	; (8002de4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dc4:	695a      	ldr	r2, [r3, #20]
 8002dc6:	88fb      	ldrh	r3, [r7, #6]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d006      	beq.n	8002ddc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dce:	4a05      	ldr	r2, [pc, #20]	; (8002de4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dd0:	88fb      	ldrh	r3, [r7, #6]
 8002dd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002dd4:	88fb      	ldrh	r3, [r7, #6]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fd fa0c 	bl	80001f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ddc:	bf00      	nop
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40010400 	.word	0x40010400

08002de8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	1d3b      	adds	r3, r7, #4
 8002df2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002df4:	1d3b      	adds	r3, r7, #4
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d102      	bne.n	8002e02 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	f000 bf01 	b.w	8003c04 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e02:	1d3b      	adds	r3, r7, #4
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 8160 	beq.w	80030d2 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002e12:	4bae      	ldr	r3, [pc, #696]	; (80030cc <HAL_RCC_OscConfig+0x2e4>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f003 030c 	and.w	r3, r3, #12
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d00c      	beq.n	8002e38 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e1e:	4bab      	ldr	r3, [pc, #684]	; (80030cc <HAL_RCC_OscConfig+0x2e4>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f003 030c 	and.w	r3, r3, #12
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d159      	bne.n	8002ede <HAL_RCC_OscConfig+0xf6>
 8002e2a:	4ba8      	ldr	r3, [pc, #672]	; (80030cc <HAL_RCC_OscConfig+0x2e4>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e36:	d152      	bne.n	8002ede <HAL_RCC_OscConfig+0xf6>
 8002e38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e3c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e40:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002e44:	fa93 f3a3 	rbit	r3, r3
 8002e48:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e4c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e50:	fab3 f383 	clz	r3, r3
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	095b      	lsrs	r3, r3, #5
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	f043 0301 	orr.w	r3, r3, #1
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d102      	bne.n	8002e6a <HAL_RCC_OscConfig+0x82>
 8002e64:	4b99      	ldr	r3, [pc, #612]	; (80030cc <HAL_RCC_OscConfig+0x2e4>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	e015      	b.n	8002e96 <HAL_RCC_OscConfig+0xae>
 8002e6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e6e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e72:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002e76:	fa93 f3a3 	rbit	r3, r3
 8002e7a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002e7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e82:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002e86:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002e8a:	fa93 f3a3 	rbit	r3, r3
 8002e8e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002e92:	4b8e      	ldr	r3, [pc, #568]	; (80030cc <HAL_RCC_OscConfig+0x2e4>)
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e9a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002e9e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002ea2:	fa92 f2a2 	rbit	r2, r2
 8002ea6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002eaa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002eae:	fab2 f282 	clz	r2, r2
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	f042 0220 	orr.w	r2, r2, #32
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	f002 021f 	and.w	r2, r2, #31
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 8102 	beq.w	80030d0 <HAL_RCC_OscConfig+0x2e8>
 8002ecc:	1d3b      	adds	r3, r7, #4
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f040 80fc 	bne.w	80030d0 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	f000 be93 	b.w	8003c04 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ede:	1d3b      	adds	r3, r7, #4
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee8:	d106      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x110>
 8002eea:	4b78      	ldr	r3, [pc, #480]	; (80030cc <HAL_RCC_OscConfig+0x2e4>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a77      	ldr	r2, [pc, #476]	; (80030cc <HAL_RCC_OscConfig+0x2e4>)
 8002ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	e030      	b.n	8002f5a <HAL_RCC_OscConfig+0x172>
 8002ef8:	1d3b      	adds	r3, r7, #4
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10c      	bne.n	8002f1c <HAL_RCC_OscConfig+0x134>
 8002f02:	4b72      	ldr	r3, [pc, #456]	; (80030cc <HAL_RCC_OscConfig+0x2e4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a71      	ldr	r2, [pc, #452]	; (80030cc <HAL_RCC_OscConfig+0x2e4>)
 8002f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	4b6f      	ldr	r3, [pc, #444]	; (80030cc <HAL_RCC_OscConfig+0x2e4>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a6e      	ldr	r2, [pc, #440]	; (80030cc <HAL_RCC_OscConfig+0x2e4>)
 8002f14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	e01e      	b.n	8002f5a <HAL_RCC_OscConfig+0x172>
 8002f1c:	1d3b      	adds	r3, r7, #4
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f26:	d10c      	bne.n	8002f42 <HAL_RCC_OscConfig+0x15a>
 8002f28:	4b68      	ldr	r3, [pc, #416]	; (80030cc <HAL_RCC_OscConfig+0x2e4>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a67      	ldr	r2, [pc, #412]	; (80030cc <HAL_RCC_OscConfig+0x2e4>)
 8002f2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f32:	6013      	str	r3, [r2, #0]
 8002f34:	4b65      	ldr	r3, [pc, #404]	; (80030cc <HAL_RCC_OscConfig+0x2e4>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a64      	ldr	r2, [pc, #400]	; (80030cc <HAL_RCC_OscConfig+0x2e4>)
 8002f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f3e:	6013      	str	r3, [r2, #0]
 8002f40:	e00b      	b.n	8002f5a <HAL_RCC_OscConfig+0x172>
 8002f42:	4b62      	ldr	r3, [pc, #392]	; (80030cc <HAL_RCC_OscConfig+0x2e4>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a61      	ldr	r2, [pc, #388]	; (80030cc <HAL_RCC_OscConfig+0x2e4>)
 8002f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f4c:	6013      	str	r3, [r2, #0]
 8002f4e:	4b5f      	ldr	r3, [pc, #380]	; (80030cc <HAL_RCC_OscConfig+0x2e4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a5e      	ldr	r2, [pc, #376]	; (80030cc <HAL_RCC_OscConfig+0x2e4>)
 8002f54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f58:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f5a:	1d3b      	adds	r3, r7, #4
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d059      	beq.n	8003018 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f64:	f7fe fa0e 	bl	8001384 <HAL_GetTick>
 8002f68:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6c:	e00a      	b.n	8002f84 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f6e:	f7fe fa09 	bl	8001384 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b64      	cmp	r3, #100	; 0x64
 8002f7c:	d902      	bls.n	8002f84 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	f000 be40 	b.w	8003c04 <HAL_RCC_OscConfig+0xe1c>
 8002f84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f88:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002f90:	fa93 f3a3 	rbit	r3, r3
 8002f94:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002f98:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9c:	fab3 f383 	clz	r3, r3
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	f043 0301 	orr.w	r3, r3, #1
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d102      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x1ce>
 8002fb0:	4b46      	ldr	r3, [pc, #280]	; (80030cc <HAL_RCC_OscConfig+0x2e4>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	e015      	b.n	8002fe2 <HAL_RCC_OscConfig+0x1fa>
 8002fb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fba:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002fc2:	fa93 f3a3 	rbit	r3, r3
 8002fc6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002fca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fce:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002fd2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002fd6:	fa93 f3a3 	rbit	r3, r3
 8002fda:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002fde:	4b3b      	ldr	r3, [pc, #236]	; (80030cc <HAL_RCC_OscConfig+0x2e4>)
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fe6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002fea:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002fee:	fa92 f2a2 	rbit	r2, r2
 8002ff2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002ff6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002ffa:	fab2 f282 	clz	r2, r2
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	f042 0220 	orr.w	r2, r2, #32
 8003004:	b2d2      	uxtb	r2, r2
 8003006:	f002 021f 	and.w	r2, r2, #31
 800300a:	2101      	movs	r1, #1
 800300c:	fa01 f202 	lsl.w	r2, r1, r2
 8003010:	4013      	ands	r3, r2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0ab      	beq.n	8002f6e <HAL_RCC_OscConfig+0x186>
 8003016:	e05c      	b.n	80030d2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003018:	f7fe f9b4 	bl	8001384 <HAL_GetTick>
 800301c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003020:	e00a      	b.n	8003038 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003022:	f7fe f9af 	bl	8001384 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b64      	cmp	r3, #100	; 0x64
 8003030:	d902      	bls.n	8003038 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	f000 bde6 	b.w	8003c04 <HAL_RCC_OscConfig+0xe1c>
 8003038:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800303c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003040:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003044:	fa93 f3a3 	rbit	r3, r3
 8003048:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800304c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003050:	fab3 f383 	clz	r3, r3
 8003054:	b2db      	uxtb	r3, r3
 8003056:	095b      	lsrs	r3, r3, #5
 8003058:	b2db      	uxtb	r3, r3
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b01      	cmp	r3, #1
 8003062:	d102      	bne.n	800306a <HAL_RCC_OscConfig+0x282>
 8003064:	4b19      	ldr	r3, [pc, #100]	; (80030cc <HAL_RCC_OscConfig+0x2e4>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	e015      	b.n	8003096 <HAL_RCC_OscConfig+0x2ae>
 800306a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800306e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003072:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003076:	fa93 f3a3 	rbit	r3, r3
 800307a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800307e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003082:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003086:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800308a:	fa93 f3a3 	rbit	r3, r3
 800308e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003092:	4b0e      	ldr	r3, [pc, #56]	; (80030cc <HAL_RCC_OscConfig+0x2e4>)
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800309a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800309e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80030a2:	fa92 f2a2 	rbit	r2, r2
 80030a6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80030aa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80030ae:	fab2 f282 	clz	r2, r2
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	f042 0220 	orr.w	r2, r2, #32
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	f002 021f 	and.w	r2, r2, #31
 80030be:	2101      	movs	r1, #1
 80030c0:	fa01 f202 	lsl.w	r2, r1, r2
 80030c4:	4013      	ands	r3, r2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1ab      	bne.n	8003022 <HAL_RCC_OscConfig+0x23a>
 80030ca:	e002      	b.n	80030d2 <HAL_RCC_OscConfig+0x2ea>
 80030cc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030d2:	1d3b      	adds	r3, r7, #4
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 8170 	beq.w	80033c2 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80030e2:	4bd0      	ldr	r3, [pc, #832]	; (8003424 <HAL_RCC_OscConfig+0x63c>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f003 030c 	and.w	r3, r3, #12
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00c      	beq.n	8003108 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80030ee:	4bcd      	ldr	r3, [pc, #820]	; (8003424 <HAL_RCC_OscConfig+0x63c>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f003 030c 	and.w	r3, r3, #12
 80030f6:	2b08      	cmp	r3, #8
 80030f8:	d16d      	bne.n	80031d6 <HAL_RCC_OscConfig+0x3ee>
 80030fa:	4bca      	ldr	r3, [pc, #808]	; (8003424 <HAL_RCC_OscConfig+0x63c>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003102:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003106:	d166      	bne.n	80031d6 <HAL_RCC_OscConfig+0x3ee>
 8003108:	2302      	movs	r3, #2
 800310a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003112:	fa93 f3a3 	rbit	r3, r3
 8003116:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800311a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800311e:	fab3 f383 	clz	r3, r3
 8003122:	b2db      	uxtb	r3, r3
 8003124:	095b      	lsrs	r3, r3, #5
 8003126:	b2db      	uxtb	r3, r3
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b01      	cmp	r3, #1
 8003130:	d102      	bne.n	8003138 <HAL_RCC_OscConfig+0x350>
 8003132:	4bbc      	ldr	r3, [pc, #752]	; (8003424 <HAL_RCC_OscConfig+0x63c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	e013      	b.n	8003160 <HAL_RCC_OscConfig+0x378>
 8003138:	2302      	movs	r3, #2
 800313a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003142:	fa93 f3a3 	rbit	r3, r3
 8003146:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800314a:	2302      	movs	r3, #2
 800314c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003150:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003154:	fa93 f3a3 	rbit	r3, r3
 8003158:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800315c:	4bb1      	ldr	r3, [pc, #708]	; (8003424 <HAL_RCC_OscConfig+0x63c>)
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	2202      	movs	r2, #2
 8003162:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003166:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800316a:	fa92 f2a2 	rbit	r2, r2
 800316e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003172:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003176:	fab2 f282 	clz	r2, r2
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	f042 0220 	orr.w	r2, r2, #32
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	f002 021f 	and.w	r2, r2, #31
 8003186:	2101      	movs	r1, #1
 8003188:	fa01 f202 	lsl.w	r2, r1, r2
 800318c:	4013      	ands	r3, r2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d007      	beq.n	80031a2 <HAL_RCC_OscConfig+0x3ba>
 8003192:	1d3b      	adds	r3, r7, #4
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d002      	beq.n	80031a2 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	f000 bd31 	b.w	8003c04 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a2:	4ba0      	ldr	r3, [pc, #640]	; (8003424 <HAL_RCC_OscConfig+0x63c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031aa:	1d3b      	adds	r3, r7, #4
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	21f8      	movs	r1, #248	; 0xf8
 80031b2:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b6:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80031ba:	fa91 f1a1 	rbit	r1, r1
 80031be:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80031c2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80031c6:	fab1 f181 	clz	r1, r1
 80031ca:	b2c9      	uxtb	r1, r1
 80031cc:	408b      	lsls	r3, r1
 80031ce:	4995      	ldr	r1, [pc, #596]	; (8003424 <HAL_RCC_OscConfig+0x63c>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031d4:	e0f5      	b.n	80033c2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031d6:	1d3b      	adds	r3, r7, #4
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 8085 	beq.w	80032ec <HAL_RCC_OscConfig+0x504>
 80031e2:	2301      	movs	r3, #1
 80031e4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80031ec:	fa93 f3a3 	rbit	r3, r3
 80031f0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80031f4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031f8:	fab3 f383 	clz	r3, r3
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003202:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	461a      	mov	r2, r3
 800320a:	2301      	movs	r3, #1
 800320c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320e:	f7fe f8b9 	bl	8001384 <HAL_GetTick>
 8003212:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003216:	e00a      	b.n	800322e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003218:	f7fe f8b4 	bl	8001384 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d902      	bls.n	800322e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	f000 bceb 	b.w	8003c04 <HAL_RCC_OscConfig+0xe1c>
 800322e:	2302      	movs	r3, #2
 8003230:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003234:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003238:	fa93 f3a3 	rbit	r3, r3
 800323c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003240:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003244:	fab3 f383 	clz	r3, r3
 8003248:	b2db      	uxtb	r3, r3
 800324a:	095b      	lsrs	r3, r3, #5
 800324c:	b2db      	uxtb	r3, r3
 800324e:	f043 0301 	orr.w	r3, r3, #1
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b01      	cmp	r3, #1
 8003256:	d102      	bne.n	800325e <HAL_RCC_OscConfig+0x476>
 8003258:	4b72      	ldr	r3, [pc, #456]	; (8003424 <HAL_RCC_OscConfig+0x63c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	e013      	b.n	8003286 <HAL_RCC_OscConfig+0x49e>
 800325e:	2302      	movs	r3, #2
 8003260:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003264:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003268:	fa93 f3a3 	rbit	r3, r3
 800326c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003270:	2302      	movs	r3, #2
 8003272:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003276:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800327a:	fa93 f3a3 	rbit	r3, r3
 800327e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003282:	4b68      	ldr	r3, [pc, #416]	; (8003424 <HAL_RCC_OscConfig+0x63c>)
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	2202      	movs	r2, #2
 8003288:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800328c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003290:	fa92 f2a2 	rbit	r2, r2
 8003294:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003298:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800329c:	fab2 f282 	clz	r2, r2
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	f042 0220 	orr.w	r2, r2, #32
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	f002 021f 	and.w	r2, r2, #31
 80032ac:	2101      	movs	r1, #1
 80032ae:	fa01 f202 	lsl.w	r2, r1, r2
 80032b2:	4013      	ands	r3, r2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0af      	beq.n	8003218 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b8:	4b5a      	ldr	r3, [pc, #360]	; (8003424 <HAL_RCC_OscConfig+0x63c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032c0:	1d3b      	adds	r3, r7, #4
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	21f8      	movs	r1, #248	; 0xf8
 80032c8:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032cc:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80032d0:	fa91 f1a1 	rbit	r1, r1
 80032d4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80032d8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80032dc:	fab1 f181 	clz	r1, r1
 80032e0:	b2c9      	uxtb	r1, r1
 80032e2:	408b      	lsls	r3, r1
 80032e4:	494f      	ldr	r1, [pc, #316]	; (8003424 <HAL_RCC_OscConfig+0x63c>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	600b      	str	r3, [r1, #0]
 80032ea:	e06a      	b.n	80033c2 <HAL_RCC_OscConfig+0x5da>
 80032ec:	2301      	movs	r3, #1
 80032ee:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80032f6:	fa93 f3a3 	rbit	r3, r3
 80032fa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80032fe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003302:	fab3 f383 	clz	r3, r3
 8003306:	b2db      	uxtb	r3, r3
 8003308:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800330c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	461a      	mov	r2, r3
 8003314:	2300      	movs	r3, #0
 8003316:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003318:	f7fe f834 	bl	8001384 <HAL_GetTick>
 800331c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003320:	e00a      	b.n	8003338 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003322:	f7fe f82f 	bl	8001384 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d902      	bls.n	8003338 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	f000 bc66 	b.w	8003c04 <HAL_RCC_OscConfig+0xe1c>
 8003338:	2302      	movs	r3, #2
 800333a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003342:	fa93 f3a3 	rbit	r3, r3
 8003346:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800334a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800334e:	fab3 f383 	clz	r3, r3
 8003352:	b2db      	uxtb	r3, r3
 8003354:	095b      	lsrs	r3, r3, #5
 8003356:	b2db      	uxtb	r3, r3
 8003358:	f043 0301 	orr.w	r3, r3, #1
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b01      	cmp	r3, #1
 8003360:	d102      	bne.n	8003368 <HAL_RCC_OscConfig+0x580>
 8003362:	4b30      	ldr	r3, [pc, #192]	; (8003424 <HAL_RCC_OscConfig+0x63c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	e013      	b.n	8003390 <HAL_RCC_OscConfig+0x5a8>
 8003368:	2302      	movs	r3, #2
 800336a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003372:	fa93 f3a3 	rbit	r3, r3
 8003376:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800337a:	2302      	movs	r3, #2
 800337c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003380:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003384:	fa93 f3a3 	rbit	r3, r3
 8003388:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800338c:	4b25      	ldr	r3, [pc, #148]	; (8003424 <HAL_RCC_OscConfig+0x63c>)
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	2202      	movs	r2, #2
 8003392:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003396:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800339a:	fa92 f2a2 	rbit	r2, r2
 800339e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80033a2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80033a6:	fab2 f282 	clz	r2, r2
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	f042 0220 	orr.w	r2, r2, #32
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	f002 021f 	and.w	r2, r2, #31
 80033b6:	2101      	movs	r1, #1
 80033b8:	fa01 f202 	lsl.w	r2, r1, r2
 80033bc:	4013      	ands	r3, r2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1af      	bne.n	8003322 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033c2:	1d3b      	adds	r3, r7, #4
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0308 	and.w	r3, r3, #8
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 80da 	beq.w	8003586 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033d2:	1d3b      	adds	r3, r7, #4
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d069      	beq.n	80034b0 <HAL_RCC_OscConfig+0x6c8>
 80033dc:	2301      	movs	r3, #1
 80033de:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033e6:	fa93 f3a3 	rbit	r3, r3
 80033ea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80033ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033f2:	fab3 f383 	clz	r3, r3
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	461a      	mov	r2, r3
 80033fa:	4b0b      	ldr	r3, [pc, #44]	; (8003428 <HAL_RCC_OscConfig+0x640>)
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	461a      	mov	r2, r3
 8003402:	2301      	movs	r3, #1
 8003404:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003406:	f7fd ffbd 	bl	8001384 <HAL_GetTick>
 800340a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800340e:	e00d      	b.n	800342c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003410:	f7fd ffb8 	bl	8001384 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d905      	bls.n	800342c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e3ef      	b.n	8003c04 <HAL_RCC_OscConfig+0xe1c>
 8003424:	40021000 	.word	0x40021000
 8003428:	10908120 	.word	0x10908120
 800342c:	2302      	movs	r3, #2
 800342e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003432:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003436:	fa93 f2a3 	rbit	r2, r3
 800343a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003444:	2202      	movs	r2, #2
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	fa93 f2a3 	rbit	r2, r3
 8003452:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800345c:	2202      	movs	r2, #2
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	fa93 f2a3 	rbit	r2, r3
 800346a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800346e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003470:	4ba4      	ldr	r3, [pc, #656]	; (8003704 <HAL_RCC_OscConfig+0x91c>)
 8003472:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003474:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003478:	2102      	movs	r1, #2
 800347a:	6019      	str	r1, [r3, #0]
 800347c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	fa93 f1a3 	rbit	r1, r3
 8003486:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800348a:	6019      	str	r1, [r3, #0]
  return result;
 800348c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	fab3 f383 	clz	r3, r3
 8003496:	b2db      	uxtb	r3, r3
 8003498:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800349c:	b2db      	uxtb	r3, r3
 800349e:	f003 031f 	and.w	r3, r3, #31
 80034a2:	2101      	movs	r1, #1
 80034a4:	fa01 f303 	lsl.w	r3, r1, r3
 80034a8:	4013      	ands	r3, r2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0b0      	beq.n	8003410 <HAL_RCC_OscConfig+0x628>
 80034ae:	e06a      	b.n	8003586 <HAL_RCC_OscConfig+0x79e>
 80034b0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80034b4:	2201      	movs	r2, #1
 80034b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	fa93 f2a3 	rbit	r2, r3
 80034c2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80034c6:	601a      	str	r2, [r3, #0]
  return result;
 80034c8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80034cc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ce:	fab3 f383 	clz	r3, r3
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	461a      	mov	r2, r3
 80034d6:	4b8c      	ldr	r3, [pc, #560]	; (8003708 <HAL_RCC_OscConfig+0x920>)
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	461a      	mov	r2, r3
 80034de:	2300      	movs	r3, #0
 80034e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e2:	f7fd ff4f 	bl	8001384 <HAL_GetTick>
 80034e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034ea:	e009      	b.n	8003500 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ec:	f7fd ff4a 	bl	8001384 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e381      	b.n	8003c04 <HAL_RCC_OscConfig+0xe1c>
 8003500:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003504:	2202      	movs	r2, #2
 8003506:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003508:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	fa93 f2a3 	rbit	r2, r3
 8003512:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800351c:	2202      	movs	r2, #2
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	fa93 f2a3 	rbit	r2, r3
 800352a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003534:	2202      	movs	r2, #2
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	fa93 f2a3 	rbit	r2, r3
 8003542:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003546:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003548:	4b6e      	ldr	r3, [pc, #440]	; (8003704 <HAL_RCC_OscConfig+0x91c>)
 800354a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800354c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003550:	2102      	movs	r1, #2
 8003552:	6019      	str	r1, [r3, #0]
 8003554:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	fa93 f1a3 	rbit	r1, r3
 800355e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003562:	6019      	str	r1, [r3, #0]
  return result;
 8003564:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	fab3 f383 	clz	r3, r3
 800356e:	b2db      	uxtb	r3, r3
 8003570:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003574:	b2db      	uxtb	r3, r3
 8003576:	f003 031f 	and.w	r3, r3, #31
 800357a:	2101      	movs	r1, #1
 800357c:	fa01 f303 	lsl.w	r3, r1, r3
 8003580:	4013      	ands	r3, r2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1b2      	bne.n	80034ec <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003586:	1d3b      	adds	r3, r7, #4
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 8157 	beq.w	8003844 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003596:	2300      	movs	r3, #0
 8003598:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800359c:	4b59      	ldr	r3, [pc, #356]	; (8003704 <HAL_RCC_OscConfig+0x91c>)
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d112      	bne.n	80035ce <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035a8:	4b56      	ldr	r3, [pc, #344]	; (8003704 <HAL_RCC_OscConfig+0x91c>)
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	4a55      	ldr	r2, [pc, #340]	; (8003704 <HAL_RCC_OscConfig+0x91c>)
 80035ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035b2:	61d3      	str	r3, [r2, #28]
 80035b4:	4b53      	ldr	r3, [pc, #332]	; (8003704 <HAL_RCC_OscConfig+0x91c>)
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80035bc:	f107 030c 	add.w	r3, r7, #12
 80035c0:	601a      	str	r2, [r3, #0]
 80035c2:	f107 030c 	add.w	r3, r7, #12
 80035c6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80035c8:	2301      	movs	r3, #1
 80035ca:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ce:	4b4f      	ldr	r3, [pc, #316]	; (800370c <HAL_RCC_OscConfig+0x924>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d11a      	bne.n	8003610 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035da:	4b4c      	ldr	r3, [pc, #304]	; (800370c <HAL_RCC_OscConfig+0x924>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a4b      	ldr	r2, [pc, #300]	; (800370c <HAL_RCC_OscConfig+0x924>)
 80035e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035e6:	f7fd fecd 	bl	8001384 <HAL_GetTick>
 80035ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ee:	e009      	b.n	8003604 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f0:	f7fd fec8 	bl	8001384 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b64      	cmp	r3, #100	; 0x64
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e2ff      	b.n	8003c04 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003604:	4b41      	ldr	r3, [pc, #260]	; (800370c <HAL_RCC_OscConfig+0x924>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0ef      	beq.n	80035f0 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003610:	1d3b      	adds	r3, r7, #4
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d106      	bne.n	8003628 <HAL_RCC_OscConfig+0x840>
 800361a:	4b3a      	ldr	r3, [pc, #232]	; (8003704 <HAL_RCC_OscConfig+0x91c>)
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	4a39      	ldr	r2, [pc, #228]	; (8003704 <HAL_RCC_OscConfig+0x91c>)
 8003620:	f043 0301 	orr.w	r3, r3, #1
 8003624:	6213      	str	r3, [r2, #32]
 8003626:	e02f      	b.n	8003688 <HAL_RCC_OscConfig+0x8a0>
 8003628:	1d3b      	adds	r3, r7, #4
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10c      	bne.n	800364c <HAL_RCC_OscConfig+0x864>
 8003632:	4b34      	ldr	r3, [pc, #208]	; (8003704 <HAL_RCC_OscConfig+0x91c>)
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	4a33      	ldr	r2, [pc, #204]	; (8003704 <HAL_RCC_OscConfig+0x91c>)
 8003638:	f023 0301 	bic.w	r3, r3, #1
 800363c:	6213      	str	r3, [r2, #32]
 800363e:	4b31      	ldr	r3, [pc, #196]	; (8003704 <HAL_RCC_OscConfig+0x91c>)
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	4a30      	ldr	r2, [pc, #192]	; (8003704 <HAL_RCC_OscConfig+0x91c>)
 8003644:	f023 0304 	bic.w	r3, r3, #4
 8003648:	6213      	str	r3, [r2, #32]
 800364a:	e01d      	b.n	8003688 <HAL_RCC_OscConfig+0x8a0>
 800364c:	1d3b      	adds	r3, r7, #4
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	2b05      	cmp	r3, #5
 8003654:	d10c      	bne.n	8003670 <HAL_RCC_OscConfig+0x888>
 8003656:	4b2b      	ldr	r3, [pc, #172]	; (8003704 <HAL_RCC_OscConfig+0x91c>)
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	4a2a      	ldr	r2, [pc, #168]	; (8003704 <HAL_RCC_OscConfig+0x91c>)
 800365c:	f043 0304 	orr.w	r3, r3, #4
 8003660:	6213      	str	r3, [r2, #32]
 8003662:	4b28      	ldr	r3, [pc, #160]	; (8003704 <HAL_RCC_OscConfig+0x91c>)
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	4a27      	ldr	r2, [pc, #156]	; (8003704 <HAL_RCC_OscConfig+0x91c>)
 8003668:	f043 0301 	orr.w	r3, r3, #1
 800366c:	6213      	str	r3, [r2, #32]
 800366e:	e00b      	b.n	8003688 <HAL_RCC_OscConfig+0x8a0>
 8003670:	4b24      	ldr	r3, [pc, #144]	; (8003704 <HAL_RCC_OscConfig+0x91c>)
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	4a23      	ldr	r2, [pc, #140]	; (8003704 <HAL_RCC_OscConfig+0x91c>)
 8003676:	f023 0301 	bic.w	r3, r3, #1
 800367a:	6213      	str	r3, [r2, #32]
 800367c:	4b21      	ldr	r3, [pc, #132]	; (8003704 <HAL_RCC_OscConfig+0x91c>)
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	4a20      	ldr	r2, [pc, #128]	; (8003704 <HAL_RCC_OscConfig+0x91c>)
 8003682:	f023 0304 	bic.w	r3, r3, #4
 8003686:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003688:	1d3b      	adds	r3, r7, #4
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d06a      	beq.n	8003768 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003692:	f7fd fe77 	bl	8001384 <HAL_GetTick>
 8003696:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369a:	e00b      	b.n	80036b4 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800369c:	f7fd fe72 	bl	8001384 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e2a7      	b.n	8003c04 <HAL_RCC_OscConfig+0xe1c>
 80036b4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80036b8:	2202      	movs	r2, #2
 80036ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036bc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	fa93 f2a3 	rbit	r2, r3
 80036c6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80036d0:	2202      	movs	r2, #2
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	fa93 f2a3 	rbit	r2, r3
 80036de:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80036e2:	601a      	str	r2, [r3, #0]
  return result;
 80036e4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80036e8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ea:	fab3 f383 	clz	r3, r3
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	095b      	lsrs	r3, r3, #5
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	f043 0302 	orr.w	r3, r3, #2
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d108      	bne.n	8003710 <HAL_RCC_OscConfig+0x928>
 80036fe:	4b01      	ldr	r3, [pc, #4]	; (8003704 <HAL_RCC_OscConfig+0x91c>)
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	e013      	b.n	800372c <HAL_RCC_OscConfig+0x944>
 8003704:	40021000 	.word	0x40021000
 8003708:	10908120 	.word	0x10908120
 800370c:	40007000 	.word	0x40007000
 8003710:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003714:	2202      	movs	r2, #2
 8003716:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003718:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	fa93 f2a3 	rbit	r2, r3
 8003722:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	4bc0      	ldr	r3, [pc, #768]	; (8003a2c <HAL_RCC_OscConfig+0xc44>)
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003730:	2102      	movs	r1, #2
 8003732:	6011      	str	r1, [r2, #0]
 8003734:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003738:	6812      	ldr	r2, [r2, #0]
 800373a:	fa92 f1a2 	rbit	r1, r2
 800373e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003742:	6011      	str	r1, [r2, #0]
  return result;
 8003744:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003748:	6812      	ldr	r2, [r2, #0]
 800374a:	fab2 f282 	clz	r2, r2
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	f002 021f 	and.w	r2, r2, #31
 800375a:	2101      	movs	r1, #1
 800375c:	fa01 f202 	lsl.w	r2, r1, r2
 8003760:	4013      	ands	r3, r2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d09a      	beq.n	800369c <HAL_RCC_OscConfig+0x8b4>
 8003766:	e063      	b.n	8003830 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003768:	f7fd fe0c 	bl	8001384 <HAL_GetTick>
 800376c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003770:	e00b      	b.n	800378a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003772:	f7fd fe07 	bl	8001384 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003782:	4293      	cmp	r3, r2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e23c      	b.n	8003c04 <HAL_RCC_OscConfig+0xe1c>
 800378a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800378e:	2202      	movs	r2, #2
 8003790:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003792:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	fa93 f2a3 	rbit	r2, r3
 800379c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80037a6:	2202      	movs	r2, #2
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	fa93 f2a3 	rbit	r2, r3
 80037b4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80037b8:	601a      	str	r2, [r3, #0]
  return result;
 80037ba:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80037be:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037c0:	fab3 f383 	clz	r3, r3
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	095b      	lsrs	r3, r3, #5
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	f043 0302 	orr.w	r3, r3, #2
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d102      	bne.n	80037da <HAL_RCC_OscConfig+0x9f2>
 80037d4:	4b95      	ldr	r3, [pc, #596]	; (8003a2c <HAL_RCC_OscConfig+0xc44>)
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	e00d      	b.n	80037f6 <HAL_RCC_OscConfig+0xa0e>
 80037da:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80037de:	2202      	movs	r2, #2
 80037e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	fa93 f2a3 	rbit	r2, r3
 80037ec:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	4b8e      	ldr	r3, [pc, #568]	; (8003a2c <HAL_RCC_OscConfig+0xc44>)
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80037fa:	2102      	movs	r1, #2
 80037fc:	6011      	str	r1, [r2, #0]
 80037fe:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003802:	6812      	ldr	r2, [r2, #0]
 8003804:	fa92 f1a2 	rbit	r1, r2
 8003808:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800380c:	6011      	str	r1, [r2, #0]
  return result;
 800380e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003812:	6812      	ldr	r2, [r2, #0]
 8003814:	fab2 f282 	clz	r2, r2
 8003818:	b2d2      	uxtb	r2, r2
 800381a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	f002 021f 	and.w	r2, r2, #31
 8003824:	2101      	movs	r1, #1
 8003826:	fa01 f202 	lsl.w	r2, r1, r2
 800382a:	4013      	ands	r3, r2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1a0      	bne.n	8003772 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003830:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003834:	2b01      	cmp	r3, #1
 8003836:	d105      	bne.n	8003844 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003838:	4b7c      	ldr	r3, [pc, #496]	; (8003a2c <HAL_RCC_OscConfig+0xc44>)
 800383a:	69db      	ldr	r3, [r3, #28]
 800383c:	4a7b      	ldr	r2, [pc, #492]	; (8003a2c <HAL_RCC_OscConfig+0xc44>)
 800383e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003842:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003844:	1d3b      	adds	r3, r7, #4
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 81d9 	beq.w	8003c02 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003850:	4b76      	ldr	r3, [pc, #472]	; (8003a2c <HAL_RCC_OscConfig+0xc44>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f003 030c 	and.w	r3, r3, #12
 8003858:	2b08      	cmp	r3, #8
 800385a:	f000 81a6 	beq.w	8003baa <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800385e:	1d3b      	adds	r3, r7, #4
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	2b02      	cmp	r3, #2
 8003866:	f040 811e 	bne.w	8003aa6 <HAL_RCC_OscConfig+0xcbe>
 800386a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800386e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003872:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003874:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	fa93 f2a3 	rbit	r2, r3
 800387e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003882:	601a      	str	r2, [r3, #0]
  return result;
 8003884:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003888:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800388a:	fab3 f383 	clz	r3, r3
 800388e:	b2db      	uxtb	r3, r3
 8003890:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003894:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	461a      	mov	r2, r3
 800389c:	2300      	movs	r3, #0
 800389e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a0:	f7fd fd70 	bl	8001384 <HAL_GetTick>
 80038a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038a8:	e009      	b.n	80038be <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038aa:	f7fd fd6b 	bl	8001384 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e1a2      	b.n	8003c04 <HAL_RCC_OscConfig+0xe1c>
 80038be:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80038c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	fa93 f2a3 	rbit	r2, r3
 80038d2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80038d6:	601a      	str	r2, [r3, #0]
  return result;
 80038d8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80038dc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038de:	fab3 f383 	clz	r3, r3
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	095b      	lsrs	r3, r3, #5
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	f043 0301 	orr.w	r3, r3, #1
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d102      	bne.n	80038f8 <HAL_RCC_OscConfig+0xb10>
 80038f2:	4b4e      	ldr	r3, [pc, #312]	; (8003a2c <HAL_RCC_OscConfig+0xc44>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	e01b      	b.n	8003930 <HAL_RCC_OscConfig+0xb48>
 80038f8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80038fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003900:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003902:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	fa93 f2a3 	rbit	r2, r3
 800390c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003916:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	fa93 f2a3 	rbit	r2, r3
 8003926:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	4b3f      	ldr	r3, [pc, #252]	; (8003a2c <HAL_RCC_OscConfig+0xc44>)
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003934:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003938:	6011      	str	r1, [r2, #0]
 800393a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800393e:	6812      	ldr	r2, [r2, #0]
 8003940:	fa92 f1a2 	rbit	r1, r2
 8003944:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003948:	6011      	str	r1, [r2, #0]
  return result;
 800394a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800394e:	6812      	ldr	r2, [r2, #0]
 8003950:	fab2 f282 	clz	r2, r2
 8003954:	b2d2      	uxtb	r2, r2
 8003956:	f042 0220 	orr.w	r2, r2, #32
 800395a:	b2d2      	uxtb	r2, r2
 800395c:	f002 021f 	and.w	r2, r2, #31
 8003960:	2101      	movs	r1, #1
 8003962:	fa01 f202 	lsl.w	r2, r1, r2
 8003966:	4013      	ands	r3, r2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d19e      	bne.n	80038aa <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800396c:	4b2f      	ldr	r3, [pc, #188]	; (8003a2c <HAL_RCC_OscConfig+0xc44>)
 800396e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003970:	f023 020f 	bic.w	r2, r3, #15
 8003974:	1d3b      	adds	r3, r7, #4
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	492c      	ldr	r1, [pc, #176]	; (8003a2c <HAL_RCC_OscConfig+0xc44>)
 800397c:	4313      	orrs	r3, r2
 800397e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003980:	4b2a      	ldr	r3, [pc, #168]	; (8003a2c <HAL_RCC_OscConfig+0xc44>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003988:	1d3b      	adds	r3, r7, #4
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6a19      	ldr	r1, [r3, #32]
 800398e:	1d3b      	adds	r3, r7, #4
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	430b      	orrs	r3, r1
 8003996:	4925      	ldr	r1, [pc, #148]	; (8003a2c <HAL_RCC_OscConfig+0xc44>)
 8003998:	4313      	orrs	r3, r2
 800399a:	604b      	str	r3, [r1, #4]
 800399c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80039a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	fa93 f2a3 	rbit	r2, r3
 80039b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80039b4:	601a      	str	r2, [r3, #0]
  return result;
 80039b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80039ba:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039bc:	fab3 f383 	clz	r3, r3
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039c6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	461a      	mov	r2, r3
 80039ce:	2301      	movs	r3, #1
 80039d0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d2:	f7fd fcd7 	bl	8001384 <HAL_GetTick>
 80039d6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039da:	e009      	b.n	80039f0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039dc:	f7fd fcd2 	bl	8001384 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e109      	b.n	8003c04 <HAL_RCC_OscConfig+0xe1c>
 80039f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80039f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	fa93 f2a3 	rbit	r2, r3
 8003a04:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a08:	601a      	str	r2, [r3, #0]
  return result;
 8003a0a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a0e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a10:	fab3 f383 	clz	r3, r3
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	095b      	lsrs	r3, r3, #5
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	f043 0301 	orr.w	r3, r3, #1
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d105      	bne.n	8003a30 <HAL_RCC_OscConfig+0xc48>
 8003a24:	4b01      	ldr	r3, [pc, #4]	; (8003a2c <HAL_RCC_OscConfig+0xc44>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	e01e      	b.n	8003a68 <HAL_RCC_OscConfig+0xc80>
 8003a2a:	bf00      	nop
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	fa93 f2a3 	rbit	r2, r3
 8003a44:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003a4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	fa93 f2a3 	rbit	r2, r3
 8003a5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	4b6a      	ldr	r3, [pc, #424]	; (8003c10 <HAL_RCC_OscConfig+0xe28>)
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003a6c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a70:	6011      	str	r1, [r2, #0]
 8003a72:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003a76:	6812      	ldr	r2, [r2, #0]
 8003a78:	fa92 f1a2 	rbit	r1, r2
 8003a7c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003a80:	6011      	str	r1, [r2, #0]
  return result;
 8003a82:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003a86:	6812      	ldr	r2, [r2, #0]
 8003a88:	fab2 f282 	clz	r2, r2
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	f042 0220 	orr.w	r2, r2, #32
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	f002 021f 	and.w	r2, r2, #31
 8003a98:	2101      	movs	r1, #1
 8003a9a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d09b      	beq.n	80039dc <HAL_RCC_OscConfig+0xbf4>
 8003aa4:	e0ad      	b.n	8003c02 <HAL_RCC_OscConfig+0xe1a>
 8003aa6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003aaa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003aae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	fa93 f2a3 	rbit	r2, r3
 8003aba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003abe:	601a      	str	r2, [r3, #0]
  return result;
 8003ac0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ac4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ac6:	fab3 f383 	clz	r3, r3
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ad0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	2300      	movs	r3, #0
 8003ada:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003adc:	f7fd fc52 	bl	8001384 <HAL_GetTick>
 8003ae0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ae4:	e009      	b.n	8003afa <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ae6:	f7fd fc4d 	bl	8001384 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e084      	b.n	8003c04 <HAL_RCC_OscConfig+0xe1c>
 8003afa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003afe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	fa93 f2a3 	rbit	r2, r3
 8003b0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b12:	601a      	str	r2, [r3, #0]
  return result;
 8003b14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b18:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b1a:	fab3 f383 	clz	r3, r3
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	095b      	lsrs	r3, r3, #5
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	f043 0301 	orr.w	r3, r3, #1
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d102      	bne.n	8003b34 <HAL_RCC_OscConfig+0xd4c>
 8003b2e:	4b38      	ldr	r3, [pc, #224]	; (8003c10 <HAL_RCC_OscConfig+0xe28>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	e01b      	b.n	8003b6c <HAL_RCC_OscConfig+0xd84>
 8003b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	fa93 f2a3 	rbit	r2, r3
 8003b48:	f107 0320 	add.w	r3, r7, #32
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	f107 031c 	add.w	r3, r7, #28
 8003b52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	f107 031c 	add.w	r3, r7, #28
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	fa93 f2a3 	rbit	r2, r3
 8003b62:	f107 0318 	add.w	r3, r7, #24
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	4b29      	ldr	r3, [pc, #164]	; (8003c10 <HAL_RCC_OscConfig+0xe28>)
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6c:	f107 0214 	add.w	r2, r7, #20
 8003b70:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003b74:	6011      	str	r1, [r2, #0]
 8003b76:	f107 0214 	add.w	r2, r7, #20
 8003b7a:	6812      	ldr	r2, [r2, #0]
 8003b7c:	fa92 f1a2 	rbit	r1, r2
 8003b80:	f107 0210 	add.w	r2, r7, #16
 8003b84:	6011      	str	r1, [r2, #0]
  return result;
 8003b86:	f107 0210 	add.w	r2, r7, #16
 8003b8a:	6812      	ldr	r2, [r2, #0]
 8003b8c:	fab2 f282 	clz	r2, r2
 8003b90:	b2d2      	uxtb	r2, r2
 8003b92:	f042 0220 	orr.w	r2, r2, #32
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	f002 021f 	and.w	r2, r2, #31
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d19e      	bne.n	8003ae6 <HAL_RCC_OscConfig+0xcfe>
 8003ba8:	e02b      	b.n	8003c02 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003baa:	1d3b      	adds	r3, r7, #4
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d101      	bne.n	8003bb8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e025      	b.n	8003c04 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bb8:	4b15      	ldr	r3, [pc, #84]	; (8003c10 <HAL_RCC_OscConfig+0xe28>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003bc0:	4b13      	ldr	r3, [pc, #76]	; (8003c10 <HAL_RCC_OscConfig+0xe28>)
 8003bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003bc8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003bcc:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003bd0:	1d3b      	adds	r3, r7, #4
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d111      	bne.n	8003bfe <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003bda:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003bde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003be2:	1d3b      	adds	r3, r7, #4
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d108      	bne.n	8003bfe <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003bec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bf0:	f003 020f 	and.w	r2, r3, #15
 8003bf4:	1d3b      	adds	r3, r7, #4
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d001      	beq.n	8003c02 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e000      	b.n	8003c04 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40021000 	.word	0x40021000

08003c14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b09e      	sub	sp, #120	; 0x78
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e162      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c2c:	4b90      	ldr	r3, [pc, #576]	; (8003e70 <HAL_RCC_ClockConfig+0x25c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d910      	bls.n	8003c5c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3a:	4b8d      	ldr	r3, [pc, #564]	; (8003e70 <HAL_RCC_ClockConfig+0x25c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f023 0207 	bic.w	r2, r3, #7
 8003c42:	498b      	ldr	r1, [pc, #556]	; (8003e70 <HAL_RCC_ClockConfig+0x25c>)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c4a:	4b89      	ldr	r3, [pc, #548]	; (8003e70 <HAL_RCC_ClockConfig+0x25c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d001      	beq.n	8003c5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e14a      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d008      	beq.n	8003c7a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c68:	4b82      	ldr	r3, [pc, #520]	; (8003e74 <HAL_RCC_ClockConfig+0x260>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	497f      	ldr	r1, [pc, #508]	; (8003e74 <HAL_RCC_ClockConfig+0x260>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 80dc 	beq.w	8003e40 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d13c      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xf6>
 8003c90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c94:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c98:	fa93 f3a3 	rbit	r3, r3
 8003c9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ca0:	fab3 f383 	clz	r3, r3
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	095b      	lsrs	r3, r3, #5
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	f043 0301 	orr.w	r3, r3, #1
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d102      	bne.n	8003cba <HAL_RCC_ClockConfig+0xa6>
 8003cb4:	4b6f      	ldr	r3, [pc, #444]	; (8003e74 <HAL_RCC_ClockConfig+0x260>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	e00f      	b.n	8003cda <HAL_RCC_ClockConfig+0xc6>
 8003cba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cbe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cc2:	fa93 f3a3 	rbit	r3, r3
 8003cc6:	667b      	str	r3, [r7, #100]	; 0x64
 8003cc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ccc:	663b      	str	r3, [r7, #96]	; 0x60
 8003cce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cd0:	fa93 f3a3 	rbit	r3, r3
 8003cd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cd6:	4b67      	ldr	r3, [pc, #412]	; (8003e74 <HAL_RCC_ClockConfig+0x260>)
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003cde:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ce0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ce2:	fa92 f2a2 	rbit	r2, r2
 8003ce6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003ce8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003cea:	fab2 f282 	clz	r2, r2
 8003cee:	b2d2      	uxtb	r2, r2
 8003cf0:	f042 0220 	orr.w	r2, r2, #32
 8003cf4:	b2d2      	uxtb	r2, r2
 8003cf6:	f002 021f 	and.w	r2, r2, #31
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8003d00:	4013      	ands	r3, r2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d17b      	bne.n	8003dfe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e0f3      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d13c      	bne.n	8003d8c <HAL_RCC_ClockConfig+0x178>
 8003d12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d16:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d1a:	fa93 f3a3 	rbit	r3, r3
 8003d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003d20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d22:	fab3 f383 	clz	r3, r3
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	095b      	lsrs	r3, r3, #5
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	f043 0301 	orr.w	r3, r3, #1
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d102      	bne.n	8003d3c <HAL_RCC_ClockConfig+0x128>
 8003d36:	4b4f      	ldr	r3, [pc, #316]	; (8003e74 <HAL_RCC_ClockConfig+0x260>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	e00f      	b.n	8003d5c <HAL_RCC_ClockConfig+0x148>
 8003d3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d40:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d44:	fa93 f3a3 	rbit	r3, r3
 8003d48:	647b      	str	r3, [r7, #68]	; 0x44
 8003d4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d4e:	643b      	str	r3, [r7, #64]	; 0x40
 8003d50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d52:	fa93 f3a3 	rbit	r3, r3
 8003d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d58:	4b46      	ldr	r3, [pc, #280]	; (8003e74 <HAL_RCC_ClockConfig+0x260>)
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d60:	63ba      	str	r2, [r7, #56]	; 0x38
 8003d62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d64:	fa92 f2a2 	rbit	r2, r2
 8003d68:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003d6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d6c:	fab2 f282 	clz	r2, r2
 8003d70:	b2d2      	uxtb	r2, r2
 8003d72:	f042 0220 	orr.w	r2, r2, #32
 8003d76:	b2d2      	uxtb	r2, r2
 8003d78:	f002 021f 	and.w	r2, r2, #31
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d82:	4013      	ands	r3, r2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d13a      	bne.n	8003dfe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e0b2      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x2de>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d92:	fa93 f3a3 	rbit	r3, r3
 8003d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d9a:	fab3 f383 	clz	r3, r3
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	095b      	lsrs	r3, r3, #5
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	f043 0301 	orr.w	r3, r3, #1
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d102      	bne.n	8003db4 <HAL_RCC_ClockConfig+0x1a0>
 8003dae:	4b31      	ldr	r3, [pc, #196]	; (8003e74 <HAL_RCC_ClockConfig+0x260>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	e00d      	b.n	8003dd0 <HAL_RCC_ClockConfig+0x1bc>
 8003db4:	2302      	movs	r3, #2
 8003db6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dba:	fa93 f3a3 	rbit	r3, r3
 8003dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	623b      	str	r3, [r7, #32]
 8003dc4:	6a3b      	ldr	r3, [r7, #32]
 8003dc6:	fa93 f3a3 	rbit	r3, r3
 8003dca:	61fb      	str	r3, [r7, #28]
 8003dcc:	4b29      	ldr	r3, [pc, #164]	; (8003e74 <HAL_RCC_ClockConfig+0x260>)
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	2202      	movs	r2, #2
 8003dd2:	61ba      	str	r2, [r7, #24]
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	fa92 f2a2 	rbit	r2, r2
 8003dda:	617a      	str	r2, [r7, #20]
  return result;
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	fab2 f282 	clz	r2, r2
 8003de2:	b2d2      	uxtb	r2, r2
 8003de4:	f042 0220 	orr.w	r2, r2, #32
 8003de8:	b2d2      	uxtb	r2, r2
 8003dea:	f002 021f 	and.w	r2, r2, #31
 8003dee:	2101      	movs	r1, #1
 8003df0:	fa01 f202 	lsl.w	r2, r1, r2
 8003df4:	4013      	ands	r3, r2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e079      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dfe:	4b1d      	ldr	r3, [pc, #116]	; (8003e74 <HAL_RCC_ClockConfig+0x260>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f023 0203 	bic.w	r2, r3, #3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	491a      	ldr	r1, [pc, #104]	; (8003e74 <HAL_RCC_ClockConfig+0x260>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e10:	f7fd fab8 	bl	8001384 <HAL_GetTick>
 8003e14:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e16:	e00a      	b.n	8003e2e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e18:	f7fd fab4 	bl	8001384 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e061      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e2e:	4b11      	ldr	r3, [pc, #68]	; (8003e74 <HAL_RCC_ClockConfig+0x260>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f003 020c 	and.w	r2, r3, #12
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d1eb      	bne.n	8003e18 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e40:	4b0b      	ldr	r3, [pc, #44]	; (8003e70 <HAL_RCC_ClockConfig+0x25c>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d214      	bcs.n	8003e78 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e4e:	4b08      	ldr	r3, [pc, #32]	; (8003e70 <HAL_RCC_ClockConfig+0x25c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f023 0207 	bic.w	r2, r3, #7
 8003e56:	4906      	ldr	r1, [pc, #24]	; (8003e70 <HAL_RCC_ClockConfig+0x25c>)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e5e:	4b04      	ldr	r3, [pc, #16]	; (8003e70 <HAL_RCC_ClockConfig+0x25c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0307 	and.w	r3, r3, #7
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d005      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e040      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x2de>
 8003e70:	40022000 	.word	0x40022000
 8003e74:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d008      	beq.n	8003e96 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e84:	4b1d      	ldr	r3, [pc, #116]	; (8003efc <HAL_RCC_ClockConfig+0x2e8>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	491a      	ldr	r1, [pc, #104]	; (8003efc <HAL_RCC_ClockConfig+0x2e8>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0308 	and.w	r3, r3, #8
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d009      	beq.n	8003eb6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ea2:	4b16      	ldr	r3, [pc, #88]	; (8003efc <HAL_RCC_ClockConfig+0x2e8>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	4912      	ldr	r1, [pc, #72]	; (8003efc <HAL_RCC_ClockConfig+0x2e8>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003eb6:	f000 f829 	bl	8003f0c <HAL_RCC_GetSysClockFreq>
 8003eba:	4601      	mov	r1, r0
 8003ebc:	4b0f      	ldr	r3, [pc, #60]	; (8003efc <HAL_RCC_ClockConfig+0x2e8>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ec4:	22f0      	movs	r2, #240	; 0xf0
 8003ec6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	fa92 f2a2 	rbit	r2, r2
 8003ece:	60fa      	str	r2, [r7, #12]
  return result;
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	fab2 f282 	clz	r2, r2
 8003ed6:	b2d2      	uxtb	r2, r2
 8003ed8:	40d3      	lsrs	r3, r2
 8003eda:	4a09      	ldr	r2, [pc, #36]	; (8003f00 <HAL_RCC_ClockConfig+0x2ec>)
 8003edc:	5cd3      	ldrb	r3, [r2, r3]
 8003ede:	fa21 f303 	lsr.w	r3, r1, r3
 8003ee2:	4a08      	ldr	r2, [pc, #32]	; (8003f04 <HAL_RCC_ClockConfig+0x2f0>)
 8003ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003ee6:	4b08      	ldr	r3, [pc, #32]	; (8003f08 <HAL_RCC_ClockConfig+0x2f4>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7fd fa06 	bl	80012fc <HAL_InitTick>
  
  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3778      	adds	r7, #120	; 0x78
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	40021000 	.word	0x40021000
 8003f00:	08005fb4 	.word	0x08005fb4
 8003f04:	20000010 	.word	0x20000010
 8003f08:	20000014 	.word	0x20000014

08003f0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b08b      	sub	sp, #44	; 0x2c
 8003f10:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	61fb      	str	r3, [r7, #28]
 8003f16:	2300      	movs	r3, #0
 8003f18:	61bb      	str	r3, [r7, #24]
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f1e:	2300      	movs	r3, #0
 8003f20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003f26:	4b2a      	ldr	r3, [pc, #168]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	f003 030c 	and.w	r3, r3, #12
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d002      	beq.n	8003f3c <HAL_RCC_GetSysClockFreq+0x30>
 8003f36:	2b08      	cmp	r3, #8
 8003f38:	d003      	beq.n	8003f42 <HAL_RCC_GetSysClockFreq+0x36>
 8003f3a:	e03f      	b.n	8003fbc <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f3c:	4b25      	ldr	r3, [pc, #148]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003f3e:	623b      	str	r3, [r7, #32]
      break;
 8003f40:	e03f      	b.n	8003fc2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003f48:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003f4c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	fa92 f2a2 	rbit	r2, r2
 8003f54:	607a      	str	r2, [r7, #4]
  return result;
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	fab2 f282 	clz	r2, r2
 8003f5c:	b2d2      	uxtb	r2, r2
 8003f5e:	40d3      	lsrs	r3, r2
 8003f60:	4a1d      	ldr	r2, [pc, #116]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003f62:	5cd3      	ldrb	r3, [r2, r3]
 8003f64:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003f66:	4b1a      	ldr	r3, [pc, #104]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	220f      	movs	r2, #15
 8003f70:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	fa92 f2a2 	rbit	r2, r2
 8003f78:	60fa      	str	r2, [r7, #12]
  return result;
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	fab2 f282 	clz	r2, r2
 8003f80:	b2d2      	uxtb	r2, r2
 8003f82:	40d3      	lsrs	r3, r2
 8003f84:	4a15      	ldr	r2, [pc, #84]	; (8003fdc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003f86:	5cd3      	ldrb	r3, [r2, r3]
 8003f88:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d008      	beq.n	8003fa6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f94:	4a0f      	ldr	r2, [pc, #60]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	fb02 f303 	mul.w	r3, r2, r3
 8003fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8003fa4:	e007      	b.n	8003fb6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003fa6:	4a0b      	ldr	r2, [pc, #44]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	fb02 f303 	mul.w	r3, r2, r3
 8003fb4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	623b      	str	r3, [r7, #32]
      break;
 8003fba:	e002      	b.n	8003fc2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fbc:	4b05      	ldr	r3, [pc, #20]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003fbe:	623b      	str	r3, [r7, #32]
      break;
 8003fc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	372c      	adds	r7, #44	; 0x2c
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	007a1200 	.word	0x007a1200
 8003fd8:	08005fcc 	.word	0x08005fcc
 8003fdc:	08005fdc 	.word	0x08005fdc

08003fe0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fe4:	4b03      	ldr	r3, [pc, #12]	; (8003ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	20000010 	.word	0x20000010

08003ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003ffe:	f7ff ffef 	bl	8003fe0 <HAL_RCC_GetHCLKFreq>
 8004002:	4601      	mov	r1, r0
 8004004:	4b0b      	ldr	r3, [pc, #44]	; (8004034 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800400c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004010:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	fa92 f2a2 	rbit	r2, r2
 8004018:	603a      	str	r2, [r7, #0]
  return result;
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	fab2 f282 	clz	r2, r2
 8004020:	b2d2      	uxtb	r2, r2
 8004022:	40d3      	lsrs	r3, r2
 8004024:	4a04      	ldr	r2, [pc, #16]	; (8004038 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004026:	5cd3      	ldrb	r3, [r2, r3]
 8004028:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800402c:	4618      	mov	r0, r3
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	40021000 	.word	0x40021000
 8004038:	08005fc4 	.word	0x08005fc4

0800403c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004042:	f7ff ffcd 	bl	8003fe0 <HAL_RCC_GetHCLKFreq>
 8004046:	4601      	mov	r1, r0
 8004048:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004050:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004054:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	fa92 f2a2 	rbit	r2, r2
 800405c:	603a      	str	r2, [r7, #0]
  return result;
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	fab2 f282 	clz	r2, r2
 8004064:	b2d2      	uxtb	r2, r2
 8004066:	40d3      	lsrs	r3, r2
 8004068:	4a04      	ldr	r2, [pc, #16]	; (800407c <HAL_RCC_GetPCLK2Freq+0x40>)
 800406a:	5cd3      	ldrb	r3, [r2, r3]
 800406c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004070:	4618      	mov	r0, r3
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	40021000 	.word	0x40021000
 800407c:	08005fc4 	.word	0x08005fc4

08004080 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b092      	sub	sp, #72	; 0x48
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004088:	2300      	movs	r3, #0
 800408a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800408c:	2300      	movs	r3, #0
 800408e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004090:	2300      	movs	r3, #0
 8004092:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 80d4 	beq.w	800424c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040a4:	4b4e      	ldr	r3, [pc, #312]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040a6:	69db      	ldr	r3, [r3, #28]
 80040a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10e      	bne.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040b0:	4b4b      	ldr	r3, [pc, #300]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	4a4a      	ldr	r2, [pc, #296]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ba:	61d3      	str	r3, [r2, #28]
 80040bc:	4b48      	ldr	r3, [pc, #288]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c4:	60bb      	str	r3, [r7, #8]
 80040c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040c8:	2301      	movs	r3, #1
 80040ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ce:	4b45      	ldr	r3, [pc, #276]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d118      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040da:	4b42      	ldr	r3, [pc, #264]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a41      	ldr	r2, [pc, #260]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040e6:	f7fd f94d 	bl	8001384 <HAL_GetTick>
 80040ea:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ec:	e008      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ee:	f7fd f949 	bl	8001384 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b64      	cmp	r3, #100	; 0x64
 80040fa:	d901      	bls.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e1d6      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004100:	4b38      	ldr	r3, [pc, #224]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0f0      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800410c:	4b34      	ldr	r3, [pc, #208]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004114:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 8084 	beq.w	8004226 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004126:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004128:	429a      	cmp	r2, r3
 800412a:	d07c      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800412c:	4b2c      	ldr	r3, [pc, #176]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004134:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004136:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800413a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413e:	fa93 f3a3 	rbit	r3, r3
 8004142:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004146:	fab3 f383 	clz	r3, r3
 800414a:	b2db      	uxtb	r3, r3
 800414c:	461a      	mov	r2, r3
 800414e:	4b26      	ldr	r3, [pc, #152]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004150:	4413      	add	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	461a      	mov	r2, r3
 8004156:	2301      	movs	r3, #1
 8004158:	6013      	str	r3, [r2, #0]
 800415a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800415e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004162:	fa93 f3a3 	rbit	r3, r3
 8004166:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800416a:	fab3 f383 	clz	r3, r3
 800416e:	b2db      	uxtb	r3, r3
 8004170:	461a      	mov	r2, r3
 8004172:	4b1d      	ldr	r3, [pc, #116]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004174:	4413      	add	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	461a      	mov	r2, r3
 800417a:	2300      	movs	r3, #0
 800417c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800417e:	4a18      	ldr	r2, [pc, #96]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004182:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d04b      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418e:	f7fd f8f9 	bl	8001384 <HAL_GetTick>
 8004192:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004194:	e00a      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004196:	f7fd f8f5 	bl	8001384 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d901      	bls.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e180      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80041ac:	2302      	movs	r3, #2
 80041ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b2:	fa93 f3a3 	rbit	r3, r3
 80041b6:	627b      	str	r3, [r7, #36]	; 0x24
 80041b8:	2302      	movs	r3, #2
 80041ba:	623b      	str	r3, [r7, #32]
 80041bc:	6a3b      	ldr	r3, [r7, #32]
 80041be:	fa93 f3a3 	rbit	r3, r3
 80041c2:	61fb      	str	r3, [r7, #28]
  return result;
 80041c4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041c6:	fab3 f383 	clz	r3, r3
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	095b      	lsrs	r3, r3, #5
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	f043 0302 	orr.w	r3, r3, #2
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d108      	bne.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80041da:	4b01      	ldr	r3, [pc, #4]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	e00d      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80041e0:	40021000 	.word	0x40021000
 80041e4:	40007000 	.word	0x40007000
 80041e8:	10908100 	.word	0x10908100
 80041ec:	2302      	movs	r3, #2
 80041ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	fa93 f3a3 	rbit	r3, r3
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	4ba0      	ldr	r3, [pc, #640]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fc:	2202      	movs	r2, #2
 80041fe:	613a      	str	r2, [r7, #16]
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	fa92 f2a2 	rbit	r2, r2
 8004206:	60fa      	str	r2, [r7, #12]
  return result;
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	fab2 f282 	clz	r2, r2
 800420e:	b2d2      	uxtb	r2, r2
 8004210:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004214:	b2d2      	uxtb	r2, r2
 8004216:	f002 021f 	and.w	r2, r2, #31
 800421a:	2101      	movs	r1, #1
 800421c:	fa01 f202 	lsl.w	r2, r1, r2
 8004220:	4013      	ands	r3, r2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0b7      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004226:	4b95      	ldr	r3, [pc, #596]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	4992      	ldr	r1, [pc, #584]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004234:	4313      	orrs	r3, r2
 8004236:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004238:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800423c:	2b01      	cmp	r3, #1
 800423e:	d105      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004240:	4b8e      	ldr	r3, [pc, #568]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	4a8d      	ldr	r2, [pc, #564]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004246:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800424a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	d008      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004258:	4b88      	ldr	r3, [pc, #544]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800425a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425c:	f023 0203 	bic.w	r2, r3, #3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	4985      	ldr	r1, [pc, #532]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004266:	4313      	orrs	r3, r2
 8004268:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d008      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004276:	4b81      	ldr	r3, [pc, #516]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	497e      	ldr	r1, [pc, #504]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004284:	4313      	orrs	r3, r2
 8004286:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	2b00      	cmp	r3, #0
 8004292:	d008      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004294:	4b79      	ldr	r3, [pc, #484]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004298:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	4976      	ldr	r1, [pc, #472]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0320 	and.w	r3, r3, #32
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d008      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042b2:	4b72      	ldr	r3, [pc, #456]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b6:	f023 0210 	bic.w	r2, r3, #16
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	496f      	ldr	r1, [pc, #444]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d008      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80042d0:	4b6a      	ldr	r3, [pc, #424]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042dc:	4967      	ldr	r1, [pc, #412]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d008      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042ee:	4b63      	ldr	r3, [pc, #396]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f2:	f023 0220 	bic.w	r2, r3, #32
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	4960      	ldr	r1, [pc, #384]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d008      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800430c:	4b5b      	ldr	r3, [pc, #364]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800430e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004310:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	4958      	ldr	r1, [pc, #352]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800431a:	4313      	orrs	r3, r2
 800431c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0308 	and.w	r3, r3, #8
 8004326:	2b00      	cmp	r3, #0
 8004328:	d008      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800432a:	4b54      	ldr	r3, [pc, #336]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800432c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	4951      	ldr	r1, [pc, #324]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004338:	4313      	orrs	r3, r2
 800433a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0310 	and.w	r3, r3, #16
 8004344:	2b00      	cmp	r3, #0
 8004346:	d008      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004348:	4b4c      	ldr	r3, [pc, #304]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800434a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	4949      	ldr	r1, [pc, #292]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004356:	4313      	orrs	r3, r2
 8004358:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004362:	2b00      	cmp	r3, #0
 8004364:	d008      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004366:	4b45      	ldr	r3, [pc, #276]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004372:	4942      	ldr	r1, [pc, #264]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004374:	4313      	orrs	r3, r2
 8004376:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004380:	2b00      	cmp	r3, #0
 8004382:	d008      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004384:	4b3d      	ldr	r3, [pc, #244]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004388:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004390:	493a      	ldr	r1, [pc, #232]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004392:	4313      	orrs	r3, r2
 8004394:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d008      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80043a2:	4b36      	ldr	r3, [pc, #216]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ae:	4933      	ldr	r1, [pc, #204]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d008      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80043c0:	4b2e      	ldr	r3, [pc, #184]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043cc:	492b      	ldr	r1, [pc, #172]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d008      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80043de:	4b27      	ldr	r3, [pc, #156]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	4924      	ldr	r1, [pc, #144]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d008      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80043fc:	4b1f      	ldr	r3, [pc, #124]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004400:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004408:	491c      	ldr	r1, [pc, #112]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800440a:	4313      	orrs	r3, r2
 800440c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d008      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800441a:	4b18      	ldr	r3, [pc, #96]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004426:	4915      	ldr	r1, [pc, #84]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004428:	4313      	orrs	r3, r2
 800442a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d008      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004438:	4b10      	ldr	r3, [pc, #64]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800443a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004444:	490d      	ldr	r1, [pc, #52]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004446:	4313      	orrs	r3, r2
 8004448:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d008      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004456:	4b09      	ldr	r3, [pc, #36]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004462:	4906      	ldr	r1, [pc, #24]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004464:	4313      	orrs	r3, r2
 8004466:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00c      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004474:	4b01      	ldr	r3, [pc, #4]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004478:	e002      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800447a:	bf00      	nop
 800447c:	40021000 	.word	0x40021000
 8004480:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004488:	490b      	ldr	r1, [pc, #44]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800448a:	4313      	orrs	r3, r2
 800448c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d008      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800449a:	4b07      	ldr	r3, [pc, #28]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800449c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044a6:	4904      	ldr	r1, [pc, #16]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3748      	adds	r7, #72	; 0x48
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	40021000 	.word	0x40021000

080044bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e049      	b.n	8004562 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d106      	bne.n	80044e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7fc fde8 	bl	80010b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2202      	movs	r2, #2
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3304      	adds	r3, #4
 80044f8:	4619      	mov	r1, r3
 80044fa:	4610      	mov	r0, r2
 80044fc:	f000 f9ee 	bl	80048dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
	...

0800456c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b01      	cmp	r3, #1
 800457e:	d001      	beq.n	8004584 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e04f      	b.n	8004624 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f042 0201 	orr.w	r2, r2, #1
 800459a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a23      	ldr	r2, [pc, #140]	; (8004630 <HAL_TIM_Base_Start_IT+0xc4>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d01d      	beq.n	80045e2 <HAL_TIM_Base_Start_IT+0x76>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ae:	d018      	beq.n	80045e2 <HAL_TIM_Base_Start_IT+0x76>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a1f      	ldr	r2, [pc, #124]	; (8004634 <HAL_TIM_Base_Start_IT+0xc8>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d013      	beq.n	80045e2 <HAL_TIM_Base_Start_IT+0x76>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a1e      	ldr	r2, [pc, #120]	; (8004638 <HAL_TIM_Base_Start_IT+0xcc>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d00e      	beq.n	80045e2 <HAL_TIM_Base_Start_IT+0x76>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a1c      	ldr	r2, [pc, #112]	; (800463c <HAL_TIM_Base_Start_IT+0xd0>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d009      	beq.n	80045e2 <HAL_TIM_Base_Start_IT+0x76>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a1b      	ldr	r2, [pc, #108]	; (8004640 <HAL_TIM_Base_Start_IT+0xd4>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d004      	beq.n	80045e2 <HAL_TIM_Base_Start_IT+0x76>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a19      	ldr	r2, [pc, #100]	; (8004644 <HAL_TIM_Base_Start_IT+0xd8>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d115      	bne.n	800460e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	689a      	ldr	r2, [r3, #8]
 80045e8:	4b17      	ldr	r3, [pc, #92]	; (8004648 <HAL_TIM_Base_Start_IT+0xdc>)
 80045ea:	4013      	ands	r3, r2
 80045ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2b06      	cmp	r3, #6
 80045f2:	d015      	beq.n	8004620 <HAL_TIM_Base_Start_IT+0xb4>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045fa:	d011      	beq.n	8004620 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0201 	orr.w	r2, r2, #1
 800460a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800460c:	e008      	b.n	8004620 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f042 0201 	orr.w	r2, r2, #1
 800461c:	601a      	str	r2, [r3, #0]
 800461e:	e000      	b.n	8004622 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004620:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	40012c00 	.word	0x40012c00
 8004634:	40000400 	.word	0x40000400
 8004638:	40000800 	.word	0x40000800
 800463c:	40013400 	.word	0x40013400
 8004640:	40014000 	.word	0x40014000
 8004644:	40015000 	.word	0x40015000
 8004648:	00010007 	.word	0x00010007

0800464c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b02      	cmp	r3, #2
 8004660:	d122      	bne.n	80046a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b02      	cmp	r3, #2
 800466e:	d11b      	bne.n	80046a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f06f 0202 	mvn.w	r2, #2
 8004678:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	f003 0303 	and.w	r3, r3, #3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f905 	bl	800489e <HAL_TIM_IC_CaptureCallback>
 8004694:	e005      	b.n	80046a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f8f7 	bl	800488a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 f908 	bl	80048b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	f003 0304 	and.w	r3, r3, #4
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d122      	bne.n	80046fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	2b04      	cmp	r3, #4
 80046c2:	d11b      	bne.n	80046fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f06f 0204 	mvn.w	r2, #4
 80046cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2202      	movs	r2, #2
 80046d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d003      	beq.n	80046ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f8db 	bl	800489e <HAL_TIM_IC_CaptureCallback>
 80046e8:	e005      	b.n	80046f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f8cd 	bl	800488a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 f8de 	bl	80048b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	f003 0308 	and.w	r3, r3, #8
 8004706:	2b08      	cmp	r3, #8
 8004708:	d122      	bne.n	8004750 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	f003 0308 	and.w	r3, r3, #8
 8004714:	2b08      	cmp	r3, #8
 8004716:	d11b      	bne.n	8004750 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f06f 0208 	mvn.w	r2, #8
 8004720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2204      	movs	r2, #4
 8004726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	f003 0303 	and.w	r3, r3, #3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f8b1 	bl	800489e <HAL_TIM_IC_CaptureCallback>
 800473c:	e005      	b.n	800474a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f8a3 	bl	800488a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f8b4 	bl	80048b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	f003 0310 	and.w	r3, r3, #16
 800475a:	2b10      	cmp	r3, #16
 800475c:	d122      	bne.n	80047a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f003 0310 	and.w	r3, r3, #16
 8004768:	2b10      	cmp	r3, #16
 800476a:	d11b      	bne.n	80047a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f06f 0210 	mvn.w	r2, #16
 8004774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2208      	movs	r2, #8
 800477a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f887 	bl	800489e <HAL_TIM_IC_CaptureCallback>
 8004790:	e005      	b.n	800479e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f879 	bl	800488a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f88a 	bl	80048b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d10e      	bne.n	80047d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d107      	bne.n	80047d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f06f 0201 	mvn.w	r2, #1
 80047c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7fc f936 	bl	8000a3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047da:	2b80      	cmp	r3, #128	; 0x80
 80047dc:	d10e      	bne.n	80047fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e8:	2b80      	cmp	r3, #128	; 0x80
 80047ea:	d107      	bne.n	80047fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f918 	bl	8004a2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800480a:	d10e      	bne.n	800482a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004816:	2b80      	cmp	r3, #128	; 0x80
 8004818:	d107      	bne.n	800482a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 f90b 	bl	8004a40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004834:	2b40      	cmp	r3, #64	; 0x40
 8004836:	d10e      	bne.n	8004856 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004842:	2b40      	cmp	r3, #64	; 0x40
 8004844:	d107      	bne.n	8004856 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800484e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f838 	bl	80048c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	f003 0320 	and.w	r3, r3, #32
 8004860:	2b20      	cmp	r3, #32
 8004862:	d10e      	bne.n	8004882 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	f003 0320 	and.w	r3, r3, #32
 800486e:	2b20      	cmp	r3, #32
 8004870:	d107      	bne.n	8004882 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f06f 0220 	mvn.w	r2, #32
 800487a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f8cb 	bl	8004a18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004882:	bf00      	nop
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr

080048b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048b2:	b480      	push	{r7}
 80048b4:	b083      	sub	sp, #12
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
	...

080048dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a42      	ldr	r2, [pc, #264]	; (80049f8 <TIM_Base_SetConfig+0x11c>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d013      	beq.n	800491c <TIM_Base_SetConfig+0x40>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048fa:	d00f      	beq.n	800491c <TIM_Base_SetConfig+0x40>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a3f      	ldr	r2, [pc, #252]	; (80049fc <TIM_Base_SetConfig+0x120>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d00b      	beq.n	800491c <TIM_Base_SetConfig+0x40>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a3e      	ldr	r2, [pc, #248]	; (8004a00 <TIM_Base_SetConfig+0x124>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d007      	beq.n	800491c <TIM_Base_SetConfig+0x40>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a3d      	ldr	r2, [pc, #244]	; (8004a04 <TIM_Base_SetConfig+0x128>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d003      	beq.n	800491c <TIM_Base_SetConfig+0x40>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a3c      	ldr	r2, [pc, #240]	; (8004a08 <TIM_Base_SetConfig+0x12c>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d108      	bne.n	800492e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	4313      	orrs	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a31      	ldr	r2, [pc, #196]	; (80049f8 <TIM_Base_SetConfig+0x11c>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d01f      	beq.n	8004976 <TIM_Base_SetConfig+0x9a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493c:	d01b      	beq.n	8004976 <TIM_Base_SetConfig+0x9a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a2e      	ldr	r2, [pc, #184]	; (80049fc <TIM_Base_SetConfig+0x120>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d017      	beq.n	8004976 <TIM_Base_SetConfig+0x9a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a2d      	ldr	r2, [pc, #180]	; (8004a00 <TIM_Base_SetConfig+0x124>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d013      	beq.n	8004976 <TIM_Base_SetConfig+0x9a>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a2c      	ldr	r2, [pc, #176]	; (8004a04 <TIM_Base_SetConfig+0x128>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d00f      	beq.n	8004976 <TIM_Base_SetConfig+0x9a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a2c      	ldr	r2, [pc, #176]	; (8004a0c <TIM_Base_SetConfig+0x130>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d00b      	beq.n	8004976 <TIM_Base_SetConfig+0x9a>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a2b      	ldr	r2, [pc, #172]	; (8004a10 <TIM_Base_SetConfig+0x134>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d007      	beq.n	8004976 <TIM_Base_SetConfig+0x9a>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a2a      	ldr	r2, [pc, #168]	; (8004a14 <TIM_Base_SetConfig+0x138>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d003      	beq.n	8004976 <TIM_Base_SetConfig+0x9a>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a25      	ldr	r2, [pc, #148]	; (8004a08 <TIM_Base_SetConfig+0x12c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d108      	bne.n	8004988 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800497c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	4313      	orrs	r3, r2
 8004986:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	4313      	orrs	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a12      	ldr	r2, [pc, #72]	; (80049f8 <TIM_Base_SetConfig+0x11c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d013      	beq.n	80049dc <TIM_Base_SetConfig+0x100>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a13      	ldr	r2, [pc, #76]	; (8004a04 <TIM_Base_SetConfig+0x128>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d00f      	beq.n	80049dc <TIM_Base_SetConfig+0x100>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a13      	ldr	r2, [pc, #76]	; (8004a0c <TIM_Base_SetConfig+0x130>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d00b      	beq.n	80049dc <TIM_Base_SetConfig+0x100>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a12      	ldr	r2, [pc, #72]	; (8004a10 <TIM_Base_SetConfig+0x134>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d007      	beq.n	80049dc <TIM_Base_SetConfig+0x100>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a11      	ldr	r2, [pc, #68]	; (8004a14 <TIM_Base_SetConfig+0x138>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d003      	beq.n	80049dc <TIM_Base_SetConfig+0x100>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a0c      	ldr	r2, [pc, #48]	; (8004a08 <TIM_Base_SetConfig+0x12c>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d103      	bne.n	80049e4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	691a      	ldr	r2, [r3, #16]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	615a      	str	r2, [r3, #20]
}
 80049ea:	bf00      	nop
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	40012c00 	.word	0x40012c00
 80049fc:	40000400 	.word	0x40000400
 8004a00:	40000800 	.word	0x40000800
 8004a04:	40013400 	.word	0x40013400
 8004a08:	40015000 	.word	0x40015000
 8004a0c:	40014000 	.word	0x40014000
 8004a10:	40014400 	.word	0x40014400
 8004a14:	40014800 	.word	0x40014800

08004a18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d101      	bne.n	8004a66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e040      	b.n	8004ae8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d106      	bne.n	8004a7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7fc fb44 	bl	8001104 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2224      	movs	r2, #36	; 0x24
 8004a80:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 0201 	bic.w	r2, r2, #1
 8004a90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 fc0e 	bl	80052b4 <UART_SetConfig>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d101      	bne.n	8004aa2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e022      	b.n	8004ae8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d002      	beq.n	8004ab0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 fdd6 	bl	800565c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004abe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689a      	ldr	r2, [r3, #8]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ace:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0201 	orr.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 fe5d 	bl	80057a0 <UART_CheckIdleState>
 8004ae6:	4603      	mov	r3, r0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b08a      	sub	sp, #40	; 0x28
 8004af4:	af02      	add	r7, sp, #8
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	603b      	str	r3, [r7, #0]
 8004afc:	4613      	mov	r3, r2
 8004afe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b04:	2b20      	cmp	r3, #32
 8004b06:	f040 8082 	bne.w	8004c0e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d002      	beq.n	8004b16 <HAL_UART_Transmit+0x26>
 8004b10:	88fb      	ldrh	r3, [r7, #6]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e07a      	b.n	8004c10 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d101      	bne.n	8004b28 <HAL_UART_Transmit+0x38>
 8004b24:	2302      	movs	r3, #2
 8004b26:	e073      	b.n	8004c10 <HAL_UART_Transmit+0x120>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2221      	movs	r2, #33	; 0x21
 8004b3c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b3e:	f7fc fc21 	bl	8001384 <HAL_GetTick>
 8004b42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	88fa      	ldrh	r2, [r7, #6]
 8004b48:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	88fa      	ldrh	r2, [r7, #6]
 8004b50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b5c:	d108      	bne.n	8004b70 <HAL_UART_Transmit+0x80>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d104      	bne.n	8004b70 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004b66:	2300      	movs	r3, #0
 8004b68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	61bb      	str	r3, [r7, #24]
 8004b6e:	e003      	b.n	8004b78 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b74:	2300      	movs	r3, #0
 8004b76:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004b80:	e02d      	b.n	8004bde <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	2180      	movs	r1, #128	; 0x80
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f000 fe50 	bl	8005832 <UART_WaitOnFlagUntilTimeout>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d001      	beq.n	8004b9c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e039      	b.n	8004c10 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10b      	bne.n	8004bba <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	881a      	ldrh	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bae:	b292      	uxth	r2, r2
 8004bb0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	3302      	adds	r3, #2
 8004bb6:	61bb      	str	r3, [r7, #24]
 8004bb8:	e008      	b.n	8004bcc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	781a      	ldrb	r2, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	b292      	uxth	r2, r2
 8004bc4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1cb      	bne.n	8004b82 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	2140      	movs	r1, #64	; 0x40
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f000 fe1c 	bl	8005832 <UART_WaitOnFlagUntilTimeout>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e005      	b.n	8004c10 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2220      	movs	r2, #32
 8004c08:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	e000      	b.n	8004c10 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004c0e:	2302      	movs	r3, #2
  }
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3720      	adds	r7, #32
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b08a      	sub	sp, #40	; 0x28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	4613      	mov	r3, r2
 8004c24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c2a:	2b20      	cmp	r3, #32
 8004c2c:	d13d      	bne.n	8004caa <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d002      	beq.n	8004c3a <HAL_UART_Receive_IT+0x22>
 8004c34:	88fb      	ldrh	r3, [r7, #6]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e036      	b.n	8004cac <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d101      	bne.n	8004c4c <HAL_UART_Receive_IT+0x34>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	e02f      	b.n	8004cac <HAL_UART_Receive_IT+0x94>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d018      	beq.n	8004c9a <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	e853 3f00 	ldrex	r3, [r3]
 8004c74:	613b      	str	r3, [r7, #16]
   return(result);
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	461a      	mov	r2, r3
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	623b      	str	r3, [r7, #32]
 8004c88:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8a:	69f9      	ldr	r1, [r7, #28]
 8004c8c:	6a3a      	ldr	r2, [r7, #32]
 8004c8e:	e841 2300 	strex	r3, r2, [r1]
 8004c92:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1e6      	bne.n	8004c68 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c9a:	88fb      	ldrh	r3, [r7, #6]
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	68b9      	ldr	r1, [r7, #8]
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f000 fe8b 	bl	80059bc <UART_Start_Receive_IT>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	e000      	b.n	8004cac <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004caa:	2302      	movs	r3, #2
  }
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3728      	adds	r7, #40	; 0x28
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b0ba      	sub	sp, #232	; 0xe8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004cda:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004cde:	f640 030f 	movw	r3, #2063	; 0x80f
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004ce8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d115      	bne.n	8004d1c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cf4:	f003 0320 	and.w	r3, r3, #32
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00f      	beq.n	8004d1c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d00:	f003 0320 	and.w	r3, r3, #32
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d009      	beq.n	8004d1c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 82a4 	beq.w	800525a <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	4798      	blx	r3
      }
      return;
 8004d1a:	e29e      	b.n	800525a <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004d1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 8117 	beq.w	8004f54 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004d26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d106      	bne.n	8004d40 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004d32:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004d36:	4b85      	ldr	r3, [pc, #532]	; (8004f4c <HAL_UART_IRQHandler+0x298>)
 8004d38:	4013      	ands	r3, r2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 810a 	beq.w	8004f54 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d011      	beq.n	8004d70 <HAL_UART_IRQHandler+0xbc>
 8004d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00b      	beq.n	8004d70 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d66:	f043 0201 	orr.w	r2, r3, #1
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d011      	beq.n	8004da0 <HAL_UART_IRQHandler+0xec>
 8004d7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00b      	beq.n	8004da0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d96:	f043 0204 	orr.w	r2, r3, #4
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d011      	beq.n	8004dd0 <HAL_UART_IRQHandler+0x11c>
 8004dac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00b      	beq.n	8004dd0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2204      	movs	r2, #4
 8004dbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dc6:	f043 0202 	orr.w	r2, r3, #2
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dd4:	f003 0308 	and.w	r3, r3, #8
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d017      	beq.n	8004e0c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004de0:	f003 0320 	and.w	r3, r3, #32
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d105      	bne.n	8004df4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004de8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00b      	beq.n	8004e0c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2208      	movs	r2, #8
 8004dfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e02:	f043 0208 	orr.w	r2, r3, #8
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d012      	beq.n	8004e3e <HAL_UART_IRQHandler+0x18a>
 8004e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00c      	beq.n	8004e3e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e34:	f043 0220 	orr.w	r2, r3, #32
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 820a 	beq.w	800525e <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e4e:	f003 0320 	and.w	r3, r3, #32
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00d      	beq.n	8004e72 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e5a:	f003 0320 	and.w	r3, r3, #32
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d007      	beq.n	8004e72 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e86:	2b40      	cmp	r3, #64	; 0x40
 8004e88:	d005      	beq.n	8004e96 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004e8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d04f      	beq.n	8004f36 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 fe3c 	bl	8005b14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea6:	2b40      	cmp	r3, #64	; 0x40
 8004ea8:	d141      	bne.n	8004f2e <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	3308      	adds	r3, #8
 8004eb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004eb8:	e853 3f00 	ldrex	r3, [r3]
 8004ebc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004ec0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ec4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ec8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	3308      	adds	r3, #8
 8004ed2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004ed6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004eda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ede:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004ee2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ee6:	e841 2300 	strex	r3, r2, [r1]
 8004eea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004eee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1d9      	bne.n	8004eaa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d013      	beq.n	8004f26 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f02:	4a13      	ldr	r2, [pc, #76]	; (8004f50 <HAL_UART_IRQHandler+0x29c>)
 8004f04:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fd fd42 	bl	8002994 <HAL_DMA_Abort_IT>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d017      	beq.n	8004f46 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004f20:	4610      	mov	r0, r2
 8004f22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f24:	e00f      	b.n	8004f46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f9ae 	bl	8005288 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f2c:	e00b      	b.n	8004f46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f9aa 	bl	8005288 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f34:	e007      	b.n	8004f46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f9a6 	bl	8005288 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004f44:	e18b      	b.n	800525e <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f46:	bf00      	nop
    return;
 8004f48:	e189      	b.n	800525e <HAL_UART_IRQHandler+0x5aa>
 8004f4a:	bf00      	nop
 8004f4c:	04000120 	.word	0x04000120
 8004f50:	08005bdb 	.word	0x08005bdb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	f040 8143 	bne.w	80051e4 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f62:	f003 0310 	and.w	r3, r3, #16
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f000 813c 	beq.w	80051e4 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f70:	f003 0310 	and.w	r3, r3, #16
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 8135 	beq.w	80051e4 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2210      	movs	r2, #16
 8004f80:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8c:	2b40      	cmp	r3, #64	; 0x40
 8004f8e:	f040 80b1 	bne.w	80050f4 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f9e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 815d 	beq.w	8005262 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004fae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	f080 8155 	bcs.w	8005262 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004fbe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	2b20      	cmp	r3, #32
 8004fca:	f000 8085 	beq.w	80050d8 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004fda:	e853 3f00 	ldrex	r3, [r3]
 8004fde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004fe2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004fe6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ff8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ffc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005000:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005004:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005008:	e841 2300 	strex	r3, r2, [r1]
 800500c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005010:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1da      	bne.n	8004fce <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	3308      	adds	r3, #8
 800501e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005020:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005022:	e853 3f00 	ldrex	r3, [r3]
 8005026:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005028:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800502a:	f023 0301 	bic.w	r3, r3, #1
 800502e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	3308      	adds	r3, #8
 8005038:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800503c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005040:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005042:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005044:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005048:	e841 2300 	strex	r3, r2, [r1]
 800504c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800504e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1e1      	bne.n	8005018 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	3308      	adds	r3, #8
 800505a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800505e:	e853 3f00 	ldrex	r3, [r3]
 8005062:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005064:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005066:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800506a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	3308      	adds	r3, #8
 8005074:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005078:	66fa      	str	r2, [r7, #108]	; 0x6c
 800507a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800507e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005080:	e841 2300 	strex	r3, r2, [r1]
 8005084:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005086:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1e3      	bne.n	8005054 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2220      	movs	r2, #32
 8005090:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a0:	e853 3f00 	ldrex	r3, [r3]
 80050a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80050a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050a8:	f023 0310 	bic.w	r3, r3, #16
 80050ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	461a      	mov	r2, r3
 80050b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80050bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80050c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050c2:	e841 2300 	strex	r3, r2, [r1]
 80050c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80050c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1e4      	bne.n	8005098 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fd fc25 	bl	8002922 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	4619      	mov	r1, r3
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 f8d5 	bl	800529c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80050f2:	e0b6      	b.n	8005262 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005100:	b29b      	uxth	r3, r3
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800510e:	b29b      	uxth	r3, r3
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 80a8 	beq.w	8005266 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8005116:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 80a3 	beq.w	8005266 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005128:	e853 3f00 	ldrex	r3, [r3]
 800512c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800512e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005130:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005134:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	461a      	mov	r2, r3
 800513e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005142:	647b      	str	r3, [r7, #68]	; 0x44
 8005144:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005146:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005148:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800514a:	e841 2300 	strex	r3, r2, [r1]
 800514e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1e4      	bne.n	8005120 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	3308      	adds	r3, #8
 800515c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	e853 3f00 	ldrex	r3, [r3]
 8005164:	623b      	str	r3, [r7, #32]
   return(result);
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	f023 0301 	bic.w	r3, r3, #1
 800516c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	3308      	adds	r3, #8
 8005176:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800517a:	633a      	str	r2, [r7, #48]	; 0x30
 800517c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005182:	e841 2300 	strex	r3, r2, [r1]
 8005186:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1e3      	bne.n	8005156 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2220      	movs	r2, #32
 8005192:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	e853 3f00 	ldrex	r3, [r3]
 80051ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f023 0310 	bic.w	r3, r3, #16
 80051b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	461a      	mov	r2, r3
 80051be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80051c2:	61fb      	str	r3, [r7, #28]
 80051c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c6:	69b9      	ldr	r1, [r7, #24]
 80051c8:	69fa      	ldr	r2, [r7, #28]
 80051ca:	e841 2300 	strex	r3, r2, [r1]
 80051ce:	617b      	str	r3, [r7, #20]
   return(result);
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1e4      	bne.n	80051a0 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80051da:	4619      	mov	r1, r3
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f85d 	bl	800529c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80051e2:	e040      	b.n	8005266 <HAL_UART_IRQHandler+0x5b2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80051e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00e      	beq.n	800520e <HAL_UART_IRQHandler+0x55a>
 80051f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d008      	beq.n	800520e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005204:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fe83 	bl	8005f12 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800520c:	e02e      	b.n	800526c <HAL_UART_IRQHandler+0x5b8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800520e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00e      	beq.n	8005238 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800521a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800521e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005222:	2b00      	cmp	r3, #0
 8005224:	d008      	beq.n	8005238 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800522a:	2b00      	cmp	r3, #0
 800522c:	d01d      	beq.n	800526a <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	4798      	blx	r3
    }
    return;
 8005236:	e018      	b.n	800526a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800523c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005240:	2b00      	cmp	r3, #0
 8005242:	d013      	beq.n	800526c <HAL_UART_IRQHandler+0x5b8>
 8005244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00d      	beq.n	800526c <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 fcd8 	bl	8005c06 <UART_EndTransmit_IT>
    return;
 8005256:	bf00      	nop
 8005258:	e008      	b.n	800526c <HAL_UART_IRQHandler+0x5b8>
      return;
 800525a:	bf00      	nop
 800525c:	e006      	b.n	800526c <HAL_UART_IRQHandler+0x5b8>
    return;
 800525e:	bf00      	nop
 8005260:	e004      	b.n	800526c <HAL_UART_IRQHandler+0x5b8>
      return;
 8005262:	bf00      	nop
 8005264:	e002      	b.n	800526c <HAL_UART_IRQHandler+0x5b8>
      return;
 8005266:	bf00      	nop
 8005268:	e000      	b.n	800526c <HAL_UART_IRQHandler+0x5b8>
    return;
 800526a:	bf00      	nop
  }

}
 800526c:	37e8      	adds	r7, #232	; 0xe8
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop

08005274 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	460b      	mov	r3, r1
 80052a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b088      	sub	sp, #32
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052bc:	2300      	movs	r3, #0
 80052be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	431a      	orrs	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	431a      	orrs	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	69db      	ldr	r3, [r3, #28]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	4baa      	ldr	r3, [pc, #680]	; (8005588 <UART_SetConfig+0x2d4>)
 80052e0:	4013      	ands	r3, r2
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	6812      	ldr	r2, [r2, #0]
 80052e6:	6979      	ldr	r1, [r7, #20]
 80052e8:	430b      	orrs	r3, r1
 80052ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68da      	ldr	r2, [r3, #12]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	430a      	orrs	r2, r1
 8005300:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a1b      	ldr	r3, [r3, #32]
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	4313      	orrs	r3, r2
 8005310:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	430a      	orrs	r2, r1
 8005324:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a98      	ldr	r2, [pc, #608]	; (800558c <UART_SetConfig+0x2d8>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d121      	bne.n	8005374 <UART_SetConfig+0xc0>
 8005330:	4b97      	ldr	r3, [pc, #604]	; (8005590 <UART_SetConfig+0x2dc>)
 8005332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005334:	f003 0303 	and.w	r3, r3, #3
 8005338:	2b03      	cmp	r3, #3
 800533a:	d817      	bhi.n	800536c <UART_SetConfig+0xb8>
 800533c:	a201      	add	r2, pc, #4	; (adr r2, 8005344 <UART_SetConfig+0x90>)
 800533e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005342:	bf00      	nop
 8005344:	08005355 	.word	0x08005355
 8005348:	08005361 	.word	0x08005361
 800534c:	08005367 	.word	0x08005367
 8005350:	0800535b 	.word	0x0800535b
 8005354:	2301      	movs	r3, #1
 8005356:	77fb      	strb	r3, [r7, #31]
 8005358:	e0b2      	b.n	80054c0 <UART_SetConfig+0x20c>
 800535a:	2302      	movs	r3, #2
 800535c:	77fb      	strb	r3, [r7, #31]
 800535e:	e0af      	b.n	80054c0 <UART_SetConfig+0x20c>
 8005360:	2304      	movs	r3, #4
 8005362:	77fb      	strb	r3, [r7, #31]
 8005364:	e0ac      	b.n	80054c0 <UART_SetConfig+0x20c>
 8005366:	2308      	movs	r3, #8
 8005368:	77fb      	strb	r3, [r7, #31]
 800536a:	e0a9      	b.n	80054c0 <UART_SetConfig+0x20c>
 800536c:	2310      	movs	r3, #16
 800536e:	77fb      	strb	r3, [r7, #31]
 8005370:	bf00      	nop
 8005372:	e0a5      	b.n	80054c0 <UART_SetConfig+0x20c>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a86      	ldr	r2, [pc, #536]	; (8005594 <UART_SetConfig+0x2e0>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d123      	bne.n	80053c6 <UART_SetConfig+0x112>
 800537e:	4b84      	ldr	r3, [pc, #528]	; (8005590 <UART_SetConfig+0x2dc>)
 8005380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005382:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800538a:	d012      	beq.n	80053b2 <UART_SetConfig+0xfe>
 800538c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005390:	d802      	bhi.n	8005398 <UART_SetConfig+0xe4>
 8005392:	2b00      	cmp	r3, #0
 8005394:	d007      	beq.n	80053a6 <UART_SetConfig+0xf2>
 8005396:	e012      	b.n	80053be <UART_SetConfig+0x10a>
 8005398:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800539c:	d00c      	beq.n	80053b8 <UART_SetConfig+0x104>
 800539e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80053a2:	d003      	beq.n	80053ac <UART_SetConfig+0xf8>
 80053a4:	e00b      	b.n	80053be <UART_SetConfig+0x10a>
 80053a6:	2300      	movs	r3, #0
 80053a8:	77fb      	strb	r3, [r7, #31]
 80053aa:	e089      	b.n	80054c0 <UART_SetConfig+0x20c>
 80053ac:	2302      	movs	r3, #2
 80053ae:	77fb      	strb	r3, [r7, #31]
 80053b0:	e086      	b.n	80054c0 <UART_SetConfig+0x20c>
 80053b2:	2304      	movs	r3, #4
 80053b4:	77fb      	strb	r3, [r7, #31]
 80053b6:	e083      	b.n	80054c0 <UART_SetConfig+0x20c>
 80053b8:	2308      	movs	r3, #8
 80053ba:	77fb      	strb	r3, [r7, #31]
 80053bc:	e080      	b.n	80054c0 <UART_SetConfig+0x20c>
 80053be:	2310      	movs	r3, #16
 80053c0:	77fb      	strb	r3, [r7, #31]
 80053c2:	bf00      	nop
 80053c4:	e07c      	b.n	80054c0 <UART_SetConfig+0x20c>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a73      	ldr	r2, [pc, #460]	; (8005598 <UART_SetConfig+0x2e4>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d123      	bne.n	8005418 <UART_SetConfig+0x164>
 80053d0:	4b6f      	ldr	r3, [pc, #444]	; (8005590 <UART_SetConfig+0x2dc>)
 80053d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80053d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053dc:	d012      	beq.n	8005404 <UART_SetConfig+0x150>
 80053de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053e2:	d802      	bhi.n	80053ea <UART_SetConfig+0x136>
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d007      	beq.n	80053f8 <UART_SetConfig+0x144>
 80053e8:	e012      	b.n	8005410 <UART_SetConfig+0x15c>
 80053ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80053ee:	d00c      	beq.n	800540a <UART_SetConfig+0x156>
 80053f0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80053f4:	d003      	beq.n	80053fe <UART_SetConfig+0x14a>
 80053f6:	e00b      	b.n	8005410 <UART_SetConfig+0x15c>
 80053f8:	2300      	movs	r3, #0
 80053fa:	77fb      	strb	r3, [r7, #31]
 80053fc:	e060      	b.n	80054c0 <UART_SetConfig+0x20c>
 80053fe:	2302      	movs	r3, #2
 8005400:	77fb      	strb	r3, [r7, #31]
 8005402:	e05d      	b.n	80054c0 <UART_SetConfig+0x20c>
 8005404:	2304      	movs	r3, #4
 8005406:	77fb      	strb	r3, [r7, #31]
 8005408:	e05a      	b.n	80054c0 <UART_SetConfig+0x20c>
 800540a:	2308      	movs	r3, #8
 800540c:	77fb      	strb	r3, [r7, #31]
 800540e:	e057      	b.n	80054c0 <UART_SetConfig+0x20c>
 8005410:	2310      	movs	r3, #16
 8005412:	77fb      	strb	r3, [r7, #31]
 8005414:	bf00      	nop
 8005416:	e053      	b.n	80054c0 <UART_SetConfig+0x20c>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a5f      	ldr	r2, [pc, #380]	; (800559c <UART_SetConfig+0x2e8>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d123      	bne.n	800546a <UART_SetConfig+0x1b6>
 8005422:	4b5b      	ldr	r3, [pc, #364]	; (8005590 <UART_SetConfig+0x2dc>)
 8005424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005426:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800542a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800542e:	d012      	beq.n	8005456 <UART_SetConfig+0x1a2>
 8005430:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005434:	d802      	bhi.n	800543c <UART_SetConfig+0x188>
 8005436:	2b00      	cmp	r3, #0
 8005438:	d007      	beq.n	800544a <UART_SetConfig+0x196>
 800543a:	e012      	b.n	8005462 <UART_SetConfig+0x1ae>
 800543c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005440:	d00c      	beq.n	800545c <UART_SetConfig+0x1a8>
 8005442:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005446:	d003      	beq.n	8005450 <UART_SetConfig+0x19c>
 8005448:	e00b      	b.n	8005462 <UART_SetConfig+0x1ae>
 800544a:	2300      	movs	r3, #0
 800544c:	77fb      	strb	r3, [r7, #31]
 800544e:	e037      	b.n	80054c0 <UART_SetConfig+0x20c>
 8005450:	2302      	movs	r3, #2
 8005452:	77fb      	strb	r3, [r7, #31]
 8005454:	e034      	b.n	80054c0 <UART_SetConfig+0x20c>
 8005456:	2304      	movs	r3, #4
 8005458:	77fb      	strb	r3, [r7, #31]
 800545a:	e031      	b.n	80054c0 <UART_SetConfig+0x20c>
 800545c:	2308      	movs	r3, #8
 800545e:	77fb      	strb	r3, [r7, #31]
 8005460:	e02e      	b.n	80054c0 <UART_SetConfig+0x20c>
 8005462:	2310      	movs	r3, #16
 8005464:	77fb      	strb	r3, [r7, #31]
 8005466:	bf00      	nop
 8005468:	e02a      	b.n	80054c0 <UART_SetConfig+0x20c>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a4c      	ldr	r2, [pc, #304]	; (80055a0 <UART_SetConfig+0x2ec>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d123      	bne.n	80054bc <UART_SetConfig+0x208>
 8005474:	4b46      	ldr	r3, [pc, #280]	; (8005590 <UART_SetConfig+0x2dc>)
 8005476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005478:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800547c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005480:	d012      	beq.n	80054a8 <UART_SetConfig+0x1f4>
 8005482:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005486:	d802      	bhi.n	800548e <UART_SetConfig+0x1da>
 8005488:	2b00      	cmp	r3, #0
 800548a:	d007      	beq.n	800549c <UART_SetConfig+0x1e8>
 800548c:	e012      	b.n	80054b4 <UART_SetConfig+0x200>
 800548e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005492:	d00c      	beq.n	80054ae <UART_SetConfig+0x1fa>
 8005494:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005498:	d003      	beq.n	80054a2 <UART_SetConfig+0x1ee>
 800549a:	e00b      	b.n	80054b4 <UART_SetConfig+0x200>
 800549c:	2300      	movs	r3, #0
 800549e:	77fb      	strb	r3, [r7, #31]
 80054a0:	e00e      	b.n	80054c0 <UART_SetConfig+0x20c>
 80054a2:	2302      	movs	r3, #2
 80054a4:	77fb      	strb	r3, [r7, #31]
 80054a6:	e00b      	b.n	80054c0 <UART_SetConfig+0x20c>
 80054a8:	2304      	movs	r3, #4
 80054aa:	77fb      	strb	r3, [r7, #31]
 80054ac:	e008      	b.n	80054c0 <UART_SetConfig+0x20c>
 80054ae:	2308      	movs	r3, #8
 80054b0:	77fb      	strb	r3, [r7, #31]
 80054b2:	e005      	b.n	80054c0 <UART_SetConfig+0x20c>
 80054b4:	2310      	movs	r3, #16
 80054b6:	77fb      	strb	r3, [r7, #31]
 80054b8:	bf00      	nop
 80054ba:	e001      	b.n	80054c0 <UART_SetConfig+0x20c>
 80054bc:	2310      	movs	r3, #16
 80054be:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	69db      	ldr	r3, [r3, #28]
 80054c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054c8:	d16e      	bne.n	80055a8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80054ca:	7ffb      	ldrb	r3, [r7, #31]
 80054cc:	2b08      	cmp	r3, #8
 80054ce:	d828      	bhi.n	8005522 <UART_SetConfig+0x26e>
 80054d0:	a201      	add	r2, pc, #4	; (adr r2, 80054d8 <UART_SetConfig+0x224>)
 80054d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d6:	bf00      	nop
 80054d8:	080054fd 	.word	0x080054fd
 80054dc:	08005505 	.word	0x08005505
 80054e0:	0800550d 	.word	0x0800550d
 80054e4:	08005523 	.word	0x08005523
 80054e8:	08005513 	.word	0x08005513
 80054ec:	08005523 	.word	0x08005523
 80054f0:	08005523 	.word	0x08005523
 80054f4:	08005523 	.word	0x08005523
 80054f8:	0800551b 	.word	0x0800551b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054fc:	f7fe fd7c 	bl	8003ff8 <HAL_RCC_GetPCLK1Freq>
 8005500:	61b8      	str	r0, [r7, #24]
        break;
 8005502:	e013      	b.n	800552c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005504:	f7fe fd9a 	bl	800403c <HAL_RCC_GetPCLK2Freq>
 8005508:	61b8      	str	r0, [r7, #24]
        break;
 800550a:	e00f      	b.n	800552c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800550c:	4b25      	ldr	r3, [pc, #148]	; (80055a4 <UART_SetConfig+0x2f0>)
 800550e:	61bb      	str	r3, [r7, #24]
        break;
 8005510:	e00c      	b.n	800552c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005512:	f7fe fcfb 	bl	8003f0c <HAL_RCC_GetSysClockFreq>
 8005516:	61b8      	str	r0, [r7, #24]
        break;
 8005518:	e008      	b.n	800552c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800551a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800551e:	61bb      	str	r3, [r7, #24]
        break;
 8005520:	e004      	b.n	800552c <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8005522:	2300      	movs	r3, #0
 8005524:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	77bb      	strb	r3, [r7, #30]
        break;
 800552a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 8086 	beq.w	8005640 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	005a      	lsls	r2, r3, #1
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	085b      	lsrs	r3, r3, #1
 800553e:	441a      	add	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	fbb2 f3f3 	udiv	r3, r2, r3
 8005548:	b29b      	uxth	r3, r3
 800554a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	2b0f      	cmp	r3, #15
 8005550:	d916      	bls.n	8005580 <UART_SetConfig+0x2cc>
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005558:	d212      	bcs.n	8005580 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	b29b      	uxth	r3, r3
 800555e:	f023 030f 	bic.w	r3, r3, #15
 8005562:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	085b      	lsrs	r3, r3, #1
 8005568:	b29b      	uxth	r3, r3
 800556a:	f003 0307 	and.w	r3, r3, #7
 800556e:	b29a      	uxth	r2, r3
 8005570:	89fb      	ldrh	r3, [r7, #14]
 8005572:	4313      	orrs	r3, r2
 8005574:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	89fa      	ldrh	r2, [r7, #14]
 800557c:	60da      	str	r2, [r3, #12]
 800557e:	e05f      	b.n	8005640 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	77bb      	strb	r3, [r7, #30]
 8005584:	e05c      	b.n	8005640 <UART_SetConfig+0x38c>
 8005586:	bf00      	nop
 8005588:	efff69f3 	.word	0xefff69f3
 800558c:	40013800 	.word	0x40013800
 8005590:	40021000 	.word	0x40021000
 8005594:	40004400 	.word	0x40004400
 8005598:	40004800 	.word	0x40004800
 800559c:	40004c00 	.word	0x40004c00
 80055a0:	40005000 	.word	0x40005000
 80055a4:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 80055a8:	7ffb      	ldrb	r3, [r7, #31]
 80055aa:	2b08      	cmp	r3, #8
 80055ac:	d827      	bhi.n	80055fe <UART_SetConfig+0x34a>
 80055ae:	a201      	add	r2, pc, #4	; (adr r2, 80055b4 <UART_SetConfig+0x300>)
 80055b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b4:	080055d9 	.word	0x080055d9
 80055b8:	080055e1 	.word	0x080055e1
 80055bc:	080055e9 	.word	0x080055e9
 80055c0:	080055ff 	.word	0x080055ff
 80055c4:	080055ef 	.word	0x080055ef
 80055c8:	080055ff 	.word	0x080055ff
 80055cc:	080055ff 	.word	0x080055ff
 80055d0:	080055ff 	.word	0x080055ff
 80055d4:	080055f7 	.word	0x080055f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055d8:	f7fe fd0e 	bl	8003ff8 <HAL_RCC_GetPCLK1Freq>
 80055dc:	61b8      	str	r0, [r7, #24]
        break;
 80055de:	e013      	b.n	8005608 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055e0:	f7fe fd2c 	bl	800403c <HAL_RCC_GetPCLK2Freq>
 80055e4:	61b8      	str	r0, [r7, #24]
        break;
 80055e6:	e00f      	b.n	8005608 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055e8:	4b1b      	ldr	r3, [pc, #108]	; (8005658 <UART_SetConfig+0x3a4>)
 80055ea:	61bb      	str	r3, [r7, #24]
        break;
 80055ec:	e00c      	b.n	8005608 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055ee:	f7fe fc8d 	bl	8003f0c <HAL_RCC_GetSysClockFreq>
 80055f2:	61b8      	str	r0, [r7, #24]
        break;
 80055f4:	e008      	b.n	8005608 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055fa:	61bb      	str	r3, [r7, #24]
        break;
 80055fc:	e004      	b.n	8005608 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80055fe:	2300      	movs	r3, #0
 8005600:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	77bb      	strb	r3, [r7, #30]
        break;
 8005606:	bf00      	nop
    }

    if (pclk != 0U)
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d018      	beq.n	8005640 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	085a      	lsrs	r2, r3, #1
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	441a      	add	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005620:	b29b      	uxth	r3, r3
 8005622:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	2b0f      	cmp	r3, #15
 8005628:	d908      	bls.n	800563c <UART_SetConfig+0x388>
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005630:	d204      	bcs.n	800563c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	60da      	str	r2, [r3, #12]
 800563a:	e001      	b.n	8005640 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800564c:	7fbb      	ldrb	r3, [r7, #30]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3720      	adds	r7, #32
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	007a1200 	.word	0x007a1200

0800565c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00a      	beq.n	8005686 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	430a      	orrs	r2, r1
 8005684:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00a      	beq.n	80056a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	430a      	orrs	r2, r1
 80056a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ac:	f003 0304 	and.w	r3, r3, #4
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00a      	beq.n	80056ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	f003 0308 	and.w	r3, r3, #8
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00a      	beq.n	80056ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	430a      	orrs	r2, r1
 80056ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f0:	f003 0310 	and.w	r3, r3, #16
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00a      	beq.n	800570e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	430a      	orrs	r2, r1
 800570c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	f003 0320 	and.w	r3, r3, #32
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00a      	beq.n	8005730 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	430a      	orrs	r2, r1
 800572e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005738:	2b00      	cmp	r3, #0
 800573a:	d01a      	beq.n	8005772 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005756:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800575a:	d10a      	bne.n	8005772 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	430a      	orrs	r2, r1
 8005770:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00a      	beq.n	8005794 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	430a      	orrs	r2, r1
 8005792:	605a      	str	r2, [r3, #4]
  }
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af02      	add	r7, sp, #8
 80057a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057b0:	f7fb fde8 	bl	8001384 <HAL_GetTick>
 80057b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0308 	and.w	r3, r3, #8
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	d10e      	bne.n	80057e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057c8:	9300      	str	r3, [sp, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f82d 	bl	8005832 <UART_WaitOnFlagUntilTimeout>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e023      	b.n	800582a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0304 	and.w	r3, r3, #4
 80057ec:	2b04      	cmp	r3, #4
 80057ee:	d10e      	bne.n	800580e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057f4:	9300      	str	r3, [sp, #0]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f817 	bl	8005832 <UART_WaitOnFlagUntilTimeout>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d001      	beq.n	800580e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e00d      	b.n	800582a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2220      	movs	r2, #32
 8005812:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2220      	movs	r2, #32
 8005818:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b09c      	sub	sp, #112	; 0x70
 8005836:	af00      	add	r7, sp, #0
 8005838:	60f8      	str	r0, [r7, #12]
 800583a:	60b9      	str	r1, [r7, #8]
 800583c:	603b      	str	r3, [r7, #0]
 800583e:	4613      	mov	r3, r2
 8005840:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005842:	e0a5      	b.n	8005990 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005844:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584a:	f000 80a1 	beq.w	8005990 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800584e:	f7fb fd99 	bl	8001384 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800585a:	429a      	cmp	r2, r3
 800585c:	d302      	bcc.n	8005864 <UART_WaitOnFlagUntilTimeout+0x32>
 800585e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005860:	2b00      	cmp	r3, #0
 8005862:	d13e      	bne.n	80058e2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800586c:	e853 3f00 	ldrex	r3, [r3]
 8005870:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005874:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005878:	667b      	str	r3, [r7, #100]	; 0x64
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	461a      	mov	r2, r3
 8005880:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005882:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005884:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005886:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005888:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800588a:	e841 2300 	strex	r3, r2, [r1]
 800588e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005890:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1e6      	bne.n	8005864 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3308      	adds	r3, #8
 800589c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058a0:	e853 3f00 	ldrex	r3, [r3]
 80058a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a8:	f023 0301 	bic.w	r3, r3, #1
 80058ac:	663b      	str	r3, [r7, #96]	; 0x60
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	3308      	adds	r3, #8
 80058b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80058b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80058b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80058bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058be:	e841 2300 	strex	r3, r2, [r1]
 80058c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80058c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1e5      	bne.n	8005896 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2220      	movs	r2, #32
 80058ce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2220      	movs	r2, #32
 80058d4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e067      	b.n	80059b2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0304 	and.w	r3, r3, #4
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d04f      	beq.n	8005990 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058fe:	d147      	bne.n	8005990 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005908:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005912:	e853 3f00 	ldrex	r3, [r3]
 8005916:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800591e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	461a      	mov	r2, r3
 8005926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005928:	637b      	str	r3, [r7, #52]	; 0x34
 800592a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800592e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005930:	e841 2300 	strex	r3, r2, [r1]
 8005934:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1e6      	bne.n	800590a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	3308      	adds	r3, #8
 8005942:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	e853 3f00 	ldrex	r3, [r3]
 800594a:	613b      	str	r3, [r7, #16]
   return(result);
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	f023 0301 	bic.w	r3, r3, #1
 8005952:	66bb      	str	r3, [r7, #104]	; 0x68
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	3308      	adds	r3, #8
 800595a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800595c:	623a      	str	r2, [r7, #32]
 800595e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005960:	69f9      	ldr	r1, [r7, #28]
 8005962:	6a3a      	ldr	r2, [r7, #32]
 8005964:	e841 2300 	strex	r3, r2, [r1]
 8005968:	61bb      	str	r3, [r7, #24]
   return(result);
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1e5      	bne.n	800593c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2220      	movs	r2, #32
 8005974:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2220      	movs	r2, #32
 800597a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2220      	movs	r2, #32
 8005980:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e010      	b.n	80059b2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	69da      	ldr	r2, [r3, #28]
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	4013      	ands	r3, r2
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	429a      	cmp	r2, r3
 800599e:	bf0c      	ite	eq
 80059a0:	2301      	moveq	r3, #1
 80059a2:	2300      	movne	r3, #0
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	461a      	mov	r2, r3
 80059a8:	79fb      	ldrb	r3, [r7, #7]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	f43f af4a 	beq.w	8005844 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3770      	adds	r7, #112	; 0x70
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
	...

080059bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059bc:	b480      	push	{r7}
 80059be:	b091      	sub	sp, #68	; 0x44
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	4613      	mov	r3, r2
 80059c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	88fa      	ldrh	r2, [r7, #6]
 80059d4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	88fa      	ldrh	r2, [r7, #6]
 80059dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ee:	d10e      	bne.n	8005a0e <UART_Start_Receive_IT+0x52>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d105      	bne.n	8005a04 <UART_Start_Receive_IT+0x48>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80059fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a02:	e02d      	b.n	8005a60 <UART_Start_Receive_IT+0xa4>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	22ff      	movs	r2, #255	; 0xff
 8005a08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a0c:	e028      	b.n	8005a60 <UART_Start_Receive_IT+0xa4>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10d      	bne.n	8005a32 <UART_Start_Receive_IT+0x76>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d104      	bne.n	8005a28 <UART_Start_Receive_IT+0x6c>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	22ff      	movs	r2, #255	; 0xff
 8005a22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a26:	e01b      	b.n	8005a60 <UART_Start_Receive_IT+0xa4>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	227f      	movs	r2, #127	; 0x7f
 8005a2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a30:	e016      	b.n	8005a60 <UART_Start_Receive_IT+0xa4>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a3a:	d10d      	bne.n	8005a58 <UART_Start_Receive_IT+0x9c>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d104      	bne.n	8005a4e <UART_Start_Receive_IT+0x92>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	227f      	movs	r2, #127	; 0x7f
 8005a48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a4c:	e008      	b.n	8005a60 <UART_Start_Receive_IT+0xa4>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	223f      	movs	r2, #63	; 0x3f
 8005a52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a56:	e003      	b.n	8005a60 <UART_Start_Receive_IT+0xa4>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2222      	movs	r2, #34	; 0x22
 8005a6c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	3308      	adds	r3, #8
 8005a74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a78:	e853 3f00 	ldrex	r3, [r3]
 8005a7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a80:	f043 0301 	orr.w	r3, r3, #1
 8005a84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	3308      	adds	r3, #8
 8005a8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a8e:	637a      	str	r2, [r7, #52]	; 0x34
 8005a90:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a96:	e841 2300 	strex	r3, r2, [r1]
 8005a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1e5      	bne.n	8005a6e <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aaa:	d107      	bne.n	8005abc <UART_Start_Receive_IT+0x100>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d103      	bne.n	8005abc <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	4a15      	ldr	r2, [pc, #84]	; (8005b0c <UART_Start_Receive_IT+0x150>)
 8005ab8:	665a      	str	r2, [r3, #100]	; 0x64
 8005aba:	e002      	b.n	8005ac2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4a14      	ldr	r2, [pc, #80]	; (8005b10 <UART_Start_Receive_IT+0x154>)
 8005ac0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	e853 3f00 	ldrex	r3, [r3]
 8005ad6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005ade:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae8:	623b      	str	r3, [r7, #32]
 8005aea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aec:	69f9      	ldr	r1, [r7, #28]
 8005aee:	6a3a      	ldr	r2, [r7, #32]
 8005af0:	e841 2300 	strex	r3, r2, [r1]
 8005af4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1e6      	bne.n	8005aca <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3744      	adds	r7, #68	; 0x44
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	08005db7 	.word	0x08005db7
 8005b10:	08005c5b 	.word	0x08005c5b

08005b14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b095      	sub	sp, #84	; 0x54
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b24:	e853 3f00 	ldrex	r3, [r3]
 8005b28:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	461a      	mov	r2, r3
 8005b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b3a:	643b      	str	r3, [r7, #64]	; 0x40
 8005b3c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b42:	e841 2300 	strex	r3, r2, [r1]
 8005b46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1e6      	bne.n	8005b1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	3308      	adds	r3, #8
 8005b54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	e853 3f00 	ldrex	r3, [r3]
 8005b5c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	f023 0301 	bic.w	r3, r3, #1
 8005b64:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	3308      	adds	r3, #8
 8005b6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b76:	e841 2300 	strex	r3, r2, [r1]
 8005b7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1e5      	bne.n	8005b4e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d118      	bne.n	8005bbc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	e853 3f00 	ldrex	r3, [r3]
 8005b96:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	f023 0310 	bic.w	r3, r3, #16
 8005b9e:	647b      	str	r3, [r7, #68]	; 0x44
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ba8:	61bb      	str	r3, [r7, #24]
 8005baa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bac:	6979      	ldr	r1, [r7, #20]
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	e841 2300 	strex	r3, r2, [r1]
 8005bb4:	613b      	str	r3, [r7, #16]
   return(result);
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1e6      	bne.n	8005b8a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2220      	movs	r2, #32
 8005bc0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005bce:	bf00      	nop
 8005bd0:	3754      	adds	r7, #84	; 0x54
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b084      	sub	sp, #16
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f7ff fb45 	bl	8005288 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bfe:	bf00      	nop
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b088      	sub	sp, #32
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	e853 3f00 	ldrex	r3, [r3]
 8005c1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c22:	61fb      	str	r3, [r7, #28]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	461a      	mov	r2, r3
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	61bb      	str	r3, [r7, #24]
 8005c2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c30:	6979      	ldr	r1, [r7, #20]
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	e841 2300 	strex	r3, r2, [r1]
 8005c38:	613b      	str	r3, [r7, #16]
   return(result);
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1e6      	bne.n	8005c0e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2220      	movs	r2, #32
 8005c44:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f7ff fb11 	bl	8005274 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c52:	bf00      	nop
 8005c54:	3720      	adds	r7, #32
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b096      	sub	sp, #88	; 0x58
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c68:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c70:	2b22      	cmp	r3, #34	; 0x22
 8005c72:	f040 8094 	bne.w	8005d9e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005c7c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005c80:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005c84:	b2d9      	uxtb	r1, r3
 8005c86:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c90:	400a      	ands	r2, r1
 8005c92:	b2d2      	uxtb	r2, r2
 8005c94:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c9a:	1c5a      	adds	r2, r3, #1
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d177      	bne.n	8005dae <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc6:	e853 3f00 	ldrex	r3, [r3]
 8005cca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cd2:	653b      	str	r3, [r7, #80]	; 0x50
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	461a      	mov	r2, r3
 8005cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cdc:	647b      	str	r3, [r7, #68]	; 0x44
 8005cde:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ce2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ce4:	e841 2300 	strex	r3, r2, [r1]
 8005ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1e6      	bne.n	8005cbe <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	3308      	adds	r3, #8
 8005cf6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	e853 3f00 	ldrex	r3, [r3]
 8005cfe:	623b      	str	r3, [r7, #32]
   return(result);
 8005d00:	6a3b      	ldr	r3, [r7, #32]
 8005d02:	f023 0301 	bic.w	r3, r3, #1
 8005d06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	3308      	adds	r3, #8
 8005d0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d10:	633a      	str	r2, [r7, #48]	; 0x30
 8005d12:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d18:	e841 2300 	strex	r3, r2, [r1]
 8005d1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1e5      	bne.n	8005cf0 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2220      	movs	r2, #32
 8005d28:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d12e      	bne.n	8005d96 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	e853 3f00 	ldrex	r3, [r3]
 8005d4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f023 0310 	bic.w	r3, r3, #16
 8005d52:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	461a      	mov	r2, r3
 8005d5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d5c:	61fb      	str	r3, [r7, #28]
 8005d5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d60:	69b9      	ldr	r1, [r7, #24]
 8005d62:	69fa      	ldr	r2, [r7, #28]
 8005d64:	e841 2300 	strex	r3, r2, [r1]
 8005d68:	617b      	str	r3, [r7, #20]
   return(result);
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1e6      	bne.n	8005d3e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	f003 0310 	and.w	r3, r3, #16
 8005d7a:	2b10      	cmp	r3, #16
 8005d7c:	d103      	bne.n	8005d86 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2210      	movs	r2, #16
 8005d84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7ff fa84 	bl	800529c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d94:	e00b      	b.n	8005dae <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7fa fa1c 	bl	80001d4 <HAL_UART_RxCpltCallback>
}
 8005d9c:	e007      	b.n	8005dae <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	699a      	ldr	r2, [r3, #24]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f042 0208 	orr.w	r2, r2, #8
 8005dac:	619a      	str	r2, [r3, #24]
}
 8005dae:	bf00      	nop
 8005db0:	3758      	adds	r7, #88	; 0x58
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b096      	sub	sp, #88	; 0x58
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005dc4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dcc:	2b22      	cmp	r3, #34	; 0x22
 8005dce:	f040 8094 	bne.w	8005efa <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005dd8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005de2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005de6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005dea:	4013      	ands	r3, r2
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005df0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005df6:	1c9a      	adds	r2, r3, #2
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	3b01      	subs	r3, #1
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d177      	bne.n	8005f0a <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e22:	e853 3f00 	ldrex	r3, [r3]
 8005e26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	461a      	mov	r2, r3
 8005e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e38:	643b      	str	r3, [r7, #64]	; 0x40
 8005e3a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e40:	e841 2300 	strex	r3, r2, [r1]
 8005e44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1e6      	bne.n	8005e1a <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	3308      	adds	r3, #8
 8005e52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e54:	6a3b      	ldr	r3, [r7, #32]
 8005e56:	e853 3f00 	ldrex	r3, [r3]
 8005e5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	f023 0301 	bic.w	r3, r3, #1
 8005e62:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	3308      	adds	r3, #8
 8005e6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e74:	e841 2300 	strex	r3, r2, [r1]
 8005e78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1e5      	bne.n	8005e4c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2220      	movs	r2, #32
 8005e84:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d12e      	bne.n	8005ef2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	e853 3f00 	ldrex	r3, [r3]
 8005ea6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	f023 0310 	bic.w	r3, r3, #16
 8005eae:	647b      	str	r3, [r7, #68]	; 0x44
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eb8:	61bb      	str	r3, [r7, #24]
 8005eba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebc:	6979      	ldr	r1, [r7, #20]
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	e841 2300 	strex	r3, r2, [r1]
 8005ec4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1e6      	bne.n	8005e9a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	69db      	ldr	r3, [r3, #28]
 8005ed2:	f003 0310 	and.w	r3, r3, #16
 8005ed6:	2b10      	cmp	r3, #16
 8005ed8:	d103      	bne.n	8005ee2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2210      	movs	r2, #16
 8005ee0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005ee8:	4619      	mov	r1, r3
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f7ff f9d6 	bl	800529c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ef0:	e00b      	b.n	8005f0a <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f7fa f96e 	bl	80001d4 <HAL_UART_RxCpltCallback>
}
 8005ef8:	e007      	b.n	8005f0a <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	699a      	ldr	r2, [r3, #24]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f042 0208 	orr.w	r2, r2, #8
 8005f08:	619a      	str	r2, [r3, #24]
}
 8005f0a:	bf00      	nop
 8005f0c:	3758      	adds	r7, #88	; 0x58
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005f12:	b480      	push	{r7}
 8005f14:	b083      	sub	sp, #12
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005f1a:	bf00      	nop
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
	...

08005f28 <__libc_init_array>:
 8005f28:	b570      	push	{r4, r5, r6, lr}
 8005f2a:	4e0d      	ldr	r6, [pc, #52]	; (8005f60 <__libc_init_array+0x38>)
 8005f2c:	4c0d      	ldr	r4, [pc, #52]	; (8005f64 <__libc_init_array+0x3c>)
 8005f2e:	1ba4      	subs	r4, r4, r6
 8005f30:	10a4      	asrs	r4, r4, #2
 8005f32:	2500      	movs	r5, #0
 8005f34:	42a5      	cmp	r5, r4
 8005f36:	d109      	bne.n	8005f4c <__libc_init_array+0x24>
 8005f38:	4e0b      	ldr	r6, [pc, #44]	; (8005f68 <__libc_init_array+0x40>)
 8005f3a:	4c0c      	ldr	r4, [pc, #48]	; (8005f6c <__libc_init_array+0x44>)
 8005f3c:	f000 f820 	bl	8005f80 <_init>
 8005f40:	1ba4      	subs	r4, r4, r6
 8005f42:	10a4      	asrs	r4, r4, #2
 8005f44:	2500      	movs	r5, #0
 8005f46:	42a5      	cmp	r5, r4
 8005f48:	d105      	bne.n	8005f56 <__libc_init_array+0x2e>
 8005f4a:	bd70      	pop	{r4, r5, r6, pc}
 8005f4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f50:	4798      	blx	r3
 8005f52:	3501      	adds	r5, #1
 8005f54:	e7ee      	b.n	8005f34 <__libc_init_array+0xc>
 8005f56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f5a:	4798      	blx	r3
 8005f5c:	3501      	adds	r5, #1
 8005f5e:	e7f2      	b.n	8005f46 <__libc_init_array+0x1e>
 8005f60:	08005fec 	.word	0x08005fec
 8005f64:	08005fec 	.word	0x08005fec
 8005f68:	08005fec 	.word	0x08005fec
 8005f6c:	08005ff0 	.word	0x08005ff0

08005f70 <memset>:
 8005f70:	4402      	add	r2, r0
 8005f72:	4603      	mov	r3, r0
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d100      	bne.n	8005f7a <memset+0xa>
 8005f78:	4770      	bx	lr
 8005f7a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f7e:	e7f9      	b.n	8005f74 <memset+0x4>

08005f80 <_init>:
 8005f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f82:	bf00      	nop
 8005f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f86:	bc08      	pop	{r3}
 8005f88:	469e      	mov	lr, r3
 8005f8a:	4770      	bx	lr

08005f8c <_fini>:
 8005f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8e:	bf00      	nop
 8005f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f92:	bc08      	pop	{r3}
 8005f94:	469e      	mov	lr, r3
 8005f96:	4770      	bx	lr
